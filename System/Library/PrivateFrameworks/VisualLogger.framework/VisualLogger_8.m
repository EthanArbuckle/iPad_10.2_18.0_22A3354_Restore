void sub_20B221A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v22;
  char *v24;
  uint64_t v25;

  v24 = a22;
  if (a22 == v22)
  {
    v25 = 4;
    v24 = &a19;
  }
  else
  {
    if (!a22)
    {
      sub_20B223CF4(&a9);
      _Unwind_Resume(a1);
    }
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
  sub_20B223CF4(&a9);
  _Unwind_Resume(a1);
}

void sub_20B221AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v12 = *(_QWORD **)(v10 - 64);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 88);
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:
  sub_20B223DE8((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B221B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  std::__shared_weak_count *v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20B223D9C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v9);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B221B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  std::__shared_weak_count *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  MEMORY[0x20BD3583C](v10, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v9);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B221B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  std::__shared_weak_count *v17;

  std::__shared_weak_count::__release_weak(v17);
  sub_20AEC147C((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20B221B98(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20B221BA8(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20B221BB4(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20B221BC4(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count_vtbl *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count **v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::mutex **v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t **v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  char *v55;
  std::string *v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count_vtbl *v62;
  std::__shared_weak_count_vtbl *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count_vtbl *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  char *v71;
  __int128 *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  __int128 *v77;
  std::string *v78;
  std::runtime_error *exception;
  std::runtime_error *v80;
  uint64_t **v81;
  std::__shared_weak_count *v82[2];
  _QWORD *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::runtime_error v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  __int128 v89;
  _QWORD *v90;
  __int128 *v91;
  _QWORD v92[2];
  std::string v93;
  std::string *v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v89 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v89 + 1) = 45;
    v76 = (_QWORD *)a1[6];
    v75 = a1 + 6;
    v74 = v76;
    v77 = (__int128 *)*((unsigned __int8 *)v75 + 23);
    if ((char)v77 < 0)
      v77 = (__int128 *)v75[1];
    else
      v74 = v75;
    v90 = v74;
    v91 = v77;
    sub_20AECFDF8((uint64_t)&v89, (uint64_t)v92, 0, 0, &v93);
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v78 = &v93;
    else
      v78 = (std::string *)v93.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v86, (const char *)v78);
    v86.__vftable = (std::runtime_error_vtbl *)&off_24C41C9B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v80 = std::runtime_error::runtime_error(exception, &v86);
    v80->__vftable = (std::runtime_error_vtbl *)&off_24C41C9B8;
    __cxa_throw(v80, (struct type_info *)&unk_24C41C9D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C412858;
    v6[1].__vftable = *a3;
    v85 = v6;
    v83 = &v6[1].__vftable;
    v84 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x40uLL);
    v10 = v9;
    v9->__shared_owners_ = 0;
    v11 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F3C38;
    v12 = (uint64_t)a2[1];
    v9[1].__vftable = *a2;
    v13 = v9 + 1;
    v9[1].__shared_owners_ = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v17 = a2[3];
    v16 = (uint64_t)a2[4];
    v9[1].__shared_weak_owners_ = (uint64_t)&off_24C411E78;
    v9[2].__vftable = v17;
    v9[2].__shared_owners_ = v16;
    if (v16)
    {
      v18 = (unint64_t *)(v16 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v87 = v9 + 1;
    v88 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v21 = __ldxr(p_shared_weak_owners);
    while (__stxr(v21 + 1, p_shared_weak_owners));
    v22 = (uint64_t *)a1[18];
    v23 = (_QWORD *)operator new();
    *v23 = v22 + 7;
    std::mutex::lock((std::mutex *)(v22 + 7));
    *(_QWORD *)&v89 = v23;
    *((_QWORD *)&v89 + 1) = v22;
    if (!*((_BYTE *)v22 + 48))
      sub_20AF3FE2C();
    v24 = v22[4];
    v25 = *v22;
    v26 = (std::__shared_weak_count **)(*v22 + 16 * v24);
    do
      v27 = __ldxr(v11);
    while (__stxr(v27 + 1, v11));
    *v26 = v13;
    v28 = v25 + 16 * v24;
    v29 = *(std::__shared_weak_count **)(v28 + 8);
    *(_QWORD *)(v28 + 8) = v10;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (v22[1] - *v22) >> 4;
    v33 = v22[5];
    v34 = v22[4] + 1;
    if (v34 >= v32)
      v35 = (v22[1] - *v22) >> 4;
    else
      v35 = 0;
    v22[4] = v34 - v35;
    if (v33 == v32)
    {
      v36 = v22[3] + 1;
      if (v36 < v32)
        v32 = 0;
      v22[3] = v36 - v32;
      v37 = (std::mutex **)v89;
      if (!(_QWORD)v89)
      {
LABEL_43:
        v46 = (uint64_t **)a1[9];
        v89 = 0uLL;
        v47 = (std::__shared_weak_count *)a1[5];
        if (v47)
        {
          v48 = std::__shared_weak_count::lock(v47);
          if (v48)
          {
            v49 = v48;
            v50 = a1[4];
            v51 = (unint64_t *)&v48->__shared_weak_owners_;
            do
              v52 = __ldxr(v51);
            while (__stxr(v52 + 1, v51));
            *(_QWORD *)&v89 = v50;
            *((_QWORD *)&v89 + 1) = v48;
            v53 = (unint64_t *)&v48->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          else
          {
            v89 = 0uLL;
          }
        }
        v55 = (char *)operator new(0x38uLL);
        *(_QWORD *)v55 = &off_24C4128A8;
        *(_OWORD *)(v55 + 8) = v89;
        v89 = 0uLL;
        *((_QWORD *)v55 + 3) = v13;
        *((_QWORD *)v55 + 4) = v10;
        v90 = 0;
        v91 = 0;
        *((_QWORD *)v55 + 5) = v83;
        *((_QWORD *)v55 + 6) = v84;
        v92[0] = 0;
        v92[1] = 0;
        v94 = (std::string *)v55;
        sub_20B430B44(*v46, (uint64_t)&v93);
        v56 = v94;
        if (v94 == &v93)
        {
          v57 = 4;
          v56 = &v93;
        }
        else
        {
          if (!v94)
            goto LABEL_57;
          v57 = 5;
        }
        (*(void (**)(void))(v56->__r_.__value_.__r.__words[0] + 8 * v57))();
LABEL_57:
        if (v88)
        {
          v58 = &v88->__shared_owners_;
          do
            v59 = __ldaxr((unint64_t *)v58);
          while (__stlxr(v59 - 1, (unint64_t *)v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        if (v85)
        {
          v60 = (unint64_t *)&v85->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        return;
      }
    }
    else
    {
      v22[5] = v33 + 1;
      v37 = (std::mutex **)v89;
      if (!(_QWORD)v89)
        goto LABEL_43;
    }
    std::mutex::unlock(*v37);
    MEMORY[0x20BD3583C](v37, 0x20C4093837F09);
    goto LABEL_43;
  }
  v81 = (uint64_t **)a1[9];
  *(_OWORD *)v82 = 0uLL;
  v38 = (std::__shared_weak_count *)a1[5];
  if (v38)
  {
    v39 = std::__shared_weak_count::lock(v38);
    if (v39)
    {
      v40 = v39;
      v41 = (std::__shared_weak_count *)a1[4];
      v42 = (unint64_t *)&v39->__shared_weak_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
      v82[0] = v41;
      v82[1] = v39;
      v44 = (unint64_t *)&v39->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    else
    {
      *(_OWORD *)v82 = 0uLL;
    }
  }
  v62 = *a2;
  v63 = a2[1];
  if (v63)
  {
    v64 = (unint64_t *)&v63->~__shared_weak_count_0;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  v67 = a2[3];
  v66 = a2[4];
  if (v66)
  {
    v68 = (unint64_t *)&v66->~__shared_weak_count_0;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  v70 = operator new(0x20uLL);
  v70[1] = 0;
  v70[2] = 0;
  *v70 = &off_24C412858;
  v70[3] = *a3;
  *a3 = 0;
  v71 = (char *)operator new(0x50uLL);
  *(_QWORD *)v71 = &off_24C412928;
  *(_OWORD *)(v71 + 8) = *(_OWORD *)v82;
  *((_QWORD *)v71 + 3) = v62;
  *((_QWORD *)v71 + 4) = v63;
  *((_QWORD *)v71 + 5) = &off_24C411E78;
  *((_QWORD *)v71 + 6) = v67;
  *((_QWORD *)v71 + 7) = v66;
  *((_QWORD *)v71 + 8) = v70 + 3;
  *((_QWORD *)v71 + 9) = v70;
  v91 = (__int128 *)v71;
  sub_20B430B44(*v81, (uint64_t)&v89);
  v72 = v91;
  if (v91 == &v89)
  {
    v73 = 4;
    v72 = &v89;
  }
  else
  {
    if (!v91)
      return;
    v73 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v72 + 8 * v73))();
}

void sub_20B222348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::runtime_error a24,std::exception_ptr a25,uint64_t a26,uint64_t a27,std::exception_ptr a28)
{
  std::__assoc_sub_state **v28;
  uint64_t v29;
  std::__assoc_sub_state *v30;
  std::exception_ptr v31;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v30 = *v28;
    if (*v28)
    {
      std::exception_ptr::exception_ptr(&a28, &a25);
      v31.__ptr_ = &a28;
      std::__assoc_sub_state::set_exception(v30, v31);
      std::exception_ptr::~exception_ptr(&a28);
      std::exception_ptr::~exception_ptr(&a25);
      std::runtime_error::~runtime_error(&a24);
      if (*(char *)(v29 - 105) < 0)
        operator delete(*(void **)(v29 - 128));
      JUMPOUT(0x20B222258);
    }
    sub_20B224984(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B2223BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::runtime_error a24,std::exception_ptr a25,uint64_t a26,uint64_t a27,std::exception_ptr a28)
{
  uint64_t v28;

  std::exception_ptr::~exception_ptr(&a25);
  std::runtime_error::~runtime_error(&a24);
  if (*(char *)(v28 - 105) < 0)
  {
    operator delete(*(void **)(v28 - 128));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B222410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32)
{
  char *v32;
  char *v34;
  uint64_t v35;

  v34 = a32;
  if (a32 == v32)
  {
    v35 = 4;
    v34 = &a29;
  }
  else
  {
    if (!a32)
    {
      sub_20B225058(&a11);
      _Unwind_Resume(a1);
    }
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
  sub_20B225058(&a11);
  _Unwind_Resume(a1);
}

void sub_20B222464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  uint64_t v12;

  sub_20B07E4F4(v12);
  if (a12)
  {
    std::__shared_weak_count::__release_weak(a12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B222490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29)
{
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;

  v32 = *(_QWORD **)(v30 - 104);
  if (v32 == v29)
  {
    v33 = 4;
    v32 = (_QWORD *)(v30 - 128);
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_6:
  sub_20B225190(&a29);
  sub_20AEC147C((uint64_t)&a27);
  sub_20AEC147C((uint64_t)&a20);
  sub_20AEC147C((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_20B222530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v13;
  va_list va;
  uint64_t v15;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B22254C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_20B430C50(*v1);
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    sub_20B430C50(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20B2225C0(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C4129A8;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C412428;
  v10[4] = v9;
  v14 = v10;
  sub_20B430B44(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20B2226F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B222764(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C412A28;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_20B430B44(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20B222874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B2228D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C412AA8;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20B224984(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C412AF0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_20B430B44(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20B226EBC(a2, v4);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20B226F90(&v22);
}

void sub_20B222AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20B226F90(&a9);
    _Unwind_Resume(a1);
  }
  sub_20B226F90(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B222BB8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C412AA8;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20B224984(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C412B70;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_20B430B44(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20B226EBC(a2, v4);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20B226F90(&v22);
}

void sub_20B222DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20B226F90(&a9);
    _Unwind_Resume(a1);
  }
  sub_20B226F90(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B222E98(uint64_t a1)
{
  return sub_20B223AF4(a1 - 16);
}

void sub_20B222EA0(uint64_t a1)
{
  sub_20B223AF4(a1 - 16);
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B222EC8(uint64_t a1, uint64_t a2)
{
  return sub_20B2225C0((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20B222ED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20B2228D8((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20B222ED8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20B222BB8((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20B222EE0(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20B222EE8(uint64_t a1)
{
  return sub_20B223AF4(a1 - 24);
}

void sub_20B222EF0(uint64_t a1)
{
  sub_20B223AF4(a1 - 24);
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B222F18(uint64_t a1)
{
  return sub_20B222764((_QWORD *)(a1 - 24));
}

uint64_t sub_20B222F20(uint64_t a1)
{
  return a1 - 24;
}

void sub_20B222F2C()
{
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B222F40(uint64_t a1, __int128 **a2)
{
  uint64_t v3;
  _WORD *v4;
  __int128 *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  __int128 *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t *v14;
  __int128 v15;
  int v16;
  int v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v35;
  std::__shared_weak_count *v36;
  _QWORD v37[2];
  std::__shared_weak_count *v38;
  char v39;
  _QWORD v40[3];
  void *v41;
  void *__dst;
  char *v43;
  void *__p;
  char *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  char v52[4];
  __int128 v53;
  uint64_t v54;
  _BYTE v55[24];
  uint64_t v56;
  int v57;
  char v58[16];
  int v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  char v65;
  __int128 __src;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  unsigned __int8 v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  v40[0] = &off_24C41C2C8;
  v40[1] = 1;
  v40[2] = &unk_24C41C418;
  v4 = operator new(0xAuLL);
  *(_QWORD *)v4 = 0;
  v4[4] = 0;
  v41 = v4;
  __dst = v4 + 5;
  v43 = (char *)(v4 + 5);
  __p = 0;
  v45 = 0;
  v46 = 0;
  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  v35 = *a2;
  v36 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v10 = a2[3];
  v9 = (std::__shared_weak_count *)a2[4];
  v37[0] = &off_24C411E78;
  v37[1] = v10;
  v38 = v9;
  if (v9)
  {
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v39 = 1;
  v48 = 0x500000001;
  v49 = 0;
  v50 = 1;
  v51 = 0;
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(&__src, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v13 = *v5;
    v67 = *((_QWORD *)v5 + 2);
    __src = v13;
  }
  v14 = sub_20B0C19F8(0);
  sub_20B0C1478((uint64_t)&v68, (uint64_t)v37, (uint64_t)v14);
  LOBYTE(v76) = 0;
  v78 = 0;
  if (*((_BYTE *)v35 + 48))
  {
    if (*((char *)v35 + 47) < 0)
    {
      sub_20AEC60F4(&v76, *((void **)v35 + 3), *((_QWORD *)v35 + 4));
    }
    else
    {
      v15 = *(__int128 *)((char *)v35 + 24);
      v77 = *((_QWORD *)v35 + 5);
      v76 = v15;
    }
    v16 = 1;
    v78 = 1;
  }
  else
  {
    v16 = 0;
  }
  v53 = __src;
  v54 = v67;
  __src = 0uLL;
  *(_OWORD *)&v55[8] = v69;
  v56 = v70;
  v67 = 0;
  v69 = 0uLL;
  v70 = 0;
  v17 = v73;
  v57 = v71;
  v59 = -1;
  v58[0] = 0;
  if (v73 != -1)
  {
    ((void (*)(char *, char *, uint64_t *))off_24C4126A8[v73])(&v47, v58, &v72);
    v59 = v17;
    v16 = v78;
  }
  v60 = v74;
  v61 = v75;
  v75 = 0;
  v74 = 0uLL;
  v18 = (char *)&v62;
  LOBYTE(v62) = 0;
  v64 = 0;
  if (v16)
  {
    v62 = v76;
    v63 = v77;
    v77 = 0;
    v76 = 0uLL;
    v64 = 1;
  }
  v65 = 1;
  sub_20B2237B4((uint64_t)&__src);
  if (v39)
  {
    v19 = v38;
    if (v38)
    {
      v20 = (unint64_t *)&v38->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v36)
    {
      v22 = (unint64_t *)&v36->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  LODWORD(__src) = 1;
  sub_20B42DB24((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 4, 4);
  sub_20B42B554(v40);
  LODWORD(__src) = 1;
  sub_20B42DB24((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 4, 4);
  sub_20B42B554(v40);
  sub_20B42DB24((uint64_t)&v41, (char *)__dst, (char *)&v48, (char *)&v48 + 4, 4);
  sub_20B42DB24((uint64_t)&v41, (char *)__dst, (char *)&v48 + 4, (char *)&v49, 4);
  sub_20B42DB24((uint64_t)&v41, (char *)__dst, (char *)&v49, (char *)&v50, 4);
  sub_20B42DB24((uint64_t)&v41, (char *)__dst, (char *)&v50, (char *)&v50 + 4, 4);
  sub_20B42DB24((uint64_t)&v41, (char *)__dst, (char *)&v50 + 4, (char *)&v51, 4);
  sub_20B42DB24((uint64_t)&v41, (char *)__dst, (char *)&v51, v52, 4);
  *(_QWORD *)((char *)v41 + *((_QWORD *)v45 - 1) + 10) = (_BYTE *)__dst - ((_BYTE *)v41 + *((_QWORD *)v45 - 1)) - 18;
  v45 -= 8;
  if (!v65)
  {
    LOBYTE(__src) = 0;
    sub_20B42DB24((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 1, 1);
    v28 = v45;
    goto LABEL_54;
  }
  LOBYTE(__src) = 1;
  sub_20B42DB24((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 1, 1);
  LODWORD(__src) = 2;
  sub_20B42DB24((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 4, 4);
  v24 = __src;
  sub_20B42B554(v40);
  v25 = HIBYTE(v54);
  if (v54 < 0)
    v25 = *((_QWORD *)&v53 + 1);
  *(_QWORD *)&__src = v25;
  sub_20B42DB24((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 8, 8);
  if (SHIBYTE(v54) < 0)
  {
    v26 = *((_QWORD *)&v53 + 1);
    v27 = (char *)v53;
    if (!(_QWORD)v53 && *((_QWORD *)&v53 + 1))
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_67;
      }
      v27 = 0;
    }
  }
  else
  {
    v26 = HIBYTE(v54);
    v27 = (char *)&v53;
  }
  sub_20B42DB24((uint64_t)&v41, (char *)__dst, v27, &v27[v26], v26);
  LODWORD(__src) = 2;
  sub_20B42DB24((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 4, 4);
  sub_20B42B554(v40);
  sub_20B2238DC((uint64_t)v40, (uint64_t)v55);
  *(_QWORD *)((char *)v41 + *((_QWORD *)v45 - 1) + 10) = (_BYTE *)__dst - ((_BYTE *)v41 + *((_QWORD *)v45 - 1)) - 18;
  v45 -= 8;
  if (v24 >= 2)
  {
    if (v64)
    {
      LOBYTE(__src) = 1;
      sub_20B42DB24((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 1, 1);
      v29 = HIBYTE(v63);
      if (v63 < 0)
        v29 = *((_QWORD *)&v62 + 1);
      *(_QWORD *)&__src = v29;
      sub_20B42DB24((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 8, 8);
      if ((SHIBYTE(v63) & 0x80000000) == 0)
      {
        v30 = HIBYTE(v63);
LABEL_52:
        sub_20B42DB24((uint64_t)&v41, (char *)__dst, v18, &v18[v30], v30);
        goto LABEL_53;
      }
      v30 = *((_QWORD *)&v62 + 1);
      v18 = (char *)v62;
      if ((_QWORD)v62 || !*((_QWORD *)&v62 + 1))
        goto LABEL_52;
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360))
      {
        v18 = 0;
        goto LABEL_52;
      }
LABEL_67:
      abort();
    }
    LOBYTE(__src) = 0;
    sub_20B42DB24((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 1, 1);
  }
LABEL_53:
  *(_QWORD *)((char *)v41 + *((_QWORD *)v45 - 1) + 10) = (_BYTE *)__dst - ((_BYTE *)v41 + *((_QWORD *)v45 - 1)) - 18;
  v28 = v45 - 8;
  v45 -= 8;
LABEL_54:
  *(_QWORD *)((char *)v41 + *((_QWORD *)v28 - 1) + 10) = (_BYTE *)__dst - ((_BYTE *)v41 + *((_QWORD *)v28 - 1)) - 18;
  v45 -= 8;
  v31 = *(_QWORD *)(v3 + 112);
  if (!v31)
    goto LABEL_60;
  if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v31 + 32))(v31, v40) & 1) == 0)
  {
    v33 = *(_QWORD *)(v3 + 112);
    *(_QWORD *)(v3 + 112) = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
LABEL_60:
    v32 = 0;
    if (!v65)
      goto LABEL_62;
    goto LABEL_61;
  }
  v32 = 1;
  if (v65)
LABEL_61:
    sub_20B2237B4((uint64_t)&v53);
LABEL_62:
  if (__p)
  {
    v45 = (char *)__p;
    operator delete(__p);
  }
  if (v41)
  {
    __dst = v41;
    operator delete(v41);
  }
  return v32;
}

void sub_20B2236D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  va_list va;

  va_start(va, a8);
  if (*(_BYTE *)(v10 - 104) && *(char *)(v10 - 105) < 0)
    operator delete(*(void **)(v10 - 128));
  sub_20B1EBC54(v9);
  if (*(char *)(v10 - 217) < 0)
    operator delete(*(void **)(v10 - 240));
  if (a8)
  {
    sub_20B216B00(v8);
    if (a4)
    {
      p_shared_owners = (unint64_t *)&a4->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
        std::__shared_weak_count::__release_weak(a4);
      }
    }
  }
  sub_20B42B438(va);
  _Unwind_Resume(a1);
}

__n128 sub_20B223794(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

__n128 sub_20B2237A4(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

uint64_t sub_20B2237B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v10;

  if (*(_BYTE *)(a1 + 136) && *(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 96);
    v4 = *(void **)(a1 + 88);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 88);
    }
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v4);
  }
  v8 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))off_24C412698[v8])(&v10, a1 + 64);
  *(_DWORD *)(a1 + 80) = -1;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20B2238DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t __src;
  uint64_t v19;

  LODWORD(__src) = 2;
  v4 = a1 + 24;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  sub_20B42B554((_QWORD *)a1);
  v5 = *(unsigned __int8 *)(a2 + 31);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 16);
  __src = v5;
  sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v19, 8);
  if (*(char *)(a2 + 31) < 0)
  {
    v6 = *(char **)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    if (!v6)
    {
      if (v7)
      {
        v8 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360);
        v6 = 0;
        if (v8)
          abort();
      }
    }
  }
  else
  {
    v6 = (char *)(a2 + 8);
    v7 = *(unsigned __int8 *)(a2 + 31);
  }
  sub_20B42DB24(v4, *(char **)(a1 + 32), v6, &v6[v7], v7);
  sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)(a2 + 32), (char *)(a2 + 36), 4);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a1 + 32) - v9 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  if (*(_DWORD *)(a2 + 56) > 1u)
    sub_20AECFAB8();
  v11 = *(_QWORD *)(a2 + 40);
  v10 = *(std::__shared_weak_count **)(a2 + 48);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  LODWORD(__src) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  v15 = __src;
  sub_20B42B554((_QWORD *)a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, a1, v15);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v17 + 10) = *(_QWORD *)(a1 + 32) - v17 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  return result;
}

uint64_t sub_20B223AF4(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C412498;
  *(_QWORD *)(a1 + 16) = &unk_24C412510;
  *(_QWORD *)(a1 + 24) = &unk_24C412550;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x20BD3583C](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_20B223CF4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

std::mutex ***sub_20B223D9C(std::mutex ***a1)
{
  std::mutex **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::mutex::unlock(*v2);
    MEMORY[0x20BD3583C](v2, 0x20C4093837F09);
  }
  return a1;
}

uint64_t sub_20B223DE8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

_QWORD *sub_20B223E20(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C4126F8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20B223E64(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C4126F8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B223EB8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C4126F8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20B223F28(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C4126F8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20B223F78(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20B223FB4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20B223FEC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20B224310((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20B2249E0(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B2241B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20B2249E0(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B224298(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE25EnqueueMessageAndDispatc"
                     "hIZNKS6_4SendERKS5_EUlT_T0_E_EEvS9_SA_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE25EnqueueMessag"
                                "eAndDispatchIZNKS6_4SendERKS5_EUlT_T0_E_EEvS9_SA_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE25EnqueueMessageAndDispatchIZNKS6_4SendERKS5_EUlT_T0_E_EEvS9_SA_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE25EnqueueMessageAndDispatchIZNKS6_4SendERKS5_EUlT_T0_E_EEvS9_SA_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B224304()
{
  return &unk_24C4127B8;
}

void sub_20B224310(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::exception_ptr v16;
  char v17;

  v6 = *a1;
  if (!v6)
  {
    sub_20B531CBC("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
    v7 = atomic_load((unsigned __int8 *)&qword_25463D258);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25463D258))
    {
      __cxa_atexit((void (*)(void *))sub_20B5324E0, &qword_25463D220, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463D258);
    }
    if (byte_25463D248)
      v8 = byte_25463D250 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_25463D220;
      for (i = qword_25463D228; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_25463D258);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_25463D258))
    {
      __cxa_atexit((void (*)(void *))sub_20B5324E0, &qword_25463D220, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463D258);
    }
    if (!byte_25463D248)
      abort();
    qword_25463D238(unk_25463D240, "callable_", 9, "", 0);
    v6 = *a1;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, char *))(j[2] + 16))(j + 2, &v17);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20B224984(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v16), v15))
    {
      sub_20B224984(2u);
    }
    *(_BYTE *)(v14 + 140) = v17;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
}

void sub_20B22457C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16)
{
  std::mutex *v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  std::mutex::unlock(v16);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_20B224654((uint64_t)&a11, (const char *)&a10, (const char *)&a9);
    if ((a16 & 0x80u) == 0)
      v21 = (uint64_t *)&a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_20B532360);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20B224628(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20B224648);
}

uint64_t sub_20B224654(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t result;
  _DWORD v6[6];
  int v7;
  _QWORD **v8;
  const char *v9;
  _DWORD *v10;
  const char *v11;
  const char *v12;
  _QWORD *v13;

  v7 = 0;
  sub_20B088B48(v6, "Caught unexpected exception of type: ");
  if (*(_QWORD *)a2)
  {
    v8 = (_QWORD **)v6;
    v9 = a2;
    v10 = v6;
    v11 = a2;
    v12 = a2;
    if (v7 != -1)
    {
      v13 = &v8;
      ((void (*)(_QWORD **, _DWORD *))off_24C412770[v7])(&v13, v6);
      goto LABEL_6;
    }
LABEL_18:
    sub_20AECFAB8();
  }
  v8 = (_QWORD **)v6;
  v9 = "nullptr";
  v10 = v6;
  v11 = "nullptr";
  v12 = "nullptr";
  if (v7 == -1)
    goto LABEL_18;
  v13 = &v8;
  ((void (*)(_QWORD **, _DWORD *))off_24C412758[v7])(&v13, v6);
LABEL_6:
  v8 = (_QWORD **)v6;
  v9 = "\n";
  v10 = v6;
  v11 = "\n";
  v12 = "\n";
  if (v7 == -1)
    sub_20AECFAB8();
  v13 = &v8;
  ((void (*)(_QWORD **, _DWORD *))off_24C412788[v7])(&v13, v6);
  v8 = (_QWORD **)v6;
  v9 = "message: ";
  v10 = v6;
  v11 = "message: ";
  v12 = "message: ";
  if (v7 == -1)
    sub_20AECFAB8();
  v13 = &v8;
  ((void (*)(_QWORD **, _DWORD *))off_24C4127A0[v7])(&v13, v6);
  if (*(_QWORD *)a3)
  {
    v8 = (_QWORD **)v6;
    v9 = a3;
    v10 = v6;
    v11 = a3;
    v12 = a3;
    if (v7 != -1)
    {
      v13 = &v8;
      ((void (*)(_QWORD **, _DWORD *))off_24C412770[v7])(&v13, v6);
      goto LABEL_13;
    }
LABEL_21:
    sub_20AECFAB8();
  }
  v8 = (_QWORD **)v6;
  v9 = "nullptr";
  v10 = v6;
  v11 = "nullptr";
  v12 = "nullptr";
  if (v7 == -1)
    goto LABEL_21;
  v13 = &v8;
  ((void (*)(_QWORD **, _DWORD *))off_24C412758[v7])(&v13, v6);
LABEL_13:
  v8 = (_QWORD **)v6;
  v9 = "\n";
  v10 = v6;
  v11 = "\n";
  v12 = "\n";
  if (v7 == -1)
    sub_20AECFAB8();
  v13 = &v8;
  ((void (*)(_QWORD **, _DWORD *))off_24C412788[v7])(&v13, v6);
  if (v7 == -1)
    sub_20AECFAB8();
  v8 = &v13;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C4126D0[v7])(&v8, v6);
  if (v7 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C4126B8[v7])(&v8, v6);
  return result;
}

void sub_20B2248F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B22490C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B224920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B224934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B224948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B22495C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B224970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B224984(unsigned int a1)
{
  void *exception;
  const std::error_category *v3;

  exception = __cxa_allocate_exception(0x20uLL);
  v3 = std::future_category();
  MEMORY[0x20BD350C8](exception, a1, v3);
  __cxa_throw(exception, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
}

void sub_20B2249CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B2249E0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x20BD350C8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20B224ACC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x20BD350D4](&a11);
  JUMPOUT(0x20B224A28);
}

_QWORD *sub_20B224B08(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C4127D8;
  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20B224BBC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C4127D8;
  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B224C80(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  result = operator new(0x40uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C4127D8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = a1[6];
  v10 = a1[7];
  result[5] = &off_24C411E78;
  result[6] = v11;
  result[7] = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  return result;
}

_QWORD *sub_20B224D1C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C4127D8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v10 = result[6];
  v9 = result[7];
  a2[5] = &off_24C411E78;
  a2[6] = v10;
  a2[7] = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

void sub_20B224D98(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_20B224E44(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)__p[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

void sub_20B224EEC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20B224310((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20B2249E0(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20B224F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20B2249E0(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B224FE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE4SendERKS5_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE4SendERKS5_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE4SendERKS5_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE4SendERKS5_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B22504C()
{
  return &unk_24C412838;
}

_QWORD *sub_20B225058(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[3];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[1];
      if (!v11)
        return a1;
      goto LABEL_16;
    }
  }
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_20B225144(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C412858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B225154(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C412858;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t *sub_20B225184(uint64_t a1)
{
  return sub_20B2249E0((uint64_t *)(a1 + 24));
}

_QWORD *sub_20B225190(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[3];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

_QWORD *sub_20B22520C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C4128A8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20B225294(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C4128A8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x20BD3583CLL);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20B22532C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C4128A8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20B2253BC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C4128A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20B22542C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20B2254AC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20B225528(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24C41C9B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24C41C9B8;
    __cxa_throw(v23, (struct type_info *)&unk_24C41C9D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24C41C9B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24C41C9B8;
    __cxa_throw(v25, (struct type_info *)&unk_24C41C9D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20B224310(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20B2249E0((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B225804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20B225830(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20B22563CLL);
    JUMPOUT(0x20B22560CLL);
  }
  sub_20B224984(3u);
}

void sub_20B22588C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20B2258B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20B2249E0(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B2259A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE25EnqueueMessageAndDispatc"
                     "hIZNKS6_7ProcessERKS5_NSt3__17promiseIbEEEUlT_T0_E_EEvS9_SD_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE25EnqueueMessag"
                                "eAndDispatchIZNKS6_7ProcessERKS5_NSt3__17promiseIbEEEUlT_T0_E_EEvS9_SD_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE25EnqueueMessageAndDispatchIZNKS6_7ProcessERKS5_NSt3__17promiseIbEEEUlT_T0_E_EEvS9_SD_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE25EnqueueMessageAndDispatchIZNKS6_7ProcessERKS5_NSt3__17promiseIbEEEUlT_T0_E_EEvS9_SD_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B225A10()
{
  return &unk_24C412908;
}

_QWORD *sub_20B225A1C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  *a1 = &off_24C412928;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[4];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[2];
      if (!v11)
        return a1;
      goto LABEL_16;
    }
  }
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_20B225B14(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  *a1 = &off_24C412928;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[4];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[2];
    if (!v11)
      goto LABEL_19;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[2];
    if (!v11)
      goto LABEL_19;
  }
  std::__shared_weak_count::__release_weak(v11);
LABEL_19:
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B225C1C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  result = operator new(0x50uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C412928;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = a1[6];
  v10 = a1[7];
  result[5] = &off_24C411E78;
  result[6] = v11;
  result[7] = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = a1[9];
  result[8] = a1[8];
  result[9] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  return result;
}

_QWORD *sub_20B225CD8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C412928;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v10 = result[6];
  v9 = result[7];
  a2[5] = &off_24C411E78;
  a2[6] = v10;
  a2[7] = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = result[9];
  a2[8] = result[8];
  a2[9] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  return result;
}

void sub_20B225D74(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[4];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[2];
    if (!v11)
      return;
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
}

void sub_20B225E60(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)__p[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[7];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[7];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[4];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)__p[2];
      if (!v11)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  v11 = (std::__shared_weak_count *)__p[2];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
LABEL_17:
  operator delete(__p);
}

void sub_20B225F4C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24C41C9B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24C41C9B8;
    __cxa_throw(v9, (struct type_info *)&unk_24C41C9D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[8];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20B224310((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20B2249E0((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20B22605C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20B2260D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20B226108);
  JUMPOUT(0x20B226138);
}

uint64_t sub_20B226140(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE7ProcessERKS5_NSt3__17promiseIbEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE7ProcessERKS5_N"
                                "St3__17promiseIbEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE7ProcessERKS5_NSt3__17promiseIbEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE7ProcessERKS5_NSt3__17promiseIbEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B2261AC()
{
  return &unk_24C412988;
}

_QWORD *sub_20B2261B8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C4129A8;
  v2 = a1[4];
  a1[3] = &off_24C412428;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20B226210(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C4129A8;
  v2 = a1[4];
  a1[3] = &off_24C412428;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B226278(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C4129A8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C412428;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20B2262F0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B226310(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C4129A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C412428;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20B226378(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20B226390(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C412428;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20B2263E0(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C412428;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20B22642C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C412428;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20B2264E0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B22651C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE9SubscribeENS1_1"
                                "2ChannelInputIbEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B226588()
{
  return &unk_24C412A08;
}

_QWORD *sub_20B226594(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C412A28;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20B2265CC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C412A28;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B226614(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C412A28;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20B226664(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C412A28;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20B226694(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20B2266A4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20B2266D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20B226764(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B2267A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE15AddErrorHandlerENS1_12Cha"
                     "nnelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE15AddErrorHandle"
                                "rENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B22680C()
{
  return &unk_24C412A88;
}

void sub_20B226818(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20B226864(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B2268C4(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v2 = *(void **)(a1 + 144);
    if (v2)
    {
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v2);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

_QWORD *sub_20B226904(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C412AF0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20B22693C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C412AF0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B226984(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C412AF0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20B2269DC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C412AF0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20B226A14(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20B226A24(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20B226A50(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;
  void *__p[3];
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_36:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v34 = __ldaxr(p_shared_owners);
        while (__stlxr(v34 - 1, p_shared_owners));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v39 = 0;
      v40 = 0;
      v38 = 0;
      if (v7)
      {
        if (v7 >> 61)
          sub_20AF6E1D0();
        v8 = (uint64_t *)operator new(8 * v7);
        v9 = (char *)&v8[v7];
        v38 = v8;
        v39 = v8;
        v40 = (uint64_t *)v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v12 = v8;
        if (v11 == v5 + 96)
        {
LABEL_33:
          __p[0] = v12;
          __p[1] = v8;
          __p[2] = v9;
          if (!*v6)
            sub_20B224984(3u);
          sub_20B226E04(*v6, (uint64_t)__p);
          if (__p[0])
            operator delete(__p[0]);
          goto LABEL_36;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v12 = 0;
        if (v11 == v5 + 96)
          goto LABEL_33;
      }
      v35 = v6;
      v36 = v4;
      while (1)
      {
        v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
        v14 = v13;
        v15 = v39;
        v9 = (char *)v40;
        if (v39 >= v40)
          break;
        *v39 = v13;
        v8 = v15 + 1;
LABEL_11:
        v39 = v8;
        v11 = *(_QWORD *)(v11 + 8);
        if (v11 == v10)
        {
          v12 = v38;
          v6 = v35;
          v4 = v36;
          goto LABEL_33;
        }
      }
      v16 = v38;
      v17 = (char *)((char *)v39 - (char *)v38);
      v18 = v39 - v38;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61)
        sub_20AF6E1D0();
      if (((char *)v40 - (char *)v38) >> 2 > v19)
        v19 = ((char *)v40 - (char *)v38) >> 2;
      if ((unint64_t)((char *)v40 - (char *)v38) >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
      {
        if (v20 >> 61)
          sub_20AEC60CC();
        v21 = (char *)operator new(8 * v20);
        v22 = (uint64_t *)&v21[8 * v18];
        *v22 = v14;
        v8 = v22 + 1;
        v23 = (char *)v15 - (char *)v16;
        if (v15 == v16)
          goto LABEL_30;
      }
      else
      {
        v21 = 0;
        v22 = (uint64_t *)(8 * v18);
        *(_QWORD *)(8 * v18) = v14;
        v8 = (uint64_t *)(8 * v18 + 8);
        v23 = (char *)v15 - (char *)v16;
        if (v15 == v16)
        {
LABEL_30:
          v9 = &v21[8 * v20];
          v38 = v22;
          v40 = (uint64_t *)v9;
          if (v16)
            operator delete(v16);
          goto LABEL_11;
        }
      }
      v24 = v23 - 8;
      if (v24 < 0x58)
        goto LABEL_47;
      if ((unint64_t)((char *)v15 - v21 - (_QWORD)v17) < 0x20)
        goto LABEL_47;
      v25 = (v24 >> 3) + 1;
      v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
      v27 = &v15[v26 / 0xFFFFFFFFFFFFFFF8];
      v22 = (uint64_t *)((char *)v22 - v26);
      v28 = &v21[8 * v18 - 16];
      v29 = v15 - 2;
      v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v31 = *(_OWORD *)v29;
        *((_OWORD *)v28 - 1) = *((_OWORD *)v29 - 1);
        *(_OWORD *)v28 = v31;
        v28 -= 32;
        v29 -= 4;
        v30 -= 4;
      }
      while (v30);
      v15 = v27;
      if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_47:
        do
        {
          v32 = *--v15;
          *--v22 = v32;
        }
        while (v15 != v16);
      }
      goto LABEL_30;
    }
  }
}

void sub_20B226D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B226D8C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B226DF8()
{
  return &unk_24C412B50;
}

void sub_20B226E04(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  std::exception_ptr v6;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    sub_20B224984(2u);
  }
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_20B226EA8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B226EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a2 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a2 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a2, &__lk);
  v4 = *(_QWORD *)(a2 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a2 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_20B226F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B226F90(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x20BD350C8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20B22707C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x20BD350D4](&a11);
  JUMPOUT(0x20B226FD8);
}

_QWORD *sub_20B2270B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C412B70;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20B2270F0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C412B70;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B227138(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C412B70;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20B227190(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C412B70;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20B2271C8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20B2271D8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20B227204(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p[3];

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        memset(__p, 0, sizeof(__p));
        if (!*v5)
          sub_20B224984(3u);
        sub_20B226E04(*v5, (uint64_t)__p);
        if (__p[0])
          operator delete(__p[0]);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20B2272B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B2272FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B227368()
{
  return &unk_24C412BD0;
}

void sub_20B227378(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B22739C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20B2273B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS2_3viz11ContextDataEbvbLb0EEEE27__sh"
                     "ared_ptr_default_deleteIS8_S8_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS2_3viz11ContextDataEbvbLb"
                                "0EEEE27__shared_ptr_default_deleteIS8_S8_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS2_3viz11ContextDataEbvbLb0EEEE27__shared_ptr_default_deleteIS8_S8_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS2_3viz11ContextDataEbvbLb0EEEE27__shared_ptr_default_deleteIS8_S8_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20B227424(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20B227450(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B22748C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C412C40;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20B2274F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20B227584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B227598(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20B227628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B22763C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20B227700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B227714(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20B2277D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B2277EC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20B227890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B2278A4(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C412388;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_20B430C50(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C412460;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C4123F0;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C4123B8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20B227A88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C412358;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20B2278A4(v2);
    MEMORY[0x20BD3583C](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20B2278A4(v7);
    MEMORY[0x20BD3583C](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20B227BC0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    sub_20B227BC0(a1, *(_QWORD *)a2);
    sub_20B227BC0(a1, *(_QWORD *)(a2 + 8));
    v4 = *(std::__shared_weak_count **)(a2 + 64);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_7;
    }
    else
    {
LABEL_6:
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      {
LABEL_7:
        operator delete((void *)a2);
        return;
      }
    }
    operator delete(*(void **)(a2 + 32));
    operator delete((void *)a2);
  }
}

_QWORD *sub_20B227C60(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL)
      sub_20AEC60B8();
    v7 = operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[3 * v6];
    do
    {
      v9 = *(_QWORD *)(v3 + 8);
      v8 = *(_QWORD *)(v3 + 16);
      *v7 = &off_24C411E78;
      v7[1] = v9;
      v7[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v3 += 24;
      v7 += 3;
    }
    while (v3 != v4);
    a1[1] = v7;
  }
  return a1;
}

void sub_20B227D28(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = *v1;
  if (*v1)
  {
    v4 = (uint64_t)v1[1];
    v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
        v4 = sub_20B216B00(v4 - 24);
      while ((void *)v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

double sub_20B227D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  __int128 v39;
  double result;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  char v45;
  _BYTE v46[32];
  __int128 v47;
  unsigned int v48;
  void *__p[2];
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 24))
  {
    v2 = *(_QWORD *)a2;
    v3 = *(_QWORD *)(a2 + 8);
    if (v3 != *(_QWORD *)a2)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v3 - *(_QWORD *)a2) >> 3) > 0x2E8BA2E8BA2E8BALL)
        sub_20AEC60B8();
      v4 = 0xAAAAAAAAAAAAAAC8 * ((v3 - *(_QWORD *)a2) >> 3);
      v5 = (char *)operator new(v4);
      v6 = &v5[v4];
      v7 = v5;
      v42 = v3;
      while (1)
      {
        v8 = sub_20B0C19F8(0);
        sub_20B0C1478((uint64_t)v46, v2, (uint64_t)v8);
        if (v7 < v6)
        {
          v9 = *(_OWORD *)&v46[8];
          v10 = *(_QWORD *)&v46[24];
          v7[40] = 0;
          *((_QWORD *)v7 + 3) = v10;
          *(_OWORD *)(v7 + 8) = v9;
          memset(&v46[8], 0, 24);
          *((_DWORD *)v7 + 8) = v47;
          *((_DWORD *)v7 + 14) = -1;
          v11 = v48;
          if (v48 != -1)
          {
            ((void (*)(char *))off_24C4126A8[v48])(&v45);
            *((_DWORD *)v7 + 14) = v11;
          }
          *((_QWORD *)v7 + 8) = 0;
          *((_QWORD *)v7 + 9) = 0;
          *((_QWORD *)v7 + 10) = 0;
          *((_OWORD *)v7 + 4) = *(_OWORD *)__p;
          *((_QWORD *)v7 + 10) = v50;
          __p[0] = 0;
          __p[1] = 0;
          v50 = 0;
          v7 += 88;
          v12 = v48;
          if (v48 == -1)
            goto LABEL_63;
          goto LABEL_62;
        }
        v13 = 0x2E8BA2E8BA2E8BA3 * ((v7 - v5) >> 3) + 1;
        if (v13 > 0x2E8BA2E8BA2E8BALL)
          sub_20AEC60B8();
        if (0x5D1745D1745D1746 * ((v6 - v5) >> 3) > v13)
          v13 = 0x5D1745D1745D1746 * ((v6 - v5) >> 3);
        if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v6 - v5) >> 3)) >= 0x1745D1745D1745DLL)
          v14 = 0x2E8BA2E8BA2E8BALL;
        else
          v14 = v13;
        v44 = v14;
        if (v14)
        {
          if (v14 > 0x2E8BA2E8BA2E8BALL)
            sub_20AEC60CC();
          v15 = (char *)operator new(88 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[8 * ((v7 - v5) >> 3)];
        *(_OWORD *)(v16 + 8) = *(_OWORD *)&v46[8];
        *((_QWORD *)v16 + 3) = *(_QWORD *)&v46[24];
        memset(&v46[8], 0, 24);
        v17 = v48;
        *((_DWORD *)v16 + 8) = v47;
        v16[40] = 0;
        *((_DWORD *)v16 + 14) = -1;
        if ((_DWORD)v17 != -1)
        {
          ((void (*)(char *, char *, char *))off_24C4126A8[v17])(&v45, v16 + 40, (char *)&v47 + 8);
          *((_DWORD *)v16 + 14) = v17;
        }
        v18 = &v15[8 * ((v7 - v5) >> 3)];
        *((_OWORD *)v18 + 4) = *(_OWORD *)__p;
        *((_QWORD *)v18 + 10) = v50;
        __p[1] = 0;
        v50 = 0;
        __p[0] = 0;
        if (v7 == v5)
        {
          v43 = &v15[8 * ((v7 - v5) >> 3)];
          if (v5)
            goto LABEL_46;
        }
        else
        {
          v19 = 0;
          do
          {
            v20 = &v16[v19];
            v21 = &v7[v19];
            v22 = *(_OWORD *)&v7[v19 - 80];
            *((_QWORD *)v20 - 8) = *(_QWORD *)&v7[v19 - 64];
            *((_OWORD *)v20 - 5) = v22;
            *((_QWORD *)v21 - 9) = 0;
            *((_QWORD *)v21 - 8) = 0;
            *((_QWORD *)v21 - 10) = 0;
            *((_DWORD *)v20 - 14) = *(_DWORD *)&v7[v19 - 56];
            v16[v19 - 48] = 0;
            v23 = (uint64_t)&v16[v19 - 48];
            *((_DWORD *)v20 - 8) = -1;
            v24 = *(unsigned int *)&v7[v19 - 32];
            if ((_DWORD)v24 != -1)
            {
              ((void (*)(char *, uint64_t, char *))off_24C4126A8[v24])(&v45, v23, v21 - 48);
              *((_DWORD *)v20 - 8) = v24;
            }
            *((_QWORD *)v20 - 3) = 0;
            *((_QWORD *)v20 - 2) = 0;
            *((_QWORD *)v20 - 1) = 0;
            *(_OWORD *)(v20 - 24) = *(_OWORD *)(v21 - 24);
            *((_QWORD *)v20 - 1) = *((_QWORD *)v21 - 1);
            *((_QWORD *)v21 - 3) = 0;
            *((_QWORD *)v21 - 2) = 0;
            *((_QWORD *)v21 - 1) = 0;
            v19 -= 88;
          }
          while (&v7[v19] != v5);
          v43 = &v16[v19];
          do
          {
            v25 = *((_QWORD *)v7 - 3);
            if (v25)
            {
              v26 = *((_QWORD *)v7 - 2);
              v27 = (void *)*((_QWORD *)v7 - 3);
              if (v26 != v25)
              {
                do
                {
                  v28 = *(std::__shared_weak_count **)(v26 - 8);
                  if (v28)
                  {
                    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
                    do
                      v30 = __ldaxr(p_shared_owners);
                    while (__stlxr(v30 - 1, p_shared_owners));
                    if (!v30)
                    {
                      ((void (*)(std::__shared_weak_count *, uint64_t))v28->__on_zero_shared)(v28, v23);
                      std::__shared_weak_count::__release_weak(v28);
                    }
                  }
                  v26 -= 16;
                }
                while (v26 != v25);
                v27 = (void *)*((_QWORD *)v7 - 3);
              }
              *((_QWORD *)v7 - 2) = v25;
              operator delete(v27);
            }
            v31 = *((unsigned int *)v7 - 8);
            if ((_DWORD)v31 != -1)
              ((void (*)(char *, char *))off_24C412698[v31])(&v45, v7 - 48);
            *((_DWORD *)v7 - 8) = -1;
            if (*(v7 - 57) < 0)
              operator delete(*((void **)v7 - 10));
            v7 -= 88;
          }
          while (v7 != v5);
          if (v5)
LABEL_46:
            operator delete(v5);
        }
        v6 = &v15[88 * v44];
        v7 = v16 + 88;
        v32 = (char *)__p[0];
        if (__p[0])
        {
          v33 = (char *)__p[1];
          v34 = __p[0];
          if (__p[1] != __p[0])
          {
            do
            {
              v35 = (std::__shared_weak_count *)*((_QWORD *)v33 - 1);
              if (v35)
              {
                v36 = (unint64_t *)&v35->__shared_owners_;
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                {
                  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                  std::__shared_weak_count::__release_weak(v35);
                }
              }
              v33 -= 16;
            }
            while (v33 != v32);
            v34 = __p[0];
          }
          __p[1] = v32;
          operator delete(v34);
          v3 = v42;
          v5 = v43;
          v12 = v48;
          if (v48 == -1)
            goto LABEL_63;
LABEL_62:
          ((void (*)(char *, char *))off_24C412698[v12])(&v45, (char *)&v47 + 8);
          goto LABEL_63;
        }
        v3 = v42;
        v5 = v43;
        v12 = v48;
        if (v48 != -1)
          goto LABEL_62;
LABEL_63:
        v48 = -1;
        if ((v46[31] & 0x80000000) != 0)
          operator delete(*(void **)&v46[8]);
        v2 += 24;
        if (v2 == v3)
          goto LABEL_67;
      }
    }
    v5 = 0;
    v7 = 0;
    v6 = 0;
LABEL_67:
    *(_QWORD *)v46 = v5;
    *(_QWORD *)&v46[8] = v7;
    *(_QWORD *)&v46[16] = v6;
    v38 = sub_20B0C19F8(0);
    sub_20AF43774(&v46[24], (uint64_t)v38);
    v39 = *(_OWORD *)&v46[16];
    *(_OWORD *)a1 = *(_OWORD *)v46;
    *(_OWORD *)(a1 + 16) = v39;
    result = *(double *)&v47;
    *(_OWORD *)(a1 + 32) = v47;
    *(_BYTE *)(a1 + 48) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 48) = 0;
  }
  return result;
}

void sub_20B228354(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20AEC01C0(a1);
}

uint64_t sub_20B2283B8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    sub_20B228408(i - 88);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B228408(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 72);
    v4 = *(void **)(a1 + 64);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v4);
  }
  v8 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))off_24C412698[v8])(&v9, a1 + 40);
  *(_DWORD *)(a1 + 56) = -1;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

uint64_t sub_20B2284F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 32);
      v4 = *(void **)(a1 + 24);
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v4);
    }
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(void **)a1;
      if ((void *)v9 != v8)
      {
        do
        {
          v9 -= 88;
          sub_20B228408(v9);
        }
        while ((void *)v9 != v8);
        v10 = *(void **)a1;
      }
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v10);
    }
  }
  return a1;
}

void sub_20B2285D4()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B2285E8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::logic_error *exception;
  _BYTE v20[2];

  v1 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 48);
  v4 = *(_QWORD *)(*v1 + 56);
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    goto LABEL_21;
  }
  v7 = v1[1];
  v2[6] = v3 + 4;
  sub_20B42BA30(v2);
  sub_20B1C9550((uint64_t)v20, v2, (_DWORD *)(v7 + 4));
  v9 = v2[6];
  v8 = v2[7];
  if (v8 <= v9)
  {
LABEL_20:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
LABEL_21:
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v10 = *(unsigned __int8 *)(v2[3] + v9);
  v11 = v9 + 1;
  v2[6] = v11;
  if (v10)
  {
    if (!*(_BYTE *)(v7 + 176))
    {
      *(_OWORD *)(v7 + 144) = 0u;
      *(_OWORD *)(v7 + 160) = 0u;
      *(_OWORD *)(v7 + 112) = 0u;
      *(_OWORD *)(v7 + 128) = 0u;
      *(_OWORD *)(v7 + 80) = 0u;
      *(_OWORD *)(v7 + 96) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)(v7 + 64) = 0u;
      *(_OWORD *)(v7 + 32) = 0u;
      v12 = sub_20B0C19F8(0);
      *(_OWORD *)(v7 + 64) = 0u;
      *(_DWORD *)(v7 + 112) = 0;
      *(_OWORD *)(v7 + 80) = 0u;
      *(_OWORD *)(v7 + 96) = 0u;
      sub_20AF43774((_QWORD *)(v7 + 120), (uint64_t)v12);
      *(_BYTE *)(v7 + 144) = 0;
      *(_BYTE *)(v7 + 168) = 0;
      *(_BYTE *)(v7 + 176) = 1;
      v11 = v2[6];
      v8 = v2[7];
    }
    v5 = v8 >= v11;
    v13 = v8 - v11;
    if (!v5)
      v13 = 0;
    if (v13 > 3)
    {
      v14 = *(_DWORD *)(v2[3] + v11);
      v2[6] = v11 + 4;
      sub_20B42BA30(v2);
      if (v14 >= 2)
        v14 = 2;
      sub_20B42BD80(v2, v7 + 32);
      sub_20B2288AC(v2, v7 + 56);
      if (v14 >= 2)
        sub_20B0E2AA4(v2, v7 + 144);
      v15 = v2[12];
      v16 = v2[9];
      v2[6] = *(_QWORD *)(v15 - 8) + *(_QWORD *)(v16 - 8) + 8;
      v2[9] = v16 - 8;
      v2[12] = v15 - 8;
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (*(_BYTE *)(v7 + 176))
  {
    sub_20B2237B4(v7 + 32);
    *(_BYTE *)(v7 + 176) = 0;
  }
LABEL_18:
  v17 = v2[12];
  v18 = v2[9];
  v2[6] = *(_QWORD *)(v17 - 8) + *(_QWORD *)(v18 - 8) + 8;
  v2[9] = v18 - 8;
  v2[12] = v17 - 8;
}

void sub_20B2287F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  uint64_t v14;
  void **v15;
  uint64_t v17;

  v17 = *(unsigned int *)(v14 + 112);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_24C40D788[v17])(&a13, v14 + 96);
  *(_DWORD *)(v14 + 112) = -1;
  if (*(char *)(v14 + 87) < 0)
  {
    operator delete(*v15);
    if ((*(char *)(v14 + 55) & 0x80000000) == 0)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v14 + 55) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*v13);
  _Unwind_Resume(exception_object);
}

void sub_20B228870(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B228884(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B228898(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B2288AC(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::logic_error *exception;
  std::logic_error *v35;
  char v36;
  char v37[8];
  void *v38;
  char v39;
  uint64_t v40;
  int v41;
  void *__p;
  char *v43;
  char v44[8];
  void *v45[2];
  __int128 v46;
  __int128 v47;
  int v48;
  char *v49;
  char *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 3)
    goto LABEL_47;
  v8 = *(_DWORD *)(a1[3] + v2);
  a1[6] = v2 + 4;
  if (v8 > 1)
  {
    sub_20B42BA30(a1);
    sub_20B228DC0(a1, a2 + 8);
    sub_20B0C16D8(a2);
    if (*(_DWORD *)(a2 + 56))
      sub_20AECFAB8();
    v9 = a1[6];
    v10 = a1[7];
    v4 = v10 >= v9;
    v11 = v10 - v9;
    if (!v4)
      v11 = 0;
    if (v11 > 3)
    {
      v12 = *(_QWORD *)(a2 + 40);
      v13 = *(unsigned int *)(a1[3] + v9);
      a1[6] = v9 + 4;
      sub_20B42BA30(a1);
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v12 + 40))(v12, a1, v13);
      v14 = a1[12];
      v15 = a1[9];
      v16 = *(_QWORD *)(v15 - 16);
      a1[6] = *(_QWORD *)(v14 - 8) + *(_QWORD *)(v15 - 8) + 8;
      a1[6] = *(_QWORD *)(v14 - 16) + v16 + 8;
      a1[9] = v15 - 16;
      a1[12] = v14 - 16;
      return;
    }
LABEL_47:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v48 = 0;
  v47 = 0u;
  v46 = 0u;
  *(_OWORD *)v45 = 0u;
  sub_20AF43774(&v49, a2 + 64);
  sub_20B228DC0(a1, (uint64_t)v45);
  sub_20B0C1158((uint64_t)&v44);
  if (v48)
    sub_20AECFAB8();
  v17 = a1[6];
  v18 = a1[7];
  v4 = v18 >= v17;
  v19 = v18 - v17;
  if (!v4)
    v19 = 0;
  if (v19 <= 3)
  {
    v35 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v35, "Not enough data to read");
    v35->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(v35, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v20 = v47;
  v21 = *(unsigned int *)(a1[3] + v17);
  a1[6] = v17 + 4;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v20 + 40))(v20, a1, v21);
  sub_20B0C53C0((uint64_t)&v37, (uint64_t)&v44);
  sub_20B0C5528(a2, (uint64_t)&v37);
  v22 = (char *)__p;
  if (__p)
  {
    v23 = v43;
    v24 = __p;
    if (v43 != __p)
    {
      do
      {
        v25 = (std::__shared_weak_count *)*((_QWORD *)v23 - 1);
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v23 -= 16;
      }
      while (v23 != v22);
      v24 = __p;
    }
    v43 = v22;
    operator delete(v24);
  }
  if (v41 != -1)
    ((void (*)(char *, uint64_t *))off_24C412698[v41])(&v36, &v40);
  v41 = -1;
  if (v39 < 0)
    operator delete(v38);
  v28 = v49;
  if (v49)
  {
    v29 = v50;
    v30 = v49;
    if (v50 != v49)
    {
      do
      {
        v31 = (std::__shared_weak_count *)*((_QWORD *)v29 - 1);
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v29 -= 16;
      }
      while (v29 != v28);
      v30 = v49;
    }
    v50 = v28;
    operator delete(v30);
  }
  if (v48 != -1)
    ((void (*)(char *, __int128 *))off_24C412698[v48])(&v37, &v47);
  v48 = -1;
  if (SBYTE7(v46) < 0)
    operator delete(v45[0]);
}

void sub_20B228C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29)
{
  void *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t v38;

  __cxa_free_exception(v29);
  v32 = *(_QWORD *)(v30 + 64);
  if (v32)
  {
    v33 = *(_QWORD *)(v30 + 72);
    v34 = *(void **)(v30 + 64);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          p_shared_owners = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(p_shared_owners);
          while (__stlxr(v37 - 1, p_shared_owners));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *(void **)(v30 + 64);
    }
    *(_QWORD *)(v30 + 72) = v32;
    operator delete(v34);
  }
  v38 = *(unsigned int *)(v30 + 56);
  if ((_DWORD)v38 != -1)
    ((void (*)(char *, uint64_t *))off_24C412698[v38])(&a10, &a29);
  *(_DWORD *)(v30 + 56) = -1;
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B228DC0(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  std::logic_error *exception;
  std::logic_error *v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  void *__p[2];
  uint64_t v26;
  int v27;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 3)
    goto LABEL_21;
  v8 = *(_DWORD *)(a1[3] + v2);
  a1[6] = v2 + 4;
  if (v8 > 1)
  {
    sub_20B42BA30(a1);
    sub_20B42BD80(a1, a2);
    v9 = a1[6];
    v10 = a1[7];
    v4 = v10 >= v9;
    v11 = v10 - v9;
    if (!v4)
      v11 = 0;
    if (v11 > 3)
    {
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1[3] + v9);
      a1[6] += 4;
      v12 = a1[12];
      v13 = a1[9];
      a1[6] = *(_QWORD *)(v12 - 8) + *(_QWORD *)(v13 - 8) + 8;
      a1[9] = v13 - 8;
      a1[12] = v12 - 8;
      return;
    }
LABEL_21:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  HIBYTE(v26) = 0;
  LOBYTE(__p[0]) = 0;
  v27 = 0;
  sub_20B42BD80(a1, (uint64_t)__p);
  v14 = a1[6];
  v15 = a1[7];
  v4 = v15 >= v14;
  v16 = v15 - v14;
  if (!v4)
    v16 = 0;
  if (v16 <= 3)
  {
    v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v21, "Not enough data to read");
    v21->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(v21, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v17 = *(_DWORD *)(a1[3] + v14);
  a1[6] = v14 + 4;
  v18 = SHIBYTE(v26);
  if (SHIBYTE(v26) < 0)
  {
    sub_20AEC60F4(&v22, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    v22 = *(_OWORD *)__p;
    v23 = v26;
  }
  v24 = v17;
  if (*(char *)(a2 + 23) < 0)
  {
    operator delete(*(void **)a2);
    v19 = v24;
    *(_OWORD *)a2 = v22;
    *(_QWORD *)(a2 + 16) = v23;
    *(_DWORD *)(a2 + 24) = v19;
    if (v18 < 0)
LABEL_20:
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)a2 = v22;
    *(_QWORD *)(a2 + 16) = v23;
    *(_DWORD *)(a2 + 24) = v17;
    if (v18 < 0)
      goto LABEL_20;
  }
}

void sub_20B228FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B229034(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 4;
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[3];
  if (v5 == a1)
  {
    v6 = 4;
    v5 = a1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t sub_20B2290B0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (_QWORD *)(a1 + 16);
    v6 = *(_QWORD **)(a1 + 40);
    if (v6 != (_QWORD *)(a1 + 16))
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v5;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (_QWORD *)(a1 + 16);
  v6 = *(_QWORD **)(a1 + 40);
  if (v6 == (_QWORD *)(a1 + 16))
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void sub_20B229148(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C412CF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B229158(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C412CF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B229190(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24C412CF8;
  v7 = v2;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C413188;
  v6 = &v2[1].__vftable;
  sub_20AFF4C9C(a1, &v6, 1uLL);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B229290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B2292AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C412D48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B2292BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C412D48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B2292EC(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  sub_20B229318(*(_QWORD *)(a1 + 32));
}

void sub_20B229318(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    sub_20B229318(*(_QWORD *)a1);
    sub_20B229318(*(_QWORD *)(a1 + 8));
    v2 = *(std::__shared_weak_count **)(a1 + 72);
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_7;
    }
    else
    {
LABEL_6:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_7:
        operator delete((void *)a1);
        return;
      }
    }
    operator delete(*(void **)(a1 + 32));
    operator delete((void *)a1);
  }
}

uint64_t sub_20B2293B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = a1 + 16;
  v5 = *(_QWORD *)(a2 + 40);
  if (v5)
  {
    if (v5 == a2 + 16)
    {
      *(_QWORD *)(a1 + 40) = v4;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 40) + 24))(*(_QWORD *)(a2 + 40), v4);
      v6 = a1 + 48;
      v7 = *(_QWORD *)(a2 + 72);
      if (!v7)
      {
LABEL_10:
        *(_QWORD *)(a1 + 72) = v7;
        goto LABEL_12;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      v6 = a1 + 48;
      v7 = *(_QWORD *)(a2 + 72);
      if (!v7)
        goto LABEL_10;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 0;
    v6 = a1 + 48;
    v7 = *(_QWORD *)(a2 + 72);
    if (!v7)
      goto LABEL_10;
  }
  if (v7 != a2 + 48)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 72) = v6;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 72) + 24))(*(_QWORD *)(a2 + 72), v6);
LABEL_12:
  v8 = *(_QWORD *)(a2 + 104);
  if (!v8)
  {
LABEL_15:
    *(_QWORD *)(a1 + 104) = v8;
    goto LABEL_17;
  }
  if (v8 != a2 + 80)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 104) = a1 + 80;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 104) + 24))(*(_QWORD *)(a2 + 104), a1 + 80);
LABEL_17:
  v9 = *(_QWORD *)(a2 + 136);
  if (!v9)
  {
LABEL_20:
    *(_QWORD *)(a1 + 136) = v9;
    goto LABEL_22;
  }
  if (v9 != a2 + 112)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    goto LABEL_20;
  }
  *(_QWORD *)(a1 + 136) = a1 + 112;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 24))(*(_QWORD *)(a2 + 136), a1 + 112);
LABEL_22:
  sub_20AF43774((_QWORD *)(a1 + 144), a2 + 144);
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  if (*(_BYTE *)(a2 + 200))
  {
    v10 = *(_QWORD *)(a2 + 192);
    if (v10)
    {
      if (v10 == a2 + 168)
      {
        *(_QWORD *)(a1 + 192) = a1 + 168;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 192) + 24))(*(_QWORD *)(a2 + 192), a1 + 168);
        goto LABEL_28;
      }
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    }
    *(_QWORD *)(a1 + 192) = v10;
LABEL_28:
    *(_BYTE *)(a1 + 200) = 1;
  }
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  return a1;
}

void sub_20B229598(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  if (*(_BYTE *)(v1 + 200))
  {
    v9 = *(_QWORD **)(v1 + 192);
    if (v9 == v7)
    {
      v10 = 4;
    }
    else
    {
      if (!v9)
        goto LABEL_7;
      v10 = 5;
      v7 = *(_QWORD **)(v1 + 192);
    }
    (*(void (**)(_QWORD *))(*v7 + 8 * v10))(v7);
  }
LABEL_7:
  sub_20AFAAEB8(v6);
  v11 = *(_QWORD **)(v1 + 136);
  if (v11 == v5)
  {
    v12 = 4;
  }
  else
  {
    if (!v11)
      goto LABEL_12;
    v12 = 5;
    v5 = *(_QWORD **)(v1 + 136);
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v12))(v5);
LABEL_12:
  v13 = *(_QWORD **)(v1 + 104);
  if (v13 == v4)
  {
    v14 = 4;
  }
  else
  {
    if (!v13)
      goto LABEL_17;
    v14 = 5;
    v4 = *(_QWORD **)(v1 + 104);
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v14))(v4);
LABEL_17:
  v15 = *(_QWORD **)(v1 + 72);
  if (v15 == v3)
  {
    v16 = 4;
  }
  else
  {
    if (!v15)
      goto LABEL_22;
    v16 = 5;
    v3 = *(_QWORD **)(v1 + 72);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v16))(v3);
LABEL_22:
  v17 = *(_QWORD **)(v1 + 40);
  if (v17 == v2)
  {
    v18 = 4;
  }
  else
  {
    if (!v17)
      goto LABEL_27;
    v18 = 5;
    v2 = *(_QWORD **)(v1 + 40);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v18))(v2);
LABEL_27:
  _Unwind_Resume(a1);
}

_QWORD *sub_20B2296C4(_QWORD *a1)
{
  *a1 = &off_24C412D98;
  sub_20B22BD4C((uint64_t)(a1 + 1));
  return a1;
}

void sub_20B2296F4(_QWORD *a1)
{
  *a1 = &off_24C412D98;
  sub_20B22BD4C((uint64_t)(a1 + 1));
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B229734(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xE0uLL);
  *v2 = &off_24C412D98;
  sub_20B2293B0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20B229774(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B229788(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C412D98;
  return sub_20B2293B0((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_20B2297A4(uint64_t a1)
{
  return sub_20B22BD4C(a1 + 8);
}

void sub_20B2297AC(void *a1)
{
  sub_20B22BD4C((uint64_t)a1 + 8);
  operator delete(a1);
}

void sub_20B2297D4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  const void **v8;
  unsigned int v9;
  const void *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  int v14;
  void **v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  int8x8_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  char *v26;
  std::__shared_weak_count *v27;
  uint64_t *v28;
  unint64_t *v29;
  uint64_t (**v30)();
  std::__shared_weak_count *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  void **v42;
  _BOOL4 v43;
  const void *v44;
  int v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  const void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  std::mutex *v64;
  __int128 v65;
  int v66;
  __int128 v67;
  char *v68;
  char *v69;
  void *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t **v76;
  uint64_t *v77;
  uint64_t **v78;
  int v79;
  const void *v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  int v87;
  uint64_t *v88;
  unint64_t v89;
  size_t v90;
  int v91;
  int v92;
  BOOL v93;
  const void **v94;
  std::__shared_weak_count *v95;
  std::mutex *v96;
  char *v97;
  _BYTE *v98;
  uint64_t *v99;
  uint64_t *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  char *v107;
  char *v108;
  void *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  const void *v118;
  int v119;
  const void *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  _BOOL4 v124;
  const void *v125;
  int v126;
  unint64_t *v127;
  unint64_t v128;
  const void *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  const void *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  _BOOL4 v140;
  unint64_t *v141;
  unint64_t v142;
  const void *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  unsigned __int8 v157;
  unsigned __int8 v158;
  _QWORD *exception;
  char *v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t (**v164)();
  void **v165;
  uint64_t (**v166)();
  const void *v167;
  std::__shared_weak_count *v168;
  char v169;
  void *v170;
  char *v171;
  void *__dst[4];
  char v173;
  char v174;
  void *v175;
  char v176;
  void *__p;
  char v178;
  char v179;
  char v180;
  char v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  char v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  int v190;
  __int128 v191;
  void *v192;
  __int128 v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  unsigned int v198;
  __int128 v199;
  void *v200;
  __int128 v201;
  void *v202;
  char v203;
  char v204;
  _QWORD v205[2];
  std::__shared_weak_count *v206;
  void *v207[6];
  __int128 v208;
  __int128 v209;
  void *v210;
  __int128 v211;
  void *v212;
  __int128 v213;
  void *v214;
  __int128 v215;
  void *v216;
  __int128 v217;
  void *v218;
  __int128 v219;
  uint64_t v220;
  char v221;
  __int128 v222;
  uint64_t v223;
  uint64_t v224;

  v4 = a1;
  v224 = *MEMORY[0x24BDAC8D0];
  v187 = 0x500000001;
  v188 = 0;
  v189 = 1;
  v190 = 0;
  HIBYTE(v207[2]) = 0;
  LOBYTE(v207[0]) = 0;
  v208 = 0u;
  v209 = 0u;
  LODWORD(v210) = 0;
  sub_20AF43774(&v211, a1 + 152);
  LOBYTE(v213) = 0;
  LOBYTE(v215) = 0;
  v191 = *(_OWORD *)v207;
  v192 = v207[2];
  memset(v207, 0, 24);
  v193 = 0u;
  v194 = 0;
  v207[4] = 0;
  v207[5] = 0;
  *(_QWORD *)&v208 = 0;
  v195 = 0;
  LOBYTE(v196) = 0;
  v198 = -1;
  sub_20B223794((uint64_t)__dst, (__n128 *)&v196, (__n128 *)&v209);
  v198 = 0;
  v199 = v211;
  v200 = v212;
  v212 = 0;
  v211 = 0uLL;
  LOBYTE(v201) = 0;
  v203 = 0;
  if ((_BYTE)v215)
  {
    v201 = v213;
    v202 = v214;
    v214 = 0;
    v213 = 0uLL;
    v203 = 1;
  }
  v204 = 1;
  sub_20B2237B4((uint64_t)v207);
  __dst[0] = a3;
  __dst[1] = &v186;
  v164 = &off_24C412CB8;
  v165 = __dst;
  sub_20B52A3E8((uint64_t)&v164, (uint64_t)v207);
  v5 = (uint64_t *)(v4 + 8);
  if (!BYTE8(v213))
  {
    v6 = atomic_load((unsigned __int8 *)&qword_25463B230);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25463B230))
    {
      v157 = atomic_load((unsigned __int8 *)&qword_25463CF50);
      if ((v157 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF50))
      {
        __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253EC3190, &dword_20AEBB000);
        __cxa_guard_release(&qword_25463CF50);
      }
      qword_25463B268 = 9;
      qword_25463B270 = (uint64_t)&off_253EC3190;
      __cxa_guard_release(&qword_25463B230);
    }
    v7 = atomic_load((unsigned __int8 *)&qword_25463B238);
    v8 = (const void **)a2;
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25463B238))
    {
      v158 = atomic_load((unsigned __int8 *)&qword_25463CF50);
      if ((v158 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF50))
      {
        __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253EC3190, &dword_20AEBB000);
        __cxa_guard_release(&qword_25463CF50);
      }
      qword_25463B278 = 10;
      qword_25463B280 = (uint64_t)&off_253EC3190;
      __cxa_guard_release(&qword_25463B238);
      v8 = (const void **)a2;
    }
    if (BYTE8(v213))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24C3F6160;
      __cxa_throw(exception, (struct type_info *)&unk_24C3F22A8, (void (*)(void *))std::exception::~exception);
    }
    *(_OWORD *)__dst = *(_OWORD *)v207;
    sub_20AECEBD0(&__dst[2], (__int128 *)&v207[2]);
    if (__dst[1] == (void *)qword_25463B270 && LODWORD(__dst[0]) == (_DWORD)qword_25463B268)
    {
      if (!*(_BYTE *)(v4 + 216))
      {
        v9 = 5;
LABEL_20:
        sub_20B21F54C(v4 + 8, v8, (uint64_t)__dst, v9);
      }
    }
    else
    {
      v9 = 7;
      if (__dst[1] != (void *)qword_25463B280 || LODWORD(__dst[0]) != (_DWORD)qword_25463B278)
        goto LABEL_20;
      if (!*(_BYTE *)(v4 + 216))
      {
        v9 = 6;
        goto LABEL_20;
      }
    }
    if (v180)
    {
      if (v179)
      {
        if (v178 < 0)
          operator delete(__p);
        if (v176 < 0)
          operator delete(v175);
      }
      if (v174 && v173 < 0)
        operator delete(__dst[2]);
    }
    if (!BYTE8(v213) && (_BYTE)v213)
    {
      if ((_BYTE)v212)
      {
        if (SHIBYTE(v211) < 0)
          operator delete(v210);
        if (SBYTE7(v209) < 0)
          operator delete((void *)v208);
      }
      if (LOBYTE(v207[5]) && SHIBYTE(v207[4]) < 0)
        operator delete(v207[2]);
    }
    goto LABEL_354;
  }
  if (!v204)
  {
    LOBYTE(v164) = 0;
    v169 = 0;
    v10 = v167;
    if (!v167)
      goto LABEL_107;
    goto LABEL_109;
  }
  if (SHIBYTE(v192) < 0)
  {
    sub_20AEC60F4(__dst, (void *)v191, *((unint64_t *)&v191 + 1));
  }
  else
  {
    *(_OWORD *)__dst = v191;
    __dst[2] = v192;
  }
  *(void **)((char *)&v207[1] + 7) = *(void **)((char *)&__dst[1] + 7);
  v11 = __dst[0];
  v12 = __dst[1];
  v13 = HIBYTE(__dst[2]);
  v14 = SHIBYTE(__dst[2]);
  memset(__dst, 0, 24);
  v207[0] = v11;
  v207[1] = v12;
  HIBYTE(v207[2]) = v13;
  LOBYTE(v207[3]) = 0;
  LOBYTE(v208) = 0;
  if (v14 >= 0)
    v15 = v207;
  else
    v15 = (void **)v11;
  if (v14 < 0)
    v13 = (unint64_t)v207[1];
  if (!v13)
    goto LABEL_68;
  v16 = v15;
  if (v13 < 8)
    goto LABEL_77;
  v16 = (char *)v15 + (v13 & 0xFFFFFFFFFFFFFFF8);
  v17 = (char *)v15 + 3;
  v18 = v13 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v19 = vceq_s8(*(int8x8_t *)(v17 - 3), (int8x8_t)0x3A3A3A3A3A3A3A3ALL);
    if ((v19.i8[0] & 1) != 0)
    {
      *(v17 - 3) = 95;
      if ((v19.i8[1] & 1) == 0)
        goto LABEL_52;
    }
    else if ((v19.i8[1] & 1) == 0)
    {
LABEL_52:
      if ((v19.i8[2] & 1) != 0)
        goto LABEL_53;
      goto LABEL_61;
    }
    *(v17 - 2) = 95;
    if ((v19.i8[2] & 1) != 0)
    {
LABEL_53:
      *(v17 - 1) = 95;
      if ((v19.i8[3] & 1) == 0)
        goto LABEL_54;
      goto LABEL_62;
    }
LABEL_61:
    if ((v19.i8[3] & 1) == 0)
    {
LABEL_54:
      if ((v19.i8[4] & 1) != 0)
        goto LABEL_55;
      goto LABEL_63;
    }
LABEL_62:
    *v17 = 95;
    if ((v19.i8[4] & 1) != 0)
    {
LABEL_55:
      v17[1] = 95;
      if ((v19.i8[5] & 1) == 0)
        goto LABEL_56;
      goto LABEL_64;
    }
LABEL_63:
    if ((v19.i8[5] & 1) == 0)
    {
LABEL_56:
      if ((v19.i8[6] & 1) == 0)
        goto LABEL_65;
      goto LABEL_57;
    }
LABEL_64:
    v17[2] = 95;
    if ((v19.i8[6] & 1) == 0)
    {
LABEL_65:
      if ((v19.i8[7] & 1) == 0)
        goto LABEL_49;
      goto LABEL_66;
    }
LABEL_57:
    v17[3] = 95;
    if ((v19.i8[7] & 1) == 0)
      goto LABEL_49;
LABEL_66:
    v17[4] = 95;
LABEL_49:
    v17 += 8;
    v18 -= 8;
  }
  while (v18);
  if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_68;
LABEL_77:
  v25 = (char *)v15 + v13;
  do
  {
    if (*v16 == 58)
      *v16 = 95;
    ++v16;
  }
  while (v16 != v25);
LABEL_68:
  if (v198 > 1)
    goto LABEL_357;
  v20 = v196;
  v21 = v197;
  if (v197)
  {
    p_shared_owners = (unint64_t *)&v197->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (!v20)
        goto LABEL_82;
LABEL_75:
      if (!v198)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v196 + 48))(&v182);
        goto LABEL_83;
      }
LABEL_357:
      sub_20AECFAB8();
    }
  }
  if (v20)
    goto LABEL_75;
LABEL_82:
  v183 = 0uLL;
  v182 = (uint64_t)&off_24C411E78;
LABEL_83:
  v26 = (char *)operator new(0x50uLL);
  v27 = (std::__shared_weak_count *)v26;
  v28 = (uint64_t *)(v4 + 8);
  *((_QWORD *)v26 + 1) = 0;
  v29 = (unint64_t *)(v26 + 8);
  *((_QWORD *)v26 + 2) = 0;
  *(_QWORD *)v26 = &off_24C3F3C88;
  v30 = (uint64_t (**)())(v26 + 24);
  *(_OWORD *)(v26 + 24) = *(_OWORD *)v207;
  *((void **)v26 + 5) = v207[2];
  memset(v207, 0, 24);
  v26[48] = 0;
  v26[72] = 0;
  if ((_BYTE)v208)
  {
    *((_OWORD *)v26 + 3) = *(_OWORD *)&v207[3];
    *((void **)v26 + 8) = v207[5];
    memset(&v207[3], 0, 24);
    v26[72] = 1;
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v183 + 1);
  v10 = (const void *)v183;
  v183 = 0uLL;
  do
    v32 = __ldxr(v29);
  while (__stxr(v32 + 1, v29));
  if (v31)
  {
    v33 = (unint64_t *)&v31->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    do
      v35 = __ldaxr(v33);
    while (__stlxr(v35 - 1, v33));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  do
    v36 = __ldaxr(v29);
  while (__stlxr(v36 - 1, v29));
  v37 = v4;
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v183 + 1);
  if (*((_QWORD *)&v183 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if ((_BYTE)v208 && SHIBYTE(v207[5]) < 0)
    operator delete(v207[3]);
  v4 = v37;
  if (SHIBYTE(v207[2]) < 0)
  {
    operator delete(v207[0]);
    if (SHIBYTE(__dst[2]) < 0)
      goto LABEL_135;
  }
  else
  {
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_106;
LABEL_135:
    operator delete(__dst[0]);
  }
LABEL_106:
  v164 = v30;
  v165 = (void **)&v27->__vftable;
  v166 = &off_24C411E78;
  v167 = v10;
  v168 = v31;
  v169 = 1;
  v5 = v28;
  if (!v10)
  {
LABEL_107:
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v10 = v167;
  }
LABEL_109:
  (*(void (**)(void **__return_ptr, const void *))(*(_QWORD *)v10 + 48))(v207, v10);
  v41 = (void *)HIBYTE(v207[2]);
  if (SHIBYTE(v207[2]) < 0)
    v41 = v207[1];
  if (v41 != (void *)8)
  {
    v43 = 0;
    if ((SHIBYTE(v207[2]) & 0x80000000) == 0)
      goto LABEL_115;
LABEL_128:
    operator delete(v207[0]);
    if (!v43)
      goto LABEL_129;
LABEL_116:
    v44 = v167;
    if (!v167)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v44 = v167;
    }
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v44 + 48))(v207);
    v45 = (int)v207[3];
    if (SHIBYTE(v207[2]) < 0)
    {
      operator delete(v207[0]);
      if (v45 == 1)
      {
LABEL_121:
        v46 = v167;
        v47 = v168;
        if (v168)
        {
          v48 = (unint64_t *)&v168->__shared_owners_;
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }
        if (v46)
        {
          v50 = __dynamic_cast(v46, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40E250, 0) != 0;
          if (!v47)
            goto LABEL_142;
        }
        else
        {
          v50 = 0;
          if (!v47)
            goto LABEL_142;
        }
        v55 = (unint64_t *)&v47->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
          if (v50)
          {
LABEL_143:
            v57 = v167;
            v58 = v168;
            if (v168)
            {
              v59 = (unint64_t *)&v168->__shared_owners_;
              do
                v60 = __ldxr(v59);
              while (__stxr(v60 + 1, v59));
              v61 = (uint64_t)v57 + 8;
              do
                v62 = __ldaxr(v59);
              while (__stlxr(v62 - 1, v59));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
            }
            else
            {
              v61 = (uint64_t)v167 + 8;
            }
            goto LABEL_153;
          }
LABEL_151:
          v61 = 8;
LABEL_153:
          v63 = *v5;
          v64 = (std::mutex *)(*(_QWORD *)(*v5 + 240) + 24);
          std::mutex::lock(v64);
          v161 = v5;
          LOBYTE(v207[0]) = 2;
          *(_OWORD *)&v207[1] = *(_OWORD *)v61;
          LODWORD(v207[3]) = *(_DWORD *)(v61 + 16);
          LOBYTE(v207[4]) = 0;
          BYTE8(v208) = 0;
          if (*(_BYTE *)(v61 + 48))
          {
            if (*(char *)(v61 + 47) < 0)
            {
              sub_20AEC60F4(&v207[4], *(void **)(v61 + 24), *(_QWORD *)(v61 + 32));
            }
            else
            {
              v65 = *(_OWORD *)(v61 + 24);
              *(_QWORD *)&v208 = *(_QWORD *)(v61 + 40);
              *(_OWORD *)&v207[4] = v65;
            }
            BYTE8(v208) = 1;
          }
          v162 = v4;
          LOBYTE(v209) = 0;
          v221 = 0;
          v66 = *(unsigned __int8 *)(v61 + 200);
          if (*(_BYTE *)(v61 + 200))
          {
            sub_20AF3FE60((char *)&v209, (__int128 *)(v61 + 56));
            v221 = 1;
          }
          v67 = *(_OWORD *)(v61 + 208);
          v223 = *(_QWORD *)(v61 + 224);
          v222 = v67;
          v68 = (char *)operator new(0x108uLL);
          v69 = v68;
          *((_QWORD *)v68 + 1) = 0;
          *((_QWORD *)v68 + 2) = 0;
          *(_QWORD *)v68 = &off_24C4130D0;
          v68[24] = (char)v207[0];
          v160 = v68 + 24;
          *((_OWORD *)v68 + 2) = *(_OWORD *)&v207[1];
          *((_DWORD *)v68 + 12) = v207[3];
          v68[56] = 0;
          v68[80] = 0;
          if (BYTE8(v208))
          {
            *(_OWORD *)(v68 + 56) = *(_OWORD *)&v207[4];
            *((_QWORD *)v68 + 9) = v208;
            v207[5] = 0;
            *(_QWORD *)&v208 = 0;
            v207[4] = 0;
            v68[80] = 1;
          }
          v68[88] = 0;
          v68[232] = 0;
          if (v66)
          {
            *(_OWORD *)(v68 + 88) = v209;
            *((_QWORD *)v68 + 13) = v210;
            v210 = 0;
            v209 = 0uLL;
            *((_OWORD *)v68 + 7) = v211;
            *((_QWORD *)v68 + 16) = v212;
            v211 = 0uLL;
            v70 = v216;
            *((_QWORD *)v68 + 19) = v214;
            *(_OWORD *)(v68 + 136) = v213;
            v212 = 0;
            v213 = 0uLL;
            v214 = 0;
            v71 = v215;
            *((_QWORD *)v68 + 22) = v70;
            *((_OWORD *)v68 + 10) = v71;
            v215 = 0uLL;
            v72 = v217;
            v73 = v220;
            *((_QWORD *)v68 + 25) = v218;
            *(_OWORD *)(v68 + 184) = v72;
            v216 = 0;
            v217 = 0uLL;
            v218 = 0;
            v74 = v219;
            *((_QWORD *)v68 + 28) = v73;
            *((_OWORD *)v68 + 13) = v74;
            v219 = 0uLL;
            v220 = 0;
            v68[232] = 1;
          }
          v75 = *(_OWORD *)(v61 + 208);
          *((_QWORD *)v68 + 32) = *(_QWORD *)(v61 + 224);
          *((_OWORD *)v68 + 15) = v75;
          v76 = *(uint64_t ***)(v63 + 240);
          v78 = v76 + 1;
          v77 = v76[1];
          if (!v77)
          {
            v83 = (uint64_t *)(v76 + 1);
LABEL_200:
            v97 = (char *)operator new(0x50uLL);
            v98 = v97 + 32;
            v94 = (const void **)a2;
            if (*(char *)(a2 + 23) < 0)
            {
              sub_20AEC60F4(v98, *(void **)a2, *(_QWORD *)(a2 + 8));
            }
            else
            {
              *(_OWORD *)v98 = *(_OWORD *)a2;
              *((_QWORD *)v97 + 6) = *(_QWORD *)(a2 + 16);
            }
            *((_WORD *)v97 + 28) = *(_WORD *)(a2 + 24);
            *((_QWORD *)v97 + 8) = 0;
            *((_QWORD *)v97 + 9) = 0;
            *(_QWORD *)v97 = 0;
            *((_QWORD *)v97 + 1) = 0;
            *((_QWORD *)v97 + 2) = v83;
            *v78 = (uint64_t *)v97;
            v99 = (uint64_t *)**v76;
            v100 = (uint64_t *)v97;
            if (v99)
            {
              *v76 = v99;
              v100 = *v78;
            }
            sub_20AEC84C8(v76[1], v100);
            v76[2] = (uint64_t *)((char *)v76[2] + 1);
            v95 = (std::__shared_weak_count *)*((_QWORD *)v97 + 9);
            *((_QWORD *)v97 + 8) = v160;
            *((_QWORD *)v97 + 9) = v69;
            v5 = v161;
            v96 = v64;
            if (v95)
              goto LABEL_206;
            goto LABEL_210;
          }
          v79 = *(char *)(a2 + 23);
          if (v79 >= 0)
            v80 = (const void *)a2;
          else
            v80 = *(const void **)a2;
          if (v79 >= 0)
            v81 = *(unsigned __int8 *)(a2 + 23);
          else
            v81 = *(_QWORD *)(a2 + 8);
          v82 = *(unsigned __int16 *)(a2 + 24);
          while (1)
          {
            while (1)
            {
              v83 = v77;
              v86 = v77[4];
              v84 = v77 + 4;
              v85 = (uint64_t *)v86;
              v87 = *((char *)v84 + 23);
              v88 = v87 >= 0 ? v84 : v85;
              v89 = v87 >= 0 ? *((unsigned __int8 *)v84 + 23) : v84[1];
              v90 = v89 >= v81 ? v81 : v89;
              v91 = memcmp(v80, v88, v90);
              if (!v91)
                break;
              if ((v91 & 0x80000000) == 0)
                goto LABEL_184;
LABEL_172:
              v77 = (uint64_t *)*v83;
              v78 = (uint64_t **)v83;
              if (!*v83)
                goto LABEL_200;
            }
            if (v81 == v89)
            {
              if (v82 < *((unsigned __int16 *)v83 + 28))
                goto LABEL_172;
            }
            else if (v81 < v89)
            {
              goto LABEL_172;
            }
LABEL_184:
            v92 = memcmp(v88, v80, v90);
            if (v92)
            {
              if ((v92 & 0x80000000) == 0)
                goto LABEL_198;
            }
            else
            {
              v93 = v89 >= v81;
              if (v89 == v81)
                v93 = *((unsigned __int16 *)v83 + 28) >= v82;
              if (v93)
              {
LABEL_198:
                v94 = (const void **)a2;
                v95 = (std::__shared_weak_count *)v83[9];
                v83[8] = (uint64_t)v160;
                v83[9] = (uint64_t)v69;
                v5 = v161;
                v96 = v64;
                if (!v95)
                  goto LABEL_210;
LABEL_206:
                v101 = (unint64_t *)&v95->__shared_owners_;
                do
                  v102 = __ldaxr(v101);
                while (__stlxr(v102 - 1, v101));
                if (!v102)
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
LABEL_210:
                v4 = v162;
                if (!v221)
                  goto LABEL_217;
                if ((SHIBYTE(v220) & 0x80000000) == 0)
                {
                  if ((SHIBYTE(v218) & 0x80000000) == 0)
                    goto LABEL_213;
LABEL_293:
                  operator delete((void *)v217);
                  if (SHIBYTE(v216) < 0)
                    goto LABEL_294;
LABEL_214:
                  if ((SHIBYTE(v214) & 0x80000000) == 0)
                    goto LABEL_215;
LABEL_295:
                  operator delete((void *)v213);
                  if (SHIBYTE(v212) < 0)
                    goto LABEL_296;
LABEL_216:
                  if ((SHIBYTE(v210) & 0x80000000) == 0)
                    goto LABEL_217;
LABEL_297:
                  operator delete((void *)v209);
                  if (!BYTE8(v208))
                    goto LABEL_220;
LABEL_218:
                  if (SBYTE7(v208) < 0)
                    operator delete(v207[4]);
                  goto LABEL_220;
                }
                operator delete((void *)v219);
                if (SHIBYTE(v218) < 0)
                  goto LABEL_293;
LABEL_213:
                if ((SHIBYTE(v216) & 0x80000000) == 0)
                  goto LABEL_214;
LABEL_294:
                operator delete((void *)v215);
                if (SHIBYTE(v214) < 0)
                  goto LABEL_295;
LABEL_215:
                if ((SHIBYTE(v212) & 0x80000000) == 0)
                  goto LABEL_216;
LABEL_296:
                operator delete((void *)v211);
                if (SHIBYTE(v210) < 0)
                  goto LABEL_297;
LABEL_217:
                if (BYTE8(v208))
                  goto LABEL_218;
LABEL_220:
                std::mutex::unlock(v96);
                sub_20B21EBA0(&v184, *v5, v94, 0, 0);
                v182 = 0x500000001;
                v207[0] = (void *)1;
                LODWORD(v207[1]) = 0;
                __dst[0] = (void *)0x200000001;
                LODWORD(v183) = 0;
                HIDWORD(v183) = 0;
                *(_QWORD *)((char *)&v183 + 4) = 0x200000001;
                if (*(_BYTE *)(v162 + 16))
                {
                  v103 = *v5;
                  v104 = *v5 & 0xFFFFFFFFFFFFFF00;
                  v105 = 1;
                }
                else
                {
                  v104 = 0;
                  v105 = 0;
                  LOBYTE(v103) = 0;
                }
                sub_20B212F60(v103 | v104, v105, (__n128 *)&v182, (uint64_t)v207);
                v106 = *v5;
                sub_20B21DC94(v205, (uint64_t)v207);
                sub_20B21E85C(&v170, (uint64_t)v205, 1uLL);
                sub_20B21EE50(v106, (uint64_t *)&v170, v184 + 8, (uint64_t)__dst);
                v107 = (char *)v170;
                if (v170)
                {
                  v108 = v171;
                  v109 = v170;
                  if (v171 != v170)
                  {
                    do
                    {
                      v110 = (std::__shared_weak_count *)*((_QWORD *)v108 - 1);
                      if (v110)
                      {
                        v111 = (unint64_t *)&v110->__shared_owners_;
                        do
                          v112 = __ldaxr(v111);
                        while (__stlxr(v112 - 1, v111));
                        if (!v112)
                        {
                          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                          std::__shared_weak_count::__release_weak(v110);
                        }
                      }
                      v108 -= 24;
                    }
                    while (v108 != v107);
                    v109 = v170;
                  }
                  v171 = v107;
                  operator delete(v109);
                }
                v113 = v206;
                if (v206)
                {
                  v114 = (unint64_t *)&v206->__shared_owners_;
                  do
                    v115 = __ldaxr(v114);
                  while (__stlxr(v115 - 1, v114));
                  if (!v115)
                  {
                    ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                    std::__shared_weak_count::__release_weak(v113);
                  }
                }
                if (!v181)
                {
                  v116 = *(_QWORD *)(v162 + 200);
                  if (!v116)
                    sub_20AECABA4();
                  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v116 + 48))(v116, v184, __dst);
                  if (!v181 && v180)
                  {
                    if (v179)
                    {
                      if (v178 < 0)
                        operator delete(__p);
                      if (v176 < 0)
                        operator delete(v175);
                    }
                    if (v174 && v173 < 0)
                      operator delete(__dst[2]);
                  }
                }
                if (!(_BYTE)v220)
                  goto LABEL_249;
                if ((SHIBYTE(v219) & 0x80000000) == 0)
                {
                  if ((SHIBYTE(v217) & 0x80000000) == 0)
                    goto LABEL_245;
LABEL_304:
                  operator delete(v216);
                  if (SHIBYTE(v215) < 0)
                    goto LABEL_305;
LABEL_246:
                  if ((SHIBYTE(v213) & 0x80000000) == 0)
                    goto LABEL_247;
LABEL_306:
                  operator delete(v212);
                  if (SHIBYTE(v211) < 0)
                    goto LABEL_307;
LABEL_248:
                  if ((SHIBYTE(v209) & 0x80000000) == 0)
                    goto LABEL_249;
LABEL_308:
                  operator delete(*((void **)&v208 + 1));
                  if (!(_BYTE)v208)
                    goto LABEL_252;
LABEL_250:
                  if (SHIBYTE(v207[5]) < 0)
                    operator delete(v207[3]);
                  goto LABEL_252;
                }
                operator delete(v218);
                if (SHIBYTE(v217) < 0)
                  goto LABEL_304;
LABEL_245:
                if ((SHIBYTE(v215) & 0x80000000) == 0)
                  goto LABEL_246;
LABEL_305:
                operator delete(v214);
                if (SHIBYTE(v213) < 0)
                  goto LABEL_306;
LABEL_247:
                if ((SHIBYTE(v211) & 0x80000000) == 0)
                  goto LABEL_248;
LABEL_307:
                operator delete(v210);
                if (SHIBYTE(v209) < 0)
                  goto LABEL_308;
LABEL_249:
                if ((_BYTE)v208)
                  goto LABEL_250;
LABEL_252:
                LOBYTE(v207[0]) = 1;
                v117 = *(_QWORD *)(v162 + 112);
                if (!v117)
                  sub_20AECABA4();
                (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v117 + 48))(v117, v184, v207);
LABEL_254:
                v118 = v167;
                if (!v167)
                {
                  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
                  {
                    abort();
                  }
                  v118 = v167;
                }
                (*(void (**)(void **__return_ptr))(*(_QWORD *)v118 + 48))(v207);
                v119 = (int)v207[3];
                if ((SHIBYTE(v207[2]) & 0x80000000) == 0)
                {
                  if (LODWORD(v207[3]) == 2)
                    goto LABEL_259;
LABEL_266:
                  v125 = v167;
                  if (!v167)
                  {
                    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
                    {
                      abort();
                    }
                    v125 = v167;
                  }
                  (*(void (**)(void **__return_ptr))(*(_QWORD *)v125 + 48))(v207);
                  v126 = (int)v207[3];
                  if (SHIBYTE(v207[2]) < 0)
                  {
                    operator delete(v207[0]);
                    if (v126 != 3)
                      goto LABEL_338;
                  }
                  else if (LODWORD(v207[3]) != 3)
                  {
                    goto LABEL_338;
                  }
                  v136 = v167;
                  v137 = v168;
                  if (v168)
                  {
                    v138 = (unint64_t *)&v168->__shared_owners_;
                    do
                      v139 = __ldxr(v138);
                    while (__stxr(v139 + 1, v138));
                  }
                  if (v136)
                  {
                    v140 = __dynamic_cast(v136, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40D560, 0) != 0;
                    if (!v137)
                      goto LABEL_317;
LABEL_313:
                    v141 = (unint64_t *)&v137->__shared_owners_;
                    do
                      v142 = __ldaxr(v141);
                    while (__stlxr(v142 - 1, v141));
                    if (!v142)
                    {
                      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                      std::__shared_weak_count::__release_weak(v137);
                    }
                    goto LABEL_317;
                  }
                  v140 = 0;
                  if (v137)
                    goto LABEL_313;
LABEL_317:
                  if (v140)
                  {
                    v143 = v167;
                    v144 = v168;
                    if (v168)
                    {
                      v145 = (unint64_t *)&v168->__shared_owners_;
                      do
                        v146 = __ldxr(v145);
                      while (__stxr(v146 + 1, v145));
                      v147 = (uint64_t)v143 + 8;
                      do
                        v148 = __ldaxr(v145);
                      while (__stlxr(v148 - 1, v145));
                      if (!v148)
                      {
                        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                        std::__shared_weak_count::__release_weak(v144);
                      }
                    }
                    else
                    {
                      v147 = (uint64_t)v167 + 8;
                    }
                  }
                  else
                  {
                    v147 = 8;
                  }
                  v149 = *(_QWORD *)(v4 + 144);
                  if (!v149)
                    sub_20AECABA4();
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v149 + 48))(v149, v184, v147);
LABEL_338:
                  v52 = v185;
                  if (v185)
                  {
                    v150 = (unint64_t *)&v185->__shared_owners_;
                    do
                      v54 = __ldaxr(v150);
                    while (__stlxr(v54 - 1, v150));
LABEL_341:
                    if (!v54)
                    {
                      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                      std::__shared_weak_count::__release_weak(v52);
                    }
                  }
                  goto LABEL_343;
                }
                operator delete(v207[0]);
                if (v119 != 2)
                  goto LABEL_266;
LABEL_259:
                v120 = v167;
                v121 = v168;
                if (v168)
                {
                  v122 = (unint64_t *)&v168->__shared_owners_;
                  do
                    v123 = __ldxr(v122);
                  while (__stxr(v123 + 1, v122));
                }
                if (v120)
                {
                  v124 = __dynamic_cast(v120, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40D490, 0) != 0;
                  if (!v121)
                    goto LABEL_276;
                }
                else
                {
                  v124 = 0;
                  if (!v121)
                    goto LABEL_276;
                }
                v127 = (unint64_t *)&v121->__shared_owners_;
                do
                  v128 = __ldaxr(v127);
                while (__stlxr(v128 - 1, v127));
                if (v128)
                {
LABEL_276:
                  if (v124)
                    goto LABEL_277;
LABEL_300:
                  v133 = 8;
LABEL_301:
                  v135 = *(_QWORD *)(v4 + 80);
                  if (v135)
                    goto LABEL_302;
                }
                else
                {
                  ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                  std::__shared_weak_count::__release_weak(v121);
                  if (!v124)
                    goto LABEL_300;
LABEL_277:
                  v129 = v167;
                  v130 = v168;
                  if (v168)
                  {
                    v131 = (unint64_t *)&v168->__shared_owners_;
                    do
                      v132 = __ldxr(v131);
                    while (__stxr(v132 + 1, v131));
                    v133 = (uint64_t)v129 + 8;
                    do
                      v134 = __ldaxr(v131);
                    while (__stlxr(v134 - 1, v131));
                    if (v134)
                      goto LABEL_301;
                    ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                    std::__shared_weak_count::__release_weak(v130);
                    v135 = *(_QWORD *)(v4 + 80);
                    if (v135)
                    {
LABEL_302:
                      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v135 + 48))(v135, v184, *v5, v133);
                      goto LABEL_338;
                    }
                  }
                  else
                  {
                    v133 = (uint64_t)v167 + 8;
                    v135 = *(_QWORD *)(v4 + 80);
                    if (v135)
                      goto LABEL_302;
                  }
                }
                sub_20AECABA4();
              }
            }
            v77 = (uint64_t *)v83[1];
            if (!v77)
            {
              v78 = (uint64_t **)(v83 + 1);
              goto LABEL_200;
            }
          }
        }
LABEL_142:
        if (v50)
          goto LABEL_143;
        goto LABEL_151;
      }
    }
    else if (LODWORD(v207[3]) == 1)
    {
      goto LABEL_121;
    }
    sub_20B21EBA0(&v184, *v5, (const void **)a2, 0, 0);
    goto LABEL_254;
  }
  v42 = (void **)v207[0];
  if (SHIBYTE(v207[2]) >= 0)
    v42 = v207;
  v43 = *(_QWORD *)"cv3d.net" == (_QWORD)*v42;
  if (SHIBYTE(v207[2]) < 0)
    goto LABEL_128;
LABEL_115:
  if (v43)
    goto LABEL_116;
LABEL_129:
  sub_20B21EBA0(v207, *v5, (const void **)a2, 0, 0);
  v51 = *(_QWORD *)(v4 + 48);
  if (!v51)
    sub_20AECABA4();
  (*(void (**)(uint64_t, void *, uint64_t (***)()))(*(_QWORD *)v51 + 48))(v51, v207[0], &v164);
  v52 = (std::__shared_weak_count *)v207[1];
  if (v207[1])
  {
    v53 = (unint64_t *)((char *)v207[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    goto LABEL_341;
  }
LABEL_343:
  if (v169)
  {
    v151 = v168;
    if (v168)
    {
      v152 = (unint64_t *)&v168->__shared_owners_;
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
      }
    }
    v154 = (std::__shared_weak_count *)v165;
    if (v165)
    {
      v155 = (unint64_t *)(v165 + 1);
      do
        v156 = __ldaxr(v155);
      while (__stlxr(v156 - 1, v155));
      if (!v156)
      {
        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
        std::__shared_weak_count::__release_weak(v154);
      }
    }
  }
LABEL_354:
  if (v204)
    sub_20B2237B4((uint64_t)&v191);
}

void sub_20B22AE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;

  if (LOBYTE(STACK[0x230]) && SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  std::mutex::unlock(a13);
  if (a21)
  {
    if (a20)
    {
      p_shared_owners = (unint64_t *)&a20->__shared_owners_;
      do
        v70 = __ldaxr(p_shared_owners);
      while (__stlxr(v70 - 1, p_shared_owners));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
        std::__shared_weak_count::__release_weak(a20);
      }
    }
    if (a17)
    {
      v71 = (unint64_t *)&a17->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
        std::__shared_weak_count::__release_weak(a17);
      }
    }
  }
  if (!a68)
    _Unwind_Resume(a1);
  sub_20B2237B4(a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20B22B3D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit3viz13NetworkServer7Private19ProcessReceivedDataE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3kit3viz13NetworkServer7Private19ProcessReceivedDataE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit3viz13NetworkServer7Private19ProcessReceivedDataE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit3viz13NetworkServer7Private19ProcessReceivedDataE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B22B444()
{
  return &unk_24C412DF8;
}

uint64_t sub_20B22B450(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 40);
  if (!v5)
  {
    v4 = (_QWORD *)(a1 + 40);
    goto LABEL_5;
  }
  if (v5 != a2 + 16)
  {
    *(_QWORD *)(a1 + 40) = v5;
LABEL_5:
    *v4 = 0;
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 40) = a1 + 16;
  (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 24))(*v4);
LABEL_7:
  v6 = (_QWORD *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 72);
  if (!v7)
  {
    v6 = (_QWORD *)(a1 + 72);
    goto LABEL_11;
  }
  if (v7 != a2 + 48)
  {
    *(_QWORD *)(a1 + 72) = v7;
LABEL_11:
    *v6 = 0;
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 72) = a1 + 48;
  (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 24))(*v6);
LABEL_13:
  v8 = (_QWORD *)(a2 + 104);
  v9 = *(_QWORD *)(a2 + 104);
  if (!v9)
  {
    v8 = (_QWORD *)(a1 + 104);
    goto LABEL_17;
  }
  if (v9 != a2 + 80)
  {
    *(_QWORD *)(a1 + 104) = v9;
LABEL_17:
    *v8 = 0;
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + 104) = a1 + 80;
  (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 24))(*v8);
LABEL_19:
  v10 = (_QWORD *)(a2 + 136);
  v11 = *(_QWORD *)(a2 + 136);
  if (!v11)
  {
    v10 = (_QWORD *)(a1 + 136);
    goto LABEL_23;
  }
  if (v11 != a2 + 112)
  {
    *(_QWORD *)(a1 + 136) = v11;
LABEL_23:
    *v10 = 0;
    goto LABEL_25;
  }
  *(_QWORD *)(a1 + 136) = a1 + 112;
  (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 24))(*v10);
LABEL_25:
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  if (*(_BYTE *)(a2 + 200))
  {
    v12 = (_QWORD *)(a2 + 192);
    v13 = *(_QWORD *)(a2 + 192);
    if (v13)
    {
      if (v13 == a2 + 168)
      {
        *(_QWORD *)(a1 + 192) = a1 + 168;
        (*(void (**)(_QWORD))(*(_QWORD *)*v12 + 24))(*v12);
        goto LABEL_32;
      }
      *(_QWORD *)(a1 + 192) = v13;
    }
    else
    {
      v12 = (_QWORD *)(a1 + 192);
    }
    *v12 = 0;
LABEL_32:
    *(_BYTE *)(a1 + 200) = 1;
  }
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  return a1;
}

_QWORD *sub_20B22B624(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_24C412E18;
  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = a1 + 3;
    v6 = (_QWORD *)a1[6];
    if (v6 != a1 + 3)
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v5;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = a1 + 3;
  v6 = (_QWORD *)a1[6];
  if (v6 == a1 + 3)
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void sub_20B22B6C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_24C412E18;
  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = a1 + 3;
    v6 = (_QWORD *)a1[6];
    if (v6 != a1 + 3)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    v5 = a1 + 3;
    v6 = (_QWORD *)a1[6];
    if (v6 != a1 + 3)
    {
LABEL_6:
      if (!v6)
        goto LABEL_11;
      v7 = 5;
LABEL_10:
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
      JUMPOUT(0x20BD3583CLL);
    }
  }
  v7 = 4;
  v6 = v5;
  goto LABEL_10;
}

char *sub_20B22B77C(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24C412E18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    goto LABEL_4;
  if (v3 != a1 + 24)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
LABEL_4:
    *((_QWORD *)v2 + 6) = v3;
    goto LABEL_6;
  }
  *((_QWORD *)v2 + 6) = v2 + 24;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
LABEL_6:
  v4 = *(_QWORD *)(a1 + 64);
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  *((_QWORD *)v2 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return v2;
}

void sub_20B22B818(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B22B82C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a2 = &off_24C412E18;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(_QWORD *)(a1 + 48);
  if (result)
  {
    if (result == a1 + 24)
    {
      *(_QWORD *)(a2 + 48) = a2 + 24;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48));
      v5 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a2 + 64) = v5;
      if (!v5)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a2 + 48) = result;
      v5 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a2 + 64) = v5;
      if (!v5)
        return result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 48) = 0;
    v5 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 64) = v5;
    if (!v5)
      return result;
  }
  v6 = (unint64_t *)(v5 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t sub_20B22B8E0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = a1 + 24;
    result = *(_QWORD *)(a1 + 48);
    if (result != a1 + 24)
      goto LABEL_6;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = a1 + 24;
  result = *(_QWORD *)(a1 + 48);
  if (result == a1 + 24)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
LABEL_6:
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_20B22B98C(char *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 8);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = __p + 24;
    v6 = (char *)*((_QWORD *)__p + 6);
    if (v6 != __p + 24)
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v5;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = __p + 24;
  v6 = (char *)*((_QWORD *)__p + 6);
  if (v6 == __p + 24)
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  operator delete(__p);
}

void sub_20B22BA24(uint64_t a1, const void **a2, unsigned __int8 *a3)
{
  std::mutex *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  const void *v11;
  size_t v12;
  unsigned int v13;
  uint64_t *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  const void *v21;
  size_t v22;
  size_t v23;
  int v24;
  char v25;
  BOOL v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::mutex *v36;
  char v37;
  char v38;

  v33 = *a3;
  v5 = (std::mutex *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 240) + 24);
  v36 = v5;
  v37 = 1;
  std::mutex::lock(v5);
  v32 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v32 + 240);
  v9 = *(uint64_t **)(v6 + 8);
  v7 = (uint64_t *)(v6 + 8);
  v8 = v9;
  if (!v9)
    goto LABEL_50;
  v10 = *((char *)a2 + 23);
  if (v10 >= 0)
    v11 = a2;
  else
    v11 = *a2;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a2 + 23);
  else
    v12 = (size_t)a2[1];
  v13 = *((unsigned __int16 *)a2 + 12);
  v14 = v7;
  do
  {
    v15 = *((char *)v8 + 55);
    if (v15 >= 0)
      v16 = v8 + 4;
    else
      v16 = (const void *)v8[4];
    if (v15 >= 0)
      v17 = *((unsigned __int8 *)v8 + 55);
    else
      v17 = v8[5];
    if (v12 >= v17)
      v18 = v17;
    else
      v18 = v12;
    v19 = memcmp(v16, v11, v18);
    if (v19)
    {
      if (v19 < 0)
        goto LABEL_9;
LABEL_22:
      v14 = v8;
      goto LABEL_10;
    }
    if (v17 != v12)
    {
      if (v17 < v12)
      {
LABEL_9:
        ++v8;
        goto LABEL_10;
      }
      goto LABEL_22;
    }
    if (*((unsigned __int16 *)v8 + 28) < v13)
      ++v8;
    else
      v14 = v8;
LABEL_10:
    v8 = (uint64_t *)*v8;
  }
  while (v8);
  if (v14 == v7)
    goto LABEL_50;
  v20 = *((char *)v14 + 55);
  if (v20 >= 0)
    v21 = v14 + 4;
  else
    v21 = (const void *)v14[4];
  if (v20 >= 0)
    v22 = *((unsigned __int8 *)v14 + 55);
  else
    v22 = v14[5];
  if (v22 >= v12)
    v23 = v12;
  else
    v23 = v22;
  v24 = memcmp(v11, v21, v23);
  if (v24)
  {
    if ((v24 & 0x80000000) == 0)
      goto LABEL_41;
LABEL_50:
    v25 = v33;
    if (v33 != 1)
      goto LABEL_51;
LABEL_60:
    std::mutex::unlock(v5);
  }
  else
  {
    v27 = v12 >= v22;
    if (v12 == v22)
      v27 = v13 >= *((unsigned __int16 *)v14 + 28);
    if (!v27)
      goto LABEL_50;
LABEL_41:
    v25 = v33;
    if (v33 == 1 && v14 == v7)
      goto LABEL_60;
LABEL_51:
    sub_20B21EBA0(&v34, v32, a2, (uint64_t)&v36, 1u);
    if (v37)
    {
      std::mutex::unlock(v36);
      v37 = 0;
      v38 = v25;
      v28 = *(_QWORD *)(a1 + 48);
      if (!v28)
        sub_20AECABA4();
      (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v28 + 48))(v28, v34, &v38);
      v29 = v35;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (v37)
      {
        v5 = v36;
        goto LABEL_60;
      }
    }
    else
    {
      std::__throw_system_error(1, "unique_lock::unlock: not locked");
      __break(1u);
    }
  }
}

void sub_20B22BC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B22BCD4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit3viz13NetworkServer7Private24ForwardConnectionChangedE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3kit3viz13NetworkServer7Private24ForwardConnectionChangedE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit3viz13NetworkServer7Private24ForwardConnectionChangedE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit3viz13NetworkServer7Private24ForwardConnectionChangedE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B22BD40()
{
  return &unk_24C412E78;
}

uint64_t sub_20B22BD4C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  if (*(_BYTE *)(a1 + 200))
  {
    v2 = *(_QWORD **)(a1 + 192);
    if (v2 == (_QWORD *)(a1 + 168))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 168);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  v4 = *(_QWORD *)(a1 + 144);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 152);
    v6 = *(void **)(a1 + 144);
    if (v5 != v4)
    {
      do
      {
        v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = *(void **)(a1 + 144);
    }
    *(_QWORD *)(a1 + 152) = v4;
    operator delete(v6);
  }
  v10 = *(_QWORD **)(a1 + 136);
  if (v10 == (_QWORD *)(a1 + 112))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 112);
  }
  else
  {
    if (!v10)
      goto LABEL_23;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_23:
  v12 = *(_QWORD **)(a1 + 104);
  if (v12 == (_QWORD *)(a1 + 80))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 80);
  }
  else
  {
    if (!v12)
      goto LABEL_28;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_28:
  v14 = *(_QWORD **)(a1 + 72);
  if (v14 == (_QWORD *)(a1 + 48))
  {
    v15 = 4;
    v14 = (_QWORD *)(a1 + 48);
  }
  else
  {
    if (!v14)
      goto LABEL_33;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_33:
  v16 = *(_QWORD **)(a1 + 40);
  if (v16 == (_QWORD *)(a1 + 16))
  {
    v17 = 4;
    v16 = (_QWORD *)(a1 + 16);
    goto LABEL_37;
  }
  if (v16)
  {
    v17 = 5;
LABEL_37:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  return a1;
}

void sub_20B22BEDC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C412E98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B22BEEC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C412E98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B22BF1C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 320) && (sub_20AF3F978(a1 + 144), *(_BYTE *)(a1 + 136)) && *(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    std::mutex::~mutex((std::mutex *)(a1 + 24));
  }
  else
  {
    std::mutex::~mutex((std::mutex *)(a1 + 24));
  }
}

uint64_t sub_20B22BF78(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)a1 = &off_24C412EE8;
  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD **)(a1 + 48);
    if (v2 == (_QWORD *)(a1 + 24))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 24);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    return a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_20B22C024(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)a1 = &off_24C412EE8;
  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD **)(a1 + 48);
    if (v2 == (_QWORD *)(a1 + 24))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 24);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B22C0D0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x40uLL);
  *v2 = &off_24C412EE8;
  sub_20B22D51C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20B22C110(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B22C124(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C412EE8;
  return sub_20B22D51C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20B22C140(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD **)(a1 + 48);
    if (v2 == (_QWORD *)(a1 + 24))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 24);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20B22C1D4(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*((_BYTE *)__p + 56))
  {
    v2 = (_QWORD *)__p[6];
    if (v2 == __p + 3)
    {
      v3 = 4;
      v2 = __p + 3;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  v4 = (std::__shared_weak_count *)__p[2];
  if (!v4)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    operator delete(__p);
  }
  else
  {
LABEL_11:
    operator delete(__p);
  }
}

void sub_20B22C274(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  char *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  void **v38;
  __int128 v39;
  _BYTE *v40;
  size_t v41;
  char *v42;
  uint64_t v43;
  _DWORD *v44;
  unsigned int v45;
  char *v46;
  char *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char *v60;
  char *v61;
  void *v62;
  char *v63;
  char *v64;
  __int128 v65;
  int64_t v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  void *v73;
  char *v74;
  void *v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  _BOOL4 v100;
  char v101;
  void *v102;
  void **v103;
  unsigned __int8 *v104;
  uint64_t v105;
  void *v106;
  const void *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  _BOOL4 v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  std::mutex *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  void *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  char *v129;
  char *v130;
  void *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  char *v135;
  char *v136;
  void *v137;
  std::logic_error *exception;
  uint64_t v139;
  unint64_t v140;
  void *v141;
  __int128 v142;
  char v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  void *v148[2];
  void *v149[2];
  __int128 v150;
  unsigned __int8 v151;
  void *__p[3];
  int v153;
  _BYTE __s2[56];
  int v155;
  void *v156;
  char *v157;
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  sub_20B229190(__p);
  v144 = 0x500000001;
  v145 = 0;
  v146 = 1;
  v147 = 0;
  memset(__s2, 0, 24);
  sub_20AF43774(&__s2[24], (uint64_t)__p);
  *(_OWORD *)v148 = *(_OWORD *)__s2;
  *(_OWORD *)v149 = *(_OWORD *)&__s2[16];
  v150 = *(_OWORD *)&__s2[32];
  v151 = 1;
  v5 = (char *)__p[0];
  if (__p[0])
  {
    v6 = (char *)__p[1];
    v7 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = __p[0];
    }
    __p[1] = v5;
    operator delete(v7);
  }
  v139 = a1;
  v11 = a3[6];
  v12 = a3[7];
  v13 = v12 >= v11;
  v14 = v12 - v11;
  if (!v13)
    v14 = 0;
  if (v14 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    goto LABEL_229;
  }
  a3[6] = v11 + 4;
  sub_20B42BA30(a3);
  sub_20B1C9550((uint64_t)__s2, a3, &v144);
  v17 = a3[6];
  v16 = a3[7];
  if (v16 <= v17)
  {
LABEL_228:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
LABEL_229:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v18 = *(unsigned __int8 *)(a3[3] + v17);
  v19 = v17 + 1;
  a3[6] = v19;
  if (v18)
  {
    if (!v151)
    {
      *(_OWORD *)v149 = 0u;
      v150 = 0u;
      *(_OWORD *)v148 = 0u;
      v20 = sub_20B0C19F8(0);
      sub_20AF43774(&v149[1], (uint64_t)v20);
      v151 = 1;
      v19 = a3[6];
      v16 = a3[7];
    }
    v13 = v16 >= v19;
    v21 = v16 - v19;
    if (!v13)
      v21 = 0;
    if (v21 > 3)
    {
      a3[6] = v19 + 4;
      sub_20B42BA30(a3);
      v22 = a3[6];
      v23 = a3[7];
      v13 = v23 >= v22;
      v24 = v23 - v22;
      if (!v13)
        v24 = 0;
      if (v24 > 7)
      {
        v25 = *(_QWORD *)(a3[3] + v22);
        a3[6] = v22 + 8;
        v26 = (char *)v148[1];
        v27 = 0x2E8BA2E8BA2E8BA3 * (((char *)v148[1] - (char *)v148[0]) >> 3);
        v140 = v25;
        v15 = v25 - v27;
        if (v25 > v27)
        {
          sub_20B22D63C(v148, v15);
LABEL_42:
          v35 = 0;
          while (1)
          {
            v155 = 0;
            memset(&__s2[8], 0, 48);
            sub_20AF43774(&v156, (uint64_t)&v149[1]);
            sub_20B2288AC(a3, (uint64_t)__s2);
            v36 = (char *)v148[0];
            v37 = (char *)v148[0] + 88 * v35;
            if (v37 != __s2)
            {
              v38 = (void **)(v37 + 8);
              if (v37[31] < 0)
              {
                if (__s2[31] >= 0)
                  v40 = &__s2[8];
                else
                  v40 = *(_BYTE **)&__s2[8];
                if (__s2[31] >= 0)
                  v41 = __s2[31];
                else
                  v41 = *(_QWORD *)&__s2[16];
                sub_20AEC8090(v38, v40, v41);
              }
              else if ((__s2[31] & 0x80) != 0)
              {
                sub_20AEC7FCC(v38, *(void **)&__s2[8], *(size_t *)&__s2[16]);
              }
              else
              {
                v39 = *(_OWORD *)&__s2[8];
                *((_QWORD *)v37 + 3) = *(_QWORD *)&__s2[24];
                *(_OWORD *)v38 = v39;
              }
            }
            v42 = &v36[88 * v35];
            v45 = *((_DWORD *)v42 + 14);
            v44 = v42 + 56;
            v43 = v45;
            *(v44 - 6) = *(_DWORD *)&__s2[32];
            v15 = (unint64_t)(v44 - 4);
            if (v45 == -1)
            {
              if (v155 != -1)
              {
LABEL_60:
                __p[0] = v44 - 4;
                ((void (*)(void **))off_24C412F48[v155])(__p);
              }
            }
            else
            {
              if (v155 != -1)
                goto LABEL_60;
              ((void (*)(void **, unint64_t))off_24C412698[v43])(__p, v15);
              *v44 = -1;
            }
            if (v37 != __s2)
              sub_20B1F6A88((uint64_t)&v36[88 * v35 + 64], v156, v157, (v157 - (_BYTE *)v156) >> 4);
            v46 = (char *)v156;
            if (v156)
            {
              v47 = v157;
              v48 = v156;
              if (v157 != v156)
              {
                do
                {
                  v49 = (std::__shared_weak_count *)*((_QWORD *)v47 - 1);
                  if (v49)
                  {
                    v50 = (unint64_t *)&v49->__shared_owners_;
                    do
                      v51 = __ldaxr(v50);
                    while (__stlxr(v51 - 1, v50));
                    if (!v51)
                    {
                      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                      std::__shared_weak_count::__release_weak(v49);
                    }
                  }
                  v47 -= 16;
                }
                while (v47 != v46);
                v48 = v156;
              }
              v157 = v46;
              operator delete(v48);
            }
            if (v155 != -1)
              ((void (*)(void **, _BYTE *))off_24C412698[v155])(__p, &__s2[40]);
            v155 = -1;
            if ((__s2[31] & 0x80000000) != 0)
              operator delete(*(void **)&__s2[8]);
            if (++v35 == v140)
              goto LABEL_78;
          }
        }
        if (v25 < v27)
        {
          v34 = (char *)v148[0] + 88 * v25;
          if (v148[1] != v34)
          {
            do
            {
              v26 -= 88;
              sub_20B228408((uint64_t)v26);
            }
            while (v26 != v34);
          }
          v148[1] = v34;
        }
        if (v140)
          goto LABEL_42;
LABEL_78:
        v52 = a3[12];
        v55 = *(_QWORD *)(v52 - 8);
        v53 = v52 - 8;
        v54 = v55;
        v56 = a3[9];
        v58 = *(_QWORD *)(v56 - 8);
        v57 = v56 - 8;
        a3[6] = v54 + v58 + 8;
        a3[9] = v57;
        a3[12] = v53;
        v59 = v151;
        goto LABEL_88;
      }
    }
    goto LABEL_228;
  }
  if (v151)
  {
    v28 = (char *)v149[1];
    if (v149[1])
    {
      v29 = (char *)v150;
      v30 = v149[1];
      if ((void *)v150 != v149[1])
      {
        do
        {
          v31 = (std::__shared_weak_count *)*((_QWORD *)v29 - 1);
          if (v31)
          {
            v32 = (unint64_t *)&v31->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          v29 -= 16;
        }
        while (v29 != v28);
        v30 = v149[1];
      }
      *(_QWORD *)&v150 = v28;
      operator delete(v30);
    }
    v60 = (char *)v148[0];
    if (v148[0])
    {
      v61 = (char *)v148[1];
      v62 = v148[0];
      if (v148[1] != v148[0])
      {
        do
        {
          v61 -= 88;
          sub_20B228408((uint64_t)v61);
        }
        while (v61 != v60);
        v62 = v148[0];
      }
      v148[1] = v60;
      operator delete(v62);
    }
    v151 = 0;
  }
  v59 = 0;
  v53 = a3[12];
  v57 = a3[9];
LABEL_88:
  a3[6] = *(_QWORD *)(v53 - 8) + *(_QWORD *)(v57 - 8) + 8;
  a3[9] = v57 - 8;
  a3[12] = v53 - 8;
  if (!v59)
    goto LABEL_205;
  v64 = (char *)v148[0];
  v63 = (char *)v148[1];
  memset(__p, 0, sizeof(__p));
  v65 = 0uLL;
  v66 = (char *)v148[1] - (char *)v148[0];
  if (v148[1] == v148[0])
    goto LABEL_131;
  v67 = 0x2E8BA2E8BA2E8BA3 * (v66 >> 3);
  if (v67 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  __p[0] = operator new(0x5D1745D1745D1748 * (v66 >> 3));
  __p[1] = __p[0];
  __p[2] = (char *)__p[0] + 24 * v67;
  do
  {
    if (*((_DWORD *)v64 + 14) > 1u)
LABEL_223:
      sub_20AECFAB8();
    v68 = *((_QWORD *)v64 + 5);
    v69 = (std::__shared_weak_count *)*((_QWORD *)v64 + 6);
    if (!v69)
      goto LABEL_99;
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
    do
      v72 = __ldaxr(v70);
    while (__stlxr(v72 - 1, v70));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
      if (!v68)
      {
LABEL_104:
        *(_QWORD *)__s2 = &off_24C411E78;
        *(_QWORD *)&__s2[8] = 0;
        *(_QWORD *)&__s2[16] = 0;
        v74 = (char *)__p[1];
        v73 = __p[2];
        if (__p[1] < __p[2])
          goto LABEL_102;
        goto LABEL_105;
      }
    }
    else
    {
LABEL_99:
      if (!v68)
        goto LABEL_104;
    }
    if (*((_DWORD *)v64 + 14))
      goto LABEL_223;
    (*(void (**)(_BYTE *__return_ptr))(**((_QWORD **)v64 + 5) + 48))(__s2);
    v74 = (char *)__p[1];
    v73 = __p[2];
    if (__p[1] < __p[2])
    {
LABEL_102:
      *(_QWORD *)v74 = &off_24C411E78;
      *(_OWORD *)(v74 + 8) = *(_OWORD *)&__s2[8];
      *(_QWORD *)&__s2[8] = 0;
      *(_QWORD *)&__s2[16] = 0;
      v75 = v74 + 24;
      goto LABEL_125;
    }
LABEL_105:
    v76 = (char *)__p[0];
    v77 = 0xAAAAAAAAAAAAAAABLL * ((v74 - (char *)__p[0]) >> 3);
    v78 = v77 + 1;
    if (v77 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60B8();
    v79 = 0xAAAAAAAAAAAAAAABLL * ((int64_t)((uint64_t)v73 - (unint64_t)__p[0]) >> 3);
    if (2 * v79 > v78)
      v78 = 2 * v79;
    if (v79 >= 0x555555555555555)
      v80 = 0xAAAAAAAAAAAAAAALL;
    else
      v80 = v78;
    if (v80 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v81 = (char *)operator new(24 * v80);
    v82 = &v81[24 * v77];
    *(_QWORD *)v82 = &off_24C411E78;
    *(_OWORD *)(v82 + 8) = *(_OWORD *)&__s2[8];
    v83 = &v81[24 * v80];
    *(_QWORD *)&__s2[8] = 0;
    *(_QWORD *)&__s2[16] = 0;
    v75 = v82 + 24;
    if (v74 == v76)
    {
      __p[0] = v82;
      __p[1] = v82 + 24;
      __p[2] = &v81[24 * v80];
    }
    else
    {
      do
      {
        *((_QWORD *)v82 - 3) = &off_24C411E78;
        v82 -= 24;
        *(_OWORD *)(v82 + 8) = *((_OWORD *)v74 - 1);
        *((_QWORD *)v74 - 2) = 0;
        *((_QWORD *)v74 - 1) = 0;
        v74 -= 24;
      }
      while (v74 != v76);
      v74 = (char *)__p[0];
      v84 = (char *)__p[1];
      __p[0] = v82;
      __p[1] = v75;
      __p[2] = v83;
      while (v84 != v74)
      {
        v85 = (std::__shared_weak_count *)*((_QWORD *)v84 - 1);
        if (v85)
        {
          v86 = (unint64_t *)&v85->__shared_owners_;
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        v84 -= 24;
      }
    }
    if (v74)
      operator delete(v74);
LABEL_125:
    __p[1] = v75;
    v88 = *(std::__shared_weak_count **)&__s2[16];
    if (*(_QWORD *)&__s2[16])
    {
      v89 = (unint64_t *)(*(_QWORD *)&__s2[16] + 8);
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v64 += 88;
  }
  while (v64 != v63);
  v65 = *(_OWORD *)__p;
  v66 = (int64_t)__p[2];
LABEL_131:
  *(_OWORD *)__s2 = v65;
  *(_QWORD *)&__s2[16] = v66;
  sub_20B227C60(__p, (uint64_t *)__s2);
  v91 = *(_QWORD *)__s2;
  if (*(_QWORD *)__s2)
  {
    v92 = *(_QWORD *)&__s2[8];
    v93 = *(void **)__s2;
    if (*(_QWORD *)&__s2[8] != *(_QWORD *)__s2)
    {
      do
      {
        v94 = *(std::__shared_weak_count **)(v92 - 8);
        if (v94)
        {
          v95 = (unint64_t *)&v94->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        v92 -= 24;
      }
      while (v92 != v91);
      v93 = *(void **)__s2;
    }
    *(_QWORD *)&__s2[8] = v91;
    operator delete(v93);
  }
  v97 = (char *)__p[0];
  v141 = __p[0];
  v142 = *(_OWORD *)&__p[1];
  v143 = 1;
  v98 = (char *)__p[1];
  if (__p[0] != __p[1])
  {
    while (2)
    {
      v99 = *((_QWORD *)v97 + 1);
      if (!v99)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        v99 = *((_QWORD *)v97 + 1);
      }
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v99 + 48))(__p);
      v100 = 0;
      strcpy(__s2, "cv3d.net");
      __s2[23] = 8;
      *(_DWORD *)&__s2[24] = 1;
      __s2[32] = 1;
      v101 = HIBYTE(__p[2]);
      if (SHIBYTE(__p[2]) >= 0)
        v102 = (void *)HIBYTE(__p[2]);
      else
        v102 = __p[1];
      if (v102 == (void *)8)
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          v106 = __p[0];
          if (memcmp(__p[0], __s2, (size_t)__p[1]))
          {
            operator delete(v106);
            goto LABEL_145;
          }
        }
        else if (HIBYTE(__p[2]))
        {
          v103 = __p;
          v104 = __s2;
          v105 = HIBYTE(__p[2]);
          while (*(unsigned __int8 *)v103 == *v104)
          {
            v103 = (void **)((char *)v103 + 1);
            ++v104;
            if (!--v105)
              goto LABEL_161;
          }
          v100 = 0;
          if ((HIBYTE(__p[2]) & 0x80) != 0)
          {
LABEL_166:
            operator delete(__p[0]);
            if (v100)
              goto LABEL_167;
LABEL_145:
            v97 += 24;
            if (v97 == v98)
              goto LABEL_190;
            continue;
          }
LABEL_163:
          if (!v100)
            goto LABEL_145;
LABEL_167:
          v107 = (const void *)*((_QWORD *)v97 + 1);
          v108 = (std::__shared_weak_count *)*((_QWORD *)v97 + 2);
          if (v108)
          {
            v109 = (unint64_t *)&v108->__shared_owners_;
            do
              v110 = __ldxr(v109);
            while (__stxr(v110 + 1, v109));
          }
          if (v107)
          {
            v111 = __dynamic_cast(v107, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40E250, 0) != 0;
            if (!v108)
              goto LABEL_177;
          }
          else
          {
            v111 = 0;
            if (!v108)
              goto LABEL_177;
          }
          v112 = (unint64_t *)&v108->__shared_owners_;
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (v113)
          {
LABEL_177:
            if (v111)
            {
LABEL_178:
              v114 = *((_QWORD *)v97 + 1);
              v115 = (std::__shared_weak_count *)*((_QWORD *)v97 + 2);
              if (v115)
              {
                v116 = (unint64_t *)&v115->__shared_owners_;
                do
                  v117 = __ldxr(v116);
                while (__stxr(v117 + 1, v116));
                v118 = v114 + 8;
                do
                  v119 = __ldaxr(v116);
                while (__stlxr(v119 - 1, v116));
                if (!v119)
                {
                  ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                  std::__shared_weak_count::__release_weak(v115);
                }
              }
              else
              {
                v118 = v114 + 8;
              }
              goto LABEL_188;
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
            if (v111)
              goto LABEL_178;
          }
          v118 = 8;
LABEL_188:
          v120 = *(std::mutex **)(v139 + 8);
          std::mutex::lock(v120);
          v121 = *(_QWORD *)(v139 + 8);
          if (!*(_BYTE *)(v121 + 296))
          {
            sub_20B0BAD9C(v121 + 64, v118);
            *(_BYTE *)(v121 + 296) = 1;
          }
          std::mutex::unlock(v120);
          goto LABEL_145;
        }
LABEL_161:
        v100 = v153 == 1;
      }
      break;
    }
    if (v101 < 0)
      goto LABEL_166;
    goto LABEL_163;
  }
LABEL_190:
  if (*(_BYTE *)(v139 + 56))
  {
    v122 = *(_QWORD *)(v139 + 48);
    if (!v122)
      sub_20AECABA4();
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v122 + 48))(v122, &v141);
  }
  if (v143)
  {
    v123 = (char *)v141;
    if (v141)
    {
      v124 = (char *)v142;
      v125 = v141;
      if ((void *)v142 != v141)
      {
        do
        {
          v126 = (std::__shared_weak_count *)*((_QWORD *)v124 - 1);
          if (v126)
          {
            v127 = (unint64_t *)&v126->__shared_owners_;
            do
              v128 = __ldaxr(v127);
            while (__stlxr(v128 - 1, v127));
            if (!v128)
            {
              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
              std::__shared_weak_count::__release_weak(v126);
            }
          }
          v124 -= 24;
        }
        while (v124 != v123);
        v125 = v141;
      }
      *(_QWORD *)&v142 = v123;
      operator delete(v125);
    }
  }
LABEL_205:
  if (v151)
  {
    v129 = (char *)v149[1];
    if (v149[1])
    {
      v130 = (char *)v150;
      v131 = v149[1];
      if ((void *)v150 != v149[1])
      {
        do
        {
          v132 = (std::__shared_weak_count *)*((_QWORD *)v130 - 1);
          if (v132)
          {
            v133 = (unint64_t *)&v132->__shared_owners_;
            do
              v134 = __ldaxr(v133);
            while (__stlxr(v134 - 1, v133));
            if (!v134)
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v132->__on_zero_shared)(v132, v15);
              std::__shared_weak_count::__release_weak(v132);
            }
          }
          v130 -= 16;
        }
        while (v130 != v129);
        v131 = v149[1];
      }
      *(_QWORD *)&v150 = v129;
      operator delete(v131);
    }
    v135 = (char *)v148[0];
    if (v148[0])
    {
      v136 = (char *)v148[1];
      v137 = v148[0];
      if (v148[1] != v148[0])
      {
        do
        {
          v136 -= 88;
          sub_20B228408((uint64_t)v136);
        }
        while (v136 != v135);
        v137 = v148[0];
      }
      v148[1] = v135;
      operator delete(v137);
    }
  }
}

void sub_20B22CFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char *a20,char *a21,uint64_t a22,char *__p,char *a24,uint64_t a25,char a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,void *a42,uint64_t a43)
{
  void *v43;
  char *v45;
  char *v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  char *v50;
  char *v51;

  __cxa_free_exception(v43);
  if (a26)
  {
    if (__p)
    {
      v45 = a24;
      v46 = __p;
      if (a24 != __p)
      {
        do
        {
          v47 = (std::__shared_weak_count *)*((_QWORD *)v45 - 1);
          if (v47)
          {
            p_shared_owners = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldaxr(p_shared_owners);
            while (__stlxr(v49 - 1, p_shared_owners));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          v45 -= 16;
        }
        while (v45 != __p);
        v46 = __p;
      }
      operator delete(v46);
    }
    if (a20)
    {
      v50 = a21;
      v51 = a20;
      if (a21 != a20)
      {
        do
        {
          v50 -= 88;
          sub_20B228408((uint64_t)v50);
        }
        while (v50 != a20);
        v51 = a20;
      }
      operator delete(v51);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B22D4A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit3viz13NetworkClient4Impl28ProcessReceivedServerMessageE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3kit3viz13NetworkClient4Impl28ProcessReceivedServerMessageE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit3viz13NetworkClient4Impl28ProcessReceivedServerMessageE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit3viz13NetworkClient4Impl28ProcessReceivedServerMessageE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B22D510()
{
  return &unk_24C412F58;
}

uint64_t sub_20B22D51C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a1 + 16) = 0;
  v6 = a1 + 16;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    v7 = *(_QWORD *)(a2 + 40);
    if (v7)
    {
      if (v7 == a2 + 16)
      {
        *(_QWORD *)(a1 + 40) = v6;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 40) + 24))(*(_QWORD *)(a2 + 40), a1 + 16);
        goto LABEL_10;
      }
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
    *(_QWORD *)(a1 + 40) = v7;
LABEL_10:
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_20B22D5C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_BYTE *)(v1 + 48))
  {
    v4 = *(_QWORD **)(v1 + 40);
    if (v4 == v2)
    {
      v5 = 4;
    }
    else
    {
      if (!v4)
        goto LABEL_7;
      v5 = 5;
      v2 = *(_QWORD **)(v1 + 40);
    }
    (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
  }
LABEL_7:
  v6 = *(std::__shared_weak_count **)(v1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B22D63C(void **a1, unint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  _BYTE *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char v34;

  v4 = a1[2];
  v5 = a1[1];
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = 0;
      v12 = &v5[88 * a2];
      v13 = 88 * a2;
      do
      {
        v14 = sub_20B0C19F8(0);
        v15 = &v5[v11];
        *((_DWORD *)v15 + 14) = 0;
        *(_OWORD *)(v15 + 40) = 0u;
        *(_OWORD *)(v15 + 24) = 0u;
        *(_OWORD *)(v15 + 8) = 0u;
        sub_20AF43774(&v5[v11 + 64], (uint64_t)v14);
        v11 += 88;
      }
      while (v13 != v11);
    }
    else
    {
      v12 = (char *)a1[1];
    }
    a1[1] = v12;
  }
  else
  {
    v6 = 0x2E8BA2E8BA2E8BA3 * ((v5 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x2E8BA2E8BA2E8BALL)
      sub_20AEC60B8();
    v8 = 0x2E8BA2E8BA2E8BA3 * ((v4 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x1745D1745D1745DLL)
      v9 = 0x2E8BA2E8BA2E8BALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x2E8BA2E8BA2E8BALL)
        sub_20AEC60CC();
      v10 = (char *)operator new(88 * v9);
    }
    else
    {
      v10 = 0;
    }
    v16 = 0;
    v17 = &v10[88 * v6];
    v31 = v17;
    v33 = &v10[88 * v9];
    v18 = 88 * a2;
    v19 = &v17[v18];
    do
    {
      v20 = sub_20B0C19F8(0);
      v21 = &v17[v16];
      *((_DWORD *)v21 + 14) = 0;
      *(_OWORD *)(v21 + 40) = 0u;
      *(_OWORD *)(v21 + 24) = 0u;
      *(_OWORD *)(v21 + 8) = 0u;
      sub_20AF43774(&v17[v16 + 64], (uint64_t)v20);
      v16 += 88;
    }
    while (v18 != v16);
    v32 = &v17[v18];
    v23 = (char *)*a1;
    v22 = (char *)a1[1];
    v24 = v17;
    if (v22 == *a1)
    {
      v30 = (char *)a1[1];
    }
    else
    {
      v25 = 0;
      do
      {
        v26 = &v31[v25];
        v27 = &v22[v25];
        v28 = *(_OWORD *)&v22[v25 - 80];
        *((_QWORD *)v26 - 8) = *(_QWORD *)&v22[v25 - 64];
        *((_OWORD *)v26 - 5) = v28;
        *((_QWORD *)v27 - 9) = 0;
        *((_QWORD *)v27 - 8) = 0;
        *((_QWORD *)v27 - 10) = 0;
        *((_DWORD *)v26 - 14) = *(_DWORD *)&v22[v25 - 56];
        v31[v25 - 48] = 0;
        *((_DWORD *)v26 - 8) = -1;
        v29 = *(unsigned int *)&v22[v25 - 32];
        if ((_DWORD)v29 != -1)
        {
          ((void (*)(char *, char *, char *))off_24C4126A8[v29])(&v34, &v31[v25 - 48], v27 - 48);
          *((_DWORD *)v26 - 8) = v29;
        }
        *((_QWORD *)v26 - 3) = 0;
        *((_QWORD *)v26 - 2) = 0;
        *((_QWORD *)v26 - 1) = 0;
        *(_OWORD *)(v26 - 24) = *(_OWORD *)(v27 - 24);
        *((_QWORD *)v26 - 1) = *((_QWORD *)v27 - 1);
        *((_QWORD *)v27 - 3) = 0;
        *((_QWORD *)v27 - 2) = 0;
        *((_QWORD *)v27 - 1) = 0;
        v25 -= 88;
      }
      while (&v22[v25] != v23);
      v30 = (char *)*a1;
      v22 = (char *)a1[1];
      v24 = &v31[v25];
      v19 = v32;
    }
    *a1 = v24;
    a1[1] = v19;
    a1[2] = v33;
    if (v22 != v30)
    {
      do
      {
        sub_20B228408((uint64_t)(v22 - 88));
        v22 -= 88;
      }
      while (v22 != v30);
      v22 = v30;
    }
    if (v22)
      operator delete(v22);
  }
}

void sub_20B22D914(_Unwind_Exception *exception_object, ...)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;

  va_start(va, exception_object);
  v6 = *(unsigned int *)(v4 + 56);
  if ((_DWORD)v6 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24C40D788[v6])((uint64_t *)va, v2 + v3 + 40);
  *(_DWORD *)(v4 + 56) = -1;
  if (*(char *)(v4 + 31) < 0)
  {
    operator delete(*(void **)(v4 + 8));
    *(_QWORD *)(v1 + 8) = v2 + v3;
    _Unwind_Resume(exception_object);
  }
  *(_QWORD *)(v1 + 8) = v2 + v3;
  _Unwind_Resume(exception_object);
}

void sub_20B22D980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v21 = *(unsigned int *)(v19 + 56);
  if ((_DWORD)v21 != -1)
    ((void (*)(char *, uint64_t))off_24C40D788[v21])(&a17, v18 + v17 + 40);
  *(_DWORD *)(v19 + 56) = -1;
  if (*(char *)(v19 + 31) < 0)
  {
    operator delete(*(void **)(v19 + 8));
    a11 = v18 + v17;
    sub_20B2283B8((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  a11 = v18 + v17;
  sub_20B2283B8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B22D9FC(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v7 = *a3;
      v6 = a3[1];
      if (v6)
      {
        v8 = (unint64_t *)(v6 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = (std::__shared_weak_count *)a2[1];
      *a2 = v7;
      a2[1] = v6;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      return;
    }
    ((void (*)(char *, uint64_t))off_24C412698[v5])(&v16, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  v13 = a3[1];
  *(_QWORD *)v4 = *a3;
  *(_QWORD *)(v4 + 8) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_DWORD *)(v4 + 16) = 0;
}

void sub_20B22DAF0(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v7 = *a3;
      v6 = a3[1];
      if (v6)
      {
        v8 = (unint64_t *)(v6 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = (std::__shared_weak_count *)a2[1];
      *a2 = v7;
      a2[1] = v6;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      return;
    }
    ((void (*)(char *, uint64_t))off_24C412698[v5])(&v16, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  v13 = a3[1];
  *(_QWORD *)v4 = *a3;
  *(_QWORD *)(v4 + 8) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_DWORD *)(v4 + 16) = 1;
}

uint64_t sub_20B22DBEC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20B22DC3C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B22DC9C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24C412F78;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_20B22DD3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_20B22DD60()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B22DD9C()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_20B532360);
  abort();
}

uint64_t sub_20B22DDD8()
{
  return 1;
}

uint64_t sub_20B22DDE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_20AECABA4();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_20B22DE60()
{
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B22DE74(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C412FF0;
  result[1] = v3;
  return result;
}

uint64_t sub_20B22DEA8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C412FF0;
  a2[1] = v2;
  return result;
}

void sub_20B22DEC4(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v1 + 184));
  v2 = (unsigned int *)(v1 + 128);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  std::condition_variable::notify_one((std::condition_variable *)(v1 + 136));
  std::mutex::unlock((std::mutex *)(v1 + 184));
}

uint64_t sub_20B22DF0C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit3viz13NetworkClient4Impl22BuildNetworkOutputNodeEvE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit3viz13NetworkClient4Impl22BuildNetworkOutputNodeEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit3viz13NetworkClient4Impl22BuildNetworkOutputNodeEvE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit3viz13NetworkClient4Impl22BuildNetworkOutputNodeEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B22DF78()
{
  return &unk_24C413060;
}

void sub_20B22DF84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B22DF94(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B22DFC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 72) + 72);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 208));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 160));
  v3 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(_BYTE *)(a1 + 104))
  {
    v5 = *(_QWORD **)(a1 + 96);
    if (v5 == (_QWORD *)(a1 + 72))
    {
      v6 = 4;
      v5 = (_QWORD *)(a1 + 72);
      goto LABEL_10;
    }
    if (v5)
    {
      v6 = 5;
LABEL_10:
      (*(void (**)(void))(*v5 + 8 * v6))();
    }
  }
  v7 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v7)
    goto LABEL_15;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v10)
      return;
  }
  else
  {
LABEL_15:
    v10 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v10)
      return;
  }
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

uint64_t sub_20B22E0FC(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4, __int128 *a5, __int128 *a6, uint64_t a7)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  uint64_t (***v32)();
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t (***v44)();
  uint64_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t **v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  std::__shared_weak_count *v68;
  unint64_t v69;
  unint64_t *p_shared_weak_owners;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  void *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t **v107;
  uint64_t *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  __int128 *v118;
  std::__shared_weak_count *v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t *v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t **v141;
  uint64_t v142;
  uint64_t **v143;
  _QWORD v144[3];
  _QWORD *v145;
  char v146;
  __int128 v147;
  std::__shared_weak_count *v148;
  void *__p[5];
  char v150;
  char v151;
  __int128 v152;
  uint64_t (**v153)();
  __int128 *v154;
  std::__shared_weak_count *v155;
  uint64_t (**v156)();
  _OWORD v157[3];
  __int128 v158;
  __int128 v159;
  uint64_t (**v160)();
  void *v161[2];
  uint64_t v162;
  uint64_t (**v163)();
  void *v164[2];
  uint64_t (**v165)();
  __int128 v166;
  char v167;
  void *v168;
  char v169;
  char v170;
  _BYTE v171[20];
  int v172;
  __int128 v173;
  _QWORD v174[3];
  _QWORD *v175;
  char v176;
  _QWORD v177[2];
  _QWORD v178[5];

  v178[2] = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  v11 = *a4;
  v10 = a4[1];
  v140 = *((_QWORD *)a5 + 2);
  v138 = *a6;
  v139 = *a5;
  LOBYTE(v144[0]) = 0;
  v146 = 0;
  v12 = *(unsigned __int8 *)(a7 + 32);
  if (*(_BYTE *)(a7 + 32))
  {
    v13 = *(_QWORD *)(a7 + 24);
    if (v13)
    {
      if (v13 == a7)
      {
        v145 = v144;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a7 + 24))(a7, v144);
        goto LABEL_8;
      }
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    }
    v145 = (_QWORD *)v13;
LABEL_8:
    v146 = 1;
  }
  v14 = (char *)operator new(0x148uLL);
  *((_QWORD *)v14 + 1) = 0;
  v15 = (unint64_t *)(v14 + 8);
  *(_QWORD *)v14 = &off_24C412E98;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_OWORD *)(v14 + 184) = 0u;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_OWORD *)(v14 + 232) = 0u;
  *(_OWORD *)(v14 + 248) = 0u;
  *(_OWORD *)(v14 + 264) = 0u;
  *(_OWORD *)(v14 + 280) = 0u;
  *(_OWORD *)(v14 + 296) = 0u;
  *(_OWORD *)(v14 + 312) = 0u;
  *((_QWORD *)v14 + 2) = 0;
  *((_QWORD *)v14 + 3) = 850045863;
  *(_OWORD *)(v14 + 73) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  *((_OWORD *)v14 + 2) = 0u;
  *(_QWORD *)a1 = v14 + 24;
  *(_QWORD *)(a1 + 8) = v14;
  *(_OWORD *)(a1 + 16) = v138;
  *(_QWORD *)(a1 + 32) = v14 + 24;
  *(_QWORD *)(a1 + 40) = v14;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  *(_BYTE *)(a1 + 48) = 0;
  v17 = a1 + 48;
  *(_BYTE *)(a1 + 80) = 0;
  if (v12)
  {
    if (v145)
    {
      if (v145 == v144)
      {
        *(_QWORD *)(a1 + 72) = v17;
        (*(void (**)(_QWORD *, uint64_t))(v144[0] + 24))(v144, a1 + 48);
      }
      else
      {
        *(_QWORD *)(a1 + 72) = v145;
        v145 = 0;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 72) = 0;
    }
    v18 = 1;
    *(_BYTE *)(a1 + 80) = 1;
  }
  else
  {
    v18 = 0;
  }
  *(_QWORD *)(a1 + 184) = 850045863;
  *(_OWORD *)(a1 + 88) = v139;
  *(_QWORD *)(a1 + 104) = v140;
  *(_QWORD *)(a1 + 112) = 0;
  v137 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 136) = 1018212795;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  if (v9)
  {
    v19 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)&v173 = *(_QWORD *)(a1 + 32);
    *((_QWORD *)&v173 + 1) = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      v18 = *(unsigned __int8 *)(a1 + 80);
    }
    v22 = v174;
    LOBYTE(v174[0]) = 0;
    v176 = 0;
    if (!v18)
    {
LABEL_40:
      v154 = 0;
      v29 = (char *)operator new(0x40uLL);
      v30 = v29;
      *(_QWORD *)v29 = &off_24C412EE8;
      *(_OWORD *)(v29 + 8) = v173;
      v173 = 0uLL;
      v29[24] = 0;
      v29[56] = 0;
      if (v18)
      {
        if (v175)
        {
          if (v175 == v174)
          {
            *((_QWORD *)v29 + 6) = v29 + 24;
            (*(void (**)(_QWORD *))(v174[0] + 24))(v174);
          }
          else
          {
            *((_QWORD *)v29 + 6) = v175;
            v175 = 0;
          }
        }
        else
        {
          *((_QWORD *)v29 + 6) = 0;
        }
        v30[56] = 1;
      }
      v154 = (__int128 *)v30;
      v31 = (_QWORD *)operator new();
      if (v154)
      {
        if (v154 == &v152)
        {
          *(_QWORD *)&v157[1] = &v156;
          (*(void (**)(__int128 *, uint64_t (***)()))(v152 + 24))(&v152, &v156);
        }
        else
        {
          *(_QWORD *)&v157[1] = v154;
          v154 = 0;
        }
      }
      else
      {
        *(_QWORD *)&v157[1] = 0;
      }
      LOBYTE(__p[0]) = 0;
      LOBYTE(__p[3]) = 0;
      *(_QWORD *)v171 = v11;
      *(_QWORD *)&v171[8] = v10;
      *v31 = off_24C41BC70;
      sub_20B423008(a3, &v156, (uint64_t)__p, v31 + 1);
      if (LOBYTE(__p[3]) && SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      v32 = *(uint64_t (****)())&v157[1];
      if (*(uint64_t (****)())&v157[1] == &v156)
      {
        v33 = 4;
        v32 = &v156;
      }
      else
      {
        if (!*(_QWORD *)&v157[1])
          goto LABEL_60;
        v33 = 5;
      }
      (*v32)[v33]();
LABEL_60:
      v34 = *v137;
      *v137 = (uint64_t)v31;
      if (v34)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      v35 = v154;
      if (v154 == &v152)
      {
        v36 = 4;
        v35 = &v152;
      }
      else
      {
        if (!v154)
          goto LABEL_67;
        v36 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_67:
      if (v176)
      {
        if (v175 == v174)
        {
          v37 = 4;
          goto LABEL_72;
        }
        if (v175)
        {
          v37 = 5;
          v22 = v175;
LABEL_72:
          (*(void (**)(_QWORD *))(*v22 + 8 * v37))(v22);
        }
      }
      v38 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
      if (!*((_QWORD *)&v173 + 1))
        goto LABEL_124;
      v39 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      goto LABEL_122;
    }
    v23 = *(_QWORD *)(a1 + 72);
    if (v23)
    {
      if (v23 == v17)
      {
        v175 = v174;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 24))(a1 + 48, v174);
        goto LABEL_39;
      }
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
    }
    v175 = (_QWORD *)v23;
LABEL_39:
    v176 = 1;
    goto LABEL_40;
  }
  v24 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v173 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)&v173 + 1) = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    v18 = *(unsigned __int8 *)(a1 + 80);
  }
  v27 = v174;
  LOBYTE(v174[0]) = 0;
  v176 = 0;
  if (v18)
  {
    v28 = *(_QWORD *)(a1 + 72);
    if (v28)
    {
      if (v28 == v17)
      {
        v175 = v174;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 24))(a1 + 48, v174);
        goto LABEL_78;
      }
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
    }
    v175 = (_QWORD *)v28;
LABEL_78:
    v176 = 1;
  }
  v154 = 0;
  v41 = (char *)operator new(0x40uLL);
  v42 = v41;
  *(_QWORD *)v41 = &off_24C412EE8;
  *(_OWORD *)(v41 + 8) = v173;
  v173 = 0uLL;
  v41[24] = 0;
  v41[56] = 0;
  if (v18)
  {
    if (v175)
    {
      if (v175 == v174)
      {
        *((_QWORD *)v41 + 6) = v41 + 24;
        (*(void (**)(_QWORD *))(v174[0] + 24))(v174);
      }
      else
      {
        *((_QWORD *)v41 + 6) = v175;
        v175 = 0;
      }
    }
    else
    {
      *((_QWORD *)v41 + 6) = 0;
    }
    v42[56] = 1;
  }
  v154 = (__int128 *)v42;
  v43 = operator new();
  if (v154)
  {
    if (v154 == &v152)
    {
      __p[3] = __p;
      (*(void (**)(__int128 *, void **))(v152 + 24))(&v152, __p);
    }
    else
    {
      __p[3] = v154;
      v154 = 0;
    }
  }
  else
  {
    __p[3] = 0;
  }
  *(_QWORD *)v43 = &off_24C41BC30;
  if (__p[3])
  {
    if (__p[3] == __p)
    {
      *(_QWORD *)&v157[1] = &v156;
      (*((void (**)(void **, uint64_t (***)()))__p[0] + 3))(__p, &v156);
    }
    else
    {
      *(void **)&v157[1] = __p[3];
      __p[3] = 0;
    }
  }
  else
  {
    *(_QWORD *)&v157[1] = 0;
  }
  sub_20B422A4C(a3, v11, v10, &v156, (uint64_t **)(v43 + 8));
  v44 = *(uint64_t (****)())&v157[1];
  if (*(uint64_t (****)())&v157[1] == &v156)
  {
    v45 = 4;
    v44 = &v156;
  }
  else
  {
    if (!*(_QWORD *)&v157[1])
      goto LABEL_101;
    v45 = 5;
  }
  (*v44)[v45]();
LABEL_101:
  v46 = (void **)__p[3];
  if (__p[3] == __p)
  {
    v47 = 4;
    v46 = __p;
  }
  else
  {
    if (!__p[3])
      goto LABEL_106;
    v47 = 5;
  }
  (*((void (**)(void))*v46 + v47))();
LABEL_106:
  v48 = *v137;
  *v137 = v43;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = v154;
  if (v154 == &v152)
  {
    v50 = 4;
    v49 = &v152;
  }
  else
  {
    if (!v154)
      goto LABEL_113;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_113:
  if (v176)
  {
    if (v175 == v174)
    {
      v51 = 4;
      goto LABEL_118;
    }
    if (v175)
    {
      v51 = 5;
      v27 = v175;
LABEL_118:
      (*(void (**)(_QWORD *))(*v27 + 8 * v51))(v27);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
  if (!*((_QWORD *)&v173 + 1))
    goto LABEL_124;
  v52 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
  do
    v40 = __ldaxr(v52);
  while (__stlxr(v40 - 1, v52));
LABEL_122:
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
LABEL_124:
  v53 = operator new();
  v156 = 0;
  v157[0] = 0uLL;
  *(_QWORD *)(v53 + 16) = 0;
  *(_QWORD *)(v53 + 8) = v53 + 16;
  *(_DWORD *)v53 = 1;
  *(_QWORD *)(v53 + 24) = 0;
  *(_QWORD *)(v53 + 32) = 0;
  *(_QWORD *)(v53 + 40) = 0;
  sub_20B4312C4(v53, (uint64_t *)&v156);
  v142 = v53;
  sub_20B4318C0(v53, "NetworkOutputNode_WorkQueue", 3, &v141);
  v54 = operator new();
  v55 = v141;
  v141 = 0;
  v143 = v55;
  __p[0] = v55;
  if (v55)
  {
    v56 = (std::__shared_weak_count *)operator new();
    v56->__vftable = (std::__shared_weak_count_vtbl *)&off_24C412308;
    v56->__shared_owners_ = 0;
    v56->__shared_weak_owners_ = 0;
    v56[1].__vftable = (std::__shared_weak_count_vtbl *)v55;
  }
  else
  {
    v56 = 0;
  }
  v143 = 0;
  *(_QWORD *)v54 = &off_24C412358;
  strcpy((char *)(v54 + 8), "NetworkOutputNodeAsync");
  *(_BYTE *)(v54 + 31) = 22;
  *(_QWORD *)(v54 + 32) = 0;
  *(_QWORD *)(v54 + 40) = 0;
  *(_QWORD *)(v54 + 48) = 0;
  *(_QWORD *)(v54 + 56) = v55;
  *(_QWORD *)(v54 + 64) = v56;
  __p[0] = 0;
  __p[1] = 0;
  if (v56)
  {
    p_shared_owners = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldxr(p_shared_owners);
    while (__stxr(v58 + 1, p_shared_owners));
    do
      v59 = __ldxr(p_shared_owners);
    while (__stxr(v59 + 1, p_shared_owners));
  }
  *(_QWORD *)&v147 = v177[0];
  v60 = v177[0];
  *(_QWORD *)((char *)&v147 + 7) = *(_QWORD *)((char *)v177 + 7);
  *(_QWORD *)((char *)v178 + 7) = *(_QWORD *)((char *)v177 + 7);
  HIBYTE(v178[0]) = HIBYTE(v177[0]);
  v177[0] = 0;
  *(_QWORD *)((char *)v177 + 7) = 0;
  *(_QWORD *)v171 = v60;
  *(_QWORD *)&v171[7] = *(_QWORD *)((char *)v178 + 7);
  *(_QWORD *)((char *)v178 + 7) = 0;
  v178[0] = 0;
  if (v56)
  {
    v61 = (unint64_t *)&v56->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = operator new();
  *(_QWORD *)&v152 = *(_QWORD *)v171;
  *(_QWORD *)((char *)&v152 + 7) = *(_QWORD *)&v171[7];
  *(_QWORD *)v171 = 0;
  *(_QWORD *)&v171[7] = 0;
  *(_BYTE *)(v63 + 8) = 1;
  *(_QWORD *)(v63 + 32) = 0;
  *(_QWORD *)(v63 + 40) = 0;
  *(_QWORD *)v63 = &off_24C412498;
  *(_QWORD *)(v63 + 16) = &unk_24C412510;
  *(_QWORD *)(v63 + 24) = &unk_24C412550;
  *(_QWORD *)(v63 + 63) = *(_QWORD *)((char *)&v152 + 7);
  v64 = v152;
  *(_QWORD *)(v63 + 48) = 0x6C656E6E616863;
  *(_QWORD *)(v63 + 56) = v64;
  *(_BYTE *)(v63 + 71) = 7;
  *(_QWORD *)&v152 = 0;
  *(_QWORD *)((char *)&v152 + 7) = 0;
  *(_QWORD *)(v63 + 72) = v55;
  *(_QWORD *)(v63 + 80) = v56;
  v65 = (_QWORD *)operator new();
  *v65 = &off_24C412658;
  v65[1] = a1;
  *(_QWORD *)(v63 + 136) = 0;
  *(_QWORD *)(v63 + 88) = v65;
  *(_QWORD *)(v63 + 96) = v63 + 96;
  *(_QWORD *)(v63 + 104) = v63 + 96;
  *(_QWORD *)(v63 + 112) = 0;
  *(_QWORD *)(v63 + 120) = v63 + 120;
  *(_QWORD *)(v63 + 128) = v63 + 120;
  *(_QWORD *)(v63 + 144) = 0;
  if (!*(_QWORD *)(v63 + 72)
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v66 = (std::__shared_weak_count *)operator new();
  v66->__shared_owners_ = 0;
  v67 = (unint64_t *)&v66->__shared_owners_;
  v66->__vftable = (std::__shared_weak_count_vtbl *)&off_24C412BF0;
  v66->__shared_weak_owners_ = 0;
  v66[1].__vftable = (std::__shared_weak_count_vtbl *)v63;
  v68 = *(std::__shared_weak_count **)(v63 + 40);
  if (v68)
  {
    if (v68->__shared_owners_ != -1)
      goto LABEL_149;
    do
      v69 = __ldxr(v67);
    while (__stxr(v69 + 1, v67));
    p_shared_weak_owners = (unint64_t *)&v66->__shared_weak_owners_;
    do
      v71 = __ldxr(p_shared_weak_owners);
    while (__stxr(v71 + 1, p_shared_weak_owners));
    *(_QWORD *)(v63 + 32) = v63;
    *(_QWORD *)(v63 + 40) = v66;
    std::__shared_weak_count::__release_weak(v68);
  }
  else
  {
    do
      v72 = __ldxr(v67);
    while (__stxr(v72 + 1, v67));
    v73 = (unint64_t *)&v66->__shared_weak_owners_;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
    *(_QWORD *)(v63 + 32) = v63;
    *(_QWORD *)(v63 + 40) = v66;
  }
  do
    v75 = __ldaxr(v67);
  while (__stlxr(v75 - 1, v67));
  if (!v75)
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
  }
LABEL_149:
  v156 = &off_24C412388;
  strcpy((char *)v157, "channel");
  *((_QWORD *)&v157[0] + 1) = v147;
  *(_QWORD *)((char *)v157 + 15) = *(_QWORD *)((char *)&v147 + 7);
  BYTE7(v157[1]) = 7;
  *(_QWORD *)&v147 = 0;
  *(_QWORD *)((char *)&v147 + 7) = 0;
  *((_QWORD *)&v157[1] + 1) = 0x7974706D45;
  *(_QWORD *)&v157[2] = v152;
  *(_QWORD *)((char *)&v157[2] + 7) = *(_QWORD *)((char *)&v152 + 7);
  HIBYTE(v157[2]) = 5;
  *(_QWORD *)&v152 = 0;
  *(_QWORD *)((char *)&v152 + 7) = 0;
  *(_QWORD *)&v158 = v55;
  *((_QWORD *)&v158 + 1) = v56;
  v76 = (unint64_t *)&v66->__shared_weak_owners_;
  *(_QWORD *)&v159 = v63;
  *((_QWORD *)&v159 + 1) = v66;
  do
    v77 = __ldxr(v76);
  while (__stxr(v77 + 1, v76));
  v160 = &off_24C4123B8;
  v78 = (_QWORD *)operator new();
  *v78 = &off_24C412C40;
  v78[1] = v63;
  v78[2] = v66;
  v161[0] = v78;
  v80 = *((_QWORD *)&v159 + 1);
  v79 = (char *)v159;
  if (!*((_QWORD *)&v159 + 1))
  {
    v161[1] = (void *)v159;
    v162 = 0;
    if ((_QWORD)v159)
      v84 = (void *)(v159 + 16);
    else
      v84 = 0;
    goto LABEL_168;
  }
  v81 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 16);
  do
    v82 = __ldxr(v81);
  while (__stxr(v82 + 1, v81));
  v83 = (void *)*((_QWORD *)&v159 + 1);
  v161[1] = v79;
  v162 = v80;
  if ((_QWORD)v159)
    v84 = (void *)(v159 + 16);
  else
    v84 = 0;
  if (!*((_QWORD *)&v159 + 1))
  {
    v79 = (char *)v159;
LABEL_168:
    v87 = 0;
    v163 = &off_24C4123F0;
    v164[0] = v84;
    v164[1] = 0;
    goto LABEL_169;
  }
  v85 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 16);
  do
    v86 = __ldxr(v85);
  while (__stxr(v86 + 1, v85));
  v87 = *((_QWORD *)&v159 + 1);
  v79 = (char *)v159;
  v163 = &off_24C4123F0;
  v164[0] = v84;
  v164[1] = v83;
  if (*((_QWORD *)&v159 + 1))
  {
    v88 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 16);
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
  }
LABEL_169:
  if (v79)
    v90 = v79 + 24;
  else
    v90 = 0;
  v165 = &off_24C412460;
  *(_QWORD *)&v166 = v90;
  *((_QWORD *)&v166 + 1) = v87;
  v91 = operator new();
  *(_QWORD *)v91 = &off_24C412388;
  *(_OWORD *)(v91 + 8) = v157[0];
  *(_QWORD *)(v91 + 24) = *(_QWORD *)&v157[1];
  memset(v157, 0, 24);
  *(_OWORD *)(v91 + 32) = *(_OWORD *)((char *)&v157[1] + 8);
  *(_QWORD *)(v91 + 48) = *((_QWORD *)&v157[2] + 1);
  memset((char *)&v157[1] + 8, 0, 24);
  *(_OWORD *)(v91 + 56) = v158;
  v158 = 0uLL;
  *(_OWORD *)(v91 + 72) = v159;
  v159 = 0uLL;
  *(_QWORD *)(v91 + 88) = &off_24C4123B8;
  *(_OWORD *)(v91 + 96) = *(_OWORD *)v161;
  v92 = v162;
  v161[1] = 0;
  v162 = 0;
  *(_QWORD *)(v91 + 112) = v92;
  *(_QWORD *)(v91 + 120) = &off_24C4123F0;
  *(_OWORD *)(v91 + 128) = *(_OWORD *)v164;
  v164[0] = 0;
  v164[1] = 0;
  v161[0] = 0;
  *(_QWORD *)(v91 + 144) = &off_24C412460;
  *(_OWORD *)(v91 + 152) = v166;
  v166 = 0uLL;
  *(_QWORD *)(v54 + 72) = v91;
  sub_20B2278A4((uint64_t)&v156);
  if (!v56)
    goto LABEL_271;
  v93 = (unint64_t *)&v56->__shared_owners_;
  do
    v94 = __ldaxr(v93);
  while (__stlxr(v94 - 1, v93));
  if (!v94)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
    if (*(_QWORD *)(v54 + 56))
      goto LABEL_180;
  }
  else
  {
LABEL_271:
    if (*(_QWORD *)(v54 + 56))
      goto LABEL_180;
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 374, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_180:
  v95 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v96 = (unint64_t *)((char *)__p[1] + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = (uint64_t)v143;
  if (v143)
  {
    v99 = *v143;
    *v143 = 0;
    if (v99)
      sub_20B4311DC(v98, v99);
    MEMORY[0x20BD3583C](v98, 0x20C4093837F09);
  }
  v100 = *(_QWORD *)(v54 + 72);
  v101 = (_QWORD *)operator new();
  v101[1] = &off_24C412FF0;
  v102 = v101 + 1;
  *v101 = &off_24C412F78;
  v101[2] = a1;
  v101[4] = v101 + 1;
  v156 = &off_24C412428;
  v103 = (_QWORD *)operator new();
  *v103 = &off_24C412F78;
  v104 = v103 + 1;
  v105 = v101[4];
  if (!v105)
    goto LABEL_192;
  if ((_QWORD *)v105 != v102)
  {
    v105 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v105 + 16))(v105, v104);
LABEL_192:
    v103[4] = v105;
    goto LABEL_194;
  }
  v103[4] = v104;
  (*(void (**)(_QWORD *))(*v102 + 24))(v102);
LABEL_194:
  *(_QWORD *)&v157[0] = v103;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v100 + 120) + 16))(v100 + 120, &v156);
  v106 = *(_QWORD *)&v157[0];
  v156 = &off_24C412428;
  *(_QWORD *)&v157[0] = 0;
  if (v106)
    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
  (*(void (**)(_QWORD *))(*v101 + 8))(v101);
  v107 = v141;
  if (v141)
  {
    v108 = *v141;
    *v141 = 0;
    if (v108)
      sub_20B4311DC((uint64_t)v107, v108);
    MEMORY[0x20BD3583C](v107, 0x20C4093837F09);
  }
  v109 = v142;
  v142 = 0;
  if (v109)
  {
    v110 = *(std::__shared_weak_count **)(v109 + 40);
    if (v110)
    {
      v111 = (unint64_t *)&v110->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    sub_20B227BC0(v109 + 8, *(_QWORD *)(v109 + 16));
    MEMORY[0x20BD3583C](v109, 0x1020C401722722ELL);
  }
  v113 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v54;
  if (v113)
    (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  *(_QWORD *)v171 = 0x500000001;
  v156 = (uint64_t (**)())1;
  LODWORD(v157[0]) = 0;
  __p[0] = (void *)0x200000001;
  *(_DWORD *)&v171[8] = 0;
  v172 = 0;
  *(_QWORD *)&v171[12] = 0x200000001;
  if (*(_BYTE *)(a1 + 24))
  {
    v114 = *(_QWORD *)(a1 + 16);
    v115 = 1;
  }
  else
  {
    v114 = 0;
    v115 = 0;
  }
  sub_20B212DD4(v114, v115, (__n128 *)v171, (uint64_t)&v156);
  __p[0] = 0;
  __p[1] = (void *)v178[0];
  *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v178 + 7);
  v178[0] = 0;
  *(_QWORD *)((char *)v178 + 7) = 0;
  *(_WORD *)((char *)&__p[2] + 7) = 0;
  v151 = 0;
  sub_20B21DC94(&v147, (uint64_t)&v156);
  v116 = (std::__shared_weak_count *)operator new(0x50uLL);
  v116->__shared_owners_ = 0;
  v117 = (unint64_t *)&v116->__shared_owners_;
  v116->__shared_weak_owners_ = 0;
  v116->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F3C88;
  v116[1].std::__shared_count = *(std::__shared_count *)__p;
  v116[1].__shared_weak_owners_ = (uint64_t)__p[2];
  memset(__p, 0, 24);
  LOBYTE(v116[2].__vftable) = 0;
  LOBYTE(v116[3].__vftable) = 0;
  v118 = (__int128 *)*((_QWORD *)&v147 + 1);
  v119 = v148;
  *((_QWORD *)&v147 + 1) = 0;
  v148 = 0;
  *(_QWORD *)&v152 = v116 + 1;
  *((_QWORD *)&v152 + 1) = v116;
  do
    v120 = __ldxr(v117);
  while (__stxr(v120 + 1, v117));
  v153 = &off_24C411E78;
  v154 = v118;
  v155 = v119;
  if (v119)
  {
    v121 = (unint64_t *)&v119->__shared_owners_;
    do
      v122 = __ldxr(v121);
    while (__stxr(v122 + 1, v121));
    do
      v123 = __ldaxr(v121);
    while (__stlxr(v123 - 1, v121));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  do
    v124 = __ldaxr(v117);
  while (__stlxr(v124 - 1, v117));
  if (!v124)
  {
    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
    std::__shared_weak_count::__release_weak(v116);
  }
  sub_20B21D7E4(a1, (uint64_t)&v152);
  v125 = v155;
  if (v155)
  {
    v126 = (unint64_t *)&v155->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
  if (*((_QWORD *)&v152 + 1))
  {
    v129 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v148;
  if (v148)
  {
    v132 = (unint64_t *)&v148->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  if (v151 && v150 < 0)
    operator delete(__p[3]);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (!v170)
      goto LABEL_251;
LABEL_245:
    if (v169 < 0)
    {
      operator delete(v168);
      if ((v167 & 0x80000000) == 0)
      {
LABEL_247:
        if ((SHIBYTE(v165) & 0x80000000) == 0)
          goto LABEL_248;
        goto LABEL_260;
      }
    }
    else if ((v167 & 0x80000000) == 0)
    {
      goto LABEL_247;
    }
    operator delete((void *)v166);
    if ((SHIBYTE(v165) & 0x80000000) == 0)
    {
LABEL_248:
      if ((SHIBYTE(v163) & 0x80000000) == 0)
        goto LABEL_249;
      goto LABEL_261;
    }
LABEL_260:
    operator delete(v164[0]);
    if ((SHIBYTE(v163) & 0x80000000) == 0)
    {
LABEL_249:
      if ((SHIBYTE(v161[0]) & 0x80000000) == 0)
        goto LABEL_250;
      goto LABEL_262;
    }
LABEL_261:
    operator delete(v161[1]);
    if ((SHIBYTE(v161[0]) & 0x80000000) == 0)
    {
LABEL_250:
      if ((SBYTE7(v159) & 0x80000000) == 0)
        goto LABEL_251;
      goto LABEL_263;
    }
LABEL_262:
    operator delete(*((void **)&v159 + 1));
    if ((SBYTE7(v159) & 0x80000000) == 0)
      goto LABEL_251;
LABEL_263:
    operator delete((void *)v158);
    if (!BYTE8(v157[2]))
      goto LABEL_254;
    goto LABEL_252;
  }
  if (v170)
    goto LABEL_245;
LABEL_251:
  if (!BYTE8(v157[2]))
    goto LABEL_254;
LABEL_252:
  if (SBYTE7(v157[2]) < 0)
    operator delete(*(void **)&v157[1]);
LABEL_254:
  if (v146)
  {
    v134 = v145;
    if (v145 == v144)
    {
      v135 = 4;
      v134 = v144;
      goto LABEL_266;
    }
    if (v145)
    {
      v135 = 5;
LABEL_266:
      (*(void (**)(void))(*v134 + 8 * v135))();
    }
  }
  return a1;
}

void sub_20B22F47C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

void sub_20B22FBD8()
{
  JUMPOUT(0x20B22FB2CLL);
}

void sub_20B22FBE0()
{
  JUMPOUT(0x20B22FB34);
}

void sub_20B22FBE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  sub_20AEC147C(v45);
  sub_20B227BC0(v44, *(_QWORD *)(v43 + 16));
  sub_20B221044(&a43);
  MEMORY[0x20BD3583C](v43, 0x1020C401722722ELL);
  JUMPOUT(0x20B22FB3CLL);
}

void sub_20B22FC24()
{
  JUMPOUT(0x20B22FB3CLL);
}

void sub_20B22FC2C()
{
  int v0;

  if (v0)
    JUMPOUT(0x20B22FC34);
  JUMPOUT(0x20B22FB9CLL);
}

void sub_20B22FC60(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4130D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B22FC70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4130D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B22FCA0(uint64_t a1)
{
  sub_20AF3F978(a1 + 88);
  if (*(_BYTE *)(a1 + 80))
  {
    if (*(char *)(a1 + 79) < 0)
      operator delete(*(void **)(a1 + 56));
  }
}

void sub_20B22FCE8(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18[4];
  int __src;
  uint64_t v20;

  v4 = (char *)(a2 + 4);
  LODWORD(v17) = 1;
  v5 = a1 + 24;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&v17, (char *)&v17 + 4, 4);
  sub_20B42B554((_QWORD *)a1);
  sub_20B42DB24(v5, *(char **)(a1 + 32), v4, (char *)(a2 + 8), 4);
  sub_20B42DB24(v5, *(char **)(a1 + 32), (char *)(a2 + 8), (char *)(a2 + 12), 4);
  sub_20B42DB24(v5, *(char **)(a1 + 32), (char *)(a2 + 12), (char *)(a2 + 16), 4);
  sub_20B42DB24(v5, *(char **)(a1 + 32), (char *)(a2 + 16), (char *)(a2 + 20), 4);
  sub_20B42DB24(v5, *(char **)(a1 + 32), (char *)(a2 + 20), (char *)(a2 + 24), 4);
  sub_20B42DB24(v5, *(char **)(a1 + 32), (char *)(a2 + 24), (char *)(a2 + 28), 4);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v6 + 10) = *(_QWORD *)(a1 + 32) - v6 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  if (*(_BYTE *)(a2 + 80))
  {
    LOBYTE(v17) = 1;
    sub_20B42DB24(v5, *(char **)(a1 + 32), (char *)&v17, (char *)&v17 + 1, 1);
    LODWORD(v17) = 1;
    sub_20B42DB24(v5, *(char **)(a1 + 32), (char *)&v17, (char *)&v17 + 4, 4);
    sub_20B42B554((_QWORD *)a1);
    v17 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_20B42DB24(v5, *(char **)(a1 + 32), (char *)&v17, v18, 8);
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(_QWORD *)(a2 + 40);
    v9 = 0x2E8BA2E8BA2E8BA3 * ((v8 - v7) >> 3);
    if (v17 <= v9)
    {
      if (v17 < v9)
      {
        v10 = v7 + 88 * v17;
        while (v8 != v10)
        {
          v8 -= 88;
          sub_20B228408(v8);
        }
        *(_QWORD *)(a2 + 40) = v10;
      }
    }
    else
    {
      sub_20B22D63C((void **)(a2 + 32), v17 - v9);
    }
    v11 = v17;
    if (v17)
    {
      v12 = 0;
      do
      {
        v13 = *(_QWORD *)(a2 + 32) + v12;
        __src = 2;
        sub_20B42DB24(v5, *(char **)(a1 + 32), (char *)&__src, (char *)&v20, 4);
        sub_20B42B554((_QWORD *)a1);
        sub_20B2238DC(a1, v13);
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
        *(_QWORD *)(v14 + 10) = *(_QWORD *)(a1 + 32) - v14 - 18;
        v15 = *(_QWORD *)(a1 + 56) - 8;
        *(_QWORD *)(a1 + 56) = v15;
        v12 += 88;
        --v11;
      }
      while (v11);
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 56);
    }
    v16 = *(_QWORD *)(v15 - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v16 + 10) = *(_QWORD *)(a1 + 32) - v16 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
  }
  else
  {
    LOBYTE(v17) = 0;
    sub_20B42DB24(v5, *(char **)(a1 + 32), (char *)&v17, (char *)&v17 + 1, 1);
  }
}

void sub_20B22FFE4()
{
  JUMPOUT(0x20BD3583CLL);
}

const char *sub_20B22FFF8()
{
  return "cv3d.net";
}

void sub_20B230008(int a1@<W1>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  char *v4;
  uint64_t (**v5)();
  char *v6;
  char *v7;
  void *v8;
  void *v9;
  char *v10;
  uint64_t v11;
  void *__p;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char **v20;
  char *v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  void *v36;
  char v37;
  char v38;
  char v39;
  void *v40;
  char v41;
  char v42;
  void *v43;
  char v44;
  char v45;
  void *v46;
  char v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  char v53;
  void *v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 1:
      LOBYTE(__p) = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v18 = 0;
      v19 = 0;
      v17 = 0;
      v9 = 0;
      v10 = 0;
      LODWORD(v11) = 0;
      v3 = operator new(0x1B8uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = &off_24C4133A8;
      LOBYTE(v36) = 0;
      v39 = 0;
      LOBYTE(v40) = 0;
      v56 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v57 = 0;
      v59 = 0;
      v58 = 0;
      v3[3] = off_24C40E100;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v20 = 0;
      v21 = 0;
      v3[4] = &unk_24C40E160;
      LOBYTE(v22) = 0;
      sub_20B231D6C((uint64_t)&v20, (uint64_t)(v3 + 5));
      sub_20B0C7A08((uint64_t)(v3 + 28), &v33);
      v3[3] = off_24C40E058;
      v3[4] = &unk_24C40E0B8;
      sub_20AF4EA3C((uint64_t)&v20);
      if (!v56)
        goto LABEL_9;
      if (v55 < 0)
      {
        operator delete(v54);
        if ((v53 & 0x80000000) == 0)
        {
LABEL_5:
          if ((v50 & 0x80000000) == 0)
            goto LABEL_6;
          goto LABEL_34;
        }
      }
      else if ((v53 & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(v51);
      if ((v50 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v48 & 0x80000000) == 0)
          goto LABEL_7;
        goto LABEL_35;
      }
LABEL_34:
      operator delete(v49);
      if ((v48 & 0x80000000) == 0)
      {
LABEL_7:
        if ((v45 & 0x80000000) == 0)
          goto LABEL_8;
        goto LABEL_36;
      }
LABEL_35:
      operator delete(v46);
      if ((v45 & 0x80000000) == 0)
      {
LABEL_8:
        if ((v42 & 0x80000000) == 0)
          goto LABEL_9;
        goto LABEL_37;
      }
LABEL_36:
      operator delete(v43);
      if ((v42 & 0x80000000) == 0)
      {
LABEL_9:
        if (v39)
          goto LABEL_10;
        goto LABEL_12;
      }
LABEL_37:
      operator delete(v40);
      if (v39)
      {
LABEL_10:
        if (v38 < 0)
          operator delete(v36);
      }
LABEL_12:
      *a2 = v3 + 3;
      goto LABEL_30;
    case 2:
      v3 = operator new(0x120uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = &off_24C413310;
      v3[3] = off_24C40DF60;
      v4 = (char *)(v3 + 3);
      v37 = 0;
      v39 = 0;
      v41 = 0;
      LOBYTE(v43) = 0;
      v44 = 0;
      v47 = 0;
      v52 = 0;
      LOBYTE(v54) = 0;
      v56 = 0;
      v33 = 0;
      v34 = 0;
      LOBYTE(v35) = 0;
      v3[4] = &unk_24C40DFC0;
      sub_20B231D6C((uint64_t)&v33, (uint64_t)(v3 + 5));
      *((_BYTE *)v3 + 224) = 0;
      *((_BYTE *)v3 + 232) = 0;
      *((_BYTE *)v3 + 280) = 0;
      v5 = off_24C40DEB8;
      goto LABEL_25;
    case 3:
      v21 = 0;
      v22 = 0;
      v20 = &v21;
      v3 = operator new(0xF8uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = &off_24C4133F8;
      v4 = (char *)(v3 + 3);
      v10 = 0;
      v11 = 0;
      v9 = &v10;
      v37 = 0;
      v39 = 0;
      v41 = 0;
      LOBYTE(v43) = 0;
      v44 = 0;
      v47 = 0;
      v52 = 0;
      LOBYTE(v54) = 0;
      v56 = 0;
      v33 = 0;
      v34 = 0;
      LOBYTE(v35) = 0;
      sub_20B232754((uint64_t)(v3 + 3), (const void ***)&v9, (uint64_t)&v33);
      v3[3] = off_24C40E2C8;
      v3[4] = &unk_24C40E328;
      sub_20AF4EA3C((uint64_t)&v33);
      sub_20AEC833C((uint64_t)&v9, v10);
      sub_20AEC833C((uint64_t)&v20, v21);
      goto LABEL_29;
    case 4:
      v25 = 0;
      v23 = 0;
      v3 = operator new(0x118uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = &off_24C413448;
      v4 = (char *)(v3 + 3);
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v21 = 0;
      v22 = 0;
      v20 = 0;
      LOBYTE(__p) = 0;
      v14 = 0;
      v37 = 0;
      v39 = 0;
      v41 = 0;
      LOBYTE(v43) = 0;
      v44 = 0;
      v47 = 0;
      v52 = 0;
      LOBYTE(v54) = 0;
      v56 = 0;
      v33 = 0;
      v34 = 0;
      LOBYTE(v35) = 0;
      sub_20B232928((uint64_t)(v3 + 3), (uint64_t)&v9, (uint64_t)&v33);
      v3[3] = &off_24C40E468;
      v3[4] = &unk_24C40E4C8;
      sub_20AF4EA3C((uint64_t)&v33);
      if (v14 && v13 < 0)
        operator delete(__p);
      v6 = (char *)v9;
      if (v9)
      {
        v7 = v10;
        v8 = v9;
        if (v10 != v9)
        {
          do
          {
            if (*(v7 - 9) < 0)
              operator delete(*((void **)v7 - 4));
            v7 -= 32;
          }
          while (v7 != v6);
          v8 = v9;
        }
        v10 = v6;
        operator delete(v8);
      }
      goto LABEL_29;
    case 5:
      v3 = operator new(0x118uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = &off_24C413498;
      v3[3] = off_24C40E750;
      v4 = (char *)(v3 + 3);
      v37 = 0;
      v39 = 0;
      v41 = 0;
      LOBYTE(v43) = 0;
      v44 = 0;
      v47 = 0;
      v52 = 0;
      LOBYTE(v54) = 0;
      v56 = 0;
      v33 = 0;
      v34 = 0;
      LOBYTE(v35) = 0;
      v3[4] = &unk_24C40E7B0;
      sub_20B231D6C((uint64_t)&v33, (uint64_t)(v3 + 5));
      *((_BYTE *)v3 + 232) = 0;
      *((_BYTE *)v3 + 272) = 0;
      v5 = off_24C40E6A8;
LABEL_25:
      v3[3] = v5;
      v3[4] = v5 + 12;
      sub_20AF4EA3C((uint64_t)&v33);
LABEL_29:
      *a2 = v4;
LABEL_30:
      a2[1] = v3;
      return;
    default:
      *a2 = 0;
      a2[1] = 0;
      return;
  }
}

void sub_20B2304F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  void *v72;

  v71 = *(unsigned int *)(v68 + 216);
  if ((_DWORD)v71 != -1)
    ((void (*)(char *, uint64_t))off_24C413350[v71])(&a12, v69);
  *(_DWORD *)(v68 + 216) = -1;
  sub_20AF4EA3C((uint64_t)&a42);
  sub_20B1BF7F4((uint64_t)&a68);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v68);
  operator delete(v72);
  sub_20B1BF7F4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20B230614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B1BF7F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B230628(void *lpsrc@<X2>, int a2@<W1>, uint64_t a3@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  char v12;
  __int128 v13;
  __int128 v14;

  switch(a2)
  {
    case 1:
      sub_20B2309D8(lpsrc, &v14);
      goto LABEL_7;
    case 2:
      sub_20B23080C(lpsrc, &v14);
      goto LABEL_7;
    case 3:
      sub_20B230AB8(lpsrc, &v14);
      goto LABEL_7;
    case 4:
      sub_20B230B98(lpsrc, &v14);
LABEL_7:
      *(_OWORD *)a3 = v14;
      break;
    case 5:
      v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40D610, 0);
      if (v4)
      {
        v5 = (uint64_t)v4 + 8;
        v6 = (uint64_t)v4 + 64;
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)&unk_20B5A90C2, 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        v5 = 8;
        v6 = 64;
      }
      v7 = operator new(0x118uLL);
      v7[1] = 0;
      v7[2] = 0;
      *v7 = &off_24C413498;
      v8 = *(_QWORD *)v5;
      v9 = *(_OWORD *)(v5 + 8);
      v10 = *(_OWORD *)(v5 + 24);
      v11 = *(unsigned __int8 *)(v5 + 40);
      v7[3] = off_24C40E750;
      v13 = v10;
      v14 = v9;
      v7[4] = &unk_24C40E7B0;
      sub_20B231D6C(v6, (uint64_t)(v7 + 5));
      if (v11)
      {
        v7[29] = v8;
        *((_OWORD *)v7 + 15) = v14;
        *((_OWORD *)v7 + 16) = v13;
        v12 = 1;
      }
      else
      {
        v12 = 0;
        *((_BYTE *)v7 + 232) = 0;
      }
      *((_BYTE *)v7 + 272) = v12;
      v7[3] = off_24C40E6A8;
      v7[4] = &unk_24C40E708;
      *(_QWORD *)a3 = v7 + 3;
      *(_QWORD *)(a3 + 8) = v7;
      break;
    default:
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      break;
  }
}

void sub_20B2307F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20B23080C(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40D490, 0);
  v14 = a2;
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 64;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)&unk_20B5A90C2, 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = 8;
    v5 = 64;
  }
  v6 = operator new(0x120uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C413310;
  v8 = *(_QWORD *)v4;
  v7 = *(_QWORD *)(v4 + 8);
  v10 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v4 + 24);
  v13 = *(_QWORD *)(v4 + 32);
  v11 = *(_DWORD *)(v4 + 40);
  v12 = *(unsigned __int8 *)(v4 + 48);
  v6[3] = off_24C40DF60;
  v6[4] = &unk_24C40DFC0;
  sub_20B231D6C(v5, (uint64_t)(v6 + 5));
  if (v12)
  {
    if (v11)
    {
      *((_BYTE *)v6 + 224) = 2;
      *((_BYTE *)v6 + 232) = 0;
      *((_BYTE *)v6 + 280) = 0;
      if (v11 != 1)
        sub_20AECFAB8();
      *((_BYTE *)v6 + 232) = v8;
      v6[30] = v7;
      v6[31] = v10;
      v6[32] = v9;
      *((_DWORD *)v6 + 68) = 1;
    }
    else
    {
      *((_BYTE *)v6 + 224) = 1;
      v6[29] = v8;
      v6[30] = v7;
      v6[31] = v10;
      v6[32] = v9;
      v6[33] = v13;
      *((_DWORD *)v6 + 68) = 0;
    }
    *((_BYTE *)v6 + 280) = 1;
  }
  else
  {
    *((_BYTE *)v6 + 224) = 0;
    *((_BYTE *)v6 + 232) = 0;
    *((_BYTE *)v6 + 280) = 0;
  }
  v6[3] = off_24C40DEB8;
  v6[4] = &unk_24C40DF18;
  *v14 = v6 + 3;
  v14[1] = v6;
}

void sub_20B2309A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  sub_20B232108(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_20B2309C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B2309D8@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40E250, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 240;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)&unk_20B5A90C2, 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = 8;
    v5 = 240;
  }
  v6 = operator new(0x1B8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C4133A8;
  result = sub_20B232C5C(v6 + 3, (__int128 *)v4, v5);
  *a2 = v6 + 3;
  a2[1] = v6;
  return result;
}

void sub_20B230AA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B230AB8@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40D560, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 32;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)&unk_20B5A90C2, 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = 8;
    v5 = 32;
  }
  v6 = operator new(0xF8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C4133F8;
  result = sub_20B232EE8(v6 + 3, (const void ***)v4, v5);
  *a2 = v6 + 3;
  a2[1] = v6;
  return result;
}

void sub_20B230B80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B230B98@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40D5E0, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 64;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)&unk_20B5A90C2, 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = 8;
    v5 = 64;
  }
  v6 = operator new(0x118uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C413448;
  result = sub_20B232FF0(v6 + 3, v4, v5);
  *a2 = v6 + 3;
  a2[1] = v6;
  return result;
}

void sub_20B230C60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL sub_20B230C78(uint64_t a1, int a2)
{
  return (a2 - 1) < 5;
}

uint64_t sub_20B230C88(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  size_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v16[24];
  int v17;
  void *__dst[2];
  unint64_t v19;
  _QWORD v20[5];
  _QWORD *v21;

  v17 = 0;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_20AEC0BD8(v3);
  if (a2 >= 6
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NetworkData.cpp", 103, (uint64_t)"idx < static_cast<uint32_t>(NetworkDataType::End)", 49, (uint64_t)&unk_20B5A90C2, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AEC01D0((_QWORD *)(v3 + 16), (uint64_t)(&off_24C4131C0)[2 * a2], (uint64_t)(&off_24C4131C0)[2 * a2 + 1]);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(v3 + 112);
    v8 = *(_QWORD *)(v3 + 72);
    if (v7 < v8)
    {
      *(_QWORD *)(v3 + 112) = v8;
      v7 = v8;
    }
    v9 = *(const void **)(v3 + 64);
    v5 = v7 - (_QWORD)v9;
    if (v7 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_26;
  }
  else
  {
    if ((v4 & 8) == 0)
    {
      v5 = 0;
      HIBYTE(v19) = 0;
      v6 = __dst;
      goto LABEL_16;
    }
    v9 = *(const void **)(v3 + 40);
    v5 = *(_QWORD *)(v3 + 56) - (_QWORD)v9;
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_26:
      sub_20AEC0138();
  }
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v6 = (void **)operator new(v10 + 1);
    __dst[1] = (void *)v5;
    v19 = v11 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_15;
  }
  HIBYTE(v19) = v5;
  v6 = __dst;
  if (v5)
LABEL_15:
    memmove(v6, v9, v5);
LABEL_16:
  *((_BYTE *)v6 + v5) = 0;
  v12 = MEMORY[0x24BEDB7F0];
  v13 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v3 = *MEMORY[0x24BEDB7F0];
  v14 = *(_QWORD *)(v12 + 72);
  *(_QWORD *)(v3 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
  *(_QWORD *)(v3 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v3 + 16) = v14;
  if (*(char *)(v3 + 111) < 0)
    operator delete(*(void **)(v3 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v3 + 128);
  MEMORY[0x20BD3583C](v3, 0x10B2C40EED050F3);
  v20[0] = v16;
  v20[1] = __dst;
  v20[2] = v16;
  v20[3] = __dst;
  v20[4] = __dst;
  if (v17 == -1)
    sub_20AECFAB8();
  v21 = v20;
  ((void (*)(_QWORD **, _BYTE *))off_24C4132B8[v17])(&v21, v16);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
  if (v17 == -1)
    sub_20AECFAB8();
  v20[0] = __dst;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C4132E8[v17])(v20, v16);
  if (v17 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C4132D0[v17])(v20, v16);
  return result;
}

void sub_20B230F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  MEMORY[0x20BD3583C](v18, 0x10B2C40EED050F3);
  if (a12 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24C4132D0[a12])(v19 - 49, &a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B231044(uint64_t *a1, _DWORD *a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int128 *v11;
  size_t v12;
  uint64_t *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  const void *v20;
  size_t v21;
  size_t v22;
  int v23;
  std::logic_error *exception;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  _QWORD v30[2];
  unsigned __int8 v31;
  std::string v32;
  std::string v33;
  std::string v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_25463B2A0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463B2A0))
  {
    v35 = xmmword_20B5EC90C;
    v36 = unk_20B5EC91C;
    sub_20B2314B4(&v35, 8uLL);
    __cxa_atexit((void (*)(void *))sub_20B231548, &qword_25463B2C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B2A0);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_25463B2A8);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_25463B2A8))
  {
    *(_QWORD *)&xmmword_25463B2F0 = qword_25463B2C0;
    qword_25463B300 = qword_25463B2C8;
    __cxa_guard_release(&qword_25463B2A8);
  }
  v6 = atomic_load((unsigned __int8 *)&qword_25463B2B0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25463B2B0))
  {
    *(_OWORD *)&qword_25463B310 = xmmword_25463B2F0;
    qword_25463B320 = qword_25463B2C0;
    unk_25463B328 = *(_OWORD *)&qword_25463B300;
    qword_25463B338 = qword_25463B2C8;
    __cxa_guard_release(&qword_25463B2B0);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_25463B2B8);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25463B2B8))
  {
    sub_20B231578();
    __cxa_atexit((void (*)(void *))sub_20B2318B8, &qword_25463B2D8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B2B8);
  }
  v35 = 0uLL;
  *(_QWORD *)&v36 = 0;
  sub_20B1C68C0(a1, (uint64_t)&v35);
  v8 = qword_25463B2E0;
  if (!qword_25463B2E0)
    goto LABEL_44;
  v9 = SBYTE7(v36);
  v10 = (void *)v35;
  if ((SBYTE7(v36) & 0x80u) == 0)
    v11 = &v35;
  else
    v11 = (__int128 *)v35;
  if ((SBYTE7(v36) & 0x80u) == 0)
    v12 = BYTE7(v36);
  else
    v12 = *((_QWORD *)&v35 + 1);
  v13 = &qword_25463B2E0;
  do
  {
    while (1)
    {
      v14 = *(char *)(v8 + 55);
      v15 = v14 >= 0 ? (const void *)(v8 + 32) : *(const void **)(v8 + 32);
      v16 = v14 >= 0 ? *(unsigned __int8 *)(v8 + 55) : *(_QWORD *)(v8 + 40);
      v17 = v12 >= v16 ? v16 : v12;
      v18 = memcmp(v15, v11, v17);
      if (v18)
        break;
      if (v16 >= v12)
        goto LABEL_27;
LABEL_13:
      v8 = *(_QWORD *)(v8 + 8);
      if (!v8)
        goto LABEL_28;
    }
    if (v18 < 0)
      goto LABEL_13;
LABEL_27:
    v13 = (uint64_t *)v8;
    v8 = *(_QWORD *)v8;
  }
  while (v8);
LABEL_28:
  if (v13 == &qword_25463B2E0)
    goto LABEL_44;
  v19 = *((char *)v13 + 55);
  if (v19 >= 0)
    v20 = v13 + 4;
  else
    v20 = (const void *)v13[4];
  if (v19 >= 0)
    v21 = *((unsigned __int8 *)v13 + 55);
  else
    v21 = v13[5];
  if (v21 >= v12)
    v22 = v12;
  else
    v22 = v21;
  v23 = memcmp(v11, v20, v22);
  if (v23)
  {
    if ((v23 & 0x80000000) == 0)
      goto LABEL_40;
LABEL_44:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_20B214D58(", expected ", &v32, &v33);
    sub_20B2318E0();
    if ((v31 & 0x80u) == 0)
      v26 = (const std::string::value_type *)v30;
    else
      v26 = (const std::string::value_type *)v30[0];
    if ((v31 & 0x80u) == 0)
      v27 = v31;
    else
      v27 = v30[1];
    v28 = std::string::append(&v33, v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v34);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  if (v12 < v21)
    goto LABEL_44;
LABEL_40:
  *a2 = *((_DWORD *)v13 + 14);
  if (v9 < 0)
    operator delete(v10);
  return a1;
}

void sub_20B2313AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B2B8);
  _Unwind_Resume(a1);
}

void sub_20B2313C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B2A0);
  _Unwind_Resume(a1);
}

void sub_20B2313DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  int v41;

  if (a33 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if (a27 < 0)
      {
LABEL_8:
        operator delete(a22);
        if ((a21 & 0x80000000) == 0)
          goto LABEL_9;
        goto LABEL_12;
      }
LABEL_11:
      if ((a21 & 0x80000000) == 0)
      {
LABEL_9:
        if (!v41)
        {
LABEL_14:
          if (a40 < 0)
            operator delete(a35);
          _Unwind_Resume(a1);
        }
LABEL_13:
        __cxa_free_exception(v40);
        goto LABEL_14;
      }
LABEL_12:
      operator delete(a16);
      if ((v41 & 1) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if (a27 < 0)
    goto LABEL_8;
  goto LABEL_11;
}

void *sub_20B2314B4(void *result, unint64_t a2)
{
  const void *v2;
  size_t v3;
  uint64_t v4;

  qword_25463B2C0 = 0;
  qword_25463B2C8 = 0;
  qword_25463B2D0 = 0;
  if (a2)
  {
    if (a2 >> 62)
      sub_20AEC60B8();
    v2 = result;
    v3 = 4 * a2;
    qword_25463B2C0 = (uint64_t)operator new(4 * a2);
    qword_25463B2C8 = qword_25463B2C0;
    v4 = qword_25463B2C0 + v3;
    qword_25463B2D0 = qword_25463B2C0 + v3;
    result = memmove((void *)qword_25463B2C0, v2, v3);
    qword_25463B2C8 = v4;
  }
  return result;
}

void sub_20B231524(_Unwind_Exception *exception_object)
{
  if (qword_25463B2C0)
  {
    qword_25463B2C8 = qword_25463B2C0;
    operator delete((void *)qword_25463B2C0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B231548(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20B231578()
{
  int *v0;
  _DWORD *v1;
  BOOL v2;
  void *v3;
  void *v4;
  size_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  const void *v14;
  size_t v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  uint64_t *v20;
  size_t v21;
  size_t v22;
  const void *v23;
  size_t v24;
  size_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int *v29;
  _DWORD *v30;
  void *v31;
  _BYTE v32[15];
  unsigned __int8 v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x24BDAC8D0];
  v0 = (int *)qword_25463B310;
  v1 = (_DWORD *)qword_25463B320;
  qword_25463B2E8 = 0;
  qword_25463B2E0 = 0;
  qword_25463B2D8 = (uint64_t)&qword_25463B2E0;
  v29 = (int *)unk_25463B328;
  v28 = qword_25463B338;
  v2 = qword_25463B310 == unk_25463B328 && qword_25463B320 == qword_25463B338;
  if (!v2)
  {
    v3 = &unk_25463B000;
    while (1)
    {
      sub_20B231B9C((uint64_t)&v31, v0);
      v4 = v31;
      v34[0] = *(_QWORD *)v32;
      *(_QWORD *)((char *)v34 + 7) = *(_QWORD *)&v32[7];
      v5 = v33;
      v6 = (char)v33;
      v7 = operator new(0x40uLL);
      v7[4] = v4;
      v7[5] = v34[0];
      *(_QWORD *)((char *)v7 + 47) = *(_QWORD *)((char *)v34 + 7);
      *((_BYTE *)v7 + 55) = v6;
      v34[0] = 0;
      *(_QWORD *)((char *)v34 + 7) = 0;
      *((_DWORD *)v7 + 14) = *v1;
      v8 = (uint64_t *)*((_QWORD *)v3 + 91);
      v10 = &qword_25463B2E0;
      v9 = qword_25463B2E0;
      v30 = v1;
      if (v8 != &qword_25463B2E0)
      {
        v11 = qword_25463B2E0;
        if (qword_25463B2E0)
        {
          do
          {
            v10 = (uint64_t *)v11;
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11);
        }
        else
        {
          v12 = &qword_25463B2E0;
          do
          {
            v10 = (uint64_t *)v12[2];
            v2 = *v10 == (_QWORD)v12;
            v12 = v10;
          }
          while (v2);
        }
        v13 = *((char *)v10 + 55);
        if (v13 >= 0)
          v14 = v10 + 4;
        else
          v14 = (const void *)v10[4];
        if (v13 >= 0)
          v15 = *((unsigned __int8 *)v10 + 55);
        else
          v15 = v10[5];
        if (v6 >= 0)
          v16 = v7 + 4;
        else
          v16 = v4;
        if (v6 >= 0)
          v17 = v5;
        else
          v17 = v7[5];
        if (v17 >= v15)
          v18 = v15;
        else
          v18 = v17;
        v19 = memcmp(v14, v16, v18);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            goto LABEL_29;
        }
        else if (v15 >= v17)
        {
LABEL_29:
          if (!v9)
          {
LABEL_58:
            v10 = &qword_25463B2E0;
            v20 = &qword_25463B2E0;
            goto LABEL_59;
          }
          while (1)
          {
            v10 = (uint64_t *)v9;
            v21 = *(unsigned __int8 *)(v9 + 55);
            v22 = *(_QWORD *)(v9 + 40);
            if ((v21 & 0x80u) == 0)
              v23 = (const void *)(v9 + 32);
            else
              v23 = *(const void **)(v9 + 32);
            if ((v21 & 0x80u) == 0)
              v24 = v21;
            else
              v24 = v22;
            if (v24 >= v17)
              v25 = v17;
            else
              v25 = v24;
            v26 = memcmp(v16, v23, v25);
            if (v26)
            {
              if (v26 < 0)
                goto LABEL_31;
            }
            else if (v17 < v24)
            {
LABEL_31:
              v9 = *v10;
              v20 = v10;
              if (!*v10)
                goto LABEL_59;
              continue;
            }
            v27 = memcmp(v23, v16, v25);
            if (v27)
            {
              if ((v27 & 0x80000000) == 0)
                goto LABEL_54;
            }
            else if (v24 >= v17)
            {
              goto LABEL_54;
            }
            v9 = v10[1];
            if (!v9)
            {
              v20 = v10 + 1;
              goto LABEL_59;
            }
          }
        }
      }
      if (!v9)
        goto LABEL_58;
      v20 = v10 + 1;
      if (v10[1])
      {
LABEL_54:
        if (v6 < 0)
          operator delete(v4);
        operator delete(v7);
        v3 = &unk_25463B000;
        ++v0;
        v1 = v30 + 1;
        if (v0 == v29)
          goto LABEL_62;
      }
      else
      {
LABEL_59:
        *v7 = 0;
        v7[1] = 0;
        v7[2] = v10;
        *v20 = (uint64_t)v7;
        v3 = &unk_25463B000;
        if (*(_QWORD *)qword_25463B2D8)
        {
          qword_25463B2D8 = *(_QWORD *)qword_25463B2D8;
          v7 = (_QWORD *)*v20;
        }
        sub_20AEC84C8((uint64_t *)qword_25463B2E0, v7);
        ++qword_25463B2E8;
        ++v0;
        v1 = v30 + 1;
        if (v0 == v29)
        {
LABEL_62:
          if (v1 == (_DWORD *)v28)
            return;
        }
      }
    }
  }
}

void sub_20B23187C(_Unwind_Exception *a1)
{
  void *v1;
  int v2;

  if (v2 < 0)
  {
    operator delete(v1);
    sub_20B231C6C((char *)qword_25463B2E0);
    _Unwind_Resume(a1);
  }
  sub_20B231C6C((char *)qword_25463B2E0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B2318B8(uint64_t a1)
{
  sub_20B231C6C(*(char **)(a1 + 8));
  return a1;
}

uint64_t sub_20B2318E0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t result;
  _DWORD v4[6];
  int v5;
  void *__p[2];
  char v7;
  void **v8;
  const char *v9;
  _DWORD *v10;
  const char *v11;
  const char *v12;
  void ***v13;

  v5 = 0;
  if ((uint64_t)xmmword_25463B2F0 - qword_25463B300 >= 0)
  {
    sub_20AEF9DBC(v4, "{}");
    goto LABEL_16;
  }
  sub_20AED5B5C(v4, "{");
  v0 = xmmword_25463B2F0;
  sub_20B231B9C((uint64_t)__p, (int *)xmmword_25463B2F0);
  v8 = (void **)v4;
  v9 = (const char *)__p;
  v10 = v4;
  v11 = (const char *)__p;
  v12 = (const char *)__p;
  if (v5 == -1)
    sub_20AECFAB8();
  v13 = &v8;
  ((void (*)(void ****, _DWORD *))off_24C413368[v5])(&v13, v4);
  if (v7 < 0)
  {
    operator delete(__p[0]);
    v1 = (int *)(v0 + 4);
    v2 = qword_25463B300;
    if (v1 != (int *)qword_25463B300)
    {
LABEL_10:
      while (1)
      {
        v8 = (void **)v4;
        v9 = ",";
        v10 = v4;
        v11 = ",";
        v12 = ",";
        if (v5 == -1)
          break;
        __p[0] = &v8;
        ((void (*)(void **, _DWORD *))off_24C413380[v5])(__p, v4);
        sub_20B231B9C((uint64_t)__p, v1);
        v8 = (void **)v4;
        v9 = (const char *)__p;
        v10 = v4;
        v11 = (const char *)__p;
        v12 = (const char *)__p;
        if (v5 == -1)
          sub_20AECFAB8();
        v13 = &v8;
        ((void (*)(void ****, _DWORD *))off_24C413368[v5])(&v13, v4);
        if (v7 < 0)
          operator delete(__p[0]);
        if (++v1 == (int *)v2)
          goto LABEL_14;
      }
LABEL_20:
      sub_20AECFAB8();
    }
  }
  else
  {
    v1 = (int *)(v0 + 4);
    v2 = qword_25463B300;
    if (v1 != (int *)qword_25463B300)
      goto LABEL_10;
  }
LABEL_14:
  v8 = (void **)v4;
  v9 = "}";
  v10 = v4;
  v11 = "}";
  v12 = "}";
  if (v5 == -1)
    goto LABEL_20;
  __p[0] = &v8;
  ((void (*)(void **, _DWORD *))off_24C413380[v5])(__p, v4);
LABEL_16:
  if (v5 == -1)
    sub_20AECFAB8();
  v8 = __p;
  result = ((uint64_t (*)(void ***, _DWORD *))off_24C4132E8[v5])(&v8, v4);
  if (v5 != -1)
    return ((uint64_t (*)(void ***, _DWORD *))off_24C4132D0[v5])(&v8, v4);
  return result;
}

void sub_20B231B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_20AECFA60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B231B9C(uint64_t a1, int *a2)
{
  uint64_t result;
  _BYTE v3[24];
  int v4;
  char v5;
  _QWORD v6[2];

  v4 = 0;
  sub_20B1D1998((uint64_t)v6, (uint64_t)v3, a2);
  if (v4 == -1)
    sub_20AECFAB8();
  v6[0] = &v5;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C4132E8[v4])(v6, v3);
  if (v4 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C4132D0[v4])(v6, v3);
  return result;
}

void sub_20B231C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C4132D0[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20B231C6C(char *a1)
{
  if (a1)
  {
    sub_20B231C6C(*(_QWORD *)a1);
    sub_20B231C6C(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void sub_20B231CC4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B231CD4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413310;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B231D04(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  *(_QWORD *)(result + 24) = off_24C40DF60;
  *(_QWORD *)(result + 32) = &unk_24C40DFC0;
  v2 = *(unsigned int *)(result + 216);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v3, result + 40);
  *(_DWORD *)(v1 + 216) = -1;
  return result;
}

void sub_20B231D6C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  int v4;
  int v5;
  __int128 v6;
  int v7;
  __int128 v8;
  int v9;
  _BYTE v10[8];
  __int128 v11;
  void *v12[2];
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  unsigned __int8 v19;
  void *__p[2];
  uint64_t v21;
  unsigned __int8 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*(unsigned __int8 *)(a1 + 200) | *(unsigned __int8 *)(a1 + 160))
  {
    sub_20B0D0A00((uint64_t)v10, (uint64_t *)a1);
    v3 = v11;
    *(_BYTE *)(a2 + 24) = 0;
    *(_OWORD *)(a2 + 8) = v3;
    *(_BYTE *)(a2 + 48) = 0;
    if (v14)
    {
      *(_OWORD *)(a2 + 24) = *(_OWORD *)v12;
      *(_QWORD *)(a2 + 40) = v13;
      v12[1] = 0;
      v13 = 0;
      v12[0] = 0;
      *(_BYTE *)(a2 + 48) = 1;
    }
    *(_BYTE *)(a2 + 80) = 0;
    *(_OWORD *)(a2 + 56) = v15;
    *(_QWORD *)(a2 + 72) = v16;
    *(_BYTE *)(a2 + 104) = 0;
    v4 = v19;
    if (v19)
    {
      *(_OWORD *)(a2 + 80) = *(_OWORD *)v17;
      *(_QWORD *)(a2 + 96) = v18;
      v17[1] = 0;
      v18 = 0;
      v17[0] = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 0;
    *(_BYTE *)(a2 + 136) = 0;
    v5 = v22;
    if (v22)
    {
      *(_OWORD *)(a2 + 112) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 128) = v21;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      *(_BYTE *)(a2 + 136) = 1;
    }
    *(_BYTE *)(a2 + 144) = 0;
    *(_BYTE *)(a2 + 168) = 0;
    if (v25)
    {
      *(_OWORD *)(a2 + 144) = v23;
      *(_QWORD *)(a2 + 160) = v24;
      v24 = 0;
      v23 = 0uLL;
      *(_BYTE *)(a2 + 168) = 1;
    }
    *(_DWORD *)(a2 + 176) = 0;
    if (!v5)
      goto LABEL_34;
LABEL_32:
    if (SHIBYTE(v21) < 0)
    {
      operator delete(__p[0]);
      v4 = v19;
    }
    goto LABEL_34;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    sub_20B232160((uint64_t)v10, (uint64_t *)a1);
    v6 = v11;
    *(_BYTE *)(a2 + 24) = 0;
    *(_OWORD *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 48) = 0;
    if (v14)
    {
      *(_OWORD *)(a2 + 24) = *(_OWORD *)v12;
      *(_QWORD *)(a2 + 40) = v13;
      v12[1] = 0;
      v13 = 0;
      v12[0] = 0;
      *(_BYTE *)(a2 + 48) = 1;
    }
    *(_BYTE *)(a2 + 80) = 0;
    *(_OWORD *)(a2 + 56) = v15;
    *(_QWORD *)(a2 + 72) = v16;
    *(_BYTE *)(a2 + 104) = 0;
    v4 = v19;
    if (v19)
    {
      *(_OWORD *)(a2 + 80) = *(_OWORD *)v17;
      *(_QWORD *)(a2 + 96) = v18;
      v17[1] = 0;
      v18 = 0;
      v17[0] = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 0;
    *(_BYTE *)(a2 + 136) = 0;
    v7 = v22;
    if (v22)
    {
      *(_OWORD *)(a2 + 112) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 128) = v21;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      *(_BYTE *)(a2 + 136) = 1;
    }
    *(_BYTE *)(a2 + 144) = 0;
    *(_BYTE *)(a2 + 168) = 0;
    if (v25)
    {
      *(_OWORD *)(a2 + 144) = v23;
      *(_QWORD *)(a2 + 160) = v24;
      v24 = 0;
      v23 = 0uLL;
      *(_BYTE *)(a2 + 168) = 1;
    }
    *(_DWORD *)(a2 + 176) = 1;
    if (v7)
      goto LABEL_32;
  }
  else
  {
    sub_20B0C0B68((uint64_t)v10, (uint64_t *)a1);
    v8 = v11;
    *(_BYTE *)(a2 + 24) = 0;
    *(_OWORD *)(a2 + 8) = v8;
    *(_BYTE *)(a2 + 48) = 0;
    if (v14)
    {
      *(_OWORD *)(a2 + 24) = *(_OWORD *)v12;
      *(_QWORD *)(a2 + 40) = v13;
      v12[1] = 0;
      v13 = 0;
      v12[0] = 0;
      *(_BYTE *)(a2 + 48) = 1;
    }
    *(_BYTE *)(a2 + 80) = 0;
    *(_OWORD *)(a2 + 56) = v15;
    *(_QWORD *)(a2 + 72) = v16;
    *(_BYTE *)(a2 + 104) = 0;
    v4 = v19;
    if (v19)
    {
      *(_OWORD *)(a2 + 80) = *(_OWORD *)v17;
      *(_QWORD *)(a2 + 96) = v18;
      v17[1] = 0;
      v18 = 0;
      v17[0] = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 0;
    *(_BYTE *)(a2 + 136) = 0;
    v9 = v22;
    if (v22)
    {
      *(_OWORD *)(a2 + 112) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 128) = v21;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      *(_BYTE *)(a2 + 136) = 1;
    }
    *(_BYTE *)(a2 + 144) = 0;
    *(_BYTE *)(a2 + 168) = 0;
    if (v25)
    {
      *(_OWORD *)(a2 + 144) = v23;
      *(_QWORD *)(a2 + 160) = v24;
      v24 = 0;
      v23 = 0uLL;
      *(_BYTE *)(a2 + 168) = 1;
    }
    *(_DWORD *)(a2 + 176) = 2;
    if (v9)
      goto LABEL_32;
  }
LABEL_34:
  if (v4 && SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  if (v14)
  {
    if (SHIBYTE(v13) < 0)
      operator delete(v12[0]);
  }
}

uint64_t sub_20B232108(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C413350[v2])(&v4, a1);
  *(_DWORD *)(a1 + 176) = -1;
  return a1;
}

uint64_t sub_20B232160(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  __int128 v13;
  uint64_t v14;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    if (*((char *)a2 + 39) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 24), (void *)a2[2], a2[3]);
    }
    else
    {
      v6 = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 40) = a2[4];
      *(_OWORD *)(a1 + 24) = v6;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  if (*((_BYTE *)a2 + 96))
  {
    v7 = *((_BYTE *)a2 + 88);
    *(_QWORD *)(a1 + 56) = a2[10];
    *(_BYTE *)(a1 + 64) = v7;
    *(_BYTE *)(a1 + 80) = 0;
    v8 = a1 + 80;
    *(_BYTE *)(a1 + 72) = 1;
    *(_BYTE *)(a1 + 104) = 0;
    if (!*((_BYTE *)a2 + 72))
      goto LABEL_8;
  }
  else
  {
    *(_BYTE *)(a1 + 56) = 0;
    *(_BYTE *)(a1 + 80) = 0;
    v8 = a1 + 80;
    *(_BYTE *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (!*((_BYTE *)a2 + 72))
    {
LABEL_8:
      v9 = a1 + 112;
      if (*((_BYTE *)a2 + 160))
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_20AEC60F4((_BYTE *)v8, (void *)a2[6], a2[7]);
  }
  else
  {
    v10 = *((_OWORD *)a2 + 3);
    *(_QWORD *)(v8 + 16) = a2[8];
    *(_OWORD *)v8 = v10;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v9 = a1 + 112;
  if (*((_BYTE *)a2 + 160))
  {
LABEL_9:
    if (*((char *)a2 + 135) < 0)
    {
      sub_20AEC60F4(&v13, (void *)a2[14], a2[15]);
    }
    else
    {
      v13 = *((_OWORD *)a2 + 7);
      v14 = a2[16];
    }
    *(_OWORD *)v9 = v13;
    *(_QWORD *)(v9 + 16) = v14;
    *(_BYTE *)(a1 + 136) = 1;
    v11 = *((_BYTE *)a2 + 200);
    if (v11)
      goto LABEL_20;
    goto LABEL_17;
  }
LABEL_16:
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  v11 = *((_BYTE *)a2 + 200);
  if (v11)
  {
LABEL_20:
    sub_20B232388(a2 + 22, (uint64_t)&v13);
    *(_OWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 160) = v14;
    v11 = 1;
    goto LABEL_21;
  }
LABEL_17:
  *(_BYTE *)(a1 + 144) = 0;
LABEL_21:
  *(_BYTE *)(a1 + 168) = v11;
  return a1;
}

void sub_20B23231C(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[104] && v1[103] < 0)
    operator delete(*v3);
  if (v1[48])
  {
    if (v1[47] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double sub_20B232388@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v4 = (a1[1] - *a1) >> 5;
  v7 = 0;
  v6 = 0uLL;
  sub_20AECF88C((uint64_t)&v6, 0xAAAAAAAAAAAAAAABLL * v4);
  sub_20B232490(*a1, a1[1], (uint64_t)&v6);
  result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_20B2323FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  void **v11;
  void **v12;

  if (__p)
  {
    v11 = a10;
    v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != __p);
      v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B232490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  char *v8;
  int v9;
  void *__p[2];
  uint64_t v12;
  _BYTE v13[24];
  int v14;
  char v15;
  _QWORD v16[2];

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v14 = 0;
      sub_20B0C2E10((uint64_t)v16, (uint64_t)v13, v5);
      if (v14 == -1)
        sub_20AECFAB8();
      v16[0] = &v15;
      ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24C4132E8[v14])(__p, v16, v13);
      if (v14 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_24C4132D0[v14])(v16, v13);
      v7 = *(_QWORD *)(a3 + 8);
      if (v7 < *(_QWORD *)(a3 + 16))
      {
        v6 = *(_OWORD *)__p;
        *(_QWORD *)(v7 + 16) = v12;
        *(_OWORD *)v7 = v6;
        *(_QWORD *)(a3 + 8) = v7 + 24;
      }
      else
      {
        v8 = sub_20AEC81D4((void **)a3, (uint64_t)__p);
        v9 = SHIBYTE(v12);
        *(_QWORD *)(a3 + 8) = v8;
        if (v9 < 0)
          operator delete(__p[0]);
      }
      v5 += 96;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_20B23259C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B2325F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4133A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B232600(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4133A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B232630(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 + 24) = off_24C40E100;
  *(_QWORD *)(a1 + 32) = &unk_24C40E160;
  result = sub_20B0D0484(a1 + 224);
  v3 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v4, a1 + 40);
  *(_DWORD *)(a1 + 216) = -1;
  return result;
}

void sub_20B2326A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4133F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B2326B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4133F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B2326E0(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 + 24) = off_24C40E370;
  *(_QWORD *)(a1 + 32) = &unk_24C40E3D0;
  sub_20AEC833C(a1 + 224, *(char **)(a1 + 232));
  v2 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v3, a1 + 40);
  *(_DWORD *)(a1 + 216) = -1;
}

uint64_t sub_20B232754(uint64_t a1, const void ***a2, uint64_t a3)
{
  const void ***v5;
  const void **v6;
  const void **v7;
  const void **v8;
  const void ***v9;
  BOOL v10;
  uint64_t *v11;
  char *v13;
  char **v14;
  char **v15;
  char *v16[2];

  *(_QWORD *)a1 = off_24C40E370;
  *(_QWORD *)(a1 + 8) = &unk_24C40E3D0;
  sub_20B231D6C(a3, a1 + 16);
  v16[0] = 0;
  v16[1] = 0;
  v15 = v16;
  v7 = *a2;
  v5 = a2 + 1;
  v6 = v7;
  if (v7 == (const void **)v5)
  {
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 200) = a1 + 208;
  }
  else
  {
    do
    {
      sub_20AF4043C((uint64_t **)&v15, (uint64_t *)v16, v6 + 4, (uint64_t)(v6 + 4));
      v8 = (const void **)v6[1];
      if (v8)
      {
        do
        {
          v9 = (const void ***)v8;
          v8 = (const void **)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (const void ***)v6[2];
          v10 = *v9 == v6;
          v6 = (const void **)v9;
        }
        while (!v10);
      }
      v6 = (const void **)v9;
    }
    while (v9 != v5);
    *(_QWORD *)(a1 + 208) = 0;
    v11 = (uint64_t *)v15;
    *(_QWORD *)(a1 + 200) = a1 + 208;
    *(_QWORD *)(a1 + 216) = 0;
    if (v11 != (uint64_t *)v16)
    {
      do
      {
        sub_20AF4043C((uint64_t **)(a1 + 200), (uint64_t *)(a1 + 208), (const void **)v11 + 4, (uint64_t)(v11 + 4));
        v13 = (char *)v11[1];
        if (v13)
        {
          do
          {
            v14 = (char **)v13;
            v13 = *(char **)v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (char **)v11[2];
            v10 = *v14 == (char *)v11;
            v11 = (uint64_t *)v14;
          }
          while (!v10);
        }
        v11 = (uint64_t *)v14;
      }
      while (v14 != v16);
    }
  }
  sub_20AEC833C((uint64_t)&v15, v16[0]);
  return a1;
}

void sub_20B2328A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  uint64_t v11;
  char **v12;
  uint64_t v13;

  sub_20AEC833C(v13, *v12);
  sub_20AEC833C((uint64_t)&a10, a11);
  sub_20B232108(v11);
  _Unwind_Resume(a1);
}

void sub_20B2328DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B2328EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413448;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B23291C(uint64_t a1)
{
  return sub_20B0CABD0(a1 + 24);
}

uint64_t sub_20B232928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  void **v7;
  void **v8;
  void *v9;
  void *v11;
  void **v12;
  __int128 __p;
  uint64_t v14;
  unsigned __int8 v15;

  *(_QWORD *)a1 = &off_24C40E510;
  *(_QWORD *)(a1 + 8) = &unk_24C40E570;
  sub_20B231D6C(a3, a1 + 16);
  sub_20B232AB8((uint64_t)&v11, a2);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  sub_20B1D2A3C((char *)(a1 + 200), (uint64_t)v11, (uint64_t)v12, ((char *)v12 - (_BYTE *)v11) >> 5);
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  if (v15)
  {
    if (SHIBYTE(v14) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 224), (void *)__p, *((unint64_t *)&__p + 1));
      v5 = v15;
      v6 = SHIBYTE(v14);
      *(_BYTE *)(a1 + 248) = 1;
      if (v5 && v6 < 0)
        operator delete((void *)__p);
    }
    else
    {
      *(_OWORD *)(a1 + 224) = __p;
      *(_QWORD *)(a1 + 240) = v14;
      *(_BYTE *)(a1 + 248) = 1;
    }
  }
  v7 = (void **)v11;
  if (v11)
  {
    v8 = v12;
    v9 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v8 - 9) < 0)
          operator delete(*(v8 - 4));
        v8 -= 4;
      }
      while (v8 != v7);
      v9 = v11;
    }
    v12 = v7;
    operator delete(v9);
  }
  return a1;
}

void sub_20B232A60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void **v5;
  va_list va;

  va_start(va, a2);
  if (*(_BYTE *)(v2 + 248))
  {
    if (*(char *)(v2 + 247) < 0)
      operator delete(*v5);
  }
  sub_20AF4BA50(v4);
  sub_20B0D0744((uint64_t)va);
  sub_20B232108(v3);
  _Unwind_Resume(a1);
}

void sub_20B232AA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B232108(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B232AB8(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_20B1D2A3C((char *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      v4 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v4;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_20B232B48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v4;
  void **v5;
  void **v6;

  if (*(_BYTE *)(v1 + 48) && *(char *)(v1 + 47) < 0)
    operator delete(*v2);
  v4 = *(void ***)v1;
  if (*(_QWORD *)v1)
  {
    v5 = *(void ***)(v1 + 8);
    v6 = *(void ***)v1;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 9) < 0)
          operator delete(*(v5 - 4));
        v5 -= 4;
      }
      while (v5 != v4);
      v6 = *(void ***)v1;
    }
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B232BB4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B232BC4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413498;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B232BF4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  *(_QWORD *)(result + 24) = off_24C40E750;
  *(_QWORD *)(result + 32) = &unk_24C40E7B0;
  v2 = *(unsigned int *)(result + 216);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v3, result + 40);
  *(_DWORD *)(v1 + 216) = -1;
  return result;
}

_QWORD *sub_20B232C5C(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  __int128 v7;
  int v8;
  __int128 __p;
  uint64_t v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 4);
  LOBYTE(__p) = 0;
  v11 = 0;
  if (*((_BYTE *)a2 + 48))
  {
    if (*((char *)a2 + 47) < 0)
    {
      sub_20AEC60F4(&__p, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
    }
    else
    {
      __p = *(__int128 *)((char *)a2 + 24);
      v10 = *((_QWORD *)a2 + 5);
    }
    v11 = 1;
  }
  LOBYTE(v12) = 0;
  v24 = 0;
  if (*((_BYTE *)a2 + 200))
  {
    sub_20AF3FE60((char *)&v12, (__int128 *)((char *)a2 + 56));
    v24 = 1;
  }
  v25 = a2[13];
  v26 = *((_QWORD *)a2 + 28);
  *a1 = off_24C40E100;
  a1[1] = &unk_24C40E160;
  sub_20B231D6C(a3, (uint64_t)(a1 + 2));
  sub_20B0C7A08((uint64_t)(a1 + 25), &v7);
  *a1 = off_24C40E058;
  a1[1] = &unk_24C40E0B8;
  if (!v24)
    goto LABEL_15;
  if (v23 < 0)
  {
    operator delete(v22);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_11:
      if ((v19 & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_21;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v20);
  if ((v19 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v17 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v18);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v15 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v16);
  if (v15 < 0)
  {
LABEL_23:
    operator delete(v14);
    if (v13 < 0)
      goto LABEL_24;
LABEL_15:
    if (!v11)
      return a1;
    goto LABEL_16;
  }
LABEL_14:
  if ((v13 & 0x80000000) == 0)
    goto LABEL_15;
LABEL_24:
  operator delete(v12);
  if (!v11)
    return a1;
LABEL_16:
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
  return a1;
}

void sub_20B232E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a23)
  {
    if (a22 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B232ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B1BF7F4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B232EE8(_QWORD *a1, const void ***a2, uint64_t a3)
{
  const void ***v5;
  const void **v6;
  const void **v8;
  const void ***v9;
  BOOL v10;
  char **v11;
  char *v12[2];

  v12[0] = 0;
  v12[1] = 0;
  v11 = v12;
  v5 = a2 + 1;
  v6 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      sub_20AF4043C((uint64_t **)&v11, (uint64_t *)v12, v6 + 4, (uint64_t)(v6 + 4));
      v8 = (const void **)v6[1];
      if (v8)
      {
        do
        {
          v9 = (const void ***)v8;
          v8 = (const void **)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (const void ***)v6[2];
          v10 = *v9 == v6;
          v6 = (const void **)v9;
        }
        while (!v10);
      }
      v6 = (const void **)v9;
    }
    while (v9 != v5);
  }
  sub_20B232754((uint64_t)a1, (const void ***)&v11, a3);
  *a1 = off_24C40E2C8;
  a1[1] = &unk_24C40E328;
  sub_20AEC833C((uint64_t)&v11, v12[0]);
  return a1;
}

void sub_20B232FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20AEC833C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20B232FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20AEC833C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B232FF0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  void **v6;
  void *v7;
  void *v9;
  void **v10;
  void *__p;
  char v12;
  char v13;

  sub_20B232AB8((uint64_t)&v9, a2);
  sub_20B232928((uint64_t)a1, (uint64_t)&v9, a3);
  *a1 = &off_24C40E468;
  a1[1] = &unk_24C40E4C8;
  if (v13 && v12 < 0)
    operator delete(__p);
  v5 = (void **)v9;
  if (v9)
  {
    v6 = v10;
    v7 = v9;
    if (v10 != v9)
    {
      do
      {
        if (*((char *)v6 - 9) < 0)
          operator delete(*(v6 - 4));
        v6 -= 4;
      }
      while (v6 != v5);
      v7 = v9;
    }
    v10 = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_20B2330AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0D0744((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B2330C4()
{
  JUMPOUT(0x20BD3583CLL);
}

const char *sub_20B2330D8()
{
  return "cv3d.viz";
}

void sub_20B2330E8(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  int v7;
  int v8;
  void *v9;
  char *v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  int32x4_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  _DWORD *v51;
  _QWORD *v52;
  _DWORD *v53;
  std::__shared_weak_count *v54;
  void *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t *v77;
  void *v78[7];
  uint64_t v79;
  __int128 v80;
  _QWORD v81[3];
  uint64_t v82;
  _BYTE v83[32];
  _BYTE __p[24];
  uint64_t v85;
  void *v86[2];
  uint64_t v87;
  void *v88[2];
  uint64_t v89;
  void *v90;
  std::__shared_weak_count *v91;
  __int128 v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  switch(a2)
  {
    case 1:
      v11 = (char *)operator new(0x140uLL);
      *(_QWORD *)v11 = &off_24C413548;
      *((_QWORD *)v11 + 1) = 0;
      v12 = *(_DWORD *)(a1 + 8);
      *((_QWORD *)v11 + 4) = &unk_24C40D978;
      *((_QWORD *)v11 + 2) = 0;
      *((_QWORD *)v11 + 3) = off_24C40D900;
      *(_OWORD *)(v11 + 40) = 0u;
      *(_OWORD *)(v11 + 56) = 0u;
      *(_OWORD *)(v11 + 72) = 0u;
      *(_OWORD *)(v11 + 88) = 0u;
      *(_OWORD *)(v11 + 104) = 0u;
      *(_OWORD *)(v11 + 120) = 0u;
      *(_OWORD *)(v11 + 136) = 0u;
      *(_OWORD *)(v11 + 152) = 0u;
      *(_OWORD *)(v11 + 168) = 0u;
      *(_OWORD *)(v11 + 184) = 0u;
      v90 = &off_24C3FF020;
      *(_OWORD *)(v11 + 200) = 0u;
      sub_20B0DC760((uint64_t)&v91);
      sub_20B2DD7A4((uint64_t)(v11 + 216), (uint64_t)&v90, 0);
      v13 = (std::__shared_weak_count *)v92;
      if ((_QWORD)v92)
      {
        v14 = (unint64_t *)(v92 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      *((_DWORD *)v11 + 60) = v12;
      *a3 = v11 + 32;
      a3[1] = v11;
      return;
    case 2:
      v90 = 0;
      v91 = 0;
      *(_QWORD *)&v92 = 0;
      sub_20B43C0EC(v83, 7, (uint64_t)&v90);
      v17 = *(_QWORD *)v83;
      v16 = *(std::__shared_weak_count **)&v83[8];
      v78[0] = *(void **)v83;
      v78[1] = *(void **)&v83[8];
      if (v90)
      {
        v91 = (std::__shared_weak_count *)v90;
        operator delete(v90);
      }
      v18 = (char *)operator new(0x100uLL);
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *(_QWORD *)v18 = &off_24C413648;
      *(_QWORD *)v83 = v17;
      *(_QWORD *)&v83[8] = v16;
      v78[0] = 0;
      v78[1] = 0;
      *((_QWORD *)v18 + 3) = off_24C40EF08;
      v19 = v18 + 24;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      *((_QWORD *)v18 + 4) = &unk_24C40EF68;
      LOBYTE(v92) = 0;
      sub_20B231D6C((uint64_t)&v90, (uint64_t)(v18 + 40));
      v18[224] = *(_BYTE *)v17;
      *((_QWORD *)v18 + 29) = *(_QWORD *)(v17 + 56);
      *((_QWORD *)v18 + 30) = v17;
      *((_QWORD *)v18 + 31) = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
        *((_QWORD *)v18 + 3) = off_24C40EE60;
        *((_QWORD *)v18 + 4) = &unk_24C40EEC0;
        sub_20AF4EA3C((uint64_t)&v90);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      else
      {
        *((_QWORD *)v18 + 3) = off_24C40EE60;
        *((_QWORD *)v18 + 4) = &unk_24C40EEC0;
        sub_20AF4EA3C((uint64_t)&v90);
      }
      v69 = (std::__shared_weak_count *)v78[1];
      if (!v78[1])
        goto LABEL_154;
      v70 = (unint64_t *)((char *)v78[1] + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      goto LABEL_152;
    case 3:
      v90 = 0;
      v91 = 0;
      *(_QWORD *)&v92 = 0;
      sub_20B43EC5C((uint64_t)&v90, v83);
      v24 = *(_QWORD *)v83;
      v23 = *(std::__shared_weak_count **)&v83[8];
      v78[0] = *(void **)v83;
      v78[1] = *(void **)&v83[8];
      if (v90)
      {
        v91 = (std::__shared_weak_count *)v90;
        operator delete(v90);
      }
      v18 = (char *)operator new(0x100uLL);
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *(_QWORD *)v18 = &off_24C413698;
      *(_QWORD *)v83 = v24;
      *(_QWORD *)&v83[8] = v23;
      v78[0] = 0;
      v78[1] = 0;
      *((_QWORD *)v18 + 3) = off_24C40F0E0;
      v19 = v18 + 24;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      *((_QWORD *)v18 + 4) = &unk_24C40F140;
      LOBYTE(v92) = 0;
      sub_20B231D6C((uint64_t)&v90, (uint64_t)(v18 + 40));
      v18[224] = *(_BYTE *)v24;
      *((_QWORD *)v18 + 29) = *(_QWORD *)(v24 + 56) >> 1;
      *((_QWORD *)v18 + 30) = v24;
      *((_QWORD *)v18 + 31) = v23;
      if (v23)
      {
        v25 = (unint64_t *)&v23->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
        *((_QWORD *)v18 + 3) = off_24C40F038;
        *((_QWORD *)v18 + 4) = &unk_24C40F098;
        sub_20AF4EA3C((uint64_t)&v90);
        do
          v27 = __ldaxr(v25);
        while (__stlxr(v27 - 1, v25));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      else
      {
        *((_QWORD *)v18 + 3) = off_24C40F038;
        *((_QWORD *)v18 + 4) = &unk_24C40F098;
        sub_20AF4EA3C((uint64_t)&v90);
      }
      v69 = (std::__shared_weak_count *)v78[1];
      if (!v78[1])
        goto LABEL_154;
      v72 = (unint64_t *)((char *)v78[1] + 8);
      do
        v71 = __ldaxr(v72);
      while (__stlxr(v71 - 1, v72));
      goto LABEL_152;
    case 4:
      v90 = 0;
      v91 = 0;
      *(_QWORD *)&v92 = 0;
      sub_20B43F144((uint64_t)&v90, v83);
      v29 = *(_QWORD *)v83;
      v28 = *(std::__shared_weak_count **)&v83[8];
      v78[0] = *(void **)v83;
      v78[1] = *(void **)&v83[8];
      if (v90)
      {
        v91 = (std::__shared_weak_count *)v90;
        operator delete(v90);
      }
      v18 = (char *)operator new(0x100uLL);
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *(_QWORD *)v18 = &off_24C4136E8;
      *(_QWORD *)v83 = v29;
      *(_QWORD *)&v83[8] = v28;
      v78[0] = 0;
      v78[1] = 0;
      *((_QWORD *)v18 + 3) = off_24C40F2B8;
      v19 = v18 + 24;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      *((_QWORD *)v18 + 4) = &unk_24C40F318;
      LOBYTE(v92) = 0;
      sub_20B231D6C((uint64_t)&v90, (uint64_t)(v18 + 40));
      v18[224] = *(_BYTE *)v29;
      *((_QWORD *)v18 + 29) = *(_QWORD *)(v29 + 56) / 3uLL;
      *((_QWORD *)v18 + 30) = v29;
      *((_QWORD *)v18 + 31) = v28;
      if (v28)
      {
        v30 = (unint64_t *)&v28->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
        *((_QWORD *)v18 + 3) = off_24C40F210;
        *((_QWORD *)v18 + 4) = &unk_24C40F270;
        sub_20AF4EA3C((uint64_t)&v90);
        do
          v32 = __ldaxr(v30);
        while (__stlxr(v32 - 1, v30));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      else
      {
        *((_QWORD *)v18 + 3) = off_24C40F210;
        *((_QWORD *)v18 + 4) = &unk_24C40F270;
        sub_20AF4EA3C((uint64_t)&v90);
      }
      v69 = (std::__shared_weak_count *)v78[1];
      if (!v78[1])
        goto LABEL_154;
      v73 = (unint64_t *)((char *)v78[1] + 8);
      do
        v71 = __ldaxr(v73);
      while (__stlxr(v71 - 1, v73));
      goto LABEL_152;
    case 5:
      v33 = (char *)operator new(0x78uLL);
      v34 = (std::__shared_weak_count *)v33;
      *((_QWORD *)v33 + 1) = 0;
      v35 = (unint64_t *)(v33 + 8);
      *((_QWORD *)v33 + 2) = 0;
      *(_QWORD *)v33 = &off_24C3F5D98;
      *((_QWORD *)v33 + 5) = 0;
      *((_QWORD *)v33 + 6) = 0;
      v36 = vdupq_n_s32(0x7FC00000u);
      *((_QWORD *)v33 + 4) = &off_24C3F5D38;
      *(int32x4_t *)(v33 + 56) = v36;
      *(int32x4_t *)(v33 + 72) = v36;
      *(int32x4_t *)(v33 + 88) = v36;
      *((_DWORD *)v33 + 26) = 2143289344;
      *((_QWORD *)v33 + 3) = &off_24C3F5C88;
      *((_QWORD *)v33 + 14) = 0;
      v78[0] = &off_24C41D808;
      v78[1] = v33 + 24;
      v78[2] = v33;
      do
        v37 = __ldxr(v35);
      while (__stxr(v37 + 1, v35));
      do
        v38 = __ldaxr(v35);
      while (__stlxr(v38 - 1, v35));
      if (!v38)
      {
        (*(void (**)(char *))(*(_QWORD *)v33 + 16))(v33);
        std::__shared_weak_count::__release_weak(v34);
      }
      v39 = operator new(0x108uLL);
      v39[1] = 0;
      v39[2] = 0;
      *v39 = &off_24C413738;
      *(_QWORD *)v83 = &off_24C41D808;
      *(_OWORD *)&v83[8] = *(_OWORD *)&v78[1];
      v78[1] = 0;
      v78[2] = 0;
      v39[3] = off_24C40F490;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      v39[4] = &unk_24C40F4F0;
      LOBYTE(v92) = 0;
      sub_20B231D6C((uint64_t)&v90, (uint64_t)(v39 + 5));
      sub_20B443C18((uint64_t)(v39 + 28), (uint64_t)v83);
      v39[3] = off_24C40F3E8;
      v39[4] = &unk_24C40F448;
      sub_20AF4EA3C((uint64_t)&v90);
      *(_QWORD *)v83 = &off_24C41D808;
      v40 = *(std::__shared_weak_count **)&v83[16];
      if (*(_QWORD *)&v83[16])
      {
        v41 = (unint64_t *)(*(_QWORD *)&v83[16] + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v78[0] = &off_24C41D808;
      if (v78[2])
      {
        v43 = (unint64_t *)((char *)v78[2] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          (*(void (**)(void *))(*(_QWORD *)v78[2] + 16))(v78[2]);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v78[2]);
        }
      }
      *a3 = v39 + 3;
      a3[1] = v39;
      return;
    case 6:
      sub_20B416888((uint64_t *)v78);
      v18 = (char *)operator new(0xF0uLL);
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *(_QWORD *)v18 = &off_24C413788;
      v46 = v78[0];
      v45 = (std::__shared_weak_count *)v78[1];
      *(void **)v83 = v78[0];
      *(void **)&v83[8] = v78[1];
      v78[0] = 0;
      v78[1] = 0;
      *((_QWORD *)v18 + 3) = off_24C40F8E8;
      v19 = v18 + 24;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      *((_QWORD *)v18 + 4) = &unk_24C40F948;
      LOBYTE(v92) = 0;
      sub_20B231D6C((uint64_t)&v90, (uint64_t)(v18 + 40));
      *((_QWORD *)v18 + 28) = v46;
      *((_QWORD *)v18 + 29) = v45;
      if (v45)
      {
        v47 = (unint64_t *)&v45->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
        *((_QWORD *)v18 + 3) = off_24C40F840;
        *((_QWORD *)v18 + 4) = &unk_24C40F8A0;
        sub_20AF4EA3C((uint64_t)&v90);
        do
          v49 = __ldaxr(v47);
        while (__stlxr(v49 - 1, v47));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      else
      {
        *((_QWORD *)v18 + 3) = off_24C40F840;
        *((_QWORD *)v18 + 4) = &unk_24C40F8A0;
        sub_20AF4EA3C((uint64_t)&v90);
      }
      v69 = (std::__shared_weak_count *)v78[1];
      if (!v78[1])
        goto LABEL_154;
      v74 = (unint64_t *)((char *)v78[1] + 8);
      do
        v71 = __ldaxr(v74);
      while (__stlxr(v71 - 1, v74));
      goto LABEL_152;
    case 7:
      v50 = (char *)operator new(0x270uLL);
      *((_QWORD *)v50 + 1) = 0;
      *((_QWORD *)v50 + 2) = 0;
      *(_QWORD *)v50 = &off_24C4137D8;
      bzero(v50 + 40, 0x210uLL);
      *((_QWORD *)v50 + 3) = off_24C40FB08;
      *((_QWORD *)v50 + 4) = &unk_24C40FB80;
      v50[56] = 0;
      v50[88] = 0;
      v50[112] = 0;
      v50[144] = 0;
      v50[176] = 0;
      v50[208] = 0;
      *((_QWORD *)v50 + 28) = 0;
      *((_QWORD *)v50 + 29) = 0;
      *((_QWORD *)v50 + 27) = 0;
      *((_DWORD *)v50 + 71) = 0;
      *((_QWORD *)v50 + 33) = 0;
      *((_QWORD *)v50 + 34) = 0;
      *((_QWORD *)v50 + 32) = 0;
      *((_DWORD *)v50 + 81) = 0;
      *((_QWORD *)v50 + 38) = 0;
      *((_QWORD *)v50 + 39) = 0;
      *((_QWORD *)v50 + 37) = 0;
      *((_DWORD *)v50 + 91) = 0;
      *((_QWORD *)v50 + 43) = 0;
      *((_QWORD *)v50 + 44) = 0;
      *((_QWORD *)v50 + 42) = 0;
      *((_QWORD *)v50 + 48) = 0;
      *((_QWORD *)v50 + 49) = 0;
      *((_QWORD *)v50 + 47) = 0;
      v50[536] = 0;
      *(_QWORD *)(v50 + 420) = 0;
      *((_DWORD *)v50 + 107) = 0;
      *(_QWORD *)(v50 + 404) = 0;
      *(_QWORD *)(v50 + 412) = 0;
      *(_QWORD *)(v50 + 452) = 0;
      *((_DWORD *)v50 + 115) = 0;
      *(_QWORD *)(v50 + 436) = 0;
      *(_QWORD *)(v50 + 444) = 0;
      *(_QWORD *)(v50 + 476) = 0;
      *(_QWORD *)(v50 + 468) = 0;
      *((_DWORD *)v50 + 123) = 0;
      *(_QWORD *)(v50 + 484) = 0;
      *(_QWORD *)(v50 + 508) = 0;
      *(_QWORD *)(v50 + 500) = 0;
      *((_DWORD *)v50 + 131) = 0;
      *(_QWORD *)(v50 + 516) = 0;
      *((_OWORD *)v50 + 38) = 0u;
      *(_OWORD *)(v50 + 580) = 0u;
      *(_OWORD *)(v50 + 596) = 0u;
      *(_OWORD *)(v50 + 564) = 0u;
      *a3 = v50 + 32;
      a3[1] = v50;
      return;
    case 8:
      v51 = operator new(4uLL);
      *v51 = 0;
      v52 = operator new(0x108uLL);
      v52[1] = 0;
      v52[2] = 0;
      *v52 = &off_24C413598;
      v52[3] = off_24C40E990;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      v52[4] = &unk_24C40E9F0;
      LOBYTE(v92) = 0;
      sub_20B231D6C((uint64_t)&v90, (uint64_t)(v52 + 5));
      *((_BYTE *)v52 + 224) = 7;
      *((_BYTE *)v52 + 232) = 7;
      v52[31] = 0;
      v52[32] = 0;
      v52[30] = 0;
      v53 = operator new(4uLL);
      v52[30] = v53;
      *v53++ = *v51;
      v52[31] = v53;
      v52[32] = v53;
      v52[3] = off_24C40E8E8;
      v52[4] = &unk_24C40E948;
      sub_20AF4EA3C((uint64_t)&v90);
      operator delete(v51);
      *a3 = v52 + 3;
      a3[1] = v52;
      return;
    case 9:
      memset(v83, 0, 24);
      sub_20B4331C4((uint64_t)&v90, (uint64_t)v83);
      v55 = v90;
      v54 = v91;
      v78[0] = v90;
      v78[1] = v91;
      *(_OWORD *)&v78[2] = v92;
      if (*(_QWORD *)v83)
      {
        *(_QWORD *)&v83[8] = *(_QWORD *)v83;
        operator delete(*(void **)v83);
      }
      v18 = (char *)operator new(0x108uLL);
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *(_QWORD *)v18 = &off_24C413828;
      *(_QWORD *)v83 = v55;
      *(_QWORD *)&v83[8] = v54;
      v78[0] = 0;
      v78[1] = 0;
      *(_OWORD *)&v83[16] = *(_OWORD *)&v78[2];
      *((_QWORD *)v18 + 3) = off_24C40FD38;
      v19 = v18 + 24;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      *((_QWORD *)v18 + 4) = &unk_24C40FD98;
      LOBYTE(v92) = 0;
      sub_20B231D6C((uint64_t)&v90, (uint64_t)(v18 + 40));
      *((_QWORD *)v18 + 28) = *(_QWORD *)&v83[16];
      *((_QWORD *)v18 + 29) = v55;
      *((_QWORD *)v18 + 30) = v54;
      if (v54)
      {
        v56 = (unint64_t *)&v54->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
        *(_OWORD *)(v18 + 248) = *(_OWORD *)&v83[16];
        *((_QWORD *)v18 + 3) = off_24C40FC90;
        *((_QWORD *)v18 + 4) = &unk_24C40FCF0;
        sub_20AF4EA3C((uint64_t)&v90);
        do
          v58 = __ldaxr(v56);
        while (__stlxr(v58 - 1, v56));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      else
      {
        *(_OWORD *)(v18 + 248) = *(_OWORD *)&v83[16];
        *((_QWORD *)v18 + 3) = off_24C40FC90;
        *((_QWORD *)v18 + 4) = &unk_24C40FCF0;
        sub_20AF4EA3C((uint64_t)&v90);
      }
      v69 = (std::__shared_weak_count *)v78[1];
      if (!v78[1])
        goto LABEL_154;
      v75 = (unint64_t *)((char *)v78[1] + 8);
      do
        v71 = __ldaxr(v75);
      while (__stlxr(v71 - 1, v75));
      goto LABEL_152;
    case 10:
      HIBYTE(v78[2]) = 0;
      LOBYTE(v78[0]) = 0;
      LODWORD(v78[3]) = 6;
      HIBYTE(v78[6]) = 0;
      LOBYTE(v78[4]) = 0;
      LODWORD(v79) = 0;
      HIBYTE(v81[0]) = 0;
      LOBYTE(v80) = 0;
      HIBYTE(v82) = 0;
      v18 = (char *)operator new(0x150uLL);
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *(_QWORD *)v18 = &off_24C413878;
      *(_OWORD *)v83 = *(_OWORD *)v78;
      *(void **)&v83[16] = v78[2];
      memset(v78, 0, 24);
      *(_DWORD *)&v83[24] = 6;
      *(_OWORD *)__p = *(_OWORD *)&v78[4];
      *(void **)&__p[16] = v78[6];
      memset(&v78[4], 0, 24);
      LODWORD(v85) = 0;
      *(_OWORD *)v86 = v80;
      v87 = v81[0];
      v80 = 0uLL;
      memset(v81, 0, sizeof(v81));
      v89 = v82;
      *(_OWORD *)v88 = *(_OWORD *)&v81[1];
      v82 = 0;
      *((_QWORD *)v18 + 3) = &off_24C40FF10;
      v19 = v18 + 24;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      LOBYTE(v92) = 0;
      *((_QWORD *)v18 + 4) = &unk_24C40FF70;
      sub_20B231D6C((uint64_t)&v90, (uint64_t)(v18 + 40));
      sub_20B23671C(v18 + 224, (__int128 *)v83);
      *((_QWORD *)v18 + 3) = &off_24C40FE68;
      *((_QWORD *)v18 + 4) = &unk_24C40FEC8;
      sub_20AF4EA3C((uint64_t)&v90);
      if (SHIBYTE(v89) < 0)
      {
        operator delete(v88[0]);
        if ((SHIBYTE(v87) & 0x80000000) == 0)
        {
LABEL_93:
          if ((__p[23] & 0x80000000) == 0)
            goto LABEL_94;
          goto LABEL_141;
        }
      }
      else if ((SHIBYTE(v87) & 0x80000000) == 0)
      {
        goto LABEL_93;
      }
      operator delete(v86[0]);
      if ((__p[23] & 0x80000000) == 0)
      {
LABEL_94:
        if ((v83[23] & 0x80000000) == 0)
          goto LABEL_154;
        goto LABEL_142;
      }
LABEL_141:
      operator delete(*(void **)__p);
      if ((v83[23] & 0x80000000) == 0)
        goto LABEL_154;
LABEL_142:
      operator delete(*(void **)v83);
LABEL_154:
      *a3 = v19;
      a3[1] = v18;
      return;
    case 11:
      sub_20B248190((uint64_t)v78);
      v4 = operator new(0x198uLL);
      v5 = v4;
      v4[1] = 0;
      v4[2] = 0;
      *v4 = &off_24C4138C8;
      v6 = v78[0];
      v78[0] = 0;
      *(_QWORD *)v83 = v6;
      v83[8] = 0;
      __p[0] = 0;
      v7 = LOBYTE(v78[4]);
      if (LOBYTE(v78[4]))
      {
        *(_OWORD *)&v83[8] = *(_OWORD *)&v78[1];
        *(void **)&v83[24] = v78[3];
        memset(&v78[1], 0, 24);
        __p[0] = 1;
      }
      __p[8] = 0;
      LOBYTE(v86[0]) = 0;
      v8 = v80;
      if ((_BYTE)v80)
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)&v78[5];
        v85 = v79;
        v78[6] = 0;
        v79 = 0;
        v78[5] = 0;
        LOBYTE(v86[0]) = 1;
      }
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      v4[3] = off_24C4101D0;
      v4[4] = &unk_24C410230;
      LOBYTE(v92) = 0;
      sub_20B231D6C((uint64_t)&v90, (uint64_t)(v4 + 5));
      sub_20B236988((uint64_t)(v5 + 28), (uint64_t *)v83);
      v5[3] = off_24C410128;
      v5[4] = &unk_24C410188;
      sub_20AF4EA3C((uint64_t)&v90);
      if (v8 && SHIBYTE(v85) < 0)
        operator delete(*(void **)&__p[8]);
      if (v7 && (v83[31] & 0x80000000) != 0)
        operator delete(*(void **)&v83[8]);
      if (v6)
        MEMORY[0x20BD3583C](v6, 0x1000C4072FAA15ELL);
      if ((_BYTE)v80 && SHIBYTE(v79) < 0)
        operator delete(v78[5]);
      if (LOBYTE(v78[4]) && SHIBYTE(v78[3]) < 0)
        operator delete(v78[1]);
      v9 = v78[0];
      v78[0] = 0;
      if (v9)
        MEMORY[0x20BD3583C](v9, 0x1000C4072FAA15ELL);
      *a3 = v5 + 3;
      a3[1] = v5;
      return;
    case 12:
      v90 = 0;
      v91 = 0;
      *(_QWORD *)&v92 = 0;
      sub_20B4359F0((uint64_t)&v90, v83);
      v60 = *(_QWORD *)v83;
      v59 = *(std::__shared_weak_count **)&v83[8];
      v78[0] = *(void **)v83;
      v78[1] = *(void **)&v83[8];
      if (v90)
      {
        v91 = (std::__shared_weak_count *)v90;
        operator delete(v90);
      }
      v18 = (char *)operator new(0x100uLL);
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *(_QWORD *)v18 = &off_24C413918;
      *(_QWORD *)v83 = v60;
      *(_QWORD *)&v83[8] = v59;
      v78[0] = 0;
      v78[1] = 0;
      *((_QWORD *)v18 + 3) = off_24C410370;
      v19 = v18 + 24;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      *((_QWORD *)v18 + 4) = &unk_24C4103D0;
      LOBYTE(v92) = 0;
      sub_20B231D6C((uint64_t)&v90, (uint64_t)(v18 + 40));
      v18[224] = *(_BYTE *)v60;
      *((_QWORD *)v18 + 29) = *(_QWORD *)(v60 + 56) >> 2;
      *((_QWORD *)v18 + 30) = v60;
      *((_QWORD *)v18 + 31) = v59;
      if (v59)
      {
        v61 = (unint64_t *)&v59->__shared_owners_;
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
        *((_QWORD *)v18 + 3) = off_24C4102C8;
        *((_QWORD *)v18 + 4) = &unk_24C410328;
        sub_20AF4EA3C((uint64_t)&v90);
        do
          v63 = __ldaxr(v61);
        while (__stlxr(v63 - 1, v61));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      else
      {
        *((_QWORD *)v18 + 3) = off_24C4102C8;
        *((_QWORD *)v18 + 4) = &unk_24C410328;
        sub_20AF4EA3C((uint64_t)&v90);
      }
      v69 = (std::__shared_weak_count *)v78[1];
      if (!v78[1])
        goto LABEL_154;
      v76 = (unint64_t *)((char *)v78[1] + 8);
      do
        v71 = __ldaxr(v76);
      while (__stlxr(v71 - 1, v76));
      goto LABEL_152;
    case 13:
      v90 = 0;
      v91 = 0;
      *(_QWORD *)&v92 = 0;
      sub_20B435F30((uint64_t)&v90, v83);
      v65 = *(_QWORD *)v83;
      v64 = *(std::__shared_weak_count **)&v83[8];
      v78[0] = *(void **)v83;
      v78[1] = *(void **)&v83[8];
      if (v90)
      {
        v91 = (std::__shared_weak_count *)v90;
        operator delete(v90);
      }
      v18 = (char *)operator new(0x100uLL);
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *(_QWORD *)v18 = &off_24C413968;
      *(_QWORD *)v83 = v65;
      *(_QWORD *)&v83[8] = v64;
      v78[0] = 0;
      v78[1] = 0;
      *((_QWORD *)v18 + 3) = off_24C410510;
      v19 = v18 + 24;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      *((_QWORD *)v18 + 4) = &unk_24C410570;
      LOBYTE(v92) = 0;
      sub_20B231D6C((uint64_t)&v90, (uint64_t)(v18 + 40));
      v18[224] = *(_BYTE *)v65;
      *((_QWORD *)v18 + 29) = *(_QWORD *)(v65 + 56) / 6uLL;
      *((_QWORD *)v18 + 30) = v65;
      *((_QWORD *)v18 + 31) = v64;
      if (v64)
      {
        v66 = (unint64_t *)&v64->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
        *((_QWORD *)v18 + 3) = off_24C410468;
        *((_QWORD *)v18 + 4) = &unk_24C4104C8;
        sub_20AF4EA3C((uint64_t)&v90);
        do
          v68 = __ldaxr(v66);
        while (__stlxr(v68 - 1, v66));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      else
      {
        *((_QWORD *)v18 + 3) = off_24C410468;
        *((_QWORD *)v18 + 4) = &unk_24C4104C8;
        sub_20AF4EA3C((uint64_t)&v90);
      }
      v69 = (std::__shared_weak_count *)v78[1];
      if (!v78[1])
        goto LABEL_154;
      v77 = (unint64_t *)((char *)v78[1] + 8);
      do
        v71 = __ldaxr(v77);
      while (__stlxr(v71 - 1, v77));
LABEL_152:
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
      goto LABEL_154;
    default:
      *a3 = 0;
      a3[1] = 0;
      return;
  }
}

void sub_20B234290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43)
{
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  void *v47;

  v46 = *(unsigned int *)(v43 + 216);
  if ((_DWORD)v46 != -1)
    ((void (*)(char *, uint64_t))off_24C413620[v46])(&a41, v44);
  *(_DWORD *)(v43 + 216) = -1;
  sub_20AF4EA3C((uint64_t)&__p);
  sub_20B0A3820((uint64_t *)&a23);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v43);
  operator delete(v47);
  sub_20B0A3820(&a9);
  _Unwind_Resume(a1);
}

void sub_20B2346C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0A3820(&a9);
  _Unwind_Resume(a1);
}

void sub_20B2346E4(uint64_t (***lpsrc)()@<X2>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t (***v4)();
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;

  v4 = lpsrc;
  switch(a2)
  {
    case 1:
      if (*lpsrc != &off_24C411FE8)
      {
        v4 = 0;
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/include/Kit/Visualization/IData.h", 693, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_37;
        }
      }
      v5 = operator new(0x140uLL);
      v5[1] = 0;
      v5[2] = 0;
      *v5 = &off_24C4139B8;
      sub_20B0C624C(v5 + 3, (uint64_t)v4);
      goto LABEL_16;
    case 2:
      sub_20B234CE8(&v18, lpsrc);
      goto LABEL_23;
    case 3:
      sub_20B234E88(&v18, lpsrc);
      goto LABEL_23;
    case 4:
      sub_20B23502C(&v18, lpsrc);
      goto LABEL_23;
    case 5:
      sub_20B2351DC(&v18, lpsrc);
      goto LABEL_23;
    case 6:
      if (*lpsrc == &off_24C40D700)
      {
        v6 = (uint64_t)(lpsrc + 1);
        v7 = (uint64_t)(lpsrc + 4);
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
LABEL_37:
          abort();
        }
        v6 = 8;
        v7 = 32;
      }
      v9 = operator new(0xF0uLL);
      v10 = v9;
      v9[1] = 0;
      v9[2] = 0;
      *v9 = &off_24C413788;
      v12 = *(_QWORD *)v6;
      v11 = *(std::__shared_weak_count **)(v6 + 8);
      *(_QWORD *)&v18 = *(_QWORD *)v6;
      *((_QWORD *)&v18 + 1) = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      v9[3] = off_24C40F8E8;
      v9[4] = &unk_24C40F948;
      sub_20B231D6C(v7, (uint64_t)(v9 + 5));
      v10[28] = v12;
      v10[29] = v11;
      if (v11)
      {
        v15 = (unint64_t *)&v11->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
        v10[3] = off_24C40F840;
        v10[4] = &unk_24C40F8A0;
        do
          v17 = __ldaxr(v15);
        while (__stlxr(v17 - 1, v15));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      else
      {
        v10[3] = off_24C40F840;
        v10[4] = &unk_24C40F8A0;
      }
      *a3 = v10 + 3;
      a3[1] = v10;
      return;
    case 7:
      v8 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40B990, 0);
      if (!v8
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/include/Kit/Visualization/IData.h", 693, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_37;
      }
      v5 = operator new(0x270uLL);
      v5[1] = 0;
      v5[2] = 0;
      *v5 = &off_24C413A08;
      sub_20B0C6F24((uint64_t)(v5 + 3), (uint64_t)v8);
LABEL_16:
      *a3 = v5 + 4;
      a3[1] = v5;
      break;
    case 8:
      sub_20B234AA4(&v18, lpsrc);
      goto LABEL_23;
    case 9:
      sub_20B2353A0(&v18, lpsrc);
      goto LABEL_23;
    case 10:
      sub_20B235558(&v18, lpsrc);
      goto LABEL_23;
    case 11:
      sub_20B23588C(&v18, lpsrc);
      goto LABEL_23;
    case 12:
      sub_20B235A54(&v18, lpsrc);
      goto LABEL_23;
    case 13:
      sub_20B235BF8(&v18, lpsrc);
LABEL_23:
      *(_OWORD *)a3 = v18;
      break;
    default:
      *a3 = 0;
      a3[1] = 0;
      break;
  }
}

void sub_20B234A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  sub_20AEC147C((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_20B234A74(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20B234A8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20B234AA4(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  _BYTE *v9;
  size_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C3F6318, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 48;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = 8;
    v5 = 48;
  }
  v6 = operator new(0x108uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C413598;
  v7 = *(_BYTE *)v4;
  v9 = *(_BYTE **)(v4 + 8);
  v8 = *(_BYTE **)(v4 + 16);
  v10 = v8 - v9;
  if (v8 == v9)
  {
    v12 = 0;
    v11 = 0;
  }
  else
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v11 = (char *)operator new(v8 - v9);
    v12 = &v11[v10];
    memcpy(v11, v9, v10);
  }
  v6[3] = off_24C40E990;
  v6[4] = &unk_24C40E9F0;
  sub_20B231D6C(v5, (uint64_t)(v6 + 5));
  v6[30] = 0;
  *((_BYTE *)v6 + 224) = v7;
  *((_BYTE *)v6 + 232) = v7;
  v6[31] = 0;
  v6[32] = 0;
  v13 = v12 - v11;
  if (v12 != v11)
  {
    if (v13 < 0)
      sub_20AEC60B8();
    v14 = (char *)operator new(v12 - v11);
    v6[30] = v14;
    v15 = &v14[v13];
    v6[32] = &v14[v13];
    memcpy(v14, v11, v12 - v11);
    v6[31] = v15;
  }
  v6[3] = off_24C40E8E8;
  v6[4] = &unk_24C40E948;
  if (v11)
    operator delete(v11);
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_20B234C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::__shared_weak_count *v17;
  void *v18;
  void *v20;

  if (v18)
    operator delete(v18);
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_20B234CE8(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C3F63E8, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 32;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = 8;
    v5 = 32;
  }
  v6 = operator new(0x100uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C413648;
  v9 = *(_QWORD *)v4;
  v8 = *(std::__shared_weak_count **)(v4 + 8);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v6[3] = off_24C40EF08;
  v6[4] = &unk_24C40EF68;
  sub_20B231D6C(v5, (uint64_t)(v6 + 5));
  *((_BYTE *)v7 + 224) = *(_BYTE *)v9;
  v7[29] = *(_QWORD *)(v9 + 56);
  v7[30] = v9;
  v7[31] = v8;
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v7[3] = off_24C40EE60;
    v7[4] = &unk_24C40EEC0;
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v7[3] = off_24C40EE60;
    v7[4] = &unk_24C40EEC0;
  }
  *a1 = v7 + 3;
  a1[1] = v7;
}

void sub_20B234E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  sub_20AEC147C((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_20B234E88(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C3F64B8, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 32;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = 8;
    v5 = 32;
  }
  v6 = operator new(0x100uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C413698;
  v9 = *(_QWORD *)v4;
  v8 = *(std::__shared_weak_count **)(v4 + 8);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v6[3] = off_24C40F0E0;
  v6[4] = &unk_24C40F140;
  sub_20B231D6C(v5, (uint64_t)(v6 + 5));
  *((_BYTE *)v7 + 224) = *(_BYTE *)v9;
  v7[29] = *(_QWORD *)(v9 + 56) >> 1;
  v7[30] = v9;
  v7[31] = v8;
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v7[3] = off_24C40F038;
    v7[4] = &unk_24C40F098;
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v7[3] = off_24C40F038;
    v7[4] = &unk_24C40F098;
  }
  *a1 = v7 + 3;
  a1[1] = v7;
}

void sub_20B23500C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  sub_20AEC147C((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_20B23502C(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C3F6588, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 32;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = 8;
    v5 = 32;
  }
  v6 = operator new(0x100uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C4136E8;
  v9 = *(_QWORD *)v4;
  v8 = *(std::__shared_weak_count **)(v4 + 8);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v6[3] = off_24C40F2B8;
  v6[4] = &unk_24C40F318;
  sub_20B231D6C(v5, (uint64_t)(v6 + 5));
  *((_BYTE *)v7 + 224) = *(_BYTE *)v9;
  v7[29] = *(_QWORD *)(v9 + 56) / 3uLL;
  v7[30] = v9;
  v7[31] = v8;
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v7[3] = off_24C40F210;
    v7[4] = &unk_24C40F270;
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v7[3] = off_24C40F210;
    v7[4] = &unk_24C40F270;
  }
  *a1 = v7 + 3;
  a1[1] = v7;
}

void sub_20B2351BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  sub_20AEC147C((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_20B2351DC(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C3F5F90, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 32;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = 8;
    v5 = 32;
  }
  v6 = operator new(0x108uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C413738;
  v9 = *(_QWORD *)(v4 + 8);
  v8 = *(std::__shared_weak_count **)(v4 + 16);
  v15[0] = &off_24C41D808;
  v15[1] = v9;
  v16 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v6[3] = off_24C40F490;
  v6[4] = &unk_24C40F4F0;
  sub_20B231D6C(v5, (uint64_t)(v6 + 5));
  sub_20B443C18((uint64_t)(v7 + 28), (uint64_t)v15);
  v7[3] = off_24C40F3E8;
  v7[4] = &unk_24C40F448;
  v15[0] = &off_24C41D808;
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *a1 = v7 + 3;
  a1[1] = v7;
}

void sub_20B235348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v18 = *(unsigned int *)(v15 + 216);
  if ((_DWORD)v18 != -1)
    ((void (*)(char *, uint64_t))off_24C413620[v18])(&a15, v16);
  *(_DWORD *)(v15 + 216) = -1;
  sub_20B448814(&a9);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v15);
  operator delete(v19);
  _Unwind_Resume(a1);
}

void sub_20B2353A0(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C3F5450, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 48;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = 8;
    v5 = 48;
  }
  v6 = operator new(0x108uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C413828;
  v9 = *(_QWORD *)v4;
  v8 = *(std::__shared_weak_count **)(v4 + 8);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v15 = *(_OWORD *)(v4 + 16);
  v6[3] = off_24C40FD38;
  v6[4] = &unk_24C40FD98;
  sub_20B231D6C(v5, (uint64_t)(v6 + 5));
  v7[28] = v15;
  v7[29] = v9;
  v7[30] = v8;
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    *(_OWORD *)(v7 + 31) = v15;
    v7[3] = off_24C40FC90;
    v7[4] = &unk_24C40FCF0;
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *(_OWORD *)(v7 + 31) = v15;
    v7[3] = off_24C40FC90;
    v7[4] = &unk_24C40FCF0;
  }
  *a1 = v7 + 3;
  a1[1] = v7;
}

void sub_20B235538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  sub_20AEC147C((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_20B235558(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  void *v12[2];
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  __int128 __p;
  uint64_t v21;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C4100B0, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 128;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = 8;
    v5 = 128;
  }
  v6 = operator new(0x150uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C413878;
  if (*(char *)(v4 + 23) < 0)
  {
    sub_20AEC60F4(v12, *(void **)v4, *(_QWORD *)(v4 + 8));
  }
  else
  {
    v7 = *(_OWORD *)v4;
    v13 = *(_QWORD *)(v4 + 16);
    *(_OWORD *)v12 = v7;
  }
  v14 = *(_DWORD *)(v4 + 24);
  if (*(char *)(v4 + 55) < 0)
  {
    sub_20AEC60F4(&v15, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
  }
  else
  {
    v8 = *(_OWORD *)(v4 + 32);
    v16 = *(_QWORD *)(v4 + 48);
    v15 = v8;
  }
  v17 = *(_DWORD *)(v4 + 56);
  if (*(char *)(v4 + 87) < 0)
  {
    sub_20AEC60F4(&v18, *(void **)(v4 + 64), *(_QWORD *)(v4 + 72));
  }
  else
  {
    v9 = *(_OWORD *)(v4 + 64);
    v19 = *(_QWORD *)(v4 + 80);
    v18 = v9;
  }
  if (*(char *)(v4 + 111) < 0)
  {
    sub_20AEC60F4(&__p, *(void **)(v4 + 88), *(_QWORD *)(v4 + 96));
  }
  else
  {
    v10 = *(_OWORD *)(v4 + 88);
    v21 = *(_QWORD *)(v4 + 104);
    __p = v10;
  }
  v6[3] = &off_24C40FF10;
  v6[4] = &unk_24C40FF70;
  sub_20B231D6C(v5, (uint64_t)(v6 + 5));
  sub_20B23671C((_BYTE *)v6 + 224, (__int128 *)v12);
  v6[3] = &off_24C40FE68;
  v6[4] = &unk_24C40FEC8;
  if (SHIBYTE(v21) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v19) & 0x80000000) == 0)
    {
LABEL_19:
      v11 = (char *)(v6 + 3);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        goto LABEL_20;
LABEL_24:
      operator delete((void *)v15);
      if ((SHIBYTE(v13) & 0x80000000) == 0)
        goto LABEL_21;
      goto LABEL_25;
    }
  }
  else if ((SHIBYTE(v19) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete((void *)v18);
  v11 = (char *)(v6 + 3);
  if (SHIBYTE(v16) < 0)
    goto LABEL_24;
LABEL_20:
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_21:
    *a1 = v11;
    a1[1] = v6;
    return;
  }
LABEL_25:
  operator delete(v12[0]);
  *a1 = v11;
  a1[1] = v6;
}

void sub_20B235790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__shared_weak_count *v28;
  void *v30;
  void *v31;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a14 & 0x80000000) == 0)
  {
LABEL_4:
    std::__shared_weak_count::~__shared_weak_count(v28);
    operator delete(v30);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a9);
  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v31);
  _Unwind_Resume(a1);
}

void sub_20B23581C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20B235834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;

  v13 = *(unsigned int *)(v9 + 216);
  if ((_DWORD)v13 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C413620[v13])(v11 - 33, v10);
  *(_DWORD *)(v9 + 216) = -1;
  sub_20B0CFD2C((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v9);
  operator delete(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_20B23588C(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8[3];
  char v9;
  char v10;
  void *__p;
  char v12;
  char v13;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40C070, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 80;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = 8;
    v5 = 80;
  }
  v6 = operator new(0x198uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C4138C8;
  sub_20B0A2830((uint64_t)v8, (uint64_t *)v4);
  v6[3] = off_24C4101D0;
  v6[4] = &unk_24C410230;
  sub_20B231D6C(v5, (uint64_t)(v6 + 5));
  sub_20B236988((uint64_t)(v6 + 28), v8);
  v6[3] = off_24C410128;
  v6[4] = &unk_24C410188;
  if (v13 && v12 < 0)
    operator delete(__p);
  if (v10 && v9 < 0)
    operator delete((void *)v8[1]);
  result = v8[0];
  v8[0] = 0;
  if (result)
    result = MEMORY[0x20BD3583C](result, 0x1000C4072FAA15ELL);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_20B2359E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;

  v13 = *(unsigned int *)(v9 + 216);
  if ((_DWORD)v13 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C413620[v13])(v11 - 33, v10);
  *(_DWORD *)(v9 + 216) = -1;
  sub_20B0A3820(&a9);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v9);
  operator delete(v14);
  _Unwind_Resume(a1);
}

void sub_20B235A3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20B235A54(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C3F6658, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 32;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = 8;
    v5 = 32;
  }
  v6 = operator new(0x100uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C413918;
  v9 = *(_QWORD *)v4;
  v8 = *(std::__shared_weak_count **)(v4 + 8);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v6[3] = off_24C410370;
  v6[4] = &unk_24C4103D0;
  sub_20B231D6C(v5, (uint64_t)(v6 + 5));
  *((_BYTE *)v7 + 224) = *(_BYTE *)v9;
  v7[29] = *(_QWORD *)(v9 + 56) >> 2;
  v7[30] = v9;
  v7[31] = v8;
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v7[3] = off_24C4102C8;
    v7[4] = &unk_24C410328;
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v7[3] = off_24C4102C8;
    v7[4] = &unk_24C410328;
  }
  *a1 = v7 + 3;
  a1[1] = v7;
}

void sub_20B235BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  sub_20AEC147C((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_20B235BF8(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C3F6728, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 32;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = 8;
    v5 = 32;
  }
  v6 = operator new(0x100uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C413968;
  v9 = *(_QWORD *)v4;
  v8 = *(std::__shared_weak_count **)(v4 + 8);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v6[3] = off_24C410510;
  v6[4] = &unk_24C410570;
  sub_20B231D6C(v5, (uint64_t)(v6 + 5));
  *((_BYTE *)v7 + 224) = *(_BYTE *)v9;
  v7[29] = *(_QWORD *)(v9 + 56) / 6uLL;
  v7[30] = v9;
  v7[31] = v8;
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v7[3] = off_24C410468;
    v7[4] = &unk_24C4104C8;
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v7[3] = off_24C410468;
    v7[4] = &unk_24C4104C8;
  }
  *a1 = v7 + 3;
  a1[1] = v7;
}

void sub_20B235D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  sub_20AEC147C((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

BOOL sub_20B235DA8(uint64_t a1, int a2)
{
  return (a2 - 1) < 0xD;
}

uint64_t sub_20B235DB8(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  _BYTE v5[24];
  int v6;
  char v7;
  _QWORD v8[2];

  v4 = a2;
  if (a2 - 1 >= 0xD)
    return sub_20B235EC0("unknown type id ", &v4);
  v3 = a2;
  v6 = 0;
  sub_20B236DE0((uint64_t)v8, (uint64_t)v5, &v3);
  if (v6 == -1)
    sub_20AECFAB8();
  v8[0] = &v7;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C413608[v6])(v8, v5);
  if (v6 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C4135F0[v6])(v8, v5);
  return result;
}

void sub_20B235E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C4135F0[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B235EC0(char *__s, unsigned int *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  std::string v6;
  _QWORD v7[5];
  _QWORD *v8;

  v5 = 0;
  sub_20AFAC918(v4, __s);
  std::to_string(&v6, *a2);
  v7[0] = v4;
  v7[1] = &v6;
  v7[2] = v4;
  v7[3] = &v6;
  v7[4] = &v6;
  if (v5 == -1)
    sub_20AECFAB8();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24C4135D8[v5])(&v8, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (v5 == -1)
    sub_20AECFAB8();
  v7[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C413608[v5])(v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C4135F0[v5])(v7, v4);
  return result;
}

void sub_20B235FBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B235FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20B235FC8);
}

void sub_20B235FFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B23600C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B23603C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20B23604C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B23605C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B23608C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 + 24) = off_24C40E990;
  *(_QWORD *)(a1 + 32) = &unk_24C40E9F0;
  v2 = *(void **)(a1 + 240);
  if (v2)
  {
    *(_QWORD *)(a1 + 248) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v4, a1 + 40);
  *(_DWORD *)(a1 + 216) = -1;
}

void sub_20B236104(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413648;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B236114(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413648;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B236144(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 + 24) = off_24C40EF08;
  *(_QWORD *)(a1 + 32) = &unk_24C40EF68;
  v2 = *(std::__shared_weak_count **)(a1 + 248);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 216);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 40);
LABEL_7:
  *(_DWORD *)(a1 + 216) = -1;
}

void sub_20B2361F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B236204(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B236234(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 + 24) = off_24C40F0E0;
  *(_QWORD *)(a1 + 32) = &unk_24C40F140;
  v2 = *(std::__shared_weak_count **)(a1 + 248);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 216);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 40);
LABEL_7:
  *(_DWORD *)(a1 + 216) = -1;
}

void sub_20B2362E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4136E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B2362F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4136E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B236324(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 + 24) = off_24C40F2B8;
  *(_QWORD *)(a1 + 32) = &unk_24C40F318;
  v2 = *(std::__shared_weak_count **)(a1 + 248);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 216);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 40);
LABEL_7:
  *(_DWORD *)(a1 + 216) = -1;
}

void sub_20B2363D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B2363E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B236414(_QWORD *result)
{
  _QWORD *v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  char v4;

  v1 = result;
  v2 = (uint64_t (*)(_QWORD))result[29];
  result[3] = off_24C40F490;
  result[4] = &unk_24C40F4F0;
  if (v2)
    result = (_QWORD *)v2(0);
  v3 = *((unsigned int *)v1 + 54);
  if ((_DWORD)v3 != -1)
    result = (_QWORD *)((uint64_t (*)(char *, _QWORD *))*(&off_24C40DC18 + v3))(&v4, v1 + 5);
  *((_DWORD *)v1 + 54) = -1;
  return result;
}

void sub_20B2364A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B2364B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413788;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B2364E0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 + 24) = off_24C40F8E8;
  *(_QWORD *)(a1 + 32) = &unk_24C40F948;
  v2 = *(std::__shared_weak_count **)(a1 + 232);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 216);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 40);
LABEL_7:
  *(_DWORD *)(a1 + 216) = -1;
}

void sub_20B236590(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4137D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B2365A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4137D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B2365D0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20B2365E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B2365F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B236620(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 + 24) = off_24C40FD38;
  *(_QWORD *)(a1 + 32) = &unk_24C40FD98;
  v2 = *(std::__shared_weak_count **)(a1 + 240);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 216);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 40);
LABEL_7:
  *(_DWORD *)(a1 + 216) = -1;
}

void sub_20B2366D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413878;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B2366E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413878;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B236710(uint64_t a1)
{
  return sub_20B0CA240(a1 + 24);
}

_BYTE *sub_20B23671C(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    __dst[24] = *((_DWORD *)a2 + 6);
    v5 = __dst + 32;
    if ((*((char *)a2 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    __dst[24] = *((_DWORD *)a2 + 6);
    v5 = __dst + 32;
    if ((*((char *)a2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = a2[2];
      *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 6);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_20AEC60F4(v5, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
LABEL_6:
  *((_DWORD *)__dst + 14) = *((_DWORD *)a2 + 14);
  if (*((char *)a2 + 87) < 0)
  {
    sub_20AEC60F4(__dst + 64, *((void **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v7 = a2[4];
    *((_QWORD *)__dst + 10) = *((_QWORD *)a2 + 10);
    *((_OWORD *)__dst + 4) = v7;
  }
  v8 = __dst + 88;
  if (*((char *)a2 + 111) < 0)
  {
    sub_20AEC60F4(v8, *((void **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v9 = *(__int128 *)((char *)a2 + 88);
    *((_QWORD *)__dst + 13) = *((_QWORD *)a2 + 13);
    *(_OWORD *)v8 = v9;
  }
  return __dst;
}

void sub_20B23682C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 87) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20B2368A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4138C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B2368B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4138C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B2368E0(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 + 24) = off_24C4101D0;
  *(_QWORD *)(a1 + 32) = &unk_24C410230;
  if (*(_BYTE *)(a1 + 400) && *(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  if (*(_BYTE *)(a1 + 368) && *(char *)(a1 + 367) < 0)
  {
    operator delete(*(void **)(a1 + 344));
    v2 = *(unsigned int *)(a1 + 216);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))off_24C413620[v2])(&v3, a1 + 40);
LABEL_8:
  *(_DWORD *)(a1 + 216) = -1;
}

uint64_t sub_20B236988(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v12;
  char v13;

  v4 = *a2;
  v5 = operator new();
  *(_BYTE *)v5 = 0;
  *(_DWORD *)(v5 + 128) = -1;
  v6 = *(unsigned int *)(v4 + 128);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_24C414260[v6])(&v13, v5, v4);
    *(_DWORD *)(v5 + 128) = v6;
  }
  *(_BYTE *)(v5 + 136) = *(_BYTE *)(v4 + 136);
  v12 = v5;
  v7 = sub_20B249514(a1 + 8, &v12);
  v8 = v12;
  v12 = 0;
  if (v8)
    MEMORY[0x20BD3583C](v8, 0x1000C4072FAA15ELL, v7);
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    if (*((char *)a2 + 31) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 120), (void *)a2[1], a2[2]);
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 1);
      *(_QWORD *)(a1 + 136) = a2[3];
      *(_OWORD *)(a1 + 120) = v9;
    }
    *(_BYTE *)(a1 + 144) = 1;
  }
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  if (*((_BYTE *)a2 + 64))
  {
    if (*((char *)a2 + 63) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 152), (void *)a2[5], a2[6]);
    }
    else
    {
      v10 = *(_OWORD *)(a2 + 5);
      *(_QWORD *)(a1 + 168) = a2[7];
      *(_OWORD *)(a1 + 152) = v10;
    }
    *(_BYTE *)(a1 + 176) = 1;
  }
  return a1;
}

void sub_20B236AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  char *v9;
  void **v10;
  void **v11;

  if (v9[176] && v9[175] < 0)
    operator delete(*v11);
  if (v9[144])
  {
    if (v9[143] < 0)
    {
      operator delete(*v10);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B236B60(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B236B70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B236BA0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 + 24) = off_24C410370;
  *(_QWORD *)(a1 + 32) = &unk_24C4103D0;
  v2 = *(std::__shared_weak_count **)(a1 + 248);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 216);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 40);
LABEL_7:
  *(_DWORD *)(a1 + 216) = -1;
}

void sub_20B236C50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B236C60(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413968;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B236C90(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 + 24) = off_24C410510;
  *(_QWORD *)(a1 + 32) = &unk_24C410570;
  v2 = *(std::__shared_weak_count **)(a1 + 248);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 216);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 40);
LABEL_7:
  *(_DWORD *)(a1 + 216) = -1;
}

void sub_20B236D40(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4139B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B236D50(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4139B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B236D80(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20B236D90(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413A08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B236DA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413A08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B236DD0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20B236DE0(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__dst[2];
  unint64_t v21;
  _QWORD v22[5];
  _QWORD *v23;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v22[0] = v5;
  v6 = *a3;
  if (v6 >= 0xE
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/DataType.cpp", 43, (uint64_t)"idx < static_cast<uint32_t>(DataType::End)", 42, (uint64_t)&unk_20B5A796E, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)(&off_24C410620)[2 * v6], (uint64_t)(&off_24C410620)[2 * v6 + 1]);
  v7 = *(_DWORD *)(v5 + 120);
  if ((v7 & 0x10) != 0)
  {
    v10 = *(_QWORD *)(v5 + 112);
    v11 = *(_QWORD *)(v5 + 72);
    if (v10 < v11)
    {
      *(_QWORD *)(v5 + 112) = v11;
      v10 = v11;
    }
    v12 = *(const void **)(v5 + 64);
    v8 = v10 - (_QWORD)v12;
    if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_24;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v21) = 0;
      v9 = __dst;
      goto LABEL_16;
    }
    v12 = *(const void **)(v5 + 40);
    v8 = *(_QWORD *)(v5 + 56) - (_QWORD)v12;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_24:
      sub_20AEC0138();
  }
  if (v8 >= 0x17)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    v9 = (void **)operator new(v13 + 1);
    __dst[1] = (void *)v8;
    v21 = v14 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_15;
  }
  HIBYTE(v21) = v8;
  v9 = __dst;
  if (v8)
LABEL_15:
    memmove(v9, v12, v8);
LABEL_16:
  *((_BYTE *)v9 + v8) = 0;
  v15 = v22[0];
  if (v22[0])
  {
    v16 = MEMORY[0x24BEDB7F0];
    v17 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v22[0] = *MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(v16 + 72);
    *(_QWORD *)(v15 + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(v16 + 64);
    *(_QWORD *)(v15 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v15 + 16) = v18;
    if (*(char *)(v15 + 111) < 0)
      operator delete(*(void **)(v15 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v15 + 128);
    MEMORY[0x20BD3583C](v15, 0x10B2C40EED050F3);
  }
  v22[0] = a2;
  v22[1] = __dst;
  v22[2] = a2;
  v22[3] = __dst;
  v22[4] = __dst;
  v19 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v19 == -1)
    sub_20AECFAB8();
  v23 = v22;
  ((void (*)(_QWORD **, uint64_t))off_24C4135D8[v19])(&v23, a2);
  if (SHIBYTE(v21) < 0)
    operator delete(__dst[0]);
}

void sub_20B237084(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B2370A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B2370C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B2370DC(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v5;
  void *__p[2];
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  char v14;
  char v15;
  char v16;

  LOBYTE(v5) = 0;
  v16 = *((_BYTE *)a2 + 120);
  if (!v16)
  {
    v5 = *a2;
    LOBYTE(__p[0]) = 0;
    v15 = 0;
    if (*((_BYTE *)a2 + 112))
    {
      v8 = 0;
      if (*((_BYTE *)a2 + 40))
      {
        *(_OWORD *)__p = a2[1];
        v7 = *((_QWORD *)a2 + 4);
        *((_QWORD *)a2 + 3) = 0;
        *((_QWORD *)a2 + 4) = 0;
        *((_QWORD *)a2 + 2) = 0;
        v8 = 1;
      }
      LOBYTE(v9) = 0;
      v14 = 0;
      if (*((_BYTE *)a2 + 104))
      {
        v3 = *((_QWORD *)a2 + 9);
        v10 = *((_QWORD *)a2 + 8);
        v9 = a2[3];
        *((_QWORD *)a2 + 7) = 0;
        *((_QWORD *)a2 + 8) = 0;
        *((_QWORD *)a2 + 6) = 0;
        v11 = v3;
        *(_OWORD *)v12 = a2[5];
        v13 = *((_QWORD *)a2 + 12);
        *((_QWORD *)a2 + 10) = 0;
        *((_QWORD *)a2 + 11) = 0;
        *((_QWORD *)a2 + 12) = 0;
        v14 = 1;
      }
      v15 = 1;
    }
  }
  sub_20AECE3B4((uint64_t)&v5, a1);
  if (v16 || !v15)
    return a1;
  if (v14)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v10) & 0x80000000) == 0)
        goto LABEL_14;
LABEL_18:
      operator delete((void *)v9);
      if (!v8)
        return a1;
      goto LABEL_15;
    }
    operator delete(v12[0]);
    if (SHIBYTE(v10) < 0)
      goto LABEL_18;
  }
LABEL_14:
  if (!v8)
    return a1;
LABEL_15:
  if ((SHIBYTE(v7) & 0x80000000) == 0)
    return a1;
  operator delete(__p[0]);
  return a1;
}

uint64_t sub_20B237240(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::mutex *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  if (*(_BYTE *)(a1 + 608))
    *(_BYTE *)(a1 + 608) = 0;
  v2 = *(_QWORD *)(a1 + 592);
  *(_QWORD *)(a1 + 592) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_BYTE *)(a1 + 552))
  {
    v3 = *(_QWORD *)(a1 + 544);
    *(_QWORD *)(a1 + 544) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *(_BYTE *)(a1 + 552) = 0;
  }
  sub_20B241EE4(*(_QWORD **)(a1 + 632));
  v4 = *(std::mutex **)(a1 + 616);
  *(_QWORD *)(a1 + 616) = 0;
  if (v4)
  {
    std::mutex::~mutex(v4);
    MEMORY[0x20BD3583C]();
  }
  v5 = *(_QWORD *)(a1 + 592);
  *(_QWORD *)(a1 + 592) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 568);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 576);
    v8 = *(void **)(a1 + 568);
    if (v7 != v6)
    {
      do
      {
        v7 -= 288;
        sub_20B241854(v7);
      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 568);
    }
    *(_QWORD *)(a1 + 576) = v6;
    operator delete(v8);
  }
  v9 = *(std::mutex **)(a1 + 560);
  *(_QWORD *)(a1 + 560) = 0;
  if (v9)
  {
    std::mutex::~mutex(v9);
    MEMORY[0x20BD3583C]();
  }
  if (*(_BYTE *)(a1 + 552))
  {
    v10 = *(_QWORD *)(a1 + 544);
    *(_QWORD *)(a1 + 544) = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = *(std::__shared_weak_count **)(a1 + 528);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  if (*(_BYTE *)(a1 + 464))
  {
    v12 = *(_QWORD **)(a1 + 456);
    if (v12 == (_QWORD *)(a1 + 432))
    {
      v13 = 4;
      v12 = (_QWORD *)(a1 + 432);
    }
    else
    {
      if (!v12)
        goto LABEL_31;
      v13 = 5;
    }
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
LABEL_31:
  if (!*(_BYTE *)(a1 + 424))
    goto LABEL_37;
  v14 = *(_QWORD **)(a1 + 416);
  if (v14 == (_QWORD *)(a1 + 392))
  {
    v15 = 4;
    v14 = (_QWORD *)(a1 + 392);
  }
  else
  {
    if (!v14)
      goto LABEL_37;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_37:
  if (!*(_BYTE *)(a1 + 384))
    goto LABEL_43;
  v16 = *(_QWORD **)(a1 + 376);
  if (v16 == (_QWORD *)(a1 + 352))
  {
    v17 = 4;
    v16 = (_QWORD *)(a1 + 352);
  }
  else
  {
    if (!v16)
      goto LABEL_43;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_43:
  if (!*(_BYTE *)(a1 + 344))
    goto LABEL_49;
  v18 = *(_QWORD **)(a1 + 336);
  if (v18 == (_QWORD *)(a1 + 312))
  {
    v19 = 4;
    v18 = (_QWORD *)(a1 + 312);
  }
  else
  {
    if (!v18)
      goto LABEL_49;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_49:
  if (*(_BYTE *)(a1 + 304))
  {
    v20 = *(_QWORD **)(a1 + 296);
    if (v20 == (_QWORD *)(a1 + 272))
    {
      v21 = 4;
      v20 = (_QWORD *)(a1 + 272);
      goto LABEL_54;
    }
    if (v20)
    {
      v21 = 5;
LABEL_54:
      (*(void (**)(void))(*v20 + 8 * v21))();
    }
  }
  sub_20AF3F978(a1 + 96);
  if (!*(_BYTE *)(a1 + 88) || (*(char *)(a1 + 87) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 64));
  return a1;
}

uint64_t sub_20B2374C8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(_QWORD **)(a1 + 144);
    if (v2 == (_QWORD *)(a1 + 120))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 120);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  if (!*(_BYTE *)(a1 + 112))
    goto LABEL_13;
  v4 = *(_QWORD **)(a1 + 104);
  if (v4 == (_QWORD *)(a1 + 80))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 80);
  }
  else
  {
    if (!v4)
      goto LABEL_13;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_13:
  if (!*(_BYTE *)(a1 + 72))
    goto LABEL_19;
  v6 = *(_QWORD **)(a1 + 64);
  if (v6 == (_QWORD *)(a1 + 40))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (!v6)
      goto LABEL_19;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_19:
  if (*(_BYTE *)(a1 + 32))
  {
    v8 = *(_QWORD **)(a1 + 24);
    if (v8 == (_QWORD *)a1)
    {
      v9 = 4;
      v8 = (_QWORD *)a1;
      goto LABEL_24;
    }
    if (v8)
    {
      v9 = 5;
LABEL_24:
      (*(void (**)(void))(*v8 + 8 * v9))();
    }
  }
  return a1;
}

void sub_20B2375C4(uint64_t a1)
{
  sub_20B237240(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B2375E8(std::string::size_type a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13[2];
  uint64_t v14;
  void *__dst[2];
  uint64_t v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 __p;
  uint64_t v26;
  unsigned __int8 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  char v34;
  const char *v35;

  v35 = "data";
  v5 = *(std::__shared_weak_count **)(a1 + 248);
  if (v5)
  {
    v7 = std::__shared_weak_count::lock(v5);
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 240);
      if (v8)
      {
        sub_20B238884(a3, v8, a1, a2);
LABEL_29:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  sub_20B24214C((uint64_t)v13, (const char *)&v35);
  if (SHIBYTE(v14) < 0)
  {
    sub_20AEC60F4(__dst, v13[0], (unint64_t)v13[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v13;
    v16 = v14;
  }
  v17 = 1;
  LOBYTE(v18) = 0;
  v22 = 0;
  v23 = 1;
  sub_20B0B4C58(0xAu, (__int128 *)__dst, (uint64_t)&v24);
  *(_OWORD *)a3 = v24;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v34)
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v23)
      goto LABEL_26;
LABEL_20:
    if (!v22)
      goto LABEL_23;
    if (v21 < 0)
    {
      operator delete(v20);
      if ((v19 & 0x80000000) == 0)
      {
LABEL_23:
        if (!v17)
          goto LABEL_26;
LABEL_24:
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        goto LABEL_26;
      }
    }
    else if ((v19 & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(v18);
    if (!v17)
      goto LABEL_26;
    goto LABEL_24;
  }
  *(_BYTE *)(a3 + 40) = 0;
  v9 = v27;
  if (v27)
  {
    *(_OWORD *)(a3 + 16) = __p;
    *(_QWORD *)(a3 + 32) = v26;
    v26 = 0;
    __p = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v33)
  {
    v10 = v30;
    *(_QWORD *)(a3 + 64) = v29;
    *(_OWORD *)(a3 + 48) = v28;
    v28 = 0uLL;
    *(_QWORD *)(a3 + 72) = v10;
    *(_OWORD *)(a3 + 80) = v31;
    *(_QWORD *)(a3 + 96) = v32;
    v29 = 0;
    v31 = 0uLL;
    v32 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (v9 && SHIBYTE(v26) < 0)
    operator delete((void *)__p);
  if (v23)
    goto LABEL_20;
LABEL_26:
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  if (v7)
    goto LABEL_29;
}

void sub_20B237848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,int a37,__int16 a38,char a39,char a40)
{
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v43;

  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    v43 = __ldaxr(p_shared_owners);
  while (__stlxr(v43 - 1, p_shared_owners));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B2378F8(std::string::size_type a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13[2];
  uint64_t v14;
  void *__dst[2];
  uint64_t v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 __p;
  uint64_t v26;
  unsigned __int8 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  char v34;
  const char *v35;

  v35 = "sync update";
  v5 = *(std::__shared_weak_count **)(a1 + 248);
  if (v5)
  {
    v7 = std::__shared_weak_count::lock(v5);
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 240);
      if (v8)
      {
        sub_20B238CC0(a3, v8, a1, a2);
LABEL_29:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  sub_20B24214C((uint64_t)v13, (const char *)&v35);
  if (SHIBYTE(v14) < 0)
  {
    sub_20AEC60F4(__dst, v13[0], (unint64_t)v13[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v13;
    v16 = v14;
  }
  v17 = 1;
  LOBYTE(v18) = 0;
  v22 = 0;
  v23 = 1;
  sub_20B0B4C58(0xAu, (__int128 *)__dst, (uint64_t)&v24);
  *(_OWORD *)a3 = v24;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v34)
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v23)
      goto LABEL_26;
LABEL_20:
    if (!v22)
      goto LABEL_23;
    if (v21 < 0)
    {
      operator delete(v20);
      if ((v19 & 0x80000000) == 0)
      {
LABEL_23:
        if (!v17)
          goto LABEL_26;
LABEL_24:
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        goto LABEL_26;
      }
    }
    else if ((v19 & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(v18);
    if (!v17)
      goto LABEL_26;
    goto LABEL_24;
  }
  *(_BYTE *)(a3 + 40) = 0;
  v9 = v27;
  if (v27)
  {
    *(_OWORD *)(a3 + 16) = __p;
    *(_QWORD *)(a3 + 32) = v26;
    v26 = 0;
    __p = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v33)
  {
    v10 = v30;
    *(_QWORD *)(a3 + 64) = v29;
    *(_OWORD *)(a3 + 48) = v28;
    v28 = 0uLL;
    *(_QWORD *)(a3 + 72) = v10;
    *(_OWORD *)(a3 + 80) = v31;
    *(_QWORD *)(a3 + 96) = v32;
    v29 = 0;
    v31 = 0uLL;
    v32 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (v9 && SHIBYTE(v26) < 0)
    operator delete((void *)__p);
  if (v23)
    goto LABEL_20;
LABEL_26:
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  if (v7)
    goto LABEL_29;
}

void sub_20B237B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,int a37,__int16 a38,char a39,char a40)
{
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v43;

  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    v43 = __ldaxr(p_shared_owners);
  while (__stlxr(v43 - 1, p_shared_owners));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B237C08(std::string::size_type a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13[2];
  uint64_t v14;
  void *__dst[2];
  uint64_t v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 __p;
  uint64_t v26;
  unsigned __int8 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  char v34;
  const char *v35;

  v35 = "connection status update";
  v5 = *(std::__shared_weak_count **)(a1 + 248);
  if (v5)
  {
    v7 = std::__shared_weak_count::lock(v5);
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 240);
      if (v8)
      {
        sub_20B239C48(a3, v8, a1, a2);
LABEL_29:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  sub_20B24214C((uint64_t)v13, (const char *)&v35);
  if (SHIBYTE(v14) < 0)
  {
    sub_20AEC60F4(__dst, v13[0], (unint64_t)v13[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v13;
    v16 = v14;
  }
  v17 = 1;
  LOBYTE(v18) = 0;
  v22 = 0;
  v23 = 1;
  sub_20B0B4C58(0xAu, (__int128 *)__dst, (uint64_t)&v24);
  *(_OWORD *)a3 = v24;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v34)
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v23)
      goto LABEL_26;
LABEL_20:
    if (!v22)
      goto LABEL_23;
    if (v21 < 0)
    {
      operator delete(v20);
      if ((v19 & 0x80000000) == 0)
      {
LABEL_23:
        if (!v17)
          goto LABEL_26;
LABEL_24:
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        goto LABEL_26;
      }
    }
    else if ((v19 & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(v18);
    if (!v17)
      goto LABEL_26;
    goto LABEL_24;
  }
  *(_BYTE *)(a3 + 40) = 0;
  v9 = v27;
  if (v27)
  {
    *(_OWORD *)(a3 + 16) = __p;
    *(_QWORD *)(a3 + 32) = v26;
    v26 = 0;
    __p = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v33)
  {
    v10 = v30;
    *(_QWORD *)(a3 + 64) = v29;
    *(_OWORD *)(a3 + 48) = v28;
    v28 = 0uLL;
    *(_QWORD *)(a3 + 72) = v10;
    *(_OWORD *)(a3 + 80) = v31;
    *(_QWORD *)(a3 + 96) = v32;
    v29 = 0;
    v31 = 0uLL;
    v32 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (v9 && SHIBYTE(v26) < 0)
    operator delete((void *)__p);
  if (v23)
    goto LABEL_20;
LABEL_26:
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  if (v7)
    goto LABEL_29;
}

void sub_20B237E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,int a37,__int16 a38,char a39,char a40)
{
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v43;

  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    v43 = __ldaxr(p_shared_owners);
  while (__stlxr(v43 - 1, p_shared_owners));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B237F18(std::string::size_type a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13[2];
  uint64_t v14;
  void *__dst[2];
  uint64_t v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 __p;
  uint64_t v26;
  unsigned __int8 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  char v34;
  const char *v35;

  v35 = "contexts status update";
  v5 = *(std::__shared_weak_count **)(a1 + 248);
  if (v5)
  {
    v7 = std::__shared_weak_count::lock(v5);
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 240);
      if (v8)
      {
        sub_20B23AE08(a3, v8, a1, a2);
LABEL_29:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  sub_20B24214C((uint64_t)v13, (const char *)&v35);
  if (SHIBYTE(v14) < 0)
  {
    sub_20AEC60F4(__dst, v13[0], (unint64_t)v13[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v13;
    v16 = v14;
  }
  v17 = 1;
  LOBYTE(v18) = 0;
  v22 = 0;
  v23 = 1;
  sub_20B0B4C58(0xAu, (__int128 *)__dst, (uint64_t)&v24);
  *(_OWORD *)a3 = v24;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v34)
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v23)
      goto LABEL_26;
LABEL_20:
    if (!v22)
      goto LABEL_23;
    if (v21 < 0)
    {
      operator delete(v20);
      if ((v19 & 0x80000000) == 0)
      {
LABEL_23:
        if (!v17)
          goto LABEL_26;
LABEL_24:
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        goto LABEL_26;
      }
    }
    else if ((v19 & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(v18);
    if (!v17)
      goto LABEL_26;
    goto LABEL_24;
  }
  *(_BYTE *)(a3 + 40) = 0;
  v9 = v27;
  if (v27)
  {
    *(_OWORD *)(a3 + 16) = __p;
    *(_QWORD *)(a3 + 32) = v26;
    v26 = 0;
    __p = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v33)
  {
    v10 = v30;
    *(_QWORD *)(a3 + 64) = v29;
    *(_OWORD *)(a3 + 48) = v28;
    v28 = 0uLL;
    *(_QWORD *)(a3 + 72) = v10;
    *(_OWORD *)(a3 + 80) = v31;
    *(_QWORD *)(a3 + 96) = v32;
    v29 = 0;
    v31 = 0uLL;
    v32 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (v9 && SHIBYTE(v26) < 0)
    operator delete((void *)__p);
  if (v23)
    goto LABEL_20;
LABEL_26:
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  if (v7)
    goto LABEL_29;
}

void sub_20B238178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,int a37,__int16 a38,char a39,char a40)
{
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v43;

  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    v43 = __ldaxr(p_shared_owners);
  while (__stlxr(v43 - 1, p_shared_owners));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B238228(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  std::mutex *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  char *v45;
  _QWORD *v46;
  char v47;
  __int128 v48;
  int v49;
  __int128 __p;
  uint64_t v51;
  char v52;
  __int128 v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  char v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v47 = 1;
  v43 = 0x500000001;
  LODWORD(v44) = 0;
  HIDWORD(v44) = 0;
  *(_QWORD *)((char *)&v44 + 4) = 0x200000001;
  sub_20B212DD4(a2, 1, (__n128 *)&v43, (uint64_t)&v48);
  *(_BYTE *)a3 = v47;
  *(_OWORD *)(a3 + 8) = v48;
  *(_DWORD *)(a3 + 24) = v49;
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 56) = 0;
  if (v52)
  {
    if (SHIBYTE(v51) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a3 + 32), (void *)__p, *((unint64_t *)&__p + 1));
    }
    else
    {
      *(_OWORD *)(a3 + 32) = __p;
      *(_QWORD *)(a3 + 48) = v51;
    }
    *(_BYTE *)(a3 + 56) = 1;
  }
  *(_BYTE *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 208) = 0;
  if (v65)
  {
    sub_20AF3FE60((char *)(a3 + 64), &v53);
    *(_BYTE *)(a3 + 208) = 1;
  }
  *(_OWORD *)(a3 + 216) = v66;
  v6 = a1[65];
  *(_QWORD *)(a3 + 232) = v67;
  *(_QWORD *)(a3 + 240) = v6;
  v7 = a1[66];
  *(_QWORD *)(a3 + 248) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a3 + 256) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a3 + 264) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (char *)operator new(0x90uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_24C414038;
  *(_OWORD *)(v13 + 24) = xmmword_20B5E4C30;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *((_QWORD *)v13 + 11) = 0;
  *((_QWORD *)v13 + 12) = 1018212795;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 120) = 0u;
  *((_QWORD *)v13 + 17) = 0;
  *(_QWORD *)(a3 + 272) = v13 + 24;
  *(_QWORD *)(a3 + 280) = v13;
  v14 = (std::mutex *)a1[70];
  std::mutex::lock(v14);
  v15 = a1[72];
  v16 = a1[73];
  if (v15 < v16)
  {
    sub_20B2418F4(a1[72], a3);
    v17 = v15 + 288;
    a1[72] = v17;
    goto LABEL_37;
  }
  v18 = a1[71];
  v19 = 0x8E38E38E38E38E39 * ((uint64_t)(v15 - v18) >> 5);
  if (v19 + 1 > 0xE38E38E38E38E3)
    sub_20AEC60B8();
  v20 = 0x8E38E38E38E38E39 * ((uint64_t)(v16 - v18) >> 5);
  v21 = 2 * v20;
  if (2 * v20 <= v19 + 1)
    v21 = v19 + 1;
  if (v20 >= 0x71C71C71C71C71)
    v22 = 0xE38E38E38E38E3;
  else
    v22 = v21;
  v46 = a1 + 73;
  if (v22)
  {
    if (v22 > 0xE38E38E38E38E3)
      sub_20AEC60CC();
    v23 = (char *)operator new(288 * v22);
  }
  else
  {
    v23 = 0;
  }
  v43 = (uint64_t)v23;
  *(_QWORD *)&v44 = &v23[288 * v19];
  *((_QWORD *)&v44 + 1) = v44;
  v45 = &v23[288 * v22];
  sub_20B2418F4(v44, a3);
  v24 = v44;
  v17 = *((_QWORD *)&v44 + 1) + 288;
  v25 = (char *)a1[72];
  v26 = (char *)a1[71];
  if (v25 == v26)
  {
    a1[71] = v44;
    a1[72] = v17;
    a1[73] = v45;
    if (v25)
LABEL_36:
      operator delete(v25);
  }
  else
  {
    v27 = 0;
    do
    {
      v31 = v24 + v27;
      v32 = &v25[v27];
      *(_BYTE *)(v24 + v27 - 288) = v25[v27 - 288];
      *(_OWORD *)(v24 + v27 - 280) = *(_OWORD *)&v25[v27 - 280];
      *(_DWORD *)(v24 + v27 - 264) = *(_DWORD *)&v25[v27 - 264];
      *(_BYTE *)(v24 + v27 - 256) = 0;
      *(_BYTE *)(v24 + v27 - 232) = 0;
      if (v25[v27 - 232])
      {
        v33 = *((_OWORD *)v32 - 16);
        *(_QWORD *)(v24 + v27 - 240) = *((_QWORD *)v32 - 30);
        *(_OWORD *)(v24 + v27 - 256) = v33;
        *((_QWORD *)v32 - 31) = 0;
        *((_QWORD *)v32 - 30) = 0;
        *((_QWORD *)v32 - 32) = 0;
        *(_BYTE *)(v31 - 232) = 1;
      }
      *(_BYTE *)(v31 - 224) = 0;
      *(_BYTE *)(v31 - 80) = 0;
      if (*(v32 - 80))
      {
        v34 = &v25[v27];
        v35 = *(_OWORD *)&v25[v27 - 224];
        *(_QWORD *)(v31 - 208) = *(_QWORD *)&v25[v27 - 208];
        *(_OWORD *)(v31 - 224) = v35;
        *((_QWORD *)v34 - 27) = 0;
        *((_QWORD *)v34 - 26) = 0;
        *((_QWORD *)v34 - 28) = 0;
        v36 = v24 + v27;
        v37 = *(_OWORD *)&v25[v27 - 200];
        *(_QWORD *)(v36 - 184) = *(_QWORD *)&v25[v27 - 184];
        *(_OWORD *)(v36 - 200) = v37;
        *((_QWORD *)v34 - 24) = 0;
        *((_QWORD *)v34 - 23) = 0;
        *((_QWORD *)v34 - 25) = 0;
        v38 = *(_OWORD *)&v25[v27 - 176];
        *(_QWORD *)(v36 - 160) = *(_QWORD *)&v25[v27 - 160];
        *(_OWORD *)(v36 - 176) = v38;
        *((_QWORD *)v34 - 21) = 0;
        *((_QWORD *)v34 - 20) = 0;
        *((_QWORD *)v34 - 22) = 0;
        v39 = *(_OWORD *)&v25[v27 - 152];
        *(_QWORD *)(v36 - 136) = *(_QWORD *)&v25[v27 - 136];
        *(_OWORD *)(v36 - 152) = v39;
        *((_QWORD *)v34 - 19) = 0;
        *((_QWORD *)v34 - 18) = 0;
        *((_QWORD *)v34 - 17) = 0;
        v40 = *(_OWORD *)&v25[v27 - 128];
        *(_QWORD *)(v36 - 112) = *(_QWORD *)&v25[v27 - 112];
        *(_OWORD *)(v36 - 128) = v40;
        *((_QWORD *)v34 - 16) = 0;
        *((_QWORD *)v34 - 15) = 0;
        *((_QWORD *)v34 - 14) = 0;
        v41 = *(_OWORD *)&v25[v27 - 104];
        *(_QWORD *)(v36 - 88) = *(_QWORD *)&v25[v27 - 88];
        *(_OWORD *)(v36 - 104) = v41;
        *((_QWORD *)v34 - 13) = 0;
        *((_QWORD *)v34 - 12) = 0;
        *((_QWORD *)v34 - 11) = 0;
        *(_BYTE *)(v31 - 80) = 1;
      }
      v28 = v24 + v27;
      v29 = &v25[v27];
      v30 = *(_OWORD *)&v25[v27 - 72];
      *(_QWORD *)(v28 - 56) = *(_QWORD *)&v25[v27 - 56];
      *(_OWORD *)(v28 - 72) = v30;
      *(_OWORD *)(v28 - 48) = *(_OWORD *)&v25[v27 - 48];
      *((_QWORD *)v29 - 6) = 0;
      *((_QWORD *)v29 - 5) = 0;
      *(_OWORD *)(v28 - 32) = *(_OWORD *)&v25[v27 - 32];
      *((_QWORD *)v29 - 4) = 0;
      *((_QWORD *)v29 - 3) = 0;
      *(_OWORD *)(v28 - 16) = *(_OWORD *)&v25[v27 - 16];
      *((_QWORD *)v29 - 2) = 0;
      *((_QWORD *)v29 - 1) = 0;
      v27 -= 288;
    }
    while (&v25[v27] != v26);
    v25 = (char *)a1[71];
    v42 = a1[72];
    a1[71] = v24 + v27;
    a1[72] = v17;
    a1[73] = v45;
    while ((char *)v42 != v25)
    {
      v42 -= 288;
      sub_20B241854(v42);
    }
    if (v25)
      goto LABEL_36;
  }
LABEL_37:
  a1[72] = v17;
  std::mutex::unlock(v14);
  if (!v65)
    goto LABEL_44;
  if (v64 < 0)
  {
    operator delete(v63);
    if ((v62 & 0x80000000) == 0)
    {
LABEL_40:
      if ((v60 & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_50;
    }
  }
  else if ((v62 & 0x80000000) == 0)
  {
    goto LABEL_40;
  }
  operator delete(v61);
  if ((v60 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v58 & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_51;
  }
LABEL_50:
  operator delete(v59);
  if ((v58 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v56 & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_52;
  }
LABEL_51:
  operator delete(v57);
  if ((v56 & 0x80000000) == 0)
  {
LABEL_43:
    if ((v54 & 0x80000000) == 0)
      goto LABEL_44;
LABEL_53:
    operator delete((void *)v53);
    if (!v52)
      return;
    goto LABEL_45;
  }
LABEL_52:
  operator delete(v55);
  if (v54 < 0)
    goto LABEL_53;
LABEL_44:
  if (!v52)
    return;
LABEL_45:
  if (SHIBYTE(v51) < 0)
    operator delete((void *)__p);
}

void sub_20B2387C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  void **v11;
  va_list va;

  va_start(va, a10);
  if (*(_BYTE *)(v10 + 56))
  {
    if (*(char *)(v10 + 55) < 0)
    {
      operator delete(*v11);
      sub_20B0A0DB8((uint64_t)va);
      _Unwind_Resume(a1);
    }
  }
  sub_20B0A0DB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B238884(uint64_t a1, uint64_t a2, std::string::size_type a3, const void ***a4)
{
  std::mutex *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  uint64_t v19;
  std::string v20;
  char v21;
  unsigned __int8 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  char v29;
  std::string __dst;
  char v31;
  void *v32;
  char v33;
  void *__p;
  char v35;
  char v36;
  char v37;
  __int128 v38;
  __int128 v39;
  char v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  char v46;
  char v47;
  _OWORD *v48[4];
  char v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v8 = *(std::mutex **)(a2 + 616);
  std::mutex::lock(v8);
  v48[0] = (_OWORD *)(a3 + 8);
  v9 = sub_20B242384((uint64_t **)(a2 + 624), (unsigned __int8 *)(a3 + 8), v48);
  v11 = v9[6];
  v10 = (std::__shared_weak_count *)v9[7];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  std::mutex::unlock(v8);
  if (v11)
  {
    std::mutex::lock((std::mutex *)v11);
    sub_20AECAA0C((uint64_t **)(v11 + 80), *a4, (uint64_t)*a4);
    std::mutex::unlock((std::mutex *)v11);
  }
  if (!*(_BYTE *)(a2 + 304))
    goto LABEL_9;
  v20.__r_.__value_.__r.__words[0] = a2 + 272;
  v20.__r_.__value_.__l.__size_ = a3;
  *(_QWORD *)&v38 = &off_24C414088;
  *((_QWORD *)&v38 + 1) = &v20;
  *(_QWORD *)&v39 = a4;
  sub_20B52A3E8((uint64_t)&v38, (uint64_t)v48);
  if (v57)
  {
    *(_BYTE *)a1 = 0;
LABEL_9:
    *(_BYTE *)(a1 + 120) = 1;
    goto LABEL_10;
  }
  sub_20B5287D4((uint64_t)v48, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&__dst, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  else
    __dst = v20;
  v31 = 1;
  LOBYTE(v32) = 0;
  v36 = 0;
  v37 = 1;
  sub_20B0BAE8C((uint64_t)&v38, 2u, (__int128 *)&__dst);
  if (v37)
  {
    if (v36)
    {
      if (v35 < 0)
        operator delete(__p);
      if (v33 < 0)
        operator delete(v32);
    }
    if (v31 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a2 + 464))
      goto LABEL_34;
LABEL_32:
    v16 = *(_QWORD *)(a2 + 456);
    if (!v16)
      sub_20AECABA4();
    (*(void (**)(uint64_t, std::string::size_type, __int128 *))(*(_QWORD *)v16 + 48))(v16, a3, &v38);
    goto LABEL_34;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a2 + 464))
    goto LABEL_32;
LABEL_34:
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v38;
  v17 = sub_20AECEBD0(&v20.__r_.__value_.__s.__data_[16], &v39);
  *(_OWORD *)a1 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v29)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v18 = v22;
    if (v22)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v17;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)v17 + 2);
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = 0;
      *(_QWORD *)v17 = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v28)
    {
      v19 = v25;
      *(_QWORD *)(a1 + 64) = v24;
      *(_OWORD *)(a1 + 48) = v23;
      v23 = 0uLL;
      *(_QWORD *)(a1 + 72) = v19;
      *(_OWORD *)(a1 + 80) = v26;
      *(_QWORD *)(a1 + 96) = v27;
      v24 = 0;
      v26 = 0uLL;
      v27 = 0;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 120) = 0;
    if (v18 && v21 < 0)
      operator delete((void *)v20.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
  }
  if (v47)
  {
    if (v46)
    {
      if (v45 < 0)
        operator delete(v44);
      if (v43 < 0)
        operator delete(v42);
    }
    if (v41 && v40 < 0)
      operator delete((void *)v39);
  }
  if (!v57 && v56)
  {
    if (v55)
    {
      if (v54 < 0)
        operator delete(v53);
      if (v52 < 0)
        operator delete(v51);
    }
    if (v50 && v49 < 0)
      operator delete(v48[2]);
  }
LABEL_10:
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20B238C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  if (a16 < 0)
    operator delete(__p);
  sub_20AECD704(v43 - 192);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B238C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B238C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B238C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B238CAC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B238CC0(uint64_t a1, uint64_t a2, std::string::size_type a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  std::string v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  char v23;
  char v24;
  std::string __dst;
  char v26;
  void *v27;
  char v28;
  void *__p;
  char v30;
  char v31;
  char v32;
  std::string v33;
  char v34;
  unsigned __int8 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  char v42;
  std::string v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  char v49;
  char v50;
  _BYTE v51[24];
  uint64_t v52;
  char v53;
  unsigned __int8 v54;
  void *v55[2];
  uint64_t v56;
  uint64_t v57;
  void *v58[2];
  uint64_t v59;
  char v60;
  char v61;
  __int128 v62;
  __int128 v63;
  char v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;

  if (!*(_BYTE *)(a4 + 48))
  {
    LODWORD(v52) = -1;
    *(_QWORD *)v51 = operator new(0x68uLL);
    *(_OWORD *)&v51[8] = xmmword_20B5ED090;
    strcpy(*(char **)v51, "Received outdated Sync from client. Update the client to protocol 1.3.0 to sync with the server.");
    LODWORD(v52) = 1;
    sub_20B09AB08((uint64_t)&v43, (uint64_t)v51, (unsigned __int8 *)(a3 + 8));
    if ((_DWORD)v52 == -1)
      sub_20AECFAB8();
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
    ((void (*)(std::string *__return_ptr, std::string *, _BYTE *))off_24C413FE0[v52])(&v33, &v43, v51);
    if ((_DWORD)v52 != -1)
      ((void (*)(std::string *, _BYTE *))off_24C413F98[v52])(&v43, v51);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      sub_20AEC60F4(&__dst, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
    else
      __dst = v33;
    v26 = 1;
    LOBYTE(v27) = 0;
    v31 = 0;
    v32 = 1;
    sub_20B0BAE8C((uint64_t)&v62, 0xEu, (__int128 *)&__dst);
    if (v32)
    {
      if (v31)
      {
        if (v30 < 0)
          operator delete(__p);
        if (v28 < 0)
          operator delete(v27);
      }
      if (v26 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v33.__r_.__value_.__l.__data_);
      if (!*(_BYTE *)(a2 + 464))
      {
LABEL_37:
        *(_OWORD *)v51 = v62;
        v9 = sub_20AECEBD0(&v51[16], &v63);
        goto LABEL_55;
      }
    }
    else if (!*(_BYTE *)(a2 + 464))
    {
      goto LABEL_37;
    }
    v8 = *(_QWORD *)(a2 + 456);
    if (!v8)
      sub_20AECABA4();
    (*(void (**)(uint64_t, std::string::size_type, __int128 *))(*(_QWORD *)v8 + 48))(v8, a3, &v62);
    goto LABEL_37;
  }
  if (*(_DWORD *)(a4 + 40) != 1)
  {
    LODWORD(v52) = 0;
    sub_20AF86A14(v51, "Received invalid Sync update from client ");
    sub_20B09AB08((uint64_t)&v43, (uint64_t)v51, (unsigned __int8 *)(a3 + 8));
    if ((_DWORD)v52 == -1)
      sub_20AECFAB8();
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
    ((void (*)(std::string *__return_ptr, std::string *, _BYTE *))off_24C413FE0[v52])(&v33, &v43, v51);
    if ((_DWORD)v52 != -1)
      ((void (*)(std::string *, _BYTE *))off_24C413F98[v52])(&v43, v51);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      sub_20AEC60F4(&v17, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
    else
      v17 = v33;
    v18 = 1;
    LOBYTE(v19) = 0;
    v23 = 0;
    v24 = 1;
    sub_20B0BAE8C((uint64_t)&v62, 2u, (__int128 *)&v17);
    if (v24)
    {
      if (v23)
      {
        if (v22 < 0)
          operator delete(v21);
        if (v20 < 0)
          operator delete(v19);
      }
      if (v18 && SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v33.__r_.__value_.__l.__data_);
      if (!*(_BYTE *)(a2 + 464))
      {
LABEL_54:
        *(_OWORD *)v51 = v62;
        v9 = sub_20AECEBD0(&v51[16], &v63);
LABEL_55:
        *(_OWORD *)a1 = *(_OWORD *)v51;
        *(_BYTE *)(a1 + 16) = 0;
        *(_BYTE *)(a1 + 112) = 0;
        if (v61)
        {
          *(_BYTE *)(a1 + 40) = 0;
          v11 = v54;
          if (v54)
          {
            *(_OWORD *)(a1 + 16) = *(_OWORD *)v9;
            *(_QWORD *)(a1 + 32) = *((_QWORD *)v9 + 2);
            *((_QWORD *)v9 + 1) = 0;
            *((_QWORD *)v9 + 2) = 0;
            *(_QWORD *)v9 = 0;
            *(_BYTE *)(a1 + 40) = 1;
          }
          *(_BYTE *)(a1 + 48) = 0;
          *(_BYTE *)(a1 + 104) = 0;
          if (v60)
          {
            v12 = v57;
            *(_QWORD *)(a1 + 64) = v56;
            *(_OWORD *)(a1 + 48) = *(_OWORD *)v55;
            v55[0] = 0;
            v55[1] = 0;
            *(_QWORD *)(a1 + 72) = v12;
            *(_OWORD *)(a1 + 80) = *(_OWORD *)v58;
            *(_QWORD *)(a1 + 96) = v59;
            v56 = 0;
            v58[0] = 0;
            v58[1] = 0;
            v59 = 0;
            *(_BYTE *)(a1 + 104) = 1;
          }
          *(_BYTE *)(a1 + 112) = 1;
          *(_BYTE *)(a1 + 120) = 0;
          if (v11 && v53 < 0)
            operator delete(*(void **)&v51[16]);
        }
        else
        {
          *(_BYTE *)(a1 + 120) = 0;
        }
        goto LABEL_64;
      }
    }
    else if (!*(_BYTE *)(a2 + 464))
    {
      goto LABEL_54;
    }
    v10 = *(_QWORD *)(a2 + 456);
    if (!v10)
      sub_20AECABA4();
    (*(void (**)(uint64_t, std::string::size_type, __int128 *))(*(_QWORD *)v10 + 48))(v10, a3, &v62);
    goto LABEL_54;
  }
  if (*(_BYTE *)(a2 + 608))
    (*(void (**)(_QWORD, std::string::size_type, uint64_t))(**(_QWORD **)(a2 + 600) + 40))(*(_QWORD *)(a2 + 600), a3 + 8, a4);
  if (!*(_BYTE *)(a2 + 344))
    goto LABEL_10;
  if (*(_DWORD *)(a4 + 40) != 1)
    sub_20AECFAB8();
  if (!*(_BYTE *)a4)
    goto LABEL_10;
  v33.__r_.__value_.__r.__words[0] = a2 + 312;
  v33.__r_.__value_.__l.__size_ = a3;
  *(_QWORD *)v51 = &off_24C4140C8;
  *(_QWORD *)&v51[8] = &v33;
  *(_QWORD *)&v51[16] = a2;
  v52 = a4;
  sub_20B52A3E8((uint64_t)v51, (uint64_t)&v62);
  if (v72)
  {
    *(_BYTE *)a1 = 0;
LABEL_10:
    *(_BYTE *)(a1 + 120) = 1;
    return;
  }
  sub_20B5287D4((uint64_t)&v62, &v33);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&v43, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  else
    v43 = v33;
  v44 = 1;
  LOBYTE(v45) = 0;
  v49 = 0;
  v50 = 1;
  sub_20B0BAE8C((uint64_t)v51, 2u, (__int128 *)&v43);
  if (v50)
  {
    if (v49)
    {
      if (v48 < 0)
        operator delete(v47);
      if (v46 < 0)
        operator delete(v45);
    }
    if (v44 && SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a2 + 464))
  {
    v13 = *(_QWORD *)(a2 + 456);
    if (!v13)
      sub_20AECABA4();
    (*(void (**)(uint64_t, std::string::size_type, _BYTE *))(*(_QWORD *)v13 + 48))(v13, a3, v51);
  }
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)v51;
  v14 = sub_20AECEBD0(&v33.__r_.__value_.__s.__data_[16], (__int128 *)&v51[16]);
  *(_OWORD *)a1 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v42)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v15 = v35;
    if (v35)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v14;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)v14 + 2);
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *(_QWORD *)v14 = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v41)
    {
      v16 = v38;
      *(_QWORD *)(a1 + 64) = v37;
      *(_OWORD *)(a1 + 48) = v36;
      v36 = 0uLL;
      *(_QWORD *)(a1 + 72) = v16;
      *(_OWORD *)(a1 + 80) = v39;
      *(_QWORD *)(a1 + 96) = v40;
      v37 = 0;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 120) = 0;
    if (v15 && v34 < 0)
      operator delete((void *)v33.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
  }
  if (v61)
  {
    if (v60)
    {
      if (SHIBYTE(v59) < 0)
        operator delete(v58[0]);
      if (SHIBYTE(v56) < 0)
        operator delete(v55[0]);
    }
    if (v54 && v53 < 0)
      operator delete(*(void **)&v51[16]);
  }
  if (!v72)
  {
LABEL_64:
    if (!v71)
      return;
    if (v70)
    {
      if ((v69 & 0x80000000) == 0)
      {
        if ((v67 & 0x80000000) == 0)
          goto LABEL_68;
LABEL_72:
        operator delete(v66);
        if (!v65)
          return;
        goto LABEL_69;
      }
      operator delete(v68);
      if (v67 < 0)
        goto LABEL_72;
    }
LABEL_68:
    if (!v65)
      return;
LABEL_69:
    if (v64 < 0)
      operator delete((void *)v63);
  }
}

void sub_20B239420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a42 < 0)
    operator delete(__p);
  sub_20AECD704(v42 - 184);
  _Unwind_Resume(a1);
}

void sub_20B239470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B239508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20AECFA60((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20B23951C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20AECFA60((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20B239530(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AECCE40(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_20B239544(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AECCE40(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_20B239558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20AECFA60((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20B23956C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20AECFA60((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20B239580(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _BYTE *v23;
  int v24;
  unsigned __int8 v25;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *exception;
  _QWORD *v31;
  __int128 v32;
  void *v33;
  char v34;
  unsigned __int8 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  char v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  void *v47[2];
  uint64_t v48;
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  int v55;
  __int128 v56;
  __int128 v57;
  char v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  char v64;
  char v65;
  char v66;

  v55 = 3;
  LOBYTE(v56) = 0;
  v66 = 0;
  v8 = *(std::mutex **)(a1 + 560);
  std::mutex::lock(v8);
  v9 = *(_QWORD *)(a1 + 568);
  v10 = *(_QWORD *)(a1 + 576);
  if (v9 == v10)
  {
    v11 = 0;
LABEL_33:
    std::mutex::unlock(v8);
    if (*(_BYTE *)(a1 + 552))
      goto LABEL_34;
LABEL_36:
    if (v66)
    {
      v43 = v56;
      v23 = sub_20AECEBD0(&v44, &v57);
      *(_OWORD *)a4 = v43;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v53)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v24 = v46;
        if (!v46)
          goto LABEL_58;
        *(_OWORD *)(a4 + 16) = *(_OWORD *)v23;
        *(_QWORD *)(a4 + 32) = *((_QWORD *)v23 + 2);
        *((_QWORD *)v23 + 1) = 0;
        *((_QWORD *)v23 + 2) = 0;
        *(_QWORD *)v23 = 0;
        goto LABEL_57;
      }
    }
    else
    {
      if ((*(_BYTE *)(a1 + 552) != 0) | v11 & 1)
      {
        *(_BYTE *)(a4 + 120) = 1;
        goto LABEL_64;
      }
      sub_20B1E3530((unsigned __int8 *)a3, 0xDu, (uint64_t)"client not found", (uint64_t)&v43);
      *(_OWORD *)a4 = v43;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v53)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v24 = v46;
        if (!v46)
          goto LABEL_58;
        *(_OWORD *)(a4 + 16) = v44;
        *(_QWORD *)(a4 + 32) = v45;
        v45 = 0;
        v44 = 0uLL;
LABEL_57:
        *(_BYTE *)(a4 + 40) = 1;
LABEL_58:
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v52)
        {
          v29 = v49;
          *(_QWORD *)(a4 + 64) = v48;
          *(_OWORD *)(a4 + 48) = *(_OWORD *)v47;
          v47[0] = 0;
          v47[1] = 0;
          *(_QWORD *)(a4 + 72) = v29;
          *(_OWORD *)(a4 + 80) = *(_OWORD *)__p;
          *(_QWORD *)(a4 + 96) = v51;
          v48 = 0;
          __p[0] = 0;
          __p[1] = 0;
          v51 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (!v24)
          goto LABEL_64;
LABEL_61:
        if (SHIBYTE(v45) < 0)
          operator delete((void *)v44);
        goto LABEL_64;
      }
    }
    *(_BYTE *)(a4 + 120) = 0;
    goto LABEL_64;
  }
  v11 = 0;
  while (1)
  {
    v13 = *(std::__shared_weak_count **)(v9 + 264);
    if (!v13)
      goto LABEL_5;
    v14 = std::__shared_weak_count::lock(v13);
    if (!v14)
      goto LABEL_5;
    v15 = v14;
    v16 = *(_QWORD *)(v9 + 256);
    if (v16)
    {
      v17 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
      if (*v17 == *(_QWORD *)a3 && v17[1] == *(_QWORD *)(a3 + 8))
        break;
    }
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      v12 = 1;
LABEL_4:
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if ((v12 & 1) == 0)
        goto LABEL_33;
    }
LABEL_5:
    v9 += 288;
    if (v9 == v10)
      goto LABEL_33;
  }
  sub_20B0B6AF4(v16, a2, (uint64_t)&v43);
  if (!v54)
  {
    sub_20B0B5C00((uint64_t)&v55, (uint64_t)&v43);
    if (!v54)
    {
      if (v53)
      {
        if (v52)
        {
          if (SHIBYTE(v51) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v48) < 0)
            operator delete(v47[0]);
        }
        if (v46 && SHIBYTE(v45) < 0)
          operator delete((void *)v44);
      }
    }
  }
  v21 = (unint64_t *)&v15->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    v12 = 0;
    v11 = 1;
    goto LABEL_4;
  }
  v11 = 1;
  std::mutex::unlock(v8);
  if (!*(_BYTE *)(a1 + 552))
    goto LABEL_36;
LABEL_34:
  if ((v11 & 1) != 0)
    goto LABEL_36;
  sub_20B21EE50(*(_QWORD *)(a1 + 544), a2, a3, (uint64_t)&v43);
  if (v54)
    goto LABEL_36;
  v25 = atomic_load((unsigned __int8 *)&qword_25463CF58);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF58))
  {
    __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253EC3198, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CF58);
  }
  if (*((void (****)(std::error_category *__hidden))&v43 + 1) != &off_253EC3198 || (_DWORD)v43 != 13)
  {
    if (v54)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24C3F6160;
      __cxa_throw(exception, (struct type_info *)&unk_24C3F22A8, (void (*)(void *))std::exception::~exception);
    }
    sub_20B0B5C00((uint64_t)&v55, (uint64_t)&v43);
    if (!v54 && v53)
    {
      if (v52)
      {
        if (SHIBYTE(v51) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v48) < 0)
          operator delete(v47[0]);
      }
      if (v46 && SHIBYTE(v45) < 0)
        operator delete((void *)v44);
    }
    goto LABEL_36;
  }
  if (v54)
  {
    v31 = __cxa_allocate_exception(8uLL);
    *v31 = &off_24C3F6160;
    __cxa_throw(v31, (struct type_info *)&unk_24C3F22A8, (void (*)(void *))std::exception::~exception);
  }
  v32 = v43;
  v26 = sub_20AECEBD0(&v33, &v44);
  *(_OWORD *)a4 = v32;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v42)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v27 = v35;
    if (v35)
    {
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v26;
      *(_QWORD *)(a4 + 32) = *((_QWORD *)v26 + 2);
      *((_QWORD *)v26 + 1) = 0;
      *((_QWORD *)v26 + 2) = 0;
      *(_QWORD *)v26 = 0;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v41)
    {
      v28 = v38;
      *(_QWORD *)(a4 + 64) = v37;
      *(_OWORD *)(a4 + 48) = v36;
      v36 = 0uLL;
      *(_QWORD *)(a4 + 72) = v28;
      *(_OWORD *)(a4 + 80) = v39;
      *(_QWORD *)(a4 + 96) = v40;
      v37 = 0;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v27 && v34 < 0)
      operator delete(v33);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v54 && v53)
  {
    if (v52)
    {
      if (SHIBYTE(v51) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v48) < 0)
        operator delete(v47[0]);
    }
    if (v46)
      goto LABEL_61;
  }
LABEL_64:
  if (!v66 || !v65)
    return;
  if (!v64)
    goto LABEL_69;
  if ((v63 & 0x80000000) == 0)
  {
    if ((v61 & 0x80000000) == 0)
      goto LABEL_69;
LABEL_85:
    operator delete(v60);
    if (!v59)
      return;
LABEL_70:
    if (v58 < 0)
      operator delete((void *)v57);
    return;
  }
  operator delete(v62);
  if (v61 < 0)
    goto LABEL_85;
LABEL_69:
  if (v59)
    goto LABEL_70;
}

void sub_20B239BA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B0B60AC(v1 - 224);
  _Unwind_Resume(a1);
}

void sub_20B239BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_20AECD704((uint64_t)va);
  sub_20B0B60AC(v17 - 224);
  _Unwind_Resume(a1);
}

void sub_20B239BD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B0B60AC(v1 - 224);
  _Unwind_Resume(a1);
}

void sub_20B239BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  std::mutex *v25;
  uint64_t v26;

  sub_20AECD704((uint64_t)&a25);
  sub_20AEC147C((uint64_t)&a9);
  std::mutex::unlock(v25);
  sub_20B0B60AC(v26 - 224);
  _Unwind_Resume(a1);
}

void sub_20B239C48(uint64_t a1, uint64_t a2, std::string::size_type a3, int a4)
{
  std::mutex *v7;
  char *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::mutex *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::mutex *v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD *v38;
  _QWORD *v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  std::string::size_type v43;
  __int128 v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  std::string *v50;
  unint64_t v51;
  void *v52;
  int v53;
  char *v54;
  char *v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::mutex *v60;
  uint64_t *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  int v70;
  uint64_t v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  int v78;
  uint64_t v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;
  void *v83[2];
  void *v84[2];
  char v85;
  char v86;
  void *v87;
  char v88;
  void *v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  std::string v95;
  _DWORD v96[2];
  std::string __dst;
  char v98;
  void *v99;
  char v100;
  void *v101;
  char v102;
  char v103;
  char v104;
  void *v105;
  char *v106;
  __int128 v107;
  _BYTE v108[32];
  std::string v109;
  char v110;
  unsigned __int8 v111;
  void *v112[2];
  uint64_t v113;
  uint64_t v114;
  void *v115[2];
  uint64_t v116;
  char v117;
  char v118;
  void *__p[2];
  void *v120;
  char v121;
  char v122;
  unsigned __int8 v123;
  void *v124[2];
  uint64_t v125;
  uint64_t v126;
  void *v127[2];
  uint64_t v128;
  char v129;
  char v130;
  unsigned __int8 v131;
  char v132;
  char v133;
  char v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  v94 = a4;
  if (a4 != 1)
  {
    if (*(_BYTE *)(a2 + 608))
      (*(void (**)(_QWORD, std::string::size_type))(**(_QWORD **)(a2 + 600) + 64))(*(_QWORD *)(a2 + 600), a3 + 8);
    v17 = *(std::mutex **)(a2 + 560);
    std::mutex::lock(v17);
    *(_OWORD *)__p = *(_OWORD *)(a3 + 8);
    v18 = *(_QWORD *)(a2 + 568);
    v19 = *(_QWORD *)(a2 + 576);
    if (v18 != v19)
    {
      while (1)
      {
        v20 = *(void **)(v18 + 8) == __p[0] && *(void **)(v18 + 16) == __p[1];
        if (v20)
          break;
        v18 += 288;
        if (v18 == v19)
          goto LABEL_47;
      }
    }
    if (v18 != v19)
    {
      v21 = v18 + 288;
      if (v18 + 288 != v19)
      {
        do
        {
          *(_BYTE *)v18 = *(_BYTE *)v21;
          sub_20B0BA9E4(v18 + 8, v21 + 8);
          v22 = *(_OWORD *)(v21 + 240);
          *(_QWORD *)(v21 + 240) = 0;
          *(_QWORD *)(v21 + 248) = 0;
          v23 = *(std::__shared_weak_count **)(v18 + 248);
          *(_OWORD *)(v18 + 240) = v22;
          if (v23)
            std::__shared_weak_count::__release_weak(v23);
          v24 = *(_OWORD *)(v21 + 256);
          *(_QWORD *)(v21 + 256) = 0;
          *(_QWORD *)(v21 + 264) = 0;
          v25 = *(std::__shared_weak_count **)(v18 + 264);
          *(_OWORD *)(v18 + 256) = v24;
          if (v25)
            std::__shared_weak_count::__release_weak(v25);
          v26 = *(_OWORD *)(v21 + 272);
          *(_QWORD *)(v21 + 272) = 0;
          *(_QWORD *)(v21 + 280) = 0;
          v27 = *(std::__shared_weak_count **)(v18 + 280);
          *(_OWORD *)(v18 + 272) = v26;
          if (v27)
          {
            p_shared_owners = (unint64_t *)&v27->__shared_owners_;
            do
              v29 = __ldaxr(p_shared_owners);
            while (__stlxr(v29 - 1, p_shared_owners));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          v21 += 288;
          v18 += 288;
        }
        while (v21 != v19);
        v19 = *(_QWORD *)(a2 + 576);
      }
      while (v19 != v18)
      {
        v19 -= 288;
        sub_20B241854(v19);
      }
      *(_QWORD *)(a2 + 576) = v18;
    }
LABEL_47:
    v30 = *(std::mutex **)(a2 + 616);
    std::mutex::lock(v30);
    v31 = *(uint64_t **)(a2 + 632);
    if (v31)
    {
      v32 = LOBYTE(__p[0]);
      v33 = a2 + 632;
      v34 = *(_QWORD *)(a2 + 632);
      do
      {
        v35 = *(unsigned __int8 *)(v34 + 32);
        v36 = LOBYTE(__p[0]);
        if (v35 != LOBYTE(__p[0]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 33);
        v36 = BYTE1(__p[0]);
        if (v35 != BYTE1(__p[0]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 34);
        v36 = BYTE2(__p[0]);
        if (v35 != BYTE2(__p[0]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 35);
        v36 = BYTE3(__p[0]);
        if (v35 != BYTE3(__p[0]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 36);
        v36 = BYTE4(__p[0]);
        if (v35 != BYTE4(__p[0]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 37);
        v36 = BYTE5(__p[0]);
        if (v35 != BYTE5(__p[0]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 38);
        v36 = BYTE6(__p[0]);
        if (v35 != BYTE6(__p[0]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 39);
        v36 = HIBYTE(__p[0]);
        if (v35 != HIBYTE(__p[0]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 40);
        v36 = LOBYTE(__p[1]);
        if (v35 != LOBYTE(__p[1]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 41);
        v36 = BYTE1(__p[1]);
        if (v35 != BYTE1(__p[1]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 42);
        v36 = BYTE2(__p[1]);
        if (v35 != BYTE2(__p[1]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 43);
        v36 = BYTE3(__p[1]);
        if (v35 != BYTE3(__p[1]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 44);
        v36 = BYTE4(__p[1]);
        if (v35 != BYTE4(__p[1]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 45);
        v36 = BYTE5(__p[1]);
        if (v35 == BYTE5(__p[1])
          && (v35 = *(unsigned __int8 *)(v34 + 46), v36 = BYTE6(__p[1]), v35 == BYTE6(__p[1]))
          && (v35 = *(unsigned __int8 *)(v34 + 47), v36 = HIBYTE(__p[1]), v35 == HIBYTE(__p[1])))
        {
          v33 = v34;
        }
        else
        {
LABEL_66:
          if (v35 < v36)
            v34 += 8;
          else
            v33 = v34;
        }
        v34 = *(_QWORD *)v34;
      }
      while (v34);
      if (v33 != a2 + 632)
      {
        v37 = *(unsigned __int8 *)(v33 + 32);
        if (LOBYTE(__p[0]) == v37)
        {
          v37 = *(unsigned __int8 *)(v33 + 33);
          v32 = BYTE1(__p[0]);
          if (BYTE1(__p[0]) == v37)
          {
            v37 = *(unsigned __int8 *)(v33 + 34);
            v32 = BYTE2(__p[0]);
            if (BYTE2(__p[0]) == v37)
            {
              v37 = *(unsigned __int8 *)(v33 + 35);
              v32 = BYTE3(__p[0]);
              if (BYTE3(__p[0]) == v37)
              {
                v37 = *(unsigned __int8 *)(v33 + 36);
                v32 = BYTE4(__p[0]);
                if (BYTE4(__p[0]) == v37)
                {
                  v37 = *(unsigned __int8 *)(v33 + 37);
                  v32 = BYTE5(__p[0]);
                  if (BYTE5(__p[0]) == v37)
                  {
                    v37 = *(unsigned __int8 *)(v33 + 38);
                    v32 = BYTE6(__p[0]);
                    if (BYTE6(__p[0]) == v37)
                    {
                      v37 = *(unsigned __int8 *)(v33 + 39);
                      v32 = HIBYTE(__p[0]);
                      if (HIBYTE(__p[0]) == v37)
                      {
                        v37 = *(unsigned __int8 *)(v33 + 40);
                        v32 = LOBYTE(__p[1]);
                        if (LOBYTE(__p[1]) == v37)
                        {
                          v37 = *(unsigned __int8 *)(v33 + 41);
                          v32 = BYTE1(__p[1]);
                          if (BYTE1(__p[1]) == v37)
                          {
                            v37 = *(unsigned __int8 *)(v33 + 42);
                            v32 = BYTE2(__p[1]);
                            if (BYTE2(__p[1]) == v37)
                            {
                              v37 = *(unsigned __int8 *)(v33 + 43);
                              v32 = BYTE3(__p[1]);
                              if (BYTE3(__p[1]) == v37)
                              {
                                v37 = *(unsigned __int8 *)(v33 + 44);
                                v32 = BYTE4(__p[1]);
                                if (BYTE4(__p[1]) == v37)
                                {
                                  v37 = *(unsigned __int8 *)(v33 + 45);
                                  v32 = BYTE5(__p[1]);
                                  if (BYTE5(__p[1]) == v37)
                                  {
                                    v37 = *(unsigned __int8 *)(v33 + 46);
                                    v32 = BYTE6(__p[1]);
                                    if (BYTE6(__p[1]) == v37)
                                    {
                                      v37 = *(unsigned __int8 *)(v33 + 47);
                                      v32 = HIBYTE(__p[1]);
                                      if (HIBYTE(__p[1]) == v37)
                                        goto LABEL_88;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v32 >= v37)
        {
LABEL_88:
          v38 = *(_QWORD **)(v33 + 8);
          if (v38)
          {
            do
            {
              v39 = v38;
              v38 = (_QWORD *)*v38;
            }
            while (v38);
          }
          else
          {
            v72 = (_QWORD *)v33;
            do
            {
              v39 = (_QWORD *)v72[2];
              v20 = *v39 == (_QWORD)v72;
              v72 = v39;
            }
            while (!v20);
          }
          if (*(_QWORD *)(a2 + 624) == v33)
            *(_QWORD *)(a2 + 624) = v39;
          --*(_QWORD *)(a2 + 640);
          sub_20AEC867C(v31, (uint64_t *)v33);
          v73 = *(std::__shared_weak_count **)(v33 + 56);
          if (v73)
          {
            v74 = (unint64_t *)&v73->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          operator delete((void *)v33);
        }
      }
    }
    std::mutex::unlock(v30);
    std::mutex::unlock(v17);
LABEL_183:
    if (!*(_BYTE *)(a2 + 384))
    {
LABEL_186:
      *(_BYTE *)(a1 + 120) = 1;
      return;
    }
    v109.__r_.__value_.__r.__words[0] = a2 + 352;
    v109.__r_.__value_.__l.__size_ = a3;
    v83[0] = &off_24C414158;
    v83[1] = &v109;
    v84[0] = &v94;
    sub_20B52A3E8((uint64_t)v83, (uint64_t)__p);
    if (v131)
    {
      *(_BYTE *)a1 = 0;
      goto LABEL_186;
    }
    sub_20B5287D4((uint64_t)__p, &v109);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
      sub_20AEC60F4(&__dst, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
    else
      __dst = v109;
    v98 = 1;
    LOBYTE(v99) = 0;
    v103 = 0;
    v104 = 1;
    sub_20B0BAE8C((uint64_t)v83, 2u, (__int128 *)&__dst);
    if (v104)
    {
      if (v103)
      {
        if (v102 < 0)
          operator delete(v101);
        if (v100 < 0)
          operator delete(v99);
      }
      if (v98 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v109.__r_.__value_.__l.__data_);
      if (!*(_BYTE *)(a2 + 464))
        goto LABEL_206;
    }
    else if (!*(_BYTE *)(a2 + 464))
    {
      goto LABEL_206;
    }
    v76 = *(_QWORD *)(a2 + 456);
    if (!v76)
      sub_20AECABA4();
    (*(void (**)(uint64_t, std::string::size_type, void **))(*(_QWORD *)v76 + 48))(v76, a3, v83);
LABEL_206:
    *(_OWORD *)&v109.__r_.__value_.__l.__data_ = *(_OWORD *)v83;
    v77 = sub_20AECEBD0(&v109.__r_.__value_.__s.__data_[16], (__int128 *)v84);
    *(_OWORD *)a1 = *(_OWORD *)&v109.__r_.__value_.__l.__data_;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    if (v118)
    {
      *(_BYTE *)(a1 + 40) = 0;
      v78 = v111;
      if (v111)
      {
        *(_OWORD *)(a1 + 16) = *(_OWORD *)v77;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)v77 + 2);
        *((_QWORD *)v77 + 1) = 0;
        *((_QWORD *)v77 + 2) = 0;
        *(_QWORD *)v77 = 0;
        *(_BYTE *)(a1 + 40) = 1;
      }
      *(_BYTE *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 104) = 0;
      if (v117)
      {
        v79 = v114;
        *(_QWORD *)(a1 + 64) = v113;
        *(_OWORD *)(a1 + 48) = *(_OWORD *)v112;
        v112[0] = 0;
        v112[1] = 0;
        *(_QWORD *)(a1 + 72) = v79;
        *(_OWORD *)(a1 + 80) = *(_OWORD *)v115;
        *(_QWORD *)(a1 + 96) = v116;
        v113 = 0;
        v115[0] = 0;
        v115[1] = 0;
        v116 = 0;
        *(_BYTE *)(a1 + 104) = 1;
      }
      *(_BYTE *)(a1 + 112) = 1;
      *(_BYTE *)(a1 + 120) = 0;
      if (v78 && v110 < 0)
        operator delete((void *)v109.__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_BYTE *)(a1 + 120) = 0;
    }
    if (v92)
    {
      if (v91)
      {
        if (v90 < 0)
          operator delete(v89);
        if (v88 < 0)
          operator delete(v87);
      }
      if (v86 && v85 < 0)
        operator delete(v84[0]);
    }
    if (!v131 && v130)
    {
      if (v129)
      {
        if (SHIBYTE(v128) < 0)
          operator delete(v127[0]);
        if (SHIBYTE(v125) < 0)
          operator delete(v124[0]);
      }
      if (v123 && v122 < 0)
      {
        v80 = v120;
LABEL_245:
        operator delete(v80);
        return;
      }
    }
    return;
  }
  if (*(_BYTE *)(a2 + 608))
    (*(void (**)(_QWORD, std::string::size_type))(**(_QWORD **)(a2 + 600) + 56))(*(_QWORD *)(a2 + 600), a3 + 8);
  v7 = *(std::mutex **)(a2 + 616);
  std::mutex::lock(v7);
  v8 = (char *)operator new(0x80uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C414108;
  *(_OWORD *)(v8 + 104) = 0u;
  *((_QWORD *)v8 + 15) = 0;
  *(_OWORD *)(v8 + 88) = 0u;
  *((_QWORD *)v8 + 3) = 850045863;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_QWORD *)v8 + 10) = 0;
  v83[1] = 0;
  v84[0] = 0;
  v83[0] = 0;
  LOBYTE(__p[0]) = 0;
  v121 = 0;
  sub_20B21AE74((_QWORD *)v8 + 11, 1, (uint64_t)v83, (uint64_t *)__p);
  if (v121 && SHIBYTE(v120) < 0)
    operator delete(__p[0]);
  if (v83[0])
  {
    v83[1] = v83[0];
    operator delete(v83[0]);
  }
  *((_QWORD *)v8 + 15) = 0;
  *((_QWORD *)v8 + 14) = 0;
  *((_QWORD *)v8 + 13) = v8 + 112;
  v109.__r_.__value_.__r.__words[0] = (std::string::size_type)(v8 + 24);
  v109.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
  __p[0] = (void *)(a3 + 8);
  v9 = sub_20B242384((uint64_t **)(a2 + 624), (unsigned __int8 *)(a3 + 8), (_OWORD **)__p);
  *(_OWORD *)&v109.__r_.__value_.__l.__data_ = 0uLL;
  v10 = (std::__shared_weak_count *)v9[7];
  v9[6] = (uint64_t)(v8 + 24);
  v9[7] = (uint64_t)v8;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  size = (std::__shared_weak_count *)v109.__r_.__value_.__l.__size_;
  if (!v109.__r_.__value_.__l.__size_)
    goto LABEL_18;
  v14 = (unint64_t *)(v109.__r_.__value_.__l.__size_ + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_18:
    std::mutex::unlock(v7);
    v16 = *(_QWORD *)(a3 + 216);
    if ((_DWORD)v16 == 1)
      goto LABEL_19;
LABEL_92:
    if (!(_DWORD)v16)
      goto LABEL_183;
    goto LABEL_93;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  std::mutex::unlock(v7);
  v16 = *(_QWORD *)(a3 + 216);
  if ((_DWORD)v16 != 1)
    goto LABEL_92;
LABEL_19:
  if (HIDWORD(v16) <= 2)
    goto LABEL_183;
LABEL_93:
  v40 = *(_OWORD *)(a2 + 488);
  v107 = *(_OWORD *)(a2 + 472);
  *(_OWORD *)v108 = v40;
  *(_OWORD *)&v108[9] = *(_OWORD *)(a2 + 497);
  v41 = mach_continuous_time();
  v42 = atomic_load((unsigned __int8 *)&qword_25463D170);
  if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_25463D170))
  {
    mach_timebase_info((mach_timebase_info_t)&v95);
    LODWORD(v82) = HIDWORD(v95.__r_.__value_.__r.__words[0]);
    LODWORD(v81) = v95.__r_.__value_.__l.__data_;
    *(double *)&qword_25463D168 = (double)v81 / (double)v82;
    __cxa_guard_release(&qword_25463D170);
  }
  __p[0] = (void *)llround(*(double *)&qword_25463D168 * (double)v41);
  __p[1] = (void *)2;
  LOBYTE(v120) = 0;
  v123 = 0;
  LOBYTE(v124[0]) = 0;
  LOBYTE(v126) = 0;
  LOBYTE(v127[0]) = 0;
  LOBYTE(v128) = 0;
  v130 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v43 = operator new();
  *(_QWORD *)v43 = &off_24C40E898;
  v44 = *(_OWORD *)v108;
  *(_OWORD *)(v43 + 8) = v107;
  *(_OWORD *)(v43 + 24) = v44;
  *(_OWORD *)(v43 + 40) = *(_OWORD *)&v108[16];
  sub_20AF4CAF4(v43 + 64, (uint64_t)__p);
  *(_QWORD *)v43 = &off_24C40E848;
  v109.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C411E78;
  v109.__r_.__value_.__l.__size_ = v43;
  v45 = (_QWORD *)operator new();
  *v45 = &off_24C411F70;
  v45[1] = 0;
  v45[2] = 0;
  v45[3] = v43;
  v109.__r_.__value_.__r.__words[2] = (std::string::size_type)v45;
  sub_20AF4EA3C((uint64_t)__p);
  sub_20B21E85C(&v105, (uint64_t)&v109, 1uLL);
  v46 = (std::__shared_weak_count *)v109.__r_.__value_.__r.__words[2];
  if (v109.__r_.__value_.__r.__words[2])
  {
    v47 = (unint64_t *)(v109.__r_.__value_.__r.__words[2] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  sub_20B239580(a2, (uint64_t *)&v105, a3 + 8, (uint64_t)__p);
  v49 = v131;
  if (!v131)
  {
    sub_20B5287D4((uint64_t)__p, &v95);
    v50 = std::string::insert(&v95, 0, "While connecting a new client, failed to send configuration to client: ", 0x47uLL);
    v52 = (void *)v50->__r_.__value_.__r.__words[0];
    v51 = v50->__r_.__value_.__l.__size_;
    v96[0] = v50->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v96 + 3) = *(_DWORD *)((char *)&v50->__r_.__value_.__r.__words[2] + 3);
    v53 = SHIBYTE(v50->__r_.__value_.__r.__words[2]);
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    if (v53 < 0)
    {
      sub_20AEC60F4(&__dst, v52, v51);
    }
    else
    {
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
      __dst.__r_.__value_.__l.__size_ = v51;
      LODWORD(__dst.__r_.__value_.__r.__words[2]) = v96[0];
      *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v96 + 3);
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v53;
    }
    v98 = 1;
    LOBYTE(v99) = 0;
    v103 = 0;
    v104 = 1;
    sub_20B0BAE8C((uint64_t)&v109, 2u, (__int128 *)&__dst);
    if (v104)
    {
      if (v103)
      {
        if (v102 < 0)
          operator delete(v101);
        if (v100 < 0)
          operator delete(v99);
      }
      if (v98 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (v53 < 0)
      operator delete(v52);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v95.__r_.__value_.__l.__data_);
    *(_OWORD *)v83 = *(_OWORD *)&v109.__r_.__value_.__l.__data_;
    sub_20AECEBD0(v84, (__int128 *)&v109.__r_.__value_.__r.__words[2]);
    v93 = 1;
    if (v118)
    {
      if (v117)
      {
        if (SHIBYTE(v116) < 0)
          operator delete(v115[0]);
        if (SHIBYTE(v113) < 0)
          operator delete(v112[0]);
      }
      if (v111 && v110 < 0)
        operator delete((void *)v109.__r_.__value_.__r.__words[2]);
    }
    if (!v131 && v130)
    {
      if (v129)
      {
        if (SHIBYTE(v128) < 0)
          operator delete(v127[0]);
        if (SHIBYTE(v125) < 0)
          operator delete(v124[0]);
      }
      if (v123 && v122 < 0)
        operator delete(v120);
    }
  }
  v54 = (char *)v105;
  if (v105)
  {
    v55 = v106;
    v56 = v105;
    if (v106 != v105)
    {
      do
      {
        v57 = (std::__shared_weak_count *)*((_QWORD *)v55 - 1);
        if (v57)
        {
          v58 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v55 -= 24;
      }
      while (v55 != v54);
      v56 = v105;
    }
    v106 = v54;
    operator delete(v56);
  }
  if (v49 || !v93)
    goto LABEL_183;
  v60 = *(std::mutex **)(a2 + 616);
  std::mutex::lock(v60);
  __p[0] = 0;
  __p[1] = 0;
  v109.__r_.__value_.__r.__words[0] = a3 + 8;
  v61 = sub_20B242384((uint64_t **)(a2 + 624), (unsigned __int8 *)(a3 + 8), &v109);
  __p[0] = 0;
  __p[1] = 0;
  v62 = (std::__shared_weak_count *)v61[7];
  v61[6] = 0;
  v61[7] = 0;
  if (v62)
  {
    v63 = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v66 = (unint64_t *)((char *)__p[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  std::mutex::unlock(v60);
  if (*(_BYTE *)(a2 + 464))
  {
    v68 = *(_QWORD *)(a2 + 456);
    if (!v68)
      sub_20AECABA4();
    (*(void (**)(uint64_t, std::string::size_type, void **))(*(_QWORD *)v68 + 48))(v68, a3, v83);
  }
  if (*(_BYTE *)(a2 + 608))
    (*(void (**)(_QWORD, std::string::size_type))(**(_QWORD **)(a2 + 600) + 64))(*(_QWORD *)(a2 + 600), a3 + 8);
  *(_OWORD *)__p = *(_OWORD *)v83;
  v69 = sub_20AECEBD0(&v120, (__int128 *)v84);
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v130)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v70 = v123;
    if (v123)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v69;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)v69 + 2);
      *((_QWORD *)v69 + 1) = 0;
      *((_QWORD *)v69 + 2) = 0;
      *(_QWORD *)v69 = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v129)
    {
      v71 = v126;
      *(_QWORD *)(a1 + 64) = v125;
      *(_OWORD *)(a1 + 48) = *(_OWORD *)v124;
      v124[0] = 0;
      v124[1] = 0;
      *(_QWORD *)(a1 + 72) = v71;
      *(_OWORD *)(a1 + 80) = *(_OWORD *)v127;
      *(_QWORD *)(a1 + 96) = v128;
      v125 = 0;
      v127[0] = 0;
      v127[1] = 0;
      v128 = 0;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 120) = 0;
    if (v70 && v122 < 0)
      operator delete(v120);
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
  }
  if (v93 && v92)
  {
    if (v91)
    {
      if (v90 < 0)
        operator delete(v89);
      if (v88 < 0)
        operator delete(v87);
    }
    if (v86 && v85 < 0)
    {
      v80 = v84[0];
      goto LABEL_245;
    }
  }
}

void sub_20B23AB98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D170);
  _Unwind_Resume(a1);
}

void sub_20B23ABB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  void *v72;

  operator delete(v72);
  if (a32 < 0)
    operator delete(__p);
  sub_20AECD704((uint64_t)&a72);
  sub_20B0B8EC0(&a47);
  _Unwind_Resume(a1);
}

void sub_20B23AC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECDEE0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B23AC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20AECCDB4((uint64_t)&a31);
  JUMPOUT(0x20B23AC90);
}

void sub_20B23ACB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;

  sub_20AECD704((uint64_t)&a69);
  _Unwind_Resume(a1);
}

void sub_20B23ACC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCE40((uint64_t)&a9);
  JUMPOUT(0x20B23ACD0);
}

void sub_20B23ACE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44)
{
  sub_20B0B8EC0(&a44);
  _Unwind_Resume(a1);
}

void sub_20B23ACF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  sub_20B216B00((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_20B23AD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  uint64_t v69;

  (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  sub_20AF4EA3C((uint64_t)&a69);
  _Unwind_Resume(a1);
}

void sub_20B23AD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  uint64_t v69;

  MEMORY[0x20BD3583C](v69, 0x10B3C406D9A893FLL);
  sub_20AF4EA3C((uint64_t)&a69);
  _Unwind_Resume(a1);
}

void sub_20B23AD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;

  sub_20AF4EA3C((uint64_t)&a69);
  _Unwind_Resume(a1);
}

void sub_20B23AD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  std::mutex *v53;

  sub_20AEC147C((uint64_t)&a53);
  std::mutex::unlock(v53);
  _Unwind_Resume(a1);
}

void sub_20B23AD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;
  char a73;
  std::mutex *v73;
  std::__shared_weak_count *v74;
  std::mutex *v75;
  void *v77;

  if (a73 && a72 < 0)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  std::mutex::~mutex(v75);
  std::__shared_weak_count::~__shared_weak_count(v74);
  operator delete(v77);
  std::mutex::unlock(v73);
  _Unwind_Resume(a1);
}

void sub_20B23ADDC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B23ADF0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B23AE08(uint64_t a1, uint64_t a2, std::string::size_type a3, _QWORD *a4)
{
  std::mutex *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::mutex *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  std::mutex *v15;
  char *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::string v28;
  char v29;
  unsigned __int8 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  char v37;
  std::string __dst;
  char v39;
  void *v40;
  char v41;
  void *__p;
  char v43;
  char v44;
  char v45;
  __int128 v46;
  __int128 v47;
  char v48;
  char v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  char v54;
  char v55;
  _OWORD *v56[4];
  char v57;
  char v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  char v63;
  char v64;
  char v65;

  v8 = *(std::mutex **)(a2 + 616);
  std::mutex::lock(v8);
  v56[0] = (_OWORD *)(a3 + 8);
  v9 = sub_20B242384((uint64_t **)(a2 + 624), (unsigned __int8 *)(a3 + 8), v56);
  v11 = (std::mutex *)v9[6];
  v10 = (std::__shared_weak_count *)v9[7];
  v27 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  std::mutex::unlock(v8);
  if (v11)
  {
    std::mutex::lock(v11);
    v14 = (_QWORD *)*a4;
    if ((_QWORD *)*a4 != a4 + 1)
    {
      v15 = v11;
      do
      {
        v16 = (char *)(v14 + 4);
        sub_20AECAA0C((uint64_t **)&v15[1].__m_.__opaque[8], (const void **)v14 + 4, (uint64_t)(v14 + 4));
        if (*((char *)v14 + 55) < 0)
        {
          v16 = (char *)v14[4];
          v17 = v14[5];
        }
        else
        {
          v17 = *((unsigned __int8 *)v14 + 55);
        }
        v15 = v11;
        sub_20B21BE70((uint64_t)&v11[1], v16, v17, *((unsigned __int8 *)v14 + 56));
        v18 = (_QWORD *)v14[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v14[2];
            v20 = *v19 == (_QWORD)v14;
            v14 = v19;
          }
          while (!v20);
        }
        v14 = v19;
      }
      while (v19 != a4 + 1);
    }
    std::mutex::unlock(v11);
  }
  if (!*(_BYTE *)(a2 + 424))
    goto LABEL_21;
  v28.__r_.__value_.__r.__words[0] = a2 + 392;
  v28.__r_.__value_.__l.__size_ = a3;
  *(_QWORD *)&v46 = &off_24C414198;
  *((_QWORD *)&v46 + 1) = &v28;
  *(_QWORD *)&v47 = a4;
  sub_20B52A3E8((uint64_t)&v46, (uint64_t)v56);
  if (v65)
  {
    *(_BYTE *)a1 = 0;
LABEL_21:
    *(_BYTE *)(a1 + 120) = 1;
    goto LABEL_22;
  }
  sub_20B5287D4((uint64_t)v56, &v28);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&__dst, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    __dst = v28;
  v39 = 1;
  LOBYTE(v40) = 0;
  v44 = 0;
  v45 = 1;
  sub_20B0BAE8C((uint64_t)&v46, 2u, (__int128 *)&__dst);
  if (v45)
  {
    if (v44)
    {
      if (v43 < 0)
        operator delete(__p);
      if (v41 < 0)
        operator delete(v40);
    }
    if (v39 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a2 + 464))
      goto LABEL_46;
LABEL_44:
    v23 = *(_QWORD *)(a2 + 456);
    if (!v23)
      sub_20AECABA4();
    (*(void (**)(uint64_t, std::string::size_type, __int128 *))(*(_QWORD *)v23 + 48))(v23, a3, &v46);
    goto LABEL_46;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a2 + 464))
    goto LABEL_44;
LABEL_46:
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v46;
  v24 = sub_20AECEBD0(&v28.__r_.__value_.__s.__data_[16], &v47);
  *(_OWORD *)a1 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v37)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v25 = v30;
    if (v30)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v24;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)v24 + 2);
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v36)
    {
      v26 = v33;
      *(_QWORD *)(a1 + 64) = v32;
      *(_OWORD *)(a1 + 48) = v31;
      v31 = 0uLL;
      *(_QWORD *)(a1 + 72) = v26;
      *(_OWORD *)(a1 + 80) = v34;
      *(_QWORD *)(a1 + 96) = v35;
      v32 = 0;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 120) = 0;
    if (v25 && v29 < 0)
      operator delete((void *)v28.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
  }
  if (v55)
  {
    if (v54)
    {
      if (v53 < 0)
        operator delete(v52);
      if (v51 < 0)
        operator delete(v50);
    }
    if (v49 && v48 < 0)
      operator delete((void *)v47);
  }
  if (!v65 && v64)
  {
    if (v63)
    {
      if (v62 < 0)
        operator delete(v61);
      if (v60 < 0)
        operator delete(v59);
    }
    if (v58 && v57 < 0)
      operator delete(v56[2]);
  }
LABEL_22:
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_20B23B220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  if (a16 < 0)
    operator delete(__p);
  sub_20AECD704(v43 - 208);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B23B278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B23B290(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B23B2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B23B2C0(uint64_t a1)
{
  return a1 + 20;
}

void sub_20B23B2C8(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  uint64_t *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _BYTE *v41;
  int v42;
  uint64_t v43;
  std::mutex *v44;
  _QWORD *v45;
  uint64_t v46;
  void *v48[2];
  char v49;
  _BYTE v50[16];
  void *__p;
  char v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  char v58;
  char v59;
  __int128 v60;
  void *v61;
  char v62;
  unsigned __int8 v63;
  void *v64[2];
  uint64_t v65;
  uint64_t v66;
  void *v67[2];
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  void *v74;
  uint64_t *v75;
  uint64_t v76;
  int v77;
  __int128 v78;
  __int128 v79;
  char v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  _DWORD v90[6];
  int v91;
  _QWORD v92[5];
  _QWORD v93[2];

  v77 = 3;
  LOBYTE(v78) = 0;
  v88 = 0;
  v5 = (std::mutex *)a1[70];
  std::mutex::lock(v5);
  v6 = a1[72];
  v7 = a1[71];
  v61 = 0;
  v60 = 0uLL;
  v8 = v6 - v7;
  if (v6 == v7)
  {
    v10 = 0;
    v45 = a1;
    v46 = a3;
LABEL_39:
    v74 = v10;
    v75 = v10;
    v76 = v8;
    std::mutex::unlock(v5);
    goto LABEL_80;
  }
  v9 = 0x8E38E38E38E38E39 * (v8 >> 5);
  if (v9 >> 60)
    sub_20AEC60B8();
  v10 = (uint64_t *)operator new(0xE38E38E38E38E390 * (v8 >> 5));
  v8 = (uint64_t)&v10[2 * v9];
  *(_QWORD *)&v60 = v10;
  *((_QWORD *)&v60 + 1) = v10;
  v61 = (void *)v8;
  v45 = a1;
  v46 = a3;
  if (v6 == v7)
    goto LABEL_39;
  v44 = v5;
  do
  {
    while (1)
    {
      v11 = *(std::__shared_weak_count **)(v7 + 264);
      if (!v11)
        break;
      v12 = std::__shared_weak_count::lock(v11);
      if (v12)
      {
        v13 = *(_QWORD *)(v7 + 256);
        v14 = v61;
        if (v10 >= v61)
          goto LABEL_13;
      }
      else
      {
        v13 = 0;
        v14 = v61;
        if (v10 >= v61)
          goto LABEL_13;
      }
LABEL_5:
      *v10 = v13;
      v10[1] = (uint64_t)v12;
      v10 += 2;
      *((_QWORD *)&v60 + 1) = v10;
      v7 += 288;
      if (v7 == v6)
        goto LABEL_36;
    }
    v13 = 0;
    v12 = 0;
    v14 = v61;
    if (v10 < v61)
      goto LABEL_5;
LABEL_13:
    v15 = (uint64_t *)v60;
    v16 = (uint64_t)((uint64_t)v10 - v60) >> 4;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 60)
      sub_20AEC60B8();
    v18 = (uint64_t)v14 - v60;
    if (v18 >> 3 > v17)
      v17 = v18 >> 3;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
      v19 = 0xFFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19 >> 60)
      sub_20AEC60CC();
    v20 = (char *)operator new(16 * v19);
    v21 = &v20[16 * v16];
    *(_QWORD *)v21 = v13;
    *((_QWORD *)v21 + 1) = v12;
    v22 = (uint64_t *)(v21 + 16);
    if (v10 == v15)
    {
      *(_QWORD *)&v60 = &v20[16 * v16];
      v61 = &v20[16 * v19];
      if (v10)
        goto LABEL_31;
    }
    else
    {
      v23 = v10;
      do
      {
        v24 = *((_OWORD *)v23 - 1);
        v23 -= 2;
        *((_OWORD *)v21 - 1) = v24;
        v21 -= 16;
        *v23 = 0;
        v23[1] = 0;
      }
      while (v23 != v15);
      *(_QWORD *)&v60 = v21;
      *((_QWORD *)&v60 + 1) = v22;
      v61 = &v20[16 * v19];
      do
      {
        v25 = (std::__shared_weak_count *)*(v10 - 1);
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v10 -= 2;
      }
      while (v10 != v15);
      v10 = v15;
      if (v15)
LABEL_31:
        operator delete(v10);
    }
    v10 = v22;
    *((_QWORD *)&v60 + 1) = v22;
    v7 += 288;
  }
  while (v7 != v6);
LABEL_36:
  v28 = (uint64_t *)v60;
  v74 = (void *)v60;
  v75 = v10;
  v76 = (uint64_t)v61;
  std::mutex::unlock(v44);
  if ((uint64_t *)v60 != v10)
  {
    while (1)
    {
      v30 = *v28;
      v29 = (std::__shared_weak_count *)v28[1];
      v72 = *v28;
      v73 = v29;
      if (v29)
      {
        v31 = (unint64_t *)&v29->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      if (!v30)
        goto LABEL_47;
      sub_20B0B6AF4(v30, a2, (uint64_t)&v60);
      if (v71)
        goto LABEL_47;
      v35 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
      v91 = 0;
      sub_20AF5A61C(v90, "for client ");
      sub_20B09AB08((uint64_t)&v89, (uint64_t)v90, v35);
      v92[0] = v90;
      v92[1] = ": ";
      v92[2] = v90;
      v92[3] = ": ";
      v92[4] = ": ";
      if (v91 == -1)
        sub_20AECFAB8();
      v93[0] = v92;
      ((void (*)(_QWORD *, _DWORD *))off_24C4141C8[v91])(v93, v90);
      if (v91 == -1)
        sub_20AECFAB8();
      v92[0] = v93;
      ((void (*)(void **__return_ptr, _QWORD *, _DWORD *))off_24C413FE0[v91])(v48, v92, v90);
      if (v91 != -1)
        ((void (*)(_QWORD *, _DWORD *))off_24C413F98[v91])(v92, v90);
      sub_20B529768((char *)&v60, v48, (uint64_t)v50);
      sub_20B0B5C00((uint64_t)&v77, (uint64_t)v50);
      if (v59)
        break;
LABEL_63:
      if (v49 < 0)
        operator delete(v48[0]);
      if (v71 || !v70)
        goto LABEL_47;
      if (!v69)
      {
LABEL_70:
        if (v63)
          goto LABEL_71;
        goto LABEL_47;
      }
      if (SHIBYTE(v68) < 0)
      {
        operator delete(v67[0]);
        if ((SHIBYTE(v65) & 0x80000000) == 0)
          goto LABEL_70;
      }
      else if ((SHIBYTE(v65) & 0x80000000) == 0)
      {
        goto LABEL_70;
      }
      operator delete(v64[0]);
      if (v63)
      {
LABEL_71:
        if (v62 < 0)
          operator delete(v61);
      }
LABEL_47:
      if (v29)
      {
        v33 = (unint64_t *)&v29->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v28 += 2;
      if (v28 == v10)
      {
        v10 = (uint64_t *)v74;
        goto LABEL_80;
      }
    }
    if (!v58)
      goto LABEL_60;
    if (v57 < 0)
    {
      operator delete(v56);
      if ((v55 & 0x80000000) == 0)
      {
LABEL_60:
        if (!v53)
          goto LABEL_63;
LABEL_61:
        if (v52 < 0)
          operator delete(__p);
        goto LABEL_63;
      }
    }
    else if ((v55 & 0x80000000) == 0)
    {
      goto LABEL_60;
    }
    operator delete(v54);
    if (!v53)
      goto LABEL_63;
    goto LABEL_61;
  }
LABEL_80:
  if (v10)
  {
    v36 = v75;
    v37 = v10;
    if (v75 != v10)
    {
      do
      {
        v38 = (std::__shared_weak_count *)*(v36 - 1);
        if (v38)
        {
          v39 = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v36 -= 2;
      }
      while (v36 != v10);
      v37 = v74;
    }
    v75 = v10;
    operator delete(v37);
  }
  if (*((_BYTE *)v45 + 552))
  {
    sub_20B21E3FC(v45[68], a2, (uint64_t)&v60);
    if (!v71)
    {
      sub_20B0B5C00((uint64_t)&v77, (uint64_t)&v60);
      if (!v71)
      {
        if (v70)
        {
          if (v69)
          {
            if (SHIBYTE(v68) < 0)
              operator delete(v67[0]);
            if (SHIBYTE(v65) < 0)
              operator delete(v64[0]);
          }
          if (v63 && v62 < 0)
            operator delete(v61);
        }
      }
    }
  }
  if (!v88)
  {
    *(_BYTE *)(v46 + 120) = 1;
    return;
  }
  v60 = v78;
  v41 = sub_20AECEBD0(&v61, &v79);
  *(_OWORD *)v46 = v60;
  *(_BYTE *)(v46 + 16) = 0;
  *(_BYTE *)(v46 + 112) = 0;
  if (v70)
  {
    *(_BYTE *)(v46 + 40) = 0;
    v42 = v63;
    if (v63)
    {
      *(_OWORD *)(v46 + 16) = *(_OWORD *)v41;
      *(_QWORD *)(v46 + 32) = *((_QWORD *)v41 + 2);
      *((_QWORD *)v41 + 1) = 0;
      *((_QWORD *)v41 + 2) = 0;
      *(_QWORD *)v41 = 0;
      *(_BYTE *)(v46 + 40) = 1;
    }
    *(_BYTE *)(v46 + 48) = 0;
    *(_BYTE *)(v46 + 104) = 0;
    if (v69)
    {
      v43 = v66;
      *(_QWORD *)(v46 + 64) = v65;
      *(_OWORD *)(v46 + 48) = *(_OWORD *)v64;
      v64[0] = 0;
      v64[1] = 0;
      *(_QWORD *)(v46 + 72) = v43;
      *(_OWORD *)(v46 + 80) = *(_OWORD *)v67;
      *(_QWORD *)(v46 + 96) = v68;
      v65 = 0;
      v67[0] = 0;
      v67[1] = 0;
      v68 = 0;
      *(_BYTE *)(v46 + 104) = 1;
    }
    *(_BYTE *)(v46 + 112) = 1;
    *(_BYTE *)(v46 + 120) = 0;
    if (v42 && v62 < 0)
      operator delete(v61);
  }
  else
  {
    *(_BYTE *)(v46 + 120) = 0;
  }
  if (v88 && v87)
  {
    if (!v86)
      goto LABEL_110;
    if ((v85 & 0x80000000) == 0)
    {
      if ((v83 & 0x80000000) == 0)
        goto LABEL_110;
LABEL_124:
      operator delete(v82);
      if (!v81)
        return;
LABEL_111:
      if (v80 < 0)
        operator delete((void *)v79);
      return;
    }
    operator delete(v84);
    if (v83 < 0)
      goto LABEL_124;
LABEL_110:
    if (v81)
      goto LABEL_111;
  }
}

void sub_20B23BA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  sub_20AECD704((uint64_t)&a31);
  sub_20B0B60AC((uint64_t)&a52);
  _Unwind_Resume(a1);
}

void sub_20B23BA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  sub_20B0B60AC((uint64_t)&a52);
  _Unwind_Resume(a1);
}

void sub_20B23BA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55)
{
  std::mutex *v55;

  sub_20AEC3C38(&a34);
  std::mutex::unlock(v55);
  sub_20B0B60AC((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t sub_20B23BB30(uint64_t a1)
{
  return *(_QWORD *)(a1 + 592);
}

uint64_t sub_20B23BB40(uint64_t a1)
{
  return *(_QWORD *)(a1 + 592);
}

void sub_20B23BB50(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  int v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(std::mutex **)(a1 + 560);
  std::mutex::lock(v4);
  v5 = *(unsigned __int8 *)(a1 + 512);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 488) = v7;
  *(_QWORD *)(a1 + 504) = v6;
  if (!v5)
    *(_BYTE *)(a1 + 512) = 1;
  std::mutex::unlock(v4);
}

void sub_20B23BBC0(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v6 = *(std::mutex **)(a1 + 616);
  std::mutex::lock(v6);
  v7 = *(_QWORD *)(a1 + 632);
  if (!v7)
    goto LABEL_16;
  v8 = a1 + 632;
  v9 = a1 + 632;
  do
  {
    v10 = sub_20B242474((unsigned __int8 *)(v7 + 32), a2);
    if (v10 >= 0)
      v11 = (uint64_t *)v7;
    else
      v11 = (uint64_t *)(v7 + 8);
    if (v10 >= 0)
      v9 = v7;
    v7 = *v11;
  }
  while (*v11);
  if (v9 == v8 || (char)sub_20B242474(a2, (unsigned __int8 *)(v9 + 32)) < 0)
  {
LABEL_16:
    *a3 = 0;
    a3[1] = 0;
    std::mutex::unlock(v6);
  }
  else
  {
    v12 = *(_QWORD *)(v9 + 56);
    *a3 = *(_QWORD *)(v9 + 48);
    a3[1] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    std::mutex::unlock(v6);
  }
}

void sub_20B23BC94(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B23BCA8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B23BCBC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  std::mutex *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  _BOOL4 v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::mutex *v18;
  std::__shared_weak_count *v19;

  sub_20B23BBC0(a1, a2, &v18);
  v4 = v18;
  if (!v18)
  {
    v12 = 0;
    v13 = 0;
    v14 = v19;
    if (!v19)
      return v12 | (v13 << 8);
    goto LABEL_14;
  }
  std::mutex::lock(v18);
  v5 = *(unsigned __int8 *)(a3 + 23);
  v6 = *(char **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  v8 = *(_QWORD *)v4[1].__m_.__opaque;
  if (!v8)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v8 = *(_QWORD *)v4[1].__m_.__opaque;
  }
  if ((v5 & 0x80u) == 0)
    v9 = (char *)a3;
  else
    v9 = v6;
  if ((v5 & 0x80u) == 0)
    v10 = v5;
  else
    v10 = v7;
  v11 = (unsigned __int8 *)atomic_load(*(unint64_t **)(sub_20B2199EC(*(_QWORD *)(v8 + 40), v9, v10) + 40));
  v12 = *v11 == 1;
  std::mutex::unlock(v4);
  v13 = 1;
  v14 = v19;
  if (v19)
  {
LABEL_14:
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v12 | (v13 << 8);
}

void sub_20B23BDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B23BDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B23BE10(uint64_t a1, unsigned __int8 *a2, void **a3)
{
  std::mutex *v4;
  int v5;
  void *v6;
  size_t v7;
  int v8;
  const void *v9;
  size_t v10;
  int v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::mutex *v17;
  std::__shared_weak_count *v18;

  sub_20B23BBC0(a1, a2, &v17);
  v4 = v17;
  if (v17)
  {
    std::mutex::lock(v17);
    v5 = *((char *)a3 + 23);
    if (v5 >= 0)
      v6 = a3;
    else
      v6 = *a3;
    if (v5 >= 0)
      v7 = *((unsigned __int8 *)a3 + 23);
    else
      v7 = (size_t)a3[1];
    if (sub_20B21BD28((uint64_t)&v4[1], v6, v7))
    {
      v8 = *((char *)a3 + 23);
      if (v8 >= 0)
        v9 = a3;
      else
        v9 = *a3;
      if (v8 >= 0)
        v10 = *((unsigned __int8 *)a3 + 23);
      else
        v10 = (size_t)a3[1];
      v11 = **(unsigned __int8 **)(sub_20B21B8A0((uint64_t)&v4[1], v9, v10) + 32);
    }
    else
    {
      v11 = 0;
    }
    std::mutex::unlock(v4);
    v12 = 1;
    v13 = v18;
    if (!v18)
      return v11 | (v12 << 8);
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = v18;
    if (!v18)
      return v11 | (v12 << 8);
  }
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (v16)
    return v11 | (v12 << 8);
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return v11 | (v12 << 8);
}

void sub_20B23BF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B23BF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B23BF50(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char **v14;
  char *v15[2];
  std::mutex *v16;
  std::__shared_weak_count *v17;

  sub_20B23BBC0(a1, a2, &v16);
  v4 = v16;
  if (!v16)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    v8 = v17;
    if (!v17)
      return;
    goto LABEL_8;
  }
  v15[0] = 0;
  v15[1] = 0;
  v14 = v15;
  std::mutex::lock(v16);
  sub_20B21C3DC((uint64_t)&v4[1], (uint64_t)&v11);
  v5 = v12;
  *(_QWORD *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v5;
  v6 = a3 + 8;
  v7 = v13;
  *(_QWORD *)(a3 + 16) = v13;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    v11 = &v12;
    v12 = 0;
    v13 = 0;
    v5 = 0;
  }
  else
  {
    *(_QWORD *)a3 = v6;
  }
  *(_BYTE *)(a3 + 24) = 1;
  sub_20AEC833C((uint64_t)&v11, (char *)v5);
  std::mutex::unlock(v4);
  sub_20AEC833C((uint64_t)&v14, v15[0]);
  v8 = v17;
  if (v17)
  {
LABEL_8:
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20B23C06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13, uint64_t a14, char a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_20AEC833C((uint64_t)&a12, a13);
  sub_20AEC147C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B23C09C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  uint64_t v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::mutex *v50;
  uint64_t v51;
  std::mutex *v52;
  uint64_t (**v53)();
  uint64_t (***v54)();
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  __n128 *v60;
  uint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_weak_owners;
  unint64_t v65;
  std::__shared_weak_count *v66;
  std::string::size_type v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::string::size_type v71;
  unint64_t *v72;
  unint64_t v73;
  std::string::size_type v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  char v81;
  int v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _BYTE *v96;
  int v97;
  void *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::string *v107;
  char v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  __n128 *v114;
  uint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  void *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  std::__shared_weak_count *v136;
  char v137;
  char v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count *v140;
  char v141;
  char v142;
  _QWORD *v143;
  _BYTE v144[13];
  void *v145[2];
  uint64_t v146;
  char v147;
  int v148;
  __n128 v149;
  __n128 v150;
  unint64_t v151;
  char v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  unint64_t v156;
  char v157;
  char v158;
  char v159;
  std::random_device v160;
  __n128 v161;
  __int128 v162;
  uint64_t v163;
  char v164;
  BOOL v165;
  unsigned __int16 v166;
  int v167;
  __int128 v168;
  _QWORD v169[3];
  _QWORD *v170;
  char v171;
  _QWORD v172[3];
  _QWORD *v173;
  unsigned __int8 v174;
  _BYTE v175[24];
  _BYTE *v176;
  char v177;
  _BYTE v178[24];
  _BYTE *v179;
  char v180;
  _BYTE v181[24];
  _BYTE *v182;
  char v183;
  _BYTE v184[24];
  _BYTE *v185;
  char v186;
  _QWORD v187[3];
  _QWORD *v188;
  char v189;
  std::string v190;
  std::string *v191;
  _BYTE __token[2504];
  __int128 v193;
  _OWORD __dst[156];
  __n128 v195[156];
  uint64_t v196;
  std::__shared_weak_count *v197;
  std::__shared_weak_count *v198;
  uint64_t *v199;
  uint64_t v200;

  v0 = (_QWORD *)MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v200 = *MEMORY[0x24BDAC8D0];
  *v0 = &off_24C413A58;
  sub_20B241A9C((uint64_t)v175, v8);
  *(_QWORD *)v144 = *(_QWORD *)v6;
  *(_QWORD *)&v144[5] = *(_QWORD *)(v6 + 5);
  LOBYTE(v145[0]) = 0;
  v147 = 0;
  if (*(_BYTE *)(v6 + 40))
  {
    *(_OWORD *)v145 = *(_OWORD *)(v6 + 16);
    v146 = *(_QWORD *)(v6 + 32);
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    v147 = 1;
  }
  v148 = *(_DWORD *)(v6 + 48);
  LOBYTE(v172[0]) = 0;
  v174 = 0;
  v9 = *(unsigned __int8 *)(v4 + 32);
  if (*(_BYTE *)(v4 + 32))
  {
    v10 = *(_QWORD *)(v4 + 24);
    if (v10)
    {
      if (v10 == v4)
      {
        v173 = v172;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 24))(v4, v172);
        goto LABEL_9;
      }
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    }
    v173 = (_QWORD *)v10;
LABEL_9:
    v9 = 1;
    v174 = 1;
  }
  LOBYTE(v169[0]) = 0;
  v171 = 0;
  if (*(_BYTE *)(v2 + 32))
  {
    v11 = *(_QWORD *)(v2 + 24);
    if (v11)
    {
      if (v11 == v2)
      {
        v170 = v169;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 24))(v2, v169);
        v9 = v174;
      }
      else
      {
        v170 = *(_QWORD **)(v2 + 24);
        *(_QWORD *)(v2 + 24) = 0;
      }
    }
    else
    {
      v170 = 0;
    }
    v171 = 1;
  }
  LOBYTE(v187[0]) = 0;
  v189 = 0;
  if (v9)
  {
    v12 = (uint64_t)v173;
    if (v173)
    {
      if (v173 == v172)
      {
        v188 = v187;
        (*(void (**)(_QWORD *, _QWORD *))(v172[0] + 24))(v172, v187);
        goto LABEL_23;
      }
      v12 = (*(uint64_t (**)(void))(*v173 + 16))();
    }
    v188 = (_QWORD *)v12;
LABEL_23:
    v189 = 1;
  }
  *(_QWORD *)__token = &off_24C413BF0;
  __token[8] = 0;
  __token[16] = 0;
  *(_OWORD *)&__token[20] = 0uLL;
  __token[64] = 0;
  __token[88] = 0;
  __token[96] = 0;
  __token[240] = 0;
  memset(&__token[248], 0, 24);
  memset(&__token[40], 0, 20);
  sub_20B241A9C((uint64_t)&__token[272], (uint64_t)v175);
  __token[432] = 0;
  __token[464] = 0;
  if (!v189)
    goto LABEL_31;
  v13 = (uint64_t)v188;
  if (v188)
  {
    if (v188 == v187)
    {
      *(_QWORD *)&__token[456] = &__token[432];
      (*(void (**)(_QWORD *, _BYTE *))(v187[0] + 24))(v187, &__token[432]);
      goto LABEL_30;
    }
    v13 = (*(uint64_t (**)(void))(*v188 + 16))();
  }
  *(_QWORD *)&__token[456] = v13;
LABEL_30:
  __token[464] = 1;
LABEL_31:
  v143 = v7;
  __token[472] = 0;
  __token[512] = 0;
  __token[552] = 0;
  __token[608] = 0;
  *(_QWORD *)&__token[616] = 0;
  *(_QWORD *)&__token[640] = 0;
  *(_QWORD *)&__token[632] = 0;
  memset(&__token[520], 0, 17);
  memset(&__token[560], 0, 41);
  *(_QWORD *)&__token[624] = &__token[632];
  v14 = (char *)operator new(0x2A0uLL);
  v15 = v14;
  *((_QWORD *)v14 + 1) = 0;
  v16 = (unint64_t *)(v14 + 8);
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_24C413EC8;
  *((_QWORD *)v14 + 3) = &off_24C413BF0;
  v17 = v14 + 24;
  *((_OWORD *)v14 + 2) = *(_OWORD *)&__token[8];
  *(_OWORD *)(v14 + 44) = *(_OWORD *)&__token[20];
  *((_OWORD *)v14 + 4) = *(_OWORD *)&__token[40];
  *((_DWORD *)v14 + 20) = *(_DWORD *)&__token[56];
  v14[88] = 0;
  v14[112] = 0;
  if (__token[88])
  {
    *(_OWORD *)(v14 + 88) = *(_OWORD *)&__token[64];
    *((_QWORD *)v14 + 13) = *(_QWORD *)&__token[80];
    memset(&__token[64], 0, 24);
    v14[112] = 1;
  }
  v14[120] = 0;
  v14[264] = 0;
  if (__token[240])
  {
    *(_OWORD *)(v14 + 120) = *(_OWORD *)&__token[96];
    *((_QWORD *)v14 + 17) = *(_QWORD *)&__token[112];
    memset(&__token[96], 0, 24);
    *((_OWORD *)v14 + 9) = *(_OWORD *)&__token[120];
    v18 = *(_QWORD *)&__token[160];
    *((_QWORD *)v14 + 20) = *(_QWORD *)&__token[136];
    *(_QWORD *)&__token[128] = 0;
    *(_QWORD *)&__token[120] = 0;
    *((_QWORD *)v14 + 23) = v18;
    *(_OWORD *)(v14 + 168) = *(_OWORD *)&__token[144];
    memset(&__token[136], 0, 32);
    v19 = *(_OWORD *)&__token[168];
    v20 = *(_QWORD *)&__token[208];
    *((_QWORD *)v14 + 26) = *(_QWORD *)&__token[184];
    *((_OWORD *)v14 + 12) = v19;
    *(_QWORD *)&__token[176] = 0;
    *(_QWORD *)&__token[168] = 0;
    v21 = *(_OWORD *)&__token[192];
    *((_QWORD *)v14 + 29) = v20;
    *(_OWORD *)(v14 + 216) = v21;
    memset(&__token[184], 0, 32);
    v22 = *(_OWORD *)&__token[216];
    *((_QWORD *)v14 + 32) = *(_QWORD *)&__token[232];
    *((_OWORD *)v14 + 15) = v22;
    memset(&__token[216], 0, 24);
    v14[264] = 1;
  }
  *((_OWORD *)v14 + 17) = *(_OWORD *)&__token[248];
  *((_QWORD *)v14 + 36) = *(_QWORD *)&__token[264];
  sub_20B241A9C((uint64_t)(v14 + 296), (uint64_t)&__token[272]);
  v15[456] = 0;
  v15[488] = 0;
  if (__token[464])
  {
    if (*(_QWORD *)&__token[456])
    {
      if (*(_BYTE **)&__token[456] == &__token[432])
      {
        *((_QWORD *)v15 + 60) = v15 + 456;
        (*(void (**)(_BYTE *))(*(_QWORD *)&__token[432] + 24))(&__token[432]);
      }
      else
      {
        *((_QWORD *)v15 + 60) = *(_QWORD *)&__token[456];
        *(_QWORD *)&__token[456] = 0;
      }
    }
    else
    {
      *((_QWORD *)v15 + 60) = 0;
    }
    v15[488] = 1;
  }
  v23 = v15 + 584;
  v24 = *(_OWORD *)&__token[488];
  *((_OWORD *)v15 + 31) = *(_OWORD *)&__token[472];
  *((_OWORD *)v15 + 32) = v24;
  v25 = *(_OWORD *)&__token[520];
  *((_OWORD *)v15 + 33) = *(_OWORD *)&__token[504];
  *((_OWORD *)v15 + 34) = v25;
  *(_QWORD *)&__token[520] = 0;
  *(_QWORD *)&__token[528] = 0;
  v15[560] = 0;
  v15[576] = 0;
  if (__token[552])
  {
    *((_QWORD *)v15 + 70) = &off_24C412220;
    v26 = *(_QWORD *)&__token[544];
    *(_QWORD *)&__token[544] = 0;
    *((_QWORD *)v15 + 71) = v26;
    v15[576] = 1;
  }
  v27 = *(_OWORD *)&__token[560];
  v28 = *(_OWORD *)&__token[576];
  *(_OWORD *)&__token[560] = 0u;
  *v23 = v27;
  *(_OWORD *)(v15 + 600) = v28;
  memset(&__token[576], 0, 24);
  *((_QWORD *)v15 + 77) = *(_QWORD *)&__token[592];
  v29 = *(_OWORD *)&__token[616];
  *(_QWORD *)&__token[616] = 0;
  *((_OWORD *)v15 + 39) = *(_OWORD *)&__token[600];
  *((_OWORD *)v15 + 40) = v29;
  v30 = v15 + 656;
  v31 = *(_QWORD *)&__token[632];
  *((_QWORD *)v15 + 82) = *(_QWORD *)&__token[632];
  v32 = *(_QWORD *)&__token[640];
  *((_QWORD *)v15 + 83) = *(_QWORD *)&__token[640];
  if (v32)
  {
    *(_QWORD *)(v31 + 16) = v30;
    *(_QWORD *)&__token[624] = &__token[632];
    *(_QWORD *)&__token[632] = 0;
    *(_QWORD *)&__token[640] = 0;
    v33 = v15 + 32;
    v161.n128_u64[0] = (unint64_t)v17;
    v161.n128_u64[1] = (unint64_t)v15;
    sub_20B237240((uint64_t)__token);
    if (!v189)
      goto LABEL_53;
  }
  else
  {
    *((_QWORD *)v15 + 81) = v30;
    v33 = v15 + 32;
    v161.n128_u64[0] = (unint64_t)v17;
    v161.n128_u64[1] = (unint64_t)v15;
    sub_20B237240((uint64_t)__token);
    if (!v189)
      goto LABEL_53;
  }
  v34 = v188;
  if (v188 == v187)
  {
    v35 = 4;
    v34 = v187;
  }
  else
  {
    if (!v188)
      goto LABEL_53;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_53:
  *(_QWORD *)v33 = *(_QWORD *)v144;
  v33[8] = v144[8];
  __token[23] = 12;
  strcpy(__token, "/dev/urandom");
  std::random_device::random_device(&v160, (const std::string *)__token);
  v36 = (uint64_t)v17;
  if ((__token[23] & 0x80000000) != 0)
    operator delete(*(void **)__token);
  for (i = 0; i != 624; ++i)
    v195[0].n128_u32[i] = MEMORY[0x20BD352B4](&v160);
  memcpy(__dst, v195, sizeof(__dst));
  sub_20B0BD664(__dst, (uint64_t)__token);
  v38 = (std::__shared_weak_count *)operator new(0x9F8uLL);
  v38->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v38->__shared_owners_;
  v38->__shared_weak_owners_ = 0;
  v38->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40D3D8;
  memcpy(&v38[1], __token, 0x9C8uLL);
  v38[105].__shared_owners_ = (uint64_t)&off_24C41F9C8;
  *(_OWORD *)&v38[105].__shared_weak_owners_ = v193;
  v196 = (uint64_t)&v38[1];
  v197 = v38;
  v195[0].n128_u64[0] = (unint64_t)&v38[1];
  sub_20B0BDC30((unsigned int *)__token, (uint64_t *)v195);
  v40 = *(unsigned int *)__token;
  v41 = *(_DWORD *)&__token[4];
  v42 = *(_DWORD *)&__token[8];
  v43 = *(unsigned int *)&__token[12];
  do
    v44 = __ldaxr(p_shared_owners);
  while (__stlxr(v44 - 1, p_shared_owners));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  *(_QWORD *)(v15 + 44) = v40 | ((unint64_t)v41 << 32) | ((unint64_t)BYTE1(v41) << 40) | ((unint64_t)HIBYTE(v41) << 56) | ((unint64_t)(HIWORD(v41) & 0xF | 0x40) << 48);
  *(_QWORD *)(v15 + 52) = ((unint64_t)v43 << 32) | ((unint64_t)BYTE1(v43) << 40) | v42 & 0xFFFFFF00 | (v43 << 32) & 0xFF00000000000000 | ((unint64_t)BYTE2(v43) << 48) | v42 & 0x3F | 0x80u;
  std::random_device::~random_device(&v160);
  v45 = (unint64_t *)(v15 + 16);
  do
    v46 = __ldxr(v45);
  while (__stxr(v46 + 1, v45));
  v47 = v36;
  *((_QWORD *)v15 + 68) = v36;
  v48 = (std::__shared_weak_count *)*((_QWORD *)v15 + 69);
  *((_QWORD *)v15 + 69) = v15;
  if (v48)
    std::__shared_weak_count::__release_weak(v48);
  v49 = operator new();
  *(_QWORD *)v49 = 850045863;
  *(_OWORD *)(v49 + 8) = 0u;
  *(_OWORD *)(v49 + 24) = 0u;
  *(_OWORD *)(v49 + 40) = 0u;
  *(_QWORD *)(v49 + 56) = 0;
  v50 = *(std::mutex **)v23;
  *(_QWORD *)v23 = v49;
  if (v50)
  {
    std::mutex::~mutex(v50);
    MEMORY[0x20BD3583C]();
  }
  v195[0].n128_u64[0] = 0x500000001;
  *(_QWORD *)&__dst[0] = 1;
  DWORD2(__dst[0]) = 0;
  v196 = 0x200000001;
  v195[0].n128_u32[2] = 0;
  v195[1].n128_u32[1] = 0;
  *(unint64_t *)((char *)&v195[0].n128_u64[1] + 4) = 0x200000001;
  sub_20B212F60(v36, 1, v195, (uint64_t)__token);
  sub_20B0BA9E4((uint64_t)(v15 + 64), (uint64_t)__token);
  if (!__token[200])
    goto LABEL_74;
  if ((__token[199] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__token[176]);
    if ((__token[175] & 0x80000000) == 0)
    {
LABEL_70:
      if ((__token[151] & 0x80000000) == 0)
        goto LABEL_71;
      goto LABEL_87;
    }
  }
  else if ((__token[175] & 0x80000000) == 0)
  {
    goto LABEL_70;
  }
  operator delete(*(void **)&__token[152]);
  if ((__token[151] & 0x80000000) == 0)
  {
LABEL_71:
    if ((__token[127] & 0x80000000) == 0)
      goto LABEL_72;
LABEL_88:
    operator delete(*(void **)&__token[104]);
    if ((__token[103] & 0x80000000) == 0)
    {
LABEL_73:
      if ((__token[79] & 0x80000000) == 0)
        goto LABEL_74;
LABEL_90:
      operator delete(*(void **)&__token[56]);
      if (!__token[48])
        goto LABEL_77;
      goto LABEL_75;
    }
    goto LABEL_89;
  }
LABEL_87:
  operator delete(*(void **)&__token[128]);
  if ((__token[127] & 0x80000000) != 0)
    goto LABEL_88;
LABEL_72:
  if ((__token[103] & 0x80000000) == 0)
    goto LABEL_73;
LABEL_89:
  operator delete(*(void **)&__token[80]);
  if ((__token[79] & 0x80000000) != 0)
    goto LABEL_90;
LABEL_74:
  if (!__token[48])
    goto LABEL_77;
LABEL_75:
  if ((__token[47] & 0x80000000) != 0)
    operator delete(*(void **)&__token[24]);
LABEL_77:
  v51 = operator new();
  *(_QWORD *)v51 = 850045863;
  *(_OWORD *)(v51 + 8) = 0u;
  *(_OWORD *)(v51 + 24) = 0u;
  *(_OWORD *)(v51 + 40) = 0u;
  *(_QWORD *)(v51 + 56) = 0;
  v52 = (std::mutex *)*((_QWORD *)v15 + 80);
  *((_QWORD *)v15 + 80) = v51;
  if (v52)
  {
    std::mutex::~mutex(v52);
    MEMORY[0x20BD3583C]();
  }
  if (v144[12])
  {
    v53 = &off_24C413F18;
    v195[0].n128_u64[0] = (unint64_t)&off_24C413F18;
    v195[1].n128_u64[1] = (unint64_t)v195;
    if (v171)
    {
      if (!v170)
      {
        *(_QWORD *)&__token[24] = 0;
        goto LABEL_329;
      }
      if (v170 == v169)
      {
        *(_QWORD *)&__token[24] = __token;
        (*(void (**)(_QWORD *, _BYTE *))(v169[0] + 24))(v169, __token);
        v54 = *(uint64_t (****)())&__token[24];
        if (!*(_QWORD *)&__token[24])
          goto LABEL_329;
      }
      else
      {
        v54 = (uint64_t (***)())(*(uint64_t (**)(void))(*v170 + 16))();
        *(_QWORD *)&__token[24] = v54;
        if (!v54)
LABEL_329:
          sub_20AECABA4();
      }
      v53 = *v54;
    }
    else
    {
      *(_QWORD *)&__token[24] = __token;
      *(_QWORD *)__token = &off_24C413F18;
    }
    ((void (*)(_OWORD *__return_ptr))v53[6])(__dst);
    v55 = *(_QWORD *)&__dst[0];
    *(_QWORD *)&__dst[0] = 0;
    v56 = *((_QWORD *)v15 + 77);
    *((_QWORD *)v15 + 77) = v55;
    if (v56)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
      v57 = *(_QWORD *)&__dst[0];
      *(_QWORD *)&__dst[0] = 0;
      if (v57)
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    }
    v58 = *(_QWORD **)&__token[24];
    if (*(_BYTE **)&__token[24] == __token)
    {
      v59 = 4;
      v58 = __token;
    }
    else
    {
      if (!*(_QWORD *)&__token[24])
        goto LABEL_103;
      v59 = 5;
    }
    (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_103:
    v60 = (__n128 *)v195[1].n128_u64[1];
    if ((__n128 *)v195[1].n128_u64[1] == v195)
    {
      v61 = 4;
      v60 = v195;
    }
    else
    {
      if (!v195[1].n128_u64[1])
        goto LABEL_108;
      v61 = 5;
    }
    (*(void (**)(void))(v60->n128_u64[0] + 8 * v61))();
LABEL_108:
    *((_QWORD *)v15 + 78) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v15 + 77) + 48))(*((_QWORD *)v15 + 77));
    v15[632] = 1;
    __token[120] = 1;
    if (v144[12] == 1)
    {
      (*(void (**)(__n128 *__return_ptr))(**((_QWORD **)v15 + 77) + 24))(v195);
      sub_20B2370DC((uint64_t)__token, (__int128 *)v195);
    }
    else
    {
      if (v144[12] != 2)
      {
        LODWORD(v199) = 0;
        sub_20B1E478C(&v196, "Initial client sync status must be Waiting or Proceeding or null, but is ");
        std::to_string(&v190, v144[12]);
        *(_QWORD *)&__dst[0] = &v196;
        *((_QWORD *)&__dst[0] + 1) = &v190;
        *(_QWORD *)&__dst[1] = &v196;
        *((_QWORD *)&__dst[1] + 1) = &v190;
        *(_QWORD *)&__dst[2] = &v190;
        if ((_DWORD)v199 == -1)
          sub_20AECFAB8();
        *(_QWORD *)&v168 = __dst;
        ((void (*)(__int128 *, uint64_t *))off_24C413FC8[v199])(&v168, &v196);
        if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v190.__r_.__value_.__l.__data_);
        if ((_DWORD)v199 == -1)
          sub_20AECFAB8();
        *(_QWORD *)&__dst[0] = &v190;
        ((void (*)(__int128 *__return_ptr, _OWORD *, uint64_t *))off_24C413FE0[v199])(&v162, __dst, &v196);
        if ((_DWORD)v199 != -1)
          ((void (*)(_OWORD *, uint64_t *))off_24C413F98[v199])(__dst, &v196);
        if (SHIBYTE(v163) < 0)
        {
          sub_20AEC60F4(__dst, (void *)v162, *((unint64_t *)&v162 + 1));
        }
        else
        {
          __dst[0] = v162;
          *(_QWORD *)&__dst[1] = v163;
        }
        BYTE8(__dst[1]) = 1;
        LOBYTE(__dst[2]) = 0;
        BYTE8(__dst[5]) = 0;
        LOBYTE(__dst[6]) = 1;
        sub_20B52280C((uint64_t)__dst, (uint64_t)v195);
        v149 = v195[0];
        v150.n128_u8[0] = 0;
        v158 = 0;
        if (v195[7].n128_u8[0])
        {
          v152 = 0;
          if (v195[2].n128_u8[8])
          {
            v150 = v195[1];
            v151 = v195[2].n128_u64[0];
            memset(&v195[1], 0, 24);
            v152 = 1;
          }
          v153.n128_u8[0] = 0;
          v157 = 0;
          if (v195[6].n128_u8[8])
          {
            v154 = v195[4];
            v153 = v195[3];
            memset(&v195[3], 0, 24);
            v155 = v195[5];
            v156 = v195[6].n128_u64[0];
            memset(&v195[5], 0, 24);
            v157 = 1;
          }
          v158 = 1;
          v159 = 0;
          if (v195[2].n128_u8[8] && v195[2].n128_i8[7] < 0)
            operator delete((void *)v195[1].n128_u64[0]);
        }
        else
        {
          v159 = 0;
        }
        if (LOBYTE(__dst[6]))
        {
          if (BYTE8(__dst[5]))
          {
            if (SBYTE7(__dst[5]) < 0)
              operator delete(*(void **)&__dst[4]);
            if (SBYTE7(__dst[3]) < 0)
              operator delete(*(void **)&__dst[2]);
          }
          if (BYTE8(__dst[1]) && SBYTE7(__dst[1]) < 0)
            operator delete(*(void **)&__dst[0]);
        }
        if (SHIBYTE(v163) < 0)
        {
          v98 = (void *)v162;
          goto LABEL_259;
        }
LABEL_260:
        if (__token[120])
          goto LABEL_261;
LABEL_316:
        if (__token[112])
        {
          if (__token[104])
          {
            if ((__token[103] & 0x80000000) != 0)
              operator delete(*(void **)&__token[80]);
            if ((__token[71] & 0x80000000) != 0)
              operator delete(*(void **)&__token[48]);
          }
          if (__token[40] && (__token[39] & 0x80000000) != 0)
            operator delete(*(void **)&__token[16]);
        }
        do
LABEL_261:
          v116 = __ldaxr(v16);
        while (__stlxr(v116 - 1, v16));
        v95 = v143;
        if (!v116)
        {
          (*(void (**)(char *))(*(_QWORD *)v15 + 16))(v15);
          v63 = (std::__shared_weak_count *)v15;
          goto LABEL_264;
        }
        goto LABEL_265;
      }
      (*(void (**)(__n128 *__return_ptr))(**((_QWORD **)v15 + 77) + 16))(v195);
      sub_20B2370DC((uint64_t)__token, (__int128 *)v195);
    }
    if (!v195[7].n128_u8[8] && v195[7].n128_u8[0])
    {
      if (v195[6].n128_u8[8])
      {
        if (v195[6].n128_i8[7] < 0)
          operator delete((void *)v195[5].n128_u64[0]);
        if (v195[4].n128_i8[7] < 0)
          operator delete((void *)v195[3].n128_u64[0]);
      }
      if (v195[2].n128_u8[8] && v195[2].n128_i8[7] < 0)
        operator delete((void *)v195[1].n128_u64[0]);
    }
    if (__token[120])
      goto LABEL_114;
    v195[0] = *(__n128 *)__token;
    v96 = sub_20AECEBD0(&v195[1], (__int128 *)&__token[16]);
    v149 = v195[0];
    v150.n128_u8[0] = 0;
    v158 = 0;
    if (!v195[7].n128_u8[0])
    {
      v159 = 0;
      if (__token[120])
        goto LABEL_261;
      goto LABEL_316;
    }
    v152 = 0;
    v97 = v195[2].n128_u8[8];
    if (v195[2].n128_u8[8])
    {
      v150 = *(__n128 *)v96;
      v151 = *((_QWORD *)v96 + 2);
      *((_QWORD *)v96 + 1) = 0;
      *((_QWORD *)v96 + 2) = 0;
      *(_QWORD *)v96 = 0;
      v152 = 1;
    }
    v153.n128_u8[0] = 0;
    v157 = 0;
    if (v195[6].n128_u8[8])
    {
      v154 = v195[4];
      v153 = v195[3];
      memset(&v195[3], 0, 24);
      v155 = v195[5];
      v156 = v195[6].n128_u64[0];
      memset(&v195[5], 0, 24);
      v157 = 1;
    }
    v158 = 1;
    v159 = 0;
    if (v97 && v195[2].n128_i8[7] < 0)
    {
      v98 = (void *)v195[1].n128_u64[0];
LABEL_259:
      operator delete(v98);
      goto LABEL_260;
    }
    goto LABEL_260;
  }
LABEL_114:
  v62 = *((_QWORD *)v15 + 68);
  v63 = (std::__shared_weak_count *)*((_QWORD *)v15 + 69);
  if (!v63)
  {
    v139 = 0;
    v66 = 0;
    v140 = 0;
    v136 = 0;
    v141 = 1;
    v142 = 1;
    v81 = 1;
    v67 = *((_QWORD *)v15 + 68);
    v71 = v67;
    v74 = v67;
    v138 = 1;
    if (!v144[8])
      goto LABEL_156;
    goto LABEL_132;
  }
  p_shared_weak_owners = (unint64_t *)&v63->__shared_weak_owners_;
  do
    v65 = __ldxr(p_shared_weak_owners);
  while (__stxr(v65 + 1, p_shared_weak_owners));
  v66 = (std::__shared_weak_count *)*((_QWORD *)v15 + 69);
  v67 = *((_QWORD *)v15 + 68);
  if (!v66)
  {
    v139 = 0;
    v140 = 0;
    v136 = 0;
    v141 = 1;
    v142 = 1;
    v81 = 1;
    v71 = *((_QWORD *)v15 + 68);
    v74 = v71;
    v138 = 1;
    if (!v144[8])
      goto LABEL_156;
    goto LABEL_132;
  }
  v68 = (unint64_t *)&v66->__shared_weak_owners_;
  do
    v69 = __ldxr(v68);
  while (__stxr(v69 + 1, v68));
  v70 = *((_QWORD *)v15 + 69);
  v71 = *((_QWORD *)v15 + 68);
  if (!v70)
  {
    v139 = 0;
    v81 = 0;
    v140 = 0;
    v136 = 0;
    v141 = 1;
    v142 = 1;
    v74 = *((_QWORD *)v15 + 68);
    v138 = 1;
    if (!v144[8])
      goto LABEL_156;
    goto LABEL_132;
  }
  v139 = (std::__shared_weak_count *)*((_QWORD *)v15 + 69);
  v72 = (unint64_t *)(v70 + 16);
  do
    v73 = __ldxr(v72);
  while (__stxr(v73 + 1, v72));
  v74 = *((_QWORD *)v15 + 68);
  v75 = *((_QWORD *)v15 + 69);
  if (!v75)
  {
    v81 = 0;
    v140 = 0;
    v136 = 0;
    v141 = 0;
    v142 = 1;
    v138 = 1;
    if (!v144[8])
      goto LABEL_156;
    goto LABEL_132;
  }
  v140 = (std::__shared_weak_count *)*((_QWORD *)v15 + 69);
  v76 = (unint64_t *)(v75 + 16);
  do
    v77 = __ldxr(v76);
  while (__stxr(v77 + 1, v76));
  v78 = *((_QWORD *)v15 + 69);
  if (!v78)
  {
    v141 = 0;
    v142 = 0;
    v81 = 0;
    v136 = 0;
    v138 = 1;
    if (!v144[8])
      goto LABEL_156;
LABEL_132:
    v137 = v81;
    v82 = v148;
    if (v15[576])
    {
      v83 = *((_QWORD *)v15 + 71);
      *((_QWORD *)v15 + 71) = 0;
      if (v83)
        (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
      v15[576] = 0;
    }
    if (v63)
    {
      v84 = (unint64_t *)&v63->__shared_weak_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    v195[0].n128_u64[0] = (unint64_t)&off_24C413CB8;
    v195[0].n128_u64[1] = v62;
    v195[1].n128_u64[0] = (unint64_t)v63;
    v195[1].n128_u64[1] = (unint64_t)v195;
    if ((v137 & 1) == 0)
    {
      v86 = (unint64_t *)&v66->__shared_weak_owners_;
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
    }
    *(_QWORD *)&__dst[0] = &off_24C413D38;
    *((_QWORD *)&__dst[0] + 1) = v67;
    v88 = v139;
    *(_QWORD *)&__dst[1] = v66;
    *((_QWORD *)&__dst[1] + 1) = __dst;
    if ((v141 & 1) == 0)
    {
      v89 = (unint64_t *)&v139->__shared_weak_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    v196 = (uint64_t)&off_24C413DC8;
    v197 = (std::__shared_weak_count *)v71;
    v198 = v139;
    v199 = &v196;
    v91 = v140;
    if ((v142 & 1) == 0)
    {
      v92 = (unint64_t *)&v140->__shared_weak_owners_;
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 1, v92));
    }
    v190.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C413E48;
    v190.__r_.__value_.__l.__size_ = v74;
    v190.__r_.__value_.__r.__words[2] = (std::string::size_type)v140;
    v191 = &v190;
    LOBYTE(v162) = 0;
    v164 = 0;
    if (v147)
    {
      sub_20AF43774(&v162, (uint64_t)v145);
      v164 = 1;
    }
    __token[0] = 0;
    __token[32] = 0;
    if (!v174)
    {
LABEL_189:
      *(_QWORD *)&v168 = v47;
      *((_QWORD *)&v168 + 1) = 1;
      v167 = *(_DWORD *)&v144[4];
      v166 = *(_WORD *)v144;
      v165 = v82 == 1;
      *((_QWORD *)v15 + 70) = &off_24C412220;
      sub_20B21F798(&v167, &v166, v195, __dst, &v196, &v190, (uint64_t)&v162, (uint64_t)__token, (uint64_t *)v15 + 71, (char *)&v165, &v168);
      v95 = v143;
      v81 = v137;
      if (__token[32])
      {
        v99 = *(_QWORD **)&__token[24];
        if (*(_BYTE **)&__token[24] == __token)
        {
          v100 = 4;
          v99 = __token;
          goto LABEL_194;
        }
        if (*(_QWORD *)&__token[24])
        {
          v100 = 5;
LABEL_194:
          (*(void (**)(void))(*v99 + 8 * v100))();
        }
      }
      if (v164)
      {
        v101 = v162;
        if ((_QWORD)v162)
        {
          v102 = *((_QWORD *)&v162 + 1);
          v103 = (void *)v162;
          if (*((_QWORD *)&v162 + 1) != (_QWORD)v162)
          {
            do
            {
              v104 = *(std::__shared_weak_count **)(v102 - 8);
              if (v104)
              {
                v105 = (unint64_t *)&v104->__shared_owners_;
                do
                  v106 = __ldaxr(v105);
                while (__stlxr(v106 - 1, v105));
                if (!v106)
                {
                  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                  std::__shared_weak_count::__release_weak(v104);
                }
              }
              v102 -= 16;
            }
            while (v102 != v101);
            v103 = (void *)v162;
          }
          *((_QWORD *)&v162 + 1) = v101;
          operator delete(v103);
          v91 = v140;
        }
      }
      v107 = v191;
      if (v191 == &v190)
      {
        v109 = 4;
        v107 = &v190;
        v108 = v138;
      }
      else
      {
        v108 = v138;
        if (!v191)
          goto LABEL_212;
        v109 = 5;
      }
      (*(void (**)(void))(v107->__r_.__value_.__r.__words[0] + 8 * v109))();
LABEL_212:
      v110 = v199;
      if (v199 == &v196)
      {
        v111 = 4;
        v110 = &v196;
      }
      else
      {
        if (!v199)
          goto LABEL_217;
        v111 = 5;
      }
      (*(void (**)(void))(*v110 + 8 * v111))();
LABEL_217:
      v112 = (_QWORD *)*((_QWORD *)&__dst[1] + 1);
      if (*((_OWORD **)&__dst[1] + 1) == __dst)
      {
        v113 = 4;
        v112 = __dst;
      }
      else
      {
        if (!*((_QWORD *)&__dst[1] + 1))
          goto LABEL_222;
        v113 = 5;
      }
      (*(void (**)(void))(*v112 + 8 * v113))();
LABEL_222:
      v114 = (__n128 *)v195[1].n128_u64[1];
      if ((__n128 *)v195[1].n128_u64[1] == v195)
      {
        v115 = 4;
        v114 = v195;
      }
      else
      {
        if (!v195[1].n128_u64[1])
          goto LABEL_227;
        v115 = 5;
      }
      (*(void (**)(void))(v114->n128_u64[0] + 8 * v115))();
LABEL_227:
      v15[576] = 1;
      v149 = v161;
      v159 = 1;
      if ((v108 & 1) != 0)
        goto LABEL_229;
      goto LABEL_228;
    }
    v94 = (uint64_t)v173;
    if (v173)
    {
      if (v173 == v172)
      {
        *(_QWORD *)&__token[24] = __token;
        (*(void (**)(_QWORD *, _BYTE *))(v172[0] + 24))(v172, __token);
        goto LABEL_188;
      }
      v94 = (*(uint64_t (**)(void))(*v173 + 16))();
    }
    *(_QWORD *)&__token[24] = v94;
LABEL_188:
    __token[32] = 1;
    goto LABEL_189;
  }
  v136 = (std::__shared_weak_count *)*((_QWORD *)v15 + 69);
  v79 = (unint64_t *)(v78 + 16);
  do
    v80 = __ldxr(v79);
  while (__stxr(v80 + 1, v79));
  v141 = 0;
  v142 = 0;
  v81 = 0;
  v138 = 0;
  if (v144[8])
    goto LABEL_132;
LABEL_156:
  v95 = v143;
  v88 = v139;
  v91 = v140;
  v149.n128_u64[0] = v47;
  v149.n128_u64[1] = (unint64_t)v15;
  v159 = 1;
  if ((v138 & 1) == 0)
LABEL_228:
    std::__shared_weak_count::__release_weak(v136);
LABEL_229:
  if ((v142 & 1) != 0)
  {
    if ((v141 & 1) != 0)
      goto LABEL_231;
LABEL_235:
    std::__shared_weak_count::__release_weak(v88);
    if ((v81 & 1) != 0)
    {
LABEL_232:
      if (!v63)
        goto LABEL_265;
LABEL_264:
      std::__shared_weak_count::__release_weak(v63);
      goto LABEL_265;
    }
    goto LABEL_236;
  }
  std::__shared_weak_count::__release_weak(v91);
  if ((v141 & 1) == 0)
    goto LABEL_235;
LABEL_231:
  if ((v81 & 1) != 0)
    goto LABEL_232;
LABEL_236:
  std::__shared_weak_count::__release_weak(v66);
  if (v63)
    goto LABEL_264;
LABEL_265:
  if (!v159)
  {
    sub_20B0B52D8((uint64_t)&v149);
    sub_20B0BFB50((uint64_t)&v149);
  }
  *(__n128 *)(v95 + 1) = v149;
  v149 = 0uLL;
  if (v171)
  {
    v117 = v170;
    if (v170 == v169)
    {
      v118 = 4;
      v117 = v169;
    }
    else
    {
      if (!v170)
        goto LABEL_272;
      v118 = 5;
    }
    (*(void (**)(void))(*v117 + 8 * v118))();
  }
LABEL_272:
  if (v174)
  {
    v119 = v173;
    if (v173 == v172)
    {
      v120 = 4;
      v119 = v172;
      goto LABEL_277;
    }
    if (v173)
    {
      v120 = 5;
LABEL_277:
      (*(void (**)(void))(*v119 + 8 * v120))();
    }
  }
  if (v147)
  {
    v121 = (char *)v145[0];
    if (v145[0])
    {
      v122 = (char *)v145[1];
      v123 = v145[0];
      if (v145[1] != v145[0])
      {
        do
        {
          v124 = (std::__shared_weak_count *)*((_QWORD *)v122 - 1);
          if (v124)
          {
            v125 = (unint64_t *)&v124->__shared_owners_;
            do
              v126 = __ldaxr(v125);
            while (__stlxr(v126 - 1, v125));
            if (!v126)
            {
              ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
              std::__shared_weak_count::__release_weak(v124);
            }
          }
          v122 -= 16;
        }
        while (v122 != v121);
        v123 = v145[0];
      }
      v145[1] = v121;
      operator delete(v123);
    }
  }
  if (v186)
  {
    v127 = v185;
    if (v185 == v184)
    {
      v128 = 4;
      v127 = v184;
    }
    else
    {
      if (!v185)
        goto LABEL_296;
      v128 = 5;
    }
    (*(void (**)(void))(*v127 + 8 * v128))();
  }
LABEL_296:
  if (!v183)
    goto LABEL_302;
  v129 = v182;
  if (v182 == v181)
  {
    v130 = 4;
    v129 = v181;
  }
  else
  {
    if (!v182)
      goto LABEL_302;
    v130 = 5;
  }
  (*(void (**)(void))(*v129 + 8 * v130))();
LABEL_302:
  if (!v180)
    goto LABEL_308;
  v131 = v179;
  if (v179 == v178)
  {
    v132 = 4;
    v131 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_308;
    v132 = 5;
  }
  (*(void (**)(void))(*v131 + 8 * v132))();
LABEL_308:
  if (v177)
  {
    v133 = v176;
    if (v176 == v175)
    {
      v134 = 4;
      v133 = v175;
      goto LABEL_313;
    }
    if (v176)
    {
      v134 = 5;
LABEL_313:
      (*(void (**)(void))(*v133 + 8 * v134))();
    }
  }
  return v95;
}

void sub_20B23D814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,char *a60,char a61,int a62,char a63)
{
  char *a66;
  char a67;
  char a69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;

  if (a52 < 0)
    operator delete(__p);
  sub_20AECD704((uint64_t)&STACK[0x2A0]);
  sub_20AEC147C((uint64_t)&a45);
  if (a61)
  {
    v71 = a60;
    if (a60 == &a57)
    {
      v72 = 4;
      v71 = &a57;
    }
    else
    {
      if (!a60)
        goto LABEL_12;
      v72 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v71 + 8 * v72))();
  }
LABEL_12:
  if (a67)
  {
    v73 = a66;
    if (a66 == &a63)
    {
      v70 = 4;
      v73 = &a63;
    }
    else
    {
      if (!a66)
        goto LABEL_16;
      v70 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v73 + 8 * v70))();
  }
LABEL_16:
  sub_20AF3FB48((uint64_t)&a20);
  sub_20B2374C8((uint64_t)&a69);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B23DD7C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C413A58;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B23DDF0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C413A58;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B23DE64(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 20;
}

void sub_20B23DE70(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_20B239580(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

void sub_20B23DE78(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_20B23B2C8(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t sub_20B23DE80(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 592);
}

uint64_t sub_20B23DE94(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 592);
}

void sub_20B23DEA8(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  std::mutex *v3;
  int v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  v6 = a2[1];
  v7 = *((_QWORD *)a2 + 4);
  v3 = *(std::mutex **)(v2 + 560);
  std::mutex::lock(v3);
  v4 = *(unsigned __int8 *)(v2 + 512);
  *(_OWORD *)(v2 + 472) = v5;
  *(_OWORD *)(v2 + 488) = v6;
  *(_QWORD *)(v2 + 504) = v7;
  if (!v4)
    *(_BYTE *)(v2 + 512) = 1;
  std::mutex::unlock(v3);
}

void sub_20B23DF24(uint64_t *a1, uint64_t a2, char a3, uint64_t a4)
{
  char **v7;
  char *v8[2];
  void *__p[2];
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a4 + 23) < 0)
  {
    sub_20AEC60F4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a4;
    v10 = *(_QWORD *)(a4 + 16);
  }
  v11 = 1;
  v8[0] = 0;
  v8[1] = 0;
  v7 = v8;
  sub_20AF4043C((uint64_t **)&v7, (uint64_t *)v8, (const void **)__p, (uint64_t)__p);
  sub_20B23E03C(a1, a2, a3, (const void ***)&v7);
  sub_20AEC833C((uint64_t)&v7, v8[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_20B23E010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC833C((uint64_t)&a10, a11);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B23E03C(uint64_t *a1, uint64_t a2, char a3, const void ***a4)
{
  const void ***v7;
  const void **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  const void **v13;
  const void ***v14;
  BOOL v15;
  char *v16;
  char *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  char **v22;
  char *v23[2];
  void *__p;
  char *v25;
  _QWORD v26[2];
  std::__shared_weak_count *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v23[0] = 0;
  v23[1] = 0;
  v22 = v23;
  v7 = a4 + 1;
  v8 = *a4;
  if (*a4 != (const void **)(a4 + 1))
  {
    do
    {
      sub_20AF4043C((uint64_t **)&v22, (uint64_t *)v23, v8 + 4, (uint64_t)(v8 + 4));
      v13 = (const void **)v8[1];
      if (v13)
      {
        do
        {
          v14 = (const void ***)v13;
          v13 = (const void **)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (const void ***)v8[2];
          v15 = *v14 == v8;
          v8 = (const void **)v14;
        }
        while (!v15);
      }
      v8 = (const void **)v14;
    }
    while (v14 != v7);
  }
  sub_20B0BE3D8(&v22, v26);
  sub_20B21E85C(&__p, (uint64_t)v26, 1uLL);
  v9 = v27;
  if (!v27)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    sub_20AEC833C((uint64_t)&v22, v23[0]);
    v12 = *a1;
    if (a3)
      goto LABEL_7;
  }
  else
  {
LABEL_6:
    sub_20AEC833C((uint64_t)&v22, v23[0]);
    v12 = *a1;
    if (a3)
    {
LABEL_7:
      (*(void (**)(uint64_t *, void **, uint64_t))(v12 + 24))(a1, &__p, a2);
      goto LABEL_17;
    }
  }
  (*(void (**)(uint64_t *, void **))(v12 + 32))(a1, &__p);
LABEL_17:
  v16 = (char *)__p;
  if (__p)
  {
    v17 = v25;
    v18 = __p;
    if (v25 != __p)
    {
      do
      {
        v19 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v17 -= 24;
      }
      while (v17 != v16);
      v18 = __p;
    }
    v25 = v16;
    operator delete(v18);
  }
}

void sub_20B23E244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B0B8EC0((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B23E258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_20B216B00((uint64_t)&a15);
  sub_20AEC833C((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20B23E278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20AEC833C((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20B23E290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20AEC833C((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20B23E2A8(uint64_t *a1, uint64_t a2, char a3, uint64_t a4)
{
  char **v7;
  char *v8[2];
  void *__p[2];
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a4 + 23) < 0)
  {
    sub_20AEC60F4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a4;
    v10 = *(_QWORD *)(a4 + 16);
  }
  v11 = 2;
  v8[0] = 0;
  v8[1] = 0;
  v7 = v8;
  sub_20AF4043C((uint64_t **)&v7, (uint64_t *)v8, (const void **)__p, (uint64_t)__p);
  sub_20B23E03C(a1, a2, a3, (const void ***)&v7);
  sub_20AEC833C((uint64_t)&v7, v8[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_20B23E394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC833C((uint64_t)&a10, a11);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B23E3C0(uint64_t *a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  char **v9;
  char *v10[2];
  void *__p[2];
  uint64_t v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a4 + 23) < 0)
  {
    sub_20AEC60F4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a4;
    v12 = *(_QWORD *)(a4 + 16);
  }
  v13 = a5;
  v10[0] = 0;
  v10[1] = 0;
  v9 = v10;
  sub_20AF4043C((uint64_t **)&v9, (uint64_t *)v10, (const void **)__p, (uint64_t)__p);
  sub_20B23E03C(a1, a2, a3, (const void ***)&v9);
  sub_20AEC833C((uint64_t)&v9, v10[0]);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
}

void sub_20B23E4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC833C((uint64_t)&a10, a11);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B23E4E0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  char v19;
  char *v20;
  _BYTE v21[24];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = sub_20AEC01D0(a1, (uint64_t)"Server<", 7);
  v16 = a2;
  v22 = 0;
  sub_20AED5838((uint64_t)&v20, (uint64_t)v21, &v16);
  if (v22 == -1)
    sub_20AECFAB8();
  v20 = &v19;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C413FE0[v22])(__p, &v20, v21);
  if (v22 != -1)
    ((void (*)(char **, _BYTE *))off_24C413F98[v22])(&v20, v21);
  if ((v18 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v5 = v18;
  else
    v5 = (uint64_t)__p[1];
  v6 = sub_20AEC01D0(v3, (uint64_t)v4, v5);
  v7 = sub_20AEC01D0(v6, (uint64_t)">{", 2);
  v8 = *(_QWORD *)(a2 + 8);
  sub_20B5211A0((unsigned __int8 *)(v8 + 20), v21);
  v9 = sub_20AEC01D0(v7, (uint64_t)v21, 36);
  v10 = sub_20AEC01D0(v9, (uint64_t)", tcp/ip ", 9);
  if (*(_BYTE *)(v8 + 552))
    v11 = "enabled";
  else
    v11 = "disabled";
  if (*(_BYTE *)(v8 + 552))
    v12 = 7;
  else
    v12 = 8;
  v13 = sub_20AEC01D0(v10, (uint64_t)v11, v12);
  v14 = sub_20AEC01D0(v13, (uint64_t)"}", 1);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  return v14;
}

void sub_20B23E670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B23E6C4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(_QWORD **)(a1 + 72);
    if (v2 == (_QWORD *)(a1 + 48))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 48);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  if (*(_BYTE *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 32);
    if (v4 == (_QWORD *)(a1 + 8))
    {
      v5 = 4;
      v4 = (_QWORD *)(a1 + 8);
      goto LABEL_12;
    }
    if (v4)
    {
      v5 = 5;
LABEL_12:
      (*(void (**)(void))(*v4 + 8 * v5))();
    }
  }
  return a1;
}

void sub_20B23E754(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(_QWORD **)(a1 + 72);
    if (v2 == (_QWORD *)(a1 + 48))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 48);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  if (!*(_BYTE *)(a1 + 40))
    goto LABEL_13;
  v4 = *(_QWORD **)(a1 + 32);
  if (v4 == (_QWORD *)(a1 + 8))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 8);
  }
  else
  {
    if (!v4)
      goto LABEL_13;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_13:
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B23E7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v12[4];
  char v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;

  if (*(_BYTE *)(a1 + 40))
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (!v8)
      sub_20AECABA4();
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 32))(v12, a2);
  if (v21)
  {
    v9 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, v12[0], a3, a4);
    if (!*(_BYTE *)(a1 + 80))
      goto LABEL_10;
  }
  else
  {
    v9 = 0;
    if (!*(_BYTE *)(a1 + 80))
      goto LABEL_10;
  }
  v22 = v9;
  v10 = *(_QWORD *)(a1 + 72);
  if (!v10)
    sub_20AECABA4();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v10 + 48))(v10, &v22);
LABEL_10:
  if (v21 || !v20)
    return v9;
  if (v19)
  {
    if (v18 < 0)
      operator delete(__p);
    if (v16 < 0)
      operator delete(v15);
  }
  if (!v14 || (v13 & 0x80000000) == 0)
    return v9;
  operator delete(v12[2]);
  return v9;
}

void sub_20B23E930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECD704((uint64_t)va);
  _Unwind_Resume(a1);
}

const char *sub_20B23E944()
{
  return "lockstep";
}

void sub_20B23E950(uint64_t a1, std::unique_lock<std::mutex> *__lk, char a3)
{
  int v5;
  std::mutex *v6;
  std::mutex *v7;
  std::mutex *v8;
  unsigned __int8 v9;

  v8 = (std::mutex *)(a1 + 168);
  v9 = 0;
  if (a3)
  {
    v5 = 0;
    if (!*(_BYTE *)(a1 + 240))
      goto LABEL_11;
  }
  else
  {
    std::mutex::lock((std::mutex *)(a1 + 168));
    v5 = 1;
    v9 = 1;
    __lk = (std::unique_lock<std::mutex> *)&v8;
    if (!*(_BYTE *)(a1 + 240))
      goto LABEL_11;
  }
  atomic_store(1u, (unsigned __int8 *)(a1 + 241));
  if (!*(_BYTE *)(a1 + 304))
    goto LABEL_15;
  v6 = *(std::mutex **)(a1 + 280);
  std::mutex::lock(v6);
  v7 = *(std::mutex **)(a1 + 296);
  if (v7)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 296));
    std::condition_variable::notify_all(*(std::condition_variable **)(a1 + 288));
    std::mutex::unlock(v7);
  }
  std::mutex::unlock(v6);
  if (*(_BYTE *)(a1 + 240))
  {
LABEL_15:
    do
      std::condition_variable::wait((std::condition_variable *)(a1 + 312), __lk);
    while (*(_BYTE *)(a1 + 240));
    v5 = v9;
  }
LABEL_11:
  if (v5)
    std::mutex::unlock(v8);
}

void sub_20B23EA48(_Unwind_Exception *a1)
{
  std::mutex *v1;
  std::mutex *v2;
  uint64_t v3;

  std::mutex::unlock(v2);
  if (!v3)
    std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B23EA70(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C413AA8;
  *(_QWORD *)(a1 + 8) = &unk_24C413B40;
  sub_20B23E950(a1, 0, 0);
  sub_20B241C3C(a1 + 168);
  sub_20B1F7D90(*(_QWORD **)(a1 + 152));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 96));
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  return a1;
}

void sub_20B23EAD0(uint64_t a1)
{
  *(_QWORD *)(a1 - 8) = &off_24C413AA8;
  *(_QWORD *)a1 = &unk_24C413B40;
  sub_20B23E950(a1 - 8, 0, 0);
  sub_20B241C3C(a1 + 160);
  sub_20B1F7D90(*(_QWORD **)(a1 + 144));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void sub_20B23EB2C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C413AA8;
  *(_QWORD *)(a1 + 8) = &unk_24C413B40;
  sub_20B23E950(a1, 0, 0);
  sub_20B241C3C(a1 + 168);
  sub_20B1F7D90(*(_QWORD **)(a1 + 152));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 96));
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B23EB9C(uint64_t a1)
{
  *(_QWORD *)(a1 - 8) = &off_24C413AA8;
  *(_QWORD *)a1 = &unk_24C413B40;
  sub_20B23E950(a1 - 8, 0, 0);
  sub_20B241C3C(a1 + 160);
  sub_20B1F7D90(*(_QWORD **)(a1 + 144));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B23EC18(unint64_t *a1)
{
  sub_20B23E950((uint64_t)a1, 0, 0);
  atomic_store((unint64_t)"waiting", a1 + 29);
  return (*(uint64_t (**)(unint64_t *))(*a1 + 64))(a1);
}

uint64_t sub_20B23EC64(uint64_t a1)
{
  uint64_t v2;
  std::unique_lock<std::mutex> v4;

  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 168);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 168));
  sub_20B23E950(a1, &v4, 1);
  if (*(_BYTE *)(a1 + 440))
  {
    v2 = *(_QWORD *)(a1 + 432);
    *(_QWORD *)(a1 + 432) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *(_BYTE *)(a1 + 440) = 0;
  }
  if (v4.__owns_)
    std::mutex::unlock(v4.__m_);
  atomic_store((unint64_t)"proceeding", (unint64_t *)(a1 + 232));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

void sub_20B23ED08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void sub_20B23ED24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_20B23E950(a1, 0, 0);
  std::mutex::lock((std::mutex *)(a1 + 360));
  while (!std::mutex::try_lock((std::mutex *)(a1 + 168)))
  {
    std::mutex::unlock((std::mutex *)(a1 + 360));
    sched_yield();
    std::mutex::lock((std::mutex *)(a1 + 168));
    if (std::mutex::try_lock((std::mutex *)(a1 + 360)))
      break;
    std::mutex::unlock((std::mutex *)(a1 + 168));
    sched_yield();
    std::mutex::lock((std::mutex *)(a1 + 360));
  }
  if (*(_BYTE *)(a1 + 440))
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_QWORD *)(a1 + 432);
    *(_QWORD *)(a1 + 432) = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a1 + 424) = &off_24C411C90;
    *(_QWORD *)(a1 + 432) = v6;
    *(_BYTE *)(a1 + 440) = 1;
  }
  sub_20B23EE2C(a1);
  std::mutex::unlock((std::mutex *)(a1 + 360));
  std::mutex::unlock((std::mutex *)(a1 + 168));
}

void sub_20B23EE10(_Unwind_Exception *a1)
{
  std::mutex *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

std::thread *sub_20B23EE2C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  std::mutex *v7;
  std::mutex *v8;
  std::mutex *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  pthread_t *v14;
  std::__thread_struct *v15;
  _QWORD *v16;
  int v17;
  std::thread *result;
  _QWORD v19[3];
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;
  std::mutex *v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 240)
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/Server.cpp", 888, (uint64_t)"!control_.pattern_running", 25, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| *(_QWORD *)(a1 + 448)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/Server.cpp", 889, (uint64_t)"!control_.thread", 16, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  atomic_store(0, (unsigned __int8 *)(a1 + 241));
  *(_BYTE *)(a1 + 240) = 1;
  atomic_store((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 432) + 24))(*(_QWORD *)(a1 + 432)), (unint64_t *)(a1 + 232));
  v19[0] = &off_24C4141F0;
  v19[1] = a1;
  v20 = v19;
  v21[0] = &off_24C4141F0;
  v22 = v21;
  v21[1] = a1;
  v2 = operator new();
  *(_QWORD *)v2 = 850045863;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)(v2 + 56) = 0;
  v24 = 0uLL;
  v23 = (std::mutex *)v2;
  v3 = (_QWORD *)(a1 + 248);
  if (!*(_BYTE *)(a1 + 304))
  {
    if (v22)
    {
      if (v22 == v21)
      {
        *(_QWORD *)(a1 + 272) = v3;
        (*(void (**)(_QWORD *, uint64_t))(v21[0] + 24))(v21, a1 + 248);
        v2 = (uint64_t)v23;
      }
      else
      {
        *(_QWORD *)(a1 + 272) = v22;
        v22 = 0;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 272) = 0;
    }
    *(_QWORD *)(a1 + 280) = v2;
    *(_OWORD *)(a1 + 288) = v24;
    *(_BYTE *)(a1 + 304) = 1;
    v23 = 0;
    v10 = v22;
    if (v22 == v21)
      goto LABEL_30;
    goto LABEL_25;
  }
  v4 = *(_QWORD **)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  if (v4 == v3)
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 248);
  }
  else
  {
    if (!v4)
      goto LABEL_14;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_14:
  v6 = (_QWORD *)(a1 + 272);
  if (v22)
  {
    if (v22 == v21)
    {
      *v6 = v3;
      (*(void (**)(_QWORD *, uint64_t))(v21[0] + 24))(v21, a1 + 248);
    }
    else
    {
      *v6 = v22;
      v22 = 0;
    }
  }
  else
  {
    *v6 = 0;
  }
  v7 = v23;
  v23 = 0;
  v8 = *(std::mutex **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v7;
  if (v8)
  {
    std::mutex::~mutex(v8);
    MEMORY[0x20BD3583C]();
    v9 = v23;
    *(_OWORD *)(a1 + 288) = v24;
    v23 = 0;
    if (v9)
    {
      std::mutex::~mutex(v9);
      MEMORY[0x20BD3583C]();
      v10 = v22;
      if (v22 == v21)
        goto LABEL_30;
      goto LABEL_25;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 288) = v24;
    v23 = 0;
  }
  v10 = v22;
  if (v22 == v21)
  {
LABEL_30:
    v11 = 4;
    v10 = v21;
    goto LABEL_31;
  }
LABEL_25:
  if (!v10)
    goto LABEL_32;
  v11 = 5;
LABEL_31:
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_32:
  v12 = v20;
  if (v20 == v19)
  {
    v13 = 4;
    v12 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_37;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_37:
  v14 = (pthread_t *)operator new();
  v15 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v15);
  v16 = (_QWORD *)operator new();
  *v16 = v15;
  v16[1] = a1;
  v17 = pthread_create(v14, 0, (void *(__cdecl *)(void *))sub_20B241D0C, v16);
  if (v17)
  {
    std::__throw_system_error(v17, "thread constructor failed");
    __break(1u);
  }
  result = *(std::thread **)(a1 + 448);
  *(_QWORD *)(a1 + 448) = v14;
  if (result)
  {
    std::thread::~thread(result);
    return (std::thread *)MEMORY[0x20BD3583C]();
  }
  return result;
}

void sub_20B23F208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B23F2CC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  *v0 = 0;
  if (v1)
  {
    v2 = MEMORY[0x20BD35314]();
    MEMORY[0x20BD3583C](v2, 0x20C4093837F09);
  }
  JUMPOUT(0x20B23F300);
}

void sub_20B23F32C(uint64_t a1)
{
  std::mutex *v2;
  int v3;
  char v4;
  char v5;
  char *v6;
  void *v7;
  char v8;
  char v9;
  void *v10;
  char v11;
  void *__p;
  char v13;
  char v14;
  char v15;
  char v16;

  v2 = (std::mutex *)(a1 + 168);
  std::mutex::lock((std::mutex *)(a1 + 168));
  v3 = *(unsigned __int8 *)(a1 + 240);
  std::mutex::unlock(v2);
  if (v3)
    return;
  std::mutex::lock((std::mutex *)(a1 + 360));
  while (!std::mutex::try_lock(v2))
  {
    std::mutex::unlock((std::mutex *)(a1 + 360));
    sched_yield();
    std::mutex::lock(v2);
    if (std::mutex::try_lock((std::mutex *)(a1 + 360)))
      break;
    std::mutex::unlock(v2);
    sched_yield();
    std::mutex::lock((std::mutex *)(a1 + 360));
  }
  if (*(_BYTE *)(a1 + 240))
  {
    v4 = 1;
    goto LABEL_8;
  }
  v6 = (char *)atomic_load((unint64_t *)(a1 + 232));
  if (v6 != "waiting")
  {
    std::mutex::unlock((std::mutex *)(a1 + 360));
    std::mutex::unlock(v2);
    return;
  }
  if (*(_BYTE *)(a1 + 440))
  {
    sub_20B23EE2C(a1);
    v4 = 0;
LABEL_8:
    v5 = 1;
    std::mutex::unlock((std::mutex *)(a1 + 360));
    std::mutex::unlock(v2);
    if ((v4 & 1) != 0)
      return;
    goto LABEL_12;
  }
  v5 = 0;
  std::mutex::unlock((std::mutex *)(a1 + 360));
  std::mutex::unlock(v2);
LABEL_12:
  if ((v5 & 1) == 0)
  {
    sub_20B23EC64(a1);
    if (!v16)
    {
      if (v15)
      {
        if (v14)
        {
          if (v13 < 0)
            operator delete(__p);
          if (v11 < 0)
            operator delete(v10);
        }
        if (v9)
        {
          if (v8 < 0)
            operator delete(v7);
        }
      }
    }
  }
}

void sub_20B23F4E0(_Unwind_Exception *a1)
{
  std::mutex *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20B23F4FC(uint64_t a1)
{
  return atomic_load((unint64_t *)(a1 + 232));
}

void sub_20B23F508(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  char v15;
  char v16;
  char v17;
  int v18;
  char v19;
  void *__p;
  char *v21;
  _QWORD v22[2];
  char v23;
  char v24;
  char v25;
  _QWORD v26[2];
  std::__shared_weak_count *v27;
  uint64_t v28;

  v1 = a1;
  v28 = *MEMORY[0x24BDAC8D0];
  v2 = a1[2];
  v3 = v1[3];
  v1 += 2;
  v1[1] = v3 + 1;
  v22[0] = v3;
  v22[1] = 0;
  v23 = 1;
  v24 = 0;
  v25 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 56))(v2, v22);
  v4 = *v1;
  v14 = v3;
  v15 = 1;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  sub_20B0BB38C(&v14, v26);
  sub_20B21E85C(&__p, (uint64_t)v26, 1uLL);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 32))(v4, &__p);
  v5 = (char *)__p;
  if (__p)
  {
    v6 = v21;
    v7 = __p;
    if (v21 != __p)
    {
      do
      {
        v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v21 = v5;
    operator delete(v7);
  }
  v11 = v27;
  if (v27)
  {
    v12 = (unint64_t *)&v27->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_20B23F68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_20B0B8EC0((void **)va);
  sub_20B216B00(v9 - 64);
  _Unwind_Resume(a1);
}

void sub_20B23F6A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B216B00(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20B23F6C0(uint64_t a1)
{
  sub_20B23F508((uint64_t *)(a1 - 8));
}

void sub_20B23F6C8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  char v15;
  char v16;
  char v17;
  int v18;
  char v19;
  void *__p;
  char *v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  _QWORD v27[2];
  std::__shared_weak_count *v28;
  uint64_t v29;

  v1 = a1;
  v29 = *MEMORY[0x24BDAC8D0];
  v2 = a1[2];
  v3 = v1[3];
  v1 += 2;
  v1[1] = v3 + 1;
  v22 = v3;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 56))(v2, &v22);
  v4 = *v1;
  *(_QWORD *)&v14 = v3;
  BYTE8(v14) = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  sub_20B0BB38C(&v14, v27);
  sub_20B21E85C(&__p, (uint64_t)v27, 1uLL);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 32))(v4, &__p);
  v5 = (char *)__p;
  if (__p)
  {
    v6 = v21;
    v7 = __p;
    if (v21 != __p)
    {
      do
      {
        v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v21 = v5;
    operator delete(v7);
  }
  v11 = v28;
  if (v28)
  {
    v12 = (unint64_t *)&v28->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_20B23F854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_20B0B8EC0((void **)va);
  sub_20B216B00(v9 - 64);
  _Unwind_Resume(a1);
}

void sub_20B23F870(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B216B00(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20B23F888(uint64_t a1)
{
  sub_20B23F6C8((uint64_t *)(a1 - 8));
}

void sub_20B23F890(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  void *v20;
  char v21;
  char v22;
  char v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  char v31;
  void *__p;
  char *v33;
  __int128 v34;
  __int128 v35;
  char v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  char v42;
  char v43;
  char v44;
  _QWORD v45[2];
  char v46;
  char v47;
  char v48;
  _QWORD v49[2];
  std::__shared_weak_count *v50;
  uint64_t v51;

  v2 = a1;
  v51 = *MEMORY[0x24BDAC8D0];
  v4 = a1[2];
  v5 = v2[3];
  v2 += 2;
  v2[1] = v5 + 1;
  v45[0] = v5;
  v45[1] = 0;
  v46 = 1;
  v47 = 0;
  v48 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 56))(v4, v45);
  v6 = *v2;
  *(_QWORD *)&v19 = v5;
  *((_QWORD *)&v19 + 1) = 1;
  LOBYTE(v20) = 1;
  v21 = 0;
  v22 = 0;
  v24 = 0;
  LOBYTE(v25) = 1;
  sub_20B0BB38C(&v19, v49);
  sub_20B21E85C(&__p, (uint64_t)v49, 1uLL);
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v6 + 32))(&v34, v6, &__p);
  v7 = (char *)__p;
  if (__p)
  {
    v8 = v33;
    v9 = __p;
    if (v33 != __p)
    {
      do
      {
        v10 = (std::__shared_weak_count *)*((_QWORD *)v8 - 1);
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v8 -= 24;
      }
      while (v8 != v7);
      v9 = __p;
    }
    v33 = v7;
    operator delete(v9);
  }
  v13 = v50;
  if (!v50)
    goto LABEL_16;
  v14 = (unint64_t *)&v50->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v44)
      goto LABEL_17;
  }
  else
  {
LABEL_16:
    if (v44)
    {
LABEL_17:
      *(_QWORD *)a2 = v5;
      *(_BYTE *)(a2 + 120) = 1;
      return;
    }
  }
  v19 = v34;
  v16 = sub_20AECEBD0(&v20, &v35);
  *(_OWORD *)a2 = v19;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (v31)
  {
    *(_BYTE *)(a2 + 40) = 0;
    v17 = v24;
    if ((_BYTE)v24)
    {
      *(_OWORD *)(a2 + 16) = *(_OWORD *)v16;
      *(_QWORD *)(a2 + 32) = *((_QWORD *)v16 + 2);
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = 0;
      *(_QWORD *)v16 = 0;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (v30)
    {
      v18 = v27;
      *(_QWORD *)(a2 + 64) = v26;
      *(_OWORD *)(a2 + 48) = v25;
      v25 = 0uLL;
      *(_QWORD *)(a2 + 72) = v18;
      *(_OWORD *)(a2 + 80) = v28;
      *(_QWORD *)(a2 + 96) = v29;
      v26 = 0;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    if (v17 && v23 < 0)
      operator delete(v20);
  }
  else
  {
    *(_BYTE *)(a2 + 120) = 0;
  }
  if (!v44 && v43)
  {
    if (v42)
    {
      if (v41 < 0)
        operator delete(v40);
      if (v39 < 0)
        operator delete(v38);
    }
    if (v37)
    {
      if (v36 < 0)
        operator delete((void *)v35);
    }
  }
}

void sub_20B23FB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20AECD704((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20B23FB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_20B0B8EC0((void **)va);
  sub_20B216B00(v17 - 80);
  _Unwind_Resume(a1);
}

void sub_20B23FB98(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B216B00(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_20B23FBB4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_20B23F890((uint64_t *)(a1 - 8), a2);
}

void sub_20B23FBBC(uint64_t a1, unint64_t a2, _QWORD *a3, char a4)
{
  uint64_t v8;
  std::mutex *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  std::mutex *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  std::unique_lock<std::mutex> v24;

  v8 = a1 + 32;
  v24.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  v24.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  if (a4)
  {
    v9 = (std::mutex *)a3[4];
    std::mutex::lock(v9);
    a3[5] = a1 + 96;
    a3[6] = v8;
    std::mutex::unlock(v9);
    v10 = (_QWORD *)(a1 + 152);
    v11 = *(_QWORD **)(a1 + 144);
    if (v11 != (_QWORD *)(a1 + 152))
      goto LABEL_6;
LABEL_3:
    while (2)
    {
      v12 = 1;
      v13 = a3[3];
      if (!v13)
        goto LABEL_24;
LABEL_20:
      if (((v12 | (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13)) & 1) == 0)
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 96), &v24);
        v11 = *(_QWORD **)(a1 + 144);
        if (v11 == v10)
          continue;
LABEL_6:
        while (*((_BYTE *)v11 + 104))
        {
          if (*((_BYTE *)v11 + 64))
          {
            if (!*((_BYTE *)v11 + 56))
            {
              v12 = 0;
              v13 = a3[3];
              if (!v13)
                goto LABEL_24;
              goto LABEL_20;
            }
            v14 = v11[6];
            if (v14 <= a2)
            {
              v12 = 0;
              if (*((unsigned __int8 *)v11 + 64) > 2u || v14 != a2)
                goto LABEL_19;
            }
          }
          v15 = (_QWORD *)v11[1];
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v11[2];
              v17 = *v16 == (_QWORD)v11;
              v11 = v16;
            }
            while (!v17);
          }
          v11 = v16;
          if (v16 == v10)
            goto LABEL_3;
        }
        v12 = 0;
LABEL_19:
        v13 = a3[3];
        if (v13)
          goto LABEL_20;
LABEL_24:
        sub_20AECABA4();
      }
      break;
    }
    if (!v24.__owns_)
    {
      std::__throw_system_error(1, "unique_lock::unlock: not locked");
      __break(1u);
      return;
    }
    std::mutex::unlock(v24.__m_);
    v24.__owns_ = 0;
    v18 = (std::mutex *)a3[4];
    std::mutex::lock(v18);
    a3[5] = 0;
    a3[6] = 0;
    std::mutex::unlock(v18);
    if (v24.__owns_)
      goto LABEL_27;
  }
  else
  {
    v19 = (_QWORD *)(a1 + 152);
    while (1)
    {
      v20 = *(_QWORD **)(a1 + 144);
      if (v20 == v19)
        break;
      while (*((_BYTE *)v20 + 104))
      {
        if (*((_BYTE *)v20 + 64))
        {
          if (!*((_BYTE *)v20 + 56))
            break;
          v21 = v20[6];
          if (v21 <= a2 && (*((unsigned __int8 *)v20 + 64) > 2u || v21 != a2))
            break;
        }
        v22 = (_QWORD *)v20[1];
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v20[2];
            v17 = *v23 == (_QWORD)v20;
            v20 = v23;
          }
          while (!v17);
        }
        v20 = v23;
        if (v23 == v19)
          goto LABEL_44;
      }
      std::condition_variable::wait((std::condition_variable *)(a1 + 96), &v24);
    }
LABEL_44:
    if (v24.__owns_)
LABEL_27:
      std::mutex::unlock(v24.__m_);
  }
}

void sub_20B23FE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void sub_20B23FE48(uint64_t a1, unint64_t a2, _QWORD *a3, char a4)
{
  sub_20B23FBBC(a1 - 8, a2, a3, a4);
}

void sub_20B23FE50(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4, unsigned __int8 a5)
{
  uint64_t v10;
  uint64_t v11;
  std::mutex *v12;
  std::chrono::steady_clock::time_point v13;
  _QWORD *v14;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v15;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v16;
  _QWORD *v17;
  char v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  std::chrono::steady_clock::time_point v24;
  std::chrono::system_clock::time_point v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  std::mutex *v31;
  std::unique_lock<std::mutex> v32;

  v10 = a1 + 32;
  v32.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  v32.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  v11 = a5;
  if (a5)
  {
    v12 = (std::mutex *)a4[4];
    std::mutex::lock(v12);
    a4[5] = a1 + 96;
    a4[6] = v10;
    std::mutex::unlock(v12);
  }
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + a3;
  v14 = (_QWORD *)(a1 + 152);
  while (1)
  {
    v17 = *(_QWORD **)(a1 + 144);
    if (v17 == v14)
      break;
    while (1)
    {
      if (!*((_BYTE *)v17 + 104))
      {
        v18 = 0;
LABEL_25:
        if (!v11)
          goto LABEL_31;
        goto LABEL_26;
      }
      if (*((_BYTE *)v17 + 64))
        break;
LABEL_18:
      v20 = (_QWORD *)v17[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v17[2];
          v22 = *v21 == (_QWORD)v17;
          v17 = v21;
        }
        while (!v22);
      }
      v17 = v21;
      if (v21 == v14)
        goto LABEL_9;
    }
    if (*((_BYTE *)v17 + 56))
    {
      v19 = v17[6];
      if (v19 <= a2)
      {
        v18 = 0;
        if (*((unsigned __int8 *)v17 + 64) > 2u || v19 != a2)
          goto LABEL_25;
      }
      goto LABEL_18;
    }
    v18 = 0;
    if (v11)
      goto LABEL_26;
LABEL_31:
    if ((v18 & 1) != 0)
      goto LABEL_67;
LABEL_32:
    if (v13.__d_.__rep_ <= std::chrono::steady_clock::now().__d_.__rep_)
      goto LABEL_43;
    v24.__d_.__rep_ = v13.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v24.__d_.__rep_ < 1)
      goto LABEL_7;
    std::chrono::steady_clock::now();
    v25.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (!v25.__d_.__rep_)
    {
      v15 = 0;
      goto LABEL_5;
    }
    if (v25.__d_.__rep_ < 1)
    {
      if ((unint64_t)v25.__d_.__rep_ < 0xFFDF3B645A1CAC09)
      {
        v15 = 0x8000000000000000;
      }
      else
      {
LABEL_41:
        v15 = 1000 * v25.__d_.__rep_;
        if (1000 * v25.__d_.__rep_ > (v24.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          goto LABEL_42;
      }
LABEL_5:
      v16.__d_.__rep_ = v15 + v24.__d_.__rep_;
      goto LABEL_6;
    }
    if ((unint64_t)v25.__d_.__rep_ <= 0x20C49BA5E353F7)
      goto LABEL_41;
    v15 = 0x7FFFFFFFFFFFFFFFLL;
    if ((v24.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_5;
LABEL_42:
    v16.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_6:
    std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 96), &v32, v16);
    std::chrono::steady_clock::now();
LABEL_7:
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v13.__d_.__rep_)
    {
LABEL_43:
      v26 = *(_QWORD **)(a1 + 144);
      if (v26 == v14)
      {
LABEL_44:
        if (!v11)
          goto LABEL_67;
        goto LABEL_61;
      }
      while (*((_BYTE *)v26 + 104))
      {
        if (*((_BYTE *)v26 + 64))
        {
          if (!*((_BYTE *)v26 + 56))
          {
            if (!v11)
              goto LABEL_67;
LABEL_61:
            v30 = a4[3];
            if (v30)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v30 + 48))(v30);
              goto LABEL_63;
            }
LABEL_70:
            sub_20AECABA4();
          }
          v27 = v26[6];
          if (v27 <= a2 && (*((unsigned __int8 *)v26 + 64) > 2u || v27 != a2))
            break;
        }
        v28 = (_QWORD *)v26[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (_QWORD *)v26[2];
            v22 = *v29 == (_QWORD)v26;
            v26 = v29;
          }
          while (!v22);
        }
        v26 = v29;
        if (v29 == v14)
          goto LABEL_44;
      }
      if (v11)
        goto LABEL_61;
LABEL_67:
      if (v32.__owns_)
        std::mutex::unlock(v32.__m_);
      return;
    }
  }
LABEL_9:
  v18 = 1;
  if (!v11)
    goto LABEL_31;
LABEL_26:
  v23 = a4[3];
  if (!v23)
    goto LABEL_70;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23) & 1) == 0 && (v18 & 1) == 0)
    goto LABEL_32;
LABEL_63:
  if (v32.__owns_)
  {
    std::mutex::unlock(v32.__m_);
    v32.__owns_ = 0;
    v31 = (std::mutex *)a4[4];
    std::mutex::lock(v31);
    a4[5] = 0;
    a4[6] = 0;
    std::mutex::unlock(v31);
    goto LABEL_67;
  }
  std::__throw_system_error(1, "unique_lock::unlock: not locked");
  __break(1u);
}

void sub_20B2401BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void sub_20B2401E0(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4, unsigned __int8 a5)
{
  sub_20B23FE50(a1 - 8, a2, a3, a4, a5);
}

void sub_20B2401E8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  char *v11;
  _DWORD *v12;
  __int128 v13;
  char v14;
  char v15;
  int v16;
  __int128 v17;
  __int128 v18;

  v6 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  v7 = *(_QWORD *)(a1 + 152);
  if (v7)
  {
    v8 = a1 + 152;
    do
    {
      v9 = sub_20B242474((unsigned __int8 *)(v7 + 32), a2);
      if (v9 >= 0)
        v10 = (uint64_t *)v7;
      else
        v10 = (uint64_t *)(v7 + 8);
      if (v9 >= 0)
        v8 = v7;
      v7 = *v10;
    }
    while (*v10);
    if (v8 != a1 + 152 && ((char)sub_20B242474(a2, (unsigned __int8 *)(v8 + 32)) & 0x80000000) == 0)
    {
      if (!*(_BYTE *)(v8 + 104))
      {
        *(_QWORD *)&v18 = *(_QWORD *)(a3 + 16);
        BYTE8(v18) = *(_BYTE *)(a3 + 24);
        v13 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)(v8 + 64) = *(_OWORD *)a3;
        *(_OWORD *)(v8 + 80) = v13;
        *(_OWORD *)(v8 + 48) = v18;
        *(_BYTE *)(v8 + 96) = 1;
        *(_BYTE *)(v8 + 104) = 1;
LABEL_20:
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 96));
        goto LABEL_21;
      }
      if (*(_BYTE *)(a3 + 24))
      {
        v11 = (char *)(a3 + 16);
        v12 = (_DWORD *)(a3 + 17);
      }
      else
      {
        v14 = *(_BYTE *)(v8 + 88);
        if (!v14)
        {
          v15 = 0;
LABEL_18:
          *(_BYTE *)(v8 + 48) = v15;
          *(_DWORD *)(v8 + 49) = v18;
          *(_DWORD *)(v8 + 52) = *(_DWORD *)((char *)&v18 + 3);
          *(_BYTE *)(v8 + 56) = v14;
          v16 = *(unsigned __int8 *)(v8 + 96);
          v17 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)(v8 + 64) = *(_OWORD *)a3;
          *(_OWORD *)(v8 + 80) = v17;
          if (!v16)
            *(_BYTE *)(v8 + 96) = 1;
          goto LABEL_20;
        }
        v11 = (char *)(v8 + 80);
        v12 = (_DWORD *)(v8 + 81);
      }
      v15 = *v11;
      LODWORD(v18) = *v12;
      *(_DWORD *)((char *)&v18 + 3) = *(_DWORD *)((char *)v12 + 3);
      v14 = 1;
      goto LABEL_18;
    }
  }
LABEL_21:
  std::mutex::unlock(v6);
}

void sub_20B240374(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B240388(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B24039C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  sub_20B2401E8(a1 - 8, a2, a3);
}

void sub_20B2403A4(uint64_t a1, _OWORD *a2)
{
  std::mutex *v4;
  uint64_t *v5;
  _OWORD *v6;

  v4 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  v6 = a2;
  v5 = sub_20B24285C((uint64_t **)(a1 + 144), (unsigned __int8 *)a2, &v6);
  *((_BYTE *)v5 + 48) = 0;
  *((_BYTE *)v5 + 104) = 0;
  std::mutex::unlock(v4);
}

void sub_20B240400(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B240414(uint64_t a1, _OWORD *a2)
{
  std::mutex *v4;
  uint64_t *v5;
  _OWORD *v6;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v6 = a2;
  v5 = sub_20B24285C((uint64_t **)(a1 + 136), (unsigned __int8 *)a2, &v6);
  *((_BYTE *)v5 + 48) = 0;
  *((_BYTE *)v5 + 104) = 0;
  std::mutex::unlock(v4);
}

void sub_20B240470(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B240484(uint64_t a1, unsigned __int8 *a2)
{
  std::mutex *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t *v18;

  v4 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  v5 = (uint64_t *)(a1 + 152);
  v6 = *(_QWORD *)(a1 + 152);
  if (v6)
  {
    v7 = a1 + 152;
    do
    {
      v8 = sub_20B242474((unsigned __int8 *)(v6 + 32), a2);
      if (v8 >= 0)
        v9 = (uint64_t *)v6;
      else
        v9 = (uint64_t *)(v6 + 8);
      if (v8 >= 0)
        v7 = v6;
      v6 = *v9;
    }
    while (*v9);
    if ((uint64_t *)v7 != v5 && ((char)sub_20B242474(a2, (unsigned __int8 *)(v7 + 32)) & 0x80000000) == 0)
    {
      v10 = *v5;
      if (!*v5)
        goto LABEL_21;
      v11 = a1 + 152;
      do
      {
        v12 = sub_20B242474((unsigned __int8 *)(v10 + 32), a2);
        if (v12 >= 0)
          v13 = (uint64_t *)v10;
        else
          v13 = (uint64_t *)(v10 + 8);
        if (v12 >= 0)
          v11 = v10;
        v10 = *v13;
      }
      while (*v13);
      if ((uint64_t *)v11 == v5 || (char)sub_20B242474(a2, (unsigned __int8 *)(v11 + 32)) < 0)
LABEL_21:
        v11 = a1 + 152;
      v14 = *(_QWORD **)(v11 + 8);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        v16 = (_QWORD *)v11;
        do
        {
          v15 = (_QWORD *)v16[2];
          v17 = *v15 == (_QWORD)v16;
          v16 = v15;
        }
        while (!v17);
      }
      if (*(_QWORD *)(a1 + 144) == v11)
        *(_QWORD *)(a1 + 144) = v15;
      v18 = *(uint64_t **)(a1 + 152);
      --*(_QWORD *)(a1 + 160);
      sub_20AEC867C(v18, (uint64_t *)v11);
      operator delete((void *)v11);
    }
  }
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 96));
  std::mutex::unlock(v4);
}

void sub_20B2405D0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B2405E4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B2405F8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B24060C(uint64_t a1, unsigned __int8 *a2)
{
  sub_20B240484(a1 - 8, a2);
}

void sub_20B240614(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  __int128 v13;
  char v14;

  v6 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  v9 = *(_QWORD *)(a1 + 152);
  v7 = a1 + 152;
  v8 = v9;
  if (!v9)
    goto LABEL_13;
  v10 = v7;
  do
  {
    v11 = sub_20B242474((unsigned __int8 *)(v8 + 32), a2);
    if (v11 >= 0)
      v12 = (uint64_t *)v8;
    else
      v12 = (uint64_t *)(v8 + 8);
    if (v11 >= 0)
      v10 = v8;
    v8 = *v12;
  }
  while (*v12);
  if (v10 == v7 || (char)sub_20B242474(a2, (unsigned __int8 *)(v10 + 32)) < 0 || !*(_BYTE *)(v10 + 104))
  {
LABEL_13:
    v14 = 0;
    *(_BYTE *)a3 = 0;
  }
  else
  {
    v13 = *(_OWORD *)(v10 + 80);
    *(_OWORD *)a3 = *(_OWORD *)(v10 + 64);
    *(_OWORD *)(a3 + 16) = v13;
    v14 = 1;
  }
  *(_BYTE *)(a3 + 32) = v14;
  std::mutex::unlock(v6);
}

void sub_20B2406CC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B2406E0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B2406F4(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  sub_20B240614(a1 - 8, a2, a3);
}

uint64_t sub_20B2406FC(uint64_t a1)
{
  return a1 + 8;
}

_QWORD *sub_20B240704(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C413CB8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20B24073C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C413CB8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B240784(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C413CB8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20B2407D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C413CB8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20B240804(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20B240814(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20B240840(uint64_t a1, std::string::size_type a2, const void ***a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  void *v12[2];
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 __p;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  char v33;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 8);
      if (v8)
      {
        sub_20B238884((uint64_t)&v11, v8, a2, a3);
        goto LABEL_17;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  sub_20B240AFC((uint64_t)&v23, (uint64_t)"server cannot receive data from network", 39);
  v11 = v23;
  LOBYTE(v12[0]) = 0;
  v21 = 0;
  if (v33)
  {
    v14 = 0;
    if (v26)
    {
      *(_OWORD *)v12 = __p;
      v13 = v25;
      v25 = 0;
      __p = 0uLL;
      v14 = 1;
    }
    LOBYTE(v15) = 0;
    v20 = 0;
    if (v32)
    {
      v16 = v28;
      v15 = v27;
      v27 = 0uLL;
      v17 = v29;
      *(_OWORD *)v18 = v30;
      v19 = v31;
      v28 = 0;
      v30 = 0uLL;
      v31 = 0;
      v20 = 1;
    }
    v21 = 1;
    v22 = 0;
    if (v26 && SHIBYTE(v25) < 0)
      operator delete((void *)__p);
    if (!v7)
      goto LABEL_20;
  }
  else
  {
    v22 = 0;
    if (!v7)
      goto LABEL_20;
  }
LABEL_17:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v22)
      return;
    goto LABEL_23;
  }
LABEL_20:
  if (v22)
    return;
LABEL_23:
  if (v21)
  {
    if (v20)
    {
      if (SHIBYTE(v19) < 0)
        operator delete(v18[0]);
      if (SHIBYTE(v16) < 0)
        operator delete((void *)v15);
    }
    if (v14)
    {
      if (SHIBYTE(v13) < 0)
        operator delete(v12[0]);
    }
  }
}

void sub_20B240A3C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B240A84(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18optionalINS6_8"
                     "functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10unique_ptrINS1_18IServerSyn"
                     "cControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18opt"
                                "ionalINS6_8functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10uniqu"
                                "e_ptrINS1_18IServerSyncControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18optionalINS6_8functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10unique_ptrINS1_18IServerSyncControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18optionalINS6_8functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10unique_ptrINS1_18IServerSyncControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B240AF0()
{
  return &unk_24C413D18;
}

void sub_20B240AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string v4;
  std::string __p;
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  char v11;
  char v12;
  _QWORD v13[4];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13[0] = a2;
  v13[1] = a3;
  v13[2] = ", server object has been destroyed";
  v13[3] = 34;
  sub_20AECFDF8((uint64_t)v13, (uint64_t)&v14, 0, 0, &v4);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&__p, v4.__r_.__value_.__l.__data_, v4.__r_.__value_.__l.__size_);
  else
    __p = v4;
  v6 = 1;
  LOBYTE(v7) = 0;
  v11 = 0;
  v12 = 1;
  sub_20B0B4C58(2u, (__int128 *)&__p, a1);
  if (!v12)
    goto LABEL_11;
  if (v11)
  {
    if ((v10 & 0x80000000) == 0)
    {
      if ((v8 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_15:
      operator delete(v7);
      if (!v6)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v9);
    if (v8 < 0)
      goto LABEL_15;
  }
LABEL_8:
  if (!v6)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_11:
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_20B240C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B240C6C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C413D38;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20B240CA4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C413D38;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B240CEC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C413D38;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20B240D3C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C413D38;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20B240D6C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20B240D7C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20B240DA8(uint64_t a1, std::string::size_type a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 __p;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  char v34;

  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    v8 = std::__shared_weak_count::lock(v5);
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        sub_20B238CC0((uint64_t)&v12, v9, a2, a4);
        goto LABEL_17;
      }
    }
  }
  else
  {
    v8 = 0;
  }
  sub_20B240AFC((uint64_t)&v24, (uint64_t)"server cannot receive sync from network", 39);
  v12 = v24;
  LOBYTE(v13[0]) = 0;
  v22 = 0;
  if (v34)
  {
    v15 = 0;
    if (v27)
    {
      *(_OWORD *)v13 = __p;
      v14 = v26;
      v26 = 0;
      __p = 0uLL;
      v15 = 1;
    }
    LOBYTE(v16) = 0;
    v21 = 0;
    if (v33)
    {
      v17 = v29;
      v16 = v28;
      v28 = 0uLL;
      v18 = v30;
      *(_OWORD *)v19 = v31;
      v20 = v32;
      v29 = 0;
      v31 = 0uLL;
      v32 = 0;
      v21 = 1;
    }
    v22 = 1;
    v23 = 0;
    if (v27 && SHIBYTE(v26) < 0)
      operator delete((void *)__p);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v23 = 0;
    if (!v8)
      goto LABEL_20;
  }
LABEL_17:
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (v23)
      return;
    goto LABEL_23;
  }
LABEL_20:
  if (v23)
    return;
LABEL_23:
  if (v22)
  {
    if (v21)
    {
      if (SHIBYTE(v20) < 0)
        operator delete(v19[0]);
      if (SHIBYTE(v17) < 0)
        operator delete((void *)v16);
    }
    if (v15)
    {
      if (SHIBYTE(v14) < 0)
        operator delete(v13[0]);
    }
  }
}

void sub_20B240FA4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B240FEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18optionalINS6_8"
                     "functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10unique_ptrINS1_18IServerSyn"
                     "cControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18opt"
                                "ionalINS6_8functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10uniqu"
                                "e_ptrINS1_18IServerSyncControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18optionalINS6_8functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10unique_ptrINS1_18IServerSyncControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18optionalINS6_8functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10unique_ptrINS1_18IServerSyncControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B241058()
{
  return &unk_24C413DA8;
}

_QWORD *sub_20B241064(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C413DC8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20B24109C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C413DC8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B2410E4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C413DC8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20B241134(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C413DC8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20B241164(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20B241174(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20B2411A0(uint64_t a1, std::string::size_type a2, unsigned __int8 *a3)
{
  std::__shared_weak_count *v4;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  void *v12[2];
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 __p;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  char v33;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v6 = *a3;
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 8);
      if (v8)
      {
        sub_20B239C48((uint64_t)&v11, v8, a2, v6);
        goto LABEL_17;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  sub_20B240AFC((uint64_t)&v23, (uint64_t)"server cannot receive connection update from network", 52);
  v11 = v23;
  LOBYTE(v12[0]) = 0;
  v21 = 0;
  if (v33)
  {
    v14 = 0;
    if (v26)
    {
      *(_OWORD *)v12 = __p;
      v13 = v25;
      v25 = 0;
      __p = 0uLL;
      v14 = 1;
    }
    LOBYTE(v15) = 0;
    v20 = 0;
    if (v32)
    {
      v16 = v28;
      v15 = v27;
      v27 = 0uLL;
      v17 = v29;
      *(_OWORD *)v18 = v30;
      v19 = v31;
      v28 = 0;
      v30 = 0uLL;
      v31 = 0;
      v20 = 1;
    }
    v21 = 1;
    v22 = 0;
    if (v26 && SHIBYTE(v25) < 0)
      operator delete((void *)__p);
    if (!v7)
      goto LABEL_20;
  }
  else
  {
    v22 = 0;
    if (!v7)
      goto LABEL_20;
  }
LABEL_17:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v22)
      return;
    goto LABEL_23;
  }
LABEL_20:
  if (v22)
    return;
LABEL_23:
  if (v21)
  {
    if (v20)
    {
      if (SHIBYTE(v19) < 0)
        operator delete(v18[0]);
      if (SHIBYTE(v16) < 0)
        operator delete((void *)v15);
    }
    if (v14)
    {
      if (SHIBYTE(v13) < 0)
        operator delete(v12[0]);
    }
  }
}

void sub_20B24139C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B2413E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18optionalINS6_8"
                     "functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10unique_ptrINS1_18IServerSyn"
                     "cControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18opt"
                                "ionalINS6_8functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10uniqu"
                                "e_ptrINS1_18IServerSyncControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18optionalINS6_8functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10unique_ptrINS1_18IServerSyncControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18optionalINS6_8functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10unique_ptrINS1_18IServerSyncControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B241450()
{
  return &unk_24C413E28;
}

_QWORD *sub_20B24145C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C413E48;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20B241494(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C413E48;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B2414DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C413E48;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20B24152C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C413E48;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20B24155C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20B24156C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20B241598(uint64_t a1, std::string::size_type a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  void *v12[2];
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 __p;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  char v33;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 8);
      if (v8)
      {
        sub_20B23AE08((uint64_t)&v11, v8, a2, a3);
        goto LABEL_17;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  sub_20B240AFC((uint64_t)&v23, (uint64_t)"server cannot receive context status update from network", 56);
  v11 = v23;
  LOBYTE(v12[0]) = 0;
  v21 = 0;
  if (v33)
  {
    v14 = 0;
    if (v26)
    {
      *(_OWORD *)v12 = __p;
      v13 = v25;
      v25 = 0;
      __p = 0uLL;
      v14 = 1;
    }
    LOBYTE(v15) = 0;
    v20 = 0;
    if (v32)
    {
      v16 = v28;
      v15 = v27;
      v27 = 0uLL;
      v17 = v29;
      *(_OWORD *)v18 = v30;
      v19 = v31;
      v28 = 0;
      v30 = 0uLL;
      v31 = 0;
      v20 = 1;
    }
    v21 = 1;
    v22 = 0;
    if (v26 && SHIBYTE(v25) < 0)
      operator delete((void *)__p);
    if (!v7)
      goto LABEL_20;
  }
  else
  {
    v22 = 0;
    if (!v7)
      goto LABEL_20;
  }
LABEL_17:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v22)
      return;
    goto LABEL_23;
  }
LABEL_20:
  if (v22)
    return;
LABEL_23:
  if (v21)
  {
    if (v20)
    {
      if (SHIBYTE(v19) < 0)
        operator delete(v18[0]);
      if (SHIBYTE(v16) < 0)
        operator delete((void *)v15);
    }
    if (v14)
    {
      if (SHIBYTE(v13) < 0)
        operator delete(v12[0]);
    }
  }
}

void sub_20B241794(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B2417DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18optionalINS6_8"
                     "functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10unique_ptrINS1_18IServerSyn"
                     "cControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18opt"
                                "ionalINS6_8functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10uniqu"
                                "e_ptrINS1_18IServerSyncControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18optionalINS6_8functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10unique_ptrINS1_18IServerSyncControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18optionalINS6_8functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10unique_ptrINS1_18IServerSyncControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B241848()
{
  return &unk_24C413EA8;
}

void sub_20B241854(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = *(std::__shared_weak_count **)(a1 + 280);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 264);
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 264);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = *(std::__shared_weak_count **)(a1 + 248);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  sub_20AF3F978(a1 + 64);
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
  }
}

uint64_t sub_20B2418F4(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    if (*(char *)(a2 + 55) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = v5;
    }
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  if (*(_BYTE *)(a2 + 208))
  {
    sub_20AF3FE60((char *)(a1 + 64), (__int128 *)(a2 + 64));
    *(_BYTE *)(a1 + 208) = 1;
  }
  v6 = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v6;
  v7 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  return a1;
}

void sub_20B241A18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 56))
  {
    if (*(char *)(v1 + 55) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B241A4C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 288;
    sub_20B241854(i - 288);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20B241A9C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    v4 = (_QWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a2 + 24);
    if (v5)
    {
      if (v5 == a2)
      {
        *(_QWORD *)(a1 + 24) = a1;
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 24))(*v4, a1);
        goto LABEL_8;
      }
      *(_QWORD *)(a1 + 24) = v5;
    }
    else
    {
      v4 = (_QWORD *)(a1 + 24);
    }
    *v4 = 0;
LABEL_8:
    *(_BYTE *)(a1 + 32) = 1;
  }
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (!*(_BYTE *)(a2 + 72))
    goto LABEL_17;
  v6 = (_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 64);
  if (v7)
  {
    if (v7 == a2 + 40)
    {
      *(_QWORD *)(a1 + 64) = a1 + 40;
      (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 24))(*v6);
      goto LABEL_16;
    }
    *(_QWORD *)(a1 + 64) = v7;
  }
  else
  {
    v6 = (_QWORD *)(a1 + 64);
  }
  *v6 = 0;
LABEL_16:
  *(_BYTE *)(a1 + 72) = 1;
LABEL_17:
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (!*(_BYTE *)(a2 + 112))
    goto LABEL_25;
  v8 = (_QWORD *)(a2 + 104);
  v9 = *(_QWORD *)(a2 + 104);
  if (v9)
  {
    if (v9 == a2 + 80)
    {
      *(_QWORD *)(a1 + 104) = a1 + 80;
      (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 24))(*v8);
      goto LABEL_24;
    }
    *(_QWORD *)(a1 + 104) = v9;
  }
  else
  {
    v8 = (_QWORD *)(a1 + 104);
  }
  *v8 = 0;
LABEL_24:
  *(_BYTE *)(a1 + 112) = 1;
LABEL_25:
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    v10 = (_QWORD *)(a2 + 144);
    v11 = *(_QWORD *)(a2 + 144);
    if (v11)
    {
      if (v11 == a2 + 120)
      {
        *(_QWORD *)(a1 + 144) = a1 + 120;
        (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 24))(*v10);
        goto LABEL_32;
      }
      *(_QWORD *)(a1 + 144) = v11;
    }
    else
    {
      v10 = (_QWORD *)(a1 + 144);
    }
    *v10 = 0;
LABEL_32:
    *(_BYTE *)(a1 + 152) = 1;
  }
  return a1;
}

void sub_20B241C3C(uint64_t a1)
{
  std::thread *v2;
  uint64_t v3;
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(std::thread **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  if (v2)
  {
    std::thread::~thread(v2);
    MEMORY[0x20BD3583C]();
  }
  if (*(_BYTE *)(a1 + 272))
  {
    v3 = *(_QWORD *)(a1 + 264);
    *(_QWORD *)(a1 + 264) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 192));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 144));
  if (*(_BYTE *)(a1 + 136))
  {
    v4 = *(std::mutex **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    if (v4)
    {
      std::mutex::~mutex(v4);
      MEMORY[0x20BD3583C]();
    }
    v5 = *(_QWORD **)(a1 + 104);
    if (v5 == (_QWORD *)(a1 + 80))
    {
      v6 = 4;
      v5 = (_QWORD *)(a1 + 80);
      goto LABEL_13;
    }
    if (v5)
    {
      v6 = 5;
LABEL_13:
      (*(void (**)(void))(*v5 + 8 * v6))();
    }
  }
  std::mutex::~mutex((std::mutex *)a1);
}

uint64_t sub_20B241D0C(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  std::thread *v5;
  const void *v6;
  uint64_t v7;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v4 + 360));
  while (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 432) + 16))(*(_QWORD *)(v4 + 432), v4 + 8, v4 + 248, 1) & 1) != 0);
  std::mutex::lock((std::mutex *)(v4 + 168));
  *(_BYTE *)(v4 + 240) = 0;
  std::thread::detach(*(std::thread **)(v4 + 448));
  v5 = *(std::thread **)(v4 + 448);
  *(_QWORD *)(v4 + 448) = 0;
  if (v5)
  {
    std::thread::~thread(v5);
    MEMORY[0x20BD3583C]();
  }
  std::condition_variable::notify_all((std::condition_variable *)(v4 + 312));
  std::mutex::unlock((std::mutex *)(v4 + 168));
  std::mutex::unlock((std::mutex *)(v4 + 360));
  v6 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
  {
    v7 = MEMORY[0x20BD35314]();
    MEMORY[0x20BD3583C](v7, 0x20C4093837F09);
  }
  MEMORY[0x20BD3583C](a1, 0x20C40A4A59CD2);
  return 0;
}

void sub_20B241E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  std::mutex *v10;
  std::mutex *v11;

  std::mutex::unlock(v11);
  std::mutex::unlock(v10);
  sub_20B241E7C(&a10);
  _Unwind_Resume(a1);
}

void sub_20B241E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);
  sub_20B241E7C(&a10);
  _Unwind_Resume(a1);
}

uint64_t **sub_20B241E7C(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x20BD35314]();
      MEMORY[0x20BD3583C](v4, 0x20C4093837F09);
    }
    MEMORY[0x20BD3583C](v2, 0x20C40A4A59CD2);
  }
  return a1;
}

void sub_20B241EE4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    sub_20B241EE4(*a1);
    sub_20B241EE4(a1[1]);
    v2 = (std::__shared_weak_count *)a1[7];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(a1);
    }
    else
    {
LABEL_6:
      operator delete(a1);
    }
  }
}

void sub_20B241F64(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413EC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B241F74(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C413EC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B241FA4(uint64_t a1)
{
  return sub_20B237240(a1 + 24);
}

void sub_20B241FB4()
{
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B241FC8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C413F18;
  return result;
}

void sub_20B241FEC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C413F18;
}

uint64_t sub_20B242004@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C413AA8;
  *(_QWORD *)(v4 + 8) = &unk_24C413B40;
  *(_QWORD *)(v4 + 16) = a1;
  *(_OWORD *)(v4 + 24) = xmmword_20B5E4C30;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 1018212795;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_QWORD *)(v4 + 160) = 0;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 144) = v4 + 152;
  *(_BYTE *)(v4 + 248) = 0;
  *(_BYTE *)(v4 + 304) = 0;
  *(_WORD *)(v4 + 240) = 0;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_QWORD *)(v4 + 312) = 1018212795;
  *(_OWORD *)(v4 + 320) = 0u;
  *(_OWORD *)(v4 + 336) = 0u;
  *(_QWORD *)(v4 + 352) = 0;
  *(_QWORD *)(v4 + 360) = 850045863;
  *(_BYTE *)(v4 + 440) = 0;
  *(_QWORD *)(v4 + 448) = 0;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_OWORD *)(v4 + 400) = 0u;
  *a2 = v4;
  *(_QWORD *)(v4 + 168) = 850045863;
  result = v4 + 168;
  *(_OWORD *)(result + 241) = 0u;
  return result;
}

uint64_t sub_20B2420D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18optionalINS6_8"
                     "functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10unique_ptrINS1_18IServerSyn"
                     "cControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_4")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18opt"
                                "ionalINS6_8functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10uniqu"
                                "e_ptrINS1_18IServerSyncControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18optionalINS6_8functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10unique_ptrINS1_18IServerSyncControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_4"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit3viz6Server4Impl6CreateENS1_15ServerCallbacksENS1_13ServerOptionsENSt3__18optionalINS6_8functionIFvRKNS1_14ConnectionInfoERKNS_3esn5ErrorEEEEEENS7_INS8_IFNS6_10unique_ptrINS1_18IServerSyncControlENS6_14default_deleteISK_EEEERNS1_7IServerEEEEEEE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B242140()
{
  return &unk_24C413F88;
}

uint64_t sub_20B24214C(uint64_t a1, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_20B00222C(v4, "server cannot receive ");
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24C413FF8[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_11:
    sub_20AECFAB8();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_11;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C413FB0[v5])(&v11, v4);
LABEL_6:
  v6 = (_QWORD **)v4;
  v7 = ", server object has been destroyed";
  v8 = v4;
  v9 = ", server object has been destroyed";
  v10 = ", server object has been destroyed";
  if (v5 == -1)
    sub_20AECFAB8();
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C414010[v5])(&v11, v4);
  if (v5 == -1)
    sub_20AECFAB8();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C413FE0[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C413F98[v5])(&v6, v4);
  return result;
}

void sub_20B2422C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B2422DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B2422F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B242304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B242318(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C414038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B242328(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C414038;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B242358(uint64_t a1)
{
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 96));
  std::mutex::~mutex((std::mutex *)(a1 + 32));
}

uint64_t *sub_20B242384(uint64_t **a1, unsigned __int8 *a2, _OWORD **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = (uint64_t *)operator new(0x40uLL);
    *((_OWORD *)v10 + 2) = **a3;
    v10[6] = 0;
    v10[7] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v6 = v10;
    v11 = (uint64_t *)**a1;
    v12 = v10;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_20AEC84C8(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (unsigned __int8 *)(v5 + 4);
      if ((sub_20B242474(a2, (unsigned __int8 *)v5 + 32) & 0x80) == 0)
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if ((sub_20B242474(v9, a2) & 0x80) == 0)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v10 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v10;
}

uint64_t sub_20B242474(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == v3)
  {
    v2 = a1[1];
    v3 = a2[1];
    if (v2 == v3)
    {
      v2 = a1[2];
      v3 = a2[2];
      if (v2 == v3)
      {
        v2 = a1[3];
        v3 = a2[3];
        if (v2 == v3)
        {
          v2 = a1[4];
          v3 = a2[4];
          if (v2 == v3)
          {
            v2 = a1[5];
            v3 = a2[5];
            if (v2 == v3)
            {
              v2 = a1[6];
              v3 = a2[6];
              if (v2 == v3)
              {
                v2 = a1[7];
                v3 = a2[7];
                if (v2 == v3)
                {
                  v2 = a1[8];
                  v3 = a2[8];
                  if (v2 == v3)
                  {
                    v2 = a1[9];
                    v3 = a2[9];
                    if (v2 == v3)
                    {
                      v2 = a1[10];
                      v3 = a2[10];
                      if (v2 == v3)
                      {
                        v2 = a1[11];
                        v3 = a2[11];
                        if (v2 == v3)
                        {
                          v2 = a1[12];
                          v3 = a2[12];
                          if (v2 == v3)
                          {
                            v2 = a1[13];
                            v3 = a2[13];
                            if (v2 == v3)
                            {
                              v2 = a1[14];
                              v3 = a2[14];
                              if (v2 == v3)
                              {
                                v2 = a1[15];
                                v3 = a2[15];
                                if (v2 == v3)
                                  return 0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  return 1;
}

void sub_20B242590()
{
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B2425A4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(*v1 + 24);
  if (!v2)
    sub_20AECABA4();
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 48))(v2, v1[1], *(_QWORD *)(a1 + 16));
}

void sub_20B2425E0()
{
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B2425F4(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)a1[1];
  v2 = *(_QWORD *)(*v1 + 24);
  if (!v2)
    sub_20AECABA4();
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v2 + 48))(v2, v1[1], a1[2], a1[3]);
}

void sub_20B24262C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C414108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B24263C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C414108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B24266C(uint64_t a1)
{
  uint64_t v2;

  sub_20AEC833C(a1 + 104, *(char **)(a1 + 112));
  v2 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C4120E8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void sub_20B2426C0()
{
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B2426D4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v1 = *(uint64_t **)(a1 + 8);
  v3 = *v1;
  v2 = v1[1];
  LOBYTE(v1) = **(_BYTE **)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  v6 = (char)v1;
  if (!v4)
    sub_20AECABA4();
  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 48))(v4, v2, &v6);
}

void sub_20B24271C()
{
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B242730(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(*v1 + 24);
  if (!v2)
    sub_20AECABA4();
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 48))(v2, v1[1], *(_QWORD *)(a1 + 16));
}

void sub_20B24276C()
{
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B242780(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C4141F0;
  result[1] = v3;
  return result;
}

uint64_t sub_20B2427B4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C4141F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B2427D0(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 241));
  return v1 & 1;
}

uint64_t sub_20B2427E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit3viz11SyncControl12StartPatternEvE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit3viz11SyncControl12StartPatternEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit3viz11SyncControl12StartPatternEvE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit3viz11SyncControl12StartPatternEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B242850()
{
  return &unk_24C414250;
}

uint64_t *sub_20B24285C(uint64_t **a1, unsigned __int8 *a2, _OWORD **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = (uint64_t *)operator new(0x70uLL);
    *((_OWORD *)v10 + 2) = **a3;
    *((_BYTE *)v10 + 48) = 0;
    *((_BYTE *)v10 + 104) = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v6 = v10;
    v11 = (uint64_t *)**a1;
    v12 = v10;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_20AEC84C8(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (unsigned __int8 *)(v5 + 4);
      if ((sub_20B242474(a2, (unsigned __int8 *)v5 + 32) & 0x80) == 0)
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if ((sub_20B242474(v9, a2) & 0x80) == 0)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v10 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v10;
}

void sub_20B242950(float32x2_t *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float *v22;
  __int32 v23;
  int32x2_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int v31;
  uint64_t v32;
  void *v33;
  void *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  void *v42[2];
  uint64_t v43;
  void *v44[2];
  uint64_t v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  char v51;
  char v52;
  __int128 v53;
  char ****v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  char v60;
  char v61;
  float v62;
  __int128 __dst;
  char ****v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  char v70;
  char v71;
  __int128 v72;
  __int128 __p;
  uint64_t v74;
  unsigned __int8 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char v81;
  char v82;
  __int128 v83;
  float v84[4];
  char *v85;
  __int128 v86;
  int v87;
  void *v88[2];
  char v89;
  __int128 v90;
  char ****v91;
  int v92;
  char ***v93;
  __int32 v94;
  uint64_t v95;
  __int32 v96;
  uint64_t v97;
  __int32 v98;
  char ***v99;
  char **v100;
  const char *v101;
  char **v102;
  const char *v103;
  const char *v104;

  v6 = a1[3].f32[1];
  v84[0] = a1[1].f32[1];
  v84[1] = v6;
  v7 = a1[5].f32[1];
  v8 = a1[7].f32[1];
  v84[2] = v7;
  v84[3] = v8;
  v83 = xmmword_20B5EE510;
  if (v84[0] != 0.0 && fabsf(v84[0]) > *a2
    || v6 != 0.0 && fabsf(v6) > *a2
    || v7 != 0.0 && fabsf(v7) > *a2
    || v8 != 1.0 && (v8 <= 1.0 ? (v9 = 1.0 - v8) : (v9 = v8 + -1.0), v9 > *a2))
  {
    LODWORD(v97) = 0;
    sub_20B003710(&v93, "se3 group matrix must be an affine 3x4 transform:\n");
    v100 = (char **)&v93;
    v101 = "expected last row: ";
    v102 = (char **)&v93;
    v103 = "expected last row: ";
    v104 = "expected last row: ";
    if ((_DWORD)v97 == -1)
      sub_20AECFAB8();
    v85 = (char *)&v100;
    ((void (*)(char **, char ****))off_24C414298[v97])(&v85, &v93);
    sub_20B248714((uint64_t)v88, (uint64_t)&v93, (float *)&v83);
    v100 = (char **)&v93;
    v101 = "\n";
    v102 = (char **)&v93;
    v103 = "\n";
    v104 = "\n";
    if ((_DWORD)v97 == -1)
      sub_20AECFAB8();
    v85 = (char *)&v100;
    ((void (*)(char **, char ****))off_24C4142B0[v97])(&v85, &v93);
    v100 = (char **)&v93;
    v101 = "  actual last row: ";
    v102 = (char **)&v93;
    v103 = "  actual last row: ";
    v104 = "  actual last row: ";
    if ((_DWORD)v97 == -1)
      sub_20AECFAB8();
    v85 = (char *)&v100;
    ((void (*)(char **, char ****))off_24C414298[v97])(&v85, &v93);
    sub_20B248714((uint64_t)v42, (uint64_t)&v93, v84);
    v100 = (char **)&v93;
    v101 = "\n";
    v102 = (char **)&v93;
    v103 = "\n";
    v104 = "\n";
    if ((_DWORD)v97 == -1)
      sub_20AECFAB8();
    v85 = (char *)&v100;
    ((void (*)(char **, char ****))off_24C4142B0[v97])(&v85, &v93);
    v100 = (char **)&v93;
    v101 = "   with tolerance: ";
    v102 = (char **)&v93;
    v103 = "   with tolerance: ";
    v104 = "   with tolerance: ";
    if ((_DWORD)v97 == -1)
      sub_20AECFAB8();
    v85 = (char *)&v100;
    ((void (*)(char **, char ****))off_24C414298[v97])(&v85, &v93);
    sub_20AF57AB0((uint64_t)&v100, (uint64_t)&v93, a2);
    if ((_DWORD)v97 == -1)
      sub_20AECFAB8();
    v100 = &v85;
    ((void (*)(__int128 *__return_ptr, char ***, char ****))off_24C4142E0[v97])(&v90, &v100, &v93);
    if ((_DWORD)v97 != -1)
      ((void (*)(char ***, char ****))off_24C414280[v97])(&v100, &v93);
    if (SHIBYTE(v91) < 0)
    {
      sub_20AEC60F4(&__dst, (void *)v90, *((unint64_t *)&v90 + 1));
    }
    else
    {
      __dst = v90;
      v64 = v91;
    }
    v65 = 1;
    LOBYTE(v66) = 0;
    v70 = 0;
    v71 = 1;
    sub_20B52280C((uint64_t)&__dst, (uint64_t)&v72);
    *(_OWORD *)a3 = v72;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    if (v82)
    {
      *(_BYTE *)(a3 + 40) = 0;
      v31 = v75;
      if (v75)
      {
        *(_OWORD *)(a3 + 16) = __p;
        *(_QWORD *)(a3 + 32) = v74;
        v74 = 0;
        __p = 0uLL;
        *(_BYTE *)(a3 + 40) = 1;
      }
      *(_BYTE *)(a3 + 48) = 0;
      *(_BYTE *)(a3 + 104) = 0;
      if (v81)
      {
        v32 = v78;
        *(_QWORD *)(a3 + 64) = v77;
        *(_OWORD *)(a3 + 48) = v76;
        v76 = 0uLL;
        *(_QWORD *)(a3 + 72) = v32;
        *(_OWORD *)(a3 + 80) = v79;
        *(_QWORD *)(a3 + 96) = v80;
        v77 = 0;
        v79 = 0uLL;
        v80 = 0;
        *(_BYTE *)(a3 + 104) = 1;
      }
      *(_BYTE *)(a3 + 112) = 1;
      *(_BYTE *)(a3 + 120) = 0;
      if (v31)
      {
        if (SHIBYTE(v74) < 0)
          operator delete((void *)__p);
      }
      if (!v71)
        goto LABEL_57;
    }
    else
    {
      *(_BYTE *)(a3 + 120) = 0;
      if (!v71)
        goto LABEL_57;
    }
    if (!v70)
      goto LABEL_53;
    if (v69 < 0)
    {
      operator delete(v68);
      if ((v67 & 0x80000000) == 0)
      {
LABEL_53:
        if (!v65)
          goto LABEL_57;
        goto LABEL_54;
      }
    }
    else if ((v67 & 0x80000000) == 0)
    {
      goto LABEL_53;
    }
    operator delete(v66);
    if (!v65)
      goto LABEL_57;
LABEL_54:
    if (SHIBYTE(v64) < 0)
    {
      v33 = (void *)__dst;
LABEL_56:
      operator delete(v33);
    }
LABEL_57:
    if ((SHIBYTE(v91) & 0x80000000) == 0)
      return;
    v34 = (void *)v90;
    goto LABEL_93;
  }
  v10 = sub_20AEBFE94((uint64_t)a1);
  v62 = v10;
  if (v10 != 1.0)
  {
    v14 = v10 >= 1.0 ? v10 + -1.0 : 1.0 - v10;
    if (v14 > a2[1])
    {
      LODWORD(v97) = 0;
      sub_20AF86A14(&v93, "se3 group matrix must have determinant 1\n");
      v100 = (char **)&v93;
      v101 = "actual determinant: ";
      v102 = (char **)&v93;
      v103 = "actual determinant: ";
      v104 = "actual determinant: ";
      if ((_DWORD)v97 == -1)
        sub_20AECFAB8();
      v85 = (char *)&v100;
      ((void (*)(char **, char ****))off_24C4142F8[v97])(&v85, &v93);
      sub_20AF57AB0((uint64_t)v88, (uint64_t)&v93, &v62);
      v100 = (char **)&v93;
      v101 = "\n";
      v102 = (char **)&v93;
      v103 = "\n";
      v104 = "\n";
      if ((_DWORD)v97 == -1)
        sub_20AECFAB8();
      v85 = (char *)&v100;
      ((void (*)(char **, char ****))off_24C4142B0[v97])(&v85, &v93);
      v100 = (char **)&v93;
      v101 = "    with tolerance: ";
      v102 = (char **)&v93;
      v103 = "    with tolerance: ";
      v104 = "    with tolerance: ";
      if ((_DWORD)v97 == -1)
        sub_20AECFAB8();
      v85 = (char *)&v100;
      ((void (*)(char **, char ****))off_24C4142F8[v97])(&v85, &v93);
      sub_20AF57AB0((uint64_t)&v100, (uint64_t)&v93, a2 + 1);
      if ((_DWORD)v97 == -1)
        sub_20AECFAB8();
      v100 = &v85;
      ((void (*)(__int128 *__return_ptr, char ***, char ****))off_24C4142E0[v97])(&v90, &v100, &v93);
      if ((_DWORD)v97 != -1)
        ((void (*)(char ***, char ****))off_24C414280[v97])(&v100, &v93);
      if (SHIBYTE(v91) < 0)
      {
        sub_20AEC60F4(&v53, (void *)v90, *((unint64_t *)&v90 + 1));
      }
      else
      {
        v53 = v90;
        v54 = v91;
      }
      v55 = 1;
      LOBYTE(v56) = 0;
      v60 = 0;
      v61 = 1;
      sub_20B52280C((uint64_t)&v53, (uint64_t)&v72);
      *(_OWORD *)a3 = v72;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v82)
      {
        *(_BYTE *)(a3 + 40) = 0;
        v37 = v75;
        if (v75)
        {
          *(_OWORD *)(a3 + 16) = __p;
          *(_QWORD *)(a3 + 32) = v74;
          v74 = 0;
          __p = 0uLL;
          *(_BYTE *)(a3 + 40) = 1;
        }
        *(_BYTE *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 104) = 0;
        if (v81)
        {
          v38 = v78;
          *(_QWORD *)(a3 + 64) = v77;
          *(_OWORD *)(a3 + 48) = v76;
          v76 = 0uLL;
          *(_QWORD *)(a3 + 72) = v38;
          *(_OWORD *)(a3 + 80) = v79;
          *(_QWORD *)(a3 + 96) = v80;
          v77 = 0;
          v79 = 0uLL;
          v80 = 0;
          *(_BYTE *)(a3 + 104) = 1;
        }
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (v37 && SHIBYTE(v74) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a3 + 120) = 0;
      }
      if (!v61)
        goto LABEL_57;
      if (v60)
      {
        if (v59 < 0)
          operator delete(v58);
        if (v57 < 0)
          operator delete(v56);
      }
      if (!v55 || (SHIBYTE(v54) & 0x80000000) == 0)
        goto LABEL_57;
      v33 = (void *)v53;
      goto LABEL_56;
    }
  }
  v11.i32[0] = a1[1].i32[0];
  v15 = a1[2];
  v12.i32[0] = a1[3].i32[0];
  v16 = a1[4];
  v13.i32[0] = a1[5].i32[0];
  v17 = (float32x2_t)vzip1_s32((int32x2_t)*a1, (int32x2_t)v15);
  v18 = (float32x2_t)vzip2_s32((int32x2_t)*a1, (int32x2_t)v15);
  *(float32x2_t *)v19.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v17, COERCE_FLOAT(*a1)), v18, *a1, 1), (float32x2_t)__PAIR64__(v12.u32[0], v11.u32[0]), v11.f32[0]);
  *(float32x2_t *)&v19.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v16, *a1), (float32x2_t)vdup_lane_s32((int32x2_t)*a1, 1), v16, 1), v11, v13);
  *(float32x2_t *)v20.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v17, v15.f32[0]), v18, v15, 1), (float32x2_t)__PAIR64__(v12.u32[0], v11.u32[0]), v12.f32[0]);
  *(float32x2_t *)&v20.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v16, v15), (float32x2_t)vdup_lane_s32((int32x2_t)v15, 1), v16, 1), v12, v13);
  *(float32x2_t *)v21.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v17, v16.f32[0]), v18, v16, 1), (float32x2_t)__PAIR64__(v12.u32[0], v11.u32[0]), v13.f32[0]);
  v24 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(v16, v16), (float32x2_t)vdup_lane_s32((int32x2_t)v16, 1), v16, 1), v13, v13);
  *(int32x2_t *)&v21.u32[2] = v24;
  v23 = *((_DWORD *)a2 + 2);
  v22 = a2 + 2;
  v24.i32[0] = v23;
  v25 = vaddq_f32(v19, (float32x4_t)xmmword_20B5EE4B0);
  v26 = (int8x16_t)vaddq_f32(v20, (float32x4_t)xmmword_20B5EE4C0);
  v25.i32[3] = v26.i32[0];
  v27 = (int32x4_t)vaddq_f32(v21, (float32x4_t)xmmword_20B5EE4D0);
  v28 = (int32x4_t)vabsq_f32(v25);
  v29.i64[0] = vrev64q_s32(v28).u64[0];
  v29.i64[1] = v28.i64[1];
  v30 = (float32x4_t)vdupq_lane_s32(v24, 0);
  if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgeq_f32(v30, v29), (int16x8_t)vcgeq_f32(v30, vabsq_f32((float32x4_t)vextq_s8(vextq_s8(v26, v26, 0xCuLL), (int8x16_t)v27, 8uLL))))), 7uLL))) & 1) != 0&& vabsq_f32((float32x4_t)vdupq_laneq_s32(v27, 2)).f32[0] <= *(float *)v24.i32)
  {
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  v39 = v21;
  v40 = v20;
  v41 = v19;
  v87 = -1;
  v85 = (char *)operator new(0x48uLL);
  v86 = xmmword_20B5EE4E0;
  strcpy(v85, "se3 group rotation must be orthogonal (expecting identity R^T*R)\n");
  v87 = 1;
  v100 = &v85;
  v101 = "  actual R^T*R:\n";
  v102 = &v85;
  v103 = "  actual R^T*R:\n";
  v104 = "  actual R^T*R:\n";
  v93 = &v100;
  sub_20B2488B4((uint64_t *)&v93, (uint64_t)&v85);
  v94 = v41.i32[2];
  v96 = v40.i32[2];
  v95 = v40.i64[0];
  v98 = v39.i32[2];
  v93 = (char ***)v41.i64[0];
  v97 = v39.i64[0];
  *(_QWORD *)&v90 = 0x300000003;
  DWORD2(v90) = 3;
  v91 = &v93;
  v92 = 0;
  sub_20B44AFEC((unsigned int *)&v90, v88);
  v100 = &v85;
  v101 = (const char *)v88;
  v102 = &v85;
  v103 = (const char *)v88;
  v104 = (const char *)v88;
  if (v87 == -1)
    sub_20AECFAB8();
  v99 = &v100;
  ((void (*)(char ****, char **))off_24C4142C8[v87])(&v99, &v85);
  if (v89 < 0)
    operator delete(v88[0]);
  v100 = &v85;
  v101 = "\n";
  v102 = &v85;
  v103 = "\n";
  v104 = "\n";
  if (v87 == -1)
    sub_20AECFAB8();
  v93 = &v100;
  ((void (*)(char ****, char **))off_24C4142B0[v87])(&v93, &v85);
  v100 = &v85;
  v101 = "with tolerance: ";
  v102 = &v85;
  v103 = "with tolerance: ";
  v104 = "with tolerance: ";
  if (v87 == -1)
    sub_20AECFAB8();
  v93 = &v100;
  ((void (*)(char ****, char **))off_24C414310[v87])(&v93, &v85);
  sub_20AF57AB0((uint64_t)&v100, (uint64_t)&v85, v22);
  if (v87 == -1)
    sub_20AECFAB8();
  v100 = (char **)&v93;
  ((void (*)(void **__return_ptr, char ***, char **))off_24C4142E0[v87])(v42, &v100, &v85);
  if (v87 != -1)
    ((void (*)(char ***, char **))off_24C414280[v87])(&v100, &v85);
  if (SHIBYTE(v43) < 0)
  {
    sub_20AEC60F4(v44, v42[0], (unint64_t)v42[1]);
  }
  else
  {
    *(_OWORD *)v44 = *(_OWORD *)v42;
    v45 = v43;
  }
  v46 = 1;
  LOBYTE(v47) = 0;
  v51 = 0;
  v52 = 1;
  sub_20B52280C((uint64_t)v44, (uint64_t)&v72);
  *(_OWORD *)a3 = v72;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v82)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v35 = v75;
    if (v75)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v74;
      v74 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v81)
    {
      v36 = v78;
      *(_QWORD *)(a3 + 64) = v77;
      *(_OWORD *)(a3 + 48) = v76;
      v76 = 0uLL;
      *(_QWORD *)(a3 + 72) = v36;
      *(_OWORD *)(a3 + 80) = v79;
      *(_QWORD *)(a3 + 96) = v80;
      v77 = 0;
      v79 = 0uLL;
      v80 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v35 && SHIBYTE(v74) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
  if (v52)
  {
    if (v51)
    {
      if (v50 < 0)
        operator delete(v49);
      if (v48 < 0)
        operator delete(v47);
    }
    if (v46 && SHIBYTE(v45) < 0)
      operator delete(v44[0]);
  }
  if (SHIBYTE(v43) < 0)
  {
    v34 = v42[0];
LABEL_93:
    operator delete(v34);
  }
}

void sub_20B243590(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 201) < 0)
  {
    operator delete(*(void **)(v1 - 224));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B24369C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int8x16_t v11;
  double v12;
  float64x2_t v13;
  double v14;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v25;
  float64x2_t v28;
  float64x2_t v31;
  double *v32;
  uint64_t v33;
  double v34;
  int64x2_t v35;
  int8x16_t v36;
  float64x2_t v37;
  int v39;
  uint64_t v40;
  void *v41;
  void *v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  float64_t v50;
  uint64_t v51;
  float64x2_t v52;
  float64x2_t v53;
  uint64_t *v54;
  float64x2_t v55;
  void *v56[2];
  uint64_t v57;
  void *v58[2];
  uint64_t v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  char v65;
  char v66;
  __int128 v67;
  int8x16_t *v68;
  char v69;
  void *v70;
  char v71;
  void *v72;
  char v73;
  char v74;
  char v75;
  double v76;
  __int128 __dst;
  int8x16_t *v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  char v84;
  char v85;
  __int128 v86;
  __int128 __p;
  uint64_t v88;
  unsigned __int8 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  char v95;
  char v96;
  _OWORD v97[2];
  double v98[4];
  char *v99;
  __int128 v100;
  int v101;
  void *v102[2];
  char v103;
  __int128 v104;
  int8x16_t *v105;
  int v106;
  int8x16_t v107;
  uint64_t *v108;
  int8x16_t v109;
  uint64_t v110;
  int8x16_t v111;
  float64_t v112;
  uint64_t v113[3];
  void **v114;
  void **v115;
  uint64_t *v116;

  v6 = *(double *)(a1 + 56);
  v98[0] = *(double *)(a1 + 24);
  v98[1] = v6;
  v7 = *(double *)(a1 + 88);
  v8 = *(double *)(a1 + 120);
  v98[2] = v7;
  v98[3] = v8;
  v97[0] = xmmword_20B5EE5B8;
  v97[1] = unk_20B5EE5C8;
  if (v98[0] != 0.0 && fabs(v98[0]) > *(double *)a2
    || v6 != 0.0 && fabs(v6) > *(double *)a2
    || v7 != 0.0 && fabs(v7) > *(double *)a2
    || v8 != 1.0 && (v8 <= 1.0 ? (v9 = 1.0 - v8) : (v9 = v8 + -1.0), v9 > *(double *)a2))
  {
    LODWORD(v114) = 0;
    sub_20B003710(v113, "se3 group matrix must be an affine 3x4 transform:\n");
    v107.i64[0] = (uint64_t)v113;
    v107.i64[1] = (uint64_t)"expected last row: ";
    v108 = v113;
    v109.i64[0] = (uint64_t)"expected last row: ";
    v109.i64[1] = (uint64_t)"expected last row: ";
    if ((_DWORD)v114 == -1)
      sub_20AECFAB8();
    v99 = (char *)&v107;
    ((void (*)(char **, uint64_t *))off_24C414298[v114])(&v99, v113);
    sub_20B248D60((uint64_t)v102, (uint64_t)v113, (double *)v97);
    v107.i64[0] = (uint64_t)v113;
    v107.i64[1] = (uint64_t)"\n";
    v108 = v113;
    v109.i64[0] = (uint64_t)"\n";
    v109.i64[1] = (uint64_t)"\n";
    if ((_DWORD)v114 == -1)
      sub_20AECFAB8();
    v99 = (char *)&v107;
    ((void (*)(char **, uint64_t *))off_24C4142B0[v114])(&v99, v113);
    v107.i64[0] = (uint64_t)v113;
    v107.i64[1] = (uint64_t)"  actual last row: ";
    v108 = v113;
    v109.i64[0] = (uint64_t)"  actual last row: ";
    v109.i64[1] = (uint64_t)"  actual last row: ";
    if ((_DWORD)v114 == -1)
      sub_20AECFAB8();
    v99 = (char *)&v107;
    ((void (*)(char **, uint64_t *))off_24C414298[v114])(&v99, v113);
    sub_20B248D60((uint64_t)v56, (uint64_t)v113, v98);
    v107.i64[0] = (uint64_t)v113;
    v107.i64[1] = (uint64_t)"\n";
    v108 = v113;
    v109.i64[0] = (uint64_t)"\n";
    v109.i64[1] = (uint64_t)"\n";
    if ((_DWORD)v114 == -1)
      sub_20AECFAB8();
    v99 = (char *)&v107;
    ((void (*)(char **, uint64_t *))off_24C4142B0[v114])(&v99, v113);
    v107.i64[0] = (uint64_t)v113;
    v107.i64[1] = (uint64_t)"   with tolerance: ";
    v108 = v113;
    v109.i64[0] = (uint64_t)"   with tolerance: ";
    v109.i64[1] = (uint64_t)"   with tolerance: ";
    if ((_DWORD)v114 == -1)
      sub_20AECFAB8();
    v99 = (char *)&v107;
    ((void (*)(char **, uint64_t *))off_24C414298[v114])(&v99, v113);
    sub_20AF55CBC((uint64_t)&v107, (uint64_t)v113, (double *)a2);
    if ((_DWORD)v114 == -1)
      sub_20AECFAB8();
    v107.i64[0] = (uint64_t)&v99;
    ((void (*)(__int128 *__return_ptr, int8x16_t *, uint64_t *))off_24C4142E0[v114])(&v104, &v107, v113);
    if ((_DWORD)v114 != -1)
      ((void (*)(int8x16_t *, uint64_t *))off_24C414280[v114])(&v107, v113);
    if (SHIBYTE(v105) < 0)
    {
      sub_20AEC60F4(&__dst, (void *)v104, *((unint64_t *)&v104 + 1));
    }
    else
    {
      __dst = v104;
      v78 = v105;
    }
    v79 = 1;
    LOBYTE(v80) = 0;
    v84 = 0;
    v85 = 1;
    sub_20B52280C((uint64_t)&__dst, (uint64_t)&v86);
    *(_OWORD *)a3 = v86;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    if (v96)
    {
      *(_BYTE *)(a3 + 40) = 0;
      v39 = v89;
      if (v89)
      {
        *(_OWORD *)(a3 + 16) = __p;
        *(_QWORD *)(a3 + 32) = v88;
        v88 = 0;
        __p = 0uLL;
        *(_BYTE *)(a3 + 40) = 1;
      }
      *(_BYTE *)(a3 + 48) = 0;
      *(_BYTE *)(a3 + 104) = 0;
      if (v95)
      {
        v40 = v92;
        *(_QWORD *)(a3 + 64) = v91;
        *(_OWORD *)(a3 + 48) = v90;
        v90 = 0uLL;
        *(_QWORD *)(a3 + 72) = v40;
        *(_OWORD *)(a3 + 80) = v93;
        *(_QWORD *)(a3 + 96) = v94;
        v91 = 0;
        v93 = 0uLL;
        v94 = 0;
        *(_BYTE *)(a3 + 104) = 1;
      }
      *(_BYTE *)(a3 + 112) = 1;
      *(_BYTE *)(a3 + 120) = 0;
      if (v39)
      {
        if (SHIBYTE(v88) < 0)
          operator delete((void *)__p);
      }
      if (!v85)
        goto LABEL_57;
    }
    else
    {
      *(_BYTE *)(a3 + 120) = 0;
      if (!v85)
        goto LABEL_57;
    }
    if (!v84)
      goto LABEL_53;
    if (v83 < 0)
    {
      operator delete(v82);
      if ((v81 & 0x80000000) == 0)
      {
LABEL_53:
        if (!v79)
          goto LABEL_57;
        goto LABEL_54;
      }
    }
    else if ((v81 & 0x80000000) == 0)
    {
      goto LABEL_53;
    }
    operator delete(v80);
    if (!v79)
      goto LABEL_57;
LABEL_54:
    if (SHIBYTE(v78) < 0)
    {
      v41 = (void *)__dst;
LABEL_56:
      operator delete(v41);
    }
LABEL_57:
    if ((SHIBYTE(v105) & 0x80000000) == 0)
      return;
    v42 = (void *)v104;
    goto LABEL_93;
  }
  v10 = sub_20AEBFF18((float64x2_t *)a1);
  v76 = v10;
  if (v10 != 1.0)
  {
    v12 = v10 >= 1.0 ? v10 + -1.0 : 1.0 - v10;
    if (v12 > *(double *)(a2 + 8))
    {
      LODWORD(v114) = 0;
      sub_20AF86A14(v113, "se3 group matrix must have determinant 1\n");
      v107.i64[0] = (uint64_t)v113;
      v107.i64[1] = (uint64_t)"actual determinant: ";
      v108 = v113;
      v109.i64[0] = (uint64_t)"actual determinant: ";
      v109.i64[1] = (uint64_t)"actual determinant: ";
      if ((_DWORD)v114 == -1)
        sub_20AECFAB8();
      v99 = (char *)&v107;
      ((void (*)(char **, uint64_t *))off_24C4142F8[v114])(&v99, v113);
      sub_20AF55CBC((uint64_t)v102, (uint64_t)v113, &v76);
      v107.i64[0] = (uint64_t)v113;
      v107.i64[1] = (uint64_t)"\n";
      v108 = v113;
      v109.i64[0] = (uint64_t)"\n";
      v109.i64[1] = (uint64_t)"\n";
      if ((_DWORD)v114 == -1)
        sub_20AECFAB8();
      v99 = (char *)&v107;
      ((void (*)(char **, uint64_t *))off_24C4142B0[v114])(&v99, v113);
      v107.i64[0] = (uint64_t)v113;
      v107.i64[1] = (uint64_t)"    with tolerance: ";
      v108 = v113;
      v109.i64[0] = (uint64_t)"    with tolerance: ";
      v109.i64[1] = (uint64_t)"    with tolerance: ";
      if ((_DWORD)v114 == -1)
        sub_20AECFAB8();
      v99 = (char *)&v107;
      ((void (*)(char **, uint64_t *))off_24C4142F8[v114])(&v99, v113);
      sub_20AF55CBC((uint64_t)&v107, (uint64_t)v113, (double *)(a2 + 8));
      if ((_DWORD)v114 == -1)
        sub_20AECFAB8();
      v107.i64[0] = (uint64_t)&v99;
      ((void (*)(__int128 *__return_ptr, int8x16_t *, uint64_t *))off_24C4142E0[v114])(&v104, &v107, v113);
      if ((_DWORD)v114 != -1)
        ((void (*)(int8x16_t *, uint64_t *))off_24C414280[v114])(&v107, v113);
      if (SHIBYTE(v105) < 0)
      {
        sub_20AEC60F4(&v67, (void *)v104, *((unint64_t *)&v104 + 1));
      }
      else
      {
        v67 = v104;
        v68 = v105;
      }
      v69 = 1;
      LOBYTE(v70) = 0;
      v74 = 0;
      v75 = 1;
      sub_20B52280C((uint64_t)&v67, (uint64_t)&v86);
      *(_OWORD *)a3 = v86;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v96)
      {
        *(_BYTE *)(a3 + 40) = 0;
        v48 = v89;
        if (v89)
        {
          *(_OWORD *)(a3 + 16) = __p;
          *(_QWORD *)(a3 + 32) = v88;
          v88 = 0;
          __p = 0uLL;
          *(_BYTE *)(a3 + 40) = 1;
        }
        *(_BYTE *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 104) = 0;
        if (v95)
        {
          v49 = v92;
          *(_QWORD *)(a3 + 64) = v91;
          *(_OWORD *)(a3 + 48) = v90;
          v90 = 0uLL;
          *(_QWORD *)(a3 + 72) = v49;
          *(_OWORD *)(a3 + 80) = v93;
          *(_QWORD *)(a3 + 96) = v94;
          v91 = 0;
          v93 = 0uLL;
          v94 = 0;
          *(_BYTE *)(a3 + 104) = 1;
        }
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (v48 && SHIBYTE(v88) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a3 + 120) = 0;
      }
      if (!v75)
        goto LABEL_57;
      if (v74)
      {
        if (v73 < 0)
          operator delete(v72);
        if (v71 < 0)
          operator delete(v70);
      }
      if (!v69 || (SHIBYTE(v68) & 0x80000000) == 0)
        goto LABEL_57;
      v41 = (void *)v67;
      goto LABEL_56;
    }
  }
  v13 = *(float64x2_t *)(a1 + 32);
  v14 = *(double *)(a1 + 80);
  _Q5 = *(float64x2_t *)(a1 + 64);
  v16 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a1, (int64x2_t)v13);
  v31 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a1, (int64x2_t)v13);
  v17.f64[0] = *(float64_t *)(a1 + 16);
  v17.f64[1] = *(float64_t *)(a1 + 48);
  v18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, *(double *)a1), v31, *(float64x2_t *)a1, 1), v17, v17.f64[0]);
  _Q17 = (int64x2_t)vmulq_f64(_Q5, *(float64x2_t *)a1);
  _D1 = *(_QWORD *)(a1 + 8);
  __asm { FMLA            D17, D1, V5.D[1] }
  *(double *)_Q17.i64 = *(double *)_Q17.i64 + v14 * v17.f64[0];
  v25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, v13.f64[0]), v31, v13, 1), v17, v17.f64[1]);
  _D1 = *(_QWORD *)(a1 + 40);
  __asm { FMLA            D0, D1, V5.D[1] }
  *(double *)v11.i64 = _D0 + v14 * v17.f64[1];
  v28 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, _Q5.f64[0]), v31, _Q5, 1), v17, v14);
  _D1 = *(_QWORD *)(a1 + 72);
  __asm { FMLA            D0, D1, V5.D[1] }
  v31.f64[0] = _D0 + v14 * v14;
  v33 = *(uint64_t *)(a2 + 16);
  v32 = (double *)(a2 + 16);
  v34 = *(double *)&v33;
  v35 = (int64x2_t)vaddq_f64(v25, (float64x2_t)xmmword_20B5EE500);
  v36 = (int8x16_t)vabsq_f64(vaddq_f64(v18, (float64x2_t)xmmword_20B5EE4F0));
  v37 = (float64x2_t)vdupq_lane_s64(v33, 0);
  if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v37, (float64x2_t)vextq_s8(v36, v36, 8uLL)), (int32x4_t)vcgeq_f64(v37, vabsq_f64((float64x2_t)vzip1q_s64(_Q17, v35)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v37, vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v35, v11, 8uLL))), (int32x4_t)vcgeq_f64(v37, vabsq_f64(v28))))), 7uLL))) & 1) != 0)
  {
    __asm { FMOV            V1.2D, #-1.0 }
    if (vabsq_f64(vaddq_f64(v31, _Q1)).f64[0] <= v34)
    {
      *(_BYTE *)(a3 + 120) = 1;
      return;
    }
  }
  v50 = v31.f64[0];
  v51 = v11.i64[0];
  v52 = v28;
  v53 = v25;
  v54 = (uint64_t *)_Q17.i64[0];
  v55 = v18;
  v101 = -1;
  v99 = (char *)operator new(0x48uLL);
  v100 = xmmword_20B5EE4E0;
  strcpy(v99, "se3 group rotation must be orthogonal (expecting identity R^T*R)\n");
  v101 = 1;
  v107.i64[0] = (uint64_t)&v99;
  v107.i64[1] = (uint64_t)"  actual R^T*R:\n";
  v108 = (uint64_t *)&v99;
  v109.i64[0] = (uint64_t)"  actual R^T*R:\n";
  v109.i64[1] = (uint64_t)"  actual R^T*R:\n";
  v113[0] = (uint64_t)&v107;
  sub_20B2488B4(v113, (uint64_t)&v99);
  v43 = (int8x16_t)v55;
  v45 = (int8x16_t)v52;
  v44 = (int8x16_t)v53;
  v43.i64[1] = vextq_s8(v43, v43, 8uLL).u64[0];
  v107 = v43;
  v44.i64[1] = vextq_s8(v44, v44, 8uLL).u64[0];
  v108 = v54;
  v110 = v51;
  v109 = v44;
  v112 = v50;
  v45.i64[1] = vextq_s8(v45, v45, 8uLL).u64[0];
  v111 = v45;
  *(_QWORD *)&v104 = 0x300000003;
  DWORD2(v104) = 3;
  v105 = &v107;
  v106 = 0;
  sub_20B44B638((unsigned int *)&v104, v102);
  v113[0] = (uint64_t)&v99;
  v113[1] = (uint64_t)v102;
  v113[2] = (uint64_t)&v99;
  v114 = v102;
  v115 = v102;
  if (v101 == -1)
    sub_20AECFAB8();
  v116 = v113;
  ((void (*)(uint64_t **, char **))off_24C4142C8[v101])(&v116, &v99);
  if (v103 < 0)
    operator delete(v102[0]);
  v107.i64[0] = (uint64_t)&v99;
  v107.i64[1] = (uint64_t)"\n";
  v108 = (uint64_t *)&v99;
  v109.i64[0] = (uint64_t)"\n";
  v109.i64[1] = (uint64_t)"\n";
  if (v101 == -1)
    sub_20AECFAB8();
  v113[0] = (uint64_t)&v107;
  ((void (*)(uint64_t *, char **))off_24C4142B0[v101])(v113, &v99);
  v107.i64[0] = (uint64_t)&v99;
  v107.i64[1] = (uint64_t)"with tolerance: ";
  v108 = (uint64_t *)&v99;
  v109.i64[0] = (uint64_t)"with tolerance: ";
  v109.i64[1] = (uint64_t)"with tolerance: ";
  if (v101 == -1)
    sub_20AECFAB8();
  v113[0] = (uint64_t)&v107;
  ((void (*)(uint64_t *, char **))off_24C414310[v101])(v113, &v99);
  sub_20AF55CBC((uint64_t)&v107, (uint64_t)&v99, v32);
  if (v101 == -1)
    sub_20AECFAB8();
  v107.i64[0] = (uint64_t)v113;
  ((void (*)(void **__return_ptr, int8x16_t *, char **))off_24C4142E0[v101])(v56, &v107, &v99);
  if (v101 != -1)
    ((void (*)(int8x16_t *, char **))off_24C414280[v101])(&v107, &v99);
  if (SHIBYTE(v57) < 0)
  {
    sub_20AEC60F4(v58, v56[0], (unint64_t)v56[1]);
  }
  else
  {
    *(_OWORD *)v58 = *(_OWORD *)v56;
    v59 = v57;
  }
  v60 = 1;
  LOBYTE(v61) = 0;
  v65 = 0;
  v66 = 1;
  sub_20B52280C((uint64_t)v58, (uint64_t)&v86);
  *(_OWORD *)a3 = v86;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v96)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v46 = v89;
    if (v89)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v88;
      v88 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v95)
    {
      v47 = v92;
      *(_QWORD *)(a3 + 64) = v91;
      *(_OWORD *)(a3 + 48) = v90;
      v90 = 0uLL;
      *(_QWORD *)(a3 + 72) = v47;
      *(_OWORD *)(a3 + 80) = v93;
      *(_QWORD *)(a3 + 96) = v94;
      v91 = 0;
      v93 = 0uLL;
      v94 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v46 && SHIBYTE(v88) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
  if (v66)
  {
    if (v65)
    {
      if (v64 < 0)
        operator delete(v63);
      if (v62 < 0)
        operator delete(v61);
    }
    if (v60 && SHIBYTE(v59) < 0)
      operator delete(v58[0]);
  }
  if (SHIBYTE(v57) < 0)
  {
    v42 = v56[0];
LABEL_93:
    operator delete(v42);
  }
}

void sub_20B244300(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 209) < 0)
  {
    operator delete(*(void **)(v1 - 232));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20B24440C(uint64_t *a1, uint64_t a2, float *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  void *p_p;
  uint64_t v14;
  char v15;
  size_t v16;
  void **v17;
  unint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  const char *v28;
  size_t v29;
  _BYTE *v30;
  const char *v31;
  uint64_t v32;
  unint64_t v33;
  const char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  size_t v44;
  size_t v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  void *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  const char *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *exception;
  uint64_t *v101;
  const char *v102;
  void *__p;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v105;
  int v106;
  const char *v107;
  int v108;
  const char *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *__dst[2];
  int64_t v113;
  _QWORD v114[2];
  _QWORD v115[3];
  const void *v116;
  uint64_t v117;
  const void *v118;
  unint64_t v119;
  void *v120;
  char v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE v126[16];
  void *v127;
  char v128;
  char v129;
  void *v130;
  char v131;
  void *v132;
  char v133;
  char v134;
  char v135;
  char v136;
  __int128 v137;
  std::__shared_weak_count *v138;
  char *v139;
  std::__shared_weak_count *v140;
  _QWORD *v141;
  __int128 v142;
  _BYTE v143[24];
  __int128 v144;
  void *v145[2];
  unint64_t v146;
  char v147;
  _QWORD v148[5];

  v148[2] = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 48) = v8;
  *(_DWORD *)(v6 + 128) = 0;
  *(_BYTE *)(v6 + 136) = 4;
  *a1 = v6;
  sub_20B242950((float32x2_t *)a2, a3, (uint64_t)v126);
  if (v136)
    return a1;
  sub_20B245F88(&v125);
  if (**(int **)(v125 + 56) > 5
    || (v9 = *(unsigned __int8 *)(v125 + 72), v10 = sub_20AEC3CD0(v125, "OSLogSurrogateAppender", 1, 0),
                                              v11 = v10,
                                              !v9)
    && !v10)
  {
    if (v136)
      return a1;
    goto LABEL_156;
  }
  sub_20AEC0BD8((uint64_t)v114);
  if (v136)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C3F6160;
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22A8, (void (*)(void *))std::exception::~exception);
  }
  LODWORD(v144) = 0;
  sub_20AF6A9E4(v143, "Invalid argument for SE3: ");
  sub_20AF57E5C((uint64_t)&v137, (std::string::size_type)v143, (uint64_t)v126);
  if ((_DWORD)v144 == -1)
    sub_20AECFAB8();
  *(_QWORD *)&v137 = &v141;
  ((void (*)(void **__return_ptr, __int128 *, _BYTE *))off_24C4142E0[v144])(&__p, &v137, v143);
  if ((_DWORD)v144 != -1)
    ((void (*)(__int128 *, _BYTE *))off_24C414280[v144])(&v137, v143);
  if (v105 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v105 >= 0)
    v14 = HIBYTE(v105);
  else
    v14 = rep;
  sub_20AEC01D0(v115, (uint64_t)p_p, v14);
  if ((SHIBYTE(v105) & 0x80000000) == 0)
  {
    v15 = v123;
    if ((v123 & 0x10) == 0)
      goto LABEL_19;
LABEL_22:
    v18 = v122;
    if (v122 < v119)
    {
      v122 = v119;
      v18 = v119;
    }
    v19 = v118;
    v16 = v18 - (_QWORD)v118;
    if (v18 - (unint64_t)v118 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_77;
    goto LABEL_25;
  }
  operator delete(__p);
  v15 = v123;
  if ((v123 & 0x10) != 0)
    goto LABEL_22;
LABEL_19:
  if ((v15 & 8) == 0)
  {
    v16 = 0;
    HIBYTE(v113) = 0;
    v17 = __dst;
    goto LABEL_32;
  }
  v19 = v116;
  v16 = v117 - (_QWORD)v116;
  if ((unint64_t)(v117 - (_QWORD)v116) > 0x7FFFFFFFFFFFFFF7)
LABEL_77:
    sub_20AEC0138();
LABEL_25:
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    v17 = (void **)operator new(v20 + 1);
    __dst[1] = (void *)v16;
    v113 = v21 | 0x8000000000000000;
    __dst[0] = v17;
    goto LABEL_31;
  }
  HIBYTE(v113) = v16;
  v17 = __dst;
  if (v16)
LABEL_31:
    memmove(v17, v19, v16);
LABEL_32:
  *((_BYTE *)v17 + v16) = 0;
  __p = &v125;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v105 = std::chrono::system_clock::now().__d_.__rep_;
  v106 = 5;
  v107 = "unknown file";
  v108 = 162;
  v110 = 0;
  v111 = 0;
  v109 = "unknown function";
  if (v113 >= 0)
    v22 = (const char *)__dst;
  else
    v22 = (const char *)__dst[0];
  v23 = *(_QWORD *)__p;
  v24 = (const char *)(*(_QWORD *)__p + 16);
  v102 = v24;
  if (*(char *)(*(_QWORD *)__p + 39) < 0)
  {
    v24 = *(const char **)(v23 + 16);
    v25 = *(_QWORD *)(v23 + 24);
    v27 = atomic_load((unsigned __int8 *)&qword_254630278);
    if ((v27 & 1) != 0)
      goto LABEL_39;
  }
  else
  {
    v25 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
    v26 = atomic_load((unsigned __int8 *)&qword_254630278);
    if ((v26 & 1) != 0)
      goto LABEL_39;
  }
  if (__cxa_guard_acquire(&qword_254630278))
  {
    sub_20B5271B0((uint64_t)v143);
    sub_20AECF058("com.apple.cv3d", (unint64_t)v143, &qword_254630260);
    if ((_BYTE)v144 && (v143[23] & 0x80000000) != 0)
      operator delete(*(void **)v143);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630260, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630278);
  }
LABEL_39:
  if (byte_254630277 >= 0)
    v28 = (const char *)&qword_254630260;
  else
    v28 = (const char *)qword_254630260;
  if (byte_254630277 >= 0)
    v29 = byte_254630277;
  else
    v29 = unk_254630268;
  *(_QWORD *)v143 = os_log_create(v28, v24);
  v30 = &v143[8];
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v29 >= 0x17)
  {
    v101 = a1;
    v31 = v24;
    v32 = v23;
    v33 = v11;
    v34 = v22;
    v35 = v9;
    v36 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v36 = v29 | 7;
    v37 = v36 + 1;
    v30 = operator new(v36 + 1);
    *(_QWORD *)&v143[16] = v29;
    *(_QWORD *)&v144 = v37 | 0x8000000000000000;
    *(_QWORD *)&v143[8] = v30;
    v9 = v35;
    v22 = v34;
    v11 = v33;
    v23 = v32;
    v24 = v31;
    a1 = v101;
    goto LABEL_52;
  }
  BYTE7(v144) = v29;
  if (v29)
LABEL_52:
    memmove(v30, v28, v29);
  v30[v29] = 0;
  BYTE8(v144) = 1;
  v38 = v145;
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v25 >= 0x17)
  {
    v39 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v39 = v25 | 7;
    v40 = v39 + 1;
    v38 = (void **)operator new(v39 + 1);
    v145[1] = (void *)v25;
    v146 = v40 | 0x8000000000000000;
    v145[0] = v38;
    goto LABEL_60;
  }
  HIBYTE(v146) = v25;
  if (v25)
LABEL_60:
    memmove(v38, v24, v25);
  *((_BYTE *)v38 + v25) = 0;
  v147 = 1;
  v41 = *(NSObject **)v143;
  if (SHIBYTE(v146) < 0)
    operator delete(v145[0]);
  if (BYTE8(v144) && SBYTE7(v144) < 0)
    operator delete(*(void **)&v143[8]);
  if (*(_QWORD *)v143)
    os_release(*(void **)v143);
  if (v11 && *(_QWORD *)(v11 + 24))
  {
    _os_log_pack_size();
    v42 = MEMORY[0x20BD35848]();
    v43 = (std::__shared_weak_count *)operator new();
    v43->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F21E0;
    v43->__shared_owners_ = 0;
    v43->__shared_weak_owners_ = 0;
    v43[1].__vftable = (std::__shared_weak_count_vtbl *)v42;
    *(_QWORD *)&v137 = v42;
    *((_QWORD *)&v137 + 1) = v42;
    v139 = 0;
    v140 = 0;
    v138 = v43;
    v44 = strlen(v22);
    if (v44 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v45 = v44;
    if (v44 >= 0x17)
    {
      v48 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v44 | 7) != 0x17)
        v48 = v44 | 7;
      v49 = v48 + 1;
      v46 = operator new(v48 + 1);
      *(_QWORD *)&v142 = v45;
      *((_QWORD *)&v142 + 1) = v49 | 0x8000000000000000;
      v141 = v46;
    }
    else
    {
      HIBYTE(v142) = v44;
      v46 = &v141;
      if (!v44)
      {
LABEL_82:
        *((_BYTE *)v46 + v45) = 0;
        v50 = v141;
        v148[0] = v142;
        *(_QWORD *)((char *)v148 + 7) = *(_QWORD *)((char *)&v142 + 7);
        v51 = HIBYTE(v142);
        v52 = operator new(0x38uLL);
        v52[1] = 0;
        v52[2] = 0;
        v52[3] = off_24C3F2280;
        *v52 = &off_24C3F2230;
        v53 = v148[0];
        v52[4] = v50;
        v52[5] = v53;
        *(_QWORD *)((char *)v52 + 47) = *(_QWORD *)((char *)v148 + 7);
        *((_BYTE *)v52 + 55) = v51;
        v148[0] = 0;
        *(_QWORD *)((char *)v148 + 7) = 0;
        v54 = v140;
        v139 = (char *)(v52 + 3);
        v140 = (std::__shared_weak_count *)v52;
        if (v54)
        {
          p_shared_owners = (unint64_t *)&v54->__shared_owners_;
          do
            v56 = __ldaxr(p_shared_owners);
          while (__stlxr(v56 - 1, p_shared_owners));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        *(_OWORD *)v143 = v137;
        v57 = v139;
        *(_QWORD *)&v143[16] = v138;
        if (v138)
        {
          v58 = (unint64_t *)&v138->__shared_owners_;
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        v60 = v140;
        *(_QWORD *)&v144 = v57;
        *((_QWORD *)&v144 + 1) = v140;
        if (v140)
        {
          v61 = (unint64_t *)&v140->__shared_owners_;
          do
            v62 = __ldxr(v61);
          while (__stxr(v62 + 1, v61));
          v145[0] = v57;
          do
            v63 = __ldaxr(v61);
          while (__stlxr(v63 - 1, v61));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        else
        {
          v145[0] = v57;
        }
        v64 = v138;
        if (v138)
        {
          v65 = (unint64_t *)&v138->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v67 = *(_QWORD *)v143;
        if (*((char *)v145[0] + 31) >= 0)
          v68 = (char *)v145[0] + 8;
        else
          v68 = (char *)*((_QWORD *)v145[0] + 1);
        v69 = _os_log_pack_fill();
        *(_DWORD *)v69 = 136315138;
        *(_QWORD *)(v69 + 4) = v68;
        v70 = operator new();
        v71 = *(unsigned __int8 *)(v23 + 39);
        v72 = *(const char **)(v23 + 16);
        v73 = *(_QWORD *)(v23 + 24);
        v74 = v144;
        *(_OWORD *)(v70 + 8) = *(_OWORD *)&v143[8];
        if ((v71 & 0x80u) != 0)
          v71 = v73;
        else
          v72 = v102;
        *(_QWORD *)v70 = v67;
        *(_QWORD *)&v143[8] = 0;
        *(_QWORD *)&v143[16] = 0;
        *(_OWORD *)(v70 + 24) = v74;
        v144 = 0uLL;
        *(_QWORD *)(v70 + 40) = v72;
        *(_QWORD *)(v70 + 48) = v71;
        *(_BYTE *)(v70 + 56) = 16;
        v141 = 0;
        *(_QWORD *)&v137 = v70;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), &v137);
        v75 = v137;
        *(_QWORD *)&v137 = 0;
        if (v75)
        {
          v76 = *(std::__shared_weak_count **)(v75 + 32);
          if (v76)
          {
            v77 = (unint64_t *)&v76->__shared_owners_;
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
          }
          v79 = *(std::__shared_weak_count **)(v75 + 16);
          if (v79)
          {
            v80 = (unint64_t *)&v79->__shared_owners_;
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
          MEMORY[0x20BD3583C](v75, 0x10F0C40B62ED6C6);
          v82 = v141;
          v141 = 0;
          if (v82)
          {
            v83 = (std::__shared_weak_count *)v82[4];
            if (v83)
            {
              v84 = (unint64_t *)&v83->__shared_owners_;
              do
                v85 = __ldaxr(v84);
              while (__stlxr(v85 - 1, v84));
              if (!v85)
              {
                ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                std::__shared_weak_count::__release_weak(v83);
              }
            }
            v86 = (std::__shared_weak_count *)v82[2];
            if (v86)
            {
              v87 = (unint64_t *)&v86->__shared_owners_;
              do
                v88 = __ldaxr(v87);
              while (__stlxr(v88 - 1, v87));
              if (!v88)
              {
                ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                std::__shared_weak_count::__release_weak(v86);
              }
            }
            MEMORY[0x20BD3583C](v82, 0x10F0C40B62ED6C6);
          }
        }
        v89 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
        if (*((_QWORD *)&v144 + 1))
        {
          v90 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v92 = *(std::__shared_weak_count **)&v143[16];
        if (*(_QWORD *)&v143[16])
        {
          v93 = (unint64_t *)(*(_QWORD *)&v143[16] + 8);
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        goto LABEL_142;
      }
    }
    memcpy(v46, v22, v45);
    goto LABEL_82;
  }
  os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
  *(_DWORD *)v143 = 136315138;
  *(_QWORD *)&v143[4] = v22;
  v47 = (void *)_os_log_send_and_compose_impl();
  if (v47)
    free(v47);
LABEL_142:
  if (v9)
  {
    v95 = (const char *)__dst;
    if (v113 < 0)
      v95 = (const char *)__dst[0];
    sub_20AEC0664((uint64_t)&__p, "%s", v95);
    sub_20AECED58((uint64_t)&__p);
  }
  sub_20AECED58((uint64_t)&__p);
  v96 = v111;
  if (v111)
  {
    v97 = (unint64_t *)&v111->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if (SHIBYTE(v113) < 0)
    operator delete(__dst[0]);
  v114[0] = *MEMORY[0x24BEDB7F0];
  v99 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v114 + *(_QWORD *)(v114[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v115[0] = v99;
  v115[1] = MEMORY[0x24BEDB848] + 16;
  if (v121 < 0)
    operator delete(v120);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](&v124);
  if (!v136)
  {
LABEL_156:
    if (v135)
    {
      if (v134)
      {
        if (v133 < 0)
          operator delete(v132);
        if (v131 < 0)
          operator delete(v130);
      }
      if (v129 && v128 < 0)
        operator delete(v127);
    }
  }
  return a1;
}

void sub_20B244FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  uint64_t v64;
  uint64_t v66;

  if (*(_BYTE *)(v64 - 168) && *(char *)(v64 - 169) < 0)
    operator delete(*(void **)(v64 - 192));
  __cxa_guard_abort(&qword_254630278);
  sub_20AFA93EC((uint64_t)&a13);
  if (a27 < 0)
    operator delete(__p);
  sub_20AEC2E08((uint64_t)&a28);
  sub_20AECD704((uint64_t)&a64);
  v66 = *a11;
  *a11 = 0;
  if (v66)
    MEMORY[0x20BD3583C](v66, 0x1000C4072FAA15ELL);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B2451C0(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  void *p_p;
  uint64_t v16;
  char v17;
  size_t v18;
  void **v19;
  unint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  size_t v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  const char *v30;
  size_t v31;
  _BYTE *v32;
  const char *v33;
  uint64_t v34;
  unint64_t v35;
  const char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  size_t v46;
  size_t v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  void *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  const char *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *exception;
  uint64_t *v103;
  const char *v104;
  void *__p;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v107;
  int v108;
  const char *v109;
  int v110;
  const char *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  void *__dst[2];
  int64_t v115;
  _QWORD v116[2];
  _QWORD v117[3];
  const void *v118;
  uint64_t v119;
  const void *v120;
  unint64_t v121;
  void *v122;
  char v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE v128[16];
  void *v129;
  char v130;
  char v131;
  void *v132;
  char v133;
  void *v134;
  char v135;
  char v136;
  char v137;
  char v138;
  __int128 v139;
  std::__shared_weak_count *v140;
  char *v141;
  std::__shared_weak_count *v142;
  _QWORD *v143;
  __int128 v144;
  _BYTE v145[24];
  __int128 v146;
  void *v147[2];
  unint64_t v148;
  char v149;
  _QWORD v150[5];

  v150[2] = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  v7 = a2[5];
  *(_OWORD *)(v6 + 64) = a2[4];
  *(_OWORD *)(v6 + 80) = v7;
  v8 = a2[7];
  *(_OWORD *)(v6 + 96) = a2[6];
  *(_OWORD *)(v6 + 112) = v8;
  v9 = a2[1];
  *(_OWORD *)v6 = *a2;
  *(_OWORD *)(v6 + 16) = v9;
  v10 = a2[3];
  *(_OWORD *)(v6 + 32) = a2[2];
  *(_OWORD *)(v6 + 48) = v10;
  *(_DWORD *)(v6 + 128) = 1;
  *(_BYTE *)(v6 + 136) = 5;
  *a1 = v6;
  sub_20B24369C((uint64_t)a2, a3, (uint64_t)v128);
  if (v138)
    return a1;
  sub_20B245F88(&v127);
  if (**(int **)(v127 + 56) > 5
    || (v11 = *(unsigned __int8 *)(v127 + 72),
        v12 = sub_20AEC3CD0(v127, "OSLogSurrogateAppender", 1, 0),
        v13 = v12,
        !v11)
    && !v12)
  {
    if (v138)
      return a1;
    goto LABEL_156;
  }
  sub_20AEC0BD8((uint64_t)v116);
  if (v138)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C3F6160;
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22A8, (void (*)(void *))std::exception::~exception);
  }
  LODWORD(v146) = 0;
  sub_20AF6A9E4(v145, "Invalid argument for SE3: ");
  sub_20AF57E5C((uint64_t)&v139, (std::string::size_type)v145, (uint64_t)v128);
  if ((_DWORD)v146 == -1)
    sub_20AECFAB8();
  *(_QWORD *)&v139 = &v143;
  ((void (*)(void **__return_ptr, __int128 *, _BYTE *))off_24C4142E0[v146])(&__p, &v139, v145);
  if ((_DWORD)v146 != -1)
    ((void (*)(__int128 *, _BYTE *))off_24C414280[v146])(&v139, v145);
  if (v107 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v107 >= 0)
    v16 = HIBYTE(v107);
  else
    v16 = rep;
  sub_20AEC01D0(v117, (uint64_t)p_p, v16);
  if ((SHIBYTE(v107) & 0x80000000) == 0)
  {
    v17 = v125;
    if ((v125 & 0x10) == 0)
      goto LABEL_19;
LABEL_22:
    v20 = v124;
    if (v124 < v121)
    {
      v124 = v121;
      v20 = v121;
    }
    v21 = v120;
    v18 = v20 - (_QWORD)v120;
    if (v20 - (unint64_t)v120 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_77;
    goto LABEL_25;
  }
  operator delete(__p);
  v17 = v125;
  if ((v125 & 0x10) != 0)
    goto LABEL_22;
LABEL_19:
  if ((v17 & 8) == 0)
  {
    v18 = 0;
    HIBYTE(v115) = 0;
    v19 = __dst;
    goto LABEL_32;
  }
  v21 = v118;
  v18 = v119 - (_QWORD)v118;
  if ((unint64_t)(v119 - (_QWORD)v118) > 0x7FFFFFFFFFFFFFF7)
LABEL_77:
    sub_20AEC0138();
LABEL_25:
  if (v18 >= 0x17)
  {
    v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v22 = v18 | 7;
    v23 = v22 + 1;
    v19 = (void **)operator new(v22 + 1);
    __dst[1] = (void *)v18;
    v115 = v23 | 0x8000000000000000;
    __dst[0] = v19;
    goto LABEL_31;
  }
  HIBYTE(v115) = v18;
  v19 = __dst;
  if (v18)
LABEL_31:
    memmove(v19, v21, v18);
LABEL_32:
  *((_BYTE *)v19 + v18) = 0;
  __p = &v127;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v107 = std::chrono::system_clock::now().__d_.__rep_;
  v108 = 5;
  v109 = "unknown file";
  v110 = 162;
  v112 = 0;
  v113 = 0;
  v111 = "unknown function";
  if (v115 >= 0)
    v24 = (const char *)__dst;
  else
    v24 = (const char *)__dst[0];
  v25 = *(_QWORD *)__p;
  v26 = (const char *)(*(_QWORD *)__p + 16);
  v104 = v26;
  if (*(char *)(*(_QWORD *)__p + 39) < 0)
  {
    v26 = *(const char **)(v25 + 16);
    v27 = *(_QWORD *)(v25 + 24);
    v29 = atomic_load((unsigned __int8 *)&qword_254630278);
    if ((v29 & 1) != 0)
      goto LABEL_39;
  }
  else
  {
    v27 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
    v28 = atomic_load((unsigned __int8 *)&qword_254630278);
    if ((v28 & 1) != 0)
      goto LABEL_39;
  }
  if (__cxa_guard_acquire(&qword_254630278))
  {
    sub_20B5271B0((uint64_t)v145);
    sub_20AECF058("com.apple.cv3d", (unint64_t)v145, &qword_254630260);
    if ((_BYTE)v146 && (v145[23] & 0x80000000) != 0)
      operator delete(*(void **)v145);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630260, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630278);
  }
LABEL_39:
  if (byte_254630277 >= 0)
    v30 = (const char *)&qword_254630260;
  else
    v30 = (const char *)qword_254630260;
  if (byte_254630277 >= 0)
    v31 = byte_254630277;
  else
    v31 = unk_254630268;
  *(_QWORD *)v145 = os_log_create(v30, v26);
  v32 = &v145[8];
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v31 >= 0x17)
  {
    v103 = a1;
    v33 = v26;
    v34 = v25;
    v35 = v13;
    v36 = v24;
    v37 = v11;
    v38 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v38 = v31 | 7;
    v39 = v38 + 1;
    v32 = operator new(v38 + 1);
    *(_QWORD *)&v145[16] = v31;
    *(_QWORD *)&v146 = v39 | 0x8000000000000000;
    *(_QWORD *)&v145[8] = v32;
    v11 = v37;
    v24 = v36;
    v13 = v35;
    v25 = v34;
    v26 = v33;
    a1 = v103;
    goto LABEL_52;
  }
  BYTE7(v146) = v31;
  if (v31)
LABEL_52:
    memmove(v32, v30, v31);
  v32[v31] = 0;
  BYTE8(v146) = 1;
  v40 = v147;
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v27 >= 0x17)
  {
    v41 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v41 = v27 | 7;
    v42 = v41 + 1;
    v40 = (void **)operator new(v41 + 1);
    v147[1] = (void *)v27;
    v148 = v42 | 0x8000000000000000;
    v147[0] = v40;
    goto LABEL_60;
  }
  HIBYTE(v148) = v27;
  if (v27)
LABEL_60:
    memmove(v40, v26, v27);
  *((_BYTE *)v40 + v27) = 0;
  v149 = 1;
  v43 = *(NSObject **)v145;
  if (SHIBYTE(v148) < 0)
    operator delete(v147[0]);
  if (BYTE8(v146) && SBYTE7(v146) < 0)
    operator delete(*(void **)&v145[8]);
  if (*(_QWORD *)v145)
    os_release(*(void **)v145);
  if (v13 && *(_QWORD *)(v13 + 24))
  {
    _os_log_pack_size();
    v44 = MEMORY[0x20BD35848]();
    v45 = (std::__shared_weak_count *)operator new();
    v45->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F21E0;
    v45->__shared_owners_ = 0;
    v45->__shared_weak_owners_ = 0;
    v45[1].__vftable = (std::__shared_weak_count_vtbl *)v44;
    *(_QWORD *)&v139 = v44;
    *((_QWORD *)&v139 + 1) = v44;
    v141 = 0;
    v142 = 0;
    v140 = v45;
    v46 = strlen(v24);
    if (v46 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v47 = v46;
    if (v46 >= 0x17)
    {
      v50 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17)
        v50 = v46 | 7;
      v51 = v50 + 1;
      v48 = operator new(v50 + 1);
      *(_QWORD *)&v144 = v47;
      *((_QWORD *)&v144 + 1) = v51 | 0x8000000000000000;
      v143 = v48;
    }
    else
    {
      HIBYTE(v144) = v46;
      v48 = &v143;
      if (!v46)
      {
LABEL_82:
        *((_BYTE *)v48 + v47) = 0;
        v52 = v143;
        v150[0] = v144;
        *(_QWORD *)((char *)v150 + 7) = *(_QWORD *)((char *)&v144 + 7);
        v53 = HIBYTE(v144);
        v54 = operator new(0x38uLL);
        v54[1] = 0;
        v54[2] = 0;
        v54[3] = off_24C3F2280;
        *v54 = &off_24C3F2230;
        v55 = v150[0];
        v54[4] = v52;
        v54[5] = v55;
        *(_QWORD *)((char *)v54 + 47) = *(_QWORD *)((char *)v150 + 7);
        *((_BYTE *)v54 + 55) = v53;
        v150[0] = 0;
        *(_QWORD *)((char *)v150 + 7) = 0;
        v56 = v142;
        v141 = (char *)(v54 + 3);
        v142 = (std::__shared_weak_count *)v54;
        if (v56)
        {
          p_shared_owners = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(p_shared_owners);
          while (__stlxr(v58 - 1, p_shared_owners));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        *(_OWORD *)v145 = v139;
        v59 = v141;
        *(_QWORD *)&v145[16] = v140;
        if (v140)
        {
          v60 = (unint64_t *)&v140->__shared_owners_;
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
        v62 = v142;
        *(_QWORD *)&v146 = v59;
        *((_QWORD *)&v146 + 1) = v142;
        if (v142)
        {
          v63 = (unint64_t *)&v142->__shared_owners_;
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
          v147[0] = v59;
          do
            v65 = __ldaxr(v63);
          while (__stlxr(v65 - 1, v63));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        else
        {
          v147[0] = v59;
        }
        v66 = v140;
        if (v140)
        {
          v67 = (unint64_t *)&v140->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        v69 = *(_QWORD *)v145;
        if (*((char *)v147[0] + 31) >= 0)
          v70 = (char *)v147[0] + 8;
        else
          v70 = (char *)*((_QWORD *)v147[0] + 1);
        v71 = _os_log_pack_fill();
        *(_DWORD *)v71 = 136315138;
        *(_QWORD *)(v71 + 4) = v70;
        v72 = operator new();
        v73 = *(unsigned __int8 *)(v25 + 39);
        v74 = *(const char **)(v25 + 16);
        v75 = *(_QWORD *)(v25 + 24);
        v76 = v146;
        *(_OWORD *)(v72 + 8) = *(_OWORD *)&v145[8];
        if ((v73 & 0x80u) != 0)
          v73 = v75;
        else
          v74 = v104;
        *(_QWORD *)v72 = v69;
        *(_QWORD *)&v145[8] = 0;
        *(_QWORD *)&v145[16] = 0;
        *(_OWORD *)(v72 + 24) = v76;
        v146 = 0uLL;
        *(_QWORD *)(v72 + 40) = v74;
        *(_QWORD *)(v72 + 48) = v73;
        *(_BYTE *)(v72 + 56) = 16;
        v143 = 0;
        *(_QWORD *)&v139 = v72;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v13 + 24) + 40))(*(_QWORD *)(v13 + 24), &v139);
        v77 = v139;
        *(_QWORD *)&v139 = 0;
        if (v77)
        {
          v78 = *(std::__shared_weak_count **)(v77 + 32);
          if (v78)
          {
            v79 = (unint64_t *)&v78->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          v81 = *(std::__shared_weak_count **)(v77 + 16);
          if (v81)
          {
            v82 = (unint64_t *)&v81->__shared_owners_;
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          MEMORY[0x20BD3583C](v77, 0x10F0C40B62ED6C6);
          v84 = v143;
          v143 = 0;
          if (v84)
          {
            v85 = (std::__shared_weak_count *)v84[4];
            if (v85)
            {
              v86 = (unint64_t *)&v85->__shared_owners_;
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
            v88 = (std::__shared_weak_count *)v84[2];
            if (v88)
            {
              v89 = (unint64_t *)&v88->__shared_owners_;
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 - 1, v89));
              if (!v90)
              {
                ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                std::__shared_weak_count::__release_weak(v88);
              }
            }
            MEMORY[0x20BD3583C](v84, 0x10F0C40B62ED6C6);
          }
        }
        v91 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1))
        {
          v92 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        v94 = *(std::__shared_weak_count **)&v145[16];
        if (*(_QWORD *)&v145[16])
        {
          v95 = (unint64_t *)(*(_QWORD *)&v145[16] + 8);
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        goto LABEL_142;
      }
    }
    memcpy(v48, v24, v47);
    goto LABEL_82;
  }
  os_log_type_enabled(v43, OS_LOG_TYPE_ERROR);
  *(_DWORD *)v145 = 136315138;
  *(_QWORD *)&v145[4] = v24;
  v49 = (void *)_os_log_send_and_compose_impl();
  if (v49)
    free(v49);
LABEL_142:
  if (v11)
  {
    v97 = (const char *)__dst;
    if (v115 < 0)
      v97 = (const char *)__dst[0];
    sub_20AEC0664((uint64_t)&__p, "%s", v97);
    sub_20AECED58((uint64_t)&__p);
  }
  sub_20AECED58((uint64_t)&__p);
  v98 = v113;
  if (v113)
  {
    v99 = (unint64_t *)&v113->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  if (SHIBYTE(v115) < 0)
    operator delete(__dst[0]);
  v116[0] = *MEMORY[0x24BEDB7F0];
  v101 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v116 + *(_QWORD *)(v116[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v117[0] = v101;
  v117[1] = MEMORY[0x24BEDB848] + 16;
  if (v123 < 0)
    operator delete(v122);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](&v126);
  if (!v138)
  {
LABEL_156:
    if (v137)
    {
      if (v136)
      {
        if (v135 < 0)
          operator delete(v134);
        if (v133 < 0)
          operator delete(v132);
      }
      if (v131 && v130 < 0)
        operator delete(v129);
    }
  }
  return a1;
}

void sub_20B245DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  uint64_t v64;
  uint64_t v66;

  if (*(_BYTE *)(v64 - 168) && *(char *)(v64 - 169) < 0)
    operator delete(*(void **)(v64 - 192));
  __cxa_guard_abort(&qword_254630278);
  sub_20AFA93EC((uint64_t)&a13);
  if (a27 < 0)
    operator delete(__p);
  sub_20AEC2E08((uint64_t)&a28);
  sub_20AECD704((uint64_t)&a64);
  v66 = *a11;
  *a11 = 0;
  if (v66)
    MEMORY[0x20BD3583C](v66, 0x1000C4072FAA15ELL);
  _Unwind_Resume(a1);
}

void sub_20B245F88(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25463B358);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463B358))
  {
    sub_20B0A7A50(&v5);
    sub_20AEC0D64(__p, "cv3dapi.kit.viz.SE3");
    sub_20AEC4B5C(&v5, (uint64_t)__p, &qword_25463B350);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_25463B358);
  }
  *a1 = qword_25463B350;
}

void sub_20B246024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25463B358);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25463B358);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B24607C(uint64_t *a1, float32x2_t *a2)
{
  float32x4_t v4;
  int8x16_t v5;
  float32x2_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  __float2 v13;
  float v14;
  float v15;
  float v16;
  float cosval;
  float v18;
  __float2 v19;
  int32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float32x4_t v40;
  uint64_t v41;
  float32x4_t v43;
  float v44;
  float v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  uint64_t v50;

  v49 = 0uLL;
  v50 = 0;
  sub_20B248EF4(a2, (float *)v49.i32);
  v5 = v49;
  v6 = (float32x2_t)vextq_s8(v5, v5, 8uLL).u64[0];
  v7 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.i8, 1), *(float32x2_t *)v49.i8, 1), v6, v6).f32[0];
  v45 = v7;
  v47 = (float32x4_t)v49;
  if (v7 >= 0.0061)
  {
    v12 = sqrtf(v7);
    v13 = __sincosf_stret(v12);
    v7 = v45;
    v10 = v13.__sinval / v12;
    v8 = (float)(1.0 / v45) * (float)(1.0 - v13.__cosval);
    v9 = (float)(1.0 / v45) * (float)(1.0 - (float)(v13.__sinval / v12));
    if (v45 >= 0.00000149)
    {
LABEL_3:
      if (v7 <= 9.0)
        v11 = (float)((float)(v8 * 0.5) - v9) / v10;
      else
        v11 = (float)(v8 + (float)(v10 * -0.5)) / (float)(v7 * v8);
      goto LABEL_8;
    }
  }
  else
  {
    v8 = 0.5 - (float)(v7 * (float)((float)(v7 / -720.0) + 0.041667));
    v9 = 0.16667 - (float)(v7 * (float)((float)(v7 / -5040.0) + 0.0083333));
    v10 = 1.0 - (float)(v7 * v9);
    if (v7 >= 0.00000149)
      goto LABEL_3;
  }
  v11 = (float)(v7 * 0.000033069) + (float)((float)(v7 * 0.0013889) + 0.083333);
LABEL_8:
  *(float32x2_t *)v4.f32 = a2[6];
  v4.i32[2] = a2[7].i32[0];
  if (v7 >= 0.0061)
  {
    v18 = sqrtf(v7);
    v43 = v4;
    v44 = v11;
    v19 = __sincosf_stret(v18);
    cosval = v19.__cosval;
    v4 = v43;
    v11 = v44;
    v16 = v19.__sinval / v18;
    v14 = (float)(1.0 / v45) * (float)(1.0 - v19.__cosval);
    v15 = (float)(1.0 / v45) * (float)(1.0 - (float)(v19.__sinval / v18));
  }
  else
  {
    v14 = 0.5 - (float)(v7 * (float)((float)(v7 / -720.0) + 0.041667));
    v15 = 0.16667 - (float)(v7 * (float)((float)(v7 / -5040.0) + 0.0083333));
    v16 = 1.0 - (float)(v7 * v15);
    cosval = 1.0 - (float)(v7 * v14);
  }
  v20 = (int32x4_t)v47;
  v21 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v20, (int8x16_t)v20, 0xCuLL), (int8x16_t)v47, 8uLL);
  v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v47, 0xCuLL);
  v23 = vsubq_f32(vmulq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL)), vmulq_f32(v22, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v4, (int8x16_t)v4, 0xCuLL), (int8x16_t)v4, 8uLL)));
  v24.i64[0] = 0xBF000000BF000000;
  v24.i64[1] = 0xBF000000BF000000;
  v25 = vaddq_f32(vaddq_f32(v4, vmulq_f32(v23, v24)), vmulq_n_f32(vsubq_f32(vmulq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL)), vmulq_f32(v22, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v23, (int8x16_t)v23, 0xCuLL), (int8x16_t)v23, 8uLL))), v11));
  v26 = vmuls_lane_f32(v14, *(float32x2_t *)v47.f32, 1);
  v27 = (float)((float)(v14 * v47.f32[0]) * v47.f32[0]) + cosval;
  v28 = vmuls_lane_f32(v26, *(float32x2_t *)v47.f32, 1) + cosval;
  v46 = vmuls_lane_f32(vmuls_lane_f32(v14, v47, 2), v47, 2) + cosval;
  v29 = vmuls_lane_f32(v14 * v47.f32[0], *(float32x2_t *)v47.f32, 1);
  v24.f32[0] = vmuls_lane_f32(v14 * v47.f32[0], v47, 2);
  v30 = vmuls_lane_f32(v26, v47, 2);
  v31 = v16 * v47.f32[0];
  v32 = vmuls_lane_f32(v16, *(float32x2_t *)v47.f32, 1);
  v33 = vmuls_lane_f32(v16, v47, 2);
  v34 = v29 - v33;
  v35 = v24.f32[0] + v32;
  v36 = v29 + v33;
  v37 = v30 - v31;
  v38 = v24.f32[0] - v32;
  v39 = v30 + v31;
  v40 = vsubq_f32(vmulq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL)), vmulq_f32(v22, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v25, (int8x16_t)v25, 0xCuLL), (int8x16_t)v25, 8uLL)));
  v48 = vaddq_f32(vaddq_f32(v25, vmulq_n_f32(v40, v14)), vmulq_n_f32(vsubq_f32(vmulq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), (int8x16_t)v40, 0xCuLL)), vmulq_f32(v22, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v40, (int8x16_t)v40, 0xCuLL), (int8x16_t)v40, 8uLL))), v15));
  v41 = operator new();
  *(float *)v41 = v27;
  *(float *)(v41 + 4) = v36;
  *(float *)(v41 + 8) = v38;
  *(_DWORD *)(v41 + 12) = 0;
  *(float *)(v41 + 16) = v34;
  *(float *)(v41 + 20) = v28;
  *(float *)(v41 + 24) = v39;
  *(_DWORD *)(v41 + 28) = 0;
  *(float *)(v41 + 32) = v35;
  *(float *)(v41 + 36) = v37;
  *(float *)(v41 + 40) = v46;
  *(_DWORD *)(v41 + 44) = 0;
  *(_DWORD *)(v41 + 56) = v48.i32[2];
  *(_QWORD *)(v41 + 48) = v48.i64[0];
  *(_DWORD *)(v41 + 60) = 1065353216;
  *(_DWORD *)(v41 + 128) = 0;
  *(_BYTE *)(v41 + 136) = 4;
  *a1 = v41;
  return a1;
}

uint64_t *sub_20B246468(uint64_t *a1, float64x2_t *a2)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  double v14;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  __double2 v20;
  double v21;
  double cosval;
  double v23;
  __double2 v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64_t v38;
  float64_t v39;
  float64_t v40;
  float64_t v41;
  double v42;
  float64_t v43;
  float64_t v44;
  float64_t v45;
  float64_t v46;
  float64_t v47;
  float64_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  uint64_t v55;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  double v62;
  double v63;
  uint64_t v64;
  int8x16_t v65;
  float64x2_t v66;
  int8x16_t v67;
  __int128 v68;
  __int128 v69;

  v68 = 0u;
  v69 = 0u;
  v67 = 0u;
  sub_20B249204(a2, (double *)v67.i64);
  _Q20 = (float64x2_t)v67;
  _Q0 = vmulq_f64(_Q20, _Q20);
  _D1 = v67.i64[1];
  __asm { FMLA            D0, D1, V20.D[1] }
  v63 = *(double *)&v68;
  v14 = _Q0.f64[0] + v63 * v63;
  v65 = v67;
  if (v14 < 0.0000002635)
  {
    _Q0.f64[0] = 0.5 - v14 * (v14 / -720.0 + 0.0416666667);
    v15 = 0.166666667 - v14 * (v14 / -5040.0 + 0.00833333333);
    v4.f64[0] = 1.0 - v14 * v15;
    v16 = (float64x2_t)vextq_s8(v67, v67, 8uLL);
    if (v14 >= 2.775e-15)
      goto LABEL_3;
LABEL_7:
    v6.f64[0] = v14 * 0.0000330687831 + v14 * 0.00138888889 + 0.0833333333;
    v5.f64[0] = a2[7].f64[0];
    v17 = a2[6];
    v18 = (float64x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL);
    if (v14 < 0.0000002635)
      goto LABEL_8;
LABEL_10:
    v23 = sqrt(v14);
    v60 = v6;
    v61 = v16;
    v58 = v17;
    v59 = v5;
    v57 = v18;
    v24 = __sincos_stret(v23);
    cosval = v24.__cosval;
    v18 = v57;
    v17 = v58;
    v5 = v59;
    v6 = v60;
    v16 = v61;
    _Q20 = (float64x2_t)v65;
    v21 = v24.__sinval / v23;
    _Q0.f64[0] = 1.0 / v14 * (1.0 - v24.__cosval);
    v4.f64[0] = 1.0 / v14 * (1.0 - v24.__sinval / v23);
    goto LABEL_11;
  }
  v19 = sqrt(v14);
  v20 = __sincos_stret(v19);
  _Q20 = (float64x2_t)v65;
  v4.f64[0] = v20.__sinval / v19;
  _Q0.f64[0] = 1.0 / v14 * (1.0 - v20.__cosval);
  v15 = 1.0 / v14 * (1.0 - v20.__sinval / v19);
  v16 = (float64x2_t)vextq_s8((int8x16_t)_Q20, (int8x16_t)_Q20, 8uLL);
  if (v14 < 2.775e-15)
    goto LABEL_7;
LABEL_3:
  if (v14 <= 9.0)
  {
    v6.f64[0] = (_Q0.f64[0] * 0.5 - v15) / v4.f64[0];
    v5.f64[0] = a2[7].f64[0];
    v17 = a2[6];
    v18 = (float64x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL);
    if (v14 < 0.0000002635)
      goto LABEL_8;
    goto LABEL_10;
  }
  v6.f64[0] = (_Q0.f64[0] + v4.f64[0] * -0.5) / (v14 * _Q0.f64[0]);
  v5.f64[0] = a2[7].f64[0];
  v17 = a2[6];
  v18 = (float64x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL);
  if (v14 >= 0.0000002635)
    goto LABEL_10;
LABEL_8:
  _Q0.f64[0] = 0.5 - v14 * (v14 / -720.0 + 0.0416666667);
  v4.f64[0] = 0.166666667 - v14 * (v14 / -5040.0 + 0.00833333333);
  v21 = 1.0 - v14 * v4.f64[0];
  cosval = 1.0 - v14 * _Q0.f64[0];
LABEL_11:
  v25.f64[0] = v16.f64[0];
  v25.f64[1] = v63;
  v26.f64[0] = v5.f64[0];
  v26.f64[1] = v17.f64[0];
  v27.f64[0] = v17.f64[0];
  v27.f64[1] = v18.f64[0];
  v28 = vmulq_f64(v25, v26);
  v29 = vmulq_f64(_Q20, v18);
  v26.f64[0] = v63;
  v26.f64[1] = _Q20.f64[0];
  v18.f64[1] = v5.f64[0];
  v30 = vsubq_f64(v28, vmulq_f64(v26, v18));
  v31 = vsubq_f64(v29, vmulq_f64(v16, v17));
  __asm { FMOV            V17.2D, #-0.5 }
  v33 = vaddq_f64(v27, vmulq_f64(v30, _Q17));
  v34 = vaddq_f64(v5, vmulq_f64(v31, _Q17));
  v35 = (float64x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v31, 8uLL);
  v31.f64[1] = v30.f64[0];
  v36 = vaddq_f64(v34, vmulq_f64(v6, vsubq_f64(vmulq_laneq_f64(_Q20, v30, 1), vmulq_f64(v16, v30))));
  v37 = vaddq_f64(v33, vmulq_n_f64(vsubq_f64(vmulq_f64(v25, v31), vmulq_f64(v26, v35)), v6.f64[0]));
  v38 = _Q20.f64[0] * (_Q20.f64[0] * _Q0.f64[0]) + cosval;
  v39 = v16.f64[0] * (v16.f64[0] * _Q0.f64[0]) + cosval;
  v62 = v63 * (v63 * _Q0.f64[0]) + cosval;
  v40 = v16.f64[0] * (_Q20.f64[0] * _Q0.f64[0]);
  v31.f64[0] = v63 * (_Q20.f64[0] * _Q0.f64[0]);
  v34.f64[0] = v63 * (v16.f64[0] * _Q0.f64[0]);
  v35.f64[0] = _Q20.f64[0] * v21;
  v41 = v16.f64[0] * v21;
  v42 = v63 * v21;
  v43 = v40 - v42;
  v44 = v31.f64[0] + v41;
  v45 = v40 + v42;
  v46 = v34.f64[0] - v35.f64[0];
  v47 = v31.f64[0] - v41;
  v48 = v34.f64[0] + v35.f64[0];
  v49 = (float64x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)v36, 8uLL);
  v50 = vsubq_f64(vmulq_laneq_f64(_Q20, v37, 1), vmulq_f64(v16, v37));
  v51 = vaddq_f64(v36, vmulq_f64(v50, _Q0));
  v36.f64[1] = v37.f64[0];
  v52 = vsubq_f64(vmulq_f64(v25, v36), vmulq_f64(v26, v49));
  v53 = vaddq_f64(v37, vmulq_n_f64(v52, _Q0.f64[0]));
  v54 = (float64x2_t)vextq_s8((int8x16_t)v52, (int8x16_t)v50, 8uLL);
  v50.f64[1] = v52.f64[0];
  v64 = *(_OWORD *)&vaddq_f64(v51, vmulq_f64(vsubq_f64(vmulq_laneq_f64(_Q20, v52, 1), vmulq_f64(v16, v52)), v4));
  v66 = vaddq_f64(v53, vmulq_n_f64(vsubq_f64(vmulq_f64(v25, v50), vmulq_f64(v26, v54)), v4.f64[0]));
  v55 = operator new();
  *(float64_t *)v55 = v38;
  *(float64_t *)(v55 + 8) = v45;
  *(float64_t *)(v55 + 16) = v47;
  *(_QWORD *)(v55 + 24) = 0;
  *(float64_t *)(v55 + 32) = v43;
  *(float64_t *)(v55 + 40) = v39;
  *(float64_t *)(v55 + 48) = v48;
  *(_QWORD *)(v55 + 56) = 0;
  *(float64_t *)(v55 + 64) = v44;
  *(float64_t *)(v55 + 72) = v46;
  *(double *)(v55 + 80) = v62;
  *(_QWORD *)(v55 + 88) = 0;
  *(_QWORD *)(v55 + 112) = v64;
  *(float64x2_t *)(v55 + 96) = v66;
  *(_QWORD *)(v55 + 120) = 0x3FF0000000000000;
  *(_DWORD *)(v55 + 128) = 1;
  *(_BYTE *)(v55 + 136) = 5;
  *a1 = v55;
  return a1;
}

uint64_t *sub_20B2468C8(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    MEMORY[0x20BD3583C](v2, 0x1000C4072FAA15ELL);
  return a1;
}

double sub_20B246908@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4;
  float32x4_t v5;
  int32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x2_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  __float2 v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v23;
  int32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  _OWORD v29[2];

  v4 = *a1;
  switch(*(_BYTE *)(*a1 + 136))
  {
    case 1:
      if (*(_DWORD *)(v4 + 128) != 2)
        goto LABEL_18;
      a3 = *(__n128 *)v4;
      *(_OWORD *)a2 = *(_OWORD *)v4;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 16);
      return a3.n128_f64[0];
    case 2:
      if (*(_DWORD *)(v4 + 128) != 3)
        goto LABEL_18;
      *(float32x4_t *)a2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v4), *(float64x2_t *)(v4 + 16));
      a3.n128_u64[0] = (unint64_t)vcvt_f32_f64(*(float64x2_t *)(v4 + 32));
      *(_QWORD *)(a2 + 16) = a3.n128_u64[0];
      return a3.n128_f64[0];
    case 4:
      if (*(_DWORD *)(v4 + 128))
        goto LABEL_18;
      v5 = *(float32x4_t *)(v4 + 16);
      v25 = *(float32x4_t *)v4;
      v26 = v5;
      v6 = *(int32x4_t *)(v4 + 48);
      v27 = *(float32x4_t *)(v4 + 32);
      v28 = v6;
      goto LABEL_10;
    case 5:
      if (*(_DWORD *)(v4 + 128) != 1)
LABEL_18:
        sub_20AECFAB8();
      v7 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v4 + 32)), *(float64x2_t *)(v4 + 48));
      v25 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v4), *(float64x2_t *)(v4 + 16));
      v26 = v7;
      v8 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v4 + 96)), *(float64x2_t *)(v4 + 112));
      v27 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v4 + 64)), *(float64x2_t *)(v4 + 80));
      v28 = (int32x4_t)v8;
LABEL_10:
      memset(v29, 0, 24);
      sub_20B248EF4((float32x2_t *)&v25, (float *)v29);
      v9 = (int32x4_t)v29[0];
      v10 = (float32x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
      v11 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v29[0], 1), *(float32x2_t *)v9.i8, 1), v10, v10).f32[0];
      if (v11 < 0.0061)
      {
        v12 = 0.5 - (float)(v11 * (float)((float)(v11 / -720.0) + 0.041667));
        v13 = 0.16667 - (float)(v11 * (float)((float)(v11 / -5040.0) + 0.0083333));
        v14 = 1.0 - (float)(v11 * v13);
        if (v11 >= 0.00000149)
          goto LABEL_12;
LABEL_15:
        v15 = (float)(v11 * 0.000033069) + (float)((float)(v11 * 0.0013889) + 0.083333);
        goto LABEL_17;
      }
      v16 = sqrtf(v11);
      v23 = v11;
      v24 = (int32x4_t)v29[0];
      v17 = __sincosf_stret(v16);
      v11 = v23;
      v9 = v24;
      v14 = v17.__sinval / v16;
      v12 = (float)(1.0 / v23) * (float)(1.0 - v17.__cosval);
      v13 = (float)(1.0 / v23) * (float)(1.0 - (float)(v17.__sinval / v16));
      if (v23 < 0.00000149)
        goto LABEL_15;
LABEL_12:
      if (v11 <= 9.0)
        v15 = (float)((float)(v12 * 0.5) - v13) / v14;
      else
        v15 = (float)(v12 + (float)(v14 * -0.5)) / (float)(v11 * v12);
LABEL_17:
      v18 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL), (int8x16_t)v9, 8uLL);
      v19 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL);
      v20 = vsubq_f32(vmulq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL)), vmulq_f32(v19, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v28, (int8x16_t)v28, 0xCuLL), (int8x16_t)v28, 8uLL)));
      v21.i64[0] = 0xBF000000BF000000;
      v21.i64[1] = 0xBF000000BF000000;
      a3 = (__n128)vaddq_f32(vaddq_f32((float32x4_t)v28, vmulq_f32(v20, v21)), vmulq_n_f32(vsubq_f32(vmulq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL)), vmulq_f32(v19, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v20, (int8x16_t)v20, 0xCuLL), (int8x16_t)v20, 8uLL))), v15));
      DWORD1(v29[1]) = a3.n128_u32[2];
      *(_QWORD *)((char *)v29 + 12) = a3.n128_u64[0];
      a3.n128_u64[0] = *(_QWORD *)&v29[0];
      *(_OWORD *)a2 = v29[0];
      *(_QWORD *)(a2 + 16) = *(_QWORD *)&v29[1];
      return a3.n128_f64[0];
    default:
      return a3.n128_f64[0];
  }
}

void sub_20B246C1C(uint64_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  uint64_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v17;
  double v24;
  double v25;
  double v26;
  __double2 v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  _OWORD v47[3];

  v3 = *a1;
  switch(*(_BYTE *)(*a1 + 136))
  {
    case 1:
      if (*(_DWORD *)(v3 + 128) != 2)
        goto LABEL_19;
      v4 = vcvtq_f64_f32(*(float32x2_t *)(v3 + 8));
      *a2 = vcvtq_f64_f32(*(float32x2_t *)v3);
      a2[1] = v4;
      v5 = vcvtq_f64_f32(*(float32x2_t *)(v3 + 16));
      goto LABEL_18;
    case 2:
      if (*(_DWORD *)(v3 + 128) != 3)
        goto LABEL_19;
      v10 = *(float64x2_t *)(v3 + 16);
      *a2 = *(float64x2_t *)v3;
      a2[1] = v10;
      v5 = *(float64x2_t *)(v3 + 32);
      goto LABEL_18;
    case 4:
      if (*(_DWORD *)(v3 + 128))
        goto LABEL_19;
      v6 = vcvtq_f64_f32(*(float32x2_t *)(v3 + 8));
      v39 = vcvtq_f64_f32(*(float32x2_t *)v3);
      v40 = v6;
      v7 = vcvtq_f64_f32(*(float32x2_t *)(v3 + 24));
      v41 = vcvtq_f64_f32(*(float32x2_t *)(v3 + 16));
      v42 = v7;
      v8 = vcvtq_f64_f32(*(float32x2_t *)(v3 + 40));
      v43 = vcvtq_f64_f32(*(float32x2_t *)(v3 + 32));
      v44 = v8;
      v9 = vcvtq_f64_f32(*(float32x2_t *)(v3 + 56));
      v45 = vcvtq_f64_f32(*(float32x2_t *)(v3 + 48));
      v46 = v9;
      goto LABEL_10;
    case 5:
      if (*(_DWORD *)(v3 + 128) != 1)
LABEL_19:
        sub_20AECFAB8();
      v11 = *(float64x2_t *)(v3 + 80);
      v43 = *(float64x2_t *)(v3 + 64);
      v44 = v11;
      v12 = *(float64x2_t *)(v3 + 112);
      v45 = *(float64x2_t *)(v3 + 96);
      v46 = v12;
      v13 = *(float64x2_t *)(v3 + 16);
      v39 = *(float64x2_t *)v3;
      v40 = v13;
      v14 = *(float64x2_t *)(v3 + 48);
      v41 = *(float64x2_t *)(v3 + 32);
      v42 = v14;
LABEL_10:
      memset(v47, 0, sizeof(v47));
      sub_20B249204(&v39, (double *)v47);
      v15.f64[0] = *(float64_t *)&v47[1];
      _Q17 = (float64x2_t)v47[0];
      v17 = (float64x2_t)vextq_s8((int8x16_t)_Q17, (int8x16_t)_Q17, 8uLL);
      _Q0 = vmulq_f64(_Q17, _Q17);
      _Q1.f64[0] = *((float64_t *)v47 + 1);
      __asm { FMLA            D0, D1, V17.D[1] }
      v24 = _Q0.f64[0] + v15.f64[0] * v15.f64[0];
      if (v24 < 0.0000002635)
      {
        _Q0.f64[0] = 0.5 - v24 * (v24 / -720.0 + 0.0416666667);
        _Q1.f64[0] = 0.166666667 - v24 * (v24 / -5040.0 + 0.00833333333);
        v25 = 1.0 - v24 * _Q1.f64[0];
        if (v24 >= 2.775e-15)
          goto LABEL_12;
LABEL_15:
        _Q0.f64[0] = v24 * 0.0000330687831 + v24 * 0.00138888889 + 0.0833333333;
        goto LABEL_17;
      }
      v26 = sqrt(v24);
      v37 = (float64x2_t)v47[0];
      v38 = *(double *)&v47[1];
      v36 = v17;
      v27 = __sincos_stret(v26);
      v17 = v36;
      _Q17 = v37;
      v15.f64[0] = v38;
      v25 = v27.__sinval / v26;
      _Q0.f64[0] = 1.0 / v24 * (1.0 - v27.__cosval);
      _Q1.f64[0] = 1.0 / v24 * (1.0 - v27.__sinval / v26);
      if (v24 < 2.775e-15)
        goto LABEL_15;
LABEL_12:
      if (v24 <= 9.0)
        _Q0.f64[0] = (_Q0.f64[0] * 0.5 - _Q1.f64[0]) / v25;
      else
        _Q0.f64[0] = (_Q0.f64[0] + v25 * -0.5) / (v24 * _Q0.f64[0]);
LABEL_17:
      _Q1.f64[0] = v46.f64[0];
      v28.f64[0] = v17.f64[0];
      v28.f64[1] = v15.f64[0];
      v29 = (float64x2_t)vextq_s8((int8x16_t)v45, (int8x16_t)_Q1, 8uLL);
      v30 = vsubq_f64(vmulq_laneq_f64(_Q17, v45, 1), vmulq_f64(v17, v45));
      __asm { FMOV            V6.2D, #-0.5 }
      v32 = vaddq_f64(_Q1, vmulq_f64(v30, _Q6));
      _Q1.f64[1] = v45.f64[0];
      v15.f64[1] = _Q17.f64[0];
      v33 = vsubq_f64(vmulq_f64(v28, _Q1), vmulq_f64(v15, v29));
      v34 = (float64x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)v30, 8uLL);
      v30.f64[1] = v33.f64[0];
      *(float64x2_t *)((char *)&v47[1] + 8) = vaddq_f64(vaddq_f64(v45, vmulq_f64(v33, _Q6)), vmulq_n_f64(vsubq_f64(vmulq_f64(v28, v30), vmulq_f64(v15, v34)), _Q0.f64[0]));
      *((_QWORD *)&v47[2] + 1) = *(_OWORD *)&vaddq_f64(v32, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q17, v33, 1), vmulq_f64(v17, v33))));
      v35 = (float64x2_t)v47[1];
      *a2 = (float64x2_t)v47[0];
      a2[1] = v35;
      v5 = (float64x2_t)v47[2];
LABEL_18:
      a2[2] = v5;
      return;
    default:
      return;
  }
}

float64x2_t sub_20B246F3C@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, float64x2_t result@<Q0>)
{
  int32x4_t v3;
  int32x4_t v4;
  float32x2_t v5;
  float32x4_t v6;
  uint64_t v8;
  int32x4_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float cosval;
  __int128 v16;
  __int128 v17;
  float32_t v18;
  float v19;
  float v20;
  float v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  __float2 v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  __float2 v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float v47;
  float v48;
  __int32 v49;
  float32_t v50;
  __int32 v51;
  uint64_t v52;
  int32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;

  v8 = *a1;
  switch(*(_BYTE *)(*a1 + 136))
  {
    case 1:
      if (*(_DWORD *)(v8 + 128) != 2)
        goto LABEL_17;
      v5.i32[0] = *(_DWORD *)(v8 + 8);
      v3.i64[0] = *(_QWORD *)v8;
      v9 = v3;
      v9.i32[2] = v5.i32[0];
      LODWORD(v10) = HIDWORD(*(_QWORD *)v8);
      v6.i64[0] = *(_QWORD *)(v8 + 12);
      v6.i32[2] = *(_DWORD *)(v8 + 20);
      v11 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v3.i8, *(float32x2_t *)v3.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8, 1), *(float32x2_t *)v8, 1), v5, v5).f32[0];
      if (v11 >= 0.0061)
      {
        v24 = sqrtf(v11);
        v55 = v6;
        v51 = *(_DWORD *)(v8 + 8);
        v53 = v9;
        v47 = v11;
        v49 = v3.i32[0];
        v25 = __sincosf_stret(v24);
        cosval = v25.__cosval;
        v3.i32[0] = v49;
        v5.i32[0] = v51;
        v9 = v53;
        v6 = v55;
        v14 = v25.__sinval / v24;
        v12 = (float)(1.0 / v47) * (float)(1.0 - v25.__cosval);
        v13 = (float)(1.0 / v47) * (float)(1.0 - (float)(v25.__sinval / v24));
      }
      else
      {
        v12 = 0.5 - (float)(v11 * (float)((float)(v11 / -720.0) + 0.041667));
        v13 = 0.16667 - (float)(v11 * (float)((float)(v11 / -5040.0) + 0.0083333));
        v14 = 1.0 - (float)(v11 * v13);
        cosval = 1.0 - (float)(v11 * v12);
      }
      v26 = (float)(*(float *)v3.i32 * (float)(*(float *)v3.i32 * v12)) + cosval;
      v27 = (float)(v10 * (float)(v10 * v12)) + cosval;
      v28 = (float)(v5.f32[0] * (float)(v5.f32[0] * v12)) + cosval;
      v29 = v10 * (float)(*(float *)v3.i32 * v12);
      v30 = v5.f32[0] * (float)(*(float *)v3.i32 * v12);
      v31 = v5.f32[0] * (float)(v10 * v12);
      v32 = *(float *)v3.i32 * v14;
      v33 = v10 * v14;
      v34 = v5.f32[0] * v14;
      goto LABEL_16;
    case 2:
      if (*(_DWORD *)(v8 + 128) != 3)
        goto LABEL_17;
      *(float32x2_t *)v4.i8 = vcvt_f32_f64(*(float64x2_t *)v8);
      v5.f32[0] = *(double *)(v8 + 16);
      v9 = v4;
      v9.i32[2] = v5.i32[0];
      *(float32x2_t *)v6.f32 = vcvt_f32_f64(*(float64x2_t *)(v8 + 24));
      v18 = *(double *)(v8 + 40);
      v6.f32[2] = v18;
      v19 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v4.i8, *(float32x2_t *)v4.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.i8, 1), *(float32x2_t *)v4.i8, 1), v5, v5).f32[0];
      if (v19 >= 0.0061)
      {
        v35 = sqrtf(v19);
        v56 = v6;
        v52 = v4.i64[0];
        v54 = v9;
        v48 = v19;
        v50 = *(double *)(v8 + 16);
        v36 = __sincosf_stret(v35);
        v21 = v36.__cosval;
        v5.f32[0] = v50;
        v4.i64[0] = v52;
        v9 = v54;
        v6 = v56;
        v20 = v36.__sinval / v35;
        v12 = (float)(1.0 / v48) * (float)(1.0 - v36.__cosval);
        v13 = (float)(1.0 / v48) * (float)(1.0 - (float)(v36.__sinval / v35));
      }
      else
      {
        v12 = 0.5 - (float)(v19 * (float)((float)(v19 / -720.0) + 0.041667));
        v13 = 0.16667 - (float)(v19 * (float)((float)(v19 / -5040.0) + 0.0083333));
        v20 = 1.0 - (float)(v19 * v13);
        v21 = 1.0 - (float)(v19 * v12);
      }
      v37 = vmuls_lane_f32(v12, *(float32x2_t *)v4.i8, 1);
      v26 = (float)((float)(v12 * *(float *)v4.i32) * *(float *)v4.i32) + v21;
      v27 = vmuls_lane_f32(v37, *(float32x2_t *)v4.i8, 1) + v21;
      v28 = (float)((float)(v12 * v5.f32[0]) * v5.f32[0]) + v21;
      v29 = vmuls_lane_f32(v12 * *(float *)v4.i32, *(float32x2_t *)v4.i8, 1);
      v30 = (float)(v12 * *(float *)v4.i32) * v5.f32[0];
      v31 = v37 * v5.f32[0];
      v32 = v20 * *(float *)v4.i32;
      v33 = vmuls_lane_f32(v20, *(float32x2_t *)v4.i8, 1);
      v34 = v20 * v5.f32[0];
LABEL_16:
      v38 = v29 - v34;
      v39 = v30 + v33;
      v40 = v29 + v34;
      v41 = v31 - v32;
      v42 = v30 - v33;
      v43 = v31 + v32;
      v44 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL), (int8x16_t)v9, 8uLL);
      v45 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL);
      v46 = vsubq_f32(vmulq_f32(v44, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL)), vmulq_f32(v45, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v6, (int8x16_t)v6, 0xCuLL), (int8x16_t)v6, 8uLL)));
      *(float *)a2 = v26;
      *(float *)(a2 + 4) = v40;
      *(float *)(a2 + 8) = v42;
      *(_DWORD *)(a2 + 12) = 0;
      *(float *)(a2 + 16) = v38;
      *(float *)(a2 + 20) = v27;
      *(float *)(a2 + 24) = v43;
      *(_DWORD *)(a2 + 28) = 0;
      *(float *)(a2 + 32) = v39;
      *(float *)(a2 + 36) = v41;
      *(float *)(a2 + 40) = v28;
      result = (float64x2_t)vaddq_f32(vaddq_f32(v6, vmulq_n_f32(v46, v12)), vmulq_n_f32(vsubq_f32(vmulq_f32(v44, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v46, (int32x4_t)v46), (int8x16_t)v46, 0xCuLL)), vmulq_f32(v45, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v46, (int8x16_t)v46, 0xCuLL), (int8x16_t)v46, 8uLL))), v13));
      *(_DWORD *)(a2 + 44) = 0;
      *(_DWORD *)(a2 + 56) = LODWORD(result.f64[1]);
      *(float64_t *)(a2 + 48) = result.f64[0];
      *(_DWORD *)(a2 + 60) = 1065353216;
      break;
    case 4:
      if (*(_DWORD *)(v8 + 128))
        goto LABEL_17;
      v16 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)a2 = *(_OWORD *)v8;
      *(_OWORD *)(a2 + 16) = v16;
      result = *(float64x2_t *)(v8 + 32);
      v17 = *(_OWORD *)(v8 + 48);
      *(float64x2_t *)(a2 + 32) = result;
      *(_OWORD *)(a2 + 48) = v17;
      break;
    case 5:
      if (*(_DWORD *)(v8 + 128) != 1)
LABEL_17:
        sub_20AECFAB8();
      v22 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v8 + 32)), *(float64x2_t *)(v8 + 48));
      *(float32x4_t *)a2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v8), *(float64x2_t *)(v8 + 16));
      *(float32x4_t *)(a2 + 16) = v22;
      result = *(float64x2_t *)(v8 + 112);
      v23 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v8 + 96)), result);
      *(float32x4_t *)(a2 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v8 + 64)), *(float64x2_t *)(v8 + 80));
      *(float32x4_t *)(a2 + 48) = v23;
      break;
    default:
      return result;
  }
  return result;
}

float64x2_t sub_20B247360@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, float64x2_t result@<Q0>, float64x2_t a4@<Q2>)
{
  float64x2_t v4;
  uint64_t v6;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  double v18;
  double v19;
  double cosval;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  double v26;
  double v27;
  double v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  double v33;
  __double2 v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  __double2 v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  float64x2_t v52;
  float64x2_t v53;
  double v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64_t v73;
  float64_t v74;

  v6 = *a1;
  switch(*(_BYTE *)(*a1 + 136))
  {
    case 1:
      if (*(_DWORD *)(v6 + 128) != 2)
        goto LABEL_17;
      _Q26 = vcvtq_f64_f32(*(float32x2_t *)v6);
      v8.f64[0] = *(float *)(v6 + 8);
      v9 = (float64x2_t)vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL);
      v10 = vcvtq_f64_f32(*(float32x2_t *)(v6 + 12));
      v4.f64[0] = *(float *)(v6 + 20);
      v11 = (float64x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL);
      _Q0 = vmulq_f64(_Q26, _Q26);
      _D1 = _Q26.f64[1];
      __asm { FMLA            D0, D1, V26.D[1] }
      v18 = _Q0.f64[0] + v8.f64[0] * v8.f64[0];
      if (v18 >= 0.0000002635)
      {
        v33 = sqrt(v18);
        v73 = *(float *)(v6 + 8);
        v69 = v9;
        v71 = _Q26;
        v65 = v10;
        v67 = v4;
        v63 = v11;
        v34 = __sincos_stret(v33);
        cosval = v34.__cosval;
        v11 = v63;
        v10 = v65;
        v4 = v67;
        v9 = v69;
        _Q26 = v71;
        v8.f64[0] = v73;
        v19 = v34.__sinval / v33;
        a4.f64[0] = 1.0 / v18 * (1.0 - v34.__cosval);
        _Q0.f64[0] = 1.0 / v18 * (1.0 - v34.__sinval / v33);
      }
      else
      {
        a4.f64[0] = 0.5 - v18 * (v18 / -720.0 + 0.0416666667);
        _Q0.f64[0] = 0.166666667 - v18 * (v18 / -5040.0 + 0.00833333333);
        v19 = 1.0 - v18 * _Q0.f64[0];
        cosval = 1.0 - v18 * a4.f64[0];
      }
      v35 = vmuld_lane_f64(a4.f64[0], _Q26, 1);
      v36 = a4.f64[0] * _Q26.f64[0] * _Q26.f64[0] + cosval;
      v37 = vmuld_lane_f64(v35, _Q26, 1) + cosval;
      v38 = a4.f64[0] * v8.f64[0] * v8.f64[0] + cosval;
      v39 = vmuld_lane_f64(a4.f64[0] * _Q26.f64[0], _Q26, 1);
      v40 = a4.f64[0] * _Q26.f64[0] * v8.f64[0];
      v41 = v35 * v8.f64[0];
      v42 = v19 * _Q26.f64[0];
      v43 = vmuld_lane_f64(v19, _Q26, 1);
      v44 = v19 * v8.f64[0];
      goto LABEL_16;
    case 2:
      if (*(_DWORD *)(v6 + 128) != 3)
        goto LABEL_17;
      v8.f64[0] = *(float64_t *)(v6 + 16);
      _Q26 = *(float64x2_t *)v6;
      v9 = (float64x2_t)vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL);
      v4.f64[0] = *(float64_t *)(v6 + 40);
      v10 = *(float64x2_t *)(v6 + 24);
      v11 = (float64x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL);
      _D9 = *(double *)(v6 + 8);
      _Q0 = vmulq_f64(_Q26, _Q26);
      __asm { FMLA            D0, D9, V26.D[1] }
      v26 = _Q0.f64[0] + v8.f64[0] * v8.f64[0];
      if (v26 >= 0.0000002635)
      {
        v45 = sqrt(v26);
        v74 = *(double *)(v6 + 16);
        v70 = v9;
        v72 = *(float64x2_t *)v6;
        v66 = *(float64x2_t *)(v6 + 24);
        v68 = v4;
        v64 = v11;
        v46 = __sincos_stret(v45);
        v28 = v46.__cosval;
        v11 = v64;
        v10 = v66;
        v4 = v68;
        v9 = v70;
        _Q26 = v72;
        v8.f64[0] = v74;
        v27 = v46.__sinval / v45;
        a4.f64[0] = 1.0 / v26 * (1.0 - v46.__cosval);
        _Q0.f64[0] = 1.0 / v26 * (1.0 - v46.__sinval / v45);
      }
      else
      {
        a4.f64[0] = 0.5 - v26 * (v26 / -720.0 + 0.0416666667);
        _Q0.f64[0] = 0.166666667 - v26 * (v26 / -5040.0 + 0.00833333333);
        v27 = 1.0 - v26 * _Q0.f64[0];
        v28 = 1.0 - v26 * a4.f64[0];
      }
      v36 = _Q26.f64[0] * (_Q26.f64[0] * a4.f64[0]) + v28;
      v37 = _D9 * (_D9 * a4.f64[0]) + v28;
      v38 = v8.f64[0] * (v8.f64[0] * a4.f64[0]) + v28;
      v39 = _D9 * (_Q26.f64[0] * a4.f64[0]);
      v40 = v8.f64[0] * (_Q26.f64[0] * a4.f64[0]);
      v41 = v8.f64[0] * (_D9 * a4.f64[0]);
      v42 = _Q26.f64[0] * v27;
      v43 = _D9 * v27;
      v44 = v8.f64[0] * v27;
LABEL_16:
      v47 = v39 - v44;
      v48 = v40 + v43;
      v49 = v39 + v44;
      v50 = v41 - v42;
      v51 = v40 - v43;
      v52.f64[0] = v9.f64[0];
      v52.f64[1] = v8.f64[0];
      v53.f64[0] = v4.f64[0];
      v53.f64[1] = v10.f64[0];
      v54 = v41 + v42;
      v55.f64[0] = v10.f64[0];
      v55.f64[1] = v11.f64[0];
      v8.f64[1] = _Q26.f64[0];
      v56.f64[0] = v11.f64[0];
      v56.f64[1] = v4.f64[0];
      v57 = vsubq_f64(vmulq_f64(v52, v53), vmulq_f64(v8, v56));
      v58 = vsubq_f64(vmulq_f64(_Q26, v11), vmulq_f64(v9, v10));
      v59 = vaddq_f64(v55, vmulq_n_f64(v57, a4.f64[0]));
      v60 = vaddq_f64(v4, vmulq_f64(v58, a4));
      v61 = (float64x2_t)vextq_s8((int8x16_t)v57, (int8x16_t)v58, 8uLL);
      v58.f64[1] = v57.f64[0];
      v62 = vmulq_f64(vsubq_f64(vmulq_laneq_f64(_Q26, v57, 1), vmulq_f64(v9, v57)), _Q0);
      *(double *)a2 = v36;
      *(double *)(a2 + 8) = v49;
      *(double *)(a2 + 16) = v51;
      result = vaddq_f64(v59, vmulq_n_f64(vsubq_f64(vmulq_f64(v52, v58), vmulq_f64(v8, v61)), _Q0.f64[0]));
      *(_QWORD *)(a2 + 24) = 0;
      *(double *)(a2 + 32) = v47;
      *(double *)(a2 + 40) = v37;
      *(double *)(a2 + 48) = v54;
      *(_QWORD *)(a2 + 56) = 0;
      *(double *)(a2 + 64) = v48;
      *(double *)(a2 + 72) = v50;
      *(double *)(a2 + 80) = v38;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 112) = *(_OWORD *)&vaddq_f64(v60, v62);
      *(float64x2_t *)(a2 + 96) = result;
      *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
      break;
    case 4:
      if (*(_DWORD *)(v6 + 128))
        goto LABEL_17;
      v21 = vcvtq_f64_f32(*(float32x2_t *)(v6 + 8));
      *(float64x2_t *)a2 = vcvtq_f64_f32(*(float32x2_t *)v6);
      *(float64x2_t *)(a2 + 16) = v21;
      v22 = vcvtq_f64_f32(*(float32x2_t *)(v6 + 24));
      *(float64x2_t *)(a2 + 32) = vcvtq_f64_f32(*(float32x2_t *)(v6 + 16));
      *(float64x2_t *)(a2 + 48) = v22;
      v23 = vcvtq_f64_f32(*(float32x2_t *)(v6 + 40));
      *(float64x2_t *)(a2 + 64) = vcvtq_f64_f32(*(float32x2_t *)(v6 + 32));
      *(float64x2_t *)(a2 + 80) = v23;
      result = vcvtq_f64_f32(*(float32x2_t *)(v6 + 48));
      v24 = vcvtq_f64_f32(*(float32x2_t *)(v6 + 56));
      *(float64x2_t *)(a2 + 96) = result;
      *(float64x2_t *)(a2 + 112) = v24;
      break;
    case 5:
      if (*(_DWORD *)(v6 + 128) != 1)
LABEL_17:
        sub_20AECFAB8();
      v29 = *(_OWORD *)(v6 + 80);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(v6 + 64);
      *(_OWORD *)(a2 + 80) = v29;
      v30 = *(_OWORD *)(v6 + 112);
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(v6 + 96);
      *(_OWORD *)(a2 + 112) = v30;
      v31 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)a2 = *(_OWORD *)v6;
      *(_OWORD *)(a2 + 16) = v31;
      result = *(float64x2_t *)(v6 + 32);
      v32 = *(_OWORD *)(v6 + 48);
      *(float64x2_t *)(a2 + 32) = result;
      *(_OWORD *)(a2 + 48) = v32;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_20B2477C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  int v5;
  uint64_t v6;
  int v7;
  int v9;
  uint64_t result;

  v2 = *a1;
  v3 = *(unsigned __int8 *)(*a1 + 136);
  v5 = v3 != 5 && v3 != 2;
  v6 = *a2;
  v7 = *(unsigned __int8 *)(*a2 + 136);
  v9 = v7 == 5 || v7 == 2;
  if (v5 == v9 || ((v3 & 0xFE) != 4) == ((v7 & 0xFE) == 4))
    return 0;
  result = 0;
  switch(v3)
  {
    case 1:
      if (*(_DWORD *)(v2 + 128) != 2 || *(_DWORD *)(v6 + 128) != 2)
        goto LABEL_72;
      if (*(float *)v2 != *(float *)v6
        || *(float *)(v2 + 4) != *(float *)(v6 + 4)
        || *(float *)(v2 + 8) != *(float *)(v6 + 8)
        || *(float *)(v2 + 12) != *(float *)(v6 + 12)
        || *(float *)(v2 + 16) != *(float *)(v6 + 16)
        || *(float *)(v2 + 20) != *(float *)(v6 + 20))
      {
        return 0;
      }
      goto LABEL_33;
    case 2:
      if (*(_DWORD *)(v2 + 128) != 3 || *(_DWORD *)(v6 + 128) != 3)
        goto LABEL_72;
      if (*(double *)v2 != *(double *)v6
        || *(double *)(v2 + 8) != *(double *)(v6 + 8)
        || *(double *)(v2 + 16) != *(double *)(v6 + 16)
        || *(double *)(v2 + 24) != *(double *)(v6 + 24)
        || *(double *)(v2 + 32) != *(double *)(v6 + 32)
        || *(double *)(v2 + 40) != *(double *)(v6 + 40))
      {
        return 0;
      }
      goto LABEL_33;
    case 4:
      if (*(_DWORD *)(v2 + 128) || *(_DWORD *)(v6 + 128))
        goto LABEL_72;
      if (*(float *)v2 != *(float *)v6
        || *(float *)(v2 + 4) != *(float *)(v6 + 4)
        || *(float *)(v2 + 8) != *(float *)(v6 + 8)
        || *(float *)(v2 + 12) != *(float *)(v6 + 12)
        || *(float *)(v2 + 16) != *(float *)(v6 + 16)
        || *(float *)(v2 + 20) != *(float *)(v6 + 20)
        || *(float *)(v2 + 24) != *(float *)(v6 + 24)
        || *(float *)(v2 + 28) != *(float *)(v6 + 28)
        || *(float *)(v2 + 32) != *(float *)(v6 + 32)
        || *(float *)(v2 + 36) != *(float *)(v6 + 36)
        || *(float *)(v2 + 40) != *(float *)(v6 + 40)
        || *(float *)(v2 + 44) != *(float *)(v6 + 44)
        || *(float *)(v2 + 48) != *(float *)(v6 + 48)
        || *(float *)(v2 + 52) != *(float *)(v6 + 52)
        || *(float *)(v2 + 56) != *(float *)(v6 + 56)
        || *(float *)(v2 + 60) != *(float *)(v6 + 60))
      {
        return 0;
      }
      goto LABEL_33;
    case 5:
      if (*(_DWORD *)(v2 + 128) != 1 || *(_DWORD *)(v6 + 128) != 1)
LABEL_72:
        sub_20AECFAB8();
      if (*(double *)v2 != *(double *)v6
        || *(double *)(v2 + 8) != *(double *)(v6 + 8)
        || *(double *)(v2 + 16) != *(double *)(v6 + 16)
        || *(double *)(v2 + 24) != *(double *)(v6 + 24)
        || *(double *)(v2 + 32) != *(double *)(v6 + 32)
        || *(double *)(v2 + 40) != *(double *)(v6 + 40)
        || *(double *)(v2 + 48) != *(double *)(v6 + 48)
        || *(double *)(v2 + 56) != *(double *)(v6 + 56)
        || *(double *)(v2 + 64) != *(double *)(v6 + 64)
        || *(double *)(v2 + 72) != *(double *)(v6 + 72)
        || *(double *)(v2 + 80) != *(double *)(v6 + 80)
        || *(double *)(v2 + 88) != *(double *)(v6 + 88)
        || *(double *)(v2 + 96) != *(double *)(v6 + 96)
        || *(double *)(v2 + 104) != *(double *)(v6 + 104)
        || *(double *)(v2 + 112) != *(double *)(v6 + 112)
        || *(double *)(v2 + 120) != *(double *)(v6 + 120))
      {
        return 0;
      }
LABEL_33:
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *sub_20B247B80(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  void **p_dst;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  _QWORD *v21;
  __int128 *v22;
  __int128 v23;
  void **v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *__p[2];
  unsigned __int8 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 *v49;
  int v50;
  void **__dst;
  size_t v52;
  int64_t v53;
  __int128 *v54;

  v4 = sub_20AEC01D0(a1, (uint64_t)"{", 1);
  v5 = *(char *)(*a2 + 136);
  v50 = 0;
  v6 = operator new();
  *(_QWORD *)(v6 + 272) = 0;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)v6 = 0u;
  sub_20AEC0BD8(v6);
  *(_QWORD *)&v40 = v6;
  sub_20AEC01D0((_QWORD *)(v6 + 16), (uint64_t)off_24C414328[v5 - 1], qword_20B5EE5D8[(char)(v5 - 1)]);
  v7 = *(_DWORD *)(v6 + 120);
  if ((v7 & 0x10) != 0)
  {
    v10 = *(_QWORD *)(v6 + 112);
    v11 = *(_QWORD *)(v6 + 72);
    if (v10 < v11)
    {
      *(_QWORD *)(v6 + 112) = v11;
      v10 = v11;
    }
    v12 = *(const void **)(v6 + 64);
    v8 = v10 - (_QWORD)v12;
    if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_41;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v53) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v12 = *(const void **)(v6 + 40);
    v8 = *(_QWORD *)(v6 + 56) - (_QWORD)v12;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_41:
      sub_20AEC0138();
  }
  if (v8 >= 0x17)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v52 = v8;
    v53 = v14 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v53) = v8;
  p_dst = (void **)&__dst;
  if (v8)
LABEL_13:
    memmove(p_dst, v12, v8);
LABEL_14:
  *((_BYTE *)p_dst + v8) = 0;
  v15 = v40;
  if ((_QWORD)v40)
  {
    v16 = MEMORY[0x24BEDB7F0];
    v17 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v40 = *MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(v16 + 72);
    *(_QWORD *)(v15 + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(v16 + 64);
    *(_QWORD *)(v15 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v15 + 16) = v18;
    if (*(char *)(v15 + 111) < 0)
      operator delete(*(void **)(v15 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v15 + 128);
    MEMORY[0x20BD3583C](v15, 0x10B2C40EED050F3);
  }
  *(_QWORD *)&v40 = &v48;
  *((_QWORD *)&v40 + 1) = &__dst;
  *(_QWORD *)&v41 = &v48;
  *((_QWORD *)&v41 + 1) = &__dst;
  *(_QWORD *)&v42 = &__dst;
  if (v50 == -1)
    sub_20AECFAB8();
  v54 = &v40;
  ((void (*)(__int128 **, __int128 *))off_24C4142C8[v50])(&v54, &v48);
  if (SHIBYTE(v53) < 0)
    operator delete(__dst);
  if (v50 == -1)
    sub_20AECFAB8();
  *(_QWORD *)&v40 = &__dst;
  ((void (*)(void **__return_ptr, __int128 *, __int128 *))off_24C4142E0[v50])(__p, &v40, &v48);
  if (v50 != -1)
    ((void (*)(__int128 *, __int128 *))off_24C414280[v50])(&v40, &v48);
  if ((v39 & 0x80u) == 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  if ((v39 & 0x80u) == 0)
    v20 = v39;
  else
    v20 = (uint64_t)__p[1];
  v21 = sub_20AEC01D0(v4, (uint64_t)v19, v20);
  sub_20AEC01D0(v21, (uint64_t)",\n", 2);
  if ((char)v39 < 0)
    operator delete(__p[0]);
  v22 = (__int128 *)*a2;
  switch(*(_BYTE *)(*a2 + 136))
  {
    case 1:
      if (*((_DWORD *)v22 + 32) != 2)
        goto LABEL_68;
      v23 = *v22;
      v49 = (__int128 *)*((_QWORD *)v22 + 2);
      v48 = v23;
      *(_QWORD *)&v40 = 0x100000006;
      DWORD2(v40) = 6;
      *(_QWORD *)&v41 = &v48;
      DWORD2(v41) = 0;
      sub_20B44AFEC((unsigned int *)&v40, &__dst);
      if (v53 >= 0)
        v24 = (void **)&__dst;
      else
        v24 = __dst;
      if (v53 >= 0)
        v25 = HIBYTE(v53);
      else
        v25 = v52;
      goto LABEL_63;
    case 2:
      if (*((_DWORD *)v22 + 32) != 3)
        goto LABEL_68;
      v29 = *v22;
      v30 = v22[2];
      v41 = v22[1];
      v42 = v30;
      v40 = v29;
      *(_QWORD *)&v48 = 0x100000006;
      DWORD2(v48) = 6;
      v49 = &v40;
      v50 = 0;
      sub_20B44B638((unsigned int *)&v48, &__dst);
      if (v53 >= 0)
        v24 = (void **)&__dst;
      else
        v24 = __dst;
      if (v53 >= 0)
        v25 = HIBYTE(v53);
      else
        v25 = v52;
      goto LABEL_63;
    case 4:
      if (*((_DWORD *)v22 + 32))
        goto LABEL_68;
      v26 = *v22;
      v27 = v22[1];
      v28 = v22[3];
      v42 = v22[2];
      v43 = v28;
      v40 = v26;
      v41 = v27;
      *(_QWORD *)&v48 = 0x400000004;
      DWORD2(v48) = 4;
      v49 = &v40;
      v50 = 0;
      sub_20B44AFEC((unsigned int *)&v48, &__dst);
      if (v53 >= 0)
        v24 = (void **)&__dst;
      else
        v24 = __dst;
      if (v53 >= 0)
        v25 = HIBYTE(v53);
      else
        v25 = v52;
      goto LABEL_63;
    case 5:
      if (*((_DWORD *)v22 + 32) != 1)
LABEL_68:
        sub_20AECFAB8();
      v31 = *v22;
      v32 = v22[1];
      v33 = v22[3];
      v42 = v22[2];
      v43 = v33;
      v40 = v31;
      v41 = v32;
      v34 = v22[4];
      v35 = v22[5];
      v36 = v22[6];
      v47 = v22[7];
      v45 = v35;
      v46 = v36;
      v44 = v34;
      *(_QWORD *)&v48 = 0x400000004;
      DWORD2(v48) = 4;
      v49 = &v40;
      v50 = 0;
      sub_20B44B638((unsigned int *)&v48, &__dst);
      if (v53 >= 0)
        v24 = (void **)&__dst;
      else
        v24 = __dst;
      if (v53 >= 0)
        v25 = HIBYTE(v53);
      else
        v25 = v52;
LABEL_63:
      sub_20AEC01D0(a1, (uint64_t)v24, v25);
      if (SHIBYTE(v53) < 0)
        operator delete(__dst);
      break;
    default:
      return sub_20AEC01D0(a1, (uint64_t)"}", 1);
  }
  return sub_20AEC01D0(a1, (uint64_t)"}", 1);
}

void sub_20B2480BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 - 73) < 0)
    operator delete(*(void **)(v15 - 96));
  _Unwind_Resume(exception_object);
}

void sub_20B24813C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AECFA60(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_20B248150(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 73) < 0)
  {
    operator delete(*(void **)(v1 - 96));
    sub_20AECFA60(v1 - 128);
    _Unwind_Resume(a1);
  }
  sub_20AECFA60(v1 - 128);
  _Unwind_Resume(a1);
}

uint64_t sub_20B248190(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v2 = atomic_load((unsigned __int8 *)&qword_25463B348);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463B348))
  {
    v7 = operator new();
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)v7 = 0u;
    *(_DWORD *)(v7 + 128) = 3;
    *(_BYTE *)(v7 + 136) = 2;
    qword_25463B340 = v7;
    __cxa_atexit((void (*)(void *))sub_20B2468C8, &qword_25463B340, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B348);
  }
  v3 = qword_25463B340;
  v4 = operator new();
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 128) = -1;
  v5 = *(unsigned int *)(v3 + 128);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_24C414260[v5])(&v8, v4, v3);
    *(_DWORD *)(v4 + 128) = v5;
  }
  *(_BYTE *)(v4 + 136) = *(_BYTE *)(v3 + 136);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

void sub_20B2482BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B348);
  _Unwind_Resume(a1);
}

void sub_20B2482D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1000C4072FAA15ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B2482F8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const void **v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const void **v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v25;

  result = sub_20B2477C4((uint64_t *)a1, (uint64_t *)a2);
  if (!(_DWORD)result)
    return result;
  v5 = *(unsigned __int8 *)(a2 + 32);
  if (*(_BYTE *)(a1 + 32))
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if ((*(_BYTE *)(a1 + 32) != 0) != (v5 != 0))
      return 0;
  }
  else
  {
    v7 = *(unsigned __int8 *)(a1 + 31);
    if ((v7 & 0x80u) == 0)
      v8 = *(unsigned __int8 *)(a1 + 31);
    else
      v8 = *(_QWORD *)(a1 + 16);
    v9 = *(unsigned __int8 *)(a2 + 31);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a2 + 16);
    if (v8 != v9)
      return 0;
    v11 = (const void **)(a1 + 8);
    if (v10 >= 0)
      v12 = (unsigned __int8 *)(a2 + 8);
    else
      v12 = *(unsigned __int8 **)(a2 + 8);
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*v11, v12, *(_QWORD *)(a1 + 16)))
        return 0;
    }
    else if (*(_BYTE *)(a1 + 31))
    {
      while (*(unsigned __int8 *)v11 == *v12)
      {
        v11 = (const void **)((char *)v11 + 1);
        ++v12;
        if (!--v7)
          goto LABEL_24;
      }
      return 0;
    }
  }
LABEL_24:
  result = (*(_BYTE *)(a1 + 64) != 0) == (*(_BYTE *)(a2 + 64) != 0);
  if (!*(_BYTE *)(a1 + 64) || !*(_BYTE *)(a2 + 64))
    return result;
  v13 = *(unsigned __int8 *)(a1 + 63);
  if ((v13 & 0x80u) == 0)
    v14 = *(unsigned __int8 *)(a1 + 63);
  else
    v14 = *(_QWORD *)(a1 + 48);
  v15 = *(unsigned __int8 *)(a2 + 63);
  v16 = (char)v15;
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(a2 + 48);
  if (v14 != v15)
    return 0;
  v17 = (const void **)(a1 + 40);
  if (v16 >= 0)
    v18 = (unsigned __int8 *)(a2 + 40);
  else
    v18 = *(unsigned __int8 **)(a2 + 40);
  if ((v13 & 0x80) != 0)
    return memcmp(*v17, v18, *(_QWORD *)(a1 + 48)) == 0;
  if (!*(_BYTE *)(a1 + 63))
    return 1;
  v19 = v13 - 1;
  do
  {
    v21 = *(unsigned __int8 *)v17;
    v17 = (const void **)((char *)v17 + 1);
    v20 = v21;
    v23 = *v18++;
    v22 = v23;
    v25 = v19-- != 0;
    result = v20 == v22;
  }
  while (v20 == v22 && v25);
  return result;
}

_QWORD *sub_20B2484AC(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  sub_20AEC01D0(a1, (uint64_t)"Transform3{src: ", 16);
  if (*((_BYTE *)a2 + 32))
  {
    v24 = 34;
    v4 = sub_20AEC01D0(a1, (uint64_t)&v24, 1);
    v5 = *((char *)a2 + 31);
    if (v5 >= 0)
      v6 = (uint64_t)(a2 + 1);
    else
      v6 = a2[1];
    if (v5 >= 0)
      v7 = *((unsigned __int8 *)a2 + 31);
    else
      v7 = a2[2];
    v8 = sub_20AEC01D0(v4, v6, v7);
    v25 = 34;
    v9 = &v25;
    v10 = 1;
  }
  else
  {
    v9 = "world";
    v8 = a1;
    v10 = 5;
  }
  sub_20AEC01D0(v8, (uint64_t)v9, v10);
  sub_20AEC01D0(a1, (uint64_t)", dst: ", 7);
  if (*((_BYTE *)a2 + 64))
  {
    v26 = 34;
    v11 = sub_20AEC01D0(a1, (uint64_t)&v26, 1);
    v12 = *((char *)a2 + 63);
    if (v12 >= 0)
      v13 = (uint64_t)(a2 + 5);
    else
      v13 = a2[5];
    if (v12 >= 0)
      v14 = *((unsigned __int8 *)a2 + 63);
    else
      v14 = a2[6];
    v15 = sub_20AEC01D0(v11, v13, v14);
    v27 = 34;
    v16 = &v27;
    v17 = 1;
  }
  else
  {
    v16 = "world";
    v15 = a1;
    v17 = 5;
  }
  sub_20AEC01D0(v15, (uint64_t)v16, v17);
  v18 = sub_20AEC01D0(a1, (uint64_t)", transform:", 12);
  v19 = *a2;
  v20 = operator new();
  *(_BYTE *)v20 = 0;
  *(_DWORD *)(v20 + 128) = -1;
  v21 = *(unsigned int *)(v19 + 128);
  if ((_DWORD)v21 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_24C414260[v21])(&v28, v20, v19);
    *(_DWORD *)(v20 + 128) = v21;
  }
  *(_BYTE *)(v20 + 136) = *(_BYTE *)(v19 + 136);
  v23 = v20;
  sub_20B247B80(v18, &v23);
  MEMORY[0x20BD3583C](v20, 0x1000C4072FAA15ELL);
  return sub_20AEC01D0(a1, (uint64_t)"}", 1);
}

void sub_20B24868C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1000C4072FAA15ELL);
  _Unwind_Resume(a1);
}

__n128 sub_20B2486B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

__n128 sub_20B2486C8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  result = (__n128)a3[4];
  v7 = a3[5];
  v8 = a3[7];
  *(_OWORD *)(a2 + 96) = a3[6];
  *(_OWORD *)(a2 + 112) = v8;
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = v7;
  return result;
}

__n128 sub_20B2486EC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20B248700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_20B248714(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t *v16;

  v11 = a2;
  v12 = "{";
  v13 = a2;
  v14 = "{";
  v15 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_7;
  v16 = &v11;
  ((void (*)(uint64_t **))off_24C4142B0[v3])(&v16);
  sub_20AF57AB0((uint64_t)&v11, a2, a3);
  v11 = a2;
  v12 = ",";
  v13 = a2;
  v14 = ",";
  v15 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_7;
  v16 = &v11;
  ((void (*)(uint64_t **, uint64_t))off_24C4142B0[v6])(&v16, a2);
  sub_20AF57AB0((uint64_t)&v11, a2, a3 + 1);
  v11 = a2;
  v12 = ",";
  v13 = a2;
  v14 = ",";
  v15 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_7;
  v16 = &v11;
  ((void (*)(uint64_t **, uint64_t))off_24C4142B0[v7])(&v16, a2);
  sub_20AF57AB0((uint64_t)&v11, a2, a3 + 2);
  v11 = a2;
  v12 = ",";
  v13 = a2;
  v14 = ",";
  v15 = ",";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_7;
  v16 = &v11;
  ((void (*)(uint64_t **, uint64_t))off_24C4142B0[v8])(&v16, a2);
  sub_20AF57AB0((uint64_t)&v11, a2, a3 + 3);
  v11 = a2;
  v12 = "}";
  v13 = a2;
  v14 = "}";
  v15 = "}";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_7:
    sub_20AECFAB8();
  v16 = &v11;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C4142B0[v9])(&v16, a2);
}

_DWORD *sub_20B2488A8(_DWORD ***a1)
{
  return sub_20AFAC918(**a1, (char *)(*a1)[1]);
}

void sub_20B2488B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C414280[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20AEC7620((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20B248A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B248AB0(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20B248D40(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B248D58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20B248D60(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t *v16;

  v11 = a2;
  v12 = "{";
  v13 = a2;
  v14 = "{";
  v15 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_7;
  v16 = &v11;
  ((void (*)(uint64_t **))off_24C4142B0[v3])(&v16);
  sub_20AF55CBC((uint64_t)&v11, a2, a3);
  v11 = a2;
  v12 = ",";
  v13 = a2;
  v14 = ",";
  v15 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_7;
  v16 = &v11;
  ((void (*)(uint64_t **, uint64_t))off_24C4142B0[v6])(&v16, a2);
  sub_20AF55CBC((uint64_t)&v11, a2, a3 + 1);
  v11 = a2;
  v12 = ",";
  v13 = a2;
  v14 = ",";
  v15 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_7;
  v16 = &v11;
  ((void (*)(uint64_t **, uint64_t))off_24C4142B0[v7])(&v16, a2);
  sub_20AF55CBC((uint64_t)&v11, a2, a3 + 2);
  v11 = a2;
  v12 = ",";
  v13 = a2;
  v14 = ",";
  v15 = ",";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_7;
  v16 = &v11;
  ((void (*)(uint64_t **, uint64_t))off_24C4142B0[v8])(&v16, a2);
  sub_20AF55CBC((uint64_t)&v11, a2, a3 + 3);
  v11 = a2;
  v12 = "}";
  v13 = a2;
  v14 = "}";
  v15 = "}";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_7:
    sub_20AECFAB8();
  v16 = &v11;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C4142B0[v9])(&v16, a2);
}

void sub_20B248EF4(float32x2_t *a1, float *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  _BOOL4 v14;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float32x2_t v34;

  v4 = (float)(a1[3].f32[0] - a1[4].f32[1]) * 0.5;
  *a2 = v4;
  v5 = (float)(a1[4].f32[0] - a1[1].f32[0]) * 0.5;
  a2[1] = v5;
  v6 = (float)(a1->f32[1] - a1[2].f32[0]) * 0.5;
  a2[2] = v6;
  v7 = a1->f32[0];
  v8 = a1[2].f32[1];
  v9 = a1[5].f32[0];
  v10 = -1.0;
  v11 = (float)((float)((float)(a1->f32[0] + v8) + v9) + -1.0) * 0.5;
  v12 = (float)((float)(v4 * v4) + (float)(v5 * v5)) + (float)(v6 * v6);
  if (v11 >= -1.0 || (float)(v11 + 1.0) <= -0.00001)
  {
    v14 = v11 > 1.0;
    if ((float)(v11 + -1.0) >= 0.00001)
      v14 = 0;
    if (v11 <= 0.99 && !v14)
    {
      if (v11 <= -0.99)
      {
        v10 = (float)((float)((float)(a1->f32[0] + v8) + v9) + -1.0) * 0.5;
        goto LABEL_17;
      }
      v16 = acosf(v11) / sqrtf(v12);
    }
    else
    {
      v16 = (float)(v12 * (float)((float)(v12 * (float)((float)((float)(v12 * 5.0) / 112.0) + 0.075)) + 0.16667)) + 1.0;
    }
    *a2 = v4 * v16;
    a2[1] = v5 * v16;
    a2[2] = v6 * v16;
    return;
  }
LABEL_17:
  v17 = asinf(sqrtf(v12));
  v18 = (float)((float)(3.1416 - v17) * (float)(3.1416 - v17)) / (float)(1.0 - v10);
  v19 = (float)(v7 - v10) * v18;
  v20 = (float)(v8 - v10) * v18;
  v21 = (float)(v9 - v10) * v18;
  if (v19 <= v20)
  {
    v26 = v18 * 0.5;
    if (v20 <= v21)
    {
      v33 = sqrtf(v21);
      if (v6 < 0.0)
        v33 = -v33;
      a2[2] = v33;
      v34.i32[0] = a1[1].i32[0];
      v34.i32[1] = a1[3].i32[0];
      *(float32x2_t *)a2 = vmul_n_f32(vmul_n_f32(vadd_f32(a1[4], v34), v26), 1.0 / v33);
    }
    else
    {
      v27 = sqrtf(v20);
      if (v5 < 0.0)
        v27 = -v27;
      a2[1] = v27;
      v28 = 1.0 / v27;
      v29 = a1[4].f32[1] + a1[3].f32[0];
      *a2 = v28 * (float)(v26 * (float)(a1[2].f32[0] + a1->f32[1]));
      a2[2] = v28 * (float)(v26 * v29);
    }
  }
  else
  {
    v22 = v18 * 0.5;
    v23 = v22 * (float)(a1[4].f32[0] + a1[1].f32[0]);
    if (v19 <= v21)
    {
      v30 = sqrtf(v21);
      if (v6 < 0.0)
        v30 = -v30;
      a2[2] = v30;
      v31 = 1.0 / v30;
      v32 = v31 * (float)(v22 * (float)(a1[4].f32[1] + a1[3].f32[0]));
      *a2 = v31 * v23;
      a2[1] = v32;
    }
    else
    {
      v24 = sqrtf(v19);
      if (v4 < 0.0)
        v24 = -v24;
      *a2 = v24;
      v25 = 1.0 / v24;
      a2[1] = v25 * (float)(v22 * (float)(a1[2].f32[0] + a1->f32[1]));
      a2[2] = v25 * v23;
    }
  }
}

void sub_20B249204(float64x2_t *a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  _BOOL4 v13;
  double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;

  v4 = (a1[3].f64[0] - a1[4].f64[1]) * 0.5;
  *a2 = v4;
  v5 = (a1[4].f64[0] - a1[1].f64[0]) * 0.5;
  a2[1] = v5;
  v6 = (a1->f64[1] - a1[2].f64[0]) * 0.5;
  a2[2] = v6;
  v7 = a1->f64[0];
  v8 = a1[2].f64[1];
  v9 = a1[5].f64[0];
  v10 = -1.0;
  v11 = (a1->f64[0] + v8 + v9 + -1.0) * 0.5;
  v12 = v4 * v4 + v5 * v5 + v6 * v6;
  if (v11 >= -1.0 || v11 + 1.0 <= -0.00001)
  {
    v13 = v11 > 1.0;
    if (v11 + -1.0 >= 0.00001)
      v13 = 0;
    if (v11 > 0.99 || v13)
    {
      v15 = v12 * (v12 * (v12 * 5.0 / 112.0 + 0.075) + 0.166666667) + 1.0;
      *a2 = v4 * v15;
      a2[1] = v5 * v15;
LABEL_12:
      a2[2] = v6 * v15;
      return;
    }
    if (v11 > -0.99)
    {
      v15 = acos(v11) / sqrt(v12);
      *a2 = v4 * v15;
      a2[1] = v5 * v15;
      goto LABEL_12;
    }
    v10 = (a1->f64[0] + v8 + v9 + -1.0) * 0.5;
  }
  v16 = asin(sqrt(v12));
  v17 = (3.14159265 - v16) * (3.14159265 - v16) / (1.0 - v10);
  v18 = (v7 - v10) * v17;
  v19 = (v8 - v10) * v17;
  v20 = (v9 - v10) * v17;
  if (v18 <= v19)
  {
    v25 = v17 * 0.5;
    if (v19 <= v20)
    {
      v32 = sqrt(v20);
      if (v6 < 0.0)
        v32 = -v32;
      a2[2] = v32;
      v33.f64[0] = a1[1].f64[0];
      v33.f64[1] = a1[3].f64[0];
      *(float64x2_t *)a2 = vmulq_n_f64(vmulq_n_f64(vaddq_f64(a1[4], v33), v25), 1.0 / v32);
    }
    else
    {
      v26 = sqrt(v19);
      if (v5 < 0.0)
        v26 = -v26;
      a2[1] = v26;
      v27 = 1.0 / v26;
      v28 = a1[4].f64[1] + a1[3].f64[0];
      *a2 = v27 * (v25 * (a1[2].f64[0] + a1->f64[1]));
      a2[2] = v27 * (v25 * v28);
    }
  }
  else
  {
    v21 = v17 * 0.5;
    v22 = v21 * (a1[4].f64[0] + a1[1].f64[0]);
    if (v18 <= v20)
    {
      v29 = sqrt(v20);
      if (v6 < 0.0)
        v29 = -v29;
      a2[2] = v29;
      v30 = 1.0 / v29;
      v31 = v30 * (v21 * (a1[4].f64[1] + a1[3].f64[0]));
      *a2 = v30 * v22;
      a2[1] = v31;
    }
    else
    {
      v23 = sqrt(v18);
      if (v4 < 0.0)
        v23 = -v23;
      *a2 = v23;
      v24 = 1.0 / v23;
      a2[1] = v24 * (v21 * (a1[2].f64[0] + a1->f64[1]));
      a2[2] = v24 * v22;
    }
  }
}

double sub_20B249514(uint64_t a1, uint64_t *a2)
{
  __int128 v2;
  __int128 *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_BYTE *)a1 = *(_BYTE *)(*a2 + 136);
  *(_QWORD *)&v2 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  v3 = (__int128 *)*a2;
  switch(*(_BYTE *)(*a2 + 136))
  {
    case 1:
      if (*((_DWORD *)v3 + 32) != 2)
        goto LABEL_10;
      *(_DWORD *)(a1 + 104) = 2;
      v2 = *v3;
      v4 = *((_QWORD *)v3 + 2);
      *(_OWORD *)(a1 + 8) = *v3;
      *(_QWORD *)(a1 + 24) = v4;
      break;
    case 2:
      if (*((_DWORD *)v3 + 32) != 3)
        goto LABEL_10;
      *(_DWORD *)(a1 + 104) = 3;
      v2 = *v3;
      v16 = v3[1];
      v17 = v3[2];
      *(_OWORD *)(a1 + 8) = *v3;
      *(_OWORD *)(a1 + 24) = v16;
      *(_OWORD *)(a1 + 40) = v17;
      break;
    case 4:
      if (*((_DWORD *)v3 + 32))
        goto LABEL_10;
      LODWORD(v2) = *(_DWORD *)v3;
      v5 = *((_DWORD *)v3 + 1);
      v6 = *((_DWORD *)v3 + 4);
      v7 = *((_DWORD *)v3 + 5);
      v8 = *((_DWORD *)v3 + 8);
      v9 = *((_DWORD *)v3 + 9);
      v10 = *((_DWORD *)v3 + 12);
      v11 = *((_DWORD *)v3 + 13);
      v12 = *((_DWORD *)v3 + 2);
      v13 = *((_DWORD *)v3 + 6);
      v14 = *((_DWORD *)v3 + 10);
      v15 = *((_DWORD *)v3 + 14);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v3;
      *(_DWORD *)(a1 + 12) = v6;
      *(_DWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 20) = v10;
      *(_DWORD *)(a1 + 24) = v5;
      *(_DWORD *)(a1 + 28) = v7;
      *(_DWORD *)(a1 + 32) = v9;
      *(_DWORD *)(a1 + 36) = v11;
      *(_DWORD *)(a1 + 40) = v12;
      *(_DWORD *)(a1 + 44) = v13;
      *(_DWORD *)(a1 + 48) = v14;
      *(_DWORD *)(a1 + 52) = v15;
      break;
    case 5:
      if (*((_DWORD *)v3 + 32) != 1)
LABEL_10:
        sub_20AECFAB8();
      *(_QWORD *)&v2 = *(_QWORD *)v3;
      v18 = *((_QWORD *)v3 + 1);
      v19 = *((_QWORD *)v3 + 4);
      v20 = *((_QWORD *)v3 + 5);
      v21 = *((_QWORD *)v3 + 8);
      v22 = *((_QWORD *)v3 + 9);
      v23 = *((_QWORD *)v3 + 12);
      v24 = *((_QWORD *)v3 + 13);
      v25 = *((_QWORD *)v3 + 2);
      v26 = *((_QWORD *)v3 + 6);
      v27 = *((_QWORD *)v3 + 10);
      v28 = *((_QWORD *)v3 + 14);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)v3;
      *(_QWORD *)(a1 + 16) = v19;
      *(_DWORD *)(a1 + 104) = 1;
      *(_QWORD *)(a1 + 24) = v21;
      *(_QWORD *)(a1 + 32) = v23;
      *(_QWORD *)(a1 + 40) = v18;
      *(_QWORD *)(a1 + 48) = v20;
      *(_QWORD *)(a1 + 56) = v22;
      *(_QWORD *)(a1 + 64) = v24;
      *(_QWORD *)(a1 + 72) = v25;
      *(_QWORD *)(a1 + 80) = v26;
      *(_QWORD *)(a1 + 88) = v27;
      *(_QWORD *)(a1 + 96) = v28;
      break;
    default:
      return *(double *)&v2;
  }
  return *(double *)&v2;
}

uint64_t *sub_20B24965C(uint64_t *a1, _BYTE *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  int v6;
  void *v7;
  void **v8;
  size_t v9;
  uint64_t *v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  int v20;
  std::logic_error *exception;
  std::string v23;
  std::string v24;
  void *v25;
  size_t v26;
  uint64_t v27;

  v4 = atomic_load((unsigned __int8 *)&qword_25463B360);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463B360))
  {
    sub_20B2498FC();
    __cxa_atexit((void (*)(void *))sub_20B249FA4, &qword_25463B368, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B360);
  }
  v25 = 0;
  v26 = 0;
  v27 = 0;
  sub_20B1C68C0(a1, (uint64_t)&v25);
  v5 = qword_25463B370;
  if (!qword_25463B370)
    goto LABEL_41;
  v6 = SHIBYTE(v27);
  v7 = v25;
  if (v27 >= 0)
    v8 = &v25;
  else
    v8 = (void **)v25;
  if (v27 >= 0)
    v9 = HIBYTE(v27);
  else
    v9 = v26;
  v10 = &qword_25463B370;
  do
  {
    while (1)
    {
      v11 = *(char *)(v5 + 55);
      v12 = v11 >= 0 ? (const void *)(v5 + 32) : *(const void **)(v5 + 32);
      v13 = v11 >= 0 ? *(unsigned __int8 *)(v5 + 55) : *(_QWORD *)(v5 + 40);
      v14 = v9 >= v13 ? v13 : v9;
      v15 = memcmp(v12, v8, v14);
      if (v15)
        break;
      if (v13 >= v9)
        goto LABEL_24;
LABEL_10:
      v5 = *(_QWORD *)(v5 + 8);
      if (!v5)
        goto LABEL_25;
    }
    if (v15 < 0)
      goto LABEL_10;
LABEL_24:
    v10 = (uint64_t *)v5;
    v5 = *(_QWORD *)v5;
  }
  while (v5);
LABEL_25:
  if (v10 == &qword_25463B370)
    goto LABEL_41;
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= v9)
    v19 = v9;
  else
    v19 = v18;
  v20 = memcmp(v8, v17, v19);
  if (v20)
  {
    if ((v20 & 0x80000000) == 0)
      goto LABEL_37;
LABEL_41:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_20B214D58(", expected [Algebra|Affine][F|D]", &v23, &v24);
    std::logic_error::logic_error(exception, &v24);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  if (v9 < v18)
    goto LABEL_41;
LABEL_37:
  *a2 = *((_BYTE *)v10 + 56);
  if (v6 < 0)
    operator delete(v7);
  return a1;
}

void sub_20B24986C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B360);
  _Unwind_Resume(a1);
}

void sub_20B249884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      if (a27 < 0)
        operator delete(a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void sub_20B2498FC()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  int v3;
  size_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  BOOL v19;
  int v20;
  const void *v21;
  size_t v22;
  const void *v23;
  size_t v24;
  size_t v25;
  int v26;
  uint64_t *v27;
  size_t v28;
  size_t v29;
  const void *v30;
  size_t v31;
  size_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void *v40;
  _BYTE v41[15];
  unsigned __int8 v42;
  _BYTE v43[24];
  int v44;
  void *__dst[2];
  unint64_t v46;
  _QWORD v47[5];
  _QWORD *v48;
  _QWORD v49[4];

  v0 = 0;
  v49[2] = *MEMORY[0x24BDAC8D0];
  v39 = 84148737;
  qword_25463B378 = 0;
  qword_25463B370 = 0;
  qword_25463B368 = (uint64_t)&qword_25463B370;
  v38 = *MEMORY[0x24BEDB7F0];
  v35 = MEMORY[0x24BEDB848] + 16;
  v36 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v37 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v1 = (uint64_t **)&unk_25463B000;
  do
  {
    while (1)
    {
      v44 = 0;
      v2 = operator new();
      *(_QWORD *)(v2 + 272) = 0;
      *(_OWORD *)(v2 + 240) = 0u;
      *(_OWORD *)(v2 + 256) = 0u;
      *(_OWORD *)(v2 + 208) = 0u;
      *(_OWORD *)(v2 + 224) = 0u;
      *(_OWORD *)(v2 + 176) = 0u;
      *(_OWORD *)(v2 + 192) = 0u;
      *(_OWORD *)(v2 + 144) = 0u;
      *(_OWORD *)(v2 + 160) = 0u;
      *(_OWORD *)(v2 + 112) = 0u;
      *(_OWORD *)(v2 + 128) = 0u;
      *(_OWORD *)(v2 + 80) = 0u;
      *(_OWORD *)(v2 + 96) = 0u;
      *(_OWORD *)(v2 + 48) = 0u;
      *(_OWORD *)(v2 + 64) = 0u;
      *(_OWORD *)(v2 + 16) = 0u;
      *(_OWORD *)(v2 + 32) = 0u;
      *(_OWORD *)v2 = 0u;
      sub_20AEC0BD8(v2);
      sub_20AEC01D0((_QWORD *)(v2 + 16), (uint64_t)off_24C4143D0[*((char *)&v39 + v0) - 1], qword_20B5EE618[(char)(*((_BYTE *)&v39 + v0) - 1)]);
      v3 = *(_DWORD *)(v2 + 120);
      if ((v3 & 0x10) != 0)
      {
        v6 = *(_QWORD *)(v2 + 112);
        v7 = *(_QWORD *)(v2 + 72);
        if (v6 < v7)
        {
          *(_QWORD *)(v2 + 112) = v7;
          v6 = v7;
        }
        v8 = *(const void **)(v2 + 64);
        v4 = v6 - (_QWORD)v8;
        if (v6 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_84:
          sub_20AEC0138();
      }
      else
      {
        if ((v3 & 8) == 0)
        {
          v4 = 0;
          HIBYTE(v46) = 0;
          v5 = __dst;
          goto LABEL_18;
        }
        v8 = *(const void **)(v2 + 40);
        v4 = *(_QWORD *)(v2 + 56) - (_QWORD)v8;
        if (v4 >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_84;
      }
      if (v4 >= 0x17)
      {
        v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v4 | 7) != 0x17)
          v9 = v4 | 7;
        v10 = v9 + 1;
        v5 = (void **)operator new(v9 + 1);
        __dst[1] = (void *)v4;
        v46 = v10 | 0x8000000000000000;
        __dst[0] = v5;
LABEL_17:
        memmove(v5, v8, v4);
        goto LABEL_18;
      }
      HIBYTE(v46) = v4;
      v5 = __dst;
      if (v4)
        goto LABEL_17;
LABEL_18:
      *((_BYTE *)v5 + v4) = 0;
      *(_QWORD *)v2 = v38;
      *(_QWORD *)(v2 + *(_QWORD *)(v38 - 24)) = v36;
      *(_QWORD *)(v2 + 24) = v35;
      *(_QWORD *)(v2 + 16) = v37;
      if (*(char *)(v2 + 111) < 0)
        operator delete(*(void **)(v2 + 88));
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x20BD35758](v2 + 128);
      MEMORY[0x20BD3583C](v2, 0x10B2C40EED050F3);
      v47[0] = v43;
      v47[1] = __dst;
      v47[2] = v43;
      v47[3] = __dst;
      v47[4] = __dst;
      if (v44 == -1)
        sub_20AECFAB8();
      v48 = v47;
      ((void (*)(_QWORD **, _BYTE *))off_24C414370[v44])(&v48, v43);
      if (SHIBYTE(v46) < 0)
        operator delete(__dst[0]);
      if (v44 == -1)
        sub_20AECFAB8();
      v47[0] = __dst;
      ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24C4143A0[v44])(&v40, v47, v43);
      if (v44 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_24C414388[v44])(v47, v43);
      v11 = v40;
      v49[0] = *(_QWORD *)v41;
      *(_QWORD *)((char *)v49 + 7) = *(_QWORD *)&v41[7];
      v12 = v42;
      v13 = (char)v42;
      v14 = operator new(0x40uLL);
      v14[4] = v11;
      v14[5] = v49[0];
      *(_QWORD *)((char *)v14 + 47) = *(_QWORD *)((char *)v49 + 7);
      *((_BYTE *)v14 + 55) = v13;
      v49[0] = 0;
      *(_QWORD *)((char *)v49 + 7) = 0;
      *((_BYTE *)v14 + 56) = *((_BYTE *)&v39 + v0);
      v16 = &qword_25463B370;
      v15 = qword_25463B370;
      if (v1[109] == &qword_25463B370)
        goto LABEL_72;
      v17 = qword_25463B370;
      if (qword_25463B370)
      {
        do
        {
          v16 = (uint64_t *)v17;
          v17 = *(_QWORD *)(v17 + 8);
        }
        while (v17);
      }
      else
      {
        v18 = &qword_25463B370;
        do
        {
          v16 = (uint64_t *)v18[2];
          v19 = *v16 == (_QWORD)v18;
          v18 = v16;
        }
        while (v19);
      }
      v20 = *((char *)v16 + 55);
      if (v20 >= 0)
        v21 = v16 + 4;
      else
        v21 = (const void *)v16[4];
      if (v20 >= 0)
        v22 = *((unsigned __int8 *)v16 + 55);
      else
        v22 = v16[5];
      if (v13 >= 0)
        v23 = v14 + 4;
      else
        v23 = v11;
      if (v13 >= 0)
        v24 = v12;
      else
        v24 = v14[5];
      if (v24 >= v22)
        v25 = v22;
      else
        v25 = v24;
      v26 = memcmp(v21, v23, v25);
      if (!v26)
      {
        if (v22 < v24)
          goto LABEL_72;
LABEL_49:
        if (!v15)
        {
LABEL_78:
          v16 = &qword_25463B370;
          v27 = &qword_25463B370;
          goto LABEL_79;
        }
        while (1)
        {
          v16 = (uint64_t *)v15;
          v28 = *(unsigned __int8 *)(v15 + 55);
          v29 = *(_QWORD *)(v15 + 40);
          if ((v28 & 0x80u) == 0)
            v30 = (const void *)(v15 + 32);
          else
            v30 = *(const void **)(v15 + 32);
          if ((v28 & 0x80u) == 0)
            v31 = v28;
          else
            v31 = v29;
          if (v31 >= v24)
            v32 = v24;
          else
            v32 = v31;
          v33 = memcmp(v23, v30, v32);
          if (v33)
          {
            if (v33 < 0)
              goto LABEL_51;
          }
          else if (v24 < v31)
          {
LABEL_51:
            v15 = *v16;
            v27 = v16;
            if (!*v16)
              goto LABEL_79;
            continue;
          }
          v34 = memcmp(v30, v23, v32);
          if (v34)
          {
            if ((v34 & 0x80000000) == 0)
              goto LABEL_74;
          }
          else if (v31 >= v24)
          {
            goto LABEL_74;
          }
          v15 = v16[1];
          if (!v15)
          {
            v27 = v16 + 1;
            goto LABEL_79;
          }
        }
      }
      if ((v26 & 0x80000000) == 0)
        goto LABEL_49;
LABEL_72:
      if (!v15)
        goto LABEL_78;
      v27 = v16 + 1;
      if (v16[1])
        break;
LABEL_79:
      *v14 = 0;
      v14[1] = 0;
      v14[2] = v16;
      *v27 = (uint64_t)v14;
      v1 = (uint64_t **)&unk_25463B000;
      if (*(_QWORD *)qword_25463B368)
      {
        qword_25463B368 = *(_QWORD *)qword_25463B368;
        v14 = (_QWORD *)*v27;
      }
      sub_20AEC84C8((uint64_t *)qword_25463B370, v14);
      ++qword_25463B378;
      if (++v0 == 4)
        return;
    }
LABEL_74:
    if (v13 < 0)
      operator delete(v11);
    operator delete(v14);
    v1 = (uint64_t **)&unk_25463B000;
    ++v0;
  }
  while (v0 != 4);
}

void sub_20B249E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,int a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B249FA4(uint64_t a1)
{
  sub_20B231C6C(*(char **)(a1 + 8));
  return a1;
}

void sub_20B249FCC(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B24A498(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result;
  unsigned __int8 *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  unsigned __int8 *v17[2];
  unsigned __int8 *v18;
  unsigned __int8 *v19[2];
  unsigned __int8 *v20;
  char v21;

  v19[0] = a1 + 8;
  v19[1] = a1 + 120;
  v20 = a1 + 152;
  v17[0] = a2 + 8;
  v17[1] = a2 + 120;
  v18 = a2 + 152;
  result = sub_20B24A898((uint64_t)&v21, v19, v17);
  if ((_DWORD)result)
  {
    v3 = v20;
    if (v20[24])
      v4 = v18[24] == 0;
    else
      v4 = 1;
    if (v4)
    {
      return (v20[24] != 0) == (v18[24] != 0);
    }
    else
    {
      v5 = v20[23];
      if ((v5 & 0x80u) == 0)
        v6 = v20[23];
      else
        v6 = *((_QWORD *)v20 + 1);
      v7 = v18[23];
      v8 = (char)v7;
      if ((v7 & 0x80u) != 0)
        v7 = *((_QWORD *)v18 + 1);
      if (v6 == v7)
      {
        if (v8 >= 0)
          v9 = v18;
        else
          v9 = *(unsigned __int8 **)v18;
        if ((v5 & 0x80) != 0)
        {
          return memcmp(*(const void **)v20, v9, *((_QWORD *)v20 + 1)) == 0;
        }
        else if (v20[23])
        {
          v10 = v5 - 1;
          do
          {
            v12 = *v3++;
            v11 = v12;
            v14 = *v9++;
            v13 = v14;
            v16 = v10-- != 0;
            result = v11 == v13;
          }
          while (v11 == v13 && v16);
        }
        else
        {
          return 1;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_20B24A5C8(uint64_t a1, float *a2, float *a3)
{
  _BOOL8 result;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  result = *a2 == *a3;
  if (*a2 == *a3)
  {
    v4 = a2[1];
    v5 = a3[1];
    result = v4 == v5;
    if (v4 == v5)
    {
      v6 = a2[2];
      v7 = a3[2];
      result = v6 == v7;
      if (v6 == v7)
        result = a2[3] == a3[3];
    }
  }
  if (result)
  {
    v8 = a2[4];
    v9 = a3[4];
    result = v8 == v9;
    if (v8 == v9)
    {
      v10 = a2[5];
      v11 = a3[5];
      result = v10 == v11;
      if (v10 == v11)
      {
        v12 = a2[6];
        v13 = a3[6];
        result = v12 == v13;
        if (v12 == v13)
          result = a2[7] == a3[7];
      }
    }
    if (result)
    {
      v14 = a2[8];
      v15 = a3[8];
      result = v14 == v15;
      if (v14 == v15)
      {
        v16 = a2[9];
        v17 = a3[9];
        result = v16 == v17;
        if (v16 == v17)
        {
          v18 = a2[10];
          v19 = a3[10];
          result = v18 == v19;
          if (v18 == v19)
            return a2[11] == a3[11];
        }
      }
    }
  }
  return result;
}

BOOL sub_20B24A6B8(uint64_t a1, double *a2, double *a3)
{
  _BOOL8 result;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  result = *a2 == *a3;
  if (*a2 == *a3)
  {
    v4 = a2[1];
    v5 = a3[1];
    result = v4 == v5;
    if (v4 == v5)
    {
      v6 = a2[2];
      v7 = a3[2];
      result = v6 == v7;
      if (v6 == v7)
        result = a2[3] == a3[3];
    }
  }
  if (result)
  {
    v8 = a2[4];
    v9 = a3[4];
    result = v8 == v9;
    if (v8 == v9)
    {
      v10 = a2[5];
      v11 = a3[5];
      result = v10 == v11;
      if (v10 == v11)
      {
        v12 = a2[6];
        v13 = a3[6];
        result = v12 == v13;
        if (v12 == v13)
          result = a2[7] == a3[7];
      }
    }
    if (result)
    {
      v14 = a2[8];
      v15 = a3[8];
      result = v14 == v15;
      if (v14 == v15)
      {
        v16 = a2[9];
        v17 = a3[9];
        result = v16 == v17;
        if (v16 == v17)
        {
          v18 = a2[10];
          v19 = a3[10];
          result = v18 == v19;
          if (v18 == v19)
            return a2[11] == a3[11];
        }
      }
    }
  }
  return result;
}

BOOL sub_20B24A7A8(uint64_t a1, float *a2, float *a3)
{
  _BOOL8 result;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  result = *a2 == *a3;
  if (*a2 == *a3)
  {
    v4 = a2[1];
    v5 = a3[1];
    result = v4 == v5;
    if (v4 == v5)
      result = a2[2] == a3[2];
  }
  if (result)
  {
    v6 = a2[3];
    v7 = a3[3];
    result = v6 == v7;
    if (v6 == v7)
    {
      v8 = a2[4];
      v9 = a3[4];
      result = v8 == v9;
      if (v8 == v9)
        return a2[5] == a3[5];
    }
  }
  return result;
}

BOOL sub_20B24A820(uint64_t a1, double *a2, double *a3)
{
  _BOOL8 result;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  result = *a2 == *a3;
  if (*a2 == *a3)
  {
    v4 = a2[1];
    v5 = a3[1];
    result = v4 == v5;
    if (v4 == v5)
      result = a2[2] == a3[2];
  }
  if (result)
  {
    v6 = a2[3];
    v7 = a3[3];
    result = v6 == v7;
    if (v6 == v7)
    {
      v8 = a2[4];
      v9 = a3[4];
      result = v8 == v9;
      if (v8 == v9)
        return a2[5] == a3[5];
    }
  }
  return result;
}

uint64_t sub_20B24A898(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  int v8;
  _BOOL4 v10;
  _BOOL4 v12;
  uint64_t result;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  BOOL v28;
  char v29;
  char *v30;

  v3 = (uint64_t)*a2;
  v4 = (uint64_t)*a3;
  if (**a2 != **a3)
    return 0;
  v7 = *(unsigned int *)(v3 + 104);
  v8 = *(_DWORD *)(v4 + 104);
  v10 = v8 == (_DWORD)v7 && v8 != -1;
  if ((_DWORD)v7 != -1 && v10)
  {
    v30 = &v29;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_24C414350[v7])(&v30, v3 + 8, v4 + 8) & 1) != 0)
      goto LABEL_19;
    return 0;
  }
  v12 = v8 == -1;
  if ((_DWORD)v7 != -1)
    v12 = v10;
  if (!v12)
    return 0;
LABEL_19:
  v14 = a2[1];
  v15 = a3[1];
  if (v14[24])
    v16 = v15[24] == 0;
  else
    v16 = 1;
  if (v16)
    return (v14[24] != 0) == (v15[24] != 0);
  v17 = v14[23];
  if ((v17 & 0x80u) == 0)
    v18 = v14[23];
  else
    v18 = *((_QWORD *)v14 + 1);
  v19 = v15[23];
  v20 = (char)v19;
  if ((v19 & 0x80u) != 0)
    v19 = *((_QWORD *)v15 + 1);
  if (v18 != v19)
    return 0;
  if (v20 >= 0)
    v21 = a3[1];
  else
    v21 = *(unsigned __int8 **)v15;
  if ((v17 & 0x80) != 0)
    return memcmp(*(const void **)v14, v21, *((_QWORD *)v14 + 1)) == 0;
  if (!v14[23])
    return 1;
  v22 = v17 - 1;
  do
  {
    v24 = *v14++;
    v23 = v24;
    v26 = *v21++;
    v25 = v26;
    v28 = v22-- != 0;
    result = v23 == v25;
  }
  while (v23 == v25 && v28);
  return result;
}

uint64_t sub_20B24AA34(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t *v15;

  v10 = a2;
  v11 = "{";
  v12 = a2;
  v13 = "{";
  v14 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **))off_24C4143B8[v3])(&v15);
  sub_20AF55CBC((uint64_t)&v10, a2, a3);
  v10 = a2;
  v11 = ",";
  v12 = a2;
  v13 = ",";
  v14 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_24C4143B8[v6])(&v15, a2);
  sub_20AF55CBC((uint64_t)&v10, a2, a3 + 1);
  v10 = a2;
  v11 = ",";
  v12 = a2;
  v13 = ",";
  v14 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_24C4143B8[v7])(&v15, a2);
  sub_20AF55CBC((uint64_t)&v10, a2, a3 + 2);
  v10 = a2;
  v11 = "}";
  v12 = a2;
  v13 = "}";
  v14 = "}";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
LABEL_6:
    sub_20AECFAB8();
  v15 = &v10;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C4143B8[v8])(&v15, a2);
}

_QWORD *sub_20B24AB84(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;

  sub_20B24AC60(a2, a3, &v8);
  v4 = v8;
  *a1 = v8;
  if (v4)
  {
    v5 = (_QWORD *)operator new();
    v6 = v8;
    *v5 = &off_24C4144C8;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
    a1[1] = v5;
  }
  else
  {
    a1[1] = 0;
  }
  return a1;
}

void sub_20B24AC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v11;

  if (a10)
  {
    if (*(_BYTE *)(a10 + 408))
    {
      if (*(char *)(a10 + 407) < 0)
        operator delete(*(void **)(a10 + 384));
    }
    v11 = sub_20B088C38((uint64_t *)a10);
    MEMORY[0x20BD3583C](v11, 0x10B2C40FBB7FC15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B24AC60@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  char v10;

  v6 = operator new();
  LOBYTE(v8) = 0;
  v10 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20AEC60F4(&v8, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v8 = *a2;
      v9 = *((_QWORD *)a2 + 2);
    }
    v10 = 1;
  }
  result = sub_20B24B908(v6, a1);
  *(_BYTE *)(v6 + 384) = 0;
  *(_BYTE *)(v6 + 408) = 0;
  if (v10)
  {
    *(_OWORD *)(v6 + 384) = v8;
    *(_QWORD *)(v6 + 400) = v9;
    *(_BYTE *)(v6 + 408) = 1;
  }
  *a3 = v6;
  return result;
}

void sub_20B24AD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  MEMORY[0x20BD3583C](v15, 0x10B2C40FBB7FC15);
  _Unwind_Resume(a1);
}

uint64_t sub_20B24AD6C(float ***a1, float ***a2)
{
  float **v2;
  float **v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  char *v15;
  float *v16;
  float *v17;
  char *v18;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  float *v24;
  float **v25;
  float *v26;
  float **v27;
  float *v28;
  size_t v29;
  float *v30;
  float *v31;
  size_t v32;
  float *v33;
  float *v34;
  float *v35;
  float *v36;
  uint64_t result;
  uint64_t v38;
  float *v39;
  char v40;
  float *v41;
  const void **v42;
  float *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  BOOL v50;
  float **v51;
  float **v52;

  v2 = *a1;
  v3 = *a2;
  v5 = **a1;
  v4 = (*a1)[1];
  v6 = **a2;
  if ((char *)v4 - (char *)v5 != (char *)(*a2)[1] - (char *)v6)
    return 0;
  if (v5 != v4)
  {
    while (*v5 == *v6 && v5[1] == v6[1] && v5[2] == v6[2])
    {
      v5 += 3;
      v6 += 3;
      if (v5 == v4)
        goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  v8 = v2[4];
  v7 = v2[5];
  v9 = v3[4];
  if ((char *)v7 - (char *)v8 != (char *)v3[5] - (char *)v9)
    return 0;
  if (v8 != v7)
  {
    while (*v8 == *v9 && v8[1] == v9[1] && v8[2] == v9[2])
    {
      v8 += 3;
      v9 += 3;
      if (v8 == v7)
        goto LABEL_13;
    }
    return 0;
  }
LABEL_13:
  if (*((_DWORD *)v2 + 16) != *((_DWORD *)v3 + 16))
    return 0;
  v11 = v2[9];
  v10 = v2[10];
  v12 = v3[9];
  if ((char *)v10 - (char *)v11 != (char *)v3[10] - (char *)v12)
    return 0;
  if (v11 != v10)
  {
    while (*v11 == *v12 && v11[1] == v12[1] && v11[2] == v12[2])
    {
      v11 += 3;
      v12 += 3;
      if (v11 == v10)
        goto LABEL_20;
    }
    return 0;
  }
LABEL_20:
  if (*((_DWORD *)v2 + 26) != *((_DWORD *)v3 + 26))
    return 0;
  v14 = v2[14];
  v13 = v2[15];
  v15 = (char *)v3[14];
  if ((char *)v13 - (char *)v14 != (char *)v3[15] - v15)
    return 0;
  if (v14 != v13)
  {
    while (*(_DWORD *)v14 == *(_DWORD *)v15
         && *((_DWORD *)v14 + 1) == *((_DWORD *)v15 + 1)
         && *((_DWORD *)v14 + 2) == *((_DWORD *)v15 + 2))
    {
      v14 += 3;
      v15 += 12;
      if (v14 == v13)
        goto LABEL_27;
    }
    return 0;
  }
LABEL_27:
  v17 = v2[18];
  v16 = v2[19];
  v18 = (char *)v3[18];
  if ((char *)v16 - (char *)v17 != (char *)v3[19] - v18)
    return 0;
  if (v17 != v16)
  {
    while (*(_DWORD *)v17 == *(_DWORD *)v18 && *((_DWORD *)v17 + 1) == *((_DWORD *)v18 + 1))
    {
      v17 += 2;
      v18 += 8;
      if (v17 == v16)
        goto LABEL_35;
    }
    return 0;
  }
LABEL_35:
  v21 = v2[22];
  v20 = v2[23];
  v22 = v3[22];
  if ((char *)v20 - (char *)v21 != (char *)v3[23] - (char *)v22)
    return 0;
  if (v21 != v20)
  {
    while (*v21 == *v22 && v21[1] == v22[1])
    {
      v21 += 2;
      v22 += 2;
      if (v21 == v20)
        goto LABEL_40;
    }
    return 0;
  }
LABEL_40:
  v51 = *a2;
  v52 = *a1;
  v25 = v2 + 26;
  v23 = v2[26];
  v24 = v25[1];
  v27 = v3 + 26;
  v26 = v3[26];
  if ((char *)v24 - (char *)v23 != (char *)v27[1] - (char *)v26)
    return 0;
  if (v23 != v24)
  {
    while (*(_DWORD *)v23 == *(_DWORD *)v26
         && *((_DWORD *)v23 + 1) == *((_DWORD *)v26 + 1)
         && *((_DWORD *)v23 + 2) == *((_DWORD *)v26 + 2))
    {
      v23 += 3;
      v26 += 3;
      if (v23 == v24)
        goto LABEL_46;
    }
    return 0;
  }
LABEL_46:
  v28 = v52[30];
  v29 = (char *)v52[31] - (char *)v28;
  v30 = v51[30];
  if (v29 != (char *)v51[31] - (char *)v30)
    return 0;
  if (memcmp(v28, v30, v29))
    return 0;
  if (*((_DWORD *)v52 + 68) != *((_DWORD *)v51 + 68))
    return 0;
  v31 = v52[35];
  v32 = (char *)v52[36] - (char *)v31;
  v33 = v51[35];
  if (v32 != (char *)v51[36] - (char *)v33)
    return 0;
  if (memcmp(v31, v33, v32))
    return 0;
  if (*((_DWORD *)v52 + 78) != *((_DWORD *)v51 + 78))
    return 0;
  v35 = v52[40];
  v34 = v52[41];
  v36 = v51[40];
  if ((char *)v34 - (char *)v35 != (char *)v51[41] - (char *)v36)
    return 0;
  if (v35 != v34)
  {
    while (*v35 == *v36)
    {
      ++v35;
      ++v36;
      if (v35 == v34)
        goto LABEL_56;
    }
    return 0;
  }
LABEL_56:
  if (*((_DWORD *)v52 + 88) != *((_DWORD *)v51 + 88))
    return 0;
  if (*((_BYTE *)v52 + 380) && *((_BYTE *)v51 + 380))
  {
    if (*((float *)v52 + 89) != *((float *)v51 + 89)
      || *((float *)v52 + 90) != *((float *)v51 + 90)
      || *((float *)v52 + 91) != *((float *)v51 + 91)
      || *((float *)v52 + 92) != *((float *)v51 + 92)
      || *((float *)v52 + 93) != *((float *)v51 + 93)
      || *((float *)v52 + 94) != *((float *)v51 + 94))
    {
      return 0;
    }
    goto LABEL_69;
  }
  if ((*((_BYTE *)v52 + 380) != 0) != (*((_BYTE *)v51 + 380) != 0))
    return 0;
LABEL_69:
  result = (*((_BYTE *)v52 + 408) != 0) == (*((_BYTE *)v51 + 408) != 0);
  if (*((_BYTE *)v52 + 408) && *((_BYTE *)v51 + 408))
  {
    v38 = *((unsigned __int8 *)v52 + 407);
    if ((v38 & 0x80u) == 0)
      v39 = (float *)*((unsigned __int8 *)v52 + 407);
    else
      v39 = v52[49];
    v40 = *((_BYTE *)v51 + 407);
    v41 = v51[49];
    if (v40 >= 0)
      v41 = (float *)*((unsigned __int8 *)v51 + 407);
    if (v39 != v41)
      return 0;
    v42 = (const void **)(v52 + 48);
    if (v40 >= 0)
      v43 = (float *)(v51 + 48);
    else
      v43 = v51[48];
    if ((v38 & 0x80) != 0)
    {
      return memcmp(*v42, v43, (size_t)v52[49]) == 0;
    }
    else if (*((_BYTE *)v52 + 407))
    {
      v44 = v38 - 1;
      do
      {
        v46 = *(unsigned __int8 *)v42;
        v42 = (const void **)((char *)v42 + 1);
        v45 = v46;
        v48 = *(unsigned __int8 *)v43;
        v43 = (float *)((char *)v43 + 1);
        v47 = v48;
        v50 = v44-- != 0;
        result = v45 == v47;
      }
      while (v45 == v47 && v50);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

_QWORD *sub_20B24B2AC(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  _QWORD *v28;
  void *__p[2];
  unsigned __int8 v31;
  _BYTE v32[24];
  int v33;
  void *__dst[2];
  unint64_t v35;
  _QWORD v36[5];
  _QWORD *v37;

  v4 = sub_20AEC01D0(a1, (uint64_t)"{", 1);
  v5 = *a2;
  v33 = 0;
  v6 = operator new();
  *(_QWORD *)(v6 + 272) = 0;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)v6 = 0u;
  sub_20AEC0BD8(v6);
  v36[0] = v6;
  sub_20B41924C((_QWORD *)(v6 + 16), v5);
  v7 = *(_DWORD *)(v6 + 120);
  if ((v7 & 0x10) != 0)
  {
    v10 = *(_QWORD *)(v6 + 112);
    v11 = *(_QWORD *)(v6 + 72);
    if (v10 < v11)
    {
      *(_QWORD *)(v6 + 112) = v11;
      v10 = v11;
    }
    v12 = *(const void **)(v6 + 64);
    v8 = v10 - (_QWORD)v12;
    if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_42;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v35) = 0;
      v9 = __dst;
      goto LABEL_14;
    }
    v12 = *(const void **)(v6 + 40);
    v8 = *(_QWORD *)(v6 + 56) - (_QWORD)v12;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_42:
      sub_20AEC0138();
  }
  if (v8 >= 0x17)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    v9 = (void **)operator new(v13 + 1);
    __dst[1] = (void *)v8;
    v35 = v14 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_13;
  }
  HIBYTE(v35) = v8;
  v9 = __dst;
  if (v8)
LABEL_13:
    memmove(v9, v12, v8);
LABEL_14:
  *((_BYTE *)v9 + v8) = 0;
  v15 = v36[0];
  if (v36[0])
  {
    v16 = MEMORY[0x24BEDB7F0];
    v17 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v36[0] = *MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(v16 + 72);
    *(_QWORD *)(v15 + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(v16 + 64);
    *(_QWORD *)(v15 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v15 + 16) = v18;
    if (*(char *)(v15 + 111) < 0)
      operator delete(*(void **)(v15 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v15 + 128);
    MEMORY[0x20BD3583C](v15, 0x10B2C40EED050F3);
  }
  v36[0] = v32;
  v36[1] = __dst;
  v36[2] = v32;
  v36[3] = __dst;
  v36[4] = __dst;
  if (v33 == -1)
    sub_20AECFAB8();
  v37 = v36;
  ((void (*)(_QWORD **, _BYTE *))off_24C414508[v33])(&v37, v32);
  if (SHIBYTE(v35) < 0)
    operator delete(__dst[0]);
  if (v33 == -1)
    sub_20AECFAB8();
  v36[0] = __dst;
  ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24C414538[v33])(__p, v36, v32);
  if (v33 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C414520[v33])(v36, v32);
  if ((v31 & 0x80u) == 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  if ((v31 & 0x80u) == 0)
    v20 = v31;
  else
    v20 = (uint64_t)__p[1];
  sub_20AEC01D0(v4, (uint64_t)v19, v20);
  if ((char)v31 < 0)
    operator delete(__p[0]);
  if (*(_BYTE *)(*a2 + 408))
  {
    sub_20AEC01D0(a1, (uint64_t)",\n", 2);
    sub_20AEC01D0(a1, (uint64_t)"tex0='", 6);
    v21 = *a2;
    if (*(_BYTE *)(*a2 + 408))
    {
      v22 = (const char *)(v21 + 384);
      v23 = *(unsigned __int8 *)(v21 + 407);
      v25 = *(const char **)(v21 + 384);
      v24 = *(_QWORD *)(v21 + 392);
      if ((v23 & 0x80u) == 0)
        v26 = v22;
      else
        v26 = v25;
      if ((v23 & 0x80u) == 0)
        v27 = v23;
      else
        v27 = v24;
      v28 = a1;
    }
    else
    {
      v26 = "nullopt";
      v28 = a1;
      v27 = 7;
    }
    sub_20AEC01D0(v28, (uint64_t)v26, v27);
    sub_20AEC01D0(a1, (uint64_t)"'", 1);
  }
  return sub_20AEC01D0(a1, (uint64_t)"}", 1);
}

void sub_20B24B640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B24B65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  MEMORY[0x20BD3583C](v4, 0x10B2C40EED050F3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B24B688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B24B69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B24B6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  sub_20AECFA60((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B24B6F0(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = -1431655765 * ((unint64_t)(a1[2] - v2) >> 2);
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_20AECFAB8();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24C4143F8[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_20B24B77C(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = (unint64_t)(a1[2] - v2) >> 3;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_20AECFAB8();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24C414408[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_20B24B7FC(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = (unint64_t)(a1[2] - v2) >> 3;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_20AECFAB8();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24C414418[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_20B24B87C(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = -1431655765 * ((unint64_t)(a1[2] - v2) >> 2);
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_20AECFAB8();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24C414428[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t sub_20B24B908(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _OWORD *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  _OWORD *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v40;
  int *v41;
  _QWORD v42[2];
  char v43;

  v4 = sub_20B24BDFC((uint64_t *)a1, (uint64_t **)a2) + 4;
  sub_20B24BDFC(v4, (uint64_t **)(a2 + 32));
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  sub_20B24BDFC((uint64_t *)(a1 + 72), (uint64_t **)(a2 + 72));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  sub_20B24BFAC((uint64_t *)(a1 + 112), (uint64_t **)(a2 + 112));
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v5 = *(unsigned int *)(a2 + 172);
  if ((_DWORD)v5 == -1)
    sub_20AECFAB8();
  v42[0] = &v43;
  v6 = ((uint64_t (*)(_QWORD *, uint64_t))off_24C414478[v5])(v42, a2 + 168);
  *(_QWORD *)(a1 + 168) = v6;
  *(_QWORD *)(a1 + 160) = 0;
  v8 = *(char **)(a2 + 144);
  v7 = *(char **)(a2 + 152);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if ((v9 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v40 = v9 >> 3;
    if (HIDWORD(v6) == 0xFFFFFFFF)
      sub_20AECFAB8();
    v41 = &v40;
    v10 = ((uint64_t (*)(int **, uint64_t))off_24C414488[HIDWORD(v6)])(&v41, a1 + 168);
    *(_QWORD *)(a1 + 144) = v10;
    *(_QWORD *)(a1 + 152) = v10;
    *(_QWORD *)(a1 + 160) = v10 + 8 * v11;
    if (v9 - 8 < 0x18)
      goto LABEL_10;
    if ((unint64_t)(v10 - (_QWORD)v8) < 0x20)
      goto LABEL_10;
    v12 = ((v9 - 8) >> 3) + 1;
    v13 = 8 * (v12 & 0x3FFFFFFFFFFFFFFCLL);
    v14 = &v8[v13];
    v15 = (_QWORD *)(v10 + v13);
    v16 = (_OWORD *)(v10 + 16);
    v17 = (__int128 *)(v8 + 16);
    v18 = v12 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v19 = *v17;
      *(v16 - 1) = *(v17 - 1);
      *v16 = v19;
      v16 += 2;
      v17 += 2;
      v18 -= 4;
    }
    while (v18);
    v8 = v14;
    v10 = (uint64_t)v15;
    if (v12 != (v12 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_10:
      v15 = (_QWORD *)v10;
      do
      {
        v20 = *(_QWORD *)v8;
        v8 += 8;
        *v15++ = v20;
      }
      while (v8 != v7);
    }
    *(_QWORD *)(a1 + 152) = v15;
  }
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v21 = *(unsigned int *)(a2 + 204);
  if ((_DWORD)v21 == -1)
    sub_20AECFAB8();
  v42[0] = &v43;
  v22 = ((uint64_t (*)(_QWORD *, uint64_t))off_24C414498[v21])(v42, a2 + 200);
  *(_QWORD *)(a1 + 200) = v22;
  *(_QWORD *)(a1 + 192) = 0;
  v24 = *(char **)(a2 + 176);
  v23 = *(char **)(a2 + 184);
  v25 = v23 - v24;
  if (v23 != v24)
  {
    if ((v25 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v40 = v25 >> 3;
    if (HIDWORD(v22) == 0xFFFFFFFF)
      sub_20AECFAB8();
    v41 = &v40;
    v26 = ((uint64_t (*)(int **, uint64_t))off_24C4144A8[HIDWORD(v22)])(&v41, a1 + 200);
    *(_QWORD *)(a1 + 176) = v26;
    *(_QWORD *)(a1 + 184) = v26;
    *(_QWORD *)(a1 + 192) = v26 + 8 * v27;
    if (v25 - 8 < 0x18)
      goto LABEL_22;
    if ((unint64_t)(v26 - (_QWORD)v24) < 0x20)
      goto LABEL_22;
    v28 = ((v25 - 8) >> 3) + 1;
    v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
    v30 = &v24[v29];
    v31 = (_QWORD *)(v26 + v29);
    v32 = (_OWORD *)(v26 + 16);
    v33 = (__int128 *)(v24 + 16);
    v34 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v35 = *v33;
      *(v32 - 1) = *(v33 - 1);
      *v32 = v35;
      v32 += 2;
      v33 += 2;
      v34 -= 4;
    }
    while (v34);
    v24 = v30;
    v26 = (uint64_t)v31;
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_22:
      v31 = (_QWORD *)v26;
      do
      {
        v36 = *(_QWORD *)v24;
        v24 += 8;
        *v31++ = v36;
      }
      while (v24 != v23);
    }
    *(_QWORD *)(a1 + 184) = v31;
  }
  sub_20B24BFAC((uint64_t *)(a1 + 208), (uint64_t **)(a2 + 208));
  sub_20B0E7FAC((_QWORD *)(a1 + 240), a2 + 240);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  sub_20B0E7FAC((_QWORD *)(a1 + 280), a2 + 280);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
  sub_20B0E87C0((_QWORD *)(a1 + 320), a2 + 320);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  *(_BYTE *)(a1 + 356) = 0;
  *(_BYTE *)(a1 + 380) = 0;
  if (*(_BYTE *)(a2 + 380))
  {
    v37 = *(_QWORD *)(a2 + 356);
    *(_DWORD *)(a1 + 364) = *(_DWORD *)(a2 + 364);
    *(_QWORD *)(a1 + 356) = v37;
    v38 = *(_QWORD *)(a2 + 368);
    *(_DWORD *)(a1 + 376) = *(_DWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 368) = v38;
    *(_BYTE *)(a1 + 380) = 1;
  }
  return a1;
}

void sub_20B24BC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;

  sub_20B0CDFF4(v16);
  sub_20B0CDFF4(v15);
  sub_20B24B6F0(v14);
  sub_20B24B77C(v13);
  sub_20B24B7FC(v12);
  sub_20B24B6F0(v11);
  sub_20B24B87C(v10);
  sub_20B24B87C(a9);
  sub_20B24B87C(v9);
  _Unwind_Resume(a1);
}

void sub_20B24BCC8()
{
  JUMPOUT(0x20B24BDDCLL);
}

void sub_20B24BCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  uint64_t *v9;

  sub_20B24B87C(a9);
  sub_20B24B87C(v9);
  _Unwind_Resume(a1);
}

void sub_20B24BCEC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20B24B87C(v1);
  _Unwind_Resume(a1);
}

void sub_20B24BD00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v18 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v14 + 184) = v18;
    v19 = (unint64_t)(*(_QWORD *)(v14 + 192) - v18) >> 3;
    a12 = v18;
    a13 = v19;
    v20 = *(unsigned int *)(v14 + 204);
    if ((_DWORD)v20 == -1)
      sub_20AECFAB8();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24C414408[v20])(&a14, v17);
  }
  sub_20B24B7FC(v15);
  JUMPOUT(0x20B24BDD4);
}

void sub_20B24BD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v20 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v14 + 152) = v20;
    v21 = (unint64_t)(*(_QWORD *)(v14 + 160) - v20) >> 3;
    a12 = v20;
    a13 = v21;
    v22 = *(unsigned int *)(v14 + 172);
    if ((_DWORD)v22 == -1)
      sub_20AECFAB8();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24C414418[v22])(&a14, v18);
  }
  sub_20B24B6F0(v16);
  sub_20B24B87C(v15);
  sub_20B24B87C(a9);
  sub_20B24B87C((uint64_t *)v14);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B24BDFC(uint64_t *a1, uint64_t **a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int *v15;
  char *v16;
  char v17;

  *a1 = 0;
  a1[1] = 0;
  v2 = *((unsigned int *)a2 + 7);
  if ((_DWORD)v2 == -1)
    sub_20AECFAB8();
  v16 = &v17;
  v5 = ((uint64_t (*)(char **, uint64_t **))off_24C414438[v2])(&v16, a2 + 3);
  a1[3] = v5;
  a1[2] = 0;
  v7 = *a2;
  v6 = a2[1];
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 2) >= 0x1555555555555556)
      sub_20AEC60B8();
    v14 = -1431655765 * (((char *)v6 - (char *)v7) >> 2);
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_20AECFAB8();
    v15 = &v14;
    v8 = ((uint64_t (*)(int **, uint64_t *))off_24C414448[HIDWORD(v5)])(&v15, a1 + 3);
    v9 = 0;
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v8 + 12 * v10;
    v11 = v8;
    do
    {
      v12 = *v7;
      *(_DWORD *)(v11 + 8) = *((_DWORD *)v7 + 2);
      *(_QWORD *)v11 = v12;
      v11 += 12;
      v7 = (uint64_t *)((char *)v7 + 12);
      v9 += 12;
    }
    while (v7 != v6);
    a1[1] = v8 + v9;
  }
  return a1;
}

void sub_20B24BF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = -1431655765 * ((unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 2);
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_20AECFAB8();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24C414428[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B24BF9C()
{
  return 0;
}

uint64_t sub_20B24BFA4()
{
  return 0x100000000;
}

uint64_t *sub_20B24BFAC(uint64_t *a1, uint64_t **a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int *v15;
  char *v16;
  char v17;

  *a1 = 0;
  a1[1] = 0;
  v2 = *((unsigned int *)a2 + 7);
  if ((_DWORD)v2 == -1)
    sub_20AECFAB8();
  v16 = &v17;
  v5 = ((uint64_t (*)(char **, uint64_t **))off_24C414458[v2])(&v16, a2 + 3);
  a1[3] = v5;
  a1[2] = 0;
  v7 = *a2;
  v6 = a2[1];
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 2) >= 0x1555555555555556)
      sub_20AEC60B8();
    v14 = -1431655765 * (((char *)v6 - (char *)v7) >> 2);
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_20AECFAB8();
    v15 = &v14;
    v8 = ((uint64_t (*)(int **, uint64_t *))off_24C414468[HIDWORD(v5)])(&v15, a1 + 3);
    v9 = 0;
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v8 + 12 * v10;
    v11 = v8;
    do
    {
      v12 = *v7;
      *(_DWORD *)(v11 + 8) = *((_DWORD *)v7 + 2);
      *(_QWORD *)v11 = v12;
      v11 += 12;
      v7 = (uint64_t *)((char *)v7 + 12);
      v9 += 12;
    }
    while (v7 != v6);
    a1[1] = v8 + v9;
  }
  return a1;
}

void sub_20B24C0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = -1431655765 * ((unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 2);
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_20AECFAB8();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24C4143F8[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B24C14C()
{
  return 0;
}

uint64_t sub_20B24C154()
{
  return 0x100000000;
}

uint64_t sub_20B24C15C()
{
  return 0;
}

uint64_t sub_20B24C164()
{
  return 0x100000000;
}

void *sub_20B24C16C(unsigned int **a1)
{
  return operator new(8 * **a1);
}

vm_address_t sub_20B24C198(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 511) & 0x1FFFFFE00;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 8 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

uint64_t sub_20B24C214()
{
  return 0;
}

uint64_t sub_20B24C21C()
{
  return 0x100000000;
}

void *sub_20B24C224(unsigned int **a1)
{
  return operator new(8 * **a1);
}

vm_address_t sub_20B24C250(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 511) & 0x1FFFFFE00;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 8 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

void sub_20B24C2D0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B24C2F4(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 408) && *(char *)(v1 + 407) < 0)
      operator delete(*(void **)(v1 + 384));
    sub_20B088C38((uint64_t *)v1);
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B24C350(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3viz7TriMesh7PrivateEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3viz7TriMesh7PrivateEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3viz7TriMesh7PrivateEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3viz7TriMesh7PrivateEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

BOOL sub_20B24C3C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v2 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a1 + 64);
    v14 = v2;
    v15 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 64);
    v14 = *a2;
    v15 = 0;
  }
  v8 = sub_20B1E0FBC(v6, &v14);
  if (v3)
  {
    v9 = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (!v3)
    return v8;
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
    return v8;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return v8;
}

void sub_20B24C4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20AEC147C((uint64_t)&a11);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B24C4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 64);
  std::mutex::lock((std::mutex *)(v3 + 32));
  v4 = sub_20B1E0B8C(v3, a2);
  std::mutex::unlock((std::mutex *)(v3 + 32));
  return v4;
}

void sub_20B24C520(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B24C534(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_20B24C53C(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_20B24C544@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 40);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_20B24C568@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 40);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

std::__shared_weak_count *sub_20B24C58C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;

  result = *(std::__shared_weak_count **)(a1 + 24);
  if (result && (result = std::__shared_weak_count::lock(result)) != 0)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    a2[1] = result;
  }
  else
  {
    *a2 = 0;
    a2[1] = result;
  }
  return result;
}

std::__shared_weak_count *sub_20B24C5D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;

  result = *(std::__shared_weak_count **)(a1 + 24);
  if (result && (result = std::__shared_weak_count::lock(result)) != 0)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    a2[1] = result;
  }
  else
  {
    *a2 = 0;
    a2[1] = result;
  }
  return result;
}

uint64_t sub_20B24C624(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_20B24C62C(uint64_t a1)
{
  return a1 + 72;
}

void sub_20B24C634(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
  {
    sub_20B21AB14(v4, a2);
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    sub_20B21AB14(*(_QWORD *)(v3 + 8), a2);
  }
}

void sub_20B24C6AC(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
  {
    sub_20B21AB14(v4, a2);
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    sub_20B21AB14(*(_QWORD *)(v3 + 8), a2);
  }
}

uint64_t sub_20B24C724(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
    return sub_20B21A6A0(v4, a2);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return sub_20B21A6A0(*(_QWORD *)(v3 + 8), a2);
}

uint64_t sub_20B24C79C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
    return sub_20B21A6A0(v4, a2);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return sub_20B21A6A0(*(_QWORD *)(v3 + 8), a2);
}

uint64_t sub_20B24C814(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)(v3 + 8);
  if (v4)
    return sub_20B21A9F0(v4, a2);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return sub_20B21A9F0(*(_QWORD **)(v3 + 8), a2);
}

uint64_t sub_20B24C88C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD **)(v3 + 8);
  if (v4)
    return sub_20B21A9F0(v4, a2);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return sub_20B21A9F0(*(_QWORD **)(v3 + 8), a2);
}

uint64_t **sub_20B24C904(uint64_t a1, char *a2, size_t a3)
{
  return sub_20B21BBDC(*(_QWORD *)(a1 + 32), a2, a3);
}

uint64_t **sub_20B24C90C(uint64_t a1, char *a2, size_t a3)
{
  return sub_20B21BBDC(*(_QWORD *)(a1 + 24), a2, a3);
}

unint64_t sub_20B24C914(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
    return sub_20B219BFC(v6, a2, a3);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return sub_20B219BFC(*(_QWORD *)(v5 + 8), a2, a3);
}

unint64_t sub_20B24C9A4(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
    return sub_20B219BFC(v6, a2, a3);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return sub_20B219BFC(*(_QWORD *)(v5 + 8), a2, a3);
}

uint64_t sub_20B24CA34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::mutex *v5;
  _QWORD *v6;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 64);
  v5 = (std::mutex *)(v4 + 32);
  std::mutex::lock((std::mutex *)(v4 + 32));
  v6 = *(_QWORD **)(v4 + 96);
  for (i = *(_QWORD **)(v4 + 104); v6 != i; v6 += 2)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, a2);
  std::mutex::unlock(v5);
  return a1;
}

void sub_20B24CAAC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B24CAC0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  char *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  void *__p;
  char v25;
  unsigned __int8 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  char v33;
  __int128 v34;
  __int128 v35;
  char v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  char v42;
  char v43;
  char v44;
  void *v45;
  std::__shared_weak_count *v46;
  char *v47;
  char *v48;

  v3 = *(_QWORD *)(a1 + 64);
  std::mutex::lock((std::mutex *)(v3 + 32));
  sub_20B1E167C(&v47, v3 + 96);
  std::mutex::unlock((std::mutex *)(v3 + 32));
  v4 = v47;
  v5 = v48;
  if (v47 == v48)
  {
    v12 = 1;
    if (v47)
      goto LABEL_44;
    goto LABEL_54;
  }
  while (1)
  {
    if (*(_QWORD *)v4)
    {
      v6 = __dynamic_cast(*(const void **)v4, (const struct __class_type_info *)&unk_24C411FB0, (const struct __class_type_info *)&unk_24C411C60, -2);
      if (v6)
        break;
    }
LABEL_3:
    v4 += 16;
    if (v4 == v5)
    {
      v12 = 1;
      goto LABEL_43;
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 1);
  v45 = v6;
  v46 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v6 + 40))(&v34);
  if (v44)
  {
    if (v7)
    {
      v10 = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    goto LABEL_3;
  }
  v23 = v34;
  v13 = sub_20AECEBD0(&__p, &v35);
  *(_OWORD *)a2 = v23;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (v33)
  {
    *(_BYTE *)(a2 + 40) = 0;
    v14 = v26;
    if (v26)
    {
      *(_OWORD *)(a2 + 16) = *(_OWORD *)v13;
      *(_QWORD *)(a2 + 32) = *((_QWORD *)v13 + 2);
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
      *(_QWORD *)v13 = 0;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (v32)
    {
      v15 = v29;
      *(_QWORD *)(a2 + 64) = v28;
      *(_OWORD *)(a2 + 48) = v27;
      v27 = 0uLL;
      *(_QWORD *)(a2 + 72) = v15;
      *(_OWORD *)(a2 + 80) = v30;
      *(_QWORD *)(a2 + 96) = v31;
      v28 = 0;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    if (v14 && v25 < 0)
      operator delete(__p);
  }
  else
  {
    *(_BYTE *)(a2 + 120) = 0;
  }
  if (!v44 && v43)
  {
    if (v42)
    {
      if (v41 < 0)
        operator delete(v40);
      if (v39 < 0)
        operator delete(v38);
    }
    if (v37 && v36 < 0)
      operator delete((void *)v35);
  }
  if (v7)
  {
    v16 = (unint64_t *)&v7->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v12 = 0;
LABEL_43:
  v4 = v47;
  if (v47)
  {
LABEL_44:
    v18 = v48;
    v19 = v4;
    if (v48 != v4)
    {
      do
      {
        v20 = (std::__shared_weak_count *)*((_QWORD *)v18 - 1);
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v18 -= 16;
      }
      while (v18 != v4);
      v19 = v47;
    }
    v48 = v4;
    operator delete(v19);
  }
LABEL_54:
  if (v12)
    *(_BYTE *)(a2 + 120) = 1;
}

void sub_20B24CDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  sub_20AECD704((uint64_t)va);
  sub_20AEC147C(v16 - 104);
  sub_20AEC3C38((void **)(v16 - 88));
  _Unwind_Resume(a1);
}

void sub_20B24CDF0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B24CE04(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AEC147C(v1 - 104);
  sub_20AEC3C38((void **)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_20B24CE20(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p[2];
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;

  v6 = (char *)operator new(0x88uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24C4147D0;
  *((_QWORD *)v6 + 3) = &off_24C4146A0;
  __p[0] = 0;
  __p[1] = 0;
  v33 = 0;
  *((_QWORD *)v6 + 4) = &unk_24C414748;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *((_QWORD *)v6 + 9) = &off_24C410820;
  *((_QWORD *)v6 + 10) = &unk_24C410860;
  v35 = 0;
  v36 = 0;
  sub_20B1E0D30((uint64_t **)__p, (uint64_t *)&v35, (_QWORD *)v6 + 11);
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
  v6[104] = 0;
  v6[128] = 0;
  *a3 = v6 + 24;
  a3[1] = v6;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    v7 = 2;
  else
    v7 = 1;
  v8 = operator new(0x28uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24C40D228;
  v10 = v8 + 3;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  LOBYTE(__p[0]) = 0;
  LOBYTE(v34) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v33 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    LOBYTE(v34) = 1;
  }
  sub_20B21AE74(v8 + 3, v7, (uint64_t)&v35, (uint64_t *)__p);
  if ((_BYTE)v34 && SHIBYTE(v33) < 0)
    operator delete(__p[0]);
  if (v35)
  {
    v36 = (std::__shared_weak_count *)v35;
    operator delete(v35);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)v6 + 8);
  *((_QWORD *)v6 + 7) = v10;
  *((_QWORD *)v6 + 8) = v9;
  if (!v11)
    goto LABEL_17;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (_QWORD *)*a3;
    v15 = *(_QWORD *)(*a3 + 32);
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
      goto LABEL_21;
  }
  else
  {
LABEL_17:
    v14 = (_QWORD *)*a3;
    v15 = *(_QWORD *)(*a3 + 32);
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
      goto LABEL_21;
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v16 = *(_QWORD *)(v15 + 8);
LABEL_21:
  sub_20AFA945C((uint64_t)(v14 + 10), (_QWORD *)(v16 + 240));
  v17 = (std::__shared_weak_count *)a3[1];
  if (v17)
  {
    p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
  }
  v20 = (std::__shared_weak_count *)v14[3];
  v14[2] = v14;
  v14[3] = v17;
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  if (v17)
  {
    v21 = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    __p[0] = &off_24C410820;
    __p[1] = &unk_24C410860;
    v35 = v14;
    v36 = v17;
    do
      v23 = __ldxr(v21);
    while (__stxr(v23 + 1, v21));
  }
  else
  {
    __p[0] = &off_24C410820;
    __p[1] = &unk_24C410860;
    v35 = v14;
    v36 = 0;
  }
  sub_20B1E0D30((uint64_t **)a1, (uint64_t *)&v35, &v33);
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
  v24 = v33;
  v25 = v34;
  v33 = 0;
  v34 = 0;
  v26 = (std::__shared_weak_count *)v14[9];
  v14[8] = v24;
  v14[9] = v25;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v34;
  if (v34)
  {
    v30 = (unint64_t *)&v34->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
}

void sub_20B24D160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  uint64_t v15;
  std::__shared_weak_count *v16;

  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v16)
    {
LABEL_3:
      sub_20AEC147C(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v16);
  sub_20AEC147C(v15);
  _Unwind_Resume(a1);
}

void sub_20B24D1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18)
{
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *v21;

  if (a15 && a14 < 0)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v21);
  sub_20AEC147C(v18);
  _Unwind_Resume(a1);
}

void sub_20B24D1E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AEC147C(v1);
  _Unwind_Resume(a1);
}

void sub_20B24D1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;

  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    sub_20AEC147C(v16);
    v18 = (std::__shared_weak_count *)v15[2].__vftable;
    if (!v18)
    {
LABEL_3:
      std::__shared_weak_count::~__shared_weak_count(v15);
      operator delete(v19);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_20AEC147C(v16);
    v18 = (std::__shared_weak_count *)v15[2].__vftable;
    if (!v18)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_20B24D258(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AEC147C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B24D26C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B24D2D4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20B24D330(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B24D398(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B24D400(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 104))(v4, a2);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B24D488(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 104))(v4, a2);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), a2);
}

BOOL sub_20B24D510(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BOOL8 v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *a2;
    v5 = (std::__shared_weak_count *)a2[1];
    v20 = v5;
    if (v5)
      goto LABEL_3;
LABEL_12:
    v21 = 0;
    v9 = *(_QWORD *)(v3 + 64);
    v22 = v4;
    v23 = 0;
    goto LABEL_13;
  }
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  v20 = v5;
  if (!v5)
    goto LABEL_12;
LABEL_3:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v21 = v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = *(_QWORD *)(v3 + 64);
  v22 = v4;
  v23 = v5;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_13:
  v12 = sub_20B1E0FBC(v9, &v22);
  if (v5)
  {
    v13 = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (!v20)
    return v12;
  v17 = (unint64_t *)&v20->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
    return v12;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  return v12;
}

void sub_20B24D6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  sub_20AEC147C((uint64_t)&a13);
  sub_20AEC147C((uint64_t)&a11);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B24D6D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v3 = *(_QWORD *)(a1 + 16);
  }
  v5 = *(_QWORD *)(v3 + 64);
  std::mutex::lock((std::mutex *)(v5 + 32));
  v6 = sub_20B1E0B8C(v5, a2);
  std::mutex::unlock((std::mutex *)(v5 + 32));
  return v6;
}

void sub_20B24D76C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B24D780(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
    return v1 + 48;
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return *(_QWORD *)(a1 + 16) + 48;
}

uint64_t sub_20B24D7F4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
    return v1 + 48;
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return *(_QWORD *)(a1 + 16) + 48;
}

uint64_t sub_20B24D868@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
  {
    v4 = result;
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
    if ((result & 1) != 0)
      abort();
    v3 = *(_QWORD *)(v4 + 16);
  }
  v6 = *(_QWORD *)(v3 + 32);
  v5 = *(_QWORD *)(v3 + 40);
  *a2 = v6;
  a2[1] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

uint64_t sub_20B24D8EC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
  {
    v4 = result;
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
    if ((result & 1) != 0)
      abort();
    v3 = *(_QWORD *)(v4 + 16);
  }
  v6 = *(_QWORD *)(v3 + 32);
  v5 = *(_QWORD *)(v3 + 40);
  *a2 = v6;
  a2[1] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

std::__shared_weak_count *sub_20B24D970@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    result = *(std::__shared_weak_count **)(v3 + 24);
    if (!result)
      goto LABEL_8;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v3 = *(_QWORD *)(a1 + 16);
    result = *(std::__shared_weak_count **)(v3 + 24);
    if (!result)
      goto LABEL_8;
  }
  result = std::__shared_weak_count::lock(result);
  if (result)
  {
    *a2 = *(_QWORD *)(v3 + 16);
    a2[1] = result;
    return result;
  }
LABEL_8:
  *a2 = 0;
  a2[1] = result;
  return result;
}

std::__shared_weak_count *sub_20B24DA18@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    result = *(std::__shared_weak_count **)(v3 + 24);
    if (!result)
      goto LABEL_8;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v3 = *(_QWORD *)(a1 + 16);
    result = *(std::__shared_weak_count **)(v3 + 24);
    if (!result)
      goto LABEL_8;
  }
  result = std::__shared_weak_count::lock(result);
  if (result)
  {
    *a2 = *(_QWORD *)(v3 + 16);
    a2[1] = result;
    return result;
  }
LABEL_8:
  *a2 = 0;
  a2[1] = result;
  return result;
}

uint64_t sub_20B24DAC0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112))(v2);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B24DB3C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112))(v2);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B24DBB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 120))(v4, a2);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B24DC40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 120))(v4, a2);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_20B24DCC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, a2);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B24DD50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, a2);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), a2);
}

uint64_t **sub_20B24DDD8(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  return sub_20B21BBDC(*(_QWORD *)(v5 + 32), a2, a3);
}

uint64_t **sub_20B24DE54(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  return sub_20B21BBDC(*(_QWORD *)(v5 + 32), a2, a3);
}

unint64_t sub_20B24DED0(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      goto LABEL_9;
    }
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      return sub_20B219BFC(v7, a2, a3);
LABEL_7:
    if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))return sub_20B219BFC(*(_QWORD *)(v6 + 8), a2, a3);
LABEL_9:
    abort();
  }
  v6 = *(_QWORD *)(v5 + 32);
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_7;
  return sub_20B219BFC(v7, a2, a3);
}

unint64_t sub_20B24DFB0(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      goto LABEL_9;
    }
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      return sub_20B219BFC(v7, a2, a3);
LABEL_7:
    if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))return sub_20B219BFC(*(_QWORD *)(v6 + 8), a2, a3);
LABEL_9:
    abort();
  }
  v6 = *(_QWORD *)(v5 + 32);
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_7;
  return sub_20B219BFC(v7, a2, a3);
}

uint64_t sub_20B24E090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 32) + 64))(*(_QWORD *)(v5 + 32), a2, a3);
}

uint64_t sub_20B24E114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 32) + 64))(*(_QWORD *)(v5 + 32), a2, a3);
}

uint64_t sub_20B24E198(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 16);
  }
  v5 = *(_QWORD *)(v4 + 64);
  v6 = (std::mutex *)(v5 + 32);
  std::mutex::lock((std::mutex *)(v5 + 32));
  v7 = *(_QWORD **)(v5 + 96);
  for (i = *(_QWORD **)(v5 + 104); v7 != i; v7 += 2)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 16))(*v7, a2);
  std::mutex::unlock(v6);
  return a1;
}

void sub_20B24E254(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B24E26C(uint64_t a1)
{
  sub_20B24E310(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B24E290(uint64_t a1)
{
  return sub_20B24E310(a1 - 8);
}

void sub_20B24E298(uint64_t a1)
{
  sub_20B24E310(a1 - 8);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B24E2C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4147D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B24E2D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4147D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B24E300(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_20B24E310(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)a1 = &off_24C4146A0;
  *(_QWORD *)(a1 + 8) = &unk_24C414748;
  if (*(_BYTE *)(a1 + 104) && *(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    v2 = *(std::__shared_weak_count **)(a1 + 72);
    if (!v2)
      goto LABEL_9;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 72);
    if (!v2)
      goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_9:
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v8)
        return a1;
      goto LABEL_14;
    }
  }
  v8 = *(std::__shared_weak_count **)(a1 + 24);
  if (v8)
LABEL_14:
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20B24E3EC(int a1@<W0>, int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v6;
  unsigned int v8;
  std::__shared_weak_count *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  __int128 v33;
  uint64_t (**v34)();
  __int128 v35;

  if (*a3)
    v6 = a3[1] == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (a1 == 3)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 24) = 3;
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = &off_24C4169B8;
      *(_DWORD *)(a4 + 24) = 0;
    }
  }
  else
  {
    if ((a2 - 1) > 0x25)
      v8 = 0;
    else
      v8 = dword_20B5F1924[a2 - 1] | dword_20B5F188C[a2 - 1];
    __p = operator new(0x68uLL);
    v33 = xmmword_20B5EE7A0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20B285ED4((uint64_t)&v34, a3, v8, (uint64_t *)&__p, 0);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    switch(a1)
    {
      case 1:
        v10 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        if ((_QWORD)v10)
        {
          v14 = *(_QWORD *)v10;
          v13 = *(std::__shared_weak_count **)(v10 + 8);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          if (v14)
            sub_20B289920(v10);
        }
        *(_OWORD *)(a4 + 8) = v10;
        *(_QWORD *)a4 = &off_24C416978;
        *(_DWORD *)(a4 + 24) = 1;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 2:
        v18 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        if ((_QWORD)v18)
        {
          v22 = *(_QWORD *)v18;
          v21 = *(std::__shared_weak_count **)(v18 + 8);
          if (v21)
          {
            v23 = (unint64_t *)&v21->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            do
              v25 = __ldaxr(v23);
            while (__stlxr(v25 - 1, v23));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (v22)
            sub_20B289A10(v18);
        }
        *(_OWORD *)(a4 + 8) = v18;
        *(_QWORD *)a4 = &off_24C416998;
        *(_DWORD *)(a4 + 24) = 2;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 3:
        v26 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 16);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          do
            v29 = __ldxr(v27);
          while (__stxr(v29 + 1, v27));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
        }
        *(_OWORD *)a4 = v26;
        *(_DWORD *)(a4 + 24) = 3;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      default:
        *(_QWORD *)a4 = &off_24C4169B8;
        *(_OWORD *)(a4 + 8) = v35;
        v35 = 0uLL;
        *(_DWORD *)(a4 + 24) = 0;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
        {
LABEL_51:
          v30 = (unint64_t *)&v9->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        break;
    }
  }
}

void sub_20B24E74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a4);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B24E7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B24E7D0(int a1, uint64_t a2, double a3)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t result;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  __int128 v31;

  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24))
        goto LABEL_40;
      v3 = *(uint64_t **)(a2 + 8);
      v4 = *(std::__shared_weak_count **)(a2 + 16);
      v28 = v3;
      v29 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      v27 = &off_24C416978;
      if (v3)
      {
        v8 = *v3;
        v7 = (std::__shared_weak_count *)v3[1];
        if (v7)
        {
          v9 = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
          do
            v11 = __ldaxr(v9);
          while (__stlxr(v11 - 1, v9));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        if (v8)
          sub_20B289920((uint64_t)v28);
      }
      sub_20B24EAB8((uint64_t)&v27, &v30);
      v12 = v31;
      if (v28)
      {
        v14 = *v28;
        v13 = (std::__shared_weak_count *)v28[1];
        if (v13)
        {
          v15 = (unint64_t *)&v13->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          do
            v17 = __ldaxr(v15);
          while (__stlxr(v17 - 1, v15));
          if (!v17)
          {
            v24 = v12;
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
            v12 = v24;
          }
        }
        if (v14)
        {
          v25 = v12;
          sub_20B289AFC((uint64_t)v28);
          v12 = v25;
        }
      }
      v27 = &off_24C4169B8;
      v18 = v29;
      if (!v29)
        goto LABEL_28;
      v19 = (unint64_t *)&v29->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (v20)
        goto LABEL_28;
      goto LABEL_39;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1)
        goto LABEL_40;
      goto LABEL_33;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2)
        goto LABEL_40;
LABEL_33:
      sub_20B24EAB8(a2, &v30);
      result = v31;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3)
LABEL_40:
        sub_20AECFAB8();
      sub_20B24EC14((uint64_t *)a2, &v27);
      sub_20B24EAB8((uint64_t)&v27, &v30);
      v12 = v31;
      v27 = &off_24C4169B8;
      v18 = v29;
      if (!v29)
        goto LABEL_28;
      v22 = (unint64_t *)&v29->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (v23)
      {
LABEL_28:
        result = v12;
      }
      else
      {
LABEL_39:
        v26 = v12;
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        result = v26;
      }
      break;
    default:
      result = *(_QWORD *)&a3;
      break;
  }
  return result;
}

void sub_20B24EA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B24EAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_20B24EAB8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20B28523C(a1, 0);
  v11 = sub_20B286A40(a1);
  v12 = sub_20B286B78(a1);
  result = sub_20B286CB0(a1);
  v14 = v11;
  v15 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  *a2 = v10;
  a2[1] = v17;
  a2[2] = (result << 32) | 1;
  if (HIDWORD(v17) * (_DWORD)result == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_20B24EC14(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v4 = (std::__shared_weak_count *)a1[1];
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = *a1;
    *a2 = &off_24C4169B8;
    if (v7)
    {
      a2[1] = v7;
      a2[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a2[1] = 0;
      a2[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a2[1] = 0;
    a2[2] = 0;
    *a2 = &off_24C4169B8;
  }
  v12 = (uint64_t *)a2[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_20B532360);
    abort();
  }
}

void sub_20B24ED58(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B285E60(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B24ED6C(uint64_t a1, int a2, int a3, unsigned int *a4, char a5)
{
  uint64_t v8;
  double v9;
  BOOL v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char v21;
  uint64_t v22[3];
  uint64_t (**v23)();
  uint64_t *v24;
  std::__shared_weak_count *v25;
  void **v26[2];

  v21 = a5;
  *(_QWORD *)a1 = off_24C414820;
  *(_DWORD *)(a1 + 8) = a2;
  v8 = a1 + 16;
  sub_20B24E3EC(a2, a3, a4, a1 + 16);
  if (*a4)
    v10 = a4[1] == 0;
  else
    v10 = 1;
  if (v10)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a4;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = sub_20B24E7D0(a2, v8, v9);
    *(_QWORD *)(a1 + 56) = v11;
  }
  if ((sub_20B24F8D8(a1) & 1) != 0)
    return a1;
  sub_20B24FAB8(a1, &v23);
  sub_20B24FBAC(a1, v22);
  v26[0] = (void **)v22;
  v26[1] = (void **)&v21;
  sub_20B27E2A8(v26);
  if (!v24)
    goto LABEL_16;
  v13 = *v24;
  v12 = (std::__shared_weak_count *)v24[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!v13)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v13)
LABEL_15:
    sub_20B289BEC((uint64_t)v24);
LABEL_16:
  v23 = &off_24C4169B8;
  v17 = v25;
  if (!v25)
    return a1;
  v18 = (unint64_t *)&v25->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20B24EEFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B24EF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_20B285900((uint64_t *)va);
  sub_20B24EF40(v6);
  _Unwind_Resume(a1);
}

void sub_20B24EF2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EF40(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B24EF40(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414820;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_20B24EFA4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t sub_20B24EFFC(uint64_t a1, unsigned int *a2, __int128 *a3)
{
  uint64_t v6;
  double v7;
  BOOL v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v19;
  uint64_t v20;
  uint64_t v21[3];
  uint64_t (**v22)();
  uint64_t *v23;
  std::__shared_weak_count *v24;
  size_t v25[2];

  *(_QWORD *)a1 = off_24C414820;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_20B24E3EC(0, 1, a2, a1 + 16);
  if (*a2)
    v8 = a2[1] == 0;
  else
    v8 = 1;
  if (v8)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = sub_20B24E7D0(0, v6, v7);
    *(_QWORD *)(a1 + 56) = v9;
  }
  v19 = *a3;
  v20 = *((_QWORD *)a3 + 2);
  if ((sub_20B24F8D8(a1) & 1) != 0)
    return a1;
  sub_20B24FAB8(a1, &v22);
  sub_20B24FBAC(a1, v21);
  v25[0] = (size_t)&v19;
  v25[1] = (size_t)v21;
  sub_20AFC3DF8(v25);
  if (!v23)
    goto LABEL_16;
  v11 = *v23;
  v10 = (std::__shared_weak_count *)v23[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (!v11)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v11)
LABEL_15:
    sub_20B289BEC((uint64_t)v23);
LABEL_16:
  v22 = &off_24C4169B8;
  v15 = v24;
  if (!v24)
    return a1;
  v16 = (unint64_t *)&v24->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20B24F198(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B24F1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_20B285900((uint64_t *)va);
  sub_20B24EF40(v8);
  _Unwind_Resume(a1);
}

void sub_20B24F1C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EF40(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B24F1DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;

  *(_QWORD *)a1 = off_24C414820;
  v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_7:
    v4 = *(uint64_t **)(a2 + 8);
    if (v6)
      goto LABEL_8;
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v4 = *(uint64_t **)(a2 + 8);
  if (!v6)
    goto LABEL_12;
LABEL_8:
  v10 = *((_DWORD *)v4 + 4);
  if (v10 == 2)
    v11 = 2;
  else
    v11 = v10 == 1;
LABEL_13:
  *(_QWORD *)(a1 + 16) = &off_24C4169B8;
  *(_DWORD *)(a1 + 8) = v11;
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = sub_20B24F414(a2);
  *(_QWORD *)(a1 + 56) = v15;
  v16 = *(_QWORD *)(a2 + 8);
  if (!v16)
  {
    v23 = 0;
    goto LABEL_31;
  }
  v17 = *(std::__shared_weak_count **)(v16 + 8);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v21 = *(uint64_t **)(a2 + 8);
      if (v21)
        goto LABEL_23;
LABEL_35:
      v23 = 0;
      if (!*(_DWORD *)(a1 + 48))
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  v21 = *(uint64_t **)(a2 + 8);
  if (!v21)
    goto LABEL_35;
LABEL_23:
  v23 = *v21;
  v22 = (std::__shared_weak_count *)v21[1];
  if (!v22)
    goto LABEL_31;
  v24 = (unint64_t *)&v22->__shared_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  do
    v26 = __ldaxr(v24);
  while (__stlxr(v26 - 1, v24));
  if (v26)
  {
LABEL_31:
    if (!*(_DWORD *)(a1 + 48))
      goto LABEL_36;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  if (!*(_DWORD *)(a1 + 48))
  {
LABEL_36:
    if (!v23)
      return a1;
    goto LABEL_37;
  }
LABEL_32:
  if ((v23 == 0) == (*(_DWORD *)(a1 + 52) == 0))
    return a1;
LABEL_37:
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return a1;
}

void sub_20B24F400(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20B24F414(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v8 = sub_20B286A40(a1);
  v9 = sub_20B286B78(a1);
  sub_20B286CB0(a1);
  return v8 | ((unint64_t)v9 << 32);
}

void sub_20B24F504(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C4169B8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
  sub_20B286DE8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C41E150;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C4169B8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20B24F740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B24F754(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24C4169B8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

uint64_t sub_20B24F8D8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B24FAB8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[2];
  std::__shared_weak_count *v9;

  v3 = a1 + 16;
  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    sub_20B2857F4(a2, v3);
  }
  else if (v4 > 1)
  {
    if (v4 != 3)
      sub_20AECFAB8();
    sub_20B24EC14((uint64_t *)(a1 + 16), v8);
    sub_20B2856E8(a2, (uint64_t)v8);
    v8[0] = &off_24C4169B8;
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    sub_20B2856E8(a2, v3);
  }
}

void sub_20B24FB98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B24FBAC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_20B24F8D8(a1))
  {
    if (*(_DWORD *)(a1 + 52))
      v4 = *(_DWORD *)(a1 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a1 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a2 = 0;
    a2[1] = v5;
    a2[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a1 + 24);
        v7 = *(std::__shared_weak_count **)(a1 + 32);
        v30 = &off_24C4169B8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a1 + 24);
        v15 = *(std::__shared_weak_count **)(a1 + 32);
        v30 = &off_24C4169B8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a1 + 24);
        v11 = *(std::__shared_weak_count **)(a1 + 32);
        v30 = &off_24C4169B8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a1 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a1 + 16);
          v30 = &off_24C4169B8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B24EAB8((uint64_t)&v30, a2);
    v30 = &off_24C4169B8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20B24FDE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B24FDF8(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20B2854CC(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20B2853C0(a1, (uint64_t)v4);
      return;
    case 3:
      sub_20B24EC14(v4, v9);
      sub_20B2853C0(a1, (uint64_t)v9);
      v9[0] = &off_24C4169B8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B24FEDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B24FEF0(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v6;
  BOOL v7;
  unsigned int v8;
  std::__shared_weak_count *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  __int128 v33;
  uint64_t (**v34)();
  __int128 v35;

  v6 = (unsigned int *)(a3 + 24);
  if (*(_DWORD *)(a3 + 24))
    v7 = *(_DWORD *)(a3 + 28) == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (a1 == 3)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 24) = 3;
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = &off_24C4169B8;
      *(_DWORD *)(a4 + 24) = 0;
    }
  }
  else
  {
    if ((a2 - 1) > 0x25)
      v8 = 0;
    else
      v8 = dword_20B5F1924[a2 - 1] | dword_20B5F188C[a2 - 1];
    __p = operator new(0x68uLL);
    v33 = xmmword_20B5EE7A0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20B285ED4((uint64_t)&v34, v6, v8, (uint64_t *)&__p, 0);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    switch(a1)
    {
      case 1:
        v10 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        if ((_QWORD)v10)
        {
          v14 = *(_QWORD *)v10;
          v13 = *(std::__shared_weak_count **)(v10 + 8);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          if (v14)
            sub_20B289920(v10);
        }
        *(_OWORD *)(a4 + 8) = v10;
        *(_QWORD *)a4 = &off_24C416978;
        *(_DWORD *)(a4 + 24) = 1;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 2:
        v18 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        if ((_QWORD)v18)
        {
          v22 = *(_QWORD *)v18;
          v21 = *(std::__shared_weak_count **)(v18 + 8);
          if (v21)
          {
            v23 = (unint64_t *)&v21->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            do
              v25 = __ldaxr(v23);
            while (__stlxr(v25 - 1, v23));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (v22)
            sub_20B289A10(v18);
        }
        *(_OWORD *)(a4 + 8) = v18;
        *(_QWORD *)a4 = &off_24C416998;
        *(_DWORD *)(a4 + 24) = 2;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 3:
        v26 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 16);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          do
            v29 = __ldxr(v27);
          while (__stxr(v29 + 1, v27));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
        }
        *(_OWORD *)a4 = v26;
        *(_DWORD *)(a4 + 24) = 3;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      default:
        *(_QWORD *)a4 = &off_24C4169B8;
        *(_OWORD *)(a4 + 8) = v35;
        v35 = 0uLL;
        *(_DWORD *)(a4 + 24) = 0;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
        {
LABEL_51:
          v30 = (unint64_t *)&v9->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        break;
    }
  }
}

void sub_20B250250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a4);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B2502B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B2502D4(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t (**v26)();
  uint64_t *v27;
  std::__shared_weak_count *v28;
  char v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24))
        goto LABEL_39;
      v4 = *(uint64_t **)(a2 + 8);
      v5 = *(std::__shared_weak_count **)(a2 + 16);
      v27 = v4;
      v28 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v26 = &off_24C416978;
      if (v4)
      {
        v9 = *v4;
        v8 = (std::__shared_weak_count *)v4[1];
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
          do
            v12 = __ldaxr(v10);
          while (__stlxr(v12 - 1, v10));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        if (v9)
          sub_20B289920((uint64_t)v27);
      }
      sub_20B2505B0((uint64_t)v29, (uint64_t)&v26);
      v13 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v13;
      *(_QWORD *)(a3 + 32) = v32;
      if (v27)
      {
        v15 = *v27;
        v14 = (std::__shared_weak_count *)v27[1];
        if (v14)
        {
          v16 = (unint64_t *)&v14->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
          do
            v18 = __ldaxr(v16);
          while (__stlxr(v18 - 1, v16));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        if (v15)
          sub_20B289AFC((uint64_t)v27);
      }
      v26 = &off_24C4169B8;
      v19 = v28;
      if (!v28)
        return;
      v20 = (unint64_t *)&v28->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (v21)
        return;
      goto LABEL_38;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1)
        goto LABEL_39;
      goto LABEL_32;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2)
        goto LABEL_39;
LABEL_32:
      sub_20B2505B0((uint64_t)v29, a2);
      v22 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v22;
      *(_QWORD *)(a3 + 32) = v32;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3)
LABEL_39:
        sub_20AECFAB8();
      sub_20B250784(&v26, (uint64_t *)a2);
      sub_20B2505B0((uint64_t)v29, (uint64_t)&v26);
      v23 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v23;
      *(_QWORD *)(a3 + 32) = v32;
      v26 = &off_24C4169B8;
      v19 = v28;
      if (v28)
      {
        v24 = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
LABEL_38:
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      break;
    default:
      return;
  }
}

void sub_20B250588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25059C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_20B2505B0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20B28523C(a2, 0);
  v11 = sub_20B286A40(a2);
  v12 = sub_20B286B78(a2);
  result = sub_20B286CB0(a2);
  v14 = v11;
  v15 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  HIDWORD(v18) = v17;
  LODWORD(v18) = 2;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v18;
  *(_DWORD *)(a1 + 16) = HIDWORD(v17);
  *(_QWORD *)(a1 + 20) = 0x200000001;
  *(_DWORD *)(a1 + 28) = result;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = (result << 32) | 2;
  if (HIDWORD(v17) * (_DWORD)result == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_20B250784(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C4169B8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C4169B8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_20B532360);
    abort();
  }
}

void sub_20B2508C8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B285E60(v1);
  _Unwind_Resume(a1);
}

void sub_20B2508DC(uint64_t a1, _BYTE *a2)
{
  int v4;
  uint64_t v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _BYTE *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t (**v28)();
  uint64_t *v29;
  std::__shared_weak_count *v30;
  _QWORD v31[2];

  if ((sub_20B25149C(a1) & 1) != 0)
    return;
  sub_20B25167C(&v28, a1);
  sub_20B251770((uint64_t)&v21, a1);
  v31[0] = &v21;
  v31[1] = a2;
  if (v25 == 1)
  {
    sub_20B27E420(v31);
  }
  else if (v22 && v23 && v24)
  {
    v4 = v23 - 1;
    v5 = v26;
    v6 = v21;
    v7 = v24 - 1;
    if (v24 != 1)
    {
      v8 = v27;
      if (v23 == 1)
      {
        do
        {
          *v6 = *a2;
          v6[1] = *a2;
          v6 += v8;
          --v7;
        }
        while (v7);
      }
      else
      {
        v9 = 0;
        v10 = v21 + 1;
        do
        {
          v11 = v10;
          v12 = v4;
          do
          {
            *(v11 - 1) = *a2;
            *v11 = *a2;
            v11 += v5;
            --v12;
          }
          while (v12);
          *(v11 - 1) = *a2;
          *v11 = *a2;
          v6 += v8;
          ++v9;
          v10 += v8;
        }
        while (v9 != v7);
      }
    }
    for (; v4; --v4)
    {
      *v6 = *a2;
      v6[1] = *a2;
      v6 += v5;
    }
    *v6 = *a2;
    v6[1] = *a2;
  }
  if (v29)
  {
    v14 = *v29;
    v13 = (std::__shared_weak_count *)v29[1];
    if (!v13)
      goto LABEL_24;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (v17)
    {
LABEL_24:
      if (!v14)
        goto LABEL_26;
      goto LABEL_25;
    }
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v14)
LABEL_25:
      sub_20B289BEC((uint64_t)v29);
  }
LABEL_26:
  v28 = &off_24C4169B8;
  v18 = v30;
  if (v30)
  {
    v19 = (unint64_t *)&v30->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20B250AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B285900((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B250AF4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C4148B0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_20B250B58(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _OWORD v21[3];
  _BYTE v22[48];
  uint64_t (**v23)();
  uint64_t *v24;
  std::__shared_weak_count *v25;
  size_t v26[2];

  *(_QWORD *)a1 = off_24C4148B0;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_20B24FEF0(0, 5, a2, a1 + 16);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_20B2502D4(0, v6, (uint64_t)v7);
  }
  v11 = a3[1];
  v21[0] = *a3;
  v21[1] = v11;
  v21[2] = a3[2];
  if ((sub_20B25149C(a1) & 1) != 0)
    return a1;
  sub_20B25167C(&v23, a1);
  sub_20B251770((uint64_t)v22, a1);
  v26[0] = (size_t)v21;
  v26[1] = (size_t)v22;
  sub_20AFE5C6C(v26);
  if (!v24)
    goto LABEL_16;
  v13 = *v24;
  v12 = (std::__shared_weak_count *)v24[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!v13)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v13)
LABEL_15:
    sub_20B289BEC((uint64_t)v24);
LABEL_16:
  v23 = &off_24C4169B8;
  v17 = v25;
  if (!v25)
    return a1;
  v18 = (unint64_t *)&v25->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20B250CF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B250D0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20B285900((_QWORD *)(v2 - 72));
  sub_20B250AF4(v1);
  _Unwind_Resume(a1);
}

void sub_20B250D28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B250AF4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B250D3C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;

  *(_QWORD *)a1 = off_24C4148B0;
  v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_7:
    v4 = *(uint64_t **)(a2 + 8);
    if (v6)
      goto LABEL_8;
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v4 = *(uint64_t **)(a2 + 8);
  if (!v6)
    goto LABEL_12;
LABEL_8:
  v10 = *((_DWORD *)v4 + 4);
  if (v10 == 2)
    v11 = 2;
  else
    v11 = v10 == 1;
LABEL_13:
  *(_QWORD *)(a1 + 16) = &off_24C4169B8;
  *(_DWORD *)(a1 + 8) = v11;
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 40) = 0;
  sub_20B250F74(a2, a1 + 48);
  v15 = *(_QWORD *)(a2 + 8);
  if (!v15)
  {
    v22 = 0;
    goto LABEL_31;
  }
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      v20 = *(uint64_t **)(a2 + 8);
      if (v20)
        goto LABEL_23;
LABEL_35:
      v22 = 0;
      if (!*(_DWORD *)(a1 + 72))
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  v20 = *(uint64_t **)(a2 + 8);
  if (!v20)
    goto LABEL_35;
LABEL_23:
  v22 = *v20;
  v21 = (std::__shared_weak_count *)v20[1];
  if (!v21)
    goto LABEL_31;
  v23 = (unint64_t *)&v21->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 - 1, v23));
  if (v25)
  {
LABEL_31:
    if (!*(_DWORD *)(a1 + 72))
      goto LABEL_36;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_36:
    if (!v22)
      return a1;
    goto LABEL_37;
  }
LABEL_32:
  if ((v22 == 0) == (*(_DWORD *)(a1 + 76) == 0))
    return a1;
LABEL_37:
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return a1;
}

void sub_20B250F60(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

size_t sub_20B250F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  size_t result;
  unint64_t v13;
  uint64_t v14;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v10 = sub_20B286A40(a1);
  v11 = sub_20B286B78(a1);
  result = sub_20B286CB0(a1);
  v13 = v10 | ((unint64_t)v11 << 32);
  LODWORD(v14) = 2;
  HIDWORD(v14) = v13;
  *(_QWORD *)a2 = v14;
  *(_DWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 12) = 0x200000001;
  *(_DWORD *)(a2 + 20) = result;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = (result << 32) | 2;
  return result;
}

void sub_20B2510C8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C4169B8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
  sub_20B286DE8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C41E150;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C4169B8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20B251304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B251318(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24C4169B8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

uint64_t sub_20B25149C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B25167C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20B2857F4(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_20AECFAB8();
    sub_20B250784(v9, v4);
    sub_20B2856E8(a1, (uint64_t)v9);
    v9[0] = &off_24C4169B8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20B2856E8(a1, (uint64_t)v4);
  }
}

void sub_20B25175C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B251770(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20B25149C(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 2;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(DWORD1(v34), 2);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24C4169B8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B2505B0(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C4169B8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B2519D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B2519E8(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20B2854CC(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20B2853C0(a1, (uint64_t)v4);
      return;
    case 3:
      sub_20B250784(v9, v4);
      sub_20B2853C0(a1, (uint64_t)v9);
      v9[0] = &off_24C4169B8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B251AC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B251ADC(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v6;
  BOOL v7;
  unsigned int v8;
  std::__shared_weak_count *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  __int128 v33;
  uint64_t (**v34)();
  __int128 v35;

  v6 = (unsigned int *)(a3 + 24);
  if (*(_DWORD *)(a3 + 24))
    v7 = *(_DWORD *)(a3 + 28) == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (a1 == 3)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 24) = 3;
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = &off_24C4169B8;
      *(_DWORD *)(a4 + 24) = 0;
    }
  }
  else
  {
    if ((a2 - 1) > 0x25)
      v8 = 0;
    else
      v8 = dword_20B5F1924[a2 - 1] | dword_20B5F188C[a2 - 1];
    __p = operator new(0x68uLL);
    v33 = xmmword_20B5EE7A0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20B285ED4((uint64_t)&v34, v6, v8, (uint64_t *)&__p, 0);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    switch(a1)
    {
      case 1:
        v10 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        if ((_QWORD)v10)
        {
          v14 = *(_QWORD *)v10;
          v13 = *(std::__shared_weak_count **)(v10 + 8);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          if (v14)
            sub_20B289920(v10);
        }
        *(_OWORD *)(a4 + 8) = v10;
        *(_QWORD *)a4 = &off_24C416978;
        *(_DWORD *)(a4 + 24) = 1;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 2:
        v18 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        if ((_QWORD)v18)
        {
          v22 = *(_QWORD *)v18;
          v21 = *(std::__shared_weak_count **)(v18 + 8);
          if (v21)
          {
            v23 = (unint64_t *)&v21->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            do
              v25 = __ldaxr(v23);
            while (__stlxr(v25 - 1, v23));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (v22)
            sub_20B289A10(v18);
        }
        *(_OWORD *)(a4 + 8) = v18;
        *(_QWORD *)a4 = &off_24C416998;
        *(_DWORD *)(a4 + 24) = 2;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 3:
        v26 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 16);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          do
            v29 = __ldxr(v27);
          while (__stxr(v29 + 1, v27));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
        }
        *(_OWORD *)a4 = v26;
        *(_DWORD *)(a4 + 24) = 3;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      default:
        *(_QWORD *)a4 = &off_24C4169B8;
        *(_OWORD *)(a4 + 8) = v35;
        v35 = 0uLL;
        *(_DWORD *)(a4 + 24) = 0;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
        {
LABEL_51:
          v30 = (unint64_t *)&v9->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        break;
    }
  }
}

void sub_20B251E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a4);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B251EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B251EC0(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t (**v26)();
  uint64_t *v27;
  std::__shared_weak_count *v28;
  char v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24))
        goto LABEL_39;
      v4 = *(uint64_t **)(a2 + 8);
      v5 = *(std::__shared_weak_count **)(a2 + 16);
      v27 = v4;
      v28 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v26 = &off_24C416978;
      if (v4)
      {
        v9 = *v4;
        v8 = (std::__shared_weak_count *)v4[1];
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
          do
            v12 = __ldaxr(v10);
          while (__stlxr(v12 - 1, v10));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        if (v9)
          sub_20B289920((uint64_t)v27);
      }
      sub_20B2521A0((uint64_t)&v26, (uint64_t)v29);
      v13 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v13;
      *(_QWORD *)(a3 + 32) = v32;
      if (v27)
      {
        v15 = *v27;
        v14 = (std::__shared_weak_count *)v27[1];
        if (v14)
        {
          v16 = (unint64_t *)&v14->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
          do
            v18 = __ldaxr(v16);
          while (__stlxr(v18 - 1, v16));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        if (v15)
          sub_20B289AFC((uint64_t)v27);
      }
      v26 = &off_24C4169B8;
      v19 = v28;
      if (!v28)
        return;
      v20 = (unint64_t *)&v28->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (v21)
        return;
      goto LABEL_38;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1)
        goto LABEL_39;
      goto LABEL_32;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2)
        goto LABEL_39;
LABEL_32:
      sub_20B2521A0(a2, (uint64_t)v29);
      v22 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v22;
      *(_QWORD *)(a3 + 32) = v32;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3)
LABEL_39:
        sub_20AECFAB8();
      sub_20B252374(&v26, (uint64_t *)a2);
      sub_20B2521A0((uint64_t)&v26, (uint64_t)v29);
      v23 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v23;
      *(_QWORD *)(a3 + 32) = v32;
      v26 = &off_24C4169B8;
      v19 = v28;
      if (v28)
      {
        v24 = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
LABEL_38:
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      break;
    default:
      return;
  }
}

void sub_20B252178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25218C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_20B2521A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20B28523C(a1, 0);
  v11 = sub_20B286A40(a1);
  v12 = sub_20B286B78(a1);
  result = sub_20B286CB0(a1);
  v14 = v11;
  v15 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  HIDWORD(v18) = v17;
  LODWORD(v18) = 3;
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v18;
  *(_DWORD *)(a2 + 16) = HIDWORD(v17);
  *(_QWORD *)(a2 + 20) = 0x300000001;
  *(_DWORD *)(a2 + 28) = result;
  *(_QWORD *)(a2 + 32) = v17;
  *(_QWORD *)(a2 + 40) = (result << 32) | 3;
  if (HIDWORD(v17) * (_DWORD)result == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_20B252374(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C4169B8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C4169B8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_20B532360);
    abort();
  }
}

void sub_20B2524B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B285E60(v1);
  _Unwind_Resume(a1);
}

void sub_20B2524CC(uint64_t a1, _BYTE *a2)
{
  int v4;
  uint64_t v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _BYTE *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t (**v28)();
  uint64_t *v29;
  std::__shared_weak_count *v30;
  _QWORD v31[2];

  if ((sub_20B2531F4(a1) & 1) != 0)
    return;
  sub_20B2533D4(&v28, a1);
  sub_20B2534C8((uint64_t)&v21, a1);
  v31[0] = &v21;
  v31[1] = a2;
  if (v25 == 1)
  {
    sub_20B27E420(v31);
  }
  else if (v22 && v23 && v24)
  {
    v4 = v23 - 1;
    v5 = v26;
    v6 = v21;
    v7 = v24 - 1;
    if (v24 != 1)
    {
      v8 = v27;
      if (v23 == 1)
      {
        do
        {
          *v6 = *a2;
          v6[1] = *a2;
          v6[2] = *a2;
          v6 += v8;
          --v7;
        }
        while (v7);
      }
      else
      {
        v9 = 0;
        v10 = v21 + 2;
        do
        {
          v11 = v10;
          v12 = v4;
          do
          {
            *(v11 - 2) = *a2;
            *(v11 - 1) = *a2;
            *v11 = *a2;
            v11 += v5;
            --v12;
          }
          while (v12);
          *(v11 - 2) = *a2;
          *(v11 - 1) = *a2;
          *v11 = *a2;
          v6 += v8;
          ++v9;
          v10 += v8;
        }
        while (v9 != v7);
      }
    }
    for (; v4; --v4)
    {
      *v6 = *a2;
      v6[1] = *a2;
      v6[2] = *a2;
      v6 += v5;
    }
    *v6 = *a2;
    v6[1] = *a2;
    v6[2] = *a2;
  }
  if (v29)
  {
    v14 = *v29;
    v13 = (std::__shared_weak_count *)v29[1];
    if (!v13)
      goto LABEL_24;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (v17)
    {
LABEL_24:
      if (!v14)
        goto LABEL_26;
      goto LABEL_25;
    }
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v14)
LABEL_25:
      sub_20B289BEC((uint64_t)v29);
  }
LABEL_26:
  v28 = &off_24C4169B8;
  v18 = v30;
  if (v30)
  {
    v19 = (unint64_t *)&v30->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20B2526F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B285900((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B25270C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414940;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_20B252770(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  int v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD v38[2];
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t (**v42)();
  uint64_t *v43;
  std::__shared_weak_count *v44;
  size_t v45[2];

  *(_QWORD *)a1 = off_24C414940;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_20B251ADC(0, 21, a2, a1 + 16);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_20B251EC0(0, v6, (uint64_t)v7);
  }
  v11 = a3[1];
  v35 = *a3;
  v36 = v11;
  v37 = a3[2];
  if ((sub_20B2531F4(a1) & 1) != 0)
    return a1;
  sub_20B2533D4(&v42, a1);
  sub_20B2534C8((uint64_t)v38, a1);
  v45[0] = (size_t)&v35;
  v45[1] = (size_t)v38;
  if (DWORD1(v36) == 1 && v39 == 1)
  {
    sub_20AFE5D88(v45);
  }
  else if (DWORD2(v35) && HIDWORD(v35) && (_DWORD)v36)
  {
    v12 = HIDWORD(v35) - 1;
    v13 = DWORD2(v36);
    v14 = v40;
    v15 = (_BYTE *)v35;
    v16 = (_BYTE *)v38[0];
    v17 = v36 - 1;
    if ((_DWORD)v36 != 1)
    {
      v18 = v41;
      v19 = HIDWORD(v36);
      if (HIDWORD(v35) == 1)
      {
        do
        {
          *v16 = *v15;
          v16[1] = v15[1];
          v16[2] = v15[2];
          v15 += v19;
          v16 += v18;
          --v17;
        }
        while (v17);
      }
      else
      {
        v20 = 0;
        v21 = v38[0] + 2;
        v22 = (_BYTE *)(v35 + 2);
        do
        {
          v23 = v22;
          v24 = (_BYTE *)v21;
          v25 = v12;
          do
          {
            *(v24 - 2) = *(v23 - 2);
            *(v24 - 1) = *(v23 - 1);
            *v24 = *v23;
            v24 += v14;
            v23 += v13;
            --v25;
          }
          while (v25);
          *(v24 - 2) = *(v23 - 2);
          *(v24 - 1) = *(v23 - 1);
          *v24 = *v23;
          v15 += v19;
          v16 += v18;
          ++v20;
          v21 += v18;
          v22 += v19;
        }
        while (v20 != v17);
      }
    }
    for (; v12; --v12)
    {
      *v16 = *v15;
      v16[1] = v15[1];
      v16[2] = v15[2];
      v15 += v13;
      v16 += v14;
    }
    *v16 = *v15;
    v16[1] = v15[1];
    v16[2] = v15[2];
  }
  if (!v43)
    goto LABEL_33;
  v27 = *v43;
  v26 = (std::__shared_weak_count *)v43[1];
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      if (!v27)
        goto LABEL_33;
      goto LABEL_32;
    }
  }
  if (v27)
LABEL_32:
    sub_20B289BEC((uint64_t)v43);
LABEL_33:
  v42 = &off_24C4169B8;
  v31 = v44;
  if (!v44)
    return a1;
  v32 = (unint64_t *)&v44->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
    return a1;
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  return a1;
}

void sub_20B252A50(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B252A64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20B285900((_QWORD *)(v2 - 72));
  sub_20B25270C(v1);
  _Unwind_Resume(a1);
}

void sub_20B252A80(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B25270C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B252A94(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;

  *(_QWORD *)a1 = off_24C414940;
  v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_7:
    v4 = *(uint64_t **)(a2 + 8);
    if (v6)
      goto LABEL_8;
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v4 = *(uint64_t **)(a2 + 8);
  if (!v6)
    goto LABEL_12;
LABEL_8:
  v10 = *((_DWORD *)v4 + 4);
  if (v10 == 2)
    v11 = 2;
  else
    v11 = v10 == 1;
LABEL_13:
  *(_QWORD *)(a1 + 16) = &off_24C4169B8;
  *(_DWORD *)(a1 + 8) = v11;
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 40) = 0;
  sub_20B252CCC(a2, a1 + 48);
  v15 = *(_QWORD *)(a2 + 8);
  if (!v15)
  {
    v22 = 0;
    goto LABEL_31;
  }
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      v20 = *(uint64_t **)(a2 + 8);
      if (v20)
        goto LABEL_23;
LABEL_35:
      v22 = 0;
      if (!*(_DWORD *)(a1 + 72))
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  v20 = *(uint64_t **)(a2 + 8);
  if (!v20)
    goto LABEL_35;
LABEL_23:
  v22 = *v20;
  v21 = (std::__shared_weak_count *)v20[1];
  if (!v21)
    goto LABEL_31;
  v23 = (unint64_t *)&v21->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 - 1, v23));
  if (v25)
  {
LABEL_31:
    if (!*(_DWORD *)(a1 + 72))
      goto LABEL_36;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_36:
    if (!v22)
      return a1;
    goto LABEL_37;
  }
LABEL_32:
  if ((v22 == 0) == (*(_DWORD *)(a1 + 76) == 0))
    return a1;
LABEL_37:
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return a1;
}

void sub_20B252CB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

size_t sub_20B252CCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  size_t result;
  unint64_t v13;
  uint64_t v14;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v10 = sub_20B286A40(a1);
  v11 = sub_20B286B78(a1);
  result = sub_20B286CB0(a1);
  v13 = v10 | ((unint64_t)v11 << 32);
  LODWORD(v14) = 3;
  HIDWORD(v14) = v13;
  *(_QWORD *)a2 = v14;
  *(_DWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 12) = 0x300000001;
  *(_DWORD *)(a2 + 20) = result;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = (result << 32) | 3;
  return result;
}

void sub_20B252E20(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C4169B8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
  sub_20B286DE8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C41E150;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C4169B8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20B25305C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B253070(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24C4169B8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

uint64_t sub_20B2531F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B2533D4(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20B2857F4(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_20AECFAB8();
    sub_20B252374(v9, v4);
    sub_20B2856E8(a1, (uint64_t)v9);
    v9[0] = &off_24C4169B8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20B2856E8(a1, (uint64_t)v4);
  }
}

void sub_20B2534B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B2534C8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;

  if (sub_20B2531F4(a2))
  {
    sub_20B27E5CC(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 24);
        v4 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24C4169B8;
        v28 = v5;
        v29 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        break;
      case 1:
        v13 = *(_QWORD *)(a2 + 24);
        v12 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24C4169B8;
        v28 = v13;
        v29 = v12;
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        break;
      case 2:
        v9 = *(_QWORD *)(a2 + 24);
        v8 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24C4169B8;
        v28 = v9;
        v29 = v8;
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        break;
      case 3:
        v16 = *(std::__shared_weak_count **)(a2 + 24);
        if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
        {
          v18 = v17;
          v19 = *(_QWORD *)(a2 + 16);
          v27 = &off_24C4169B8;
          if (v19)
          {
            v28 = v19;
            v29 = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          else
          {
            v28 = 0;
            v29 = 0;
          }
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v27 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B2521A0((uint64_t)&v27, a1);
    v27 = &off_24C4169B8;
    v24 = v29;
    if (v29)
    {
      v25 = (unint64_t *)&v29->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_20B2536A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B2536BC(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20B2854CC(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20B2853C0(a1, (uint64_t)v4);
      return;
    case 3:
      sub_20B252374(v9, v4);
      sub_20B2853C0(a1, (uint64_t)v9);
      v9[0] = &off_24C4169B8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B25379C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B2537B0(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v6;
  BOOL v7;
  unsigned int v8;
  std::__shared_weak_count *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  __int128 v33;
  uint64_t (**v34)();
  __int128 v35;

  v6 = (unsigned int *)(a3 + 24);
  if (*(_DWORD *)(a3 + 24))
    v7 = *(_DWORD *)(a3 + 28) == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (a1 == 3)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 24) = 3;
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = &off_24C4169B8;
      *(_DWORD *)(a4 + 24) = 0;
    }
  }
  else
  {
    if ((a2 - 1) > 0x25)
      v8 = 0;
    else
      v8 = dword_20B5F1924[a2 - 1] | dword_20B5F188C[a2 - 1];
    __p = operator new(0x68uLL);
    v33 = xmmword_20B5EE7A0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20B285ED4((uint64_t)&v34, v6, v8, (uint64_t *)&__p, 0);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    switch(a1)
    {
      case 1:
        v10 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        if ((_QWORD)v10)
        {
          v14 = *(_QWORD *)v10;
          v13 = *(std::__shared_weak_count **)(v10 + 8);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          if (v14)
            sub_20B289920(v10);
        }
        *(_OWORD *)(a4 + 8) = v10;
        *(_QWORD *)a4 = &off_24C416978;
        *(_DWORD *)(a4 + 24) = 1;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 2:
        v18 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        if ((_QWORD)v18)
        {
          v22 = *(_QWORD *)v18;
          v21 = *(std::__shared_weak_count **)(v18 + 8);
          if (v21)
          {
            v23 = (unint64_t *)&v21->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            do
              v25 = __ldaxr(v23);
            while (__stlxr(v25 - 1, v23));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (v22)
            sub_20B289A10(v18);
        }
        *(_OWORD *)(a4 + 8) = v18;
        *(_QWORD *)a4 = &off_24C416998;
        *(_DWORD *)(a4 + 24) = 2;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 3:
        v26 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 16);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          do
            v29 = __ldxr(v27);
          while (__stxr(v29 + 1, v27));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
        }
        *(_OWORD *)a4 = v26;
        *(_DWORD *)(a4 + 24) = 3;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      default:
        *(_QWORD *)a4 = &off_24C4169B8;
        *(_OWORD *)(a4 + 8) = v35;
        v35 = 0uLL;
        *(_DWORD *)(a4 + 24) = 0;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
        {
LABEL_51:
          v30 = (unint64_t *)&v9->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        break;
    }
  }
}

void sub_20B253B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a4);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B253B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B253B94(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t (**v26)();
  uint64_t *v27;
  std::__shared_weak_count *v28;
  char v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24))
        goto LABEL_39;
      v4 = *(uint64_t **)(a2 + 8);
      v5 = *(std::__shared_weak_count **)(a2 + 16);
      v27 = v4;
      v28 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v26 = &off_24C416978;
      if (v4)
      {
        v9 = *v4;
        v8 = (std::__shared_weak_count *)v4[1];
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
          do
            v12 = __ldaxr(v10);
          while (__stlxr(v12 - 1, v10));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        if (v9)
          sub_20B289920((uint64_t)v27);
      }
      sub_20B253E70((uint64_t)v29, (uint64_t)&v26);
      v13 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v13;
      *(_QWORD *)(a3 + 32) = v32;
      if (v27)
      {
        v15 = *v27;
        v14 = (std::__shared_weak_count *)v27[1];
        if (v14)
        {
          v16 = (unint64_t *)&v14->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
          do
            v18 = __ldaxr(v16);
          while (__stlxr(v18 - 1, v16));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        if (v15)
          sub_20B289AFC((uint64_t)v27);
      }
      v26 = &off_24C4169B8;
      v19 = v28;
      if (!v28)
        return;
      v20 = (unint64_t *)&v28->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (v21)
        return;
      goto LABEL_38;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1)
        goto LABEL_39;
      goto LABEL_32;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2)
        goto LABEL_39;
LABEL_32:
      sub_20B253E70((uint64_t)v29, a2);
      v22 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v22;
      *(_QWORD *)(a3 + 32) = v32;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3)
LABEL_39:
        sub_20AECFAB8();
      sub_20B254044(&v26, (uint64_t *)a2);
      sub_20B253E70((uint64_t)v29, (uint64_t)&v26);
      v23 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v23;
      *(_QWORD *)(a3 + 32) = v32;
      v26 = &off_24C4169B8;
      v19 = v28;
      if (v28)
      {
        v24 = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
LABEL_38:
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      break;
    default:
      return;
  }
}

void sub_20B253E48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B253E5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_20B253E70(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20B28523C(a2, 0);
  v11 = sub_20B286A40(a2);
  v12 = sub_20B286B78(a2);
  result = sub_20B286CB0(a2);
  v14 = v11;
  v15 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  HIDWORD(v18) = v17;
  LODWORD(v18) = 4;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v18;
  *(_DWORD *)(a1 + 16) = HIDWORD(v17);
  *(_QWORD *)(a1 + 20) = 0x400000001;
  *(_DWORD *)(a1 + 28) = result;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = (result << 32) | 4;
  if (HIDWORD(v17) * (_DWORD)result == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_20B254044(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C4169B8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C4169B8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_20B532360);
    abort();
  }
}

void sub_20B254188(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B285E60(v1);
  _Unwind_Resume(a1);
}

void sub_20B25419C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t (**v19)();
  uint64_t *v20;
  std::__shared_weak_count *v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t *v24;
  _DWORD v25[7];
  _QWORD v26[2];

  if ((sub_20B254D2C(a1) & 1) != 0)
    return;
  sub_20B254F0C(&v19, a1);
  sub_20B255000((uint64_t)&v12, a1);
  v22[0] = &v12;
  v22[1] = a2;
  if (v16 == 1)
  {
    sub_20B27E420(v22);
  }
  else
  {
    v23 = a2;
    if (v13 && v14 && v15)
    {
      v24 = &v23;
      v25[0] = 0;
      v25[1] = v13 - 1;
      v25[2] = v16;
      v25[3] = v14 - 1;
      v25[4] = v17;
      v25[5] = v15 - 1;
      v25[6] = v18;
      v26[0] = 0;
      v26[1] = 0;
      sub_20B27E6E4(v25, (uint64_t)v26, (_BYTE ***)&v24, v12);
    }
  }
  if (v20)
  {
    v5 = *v20;
    v4 = (std::__shared_weak_count *)v20[1];
    if (!v4)
      goto LABEL_14;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (v8)
    {
LABEL_14:
      if (!v5)
        goto LABEL_16;
      goto LABEL_15;
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
LABEL_15:
      sub_20B289BEC((uint64_t)v20);
  }
LABEL_16:
  v19 = &off_24C4169B8;
  v9 = v21;
  if (v21)
  {
    v10 = (unint64_t *)&v21->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B254328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B285900((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B25433C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C4149D0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_20B2543A0(uint64_t a1, int a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  _OWORD *v8;
  BOOL v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[20];
  int v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  size_t v30[2];
  char v31;
  char *v32;

  *(_QWORD *)a1 = off_24C4149D0;
  *(_DWORD *)(a1 + 8) = 0;
  v7 = a1 + 16;
  sub_20B2537B0(0, a2, a3, a1 + 16);
  v8 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a3 + 24))
    v9 = *(_DWORD *)(a3 + 28) == 0;
  else
    v9 = 1;
  if (v9)
  {
    v10 = *(_OWORD *)a3;
    v11 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a3 + 32);
    *v8 = v10;
    *(_OWORD *)(a1 + 64) = v11;
  }
  else
  {
    sub_20B253B94(0, v7, (uint64_t)v8);
  }
  v12 = a4[1];
  v22 = *a4;
  v23 = v12;
  v24 = a4[2];
  if ((sub_20B254D2C(a1) & 1) != 0)
    return a1;
  sub_20B254F0C(&v27, a1);
  sub_20B255000((uint64_t)v25, a1);
  v30[0] = (size_t)&v22;
  v30[1] = (size_t)v25;
  if (DWORD1(v23) == 1 && v26 == 1)
  {
    sub_20AFE5D88(v30);
  }
  else
  {
    v31 = 0;
    if (DWORD2(v22) && HIDWORD(v22) && (_DWORD)v23)
    {
      v32 = &v31;
      sub_20AFEA3E0((uint64_t)&v32, (uint64_t)&v22, (uint64_t)v25);
    }
  }
  if (!v28)
    goto LABEL_23;
  v14 = *v28;
  v13 = (std::__shared_weak_count *)v28[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (!v14)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  if (v14)
LABEL_22:
    sub_20B289BEC((uint64_t)v28);
LABEL_23:
  v27 = &off_24C4169B8;
  v18 = v29;
  if (!v29)
    return a1;
  v19 = (unint64_t *)&v29->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_20B254588(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B25459C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20B285900((_QWORD *)(v2 - 88));
  sub_20B25433C(v1);
  _Unwind_Resume(a1);
}

void sub_20B2545B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B25433C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B2545CC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;

  *(_QWORD *)a1 = off_24C4149D0;
  v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_7:
    v4 = *(uint64_t **)(a2 + 8);
    if (v6)
      goto LABEL_8;
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v4 = *(uint64_t **)(a2 + 8);
  if (!v6)
    goto LABEL_12;
LABEL_8:
  v10 = *((_DWORD *)v4 + 4);
  if (v10 == 2)
    v11 = 2;
  else
    v11 = v10 == 1;
LABEL_13:
  *(_QWORD *)(a1 + 16) = &off_24C4169B8;
  *(_DWORD *)(a1 + 8) = v11;
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 40) = 0;
  sub_20B254804(a2, a1 + 48);
  v15 = *(_QWORD *)(a2 + 8);
  if (!v15)
  {
    v22 = 0;
    goto LABEL_31;
  }
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      v20 = *(uint64_t **)(a2 + 8);
      if (v20)
        goto LABEL_23;
LABEL_35:
      v22 = 0;
      if (!*(_DWORD *)(a1 + 72))
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  v20 = *(uint64_t **)(a2 + 8);
  if (!v20)
    goto LABEL_35;
LABEL_23:
  v22 = *v20;
  v21 = (std::__shared_weak_count *)v20[1];
  if (!v21)
    goto LABEL_31;
  v23 = (unint64_t *)&v21->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 - 1, v23));
  if (v25)
  {
LABEL_31:
    if (!*(_DWORD *)(a1 + 72))
      goto LABEL_36;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_36:
    if (!v22)
      return a1;
    goto LABEL_37;
  }
LABEL_32:
  if ((v22 == 0) == (*(_DWORD *)(a1 + 76) == 0))
    return a1;
LABEL_37:
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return a1;
}

void sub_20B2547F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

size_t sub_20B254804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  size_t result;
  unint64_t v13;
  uint64_t v14;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v10 = sub_20B286A40(a1);
  v11 = sub_20B286B78(a1);
  result = sub_20B286CB0(a1);
  v13 = v10 | ((unint64_t)v11 << 32);
  LODWORD(v14) = 4;
  HIDWORD(v14) = v13;
  *(_QWORD *)a2 = v14;
  *(_DWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 12) = 0x400000001;
  *(_DWORD *)(a2 + 20) = result;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = (result << 32) | 4;
  return result;
}

void sub_20B254958(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C4169B8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
  sub_20B286DE8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C41E150;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C4169B8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20B254B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B254BA8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24C4169B8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

uint64_t sub_20B254D2C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B254F0C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20B2857F4(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_20AECFAB8();
    sub_20B254044(v9, v4);
    sub_20B2856E8(a1, (uint64_t)v9);
    v9[0] = &off_24C4169B8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20B2856E8(a1, (uint64_t)v4);
  }
}

void sub_20B254FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B255000(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20B254D2C(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24C4169B8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B253E70(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C4169B8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B255264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B255278(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20B2854CC(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20B2853C0(a1, (uint64_t)v4);
      return;
    case 3:
      sub_20B254044(v9, v4);
      sub_20B2853C0(a1, (uint64_t)v9);
      v9[0] = &off_24C4169B8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B255358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25536C(int a1@<W0>, int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v6;
  unsigned int v8;
  std::__shared_weak_count *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  __int128 v33;
  uint64_t (**v34)();
  __int128 v35;

  if (*a3)
    v6 = a3[1] == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (a1 == 3)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 24) = 3;
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = &off_24C4169B8;
      *(_DWORD *)(a4 + 24) = 0;
    }
  }
  else
  {
    if ((a2 - 1) > 0x25)
      v8 = 0;
    else
      v8 = dword_20B5F1924[a2 - 1] | dword_20B5F188C[a2 - 1];
    __p = operator new(0x68uLL);
    v33 = xmmword_20B5EE7A0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20B285ED4((uint64_t)&v34, a3, v8, (uint64_t *)&__p, 0);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    switch(a1)
    {
      case 1:
        v10 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        if ((_QWORD)v10)
        {
          v14 = *(_QWORD *)v10;
          v13 = *(std::__shared_weak_count **)(v10 + 8);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          if (v14)
            sub_20B289920(v10);
        }
        *(_OWORD *)(a4 + 8) = v10;
        *(_QWORD *)a4 = &off_24C416978;
        *(_DWORD *)(a4 + 24) = 1;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 2:
        v18 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        if ((_QWORD)v18)
        {
          v22 = *(_QWORD *)v18;
          v21 = *(std::__shared_weak_count **)(v18 + 8);
          if (v21)
          {
            v23 = (unint64_t *)&v21->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            do
              v25 = __ldaxr(v23);
            while (__stlxr(v25 - 1, v23));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (v22)
            sub_20B289A10(v18);
        }
        *(_OWORD *)(a4 + 8) = v18;
        *(_QWORD *)a4 = &off_24C416998;
        *(_DWORD *)(a4 + 24) = 2;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 3:
        v26 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 16);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          do
            v29 = __ldxr(v27);
          while (__stxr(v29 + 1, v27));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
        }
        *(_OWORD *)a4 = v26;
        *(_DWORD *)(a4 + 24) = 3;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      default:
        *(_QWORD *)a4 = &off_24C4169B8;
        *(_OWORD *)(a4 + 8) = v35;
        v35 = 0uLL;
        *(_DWORD *)(a4 + 24) = 0;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
        {
LABEL_51:
          v30 = (unint64_t *)&v9->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        break;
    }
  }
}

void sub_20B2556CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a4);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B255734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B255750(int a1, uint64_t a2, double a3)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t result;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  __int128 v31;

  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24))
        goto LABEL_40;
      v3 = *(uint64_t **)(a2 + 8);
      v4 = *(std::__shared_weak_count **)(a2 + 16);
      v28 = v3;
      v29 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      v27 = &off_24C416978;
      if (v3)
      {
        v8 = *v3;
        v7 = (std::__shared_weak_count *)v3[1];
        if (v7)
        {
          v9 = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
          do
            v11 = __ldaxr(v9);
          while (__stlxr(v11 - 1, v9));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        if (v8)
          sub_20B289920((uint64_t)v28);
      }
      sub_20B255A34((uint64_t)&v27, &v30);
      v12 = v31;
      if (v28)
      {
        v14 = *v28;
        v13 = (std::__shared_weak_count *)v28[1];
        if (v13)
        {
          v15 = (unint64_t *)&v13->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          do
            v17 = __ldaxr(v15);
          while (__stlxr(v17 - 1, v15));
          if (!v17)
          {
            v24 = v12;
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
            v12 = v24;
          }
        }
        if (v14)
        {
          v25 = v12;
          sub_20B289AFC((uint64_t)v28);
          v12 = v25;
        }
      }
      v27 = &off_24C4169B8;
      v18 = v29;
      if (!v29)
        goto LABEL_28;
      v19 = (unint64_t *)&v29->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (v20)
        goto LABEL_28;
      goto LABEL_39;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1)
        goto LABEL_40;
      goto LABEL_33;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2)
        goto LABEL_40;
LABEL_33:
      sub_20B255A34(a2, &v30);
      result = v31;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3)
LABEL_40:
        sub_20AECFAB8();
      sub_20B255B94(&v27, (uint64_t *)a2);
      sub_20B255A34((uint64_t)&v27, &v30);
      v12 = v31;
      v27 = &off_24C4169B8;
      v18 = v29;
      if (!v29)
        goto LABEL_28;
      v22 = (unint64_t *)&v29->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (v23)
      {
LABEL_28:
        result = v12;
      }
      else
      {
LABEL_39:
        v26 = v12;
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        result = v26;
      }
      break;
    default:
      result = *(_QWORD *)&a3;
      break;
  }
  return result;
}

void sub_20B255A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B255A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_20B255A34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20B28523C(a1, 0);
  v11 = sub_20B286A40(a1);
  v12 = sub_20B286B78(a1);
  result = sub_20B286CB0(a1);
  v14 = v11;
  v15 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  *a2 = v10;
  a2[1] = v17;
  a2[2] = ((unint64_t)(result >> 1) << 32) | 1;
  if (HIDWORD(v17) * (result >> 1) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_20B255B94(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C4169B8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C4169B8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_20B532360);
    abort();
  }
}

void sub_20B255CD8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B285E60(v1);
  _Unwind_Resume(a1);
}

void sub_20B255CEC(uint64_t a1, _WORD *a2)
{
  uint64_t v4;
  int v5;
  _WORD *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _WORD *v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _WORD *v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  _QWORD v30[2];

  if ((sub_20B256814(a1) & 1) != 0)
    return;
  sub_20B2569F4(&v27, a1);
  sub_20B256AE8((uint64_t *)&v22, a1);
  v30[0] = &v22;
  v30[1] = a2;
  v4 = v25;
  if (v25 == 1)
  {
    sub_20B27E8A0((uint64_t)v30);
    goto LABEL_18;
  }
  if (v23 && v24)
  {
    v5 = v23 - 1;
    v6 = v22;
    v7 = v24 - 1;
    if (v24 != 1)
    {
      v8 = v26;
      if (v23 == 1)
      {
        do
        {
          *v6 = *a2;
          v6 += v8;
          --v7;
        }
        while (v7);
LABEL_17:
        *v6 = *a2;
        goto LABEL_18;
      }
      v9 = 0;
      v10 = 2 * v26;
      do
      {
        v11 = v6;
        v12 = v5;
        do
        {
          *v11 = *a2;
          v11 += v4;
          --v12;
        }
        while (v12);
        *v11 = *a2;
        v6 = (_WORD *)((char *)v6 + v10);
        ++v9;
      }
      while (v9 != v7);
    }
    if (v5)
    {
      v13 = 2 * v4;
      do
      {
        *v6 = *a2;
        v6 = (_WORD *)((char *)v6 + v13);
        --v5;
      }
      while (v5);
    }
    goto LABEL_17;
  }
LABEL_18:
  if (!v28)
    goto LABEL_26;
  v15 = *v28;
  v14 = (std::__shared_weak_count *)v28[1];
  if (!v14)
    goto LABEL_24;
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (v18)
  {
LABEL_24:
    if (!v15)
      goto LABEL_26;
    goto LABEL_25;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (v15)
LABEL_25:
    sub_20B289BEC((uint64_t)v28);
LABEL_26:
  v27 = &off_24C4169B8;
  v19 = v29;
  if (v29)
  {
    v20 = (unint64_t *)&v29->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20B255EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B285900((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B255ED8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414A60;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_20B255F3C(uint64_t a1, unsigned int *a2, __int128 *a3)
{
  uint64_t v6;
  double v7;
  BOOL v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v19;
  uint64_t v20;
  uint64_t v21[3];
  uint64_t (**v22)();
  uint64_t *v23;
  std::__shared_weak_count *v24;

  *(_QWORD *)a1 = off_24C414A60;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_20B25536C(0, 2, a2, a1 + 16);
  if (*a2)
    v8 = a2[1] == 0;
  else
    v8 = 1;
  if (v8)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = sub_20B255750(0, v6, v7);
    *(_QWORD *)(a1 + 56) = v9;
  }
  v19 = *a3;
  v20 = *((_QWORD *)a3 + 2);
  if ((sub_20B256814(a1) & 1) != 0)
    return a1;
  sub_20B2569F4(&v22, a1);
  sub_20B256AE8(v21, a1);
  sub_20AFC48E4((uint64_t *)&v19, (uint64_t)v21);
  if (!v23)
    goto LABEL_16;
  v11 = *v23;
  v10 = (std::__shared_weak_count *)v23[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (!v11)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v11)
LABEL_15:
    sub_20B289BEC((uint64_t)v23);
LABEL_16:
  v22 = &off_24C4169B8;
  v15 = v24;
  if (!v24)
    return a1;
  v16 = (unint64_t *)&v24->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20B2560D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B2560E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_20B285900((uint64_t *)va);
  sub_20B255ED8(v8);
  _Unwind_Resume(a1);
}

void sub_20B256100(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B255ED8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B256114(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;

  *(_QWORD *)a1 = off_24C414A60;
  v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_7:
    v4 = *(uint64_t **)(a2 + 8);
    if (v6)
      goto LABEL_8;
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v4 = *(uint64_t **)(a2 + 8);
  if (!v6)
    goto LABEL_12;
LABEL_8:
  v10 = *((_DWORD *)v4 + 4);
  if (v10 == 2)
    v11 = 2;
  else
    v11 = v10 == 1;
LABEL_13:
  *(_QWORD *)(a1 + 16) = &off_24C4169B8;
  *(_DWORD *)(a1 + 8) = v11;
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = sub_20B25634C(a2);
  *(_QWORD *)(a1 + 56) = v15;
  v16 = *(_QWORD *)(a2 + 8);
  if (!v16)
  {
    v23 = 0;
    goto LABEL_31;
  }
  v17 = *(std::__shared_weak_count **)(v16 + 8);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v21 = *(uint64_t **)(a2 + 8);
      if (v21)
        goto LABEL_23;
LABEL_35:
      v23 = 0;
      if (!*(_DWORD *)(a1 + 48))
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  v21 = *(uint64_t **)(a2 + 8);
  if (!v21)
    goto LABEL_35;
LABEL_23:
  v23 = *v21;
  v22 = (std::__shared_weak_count *)v21[1];
  if (!v22)
    goto LABEL_31;
  v24 = (unint64_t *)&v22->__shared_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  do
    v26 = __ldaxr(v24);
  while (__stlxr(v26 - 1, v24));
  if (v26)
  {
LABEL_31:
    if (!*(_DWORD *)(a1 + 48))
      goto LABEL_36;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  if (!*(_DWORD *)(a1 + 48))
  {
LABEL_36:
    if (!v23)
      return a1;
    goto LABEL_37;
  }
LABEL_32:
  if ((v23 == 0) == (*(_DWORD *)(a1 + 52) == 0))
    return a1;
LABEL_37:
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return a1;
}

void sub_20B256338(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20B25634C(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v8 = sub_20B286A40(a1);
  v9 = sub_20B286B78(a1);
  sub_20B286CB0(a1);
  return v8 | ((unint64_t)v9 << 32);
}

void sub_20B256440(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C4169B8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
  sub_20B286DE8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C41E150;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C4169B8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20B25667C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B256690(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24C4169B8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

uint64_t sub_20B256814(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B2569F4(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20B2857F4(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_20AECFAB8();
    sub_20B255B94(v9, v4);
    sub_20B2856E8(a1, (uint64_t)v9);
    v9[0] = &off_24C4169B8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20B2856E8(a1, (uint64_t)v4);
  }
}

void sub_20B256AD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B256AE8(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_20B256814(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C4169B8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C4169B8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C4169B8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v30 = &off_24C4169B8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B255A34((uint64_t)&v30, a1);
    v30 = &off_24C4169B8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20B256D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B256D38(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20B2854CC(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20B2853C0(a1, (uint64_t)v4);
      return;
    case 3:
      sub_20B255B94(v9, v4);
      sub_20B2853C0(a1, (uint64_t)v9);
      v9[0] = &off_24C4169B8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B256E18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B256E2C(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v6;
  BOOL v7;
  unsigned int v8;
  std::__shared_weak_count *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  __int128 v33;
  uint64_t (**v34)();
  __int128 v35;

  v6 = (unsigned int *)(a3 + 24);
  if (*(_DWORD *)(a3 + 24))
    v7 = *(_DWORD *)(a3 + 28) == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (a1 == 3)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 24) = 3;
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = &off_24C4169B8;
      *(_DWORD *)(a4 + 24) = 0;
    }
  }
  else
  {
    if ((a2 - 1) > 0x25)
      v8 = 0;
    else
      v8 = dword_20B5F1924[a2 - 1] | dword_20B5F188C[a2 - 1];
    __p = operator new(0x68uLL);
    v33 = xmmword_20B5EE7A0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20B285ED4((uint64_t)&v34, v6, v8, (uint64_t *)&__p, 0);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    switch(a1)
    {
      case 1:
        v10 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        if ((_QWORD)v10)
        {
          v14 = *(_QWORD *)v10;
          v13 = *(std::__shared_weak_count **)(v10 + 8);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          if (v14)
            sub_20B289920(v10);
        }
        *(_OWORD *)(a4 + 8) = v10;
        *(_QWORD *)a4 = &off_24C416978;
        *(_DWORD *)(a4 + 24) = 1;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 2:
        v18 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        if ((_QWORD)v18)
        {
          v22 = *(_QWORD *)v18;
          v21 = *(std::__shared_weak_count **)(v18 + 8);
          if (v21)
          {
            v23 = (unint64_t *)&v21->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            do
              v25 = __ldaxr(v23);
            while (__stlxr(v25 - 1, v23));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (v22)
            sub_20B289A10(v18);
        }
        *(_OWORD *)(a4 + 8) = v18;
        *(_QWORD *)a4 = &off_24C416998;
        *(_DWORD *)(a4 + 24) = 2;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 3:
        v26 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 16);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          do
            v29 = __ldxr(v27);
          while (__stxr(v29 + 1, v27));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
        }
        *(_OWORD *)a4 = v26;
        *(_DWORD *)(a4 + 24) = 3;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      default:
        *(_QWORD *)a4 = &off_24C4169B8;
        *(_OWORD *)(a4 + 8) = v35;
        v35 = 0uLL;
        *(_DWORD *)(a4 + 24) = 0;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
        {
LABEL_51:
          v30 = (unint64_t *)&v9->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        break;
    }
  }
}

void sub_20B25718C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a4);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B2571F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B257210(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t (**v26)();
  uint64_t *v27;
  std::__shared_weak_count *v28;
  char v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24))
        goto LABEL_39;
      v4 = *(uint64_t **)(a2 + 8);
      v5 = *(std::__shared_weak_count **)(a2 + 16);
      v27 = v4;
      v28 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v26 = &off_24C416978;
      if (v4)
      {
        v9 = *v4;
        v8 = (std::__shared_weak_count *)v4[1];
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
          do
            v12 = __ldaxr(v10);
          while (__stlxr(v12 - 1, v10));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        if (v9)
          sub_20B289920((uint64_t)v27);
      }
      sub_20B2574F0((uint64_t)&v26, (uint64_t)v29);
      v13 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v13;
      *(_QWORD *)(a3 + 32) = v32;
      if (v27)
      {
        v15 = *v27;
        v14 = (std::__shared_weak_count *)v27[1];
        if (v14)
        {
          v16 = (unint64_t *)&v14->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
          do
            v18 = __ldaxr(v16);
          while (__stlxr(v18 - 1, v16));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        if (v15)
          sub_20B289AFC((uint64_t)v27);
      }
      v26 = &off_24C4169B8;
      v19 = v28;
      if (!v28)
        return;
      v20 = (unint64_t *)&v28->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (v21)
        return;
      goto LABEL_38;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1)
        goto LABEL_39;
      goto LABEL_32;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2)
        goto LABEL_39;
LABEL_32:
      sub_20B2574F0(a2, (uint64_t)v29);
      v22 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v22;
      *(_QWORD *)(a3 + 32) = v32;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3)
LABEL_39:
        sub_20AECFAB8();
      sub_20B2576CC(&v26, (uint64_t *)a2);
      sub_20B2574F0((uint64_t)&v26, (uint64_t)v29);
      v23 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v23;
      *(_QWORD *)(a3 + 32) = v32;
      v26 = &off_24C4169B8;
      v19 = v28;
      if (v28)
      {
        v24 = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
LABEL_38:
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      break;
    default:
      return;
  }
}

void sub_20B2574C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B2574DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_20B2574F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20B28523C(a1, 0);
  v11 = sub_20B286A40(a1);
  v12 = sub_20B286B78(a1);
  result = sub_20B286CB0(a1);
  v14 = result >> 1;
  v15 = v11;
  v16 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 0;
  else
    v18 = v16;
  HIDWORD(v19) = v18;
  LODWORD(v19) = 3;
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v19;
  *(_DWORD *)(a2 + 16) = HIDWORD(v18);
  *(_QWORD *)(a2 + 20) = 0x300000001;
  *(_DWORD *)(a2 + 28) = v14;
  *(_QWORD *)(a2 + 32) = v18;
  *(_QWORD *)(a2 + 40) = ((unint64_t)(result >> 1) << 32) | 3;
  if (HIDWORD(v18) * (_DWORD)v14 == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_20B2576CC(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C4169B8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C4169B8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_20B532360);
    abort();
  }
}

void sub_20B257810(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B285E60(v1);
  _Unwind_Resume(a1);
}

void sub_20B257824(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  _QWORD v24[2];
  uint64_t v25;
  char v26;
  _QWORD v27[3];
  _QWORD *v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34[2];

  if ((sub_20B25856C(a1) & 1) != 0)
    return;
  sub_20B25874C(&v21, a1);
  sub_20B258840((uint64_t)&v14, a1);
  v24[0] = &v14;
  v24[1] = a2;
  if (v18 == 1)
  {
    if (v19 == v15)
    {
      sub_20B27EC40((uint64_t)v24);
    }
    else
    {
      v26 = 0;
      v25 = v15;
      v27[0] = &v26;
      v27[1] = &v25;
      v27[2] = a2;
      if (v15 && v16 && v17)
      {
        LODWORD(v28) = 0;
        HIDWORD(v28) = v15 - 1;
        v29 = 1;
        v30 = v16 - 1;
        v33 = v20;
        v4 = v14;
        v34[0] = 0;
        v34[1] = 0;
        v31 = v19;
        v32 = v17 - 1;
        if (v17 != 1)
        {
          v5 = 0;
          do
          {
            sub_20B27F00C((uint64_t)&v28, v34, (uint64_t)v27, v4);
            v4 += 2 * v33;
            ++v5;
          }
          while (v5 < v32);
        }
        sub_20B27F00C((uint64_t)&v28, v34, (uint64_t)v27, v4);
      }
    }
  }
  else
  {
    v27[0] = a2;
    if (v15 && v16 && v17)
    {
      v28 = v27;
      sub_20B27F214(&v28, (uint64_t)&v14);
    }
  }
  if (v22)
  {
    v7 = *v22;
    v6 = (std::__shared_weak_count *)v22[1];
    if (!v6)
      goto LABEL_22;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10)
    {
LABEL_22:
      if (!v7)
        goto LABEL_24;
      goto LABEL_23;
    }
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7)
LABEL_23:
      sub_20B289BEC((uint64_t)v22);
  }
LABEL_24:
  v21 = &off_24C4169B8;
  v11 = v23;
  if (v23)
  {
    v12 = (unint64_t *)&v23->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_20B257A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B285900((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B257A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B285900((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B257A5C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414AF0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_20B257AC0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  int v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[2];
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t (**v44)();
  uint64_t *v45;
  std::__shared_weak_count *v46;
  uint64_t v47[2];

  *(_QWORD *)a1 = off_24C414AF0;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_20B256E2C(0, 22, a2, a1 + 16);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_20B257210(0, v6, (uint64_t)v7);
  }
  v11 = a3[1];
  v37 = *a3;
  v38 = v11;
  v39 = a3[2];
  if ((sub_20B25856C(a1) & 1) != 0)
    return a1;
  sub_20B25874C(&v44, a1);
  sub_20B258840((uint64_t)v40, a1);
  v47[0] = (uint64_t)&v37;
  v47[1] = (uint64_t)v40;
  if (DWORD1(v38) == 1 && v41 == 1)
  {
    sub_20AFC7BE4(v47);
    goto LABEL_25;
  }
  if (DWORD2(v37) && HIDWORD(v37) && (_DWORD)v38)
  {
    v12 = HIDWORD(v37) - 1;
    v13 = DWORD2(v38);
    v14 = v42;
    v15 = (_WORD *)v37;
    v16 = (_WORD *)v40[0];
    v17 = v38 - 1;
    if ((_DWORD)v38 != 1)
    {
      v18 = v43;
      v19 = HIDWORD(v38);
      if (HIDWORD(v37) == 1)
      {
        do
        {
          *v16 = *v15;
          v16[1] = v15[1];
          v16[2] = v15[2];
          v15 += v19;
          v16 += v18;
          --v17;
        }
        while (v17);
LABEL_24:
        *v16 = *v15;
        v16[1] = v15[1];
        v16[2] = v15[2];
        goto LABEL_25;
      }
      v20 = 0;
      v21 = v40[0] + 4;
      v22 = (_WORD *)(v37 + 4);
      v23 = 2 * HIDWORD(v38);
      v24 = 2 * DWORD2(v38);
      do
      {
        v25 = v22;
        v26 = (_WORD *)v21;
        v27 = v12;
        do
        {
          *(v26 - 2) = *(v25 - 2);
          *(v26 - 1) = *(v25 - 1);
          *v26 = *v25;
          v26 += v14;
          v25 = (_WORD *)((char *)v25 + v24);
          --v27;
        }
        while (v27);
        *(v26 - 2) = *(v25 - 2);
        *(v26 - 1) = *(v25 - 1);
        *v26 = *v25;
        v15 += v19;
        v16 += v18;
        ++v20;
        v21 += 2 * v18;
        v22 = (_WORD *)((char *)v22 + v23);
      }
      while (v20 != v17);
    }
    for (; v12; --v12)
    {
      *v16 = *v15;
      v16[1] = v15[1];
      v16[2] = v15[2];
      v15 += v13;
      v16 += v14;
    }
    goto LABEL_24;
  }
LABEL_25:
  if (v45)
  {
    v29 = *v45;
    v28 = (std::__shared_weak_count *)v45[1];
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v31 = __ldxr(p_shared_owners);
      while (__stxr(v31 + 1, p_shared_owners));
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
        if (!v29)
          goto LABEL_33;
        goto LABEL_32;
      }
    }
    if (v29)
LABEL_32:
      sub_20B289BEC((uint64_t)v45);
  }
LABEL_33:
  v44 = &off_24C4169B8;
  v33 = v46;
  if (!v46)
    return a1;
  v34 = (unint64_t *)&v46->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (v35)
    return a1;
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  return a1;
}

void sub_20B257DC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B257DD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20B285900((_QWORD *)(v2 - 72));
  sub_20B257A5C(v1);
  _Unwind_Resume(a1);
}

void sub_20B257DF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B257A5C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B257E04(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;

  *(_QWORD *)a1 = off_24C414AF0;
  v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_7:
    v4 = *(uint64_t **)(a2 + 8);
    if (v6)
      goto LABEL_8;
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v4 = *(uint64_t **)(a2 + 8);
  if (!v6)
    goto LABEL_12;
LABEL_8:
  v10 = *((_DWORD *)v4 + 4);
  if (v10 == 2)
    v11 = 2;
  else
    v11 = v10 == 1;
LABEL_13:
  *(_QWORD *)(a1 + 16) = &off_24C4169B8;
  *(_DWORD *)(a1 + 8) = v11;
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 40) = 0;
  sub_20B25803C(a2, a1 + 48);
  v15 = *(_QWORD *)(a2 + 8);
  if (!v15)
  {
    v22 = 0;
    goto LABEL_31;
  }
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      v20 = *(uint64_t **)(a2 + 8);
      if (v20)
        goto LABEL_23;
LABEL_35:
      v22 = 0;
      if (!*(_DWORD *)(a1 + 72))
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  v20 = *(uint64_t **)(a2 + 8);
  if (!v20)
    goto LABEL_35;
LABEL_23:
  v22 = *v20;
  v21 = (std::__shared_weak_count *)v20[1];
  if (!v21)
    goto LABEL_31;
  v23 = (unint64_t *)&v21->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 - 1, v23));
  if (v25)
  {
LABEL_31:
    if (!*(_DWORD *)(a1 + 72))
      goto LABEL_36;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_36:
    if (!v22)
      return a1;
    goto LABEL_37;
  }
LABEL_32:
  if ((v22 == 0) == (*(_DWORD *)(a1 + 76) == 0))
    return a1;
LABEL_37:
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return a1;
}

void sub_20B258028(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

size_t sub_20B25803C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  size_t result;
  unint64_t v13;
  uint64_t v14;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v10 = sub_20B286A40(a1);
  v11 = sub_20B286B78(a1);
  result = sub_20B286CB0(a1);
  v13 = v10 | ((unint64_t)v11 << 32);
  LODWORD(v14) = 3;
  HIDWORD(v14) = v13;
  *(_QWORD *)a2 = v14;
  *(_DWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 12) = 0x300000001;
  *(_DWORD *)(a2 + 20) = result >> 1;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = ((unint64_t)(result >> 1) << 32) | 3;
  return result;
}

void sub_20B258198(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C4169B8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
  sub_20B286DE8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C41E150;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C4169B8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20B2583D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B2583E8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24C4169B8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

uint64_t sub_20B25856C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B25874C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20B2857F4(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_20AECFAB8();
    sub_20B2576CC(v9, v4);
    sub_20B2856E8(a1, (uint64_t)v9);
    v9[0] = &off_24C4169B8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20B2856E8(a1, (uint64_t)v4);
  }
}

void sub_20B25882C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B258840(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;

  if (sub_20B25856C(a2))
  {
    sub_20B27E5CC(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 24);
        v4 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24C4169B8;
        v28 = v5;
        v29 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        break;
      case 1:
        v13 = *(_QWORD *)(a2 + 24);
        v12 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24C4169B8;
        v28 = v13;
        v29 = v12;
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        break;
      case 2:
        v9 = *(_QWORD *)(a2 + 24);
        v8 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24C4169B8;
        v28 = v9;
        v29 = v8;
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        break;
      case 3:
        v16 = *(std::__shared_weak_count **)(a2 + 24);
        if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
        {
          v18 = v17;
          v19 = *(_QWORD *)(a2 + 16);
          v27 = &off_24C4169B8;
          if (v19)
          {
            v28 = v19;
            v29 = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          else
          {
            v28 = 0;
            v29 = 0;
          }
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v27 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B2574F0((uint64_t)&v27, a1);
    v27 = &off_24C4169B8;
    v24 = v29;
    if (v29)
    {
      v25 = (unint64_t *)&v29->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_20B258A20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B258A34(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20B2854CC(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20B2853C0(a1, (uint64_t)v4);
      return;
    case 3:
      sub_20B2576CC(v9, v4);
      sub_20B2853C0(a1, (uint64_t)v9);
      v9[0] = &off_24C4169B8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B258B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B258B28(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v6;
  BOOL v7;
  unsigned int v8;
  std::__shared_weak_count *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  __int128 v33;
  uint64_t (**v34)();
  __int128 v35;

  v6 = (unsigned int *)(a3 + 24);
  if (*(_DWORD *)(a3 + 24))
    v7 = *(_DWORD *)(a3 + 28) == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (a1 == 3)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 24) = 3;
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = &off_24C4169B8;
      *(_DWORD *)(a4 + 24) = 0;
    }
  }
  else
  {
    if ((a2 - 1) > 0x25)
      v8 = 0;
    else
      v8 = dword_20B5F1924[a2 - 1] | dword_20B5F188C[a2 - 1];
    __p = operator new(0x68uLL);
    v33 = xmmword_20B5EE7A0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20B285ED4((uint64_t)&v34, v6, v8, (uint64_t *)&__p, 0);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    switch(a1)
    {
      case 1:
        v10 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        if ((_QWORD)v10)
        {
          v14 = *(_QWORD *)v10;
          v13 = *(std::__shared_weak_count **)(v10 + 8);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          if (v14)
            sub_20B289920(v10);
        }
        *(_OWORD *)(a4 + 8) = v10;
        *(_QWORD *)a4 = &off_24C416978;
        *(_DWORD *)(a4 + 24) = 1;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 2:
        v18 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        if ((_QWORD)v18)
        {
          v22 = *(_QWORD *)v18;
          v21 = *(std::__shared_weak_count **)(v18 + 8);
          if (v21)
          {
            v23 = (unint64_t *)&v21->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            do
              v25 = __ldaxr(v23);
            while (__stlxr(v25 - 1, v23));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (v22)
            sub_20B289A10(v18);
        }
        *(_OWORD *)(a4 + 8) = v18;
        *(_QWORD *)a4 = &off_24C416998;
        *(_DWORD *)(a4 + 24) = 2;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 3:
        v26 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 16);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          do
            v29 = __ldxr(v27);
          while (__stxr(v29 + 1, v27));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
        }
        *(_OWORD *)a4 = v26;
        *(_DWORD *)(a4 + 24) = 3;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      default:
        *(_QWORD *)a4 = &off_24C4169B8;
        *(_OWORD *)(a4 + 8) = v35;
        v35 = 0uLL;
        *(_DWORD *)(a4 + 24) = 0;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
        {
LABEL_51:
          v30 = (unint64_t *)&v9->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        break;
    }
  }
}

void sub_20B258E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a4);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B258EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B258F0C(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t (**v26)();
  uint64_t *v27;
  std::__shared_weak_count *v28;
  char v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24))
        goto LABEL_39;
      v4 = *(uint64_t **)(a2 + 8);
      v5 = *(std::__shared_weak_count **)(a2 + 16);
      v27 = v4;
      v28 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v26 = &off_24C416978;
      if (v4)
      {
        v9 = *v4;
        v8 = (std::__shared_weak_count *)v4[1];
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
          do
            v12 = __ldaxr(v10);
          while (__stlxr(v12 - 1, v10));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        if (v9)
          sub_20B289920((uint64_t)v27);
      }
      sub_20B2591EC((uint64_t)v29, (uint64_t)&v26);
      v13 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v13;
      *(_QWORD *)(a3 + 32) = v32;
      if (v27)
      {
        v15 = *v27;
        v14 = (std::__shared_weak_count *)v27[1];
        if (v14)
        {
          v16 = (unint64_t *)&v14->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
          do
            v18 = __ldaxr(v16);
          while (__stlxr(v18 - 1, v16));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        if (v15)
          sub_20B289AFC((uint64_t)v27);
      }
      v26 = &off_24C4169B8;
      v19 = v28;
      if (!v28)
        return;
      v20 = (unint64_t *)&v28->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (v21)
        return;
      goto LABEL_38;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1)
        goto LABEL_39;
      goto LABEL_32;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2)
        goto LABEL_39;
LABEL_32:
      sub_20B2591EC((uint64_t)v29, a2);
      v22 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v22;
      *(_QWORD *)(a3 + 32) = v32;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3)
LABEL_39:
        sub_20AECFAB8();
      sub_20B2593C8((uint64_t *)a2, &v26);
      sub_20B2591EC((uint64_t)v29, (uint64_t)&v26);
      v23 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v23;
      *(_QWORD *)(a3 + 32) = v32;
      v26 = &off_24C4169B8;
      v19 = v28;
      if (v28)
      {
        v24 = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
LABEL_38:
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      break;
    default:
      return;
  }
}

void sub_20B2591C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B2591D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_20B2591EC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20B28523C(a2, 0);
  v11 = sub_20B286A40(a2);
  v12 = sub_20B286B78(a2);
  result = sub_20B286CB0(a2);
  v14 = result >> 1;
  v15 = v11;
  v16 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 0;
  else
    v18 = v16;
  HIDWORD(v19) = v18;
  LODWORD(v19) = 4;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v19;
  *(_DWORD *)(a1 + 16) = HIDWORD(v18);
  *(_QWORD *)(a1 + 20) = 0x400000001;
  *(_DWORD *)(a1 + 28) = v14;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = ((unint64_t)(result >> 1) << 32) | 4;
  if (HIDWORD(v18) * (_DWORD)v14 == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_20B2593C8(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v4 = (std::__shared_weak_count *)a1[1];
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = *a1;
    *a2 = &off_24C4169B8;
    if (v7)
    {
      a2[1] = v7;
      a2[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a2[1] = 0;
      a2[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a2[1] = 0;
    a2[2] = 0;
    *a2 = &off_24C4169B8;
  }
  v12 = (uint64_t *)a2[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_20B532360);
    abort();
  }
}

void sub_20B25950C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B285E60(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B259520(uint64_t a1, int a2, int a3, uint64_t a4, __int16 a5)
{
  uint64_t v8;
  _OWORD *v9;
  BOOL v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int16 v22;
  _BYTE v23[48];
  uint64_t (**v24)();
  uint64_t *v25;
  std::__shared_weak_count *v26;
  _QWORD v27[2];

  v22 = a5;
  *(_QWORD *)a1 = off_24C414B80;
  *(_DWORD *)(a1 + 8) = a2;
  v8 = a1 + 16;
  sub_20B258B28(a2, a3, a4, a1 + 16);
  v9 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a4 + 24))
    v10 = *(_DWORD *)(a4 + 28) == 0;
  else
    v10 = 1;
  if (v10)
  {
    v11 = *(_OWORD *)a4;
    v12 = *(_OWORD *)(a4 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a4 + 32);
    *v9 = v11;
    *(_OWORD *)(a1 + 64) = v12;
  }
  else
  {
    sub_20B258F0C(a2, v8, (uint64_t)v9);
  }
  if ((sub_20B25A0F8(a1) & 1) != 0)
    return a1;
  sub_20B25A2D8(a1, &v24);
  sub_20B25A3CC(a1, (uint64_t)v23);
  v27[0] = v23;
  v27[1] = &v22;
  sub_20B27F33C((uint64_t)v27);
  if (!v25)
    goto LABEL_16;
  v14 = *v25;
  v13 = (std::__shared_weak_count *)v25[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (!v14)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v14)
LABEL_15:
    sub_20B289BEC((uint64_t)v25);
LABEL_16:
  v24 = &off_24C4169B8;
  v18 = v26;
  if (!v26)
    return a1;
  v19 = (unint64_t *)&v26->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_20B2596B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B2596C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_20B285900((uint64_t *)va);
  sub_20B2596F8(v8);
  _Unwind_Resume(a1);
}

void sub_20B2596E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B2596F8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B2596F8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414B80;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_20B25975C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[20];
  int v25;
  uint64_t (**v26)();
  uint64_t *v27;
  std::__shared_weak_count *v28;
  uint64_t v29[2];
  char v30;
  char *v31;

  *(_QWORD *)a1 = off_24C414B80;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_20B258B28(0, 38, a2, a1 + 16);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_20B258F0C(0, v6, (uint64_t)v7);
  }
  v11 = a3[1];
  v21 = *a3;
  v22 = v11;
  v23 = a3[2];
  if ((sub_20B25A0F8(a1) & 1) != 0)
    return a1;
  sub_20B25A2D8(a1, &v26);
  sub_20B25A3CC(a1, (uint64_t)v24);
  v29[0] = (uint64_t)&v21;
  v29[1] = (uint64_t)v24;
  if (DWORD1(v22) == 1 && v25 == 1)
  {
    sub_20AFC7BE4(v29);
  }
  else
  {
    v30 = 0;
    if (DWORD2(v21) && HIDWORD(v21) && (_DWORD)v22)
    {
      v31 = &v30;
      sub_20AFEA8F4((uint64_t)&v31, (uint64_t)&v21, (uint64_t)v24);
    }
  }
  if (!v27)
    goto LABEL_23;
  v13 = *v27;
  v12 = (std::__shared_weak_count *)v27[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!v13)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  if (v13)
LABEL_22:
    sub_20B289BEC((uint64_t)v27);
LABEL_23:
  v26 = &off_24C4169B8;
  v17 = v28;
  if (!v28)
    return a1;
  v18 = (unint64_t *)&v28->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20B25994C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B259960(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20B285900((_QWORD *)(v2 - 88));
  sub_20B2596F8(v1);
  _Unwind_Resume(a1);
}

void sub_20B25997C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B2596F8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B259990(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;

  *(_QWORD *)a1 = off_24C414B80;
  v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_7:
    v4 = *(uint64_t **)(a2 + 8);
    if (v6)
      goto LABEL_8;
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v4 = *(uint64_t **)(a2 + 8);
  if (!v6)
    goto LABEL_12;
LABEL_8:
  v10 = *((_DWORD *)v4 + 4);
  if (v10 == 2)
    v11 = 2;
  else
    v11 = v10 == 1;
LABEL_13:
  *(_QWORD *)(a1 + 16) = &off_24C4169B8;
  *(_DWORD *)(a1 + 8) = v11;
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 40) = 0;
  sub_20B259BC8(a2, a1 + 48);
  v15 = *(_QWORD *)(a2 + 8);
  if (!v15)
  {
    v22 = 0;
    goto LABEL_31;
  }
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      v20 = *(uint64_t **)(a2 + 8);
      if (v20)
        goto LABEL_23;
LABEL_35:
      v22 = 0;
      if (!*(_DWORD *)(a1 + 72))
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  v20 = *(uint64_t **)(a2 + 8);
  if (!v20)
    goto LABEL_35;
LABEL_23:
  v22 = *v20;
  v21 = (std::__shared_weak_count *)v20[1];
  if (!v21)
    goto LABEL_31;
  v23 = (unint64_t *)&v21->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 - 1, v23));
  if (v25)
  {
LABEL_31:
    if (!*(_DWORD *)(a1 + 72))
      goto LABEL_36;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_36:
    if (!v22)
      return a1;
    goto LABEL_37;
  }
LABEL_32:
  if ((v22 == 0) == (*(_DWORD *)(a1 + 76) == 0))
    return a1;
LABEL_37:
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return a1;
}

void sub_20B259BB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

size_t sub_20B259BC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  size_t result;
  unint64_t v13;
  uint64_t v14;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v10 = sub_20B286A40(a1);
  v11 = sub_20B286B78(a1);
  result = sub_20B286CB0(a1);
  v13 = v10 | ((unint64_t)v11 << 32);
  LODWORD(v14) = 4;
  HIDWORD(v14) = v13;
  *(_QWORD *)a2 = v14;
  *(_DWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 12) = 0x400000001;
  *(_DWORD *)(a2 + 20) = result >> 1;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = ((unint64_t)(result >> 1) << 32) | 4;
  return result;
}

void sub_20B259D24(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C4169B8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
  sub_20B286DE8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C41E150;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C4169B8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20B259F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B259F74(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24C4169B8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

uint64_t sub_20B25A0F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B25A2D8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[2];
  std::__shared_weak_count *v9;

  v3 = a1 + 16;
  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    sub_20B2857F4(a2, v3);
  }
  else if (v4 > 1)
  {
    if (v4 != 3)
      sub_20AECFAB8();
    sub_20B2593C8((uint64_t *)(a1 + 16), v8);
    sub_20B2856E8(a2, (uint64_t)v8);
    v8[0] = &off_24C4169B8;
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    sub_20B2856E8(a2, v3);
  }
}

void sub_20B25A3B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25A3CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20B25A0F8(a1))
  {
    if (*(_DWORD *)(a1 + 76))
      v4 = *(_DWORD *)(a1 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a1 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(_QWORD *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(_QWORD *)(a2 + 32) = v5;
    *(_QWORD *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a1 + 24);
        v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a1 + 24);
        v19 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a1 + 24);
        v15 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a1 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v34 = &off_24C4169B8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B2591EC(a2, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C4169B8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B25A62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B25A640(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20B2854CC(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20B2853C0(a1, (uint64_t)v4);
      return;
    case 3:
      sub_20B2593C8(v4, v9);
      sub_20B2853C0(a1, (uint64_t)v9);
      v9[0] = &off_24C4169B8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B25A724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25A738(int a1@<W0>, int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v6;
  unsigned int v8;
  std::__shared_weak_count *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  __int128 v33;
  uint64_t (**v34)();
  __int128 v35;

  if (*a3)
    v6 = a3[1] == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (a1 == 3)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 24) = 3;
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = &off_24C4169B8;
      *(_DWORD *)(a4 + 24) = 0;
    }
  }
  else
  {
    if ((a2 - 1) > 0x25)
      v8 = 0;
    else
      v8 = dword_20B5F1924[a2 - 1] | dword_20B5F188C[a2 - 1];
    __p = operator new(0x68uLL);
    v33 = xmmword_20B5EE7A0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20B285ED4((uint64_t)&v34, a3, v8, (uint64_t *)&__p, 0);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    switch(a1)
    {
      case 1:
        v10 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        if ((_QWORD)v10)
        {
          v14 = *(_QWORD *)v10;
          v13 = *(std::__shared_weak_count **)(v10 + 8);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          if (v14)
            sub_20B289920(v10);
        }
        *(_OWORD *)(a4 + 8) = v10;
        *(_QWORD *)a4 = &off_24C416978;
        *(_DWORD *)(a4 + 24) = 1;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 2:
        v18 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        if ((_QWORD)v18)
        {
          v22 = *(_QWORD *)v18;
          v21 = *(std::__shared_weak_count **)(v18 + 8);
          if (v21)
          {
            v23 = (unint64_t *)&v21->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            do
              v25 = __ldaxr(v23);
            while (__stlxr(v25 - 1, v23));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (v22)
            sub_20B289A10(v18);
        }
        *(_OWORD *)(a4 + 8) = v18;
        *(_QWORD *)a4 = &off_24C416998;
        *(_DWORD *)(a4 + 24) = 2;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 3:
        v26 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 16);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          do
            v29 = __ldxr(v27);
          while (__stxr(v29 + 1, v27));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
        }
        *(_OWORD *)a4 = v26;
        *(_DWORD *)(a4 + 24) = 3;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      default:
        *(_QWORD *)a4 = &off_24C4169B8;
        *(_OWORD *)(a4 + 8) = v35;
        v35 = 0uLL;
        *(_DWORD *)(a4 + 24) = 0;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
        {
LABEL_51:
          v30 = (unint64_t *)&v9->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        break;
    }
  }
}

void sub_20B25AA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a4);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25AB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B25AB1C(int a1, uint64_t a2, double a3)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t result;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  __int128 v31;

  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24))
        goto LABEL_40;
      v3 = *(uint64_t **)(a2 + 8);
      v4 = *(std::__shared_weak_count **)(a2 + 16);
      v28 = v3;
      v29 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      v27 = &off_24C416978;
      if (v3)
      {
        v8 = *v3;
        v7 = (std::__shared_weak_count *)v3[1];
        if (v7)
        {
          v9 = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
          do
            v11 = __ldaxr(v9);
          while (__stlxr(v11 - 1, v9));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        if (v8)
          sub_20B289920((uint64_t)v28);
      }
      sub_20B255A34((uint64_t)&v27, &v30);
      v12 = v31;
      if (v28)
      {
        v14 = *v28;
        v13 = (std::__shared_weak_count *)v28[1];
        if (v13)
        {
          v15 = (unint64_t *)&v13->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          do
            v17 = __ldaxr(v15);
          while (__stlxr(v17 - 1, v15));
          if (!v17)
          {
            v24 = v12;
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
            v12 = v24;
          }
        }
        if (v14)
        {
          v25 = v12;
          sub_20B289AFC((uint64_t)v28);
          v12 = v25;
        }
      }
      v27 = &off_24C4169B8;
      v18 = v29;
      if (!v29)
        goto LABEL_28;
      v19 = (unint64_t *)&v29->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (v20)
        goto LABEL_28;
      goto LABEL_39;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1)
        goto LABEL_40;
      goto LABEL_33;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2)
        goto LABEL_40;
LABEL_33:
      sub_20B255A34(a2, &v30);
      result = v31;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3)
LABEL_40:
        sub_20AECFAB8();
      sub_20B25AE00(&v27, (uint64_t *)a2);
      sub_20B255A34((uint64_t)&v27, &v30);
      v12 = v31;
      v27 = &off_24C4169B8;
      v18 = v29;
      if (!v29)
        goto LABEL_28;
      v22 = (unint64_t *)&v29->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (v23)
      {
LABEL_28:
        result = v12;
      }
      else
      {
LABEL_39:
        v26 = v12;
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        result = v26;
      }
      break;
    default:
      result = *(_QWORD *)&a3;
      break;
  }
  return result;
}

void sub_20B25ADD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25ADEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25AE00(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C4169B8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C4169B8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_20B532360);
    abort();
  }
}

void sub_20B25AF44(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B285E60(v1);
  _Unwind_Resume(a1);
}

void sub_20B25AF58(uint64_t a1, _WORD *a2)
{
  __n128 v4;
  int v5;
  _WORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _WORD *v12;
  int v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _WORD *v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  _QWORD v30[2];

  if ((sub_20B25B998(a1) & 1) != 0)
    return;
  sub_20B25BB78(&v27, a1);
  sub_20B25BC6C((uint64_t *)&v22, a1);
  v30[0] = &v22;
  v30[1] = a2;
  if (v25 == 1)
  {
    sub_20B27F5F8(v30, v4);
  }
  else if (v23 && v24)
  {
    v5 = v23 - 1;
    v6 = v22;
    v7 = 2 * v25;
    v8 = v24 - 1;
    if (v24 != 1)
    {
      v9 = v26;
      if (v23 == 1)
      {
        do
        {
          *v6 = *a2;
          v6 += v9;
          --v8;
        }
        while (v8);
      }
      else
      {
        v10 = 0;
        v11 = 2 * v26;
        do
        {
          v12 = v6;
          v13 = v5;
          do
          {
            *v12 = *a2;
            v12 = (_WORD *)((char *)v12 + v7);
            --v13;
          }
          while (v13);
          *v12 = *a2;
          v6 = (_WORD *)((char *)v6 + v11);
          ++v10;
        }
        while (v10 != v8);
      }
    }
    for (; v5; --v5)
    {
      *v6 = *a2;
      v6 = (_WORD *)((char *)v6 + v7);
    }
    *v6 = *a2;
  }
  if (v28)
  {
    v15 = *v28;
    v14 = (std::__shared_weak_count *)v28[1];
    if (!v14)
      goto LABEL_23;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (v18)
    {
LABEL_23:
      if (!v15)
        goto LABEL_25;
      goto LABEL_24;
    }
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v15)
LABEL_24:
      sub_20B289BEC((uint64_t)v28);
  }
LABEL_25:
  v27 = &off_24C4169B8;
  v19 = v29;
  if (v29)
  {
    v20 = (unint64_t *)&v29->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20B25B12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B285900((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B25B140(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414C10;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_20B25B1A4(uint64_t a1, unsigned int *a2, __int128 *a3)
{
  uint64_t v6;
  double v7;
  BOOL v8;
  uint64_t v9;
  __n128 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v20;
  uint64_t v21;
  uint64_t v22[3];
  uint64_t (**v23)();
  uint64_t *v24;
  std::__shared_weak_count *v25;
  uint64_t v26[2];

  *(_QWORD *)a1 = off_24C414C10;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_20B25A738(0, 3, a2, a1 + 16);
  if (*a2)
    v8 = a2[1] == 0;
  else
    v8 = 1;
  if (v8)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = sub_20B25AB1C(0, v6, v7);
    *(_QWORD *)(a1 + 56) = v9;
  }
  v20 = *a3;
  v21 = *((_QWORD *)a3 + 2);
  if ((sub_20B25B998(a1) & 1) != 0)
    return a1;
  sub_20B25BB78(&v23, a1);
  sub_20B25BC6C(v22, a1);
  v26[0] = (uint64_t)&v20;
  v26[1] = (uint64_t)v22;
  v10.n128_u64[0] = sub_20AFE4B3C(v26);
  if (!v24)
    goto LABEL_16;
  v12 = *v24;
  v11 = (std::__shared_weak_count *)v24[1];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v10);
      std::__shared_weak_count::__release_weak(v11);
      if (!v12)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v12)
LABEL_15:
    sub_20B289BEC((uint64_t)v24);
LABEL_16:
  v23 = &off_24C4169B8;
  v16 = v25;
  if (!v25)
    return a1;
  v17 = (unint64_t *)&v25->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v10);
  std::__shared_weak_count::__release_weak(v16);
  return a1;
}

void sub_20B25B340(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B25B354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_20B285900((uint64_t *)va);
  sub_20B25B140(v8);
  _Unwind_Resume(a1);
}

void sub_20B25B370(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B25B140(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B25B384(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;

  *(_QWORD *)a1 = off_24C414C10;
  v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_7:
    v4 = *(uint64_t **)(a2 + 8);
    if (v6)
      goto LABEL_8;
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v4 = *(uint64_t **)(a2 + 8);
  if (!v6)
    goto LABEL_12;
LABEL_8:
  v10 = *((_DWORD *)v4 + 4);
  if (v10 == 2)
    v11 = 2;
  else
    v11 = v10 == 1;
LABEL_13:
  *(_QWORD *)(a1 + 16) = &off_24C4169B8;
  *(_DWORD *)(a1 + 8) = v11;
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = sub_20B25634C(a2);
  *(_QWORD *)(a1 + 56) = v15;
  v16 = *(_QWORD *)(a2 + 8);
  if (!v16)
  {
    v23 = 0;
    goto LABEL_31;
  }
  v17 = *(std::__shared_weak_count **)(v16 + 8);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v21 = *(uint64_t **)(a2 + 8);
      if (v21)
        goto LABEL_23;
LABEL_35:
      v23 = 0;
      if (!*(_DWORD *)(a1 + 48))
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  v21 = *(uint64_t **)(a2 + 8);
  if (!v21)
    goto LABEL_35;
LABEL_23:
  v23 = *v21;
  v22 = (std::__shared_weak_count *)v21[1];
  if (!v22)
    goto LABEL_31;
  v24 = (unint64_t *)&v22->__shared_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  do
    v26 = __ldaxr(v24);
  while (__stlxr(v26 - 1, v24));
  if (v26)
  {
LABEL_31:
    if (!*(_DWORD *)(a1 + 48))
      goto LABEL_36;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  if (!*(_DWORD *)(a1 + 48))
  {
LABEL_36:
    if (!v23)
      return a1;
    goto LABEL_37;
  }
LABEL_32:
  if ((v23 == 0) == (*(_DWORD *)(a1 + 52) == 0))
    return a1;
LABEL_37:
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return a1;
}

void sub_20B25B5A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B25B5C4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C4169B8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
  sub_20B286DE8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C41E150;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C4169B8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20B25B800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B25B814(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24C4169B8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

uint64_t sub_20B25B998(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B25BB78(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20B2857F4(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_20AECFAB8();
    sub_20B25AE00(v9, v4);
    sub_20B2856E8(a1, (uint64_t)v9);
    v9[0] = &off_24C4169B8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20B2856E8(a1, (uint64_t)v4);
  }
}

void sub_20B25BC58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25BC6C(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_20B25B998(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C4169B8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C4169B8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C4169B8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v30 = &off_24C4169B8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B255A34((uint64_t)&v30, a1);
    v30 = &off_24C4169B8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20B25BEA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25BEBC(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20B2854CC(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20B2853C0(a1, (uint64_t)v4);
      return;
    case 3:
      sub_20B25AE00(v9, v4);
      sub_20B2853C0(a1, (uint64_t)v9);
      v9[0] = &off_24C4169B8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B25BF9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25BFB0(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v6;
  BOOL v7;
  unsigned int v8;
  std::__shared_weak_count *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  __int128 v33;
  uint64_t (**v34)();
  __int128 v35;

  v6 = (unsigned int *)(a3 + 24);
  if (*(_DWORD *)(a3 + 24))
    v7 = *(_DWORD *)(a3 + 28) == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (a1 == 3)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 24) = 3;
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = &off_24C4169B8;
      *(_DWORD *)(a4 + 24) = 0;
    }
  }
  else
  {
    if ((a2 - 1) > 0x25)
      v8 = 0;
    else
      v8 = dword_20B5F1924[a2 - 1] | dword_20B5F188C[a2 - 1];
    __p = operator new(0x68uLL);
    v33 = xmmword_20B5EE7A0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20B285ED4((uint64_t)&v34, v6, v8, (uint64_t *)&__p, 0);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    switch(a1)
    {
      case 1:
        v10 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        if ((_QWORD)v10)
        {
          v14 = *(_QWORD *)v10;
          v13 = *(std::__shared_weak_count **)(v10 + 8);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          if (v14)
            sub_20B289920(v10);
        }
        *(_OWORD *)(a4 + 8) = v10;
        *(_QWORD *)a4 = &off_24C416978;
        *(_DWORD *)(a4 + 24) = 1;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 2:
        v18 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        if ((_QWORD)v18)
        {
          v22 = *(_QWORD *)v18;
          v21 = *(std::__shared_weak_count **)(v18 + 8);
          if (v21)
          {
            v23 = (unint64_t *)&v21->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            do
              v25 = __ldaxr(v23);
            while (__stlxr(v25 - 1, v23));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (v22)
            sub_20B289A10(v18);
        }
        *(_OWORD *)(a4 + 8) = v18;
        *(_QWORD *)a4 = &off_24C416998;
        *(_DWORD *)(a4 + 24) = 2;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 3:
        v26 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 16);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          do
            v29 = __ldxr(v27);
          while (__stxr(v29 + 1, v27));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
        }
        *(_OWORD *)a4 = v26;
        *(_DWORD *)(a4 + 24) = 3;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      default:
        *(_QWORD *)a4 = &off_24C4169B8;
        *(_OWORD *)(a4 + 8) = v35;
        v35 = 0uLL;
        *(_DWORD *)(a4 + 24) = 0;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
        {
LABEL_51:
          v30 = (unint64_t *)&v9->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        break;
    }
  }
}

void sub_20B25C310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a4);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25C378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B25C394(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t (**v26)();
  uint64_t *v27;
  std::__shared_weak_count *v28;
  char v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24))
        goto LABEL_39;
      v4 = *(uint64_t **)(a2 + 8);
      v5 = *(std::__shared_weak_count **)(a2 + 16);
      v27 = v4;
      v28 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v26 = &off_24C416978;
      if (v4)
      {
        v9 = *v4;
        v8 = (std::__shared_weak_count *)v4[1];
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
          do
            v12 = __ldaxr(v10);
          while (__stlxr(v12 - 1, v10));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        if (v9)
          sub_20B289920((uint64_t)v27);
      }
      sub_20B25C670((uint64_t)v29, (uint64_t)&v26);
      v13 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v13;
      *(_QWORD *)(a3 + 32) = v32;
      if (v27)
      {
        v15 = *v27;
        v14 = (std::__shared_weak_count *)v27[1];
        if (v14)
        {
          v16 = (unint64_t *)&v14->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
          do
            v18 = __ldaxr(v16);
          while (__stlxr(v18 - 1, v16));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        if (v15)
          sub_20B289AFC((uint64_t)v27);
      }
      v26 = &off_24C4169B8;
      v19 = v28;
      if (!v28)
        return;
      v20 = (unint64_t *)&v28->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (v21)
        return;
      goto LABEL_38;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1)
        goto LABEL_39;
      goto LABEL_32;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2)
        goto LABEL_39;
LABEL_32:
      sub_20B25C670((uint64_t)v29, a2);
      v22 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v22;
      *(_QWORD *)(a3 + 32) = v32;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3)
LABEL_39:
        sub_20AECFAB8();
      sub_20B25C84C(&v26, (uint64_t *)a2);
      sub_20B25C670((uint64_t)v29, (uint64_t)&v26);
      v23 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v23;
      *(_QWORD *)(a3 + 32) = v32;
      v26 = &off_24C4169B8;
      v19 = v28;
      if (v28)
      {
        v24 = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
LABEL_38:
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      break;
    default:
      return;
  }
}

void sub_20B25C648(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25C65C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_20B25C670(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20B28523C(a2, 0);
  v11 = sub_20B286A40(a2);
  v12 = sub_20B286B78(a2);
  result = sub_20B286CB0(a2);
  v14 = result >> 1;
  v15 = v11;
  v16 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 0;
  else
    v18 = v16;
  HIDWORD(v19) = v18;
  LODWORD(v19) = 2;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v19;
  *(_DWORD *)(a1 + 16) = HIDWORD(v18);
  *(_QWORD *)(a1 + 20) = 0x200000001;
  *(_DWORD *)(a1 + 28) = v14;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = ((unint64_t)(result >> 1) << 32) | 2;
  if (HIDWORD(v18) * (_DWORD)v14 == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_20B25C84C(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C4169B8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C4169B8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_20B532360);
    abort();
  }
}

void sub_20B25C990(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B285E60(v1);
  _Unwind_Resume(a1);
}

void sub_20B25C9A4(uint64_t a1, _WORD *a2)
{
  __n128 v4;
  int v5;
  _WORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  _WORD *v11;
  _WORD *v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _WORD *v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t (**v33)();
  uint64_t *v34;
  std::__shared_weak_count *v35;
  _QWORD v36[2];
  uint64_t v37;
  char v38;
  _QWORD v39[3];
  _DWORD v40[5];
  unsigned int v41;
  unsigned int v42;
  unint64_t v43[2];

  if ((sub_20B25D644(a1) & 1) != 0)
    return;
  sub_20B25D824(&v33, a1);
  sub_20B25D918((uint64_t)&v26, a1);
  v36[0] = &v26;
  v36[1] = a2;
  if (v30 == 1)
  {
    if (v31 == v27)
    {
      sub_20B27F998(v36, v4);
    }
    else
    {
      v38 = 0;
      v37 = v27;
      v39[0] = &v38;
      v39[1] = &v37;
      v39[2] = a2;
      if (v27 && v28 && v29)
      {
        v40[0] = 0;
        v40[1] = v27 - 1;
        v40[2] = 1;
        v40[3] = v28 - 1;
        v42 = v32;
        v14 = (unint64_t)v26;
        v43[0] = 0;
        v43[1] = 0;
        v40[4] = v31;
        v41 = v29 - 1;
        if (v29 != 1)
        {
          v15 = 0;
          do
          {
            v4.n128_u64[0] = sub_20B27FD64((uint64_t)v40, v43, (uint64_t)v39, v14, v4);
            v14 += 2 * v42;
            ++v15;
          }
          while (v15 < v41);
        }
        v4.n128_u64[0] = sub_20B27FD64((uint64_t)v40, v43, (uint64_t)v39, v14, v4);
      }
    }
  }
  else if (v27 && v28 && v29)
  {
    v5 = v28 - 1;
    v6 = v26;
    v7 = 2 * v31;
    v8 = v29 - 1;
    if (v29 != 1)
    {
      v9 = v32;
      if (v28 == 1)
      {
        v17 = 2 * v32;
        do
        {
          *v6 = *a2;
          v6[1] = *a2;
          v6 = (_WORD *)((char *)v6 + v17);
          --v8;
        }
        while (v8);
      }
      else
      {
        v10 = 0;
        v11 = v26 + 1;
        do
        {
          v12 = v11;
          v13 = v5;
          do
          {
            *(v12 - 1) = *a2;
            *v12 = *a2;
            v12 = (_WORD *)((char *)v12 + v7);
            --v13;
          }
          while (v13);
          *(v12 - 1) = *a2;
          *v12 = *a2;
          v6 += v9;
          ++v10;
          v11 += v9;
        }
        while (v10 != v8);
      }
    }
    for (; v5; --v5)
    {
      *v6 = *a2;
      v6[1] = *a2;
      v6 = (_WORD *)((char *)v6 + v7);
    }
    *v6 = *a2;
    v4.n128_u16[0] = *a2;
    v6[1] = *a2;
    v16 = v34;
    if (!v34)
      goto LABEL_36;
    goto LABEL_29;
  }
  v16 = v34;
  if (!v34)
    goto LABEL_36;
LABEL_29:
  v19 = *v16;
  v18 = (std::__shared_weak_count *)v16[1];
  if (!v18)
    goto LABEL_34;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v21 = __ldxr(p_shared_owners);
  while (__stxr(v21 + 1, p_shared_owners));
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (v22)
  {
LABEL_34:
    if (!v19)
      goto LABEL_36;
    goto LABEL_35;
  }
  ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v4);
  std::__shared_weak_count::__release_weak(v18);
  if (v19)
LABEL_35:
    sub_20B289BEC((uint64_t)v34);
LABEL_36:
  v33 = &off_24C4169B8;
  v23 = v35;
  if (v35)
  {
    v24 = (unint64_t *)&v35->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v23->__on_zero_shared)(v23, v4);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_20B25CC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B285900((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25CC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B285900((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B25CC94(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414CA0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_20B25CCF8(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _OWORD v22[3];
  _BYTE v23[48];
  uint64_t (**v24)();
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27[2];

  *(_QWORD *)a1 = off_24C414CA0;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_20B25BFB0(0, 7, a2, a1 + 16);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_20B25C394(0, v6, (uint64_t)v7);
  }
  v11 = a3[1];
  v22[0] = *a3;
  v22[1] = v11;
  v22[2] = a3[2];
  if ((sub_20B25D644(a1) & 1) != 0)
    return a1;
  sub_20B25D824(&v24, a1);
  sub_20B25D918((uint64_t)v23, a1);
  v27[0] = (uint64_t)v22;
  v27[1] = (uint64_t)v23;
  v12.n128_u64[0] = sub_20AFE741C(v27);
  if (!v25)
    goto LABEL_16;
  v14 = *v25;
  v13 = (std::__shared_weak_count *)v25[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
      std::__shared_weak_count::__release_weak(v13);
      if (!v14)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v14)
LABEL_15:
    sub_20B289BEC((uint64_t)v25);
LABEL_16:
  v24 = &off_24C4169B8;
  v18 = v26;
  if (!v26)
    return a1;
  v19 = (unint64_t *)&v26->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v12);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_20B25CE98(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B25CEAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20B285900((_QWORD *)(v2 - 72));
  sub_20B25CC94(v1);
  _Unwind_Resume(a1);
}

void sub_20B25CEC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B25CC94(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B25CEDC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;

  *(_QWORD *)a1 = off_24C414CA0;
  v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_7:
    v4 = *(uint64_t **)(a2 + 8);
    if (v6)
      goto LABEL_8;
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v4 = *(uint64_t **)(a2 + 8);
  if (!v6)
    goto LABEL_12;
LABEL_8:
  v10 = *((_DWORD *)v4 + 4);
  if (v10 == 2)
    v11 = 2;
  else
    v11 = v10 == 1;
LABEL_13:
  *(_QWORD *)(a1 + 16) = &off_24C4169B8;
  *(_DWORD *)(a1 + 8) = v11;
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 40) = 0;
  sub_20B25D114(a2, a1 + 48);
  v15 = *(_QWORD *)(a2 + 8);
  if (!v15)
  {
    v22 = 0;
    goto LABEL_31;
  }
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      v20 = *(uint64_t **)(a2 + 8);
      if (v20)
        goto LABEL_23;
LABEL_35:
      v22 = 0;
      if (!*(_DWORD *)(a1 + 72))
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  v20 = *(uint64_t **)(a2 + 8);
  if (!v20)
    goto LABEL_35;
LABEL_23:
  v22 = *v20;
  v21 = (std::__shared_weak_count *)v20[1];
  if (!v21)
    goto LABEL_31;
  v23 = (unint64_t *)&v21->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 - 1, v23));
  if (v25)
  {
LABEL_31:
    if (!*(_DWORD *)(a1 + 72))
      goto LABEL_36;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_36:
    if (!v22)
      return a1;
    goto LABEL_37;
  }
LABEL_32:
  if ((v22 == 0) == (*(_DWORD *)(a1 + 76) == 0))
    return a1;
LABEL_37:
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return a1;
}

void sub_20B25D100(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

size_t sub_20B25D114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  size_t result;
  unint64_t v13;
  uint64_t v14;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v10 = sub_20B286A40(a1);
  v11 = sub_20B286B78(a1);
  result = sub_20B286CB0(a1);
  v13 = v10 | ((unint64_t)v11 << 32);
  LODWORD(v14) = 2;
  HIDWORD(v14) = v13;
  *(_QWORD *)a2 = v14;
  *(_DWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 12) = 0x200000001;
  *(_DWORD *)(a2 + 20) = result >> 1;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = ((unint64_t)(result >> 1) << 32) | 2;
  return result;
}

void sub_20B25D270(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C4169B8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
  sub_20B286DE8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C41E150;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C4169B8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20B25D4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B25D4C0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24C4169B8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

uint64_t sub_20B25D644(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B25D824(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20B2857F4(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_20AECFAB8();
    sub_20B25C84C(v9, v4);
    sub_20B2856E8(a1, (uint64_t)v9);
    v9[0] = &off_24C4169B8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20B2856E8(a1, (uint64_t)v4);
  }
}

void sub_20B25D904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25D918(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20B25D644(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 2;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(DWORD1(v34), 2);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24C4169B8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B25C670(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C4169B8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B25DB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B25DB90(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20B2854CC(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20B2853C0(a1, (uint64_t)v4);
      return;
    case 3:
      sub_20B25C84C(v9, v4);
      sub_20B2853C0(a1, (uint64_t)v9);
      v9[0] = &off_24C4169B8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B25DC70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25DC84(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v6;
  BOOL v7;
  unsigned int v8;
  std::__shared_weak_count *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  __int128 v33;
  uint64_t (**v34)();
  __int128 v35;

  v6 = (unsigned int *)(a3 + 24);
  if (*(_DWORD *)(a3 + 24))
    v7 = *(_DWORD *)(a3 + 28) == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (a1 == 3)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 24) = 3;
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = &off_24C4169B8;
      *(_DWORD *)(a4 + 24) = 0;
    }
  }
  else
  {
    if ((a2 - 1) > 0x25)
      v8 = 0;
    else
      v8 = dword_20B5F1924[a2 - 1] | dword_20B5F188C[a2 - 1];
    __p = operator new(0x68uLL);
    v33 = xmmword_20B5EE7A0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20B285ED4((uint64_t)&v34, v6, v8, (uint64_t *)&__p, 0);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    switch(a1)
    {
      case 1:
        v10 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        if ((_QWORD)v10)
        {
          v14 = *(_QWORD *)v10;
          v13 = *(std::__shared_weak_count **)(v10 + 8);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          if (v14)
            sub_20B289920(v10);
        }
        *(_OWORD *)(a4 + 8) = v10;
        *(_QWORD *)a4 = &off_24C416978;
        *(_DWORD *)(a4 + 24) = 1;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 2:
        v18 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        if ((_QWORD)v18)
        {
          v22 = *(_QWORD *)v18;
          v21 = *(std::__shared_weak_count **)(v18 + 8);
          if (v21)
          {
            v23 = (unint64_t *)&v21->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            do
              v25 = __ldaxr(v23);
            while (__stlxr(v25 - 1, v23));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (v22)
            sub_20B289A10(v18);
        }
        *(_OWORD *)(a4 + 8) = v18;
        *(_QWORD *)a4 = &off_24C416998;
        *(_DWORD *)(a4 + 24) = 2;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 3:
        v26 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 16);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          do
            v29 = __ldxr(v27);
          while (__stxr(v29 + 1, v27));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
        }
        *(_OWORD *)a4 = v26;
        *(_DWORD *)(a4 + 24) = 3;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      default:
        *(_QWORD *)a4 = &off_24C4169B8;
        *(_OWORD *)(a4 + 8) = v35;
        v35 = 0uLL;
        *(_DWORD *)(a4 + 24) = 0;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
        {
LABEL_51:
          v30 = (unint64_t *)&v9->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        break;
    }
  }
}

void sub_20B25DFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a4);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25E04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B25E068(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t (**v26)();
  uint64_t *v27;
  std::__shared_weak_count *v28;
  char v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24))
        goto LABEL_39;
      v4 = *(uint64_t **)(a2 + 8);
      v5 = *(std::__shared_weak_count **)(a2 + 16);
      v27 = v4;
      v28 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v26 = &off_24C416978;
      if (v4)
      {
        v9 = *v4;
        v8 = (std::__shared_weak_count *)v4[1];
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
          do
            v12 = __ldaxr(v10);
          while (__stlxr(v12 - 1, v10));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        if (v9)
          sub_20B289920((uint64_t)v27);
      }
      sub_20B2591EC((uint64_t)v29, (uint64_t)&v26);
      v13 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v13;
      *(_QWORD *)(a3 + 32) = v32;
      if (v27)
      {
        v15 = *v27;
        v14 = (std::__shared_weak_count *)v27[1];
        if (v14)
        {
          v16 = (unint64_t *)&v14->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
          do
            v18 = __ldaxr(v16);
          while (__stlxr(v18 - 1, v16));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        if (v15)
          sub_20B289AFC((uint64_t)v27);
      }
      v26 = &off_24C4169B8;
      v19 = v28;
      if (!v28)
        return;
      v20 = (unint64_t *)&v28->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (v21)
        return;
      goto LABEL_38;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1)
        goto LABEL_39;
      goto LABEL_32;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2)
        goto LABEL_39;
LABEL_32:
      sub_20B2591EC((uint64_t)v29, a2);
      v22 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v22;
      *(_QWORD *)(a3 + 32) = v32;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3)
LABEL_39:
        sub_20AECFAB8();
      sub_20B25E348((uint64_t *)a2, &v26);
      sub_20B2591EC((uint64_t)v29, (uint64_t)&v26);
      v23 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v23;
      *(_QWORD *)(a3 + 32) = v32;
      v26 = &off_24C4169B8;
      v19 = v28;
      if (v28)
      {
        v24 = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
LABEL_38:
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      break;
    default:
      return;
  }
}

void sub_20B25E320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25E334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25E348(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v4 = (std::__shared_weak_count *)a1[1];
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = *a1;
    *a2 = &off_24C4169B8;
    if (v7)
    {
      a2[1] = v7;
      a2[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a2[1] = 0;
      a2[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a2[1] = 0;
    a2[2] = 0;
    *a2 = &off_24C4169B8;
  }
  v12 = (uint64_t *)a2[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_20B532360);
    abort();
  }
}

void sub_20B25E48C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B285E60(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B25E4A0(uint64_t a1, int a2, int a3, uint64_t a4, __int16 a5)
{
  uint64_t v8;
  _OWORD *v9;
  BOOL v10;
  __int128 v11;
  __int128 v12;
  __n128 v13;
  __n128 v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int16 v24;
  _BYTE v25[48];
  uint64_t (**v26)();
  uint64_t *v27;
  std::__shared_weak_count *v28;
  uint64_t v29[2];

  v24 = a5;
  *(_QWORD *)a1 = off_24C414D30;
  *(_DWORD *)(a1 + 8) = a2;
  v8 = a1 + 16;
  sub_20B25DC84(a2, a3, a4, a1 + 16);
  v9 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a4 + 24))
    v10 = *(_DWORD *)(a4 + 28) == 0;
  else
    v10 = 1;
  if (v10)
  {
    v11 = *(_OWORD *)a4;
    v12 = *(_OWORD *)(a4 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a4 + 32);
    *v9 = v11;
    *(_OWORD *)(a1 + 64) = v12;
  }
  else
  {
    sub_20B25E068(a2, v8, (uint64_t)v9);
  }
  if ((sub_20B25EED4(a1) & 1) != 0)
    return a1;
  sub_20B25F0B4(a1, &v26);
  sub_20B25F1A8(a1, (uint64_t)v25);
  v29[0] = (uint64_t)v25;
  v29[1] = (uint64_t)&v24;
  v14.n128_u64[0] = sub_20B27FF6C(v29, v13);
  if (!v27)
    goto LABEL_16;
  v16 = *v27;
  v15 = (std::__shared_weak_count *)v27[1];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v15->__on_zero_shared)(v15, v14);
      std::__shared_weak_count::__release_weak(v15);
      if (!v16)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v16)
LABEL_15:
    sub_20B289BEC((uint64_t)v27);
LABEL_16:
  v26 = &off_24C4169B8;
  v20 = v28;
  if (!v28)
    return a1;
  v21 = (unint64_t *)&v28->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v20->__on_zero_shared)(v20, v14);
  std::__shared_weak_count::__release_weak(v20);
  return a1;
}

void sub_20B25E634(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B25E648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_20B285900((uint64_t *)va);
  sub_20B25E678(v8);
  _Unwind_Resume(a1);
}

void sub_20B25E664(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B25E678(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B25E678(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414D30;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_20B25E6DC(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _OWORD v22[3];
  _BYTE v23[48];
  uint64_t (**v24)();
  uint64_t *v25;
  std::__shared_weak_count *v26;
  _QWORD v27[2];

  *(_QWORD *)a1 = off_24C414D30;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_20B25DC84(0, 31, a2, a1 + 16);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_20B25E068(0, v6, (uint64_t)v7);
  }
  v11 = a3[1];
  v22[0] = *a3;
  v22[1] = v11;
  v22[2] = a3[2];
  if ((sub_20B25EED4(a1) & 1) != 0)
    return a1;
  sub_20B25F0B4(a1, &v24);
  sub_20B25F1A8(a1, (uint64_t)v23);
  v27[0] = v22;
  v27[1] = v23;
  v12.n128_f64[0] = sub_20AFEAE58(v27);
  if (!v25)
    goto LABEL_16;
  v14 = *v25;
  v13 = (std::__shared_weak_count *)v25[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
      std::__shared_weak_count::__release_weak(v13);
      if (!v14)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v14)
LABEL_15:
    sub_20B289BEC((uint64_t)v25);
LABEL_16:
  v24 = &off_24C4169B8;
  v18 = v26;
  if (!v26)
    return a1;
  v19 = (unint64_t *)&v26->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v12);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_20B25E87C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B25E890(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20B285900((_QWORD *)(v2 - 72));
  sub_20B25E678(v1);
  _Unwind_Resume(a1);
}

void sub_20B25E8AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B25E678(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B25E8C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;

  *(_QWORD *)a1 = off_24C414D30;
  v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_7:
    v4 = *(uint64_t **)(a2 + 8);
    if (v6)
      goto LABEL_8;
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v4 = *(uint64_t **)(a2 + 8);
  if (!v6)
    goto LABEL_12;
LABEL_8:
  v10 = *((_DWORD *)v4 + 4);
  if (v10 == 2)
    v11 = 2;
  else
    v11 = v10 == 1;
LABEL_13:
  *(_QWORD *)(a1 + 16) = &off_24C4169B8;
  *(_DWORD *)(a1 + 8) = v11;
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 40) = 0;
  sub_20B259BC8(a2, a1 + 48);
  v15 = *(_QWORD *)(a2 + 8);
  if (!v15)
  {
    v22 = 0;
    goto LABEL_31;
  }
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      v20 = *(uint64_t **)(a2 + 8);
      if (v20)
        goto LABEL_23;
LABEL_35:
      v22 = 0;
      if (!*(_DWORD *)(a1 + 72))
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  v20 = *(uint64_t **)(a2 + 8);
  if (!v20)
    goto LABEL_35;
LABEL_23:
  v22 = *v20;
  v21 = (std::__shared_weak_count *)v20[1];
  if (!v21)
    goto LABEL_31;
  v23 = (unint64_t *)&v21->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 - 1, v23));
  if (v25)
  {
LABEL_31:
    if (!*(_DWORD *)(a1 + 72))
      goto LABEL_36;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_36:
    if (!v22)
      return a1;
    goto LABEL_37;
  }
LABEL_32:
  if ((v22 == 0) == (*(_DWORD *)(a1 + 76) == 0))
    return a1;
LABEL_37:
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return a1;
}

void sub_20B25EAE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B25EB00(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C4169B8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
  sub_20B286DE8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C41E150;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C4169B8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20B25ED3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B25ED50(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24C4169B8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

uint64_t sub_20B25EED4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B25F0B4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[2];
  std::__shared_weak_count *v9;

  v3 = a1 + 16;
  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    sub_20B2857F4(a2, v3);
  }
  else if (v4 > 1)
  {
    if (v4 != 3)
      sub_20AECFAB8();
    sub_20B25E348((uint64_t *)(a1 + 16), v8);
    sub_20B2856E8(a2, (uint64_t)v8);
    v8[0] = &off_24C4169B8;
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    sub_20B2856E8(a2, v3);
  }
}

void sub_20B25F194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25F1A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20B25EED4(a1))
  {
    if (*(_DWORD *)(a1 + 76))
      v4 = *(_DWORD *)(a1 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a1 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(_QWORD *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(_QWORD *)(a2 + 32) = v5;
    *(_QWORD *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a1 + 24);
        v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a1 + 24);
        v19 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a1 + 24);
        v15 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a1 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v34 = &off_24C4169B8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B2591EC(a2, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C4169B8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B25F408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B25F41C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20B2854CC(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20B2853C0(a1, (uint64_t)v4);
      return;
    case 3:
      sub_20B25E348(v4, v9);
      sub_20B2853C0(a1, (uint64_t)v9);
      v9[0] = &off_24C4169B8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B25F500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25F514(int a1@<W0>, int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v6;
  unsigned int v8;
  std::__shared_weak_count *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  __int128 v33;
  uint64_t (**v34)();
  __int128 v35;

  if (*a3)
    v6 = a3[1] == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (a1 == 3)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 24) = 3;
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = &off_24C4169B8;
      *(_DWORD *)(a4 + 24) = 0;
    }
  }
  else
  {
    if ((a2 - 1) > 0x25)
      v8 = 0;
    else
      v8 = dword_20B5F1924[a2 - 1] | dword_20B5F188C[a2 - 1];
    __p = operator new(0x68uLL);
    v33 = xmmword_20B5EE7A0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20B285ED4((uint64_t)&v34, a3, v8, (uint64_t *)&__p, 0);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    switch(a1)
    {
      case 1:
        v10 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        if ((_QWORD)v10)
        {
          v14 = *(_QWORD *)v10;
          v13 = *(std::__shared_weak_count **)(v10 + 8);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          if (v14)
            sub_20B289920(v10);
        }
        *(_OWORD *)(a4 + 8) = v10;
        *(_QWORD *)a4 = &off_24C416978;
        *(_DWORD *)(a4 + 24) = 1;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 2:
        v18 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        if ((_QWORD)v18)
        {
          v22 = *(_QWORD *)v18;
          v21 = *(std::__shared_weak_count **)(v18 + 8);
          if (v21)
          {
            v23 = (unint64_t *)&v21->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            do
              v25 = __ldaxr(v23);
            while (__stlxr(v25 - 1, v23));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (v22)
            sub_20B289A10(v18);
        }
        *(_OWORD *)(a4 + 8) = v18;
        *(_QWORD *)a4 = &off_24C416998;
        *(_DWORD *)(a4 + 24) = 2;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 3:
        v26 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 16);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          do
            v29 = __ldxr(v27);
          while (__stxr(v29 + 1, v27));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
        }
        *(_OWORD *)a4 = v26;
        *(_DWORD *)(a4 + 24) = 3;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      default:
        *(_QWORD *)a4 = &off_24C4169B8;
        *(_OWORD *)(a4 + 8) = v35;
        v35 = 0uLL;
        *(_DWORD *)(a4 + 24) = 0;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
        {
LABEL_51:
          v30 = (unint64_t *)&v9->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        break;
    }
  }
}

void sub_20B25F874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a4);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25F8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B25F8F8(int a1, uint64_t a2, double a3)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t result;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  __int128 v31;

  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24))
        goto LABEL_40;
      v3 = *(uint64_t **)(a2 + 8);
      v4 = *(std::__shared_weak_count **)(a2 + 16);
      v28 = v3;
      v29 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      v27 = &off_24C416978;
      if (v3)
      {
        v8 = *v3;
        v7 = (std::__shared_weak_count *)v3[1];
        if (v7)
        {
          v9 = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
          do
            v11 = __ldaxr(v9);
          while (__stlxr(v11 - 1, v9));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        if (v8)
          sub_20B289920((uint64_t)v28);
      }
      sub_20B25FBDC((uint64_t)&v27, &v30);
      v12 = v31;
      if (v28)
      {
        v14 = *v28;
        v13 = (std::__shared_weak_count *)v28[1];
        if (v13)
        {
          v15 = (unint64_t *)&v13->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          do
            v17 = __ldaxr(v15);
          while (__stlxr(v17 - 1, v15));
          if (!v17)
          {
            v24 = v12;
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
            v12 = v24;
          }
        }
        if (v14)
        {
          v25 = v12;
          sub_20B289AFC((uint64_t)v28);
          v12 = v25;
        }
      }
      v27 = &off_24C4169B8;
      v18 = v29;
      if (!v29)
        goto LABEL_28;
      v19 = (unint64_t *)&v29->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (v20)
        goto LABEL_28;
      goto LABEL_39;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1)
        goto LABEL_40;
      goto LABEL_33;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2)
        goto LABEL_40;
LABEL_33:
      sub_20B25FBDC(a2, &v30);
      result = v31;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3)
LABEL_40:
        sub_20AECFAB8();
      sub_20B25FD3C(&v27, (uint64_t *)a2);
      sub_20B25FBDC((uint64_t)&v27, &v30);
      v12 = v31;
      v27 = &off_24C4169B8;
      v18 = v29;
      if (!v29)
        goto LABEL_28;
      v22 = (unint64_t *)&v29->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (v23)
      {
LABEL_28:
        result = v12;
      }
      else
      {
LABEL_39:
        v26 = v12;
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        result = v26;
      }
      break;
    default:
      result = *(_QWORD *)&a3;
      break;
  }
  return result;
}

void sub_20B25FBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B25FBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_20B25FBDC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20B28523C(a1, 0);
  v11 = sub_20B286A40(a1);
  v12 = sub_20B286B78(a1);
  result = sub_20B286CB0(a1);
  v14 = v11;
  v15 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  *a2 = v10;
  a2[1] = v17;
  a2[2] = ((unint64_t)(result >> 2) << 32) | 1;
  if (HIDWORD(v17) * (result >> 2) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_20B25FD3C(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C4169B8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C4169B8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_20B532360);
    abort();
  }
}

void sub_20B25FE80(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B285E60(v1);
  _Unwind_Resume(a1);
}

void sub_20B25FE94(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _DWORD *v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  _QWORD v30[2];

  if ((sub_20B2609BC(a1) & 1) != 0)
    return;
  sub_20B260B9C(&v27, a1);
  sub_20B260C90((uint64_t *)&v22, a1);
  v30[0] = &v22;
  v30[1] = a2;
  v4 = v25;
  if (v25 == 1)
  {
    sub_20B2802A4((uint64_t)v30);
    goto LABEL_18;
  }
  if (v23 && v24)
  {
    v5 = v23 - 1;
    v6 = v22;
    v7 = v24 - 1;
    if (v24 != 1)
    {
      v8 = v26;
      if (v23 == 1)
      {
        do
        {
          *v6 = *a2;
          v6 += v8;
          --v7;
        }
        while (v7);
LABEL_17:
        *v6 = *a2;
        goto LABEL_18;
      }
      v9 = 0;
      v10 = 4 * v26;
      do
      {
        v11 = v6;
        v12 = v5;
        do
        {
          *v11 = *a2;
          v11 += v4;
          --v12;
        }
        while (v12);
        *v11 = *a2;
        v6 = (_DWORD *)((char *)v6 + v10);
        ++v9;
      }
      while (v9 != v7);
    }
    if (v5)
    {
      v13 = 4 * v4;
      do
      {
        *v6 = *a2;
        v6 = (_DWORD *)((char *)v6 + v13);
        --v5;
      }
      while (v5);
    }
    goto LABEL_17;
  }
LABEL_18:
  if (!v28)
    goto LABEL_26;
  v15 = *v28;
  v14 = (std::__shared_weak_count *)v28[1];
  if (!v14)
    goto LABEL_24;
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (v18)
  {
LABEL_24:
    if (!v15)
      goto LABEL_26;
    goto LABEL_25;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (v15)
LABEL_25:
    sub_20B289BEC((uint64_t)v28);
LABEL_26:
  v27 = &off_24C4169B8;
  v19 = v29;
  if (v29)
  {
    v20 = (unint64_t *)&v29->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20B26006C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B285900((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B260080(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414DC0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_20B2600E4(uint64_t a1, unsigned int *a2, __int128 *a3)
{
  uint64_t v6;
  double v7;
  BOOL v8;
  uint64_t v9;
  __n128 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v20;
  uint64_t v21;
  uint64_t v22[3];
  uint64_t (**v23)();
  uint64_t *v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a1 = off_24C414DC0;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_20B25F514(0, 4, a2, a1 + 16);
  if (*a2)
    v8 = a2[1] == 0;
  else
    v8 = 1;
  if (v8)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = sub_20B25F8F8(0, v6, v7);
    *(_QWORD *)(a1 + 56) = v9;
  }
  v20 = *a3;
  v21 = *((_QWORD *)a3 + 2);
  if ((sub_20B2609BC(a1) & 1) != 0)
    return a1;
  sub_20B260B9C(&v23, a1);
  sub_20B260C90(v22, a1);
  v10.n128_f32[0] = sub_20AFC5D04((uint64_t)&v20, (uint64_t)v22);
  if (!v24)
    goto LABEL_16;
  v12 = *v24;
  v11 = (std::__shared_weak_count *)v24[1];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v10);
      std::__shared_weak_count::__release_weak(v11);
      if (!v12)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v12)
LABEL_15:
    sub_20B289BEC((uint64_t)v24);
LABEL_16:
  v23 = &off_24C4169B8;
  v16 = v25;
  if (!v25)
    return a1;
  v17 = (unint64_t *)&v25->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v10);
  std::__shared_weak_count::__release_weak(v16);
  return a1;
}

void sub_20B260278(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B26028C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_20B285900((uint64_t *)va);
  sub_20B260080(v8);
  _Unwind_Resume(a1);
}

void sub_20B2602A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B260080(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B2602BC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;

  *(_QWORD *)a1 = off_24C414DC0;
  v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_7:
    v4 = *(uint64_t **)(a2 + 8);
    if (v6)
      goto LABEL_8;
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v4 = *(uint64_t **)(a2 + 8);
  if (!v6)
    goto LABEL_12;
LABEL_8:
  v10 = *((_DWORD *)v4 + 4);
  if (v10 == 2)
    v11 = 2;
  else
    v11 = v10 == 1;
LABEL_13:
  *(_QWORD *)(a1 + 16) = &off_24C4169B8;
  *(_DWORD *)(a1 + 8) = v11;
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = sub_20B2604F4(a2);
  *(_QWORD *)(a1 + 56) = v15;
  v16 = *(_QWORD *)(a2 + 8);
  if (!v16)
  {
    v23 = 0;
    goto LABEL_31;
  }
  v17 = *(std::__shared_weak_count **)(v16 + 8);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v21 = *(uint64_t **)(a2 + 8);
      if (v21)
        goto LABEL_23;
LABEL_35:
      v23 = 0;
      if (!*(_DWORD *)(a1 + 48))
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  v21 = *(uint64_t **)(a2 + 8);
  if (!v21)
    goto LABEL_35;
LABEL_23:
  v23 = *v21;
  v22 = (std::__shared_weak_count *)v21[1];
  if (!v22)
    goto LABEL_31;
  v24 = (unint64_t *)&v22->__shared_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  do
    v26 = __ldaxr(v24);
  while (__stlxr(v26 - 1, v24));
  if (v26)
  {
LABEL_31:
    if (!*(_DWORD *)(a1 + 48))
      goto LABEL_36;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  if (!*(_DWORD *)(a1 + 48))
  {
LABEL_36:
    if (!v23)
      return a1;
    goto LABEL_37;
  }
LABEL_32:
  if ((v23 == 0) == (*(_DWORD *)(a1 + 52) == 0))
    return a1;
LABEL_37:
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return a1;
}

void sub_20B2604E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20B2604F4(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v8 = sub_20B286A40(a1);
  v9 = sub_20B286B78(a1);
  sub_20B286CB0(a1);
  return v8 | ((unint64_t)v9 << 32);
}

void sub_20B2605E8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C4169B8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
  sub_20B286DE8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C41E150;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C4169B8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20B260824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B260838(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24C4169B8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

uint64_t sub_20B2609BC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B260B9C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20B2857F4(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_20AECFAB8();
    sub_20B25FD3C(v9, v4);
    sub_20B2856E8(a1, (uint64_t)v9);
    v9[0] = &off_24C4169B8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20B2856E8(a1, (uint64_t)v4);
  }
}

void sub_20B260C7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B260C90(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_20B2609BC(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C4169B8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C4169B8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C4169B8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v30 = &off_24C4169B8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B25FBDC((uint64_t)&v30, a1);
    v30 = &off_24C4169B8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20B260ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B260EE0(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20B2854CC(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20B2853C0(a1, (uint64_t)v4);
      return;
    case 3:
      sub_20B25FD3C(v9, v4);
      sub_20B2853C0(a1, (uint64_t)v9);
      v9[0] = &off_24C4169B8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B260FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B260FD4(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v6;
  BOOL v7;
  unsigned int v8;
  std::__shared_weak_count *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  __int128 v33;
  uint64_t (**v34)();
  __int128 v35;

  v6 = (unsigned int *)(a3 + 24);
  if (*(_DWORD *)(a3 + 24))
    v7 = *(_DWORD *)(a3 + 28) == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (a1 == 3)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 24) = 3;
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = &off_24C4169B8;
      *(_DWORD *)(a4 + 24) = 0;
    }
  }
  else
  {
    if ((a2 - 1) > 0x25)
      v8 = 0;
    else
      v8 = dword_20B5F1924[a2 - 1] | dword_20B5F188C[a2 - 1];
    __p = operator new(0x68uLL);
    v33 = xmmword_20B5EE7A0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20B285ED4((uint64_t)&v34, v6, v8, (uint64_t *)&__p, 0);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    switch(a1)
    {
      case 1:
        v10 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        if ((_QWORD)v10)
        {
          v14 = *(_QWORD *)v10;
          v13 = *(std::__shared_weak_count **)(v10 + 8);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          if (v14)
            sub_20B289920(v10);
        }
        *(_OWORD *)(a4 + 8) = v10;
        *(_QWORD *)a4 = &off_24C416978;
        *(_DWORD *)(a4 + 24) = 1;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 2:
        v18 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        if ((_QWORD)v18)
        {
          v22 = *(_QWORD *)v18;
          v21 = *(std::__shared_weak_count **)(v18 + 8);
          if (v21)
          {
            v23 = (unint64_t *)&v21->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            do
              v25 = __ldaxr(v23);
            while (__stlxr(v25 - 1, v23));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (v22)
            sub_20B289A10(v18);
        }
        *(_OWORD *)(a4 + 8) = v18;
        *(_QWORD *)a4 = &off_24C416998;
        *(_DWORD *)(a4 + 24) = 2;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 3:
        v26 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 16);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          do
            v29 = __ldxr(v27);
          while (__stxr(v29 + 1, v27));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
        }
        *(_OWORD *)a4 = v26;
        *(_DWORD *)(a4 + 24) = 3;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      default:
        *(_QWORD *)a4 = &off_24C4169B8;
        *(_OWORD *)(a4 + 8) = v35;
        v35 = 0uLL;
        *(_DWORD *)(a4 + 24) = 0;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
        {
LABEL_51:
          v30 = (unint64_t *)&v9->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        break;
    }
  }
}

void sub_20B261334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a4);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B26139C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B2613B8(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t (**v26)();
  uint64_t *v27;
  std::__shared_weak_count *v28;
  char v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24))
        goto LABEL_39;
      v4 = *(uint64_t **)(a2 + 8);
      v5 = *(std::__shared_weak_count **)(a2 + 16);
      v27 = v4;
      v28 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v26 = &off_24C416978;
      if (v4)
      {
        v9 = *v4;
        v8 = (std::__shared_weak_count *)v4[1];
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
          do
            v12 = __ldaxr(v10);
          while (__stlxr(v12 - 1, v10));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        if (v9)
          sub_20B289920((uint64_t)v27);
      }
      sub_20B261698((uint64_t)v29, (uint64_t)&v26);
      v13 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v13;
      *(_QWORD *)(a3 + 32) = v32;
      if (v27)
      {
        v15 = *v27;
        v14 = (std::__shared_weak_count *)v27[1];
        if (v14)
        {
          v16 = (unint64_t *)&v14->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
          do
            v18 = __ldaxr(v16);
          while (__stlxr(v18 - 1, v16));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        if (v15)
          sub_20B289AFC((uint64_t)v27);
      }
      v26 = &off_24C4169B8;
      v19 = v28;
      if (!v28)
        return;
      v20 = (unint64_t *)&v28->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (v21)
        return;
      goto LABEL_38;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1)
        goto LABEL_39;
      goto LABEL_32;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2)
        goto LABEL_39;
LABEL_32:
      sub_20B261698((uint64_t)v29, a2);
      v22 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v22;
      *(_QWORD *)(a3 + 32) = v32;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3)
LABEL_39:
        sub_20AECFAB8();
      sub_20B261874((uint64_t *)a2, &v26);
      sub_20B261698((uint64_t)v29, (uint64_t)&v26);
      v23 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v23;
      *(_QWORD *)(a3 + 32) = v32;
      v26 = &off_24C4169B8;
      v19 = v28;
      if (v28)
      {
        v24 = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
LABEL_38:
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      break;
    default:
      return;
  }
}

void sub_20B261670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B261684(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_20B261698(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20B28523C(a2, 0);
  v11 = sub_20B286A40(a2);
  v12 = sub_20B286B78(a2);
  result = sub_20B286CB0(a2);
  v14 = result >> 2;
  v15 = v11;
  v16 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 0;
  else
    v18 = v16;
  HIDWORD(v19) = v18;
  LODWORD(v19) = 2;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v19;
  *(_DWORD *)(a1 + 16) = HIDWORD(v18);
  *(_QWORD *)(a1 + 20) = 0x200000001;
  *(_DWORD *)(a1 + 28) = v14;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = ((unint64_t)(result >> 2) << 32) | 2;
  if (HIDWORD(v18) * (_DWORD)v14 == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_20B261874(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v4 = (std::__shared_weak_count *)a1[1];
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = *a1;
    *a2 = &off_24C4169B8;
    if (v7)
    {
      a2[1] = v7;
      a2[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a2[1] = 0;
      a2[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a2[1] = 0;
    a2[2] = 0;
    *a2 = &off_24C4169B8;
  }
  v12 = (uint64_t *)a2[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_20B532360);
    abort();
  }
}

void sub_20B2619B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B285E60(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B2619CC(uint64_t a1, int a2, int a3, uint64_t a4, float a5)
{
  uint64_t v8;
  _OWORD *v9;
  BOOL v10;
  __int128 v11;
  __int128 v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  float v23;
  _BYTE v24[48];
  uint64_t (**v25)();
  uint64_t *v26;
  std::__shared_weak_count *v27;
  uint64_t v28[2];

  v23 = a5;
  *(_QWORD *)a1 = off_24C414E50;
  *(_DWORD *)(a1 + 8) = a2;
  v8 = a1 + 16;
  sub_20B260FD4(a2, a3, a4, a1 + 16);
  v9 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a4 + 24))
    v10 = *(_DWORD *)(a4 + 28) == 0;
  else
    v10 = 1;
  if (v10)
  {
    v11 = *(_OWORD *)a4;
    v12 = *(_OWORD *)(a4 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a4 + 32);
    *v9 = v11;
    *(_OWORD *)(a1 + 64) = v12;
  }
  else
  {
    sub_20B2613B8(a2, v8, (uint64_t)v9);
  }
  if ((sub_20B262554(a1) & 1) != 0)
    return a1;
  sub_20B262734(a1, &v25);
  sub_20B262828(a1, (uint64_t)v24);
  v28[0] = (uint64_t)v24;
  v28[1] = (uint64_t)&v23;
  v13.n128_f32[0] = sub_20B280688(v28);
  if (!v26)
    goto LABEL_16;
  v15 = *v26;
  v14 = (std::__shared_weak_count *)v26[1];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v13);
      std::__shared_weak_count::__release_weak(v14);
      if (!v15)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v15)
LABEL_15:
    sub_20B289BEC((uint64_t)v26);
LABEL_16:
  v25 = &off_24C4169B8;
  v19 = v27;
  if (!v27)
    return a1;
  v20 = (unint64_t *)&v27->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v19->__on_zero_shared)(v19, v13);
  std::__shared_weak_count::__release_weak(v19);
  return a1;
}

void sub_20B261B60(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B261B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_20B285900((uint64_t *)va);
  sub_20B261BA4(v8);
  _Unwind_Resume(a1);
}

void sub_20B261B90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B261BA4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B261BA4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414E50;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_20B261C08(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _OWORD v22[3];
  _BYTE v23[48];
  uint64_t (**v24)();
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27[2];

  *(_QWORD *)a1 = off_24C414E50;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_20B260FD4(0, 8, a2, a1 + 16);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_20B2613B8(0, v6, (uint64_t)v7);
  }
  v11 = a3[1];
  v22[0] = *a3;
  v22[1] = v11;
  v22[2] = a3[2];
  if ((sub_20B262554(a1) & 1) != 0)
    return a1;
  sub_20B262734(a1, &v24);
  sub_20B262828(a1, (uint64_t)v23);
  v27[0] = (uint64_t)v22;
  v27[1] = (uint64_t)v23;
  v12.n128_f32[0] = sub_20AFE84BC(v27);
  if (!v25)
    goto LABEL_16;
  v14 = *v25;
  v13 = (std::__shared_weak_count *)v25[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
      std::__shared_weak_count::__release_weak(v13);
      if (!v14)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v14)
LABEL_15:
    sub_20B289BEC((uint64_t)v25);
LABEL_16:
  v24 = &off_24C4169B8;
  v18 = v26;
  if (!v26)
    return a1;
  v19 = (unint64_t *)&v26->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v12);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_20B261DA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B261DBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20B285900((_QWORD *)(v2 - 72));
  sub_20B261BA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B261DD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B261BA4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B261DEC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;

  *(_QWORD *)a1 = off_24C414E50;
  v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_7:
    v4 = *(uint64_t **)(a2 + 8);
    if (v6)
      goto LABEL_8;
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v4 = *(uint64_t **)(a2 + 8);
  if (!v6)
    goto LABEL_12;
LABEL_8:
  v10 = *((_DWORD *)v4 + 4);
  if (v10 == 2)
    v11 = 2;
  else
    v11 = v10 == 1;
LABEL_13:
  *(_QWORD *)(a1 + 16) = &off_24C4169B8;
  *(_DWORD *)(a1 + 8) = v11;
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 40) = 0;
  sub_20B262024(a2, a1 + 48);
  v15 = *(_QWORD *)(a2 + 8);
  if (!v15)
  {
    v22 = 0;
    goto LABEL_31;
  }
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      v20 = *(uint64_t **)(a2 + 8);
      if (v20)
        goto LABEL_23;
LABEL_35:
      v22 = 0;
      if (!*(_DWORD *)(a1 + 72))
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  v20 = *(uint64_t **)(a2 + 8);
  if (!v20)
    goto LABEL_35;
LABEL_23:
  v22 = *v20;
  v21 = (std::__shared_weak_count *)v20[1];
  if (!v21)
    goto LABEL_31;
  v23 = (unint64_t *)&v21->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 - 1, v23));
  if (v25)
  {
LABEL_31:
    if (!*(_DWORD *)(a1 + 72))
      goto LABEL_36;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_36:
    if (!v22)
      return a1;
    goto LABEL_37;
  }
LABEL_32:
  if ((v22 == 0) == (*(_DWORD *)(a1 + 76) == 0))
    return a1;
LABEL_37:
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return a1;
}

void sub_20B262010(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

size_t sub_20B262024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  size_t result;
  unint64_t v13;
  uint64_t v14;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v10 = sub_20B286A40(a1);
  v11 = sub_20B286B78(a1);
  result = sub_20B286CB0(a1);
  v13 = v10 | ((unint64_t)v11 << 32);
  LODWORD(v14) = 2;
  HIDWORD(v14) = v13;
  *(_QWORD *)a2 = v14;
  *(_DWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 12) = 0x200000001;
  *(_DWORD *)(a2 + 20) = result >> 2;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = ((unint64_t)(result >> 2) << 32) | 2;
  return result;
}

void sub_20B262180(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C4169B8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
  sub_20B286DE8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C41E150;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C4169B8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20B2623BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B2623D0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24C4169B8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

uint64_t sub_20B262554(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B262734(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[2];
  std::__shared_weak_count *v9;

  v3 = a1 + 16;
  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    sub_20B2857F4(a2, v3);
  }
  else if (v4 > 1)
  {
    if (v4 != 3)
      sub_20AECFAB8();
    sub_20B261874((uint64_t *)(a1 + 16), v8);
    sub_20B2856E8(a2, (uint64_t)v8);
    v8[0] = &off_24C4169B8;
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    sub_20B2856E8(a2, v3);
  }
}

void sub_20B262814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B262828(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20B262554(a1))
  {
    if (*(_DWORD *)(a1 + 76))
      v4 = *(_DWORD *)(a1 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a1 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 2;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(DWORD1(v34), 2);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(_QWORD *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(_QWORD *)(a2 + 32) = v5;
    *(_QWORD *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a1 + 24);
        v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a1 + 24);
        v19 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a1 + 24);
        v15 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a1 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v34 = &off_24C4169B8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B261698(a2, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C4169B8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B262A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B262A9C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20B2854CC(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20B2853C0(a1, (uint64_t)v4);
      return;
    case 3:
      sub_20B261874(v4, v9);
      sub_20B2853C0(a1, (uint64_t)v9);
      v9[0] = &off_24C4169B8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B262B80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B262B94(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v6;
  BOOL v7;
  unsigned int v8;
  std::__shared_weak_count *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  __int128 v33;
  uint64_t (**v34)();
  __int128 v35;

  v6 = (unsigned int *)(a3 + 24);
  if (*(_DWORD *)(a3 + 24))
    v7 = *(_DWORD *)(a3 + 28) == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (a1 == 3)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 24) = 3;
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = &off_24C4169B8;
      *(_DWORD *)(a4 + 24) = 0;
    }
  }
  else
  {
    if ((a2 - 1) > 0x25)
      v8 = 0;
    else
      v8 = dword_20B5F1924[a2 - 1] | dword_20B5F188C[a2 - 1];
    __p = operator new(0x68uLL);
    v33 = xmmword_20B5EE7A0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20B285ED4((uint64_t)&v34, v6, v8, (uint64_t *)&__p, 0);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    switch(a1)
    {
      case 1:
        v10 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        if ((_QWORD)v10)
        {
          v14 = *(_QWORD *)v10;
          v13 = *(std::__shared_weak_count **)(v10 + 8);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          if (v14)
            sub_20B289920(v10);
        }
        *(_OWORD *)(a4 + 8) = v10;
        *(_QWORD *)a4 = &off_24C416978;
        *(_DWORD *)(a4 + 24) = 1;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 2:
        v18 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        if ((_QWORD)v18)
        {
          v22 = *(_QWORD *)v18;
          v21 = *(std::__shared_weak_count **)(v18 + 8);
          if (v21)
          {
            v23 = (unint64_t *)&v21->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            do
              v25 = __ldaxr(v23);
            while (__stlxr(v25 - 1, v23));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (v22)
            sub_20B289A10(v18);
        }
        *(_OWORD *)(a4 + 8) = v18;
        *(_QWORD *)a4 = &off_24C416998;
        *(_DWORD *)(a4 + 24) = 2;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 3:
        v26 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 16);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          do
            v29 = __ldxr(v27);
          while (__stxr(v29 + 1, v27));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
        }
        *(_OWORD *)a4 = v26;
        *(_DWORD *)(a4 + 24) = 3;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      default:
        *(_QWORD *)a4 = &off_24C4169B8;
        *(_OWORD *)(a4 + 8) = v35;
        v35 = 0uLL;
        *(_DWORD *)(a4 + 24) = 0;
        v34 = &off_24C4169B8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
        {
LABEL_51:
          v30 = (unint64_t *)&v9->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        break;
    }
  }
}

void sub_20B262EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a4);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B262F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B262F78(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t (**v26)();
  uint64_t *v27;
  std::__shared_weak_count *v28;
  char v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24))
        goto LABEL_39;
      v4 = *(uint64_t **)(a2 + 8);
      v5 = *(std::__shared_weak_count **)(a2 + 16);
      v27 = v4;
      v28 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v26 = &off_24C416978;
      if (v4)
      {
        v9 = *v4;
        v8 = (std::__shared_weak_count *)v4[1];
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
          do
            v12 = __ldaxr(v10);
          while (__stlxr(v12 - 1, v10));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        if (v9)
          sub_20B289920((uint64_t)v27);
      }
      sub_20B263258((uint64_t)v29, (uint64_t)&v26);
      v13 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v13;
      *(_QWORD *)(a3 + 32) = v32;
      if (v27)
      {
        v15 = *v27;
        v14 = (std::__shared_weak_count *)v27[1];
        if (v14)
        {
          v16 = (unint64_t *)&v14->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
          do
            v18 = __ldaxr(v16);
          while (__stlxr(v18 - 1, v16));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        if (v15)
          sub_20B289AFC((uint64_t)v27);
      }
      v26 = &off_24C4169B8;
      v19 = v28;
      if (!v28)
        return;
      v20 = (unint64_t *)&v28->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (v21)
        return;
      goto LABEL_38;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1)
        goto LABEL_39;
      goto LABEL_32;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2)
        goto LABEL_39;
LABEL_32:
      sub_20B263258((uint64_t)v29, a2);
      v22 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v22;
      *(_QWORD *)(a3 + 32) = v32;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3)
LABEL_39:
        sub_20AECFAB8();
      sub_20B263434((uint64_t *)a2, &v26);
      sub_20B263258((uint64_t)v29, (uint64_t)&v26);
      v23 = v31;
      *(_OWORD *)a3 = v30;
      *(_OWORD *)(a3 + 16) = v23;
      *(_QWORD *)(a3 + 32) = v32;
      v26 = &off_24C4169B8;
      v19 = v28;
      if (v28)
      {
        v24 = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
LABEL_38:
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      break;
    default:
      return;
  }
}

void sub_20B263230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B263244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_20B263258(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20B28523C(a2, 0);
  v11 = sub_20B286A40(a2);
  v12 = sub_20B286B78(a2);
  result = sub_20B286CB0(a2);
  v14 = result >> 2;
  v15 = v11;
  v16 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 0;
  else
    v18 = v16;
  HIDWORD(v19) = v18;
  LODWORD(v19) = 4;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v19;
  *(_DWORD *)(a1 + 16) = HIDWORD(v18);
  *(_QWORD *)(a1 + 20) = 0x400000001;
  *(_DWORD *)(a1 + 28) = v14;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = ((unint64_t)(result >> 2) << 32) | 4;
  if (HIDWORD(v18) * (_DWORD)v14 == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_20B263434(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v4 = (std::__shared_weak_count *)a1[1];
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = *a1;
    *a2 = &off_24C4169B8;
    if (v7)
    {
      a2[1] = v7;
      a2[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a2[1] = 0;
      a2[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a2[1] = 0;
    a2[2] = 0;
    *a2 = &off_24C4169B8;
  }
  v12 = (uint64_t *)a2[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_20B532360);
    abort();
  }
}

void sub_20B263578(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B285E60(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B26358C(uint64_t a1, int a2, int a3, uint64_t a4, float a5)
{
  uint64_t v8;
  _OWORD *v9;
  BOOL v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  float v22;
  _BYTE v23[48];
  uint64_t (**v24)();
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27[2];

  v22 = a5;
  *(_QWORD *)a1 = off_24C414EE0;
  *(_DWORD *)(a1 + 8) = a2;
  v8 = a1 + 16;
  sub_20B262B94(a2, a3, a4, a1 + 16);
  v9 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a4 + 24))
    v10 = *(_DWORD *)(a4 + 28) == 0;
  else
    v10 = 1;
  if (v10)
  {
    v11 = *(_OWORD *)a4;
    v12 = *(_OWORD *)(a4 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a4 + 32);
    *v9 = v11;
    *(_OWORD *)(a1 + 64) = v12;
  }
  else
  {
    sub_20B262F78(a2, v8, (uint64_t)v9);
  }
  if ((sub_20B264164(a1) & 1) != 0)
    return a1;
  sub_20B264344(a1, &v24);
  sub_20B264438(a1, (uint64_t)v23);
  v27[0] = (uint64_t)v23;
  v27[1] = (uint64_t)&v22;
  sub_20B280EC4(v27);
  if (!v25)
    goto LABEL_16;
  v14 = *v25;
  v13 = (std::__shared_weak_count *)v25[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (!v14)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v14)
LABEL_15:
    sub_20B289BEC((uint64_t)v25);
LABEL_16:
  v24 = &off_24C4169B8;
  v18 = v26;
  if (!v26)
    return a1;
  v19 = (unint64_t *)&v26->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_20B263720(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B263734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_20B285900((uint64_t *)va);
  sub_20B263764(v8);
  _Unwind_Resume(a1);
}

void sub_20B263750(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B263764(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B263764(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414EE0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_20B2637C8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[20];
  int v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  uint64_t v30[2];
  char v31;
  char *v32;

  *(_QWORD *)a1 = off_24C414EE0;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_20B262B94(0, 32, a2, a1 + 16);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_20B262F78(0, v6, (uint64_t)v7);
  }
  v11 = a3[1];
  v22 = *a3;
  v23 = v11;
  v24 = a3[2];
  if ((sub_20B264164(a1) & 1) != 0)
    return a1;
  sub_20B264344(a1, &v27);
  sub_20B264438(a1, (uint64_t)v25);
  v30[0] = (uint64_t)&v22;
  v30[1] = (uint64_t)v25;
  if (DWORD1(v23) == 1 && v26 == 1)
  {
    sub_20AFC9A3C(v30);
  }
  else
  {
    v31 = 0;
    if (DWORD2(v22) && HIDWORD(v22) && (_DWORD)v23)
    {
      v32 = &v31;
      v12.n128_f32[0] = sub_20AFEB5FC((uint64_t)&v32, (uint64_t)&v22, (uint64_t)v25);
    }
  }
  if (!v28)
    goto LABEL_23;
  v14 = *v28;
  v13 = (std::__shared_weak_count *)v28[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
      std::__shared_weak_count::__release_weak(v13);
      if (!v14)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  if (v14)
LABEL_22:
    sub_20B289BEC((uint64_t)v28);
LABEL_23:
  v27 = &off_24C4169B8;
  v18 = v29;
  if (!v29)
    return a1;
  v19 = (unint64_t *)&v29->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v12);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_20B2639B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

void sub_20B2639CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20B285900((_QWORD *)(v2 - 88));
  sub_20B263764(v1);
  _Unwind_Resume(a1);
}

void sub_20B2639E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B263764(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B2639FC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;

  *(_QWORD *)a1 = off_24C414EE0;
  v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_7:
    v4 = *(uint64_t **)(a2 + 8);
    if (v6)
      goto LABEL_8;
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v4 = *(uint64_t **)(a2 + 8);
  if (!v6)
    goto LABEL_12;
LABEL_8:
  v10 = *((_DWORD *)v4 + 4);
  if (v10 == 2)
    v11 = 2;
  else
    v11 = v10 == 1;
LABEL_13:
  *(_QWORD *)(a1 + 16) = &off_24C4169B8;
  *(_DWORD *)(a1 + 8) = v11;
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 40) = 0;
  sub_20B263C34(a2, a1 + 48);
  v15 = *(_QWORD *)(a2 + 8);
  if (!v15)
  {
    v22 = 0;
    goto LABEL_31;
  }
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      v20 = *(uint64_t **)(a2 + 8);
      if (v20)
        goto LABEL_23;
LABEL_35:
      v22 = 0;
      if (!*(_DWORD *)(a1 + 72))
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  v20 = *(uint64_t **)(a2 + 8);
  if (!v20)
    goto LABEL_35;
LABEL_23:
  v22 = *v20;
  v21 = (std::__shared_weak_count *)v20[1];
  if (!v21)
    goto LABEL_31;
  v23 = (unint64_t *)&v21->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 - 1, v23));
  if (v25)
  {
LABEL_31:
    if (!*(_DWORD *)(a1 + 72))
      goto LABEL_36;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_36:
    if (!v22)
      return a1;
    goto LABEL_37;
  }
LABEL_32:
  if ((v22 == 0) == (*(_DWORD *)(a1 + 76) == 0))
    return a1;
LABEL_37:
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return a1;
}

void sub_20B263C20(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B24EFA4(v1);
  _Unwind_Resume(a1);
}

size_t sub_20B263C34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  size_t result;
  unint64_t v13;
  uint64_t v14;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
LABEL_9:
  v10 = sub_20B286A40(a1);
  v11 = sub_20B286B78(a1);
  result = sub_20B286CB0(a1);
  v13 = v10 | ((unint64_t)v11 << 32);
  LODWORD(v14) = 4;
  HIDWORD(v14) = v13;
  *(_QWORD *)a2 = v14;
  *(_DWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 12) = 0x400000001;
  *(_DWORD *)(a2 + 20) = result >> 2;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = ((unint64_t)(result >> 2) << 32) | 4;
  return result;
}

void sub_20B263D90(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C4169B8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C4169B8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
  sub_20B286DE8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C41E150;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C4169B8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20B263FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B263FE0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24C4169B8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24C4169B8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24C4169B8;
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

uint64_t sub_20B264164(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B264344(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[2];
  std::__shared_weak_count *v9;

  v3 = a1 + 16;
  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    sub_20B2857F4(a2, v3);
  }
  else if (v4 > 1)
  {
    if (v4 != 3)
      sub_20AECFAB8();
    sub_20B263434((uint64_t *)(a1 + 16), v8);
    sub_20B2856E8(a2, (uint64_t)v8);
    v8[0] = &off_24C4169B8;
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    sub_20B2856E8(a2, v3);
  }
}

void sub_20B264424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B264438(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20B264164(a1))
  {
    if (*(_DWORD *)(a1 + 76))
      v4 = *(_DWORD *)(a1 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a1 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(_QWORD *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(_QWORD *)(a2 + 32) = v5;
    *(_QWORD *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a1 + 24);
        v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a1 + 24);
        v19 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a1 + 24);
        v15 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a1 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v34 = &off_24C4169B8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B263258(a2, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C4169B8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B264698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B2646AC(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20B2854CC(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20B2853C0(a1, (uint64_t)v4);
      return;
    case 3:
      sub_20B263434(v4, v9);
      sub_20B2853C0(a1, (uint64_t)v9);
      v9[0] = &off_24C4169B8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_20AECFAB8();
  }
}

void sub_20B264790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B2647A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (**v28)();
  uint64_t *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  __int128 v32;

  *(_QWORD *)a1 = off_24C414F70;
  v3 = *(unsigned int *)(a2 + 8);
  LODWORD(v4) = *(_DWORD *)(a2 + 12);
  if (v4 <= 0x20)
    v4 = 32;
  else
    v4 = v4;
  *(_QWORD *)&v27 = *(_QWORD *)a2;
  *((_QWORD *)&v27 + 1) = v3 | (v4 << 32);
  *(_QWORD *)a1 = off_24C414820;
  *(_DWORD *)(a1 + 8) = 0;
  sub_20B24E3EC(0, 1, (unsigned int *)&v27, a1 + 16);
  if (!(_DWORD)v27 || !DWORD1(v27))
  {
    v14 = v27;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_20AECFAB8();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v29 = v5;
  v30 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v28 = &off_24C416978;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_16;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_16:
      if (!v10)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
LABEL_17:
      sub_20B289920((uint64_t)v29);
  }
LABEL_18:
  sub_20B24EAB8((uint64_t)&v28, &v31);
  v14 = v32;
  if (v29)
  {
    v16 = *v29;
    v15 = (std::__shared_weak_count *)v29[1];
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        v26 = v14;
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        v14 = v26;
        if (!v16)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v16)
    {
LABEL_25:
      v24 = v14;
      sub_20B289AFC((uint64_t)v29);
      v14 = v24;
    }
  }
LABEL_26:
  v28 = &off_24C4169B8;
  v20 = v30;
  if (v30)
  {
    v21 = (unint64_t *)&v30->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      v25 = v14;
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v14 = v25;
    }
  }
LABEL_32:
  *(_OWORD *)(a1 + 48) = v14;
  *(_QWORD *)a1 = off_24C414F70;
  return a1;
}

void sub_20B2649C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t (**a18)(), uint64_t a19, std::__shared_weak_count *a20)
{
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;

  a18 = &off_24C4169B8;
  v23 = a20;
  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(unsigned int *)(v20 + 40);
  if ((_DWORD)v26 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v26])(&a17, v21);
  *(_DWORD *)(v20 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B264A58(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414820;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20B264ABC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_20B24F8D8(a1))
  {
    if (*(_DWORD *)(a1 + 52))
      v4 = *(_DWORD *)(a1 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a1 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a2 = 0;
    a2[1] = v5;
    a2[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a1 + 24);
        v7 = *(std::__shared_weak_count **)(a1 + 32);
        v30 = &off_24C4169B8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a1 + 24);
        v15 = *(std::__shared_weak_count **)(a1 + 32);
        v30 = &off_24C4169B8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a1 + 24);
        v11 = *(std::__shared_weak_count **)(a1 + 32);
        v30 = &off_24C4169B8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a1 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a1 + 16);
          v30 = &off_24C4169B8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B24EAB8((uint64_t)&v30, a2);
    v30 = &off_24C4169B8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20B264CF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B264D08(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t (**v32)();
  uint64_t v33;
  std::__shared_weak_count *v34;

  if (sub_20B24F8D8(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C4169B8;
        v33 = v8;
        v34 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C4169B8;
        v33 = v16;
        v34 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C4169B8;
        v33 = v12;
        v34 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v32 = &off_24C4169B8;
          if (v22)
          {
            v33 = v22;
            v34 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v33 = 0;
            v34 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v33 = 0;
          v34 = 0;
          v32 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B24EAB8((uint64_t)&v32, &v30);
    *a1 = v30;
    *(_OWORD *)(a1 + 1) = v31;
    v32 = &off_24C4169B8;
    v27 = v34;
    if (v34)
    {
      v28 = (unint64_t *)&v34->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20B264F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B264F68()
{
  return 1;
}

_UNKNOWN **sub_20B264F70()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B380);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B380))
    return &off_253EC31A0;
  __cxa_guard_release(&qword_25463B380);
  return &off_253EC31A0;
}

void sub_20B264FC4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[2];

  sub_20B24FDF8(&v20, a1);
  sub_20B264D08(v17, a1);
  sub_20B264D08(&v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23 = v15;
  v24 = v16;
  *v4 = off_24C414F70;
  if (v19 <= 0x20)
    v6 = 32;
  else
    v6 = v19;
  v25[0] = v17[1];
  v25[1] = v18 | (unint64_t)(v6 << 32);
  sub_20B24EFFC((uint64_t)v4, (unsigned int *)v25, &v23);
  *v5 = off_24C414F70;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20B289AFC((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C4169B8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B265140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  MEMORY[0x20BD3583C](v8, 0x10A3C40A1F8E8FFLL);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B26516C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B265180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B265194(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B24FDF8(a2, a1);
}

double sub_20B2651A0(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[3];
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t (**v28)();
  __int128 *v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[2];

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C415900, 0);
  if (!v4)
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v31, lpsrc, 1);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
    v22 = *(_OWORD *)v31;
    v23[0] = v18;
    *(_QWORD *)&v31 = 0;
    MEMORY[0x20BD3583C](v17, 0xC400A2AC0F1, v19);
    sub_20B264ABC(a1, (uint64_t *)&v31);
    v28 = (uint64_t (**)())&v22;
    v29 = &v31;
    sub_20AFC3DF8((size_t *)&v28);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_20B24FDF8(&v28, (uint64_t)v4);
  sub_20B264D08(&v26, v5);
  v31 = v26;
  v32 = v27;
  if (HIDWORD(v27) <= 0x20)
    v6 = 32;
  else
    v6 = HIDWORD(v27);
  *(_QWORD *)&v22 = off_24C414F70;
  v33[0] = *((_QWORD *)&v26 + 1);
  v33[1] = v27 | (unint64_t)(v6 << 32);
  sub_20B24EFFC((uint64_t)&v22, (unsigned int *)v33, &v31);
  *(_QWORD *)&v22 = off_24C414F70;
  if (v29)
  {
    v8 = *(_QWORD *)v29;
    v7 = (std::__shared_weak_count *)*((_QWORD *)v29 + 1);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20B289AFC((uint64_t)v29);
  }
LABEL_13:
  v28 = &off_24C4169B8;
  v12 = v30;
  if (v30)
  {
    v13 = (unint64_t *)&v30->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v24;
  *(_DWORD *)(a1 + 8) = DWORD2(v22);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v25;
      *(_OWORD *)(a1 + 48) = v25;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(__int128 *, uint64_t))off_24C415AE0[v16])(&v31, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_25;
  }
  *(_QWORD *)&v31 = a1 + 16;
  ((void (*)(__int128 *))off_24C415B20[v15])(&v31);
LABEL_25:
  v21 = v24;
  result = *(double *)&v25;
  *(_OWORD *)(a1 + 48) = v25;
  *(_QWORD *)&v22 = off_24C414820;
  if ((_DWORD)v21 != -1)
    ((void (*)(__int128 *, _QWORD *))off_24C415AE0[v21])(&v31, v23);
  return result;
}

void sub_20B265430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  if (a14 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24C415AE0[a14])(&a20, v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B26551C(uint64_t a1)
{
  uint64_t v2[3];

  sub_20B264ABC(a1, v2);
  return v2[0];
}

double sub_20B265540@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B264ABC(a1, (uint64_t *)&v7);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *a3 = v5;
  return result;
}

double sub_20B2655E0@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B264D08(&v7, a1);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *a3 = v5;
  return result;
}

__int128 *sub_20B265680()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B388);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B388))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_25463B390);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463B390))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25463B398);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B398))
    {
LABEL_13:
      if (byte_25463B66F < 0)
      {
        sub_20AEC60F4(&xmmword_25463B640, (void *)qword_25463B658, unk_25463B660);
      }
      else
      {
        xmmword_25463B640 = *(_OWORD *)&qword_25463B658;
        unk_25463B650 = unk_25463B668;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B640, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B390);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_25463B3A0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463B3A0))
    {
      sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray8u>]", &qword_25463B670);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463B670, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B3A0);
    }
    v5 = atomic_load((unsigned __int8 *)&byte_25463B3A8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire((__guard *)&byte_25463B3A8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_25463B3B0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25463B3B0))
      {
        if (byte_25463B688[23] < 0)
          sub_20AEC60F4(&__p, *(void **)byte_25463B688, *(unint64_t *)&byte_25463B688[8]);
        else
          __p = *(std::string *)byte_25463B688;
        sub_20B52B814(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_25463B6A0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B6A0, &dword_20AEBB000);
        __cxa_guard_release(&qword_25463B3B0);
      }
      if (byte_25463B6B7 < 0)
      {
        sub_20AEC60F4(v17, (void *)xmmword_25463B6A0, *((unint64_t *)&xmmword_25463B6A0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_25463B6A0;
        v18 = unk_25463B6B0;
      }
      sub_20AFC38F0((char *)v17, (std::string *)&qword_25463B658);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463B658, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B398);
      goto LABEL_13;
    }
    if (byte_25463B687 >= 0)
      v6 = byte_25463B687;
    else
      v6 = unk_25463B678;
    if (byte_25463B687 >= 0)
      v7 = &qword_25463B670;
    else
      v7 = (uint64_t *)qword_25463B670;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_25463B688[8] = v6;
      *(_QWORD *)&byte_25463B688[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_25463B688 = v13;
    }
    else
    {
      v13 = byte_25463B688;
      byte_25463B688[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25463B688, &dword_20AEBB000);
    __cxa_guard_release((__guard *)&byte_25463B3A8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_25463B657 < 0)
  {
    sub_20AEC60F4(&xmmword_25463B628, (void *)xmmword_25463B640, *((unint64_t *)&xmmword_25463B640 + 1));
  }
  else
  {
    xmmword_25463B628 = xmmword_25463B640;
    unk_25463B638 = unk_25463B650;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B628, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463B388);
LABEL_2:
  if (byte_25463B63F >= 0)
    return &xmmword_25463B628;
  else
    return (__int128 *)xmmword_25463B628;
}

void sub_20B265AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25463B398);
  __cxa_guard_abort(&qword_25463B390);
  __cxa_guard_abort(&qword_25463B388);
  _Unwind_Resume(a1);
}

void sub_20B265B70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B388);
  _Unwind_Resume(a1);
}

void sub_20B265B88()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B265BC4(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20B24FAB8(a1, &v39);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24C416998;
    *v4 = &off_24C415770;
    sub_20B2857F4(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20B289BEC(v42);
    }
LABEL_10:
    v41 = &off_24C4169B8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20B289BEC(v40);
LABEL_22:
    v39 = &off_24C4169B8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20B24FDF8(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24C416978;
  *v22 = &off_24C415750;
  sub_20B2854CC(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20B289AFC(v42);
  }
LABEL_35:
  v41 = &off_24C4169B8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20B289AFC(v40);
LABEL_47:
  v39 = &off_24C4169B8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20B265F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B2855D8(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B265F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B265FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B285900(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

void sub_20B265FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B265FF4()
{
  return 65792;
}

uint64_t sub_20B266004(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (**v28)();
  uint64_t *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  __int128 v32;

  *(_QWORD *)a1 = off_24C415000;
  v3 = *(unsigned int *)(a2 + 8);
  LODWORD(v4) = *(_DWORD *)(a2 + 12);
  if (v4 <= 0x10)
    v4 = 16;
  else
    v4 = v4;
  *(_QWORD *)&v27 = *(_QWORD *)a2;
  *((_QWORD *)&v27 + 1) = v3 | (v4 << 32);
  *(_QWORD *)a1 = off_24C414A60;
  *(_DWORD *)(a1 + 8) = 0;
  sub_20B25536C(0, 2, (unsigned int *)&v27, a1 + 16);
  if (!(_DWORD)v27 || !DWORD1(v27))
  {
    v14 = v27;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_20AECFAB8();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v29 = v5;
  v30 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v28 = &off_24C416978;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_16;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_16:
      if (!v10)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
LABEL_17:
      sub_20B289920((uint64_t)v29);
  }
LABEL_18:
  sub_20B255A34((uint64_t)&v28, &v31);
  v14 = v32;
  if (v29)
  {
    v16 = *v29;
    v15 = (std::__shared_weak_count *)v29[1];
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        v26 = v14;
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        v14 = v26;
        if (!v16)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v16)
    {
LABEL_25:
      v24 = v14;
      sub_20B289AFC((uint64_t)v29);
      v14 = v24;
    }
  }
LABEL_26:
  v28 = &off_24C4169B8;
  v20 = v30;
  if (v30)
  {
    v21 = (unint64_t *)&v30->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      v25 = v14;
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v14 = v25;
    }
  }
LABEL_32:
  *(_OWORD *)(a1 + 48) = v14;
  *(_QWORD *)a1 = off_24C415000;
  return a1;
}

void sub_20B266220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t (**a18)(), uint64_t a19, std::__shared_weak_count *a20)
{
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;

  a18 = &off_24C4169B8;
  v23 = a20;
  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(unsigned int *)(v20 + 40);
  if ((_DWORD)v26 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v26])(&a17, v21);
  *(_DWORD *)(v20 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B2662B8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414A60;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20B26631C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_20B256814(a1))
  {
    if (*(_DWORD *)(a1 + 52))
      v4 = *(_DWORD *)(a1 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a1 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a2 = 0;
    a2[1] = v5;
    a2[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a1 + 24);
        v7 = *(std::__shared_weak_count **)(a1 + 32);
        v30 = &off_24C4169B8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a1 + 24);
        v15 = *(std::__shared_weak_count **)(a1 + 32);
        v30 = &off_24C4169B8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a1 + 24);
        v11 = *(std::__shared_weak_count **)(a1 + 32);
        v30 = &off_24C4169B8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a1 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a1 + 16);
          v30 = &off_24C4169B8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B255A34((uint64_t)&v30, a2);
    v30 = &off_24C4169B8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20B266554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B266568(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t (**v32)();
  uint64_t v33;
  std::__shared_weak_count *v34;

  if (sub_20B256814(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C4169B8;
        v33 = v8;
        v34 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C4169B8;
        v33 = v16;
        v34 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C4169B8;
        v33 = v12;
        v34 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v32 = &off_24C4169B8;
          if (v22)
          {
            v33 = v22;
            v34 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v33 = 0;
            v34 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v33 = 0;
          v34 = 0;
          v32 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B255A34((uint64_t)&v32, &v30);
    *a1 = v30;
    *(_OWORD *)(a1 + 1) = v31;
    v32 = &off_24C4169B8;
    v27 = v34;
    if (v34)
    {
      v28 = (unint64_t *)&v34->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20B2667B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B2667C8()
{
  return 2;
}

_UNKNOWN **sub_20B2667D0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B380);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B380))
    return &off_253EC31A0;
  __cxa_guard_release(&qword_25463B380);
  return &off_253EC31A0;
}

void sub_20B266824(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[2];

  sub_20B256D38(&v20, a1);
  sub_20B266568(v17, a1);
  sub_20B266568(&v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23 = v15;
  v24 = v16;
  *v4 = off_24C415000;
  if (v19 <= 0x10)
    v6 = 16;
  else
    v6 = v19;
  v25[0] = v17[1];
  v25[1] = v18 | (unint64_t)(v6 << 32);
  sub_20B255F3C((uint64_t)v4, (unsigned int *)v25, &v23);
  *v5 = off_24C415000;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20B289AFC((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C4169B8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B2669A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  MEMORY[0x20BD3583C](v8, 0x10A3C40A1F8E8FFLL);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B2669CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B2669E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B2669F4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B256D38(a2, a1);
}

double sub_20B266A00(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[3];
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t (**v28)();
  uint64_t *v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[2];

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C415918, 0);
  if (!v4)
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v31, lpsrc, 2);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
    v22 = *(_OWORD *)v31;
    v23[0] = v18;
    *(_QWORD *)&v31 = 0;
    MEMORY[0x20BD3583C](v17, 0xC400A2AC0F1, v19);
    sub_20B26631C(a1, (uint64_t *)&v31);
    sub_20AFC48E4((uint64_t *)&v22, (uint64_t)&v31);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_20B256D38(&v28, (uint64_t)v4);
  sub_20B266568(&v26, v5);
  v31 = v26;
  v32 = v27;
  if (HIDWORD(v27) <= 0x10)
    v6 = 16;
  else
    v6 = HIDWORD(v27);
  *(_QWORD *)&v22 = off_24C415000;
  v33[0] = *((_QWORD *)&v26 + 1);
  v33[1] = v27 | (unint64_t)(v6 << 32);
  sub_20B255F3C((uint64_t)&v22, (unsigned int *)v33, &v31);
  *(_QWORD *)&v22 = off_24C415000;
  if (v29)
  {
    v8 = *v29;
    v7 = (std::__shared_weak_count *)v29[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20B289AFC((uint64_t)v29);
  }
LABEL_13:
  v28 = &off_24C4169B8;
  v12 = v30;
  if (v30)
  {
    v13 = (unint64_t *)&v30->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v24;
  *(_DWORD *)(a1 + 8) = DWORD2(v22);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v25;
      *(_OWORD *)(a1 + 48) = v25;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(__int128 *, uint64_t))off_24C415AE0[v16])(&v31, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_25;
  }
  *(_QWORD *)&v31 = a1 + 16;
  ((void (*)(__int128 *))off_24C415B20[v15])(&v31);
LABEL_25:
  v21 = v24;
  result = *(double *)&v25;
  *(_OWORD *)(a1 + 48) = v25;
  *(_QWORD *)&v22 = off_24C414A60;
  if ((_DWORD)v21 != -1)
    ((void (*)(__int128 *, _QWORD *))off_24C415AE0[v21])(&v31, v23);
  return result;
}

void sub_20B266C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  if (a14 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24C415AE0[a14])(&a20, v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B266D74(uint64_t a1)
{
  uint64_t v2[3];

  sub_20B26631C(a1, v2);
  return v2[0];
}

double sub_20B266D98@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 2
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B26631C(a1, (uint64_t *)&v7);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *a3 = v5;
  return result;
}

double sub_20B266E38@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 2
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B266568(&v7, a1);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *a3 = v5;
  return result;
}

__int128 *sub_20B266ED8()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B3B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B3B8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_25463B3C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463B3C0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25463B3C8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B3C8))
    {
LABEL_13:
      if (byte_25463B6FF < 0)
      {
        sub_20AEC60F4(&xmmword_25463B6D0, (void *)qword_25463B6E8, unk_25463B6F0);
      }
      else
      {
        xmmword_25463B6D0 = *(_OWORD *)&qword_25463B6E8;
        unk_25463B6E0 = unk_25463B6F8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B6D0, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B3C0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_25463B3D0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463B3D0))
    {
      sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray16u>]", &qword_25463B700);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463B700, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B3D0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_25463B3D8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B3D8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_25463B3E0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25463B3E0))
      {
        if (byte_25463B718[23] < 0)
          sub_20AEC60F4(&__p, *(void **)byte_25463B718, *(unint64_t *)&byte_25463B718[8]);
        else
          __p = *(std::string *)byte_25463B718;
        sub_20B52B814(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_25463B730);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B730, &dword_20AEBB000);
        __cxa_guard_release(&qword_25463B3E0);
      }
      if (byte_25463B747 < 0)
      {
        sub_20AEC60F4(v17, (void *)xmmword_25463B730, *((unint64_t *)&xmmword_25463B730 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_25463B730;
        v18 = unk_25463B740;
      }
      sub_20AFC43B8((char *)v17, (std::string *)&qword_25463B6E8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463B6E8, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B3C8);
      goto LABEL_13;
    }
    if (byte_25463B717 >= 0)
      v6 = byte_25463B717;
    else
      v6 = unk_25463B708;
    if (byte_25463B717 >= 0)
      v7 = &qword_25463B700;
    else
      v7 = (uint64_t *)qword_25463B700;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_25463B718[8] = v6;
      *(_QWORD *)&byte_25463B718[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_25463B718 = v13;
    }
    else
    {
      v13 = byte_25463B718;
      byte_25463B718[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25463B718, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B3D8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_25463B6E7 < 0)
  {
    sub_20AEC60F4(&xmmword_25463B6B8, (void *)xmmword_25463B6D0, *((unint64_t *)&xmmword_25463B6D0 + 1));
  }
  else
  {
    xmmword_25463B6B8 = xmmword_25463B6D0;
    unk_25463B6C8 = unk_25463B6E0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B6B8, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463B3B8);
LABEL_2:
  if (byte_25463B6CF >= 0)
    return &xmmword_25463B6B8;
  else
    return (__int128 *)xmmword_25463B6B8;
}

void sub_20B26732C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25463B3C8);
  __cxa_guard_abort(&qword_25463B3C0);
  __cxa_guard_abort(&qword_25463B3B8);
  _Unwind_Resume(a1);
}

void sub_20B2673C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B3B8);
  _Unwind_Resume(a1);
}

void sub_20B2673E0()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B26741C(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20B2569F4(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24C416998;
    *v4 = &off_24C415770;
    sub_20B2857F4(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20B289BEC(v42);
    }
LABEL_10:
    v41 = &off_24C4169B8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20B289BEC(v40);
LABEL_22:
    v39 = &off_24C4169B8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20B256D38(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24C416978;
  *v22 = &off_24C415750;
  sub_20B2854CC(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20B289AFC(v42);
  }
LABEL_35:
  v41 = &off_24C4169B8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20B289AFC(v40);
LABEL_47:
  v39 = &off_24C4169B8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20B2677B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B2855D8(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B2677EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B267800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B285900(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

void sub_20B267834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B267848()
{
  return 65792;
}

void sub_20B267854(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B2569F4(a2, a1);
}

uint64_t sub_20B267860(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (**v28)();
  uint64_t *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  __int128 v32;

  *(_QWORD *)a1 = off_24C415090;
  v3 = *(unsigned int *)(a2 + 8);
  LODWORD(v4) = *(_DWORD *)(a2 + 12);
  if (v4 <= 0x10)
    v4 = 16;
  else
    v4 = v4;
  *(_QWORD *)&v27 = *(_QWORD *)a2;
  *((_QWORD *)&v27 + 1) = v3 | (v4 << 32);
  *(_QWORD *)a1 = off_24C414C10;
  *(_DWORD *)(a1 + 8) = 0;
  sub_20B25A738(0, 3, (unsigned int *)&v27, a1 + 16);
  if (!(_DWORD)v27 || !DWORD1(v27))
  {
    v14 = v27;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_20AECFAB8();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v29 = v5;
  v30 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v28 = &off_24C416978;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_16;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_16:
      if (!v10)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
LABEL_17:
      sub_20B289920((uint64_t)v29);
  }
LABEL_18:
  sub_20B255A34((uint64_t)&v28, &v31);
  v14 = v32;
  if (v29)
  {
    v16 = *v29;
    v15 = (std::__shared_weak_count *)v29[1];
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        v26 = v14;
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        v14 = v26;
        if (!v16)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v16)
    {
LABEL_25:
      v24 = v14;
      sub_20B289AFC((uint64_t)v29);
      v14 = v24;
    }
  }
LABEL_26:
  v28 = &off_24C4169B8;
  v20 = v30;
  if (v30)
  {
    v21 = (unint64_t *)&v30->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      v25 = v14;
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v14 = v25;
    }
  }
LABEL_32:
  *(_OWORD *)(a1 + 48) = v14;
  *(_QWORD *)a1 = off_24C415090;
  return a1;
}

void sub_20B267A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t (**a18)(), uint64_t a19, std::__shared_weak_count *a20)
{
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;

  a18 = &off_24C4169B8;
  v23 = a20;
  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(unsigned int *)(v20 + 40);
  if ((_DWORD)v26 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v26])(&a17, v21);
  *(_DWORD *)(v20 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B267B14(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414C10;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20B267B78(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_20B25B998(a1))
  {
    if (*(_DWORD *)(a1 + 52))
      v4 = *(_DWORD *)(a1 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a1 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a2 = 0;
    a2[1] = v5;
    a2[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a1 + 24);
        v7 = *(std::__shared_weak_count **)(a1 + 32);
        v30 = &off_24C4169B8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a1 + 24);
        v15 = *(std::__shared_weak_count **)(a1 + 32);
        v30 = &off_24C4169B8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a1 + 24);
        v11 = *(std::__shared_weak_count **)(a1 + 32);
        v30 = &off_24C4169B8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a1 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a1 + 16);
          v30 = &off_24C4169B8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B255A34((uint64_t)&v30, a2);
    v30 = &off_24C4169B8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20B267DB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B267DC4(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t (**v32)();
  uint64_t v33;
  std::__shared_weak_count *v34;

  if (sub_20B25B998(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C4169B8;
        v33 = v8;
        v34 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C4169B8;
        v33 = v16;
        v34 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C4169B8;
        v33 = v12;
        v34 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v32 = &off_24C4169B8;
          if (v22)
          {
            v33 = v22;
            v34 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v33 = 0;
            v34 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v33 = 0;
          v34 = 0;
          v32 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B255A34((uint64_t)&v32, &v30);
    *a1 = v30;
    *(_OWORD *)(a1 + 1) = v31;
    v32 = &off_24C4169B8;
    v27 = v34;
    if (v34)
    {
      v28 = (unint64_t *)&v34->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20B268010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B268024()
{
  return 3;
}

_UNKNOWN **sub_20B26802C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B380);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B380))
    return &off_253EC31A0;
  __cxa_guard_release(&qword_25463B380);
  return &off_253EC31A0;
}

void sub_20B268080(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[2];

  sub_20B25BEBC(&v20, a1);
  sub_20B267DC4(v17, a1);
  sub_20B267DC4(&v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23 = v15;
  v24 = v16;
  *v4 = off_24C415090;
  if (v19 <= 0x10)
    v6 = 16;
  else
    v6 = v19;
  v25[0] = v17[1];
  v25[1] = v18 | (unint64_t)(v6 << 32);
  sub_20B25B1A4((uint64_t)v4, (unsigned int *)v25, &v23);
  *v5 = off_24C415090;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20B289AFC((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C4169B8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B2681FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  MEMORY[0x20BD3583C](v8, 0x10A3C40A1F8E8FFLL);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B268228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B26823C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B268250(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B25BEBC(a2, a1);
}

double sub_20B26825C(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[3];
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t (**v28)();
  __int128 *v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[2];

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C415930, 0);
  if (!v4)
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v31, lpsrc, 3);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
    v22 = *(_OWORD *)v31;
    v23[0] = v18;
    *(_QWORD *)&v31 = 0;
    MEMORY[0x20BD3583C](v17, 0xC400A2AC0F1, v19);
    sub_20B267B78(a1, (uint64_t *)&v31);
    v28 = (uint64_t (**)())&v22;
    v29 = &v31;
    *(_QWORD *)&result = sub_20AFE4B3C((uint64_t *)&v28);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_20B25BEBC(&v28, (uint64_t)v4);
  sub_20B267DC4(&v26, v5);
  v31 = v26;
  v32 = v27;
  if (HIDWORD(v27) <= 0x10)
    v6 = 16;
  else
    v6 = HIDWORD(v27);
  *(_QWORD *)&v22 = off_24C415090;
  v33[0] = *((_QWORD *)&v26 + 1);
  v33[1] = v27 | (unint64_t)(v6 << 32);
  sub_20B25B1A4((uint64_t)&v22, (unsigned int *)v33, &v31);
  *(_QWORD *)&v22 = off_24C415090;
  if (v29)
  {
    v8 = *(_QWORD *)v29;
    v7 = (std::__shared_weak_count *)*((_QWORD *)v29 + 1);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20B289AFC((uint64_t)v29);
  }
LABEL_13:
  v28 = &off_24C4169B8;
  v12 = v30;
  if (v30)
  {
    v13 = (unint64_t *)&v30->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v24;
  *(_DWORD *)(a1 + 8) = DWORD2(v22);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v25;
      *(_OWORD *)(a1 + 48) = v25;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(__int128 *, uint64_t))off_24C415AE0[v16])(&v31, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_25;
  }
  *(_QWORD *)&v31 = a1 + 16;
  ((void (*)(__int128 *))off_24C415B20[v15])(&v31);
LABEL_25:
  v21 = v24;
  result = *(double *)&v25;
  *(_OWORD *)(a1 + 48) = v25;
  *(_QWORD *)&v22 = off_24C414C10;
  if ((_DWORD)v21 != -1)
    ((void (*)(__int128 *, _QWORD *))off_24C415AE0[v21])(&v31, v23);
  return result;
}

void sub_20B2684EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  if (a14 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24C415AE0[a14])(&a20, v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B2685D8(uint64_t a1)
{
  uint64_t v2[3];

  sub_20B267B78(a1, v2);
  return v2[0];
}

double sub_20B2685FC@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 3
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B267B78(a1, (uint64_t *)&v7);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *a3 = v5;
  return result;
}

double sub_20B26869C@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 3
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B267DC4(&v7, a1);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *a3 = v5;
  return result;
}

__int128 *sub_20B26873C()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B3E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B3E8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_25463B3F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463B3F0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25463B3F8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B3F8))
    {
LABEL_13:
      if (byte_25463B78F < 0)
      {
        sub_20AEC60F4(&xmmword_25463B760, (void *)qword_25463B778, unk_25463B780);
      }
      else
      {
        xmmword_25463B760 = *(_OWORD *)&qword_25463B778;
        unk_25463B770 = unk_25463B788;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B760, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B3F0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_25463B400);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463B400))
    {
      sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray16f>]", &qword_25463B790);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463B790, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B400);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_25463B408);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B408))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_25463B410);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25463B410))
      {
        if (byte_25463B7A8[23] < 0)
          sub_20AEC60F4(&__p, *(void **)byte_25463B7A8, *(unint64_t *)&byte_25463B7A8[8]);
        else
          __p = *(std::string *)byte_25463B7A8;
        sub_20B52B814(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_25463B7C0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B7C0, &dword_20AEBB000);
        __cxa_guard_release(&qword_25463B410);
      }
      if (byte_25463B7D7 < 0)
      {
        sub_20AEC60F4(v17, (void *)xmmword_25463B7C0, *((unint64_t *)&xmmword_25463B7C0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_25463B7C0;
        v18 = unk_25463B7D0;
      }
      sub_20AFC4EC4((char *)v17, (std::string *)&qword_25463B778);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463B778, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B3F8);
      goto LABEL_13;
    }
    if (byte_25463B7A7 >= 0)
      v6 = byte_25463B7A7;
    else
      v6 = unk_25463B798;
    if (byte_25463B7A7 >= 0)
      v7 = &qword_25463B790;
    else
      v7 = (uint64_t *)qword_25463B790;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_25463B7A8[8] = v6;
      *(_QWORD *)&byte_25463B7A8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_25463B7A8 = v13;
    }
    else
    {
      v13 = byte_25463B7A8;
      byte_25463B7A8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25463B7A8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B408);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_25463B777 < 0)
  {
    sub_20AEC60F4(&xmmword_25463B748, (void *)xmmword_25463B760, *((unint64_t *)&xmmword_25463B760 + 1));
  }
  else
  {
    xmmword_25463B748 = xmmword_25463B760;
    unk_25463B758 = unk_25463B770;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B748, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463B3E8);
LABEL_2:
  if (byte_25463B75F >= 0)
    return &xmmword_25463B748;
  else
    return (__int128 *)xmmword_25463B748;
}

void sub_20B268B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25463B3F8);
  __cxa_guard_abort(&qword_25463B3F0);
  __cxa_guard_abort(&qword_25463B3E8);
  _Unwind_Resume(a1);
}

void sub_20B268C2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B3E8);
  _Unwind_Resume(a1);
}

void sub_20B268C44()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B268C80(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20B25BB78(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24C416998;
    *v4 = &off_24C415770;
    sub_20B2857F4(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20B289BEC(v42);
    }
LABEL_10:
    v41 = &off_24C4169B8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20B289BEC(v40);
LABEL_22:
    v39 = &off_24C4169B8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20B25BEBC(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24C416978;
  *v22 = &off_24C415750;
  sub_20B2854CC(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20B289AFC(v42);
  }
LABEL_35:
  v41 = &off_24C4169B8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20B289AFC(v40);
LABEL_47:
  v39 = &off_24C4169B8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20B26901C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B2855D8(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B269050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B269064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B285900(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

void sub_20B269098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B2690AC()
{
  return 65792;
}

void sub_20B2690B8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B25BB78(a2, a1);
}

uint64_t sub_20B2690C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (**v28)();
  uint64_t *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  __int128 v32;

  *(_QWORD *)a1 = off_24C415120;
  v3 = *(unsigned int *)(a2 + 8);
  LODWORD(v4) = *(_DWORD *)(a2 + 12);
  if (v4 <= 8)
    v4 = 8;
  else
    v4 = v4;
  *(_QWORD *)&v27 = *(_QWORD *)a2;
  *((_QWORD *)&v27 + 1) = v3 | (v4 << 32);
  *(_QWORD *)a1 = off_24C414DC0;
  *(_DWORD *)(a1 + 8) = 0;
  sub_20B25F514(0, 4, (unsigned int *)&v27, a1 + 16);
  if (!(_DWORD)v27 || !DWORD1(v27))
  {
    v14 = v27;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_20AECFAB8();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v29 = v5;
  v30 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v28 = &off_24C416978;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_16;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_16:
      if (!v10)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
LABEL_17:
      sub_20B289920((uint64_t)v29);
  }
LABEL_18:
  sub_20B25FBDC((uint64_t)&v28, &v31);
  v14 = v32;
  if (v29)
  {
    v16 = *v29;
    v15 = (std::__shared_weak_count *)v29[1];
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        v26 = v14;
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        v14 = v26;
        if (!v16)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v16)
    {
LABEL_25:
      v24 = v14;
      sub_20B289AFC((uint64_t)v29);
      v14 = v24;
    }
  }
LABEL_26:
  v28 = &off_24C4169B8;
  v20 = v30;
  if (v30)
  {
    v21 = (unint64_t *)&v30->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      v25 = v14;
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v14 = v25;
    }
  }
LABEL_32:
  *(_OWORD *)(a1 + 48) = v14;
  *(_QWORD *)a1 = off_24C415120;
  return a1;
}

void sub_20B2692E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t (**a18)(), uint64_t a19, std::__shared_weak_count *a20)
{
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;

  a18 = &off_24C4169B8;
  v23 = a20;
  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(unsigned int *)(v20 + 40);
  if ((_DWORD)v26 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v26])(&a17, v21);
  *(_DWORD *)(v20 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B269378(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414DC0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20B2693DC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_20B2609BC(a1))
  {
    if (*(_DWORD *)(a1 + 52))
      v4 = *(_DWORD *)(a1 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a1 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a2 = 0;
    a2[1] = v5;
    a2[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a1 + 24);
        v7 = *(std::__shared_weak_count **)(a1 + 32);
        v30 = &off_24C4169B8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a1 + 24);
        v15 = *(std::__shared_weak_count **)(a1 + 32);
        v30 = &off_24C4169B8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a1 + 24);
        v11 = *(std::__shared_weak_count **)(a1 + 32);
        v30 = &off_24C4169B8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a1 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a1 + 16);
          v30 = &off_24C4169B8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B25FBDC((uint64_t)&v30, a2);
    v30 = &off_24C4169B8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20B269614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B269628(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t (**v32)();
  uint64_t v33;
  std::__shared_weak_count *v34;

  if (sub_20B2609BC(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C4169B8;
        v33 = v8;
        v34 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C4169B8;
        v33 = v16;
        v34 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C4169B8;
        v33 = v12;
        v34 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v32 = &off_24C4169B8;
          if (v22)
          {
            v33 = v22;
            v34 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v33 = 0;
            v34 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v33 = 0;
          v34 = 0;
          v32 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B25FBDC((uint64_t)&v32, &v30);
    *a1 = v30;
    *(_OWORD *)(a1 + 1) = v31;
    v32 = &off_24C4169B8;
    v27 = v34;
    if (v34)
    {
      v28 = (unint64_t *)&v34->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20B269874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B269888()
{
  return 4;
}

_UNKNOWN **sub_20B269890()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B380);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B380))
    return &off_253EC31A0;
  __cxa_guard_release(&qword_25463B380);
  return &off_253EC31A0;
}

void sub_20B2698E4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[2];

  sub_20B260EE0(&v20, a1);
  sub_20B269628(v17, a1);
  sub_20B269628(&v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23 = v15;
  v24 = v16;
  *v4 = off_24C415120;
  if (v19 <= 8)
    v6 = 8;
  else
    v6 = v19;
  v25[0] = v17[1];
  v25[1] = v18 | (unint64_t)(v6 << 32);
  sub_20B2600E4((uint64_t)v4, (unsigned int *)v25, &v23);
  *v5 = off_24C415120;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20B289AFC((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C4169B8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B269A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  MEMORY[0x20BD3583C](v8, 0x10A3C40A1F8E8FFLL);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B269A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B269AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B269AB4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B260EE0(a2, a1);
}

double sub_20B269AC0(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[3];
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t (**v28)();
  uint64_t *v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[2];

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C415948, 0);
  if (!v4)
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v31, lpsrc, 4);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
    v22 = *(_OWORD *)v31;
    v23[0] = v18;
    *(_QWORD *)&v31 = 0;
    MEMORY[0x20BD3583C](v17, 0xC400A2AC0F1, v19);
    sub_20B2693DC(a1, (uint64_t *)&v31);
    *(float *)&result = sub_20AFC5D04((uint64_t)&v22, (uint64_t)&v31);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_20B260EE0(&v28, (uint64_t)v4);
  sub_20B269628(&v26, v5);
  v31 = v26;
  v32 = v27;
  if (HIDWORD(v27) <= 8)
    v6 = 8;
  else
    v6 = HIDWORD(v27);
  *(_QWORD *)&v22 = off_24C415120;
  v33[0] = *((_QWORD *)&v26 + 1);
  v33[1] = v27 | (unint64_t)(v6 << 32);
  sub_20B2600E4((uint64_t)&v22, (unsigned int *)v33, &v31);
  *(_QWORD *)&v22 = off_24C415120;
  if (v29)
  {
    v8 = *v29;
    v7 = (std::__shared_weak_count *)v29[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20B289AFC((uint64_t)v29);
  }
LABEL_13:
  v28 = &off_24C4169B8;
  v12 = v30;
  if (v30)
  {
    v13 = (unint64_t *)&v30->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v24;
  *(_DWORD *)(a1 + 8) = DWORD2(v22);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v25;
      *(_OWORD *)(a1 + 48) = v25;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(__int128 *, uint64_t))off_24C415AE0[v16])(&v31, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_25;
  }
  *(_QWORD *)&v31 = a1 + 16;
  ((void (*)(__int128 *))off_24C415B20[v15])(&v31);
LABEL_25:
  v21 = v24;
  result = *(double *)&v25;
  *(_OWORD *)(a1 + 48) = v25;
  *(_QWORD *)&v22 = off_24C414DC0;
  if ((_DWORD)v21 != -1)
    ((void (*)(__int128 *, _QWORD *))off_24C415AE0[v21])(&v31, v23);
  return result;
}

void sub_20B269D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  if (a14 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24C415AE0[a14])(&a20, v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B269E34(uint64_t a1)
{
  uint64_t v2[3];

  sub_20B2693DC(a1, v2);
  return v2[0];
}

double sub_20B269E58@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 4
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B2693DC(a1, (uint64_t *)&v7);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *a3 = v5;
  return result;
}

double sub_20B269EF8@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 4
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B269628(&v7, a1);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *a3 = v5;
  return result;
}

__int128 *sub_20B269F98()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B418);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B418))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_25463B420);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463B420))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25463B428);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B428))
    {
LABEL_13:
      if (byte_25463B81F < 0)
      {
        sub_20AEC60F4(&xmmword_25463B7F0, (void *)qword_25463B808, unk_25463B810);
      }
      else
      {
        xmmword_25463B7F0 = *(_OWORD *)&qword_25463B808;
        unk_25463B800 = unk_25463B818;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B7F0, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B420);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_25463B430);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463B430))
    {
      sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray32f>]", &qword_25463B820);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463B820, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B430);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_25463B438);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B438))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_25463B440);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25463B440))
      {
        if (byte_25463B838[23] < 0)
          sub_20AEC60F4(&__p, *(void **)byte_25463B838, *(unint64_t *)&byte_25463B838[8]);
        else
          __p = *(std::string *)byte_25463B838;
        sub_20B52B814(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_25463B850);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B850, &dword_20AEBB000);
        __cxa_guard_release(&qword_25463B440);
      }
      if (byte_25463B867 < 0)
      {
        sub_20AEC60F4(v17, (void *)xmmword_25463B850, *((unint64_t *)&xmmword_25463B850 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_25463B850;
        v18 = unk_25463B860;
      }
      sub_20AFC57D8((char *)v17, (std::string *)&qword_25463B808);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463B808, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B428);
      goto LABEL_13;
    }
    if (byte_25463B837 >= 0)
      v6 = byte_25463B837;
    else
      v6 = unk_25463B828;
    if (byte_25463B837 >= 0)
      v7 = &qword_25463B820;
    else
      v7 = (uint64_t *)qword_25463B820;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_25463B838[8] = v6;
      *(_QWORD *)&byte_25463B838[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_25463B838 = v13;
    }
    else
    {
      v13 = byte_25463B838;
      byte_25463B838[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25463B838, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B438);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_25463B807 < 0)
  {
    sub_20AEC60F4(&xmmword_25463B7D8, (void *)xmmword_25463B7F0, *((unint64_t *)&xmmword_25463B7F0 + 1));
  }
  else
  {
    xmmword_25463B7D8 = xmmword_25463B7F0;
    unk_25463B7E8 = unk_25463B800;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B7D8, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463B418);
LABEL_2:
  if (byte_25463B7EF >= 0)
    return &xmmword_25463B7D8;
  else
    return (__int128 *)xmmword_25463B7D8;
}

void sub_20B26A3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25463B428);
  __cxa_guard_abort(&qword_25463B420);
  __cxa_guard_abort(&qword_25463B418);
  _Unwind_Resume(a1);
}

void sub_20B26A488(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B418);
  _Unwind_Resume(a1);
}

void sub_20B26A4A0()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B26A4DC(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20B260B9C(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24C416998;
    *v4 = &off_24C415770;
    sub_20B2857F4(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20B289BEC(v42);
    }
LABEL_10:
    v41 = &off_24C4169B8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20B289BEC(v40);
LABEL_22:
    v39 = &off_24C4169B8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20B260EE0(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24C416978;
  *v22 = &off_24C415750;
  sub_20B2854CC(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20B289AFC(v42);
  }
LABEL_35:
  v41 = &off_24C4169B8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20B289AFC(v40);
LABEL_47:
  v39 = &off_24C4169B8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20B26A878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B2855D8(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B26A8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B26A8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B285900(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

void sub_20B26A8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B26A908()
{
  return 65792;
}

void sub_20B26A914(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B260B9C(a2, a1);
}

uint64_t sub_20B26A920(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  _BYTE v27[32];
  uint64_t v28;
  uint64_t (**v29)();
  uint64_t *v30;
  std::__shared_weak_count *v31;
  _BYTE v32[24];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C4151B0;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x20)
    v4 = 32;
  else
    v4 = v4;
  *(_DWORD *)v32 = 2;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v32[4] = v5;
  *(_QWORD *)v27 = *(_QWORD *)v32;
  *(_DWORD *)&v27[8] = HIDWORD(v5);
  *(_DWORD *)v32 = 1;
  *(_QWORD *)&v32[4] = v3 | (v4 << 32);
  *(_QWORD *)&v27[12] = *(_QWORD *)v32;
  *(_DWORD *)&v27[20] = v4;
  *(_QWORD *)&v27[24] = v5;
  v28 = *(_QWORD *)&v32[4];
  *(_QWORD *)a1 = off_24C4148B0;
  *(_DWORD *)(a1 + 8) = 0;
  sub_20B24FEF0(0, 5, (uint64_t)v27, a1 + 16);
  v6 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v27[24] || !*(_DWORD *)&v27[28])
  {
    v25 = *(_OWORD *)&v27[16];
    *v6 = *(_OWORD *)v27;
    *(_OWORD *)(a1 + 64) = v25;
    *(_QWORD *)(a1 + 80) = v28;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_20AECFAB8();
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(std::__shared_weak_count **)(a1 + 32);
  v30 = v7;
  v31 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v29 = &off_24C416978;
  if (v7)
  {
    v12 = *v7;
    v11 = (std::__shared_weak_count *)v7[1];
    if (!v11)
      goto LABEL_16;
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (v15)
    {
LABEL_16:
      if (!v12)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v12)
LABEL_17:
      sub_20B289920((uint64_t)v30);
  }
LABEL_18:
  sub_20B2505B0((uint64_t)v32, (uint64_t)&v29);
  v16 = v33;
  *v6 = *(_OWORD *)&v32[8];
  *(_OWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 80) = v34;
  if (v30)
  {
    v18 = *v30;
    v17 = (std::__shared_weak_count *)v30[1];
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if (!v18)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v18)
LABEL_25:
      sub_20B289AFC((uint64_t)v30);
  }
LABEL_26:
  v29 = &off_24C4169B8;
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = off_24C4151B0;
  return a1;
}

void sub_20B26AB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B26AC50(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C4148B0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20B26ACB4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20B25149C(a1))
  {
    if (*(_DWORD *)(a1 + 76))
      v4 = *(_DWORD *)(a1 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a1 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 2;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(DWORD1(v34), 2);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(_QWORD *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(_QWORD *)(a2 + 32) = v5;
    *(_QWORD *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a1 + 24);
        v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a1 + 24);
        v19 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a1 + 24);
        v15 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a1 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v34 = &off_24C4169B8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B2505B0(a2, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C4169B8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B26AF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B26AF28(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_20B25149C(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 2;
    *(_QWORD *)&v37[4] = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 2);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24C4169B8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B2505B0((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24C4169B8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B26B1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B26B1C0()
{
  return 5;
}

_UNKNOWN **sub_20B26B1C8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B380);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B380))
    return &off_253EC31A0;
  __cxa_guard_release(&qword_25463B380);
  return &off_253EC31A0;
}

void sub_20B26B21C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  _OWORD v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_20B2519E8(&v20, a1);
  sub_20B26AF28((uint64_t)v16, a1);
  sub_20B26AF28((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24C4151B0;
  if (v19 <= 0x20)
    v6 = 32;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 2;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_20B250B58((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = off_24C4151B0;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20B289AFC((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C4169B8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B26B3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B26B444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B26B458(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B2519E8(a2, a1);
}

double sub_20B26B464(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  uint64_t (**v36)();
  uint64_t *v37;
  std::__shared_weak_count *v38;
  _OWORD v39[3];
  _DWORD v40[3];
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];

  v45[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C415960, 0);
  if (!v4)
  {
    (*(void (**)(_OWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v39, lpsrc, 5);
    v17 = *(_QWORD *)&v39[0];
    v19 = *(_OWORD *)(*(_QWORD *)&v39[0] + 16);
    v18 = *(_OWORD *)(*(_QWORD *)&v39[0] + 32);
    v28 = **(_OWORD **)&v39[0];
    v29 = v19;
    v30 = v18;
    *(_QWORD *)&v39[0] = 0;
    MEMORY[0x20BD3583C](v17, 0xC400A2AC0F1, v20, v21, v22, v23);
    sub_20B26ACB4(a1, (uint64_t)v39);
    *(_QWORD *)&v34[0] = &v28;
    *((_QWORD *)&v34[0] + 1) = v39;
    sub_20AFE5C6C((size_t *)v34);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_20B2519E8(&v36, (uint64_t)v4);
  sub_20B26AF28((uint64_t)v34, v5);
  v39[0] = v34[0];
  v39[1] = v34[1];
  v39[2] = v35;
  *(_QWORD *)&v28 = off_24C4151B0;
  if (HIDWORD(v35) <= 0x20)
    v6 = 32;
  else
    v6 = HIDWORD(v35);
  *(_QWORD *)&v40[1] = v35;
  v40[0] = 2;
  LODWORD(v45[0]) = 1;
  *(_QWORD *)((char *)v45 + 4) = DWORD2(v35) | (unint64_t)(v6 << 32);
  v41 = v45[0];
  v42 = v6;
  v43 = v35;
  v44 = *(_QWORD *)((char *)v45 + 4);
  sub_20B250B58((uint64_t)&v28, (uint64_t)v40, v39);
  *(_QWORD *)&v28 = off_24C4151B0;
  if (v37)
  {
    v8 = *v37;
    v7 = (std::__shared_weak_count *)v37[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20B289AFC((uint64_t)v37);
  }
LABEL_13:
  v36 = &off_24C4169B8;
  v12 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = DWORD2(v30);
  *(_DWORD *)(a1 + 8) = DWORD2(v28);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v31;
      v27 = v32;
      *(_OWORD *)(a1 + 48) = v31;
      *(_OWORD *)(a1 + 64) = v27;
      *(_QWORD *)(a1 + 80) = v33;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_24C415AE0[v16])(v39, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_24;
  }
  *(_QWORD *)&v39[0] = a1 + 16;
  ((void (*)(_OWORD *))off_24C415B20[v15])(v39);
LABEL_24:
  v25 = DWORD2(v30);
  result = *(double *)&v31;
  v26 = v32;
  *(_OWORD *)(a1 + 48) = v31;
  *(_OWORD *)(a1 + 64) = v26;
  *(_QWORD *)(a1 + 80) = v33;
  *(_QWORD *)&v28 = off_24C4148B0;
  if ((_DWORD)v25 != -1)
    ((void (*)(_OWORD *, __int128 *))off_24C415AE0[v25])(v39, &v29);
  return result;
}

void sub_20B26B768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B26B878(uint64_t a1)
{
  _QWORD v2[6];

  sub_20B26ACB4(a1, (uint64_t)v2);
  return v2[0];
}

double sub_20B26B89C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 5
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B26ACB4(a1, (uint64_t)v8);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_20B26B93C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 5
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B26AF28((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_20B26B9DC()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B448);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B448))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_25463B450);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463B450))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25463B458);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B458))
    {
LABEL_13:
      if (byte_25463B8AF < 0)
      {
        sub_20AEC60F4(&xmmword_25463B880, (void *)qword_25463B898, unk_25463B8A0);
      }
      else
      {
        xmmword_25463B880 = *(_OWORD *)&qword_25463B898;
        unk_25463B890 = unk_25463B8A8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B880, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B450);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_25463B460);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463B460))
    {
      sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Two8u>]", &qword_25463B8B0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463B8B0, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B460);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_25463B468);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B468))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_25463B470);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25463B470))
      {
        if (byte_25463B8C8[23] < 0)
          sub_20AEC60F4(&__p, *(void **)byte_25463B8C8, *(unint64_t *)&byte_25463B8C8[8]);
        else
          __p = *(std::string *)byte_25463B8C8;
        sub_20B52B814(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_25463B8E0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B8E0, &dword_20AEBB000);
        __cxa_guard_release(&qword_25463B470);
      }
      if (byte_25463B8F7 < 0)
      {
        sub_20AEC60F4(v17, (void *)xmmword_25463B8E0, *((unint64_t *)&xmmword_25463B8E0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_25463B8E0;
        v18 = unk_25463B8F0;
      }
      sub_20AFC62E4((char *)v17, (std::string *)&qword_25463B898);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463B898, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B458);
      goto LABEL_13;
    }
    if (byte_25463B8C7 >= 0)
      v6 = byte_25463B8C7;
    else
      v6 = unk_25463B8B8;
    if (byte_25463B8C7 >= 0)
      v7 = &qword_25463B8B0;
    else
      v7 = (uint64_t *)qword_25463B8B0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_25463B8C8[8] = v6;
      *(_QWORD *)&byte_25463B8C8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_25463B8C8 = v13;
    }
    else
    {
      v13 = byte_25463B8C8;
      byte_25463B8C8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25463B8C8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B468);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_25463B897 < 0)
  {
    sub_20AEC60F4(&xmmword_25463B868, (void *)xmmword_25463B880, *((unint64_t *)&xmmword_25463B880 + 1));
  }
  else
  {
    xmmword_25463B868 = xmmword_25463B880;
    unk_25463B878 = unk_25463B890;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B868, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463B448);
LABEL_2:
  if (byte_25463B87F >= 0)
    return &xmmword_25463B868;
  else
    return (__int128 *)xmmword_25463B868;
}

void sub_20B26BE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25463B458);
  __cxa_guard_abort(&qword_25463B450);
  __cxa_guard_abort(&qword_25463B448);
  _Unwind_Resume(a1);
}

void sub_20B26BECC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B448);
  _Unwind_Resume(a1);
}

void sub_20B26BEE4()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B26BF20(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20B25167C(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24C416998;
    *v4 = &off_24C415770;
    sub_20B2857F4(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20B289BEC(v42);
    }
LABEL_10:
    v41 = &off_24C4169B8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20B289BEC(v40);
LABEL_22:
    v39 = &off_24C4169B8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20B2519E8(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24C416978;
  *v22 = &off_24C415750;
  sub_20B2854CC(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20B289AFC(v42);
  }
LABEL_35:
  v41 = &off_24C4169B8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20B289AFC(v40);
LABEL_47:
  v39 = &off_24C4169B8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20B26C2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B2855D8(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B26C2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B26C304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B285900(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

void sub_20B26C338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B26C34C()
{
  return 65792;
}

void sub_20B26C358(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B25167C(a2, a1);
}

uint64_t sub_20B26C364(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  _BYTE v27[32];
  uint64_t v28;
  uint64_t (**v29)();
  uint64_t *v30;
  std::__shared_weak_count *v31;
  _BYTE v32[24];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C415240;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x10)
    v4 = 16;
  else
    v4 = v4;
  *(_DWORD *)v32 = 2;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v32[4] = v5;
  *(_QWORD *)v27 = *(_QWORD *)v32;
  *(_DWORD *)&v27[8] = HIDWORD(v5);
  *(_DWORD *)v32 = 1;
  *(_QWORD *)&v32[4] = v3 | (v4 << 32);
  *(_QWORD *)&v27[12] = *(_QWORD *)v32;
  *(_DWORD *)&v27[20] = v4;
  *(_QWORD *)&v27[24] = v5;
  v28 = *(_QWORD *)&v32[4];
  *(_QWORD *)a1 = off_24C414CA0;
  *(_DWORD *)(a1 + 8) = 0;
  sub_20B25BFB0(0, 7, (uint64_t)v27, a1 + 16);
  v6 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v27[24] || !*(_DWORD *)&v27[28])
  {
    v25 = *(_OWORD *)&v27[16];
    *v6 = *(_OWORD *)v27;
    *(_OWORD *)(a1 + 64) = v25;
    *(_QWORD *)(a1 + 80) = v28;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_20AECFAB8();
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(std::__shared_weak_count **)(a1 + 32);
  v30 = v7;
  v31 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v29 = &off_24C416978;
  if (v7)
  {
    v12 = *v7;
    v11 = (std::__shared_weak_count *)v7[1];
    if (!v11)
      goto LABEL_16;
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (v15)
    {
LABEL_16:
      if (!v12)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v12)
LABEL_17:
      sub_20B289920((uint64_t)v30);
  }
LABEL_18:
  sub_20B25C670((uint64_t)v32, (uint64_t)&v29);
  v16 = v33;
  *v6 = *(_OWORD *)&v32[8];
  *(_OWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 80) = v34;
  if (v30)
  {
    v18 = *v30;
    v17 = (std::__shared_weak_count *)v30[1];
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if (!v18)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v18)
LABEL_25:
      sub_20B289AFC((uint64_t)v30);
  }
LABEL_26:
  v29 = &off_24C4169B8;
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = off_24C415240;
  return a1;
}

void sub_20B26C5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B26C694(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414CA0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20B26C6F8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20B25D644(a1))
  {
    if (*(_DWORD *)(a1 + 76))
      v4 = *(_DWORD *)(a1 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a1 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 2;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(DWORD1(v34), 2);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(_QWORD *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(_QWORD *)(a2 + 32) = v5;
    *(_QWORD *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a1 + 24);
        v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a1 + 24);
        v19 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a1 + 24);
        v15 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a1 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v34 = &off_24C4169B8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B25C670(a2, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C4169B8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B26C958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B26C96C(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_20B25D644(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 2;
    *(_QWORD *)&v37[4] = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 2);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24C4169B8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B25C670((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24C4169B8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B26CBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B26CC04()
{
  return 7;
}

_UNKNOWN **sub_20B26CC0C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B380);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B380))
    return &off_253EC31A0;
  __cxa_guard_release(&qword_25463B380);
  return &off_253EC31A0;
}

void sub_20B26CC60(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  _OWORD v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_20B25DB90(&v20, a1);
  sub_20B26C96C((uint64_t)v16, a1);
  sub_20B26C96C((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24C415240;
  if (v19 <= 0x10)
    v6 = 16;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 2;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_20B25CCF8((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = off_24C415240;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20B289AFC((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C4169B8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B26CE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B26CE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B26CE9C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B25DB90(a2, a1);
}

double sub_20B26CEA8(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  uint64_t (**v36)();
  uint64_t *v37;
  std::__shared_weak_count *v38;
  _OWORD v39[3];
  _DWORD v40[3];
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];

  v45[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C415978, 0);
  if (!v4)
  {
    (*(void (**)(_OWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v39, lpsrc, 7);
    v17 = *(_QWORD *)&v39[0];
    v19 = *(_OWORD *)(*(_QWORD *)&v39[0] + 16);
    v18 = *(_OWORD *)(*(_QWORD *)&v39[0] + 32);
    v28 = **(_OWORD **)&v39[0];
    v29 = v19;
    v30 = v18;
    *(_QWORD *)&v39[0] = 0;
    MEMORY[0x20BD3583C](v17, 0xC400A2AC0F1, v20, v21, v22, v23);
    sub_20B26C6F8(a1, (uint64_t)v39);
    *(_QWORD *)&v34[0] = &v28;
    *((_QWORD *)&v34[0] + 1) = v39;
    *(_QWORD *)&result = sub_20AFE741C((uint64_t *)v34);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_20B25DB90(&v36, (uint64_t)v4);
  sub_20B26C96C((uint64_t)v34, v5);
  v39[0] = v34[0];
  v39[1] = v34[1];
  v39[2] = v35;
  *(_QWORD *)&v28 = off_24C415240;
  if (HIDWORD(v35) <= 0x10)
    v6 = 16;
  else
    v6 = HIDWORD(v35);
  *(_QWORD *)&v40[1] = v35;
  v40[0] = 2;
  LODWORD(v45[0]) = 1;
  *(_QWORD *)((char *)v45 + 4) = DWORD2(v35) | (unint64_t)(v6 << 32);
  v41 = v45[0];
  v42 = v6;
  v43 = v35;
  v44 = *(_QWORD *)((char *)v45 + 4);
  sub_20B25CCF8((uint64_t)&v28, (uint64_t)v40, v39);
  *(_QWORD *)&v28 = off_24C415240;
  if (v37)
  {
    v8 = *v37;
    v7 = (std::__shared_weak_count *)v37[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20B289AFC((uint64_t)v37);
  }
LABEL_13:
  v36 = &off_24C4169B8;
  v12 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = DWORD2(v30);
  *(_DWORD *)(a1 + 8) = DWORD2(v28);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v31;
      v27 = v32;
      *(_OWORD *)(a1 + 48) = v31;
      *(_OWORD *)(a1 + 64) = v27;
      *(_QWORD *)(a1 + 80) = v33;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_24C415AE0[v16])(v39, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_24;
  }
  *(_QWORD *)&v39[0] = a1 + 16;
  ((void (*)(_OWORD *))off_24C415B20[v15])(v39);
LABEL_24:
  v25 = DWORD2(v30);
  result = *(double *)&v31;
  v26 = v32;
  *(_OWORD *)(a1 + 48) = v31;
  *(_OWORD *)(a1 + 64) = v26;
  *(_QWORD *)(a1 + 80) = v33;
  *(_QWORD *)&v28 = off_24C414CA0;
  if ((_DWORD)v25 != -1)
    ((void (*)(_OWORD *, __int128 *))off_24C415AE0[v25])(v39, &v29);
  return result;
}

void sub_20B26D1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B26D2BC(uint64_t a1)
{
  _QWORD v2[6];

  sub_20B26C6F8(a1, (uint64_t)v2);
  return v2[0];
}

double sub_20B26D2E0@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 7
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B26C6F8(a1, (uint64_t)v8);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_20B26D380@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 7
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B26C96C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_20B26D420()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B478);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B478))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_25463B480);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463B480))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25463B488);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B488))
    {
LABEL_13:
      if (byte_25463B93F < 0)
      {
        sub_20AEC60F4(&xmmword_25463B910, (void *)qword_25463B928, unk_25463B930);
      }
      else
      {
        xmmword_25463B910 = *(_OWORD *)&qword_25463B928;
        unk_25463B920 = unk_25463B938;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B910, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B480);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_25463B490);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463B490))
    {
      sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Two16f>]", &qword_25463B940);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463B940, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B490);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_25463B498);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B498))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_25463B4A0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25463B4A0))
      {
        if (byte_25463B958[23] < 0)
          sub_20AEC60F4(&__p, *(void **)byte_25463B958, *(unint64_t *)&byte_25463B958[8]);
        else
          __p = *(std::string *)byte_25463B958;
        sub_20B52B814(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_25463B970);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B970, &dword_20AEBB000);
        __cxa_guard_release(&qword_25463B4A0);
      }
      if (byte_25463B987 < 0)
      {
        sub_20AEC60F4(v17, (void *)xmmword_25463B970, *((unint64_t *)&xmmword_25463B970 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_25463B970;
        v18 = unk_25463B980;
      }
      sub_20AFC882C((char *)v17, (std::string *)&qword_25463B928);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463B928, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B488);
      goto LABEL_13;
    }
    if (byte_25463B957 >= 0)
      v6 = byte_25463B957;
    else
      v6 = unk_25463B948;
    if (byte_25463B957 >= 0)
      v7 = &qword_25463B940;
    else
      v7 = (uint64_t *)qword_25463B940;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_25463B958[8] = v6;
      *(_QWORD *)&byte_25463B958[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_25463B958 = v13;
    }
    else
    {
      v13 = byte_25463B958;
      byte_25463B958[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25463B958, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B498);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_25463B927 < 0)
  {
    sub_20AEC60F4(&xmmword_25463B8F8, (void *)xmmword_25463B910, *((unint64_t *)&xmmword_25463B910 + 1));
  }
  else
  {
    xmmword_25463B8F8 = xmmword_25463B910;
    unk_25463B908 = unk_25463B920;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B8F8, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463B478);
LABEL_2:
  if (byte_25463B90F >= 0)
    return &xmmword_25463B8F8;
  else
    return (__int128 *)xmmword_25463B8F8;
}

void sub_20B26D874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25463B488);
  __cxa_guard_abort(&qword_25463B480);
  __cxa_guard_abort(&qword_25463B478);
  _Unwind_Resume(a1);
}

void sub_20B26D910(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B478);
  _Unwind_Resume(a1);
}

void sub_20B26D928()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B26D964(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20B25D824(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24C416998;
    *v4 = &off_24C415770;
    sub_20B2857F4(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20B289BEC(v42);
    }
LABEL_10:
    v41 = &off_24C4169B8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20B289BEC(v40);
LABEL_22:
    v39 = &off_24C4169B8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20B25DB90(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24C416978;
  *v22 = &off_24C415750;
  sub_20B2854CC(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20B289AFC(v42);
  }
LABEL_35:
  v41 = &off_24C4169B8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20B289AFC(v40);
LABEL_47:
  v39 = &off_24C4169B8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20B26DD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B2855D8(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B26DD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B26DD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B285900(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

void sub_20B26DD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B26DD90()
{
  return 65792;
}

void sub_20B26DD9C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B25D824(a2, a1);
}

uint64_t sub_20B26DDA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  _BYTE v27[32];
  uint64_t v28;
  uint64_t (**v29)();
  uint64_t *v30;
  std::__shared_weak_count *v31;
  _BYTE v32[24];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C4152D0;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 8)
    v4 = 8;
  else
    v4 = v4;
  *(_DWORD *)v32 = 2;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v32[4] = v5;
  *(_QWORD *)v27 = *(_QWORD *)v32;
  *(_DWORD *)&v27[8] = HIDWORD(v5);
  *(_DWORD *)v32 = 1;
  *(_QWORD *)&v32[4] = v3 | (v4 << 32);
  *(_QWORD *)&v27[12] = *(_QWORD *)v32;
  *(_DWORD *)&v27[20] = v4;
  *(_QWORD *)&v27[24] = v5;
  v28 = *(_QWORD *)&v32[4];
  *(_QWORD *)a1 = off_24C414E50;
  *(_DWORD *)(a1 + 8) = 0;
  sub_20B260FD4(0, 8, (uint64_t)v27, a1 + 16);
  v6 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v27[24] || !*(_DWORD *)&v27[28])
  {
    v25 = *(_OWORD *)&v27[16];
    *v6 = *(_OWORD *)v27;
    *(_OWORD *)(a1 + 64) = v25;
    *(_QWORD *)(a1 + 80) = v28;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_20AECFAB8();
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(std::__shared_weak_count **)(a1 + 32);
  v30 = v7;
  v31 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v29 = &off_24C416978;
  if (v7)
  {
    v12 = *v7;
    v11 = (std::__shared_weak_count *)v7[1];
    if (!v11)
      goto LABEL_16;
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (v15)
    {
LABEL_16:
      if (!v12)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v12)
LABEL_17:
      sub_20B289920((uint64_t)v30);
  }
LABEL_18:
  sub_20B261698((uint64_t)v32, (uint64_t)&v29);
  v16 = v33;
  *v6 = *(_OWORD *)&v32[8];
  *(_OWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 80) = v34;
  if (v30)
  {
    v18 = *v30;
    v17 = (std::__shared_weak_count *)v30[1];
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if (!v18)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v18)
LABEL_25:
      sub_20B289AFC((uint64_t)v30);
  }
LABEL_26:
  v29 = &off_24C4169B8;
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = off_24C4152D0;
  return a1;
}

void sub_20B26E024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B26E0D8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414E50;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20B26E13C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20B262554(a1))
  {
    if (*(_DWORD *)(a1 + 76))
      v4 = *(_DWORD *)(a1 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a1 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 2;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(DWORD1(v34), 2);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(_QWORD *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(_QWORD *)(a2 + 32) = v5;
    *(_QWORD *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a1 + 24);
        v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a1 + 24);
        v19 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a1 + 24);
        v15 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a1 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v34 = &off_24C4169B8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B261698(a2, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C4169B8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B26E39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B26E3B0(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_20B262554(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 2;
    *(_QWORD *)&v37[4] = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 2);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24C4169B8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B261698((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24C4169B8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B26E634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B26E648()
{
  return 8;
}

_UNKNOWN **sub_20B26E650()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B380);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B380))
    return &off_253EC31A0;
  __cxa_guard_release(&qword_25463B380);
  return &off_253EC31A0;
}

void sub_20B26E6A4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  _OWORD v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_20B262A9C(&v20, a1);
  sub_20B26E3B0((uint64_t)v16, a1);
  sub_20B26E3B0((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24C4152D0;
  if (v19 <= 8)
    v6 = 8;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 2;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_20B261C08((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = off_24C4152D0;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20B289AFC((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C4169B8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B26E870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B26E8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B26E8E0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B262A9C(a2, a1);
}

double sub_20B26E8EC(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  uint64_t (**v36)();
  uint64_t *v37;
  std::__shared_weak_count *v38;
  _OWORD v39[3];
  _DWORD v40[3];
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];

  v45[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C415990, 0);
  if (!v4)
  {
    (*(void (**)(_OWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v39, lpsrc, 8);
    v17 = *(_QWORD *)&v39[0];
    v19 = *(_OWORD *)(*(_QWORD *)&v39[0] + 16);
    v18 = *(_OWORD *)(*(_QWORD *)&v39[0] + 32);
    v28 = **(_OWORD **)&v39[0];
    v29 = v19;
    v30 = v18;
    *(_QWORD *)&v39[0] = 0;
    MEMORY[0x20BD3583C](v17, 0xC400A2AC0F1, v20, v21, v22, v23);
    sub_20B26E13C(a1, (uint64_t)v39);
    *(_QWORD *)&v34[0] = &v28;
    *((_QWORD *)&v34[0] + 1) = v39;
    *(float *)&result = sub_20AFE84BC((uint64_t *)v34);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_20B262A9C(&v36, (uint64_t)v4);
  sub_20B26E3B0((uint64_t)v34, v5);
  v39[0] = v34[0];
  v39[1] = v34[1];
  v39[2] = v35;
  *(_QWORD *)&v28 = off_24C4152D0;
  if (HIDWORD(v35) <= 8)
    v6 = 8;
  else
    v6 = HIDWORD(v35);
  *(_QWORD *)&v40[1] = v35;
  v40[0] = 2;
  LODWORD(v45[0]) = 1;
  *(_QWORD *)((char *)v45 + 4) = DWORD2(v35) | (unint64_t)(v6 << 32);
  v41 = v45[0];
  v42 = v6;
  v43 = v35;
  v44 = *(_QWORD *)((char *)v45 + 4);
  sub_20B261C08((uint64_t)&v28, (uint64_t)v40, v39);
  *(_QWORD *)&v28 = off_24C4152D0;
  if (v37)
  {
    v8 = *v37;
    v7 = (std::__shared_weak_count *)v37[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20B289AFC((uint64_t)v37);
  }
LABEL_13:
  v36 = &off_24C4169B8;
  v12 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = DWORD2(v30);
  *(_DWORD *)(a1 + 8) = DWORD2(v28);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v31;
      v27 = v32;
      *(_OWORD *)(a1 + 48) = v31;
      *(_OWORD *)(a1 + 64) = v27;
      *(_QWORD *)(a1 + 80) = v33;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_24C415AE0[v16])(v39, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_24;
  }
  *(_QWORD *)&v39[0] = a1 + 16;
  ((void (*)(_OWORD *))off_24C415B20[v15])(v39);
LABEL_24:
  v25 = DWORD2(v30);
  result = *(double *)&v31;
  v26 = v32;
  *(_OWORD *)(a1 + 48) = v31;
  *(_OWORD *)(a1 + 64) = v26;
  *(_QWORD *)(a1 + 80) = v33;
  *(_QWORD *)&v28 = off_24C414E50;
  if ((_DWORD)v25 != -1)
    ((void (*)(_OWORD *, __int128 *))off_24C415AE0[v25])(v39, &v29);
  return result;
}

void sub_20B26EBF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B26ED00(uint64_t a1)
{
  _QWORD v2[6];

  sub_20B26E13C(a1, (uint64_t)v2);
  return v2[0];
}

double sub_20B26ED24@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 8
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B26E13C(a1, (uint64_t)v8);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_20B26EDC4@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 8
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B26E3B0((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_20B26EE64()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B4A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B4A8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_25463B4B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463B4B0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25463B4B8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B4B8))
    {
LABEL_13:
      if (byte_25463B9CF < 0)
      {
        sub_20AEC60F4(&xmmword_25463B9A0, (void *)qword_25463B9B8, unk_25463B9C0);
      }
      else
      {
        xmmword_25463B9A0 = *(_OWORD *)&qword_25463B9B8;
        unk_25463B9B0 = unk_25463B9C8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B9A0, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B4B0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_25463B4C0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463B4C0))
    {
      sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Two32f>]", &qword_25463B9D0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463B9D0, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B4C0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_25463B4C8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B4C8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_25463B4D0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25463B4D0))
      {
        if (byte_25463B9E8[23] < 0)
          sub_20AEC60F4(&__p, *(void **)byte_25463B9E8, *(unint64_t *)&byte_25463B9E8[8]);
        else
          __p = *(std::string *)byte_25463B9E8;
        sub_20B52B814(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_25463BA00);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BA00, &dword_20AEBB000);
        __cxa_guard_release(&qword_25463B4D0);
      }
      if (byte_25463BA17 < 0)
      {
        sub_20AEC60F4(v17, (void *)xmmword_25463BA00, *((unint64_t *)&xmmword_25463BA00 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_25463BA00;
        v18 = unk_25463BA10;
      }
      sub_20AFC93D0((char *)v17, (std::string *)&qword_25463B9B8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463B9B8, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B4B8);
      goto LABEL_13;
    }
    if (byte_25463B9E7 >= 0)
      v6 = byte_25463B9E7;
    else
      v6 = unk_25463B9D8;
    if (byte_25463B9E7 >= 0)
      v7 = &qword_25463B9D0;
    else
      v7 = (uint64_t *)qword_25463B9D0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_25463B9E8[8] = v6;
      *(_QWORD *)&byte_25463B9E8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_25463B9E8 = v13;
    }
    else
    {
      v13 = byte_25463B9E8;
      byte_25463B9E8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25463B9E8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B4C8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_25463B9B7 < 0)
  {
    sub_20AEC60F4(&xmmword_25463B988, (void *)xmmword_25463B9A0, *((unint64_t *)&xmmword_25463B9A0 + 1));
  }
  else
  {
    xmmword_25463B988 = xmmword_25463B9A0;
    unk_25463B998 = unk_25463B9B0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463B988, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463B4A8);
LABEL_2:
  if (byte_25463B99F >= 0)
    return &xmmword_25463B988;
  else
    return (__int128 *)xmmword_25463B988;
}

void sub_20B26F2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25463B4B8);
  __cxa_guard_abort(&qword_25463B4B0);
  __cxa_guard_abort(&qword_25463B4A8);
  _Unwind_Resume(a1);
}

void sub_20B26F354(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B4A8);
  _Unwind_Resume(a1);
}

void sub_20B26F36C()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B26F3A8(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20B262734(a1, &v39);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24C416998;
    *v4 = &off_24C415770;
    sub_20B2857F4(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20B289BEC(v42);
    }
LABEL_10:
    v41 = &off_24C4169B8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20B289BEC(v40);
LABEL_22:
    v39 = &off_24C4169B8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20B262A9C(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24C416978;
  *v22 = &off_24C415750;
  sub_20B2854CC(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20B289AFC(v42);
  }
LABEL_35:
  v41 = &off_24C4169B8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20B289AFC(v40);
LABEL_47:
  v39 = &off_24C4169B8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20B26F748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B2855D8(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B26F77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B26F790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B285900(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

void sub_20B26F7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B26F7D8()
{
  return 65792;
}

uint64_t sub_20B26F7E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  _BYTE v27[32];
  uint64_t v28;
  uint64_t (**v29)();
  uint64_t *v30;
  std::__shared_weak_count *v31;
  _BYTE v32[24];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C415360;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x20)
    v4 = 32;
  else
    v4 = v4;
  *(_DWORD *)v32 = 3;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v32[4] = v5;
  *(_QWORD *)v27 = *(_QWORD *)v32;
  *(_DWORD *)&v27[8] = HIDWORD(v5);
  *(_DWORD *)v32 = 1;
  *(_QWORD *)&v32[4] = v3 | (v4 << 32);
  *(_QWORD *)&v27[12] = *(_QWORD *)v32;
  *(_DWORD *)&v27[20] = v4;
  *(_QWORD *)&v27[24] = v5;
  v28 = *(_QWORD *)&v32[4];
  *(_QWORD *)a1 = off_24C414940;
  *(_DWORD *)(a1 + 8) = 0;
  sub_20B251ADC(0, 21, (uint64_t)v27, a1 + 16);
  v6 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v27[24] || !*(_DWORD *)&v27[28])
  {
    v25 = *(_OWORD *)&v27[16];
    *v6 = *(_OWORD *)v27;
    *(_OWORD *)(a1 + 64) = v25;
    *(_QWORD *)(a1 + 80) = v28;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_20AECFAB8();
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(std::__shared_weak_count **)(a1 + 32);
  v30 = v7;
  v31 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v29 = &off_24C416978;
  if (v7)
  {
    v12 = *v7;
    v11 = (std::__shared_weak_count *)v7[1];
    if (!v11)
      goto LABEL_16;
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (v15)
    {
LABEL_16:
      if (!v12)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v12)
LABEL_17:
      sub_20B289920((uint64_t)v30);
  }
LABEL_18:
  sub_20B2521A0((uint64_t)&v29, (uint64_t)v32);
  v16 = v33;
  *v6 = *(_OWORD *)&v32[8];
  *(_OWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 80) = v34;
  if (v30)
  {
    v18 = *v30;
    v17 = (std::__shared_weak_count *)v30[1];
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if (!v18)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v18)
LABEL_25:
      sub_20B289AFC((uint64_t)v30);
  }
LABEL_26:
  v29 = &off_24C4169B8;
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = off_24C415360;
  return a1;
}

void sub_20B26FA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B26FB18(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414940;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20B26FB7C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;

  if (sub_20B2531F4(a1))
  {
    sub_20B27E5CC(a2, 0, (_DWORD *)(a1 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v5 = *(_QWORD *)(a1 + 24);
        v4 = *(std::__shared_weak_count **)(a1 + 32);
        v27 = &off_24C4169B8;
        v28 = v5;
        v29 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        break;
      case 1:
        v13 = *(_QWORD *)(a1 + 24);
        v12 = *(std::__shared_weak_count **)(a1 + 32);
        v27 = &off_24C4169B8;
        v28 = v13;
        v29 = v12;
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        break;
      case 2:
        v9 = *(_QWORD *)(a1 + 24);
        v8 = *(std::__shared_weak_count **)(a1 + 32);
        v27 = &off_24C4169B8;
        v28 = v9;
        v29 = v8;
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        break;
      case 3:
        v16 = *(std::__shared_weak_count **)(a1 + 24);
        if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
        {
          v18 = v17;
          v19 = *(_QWORD *)(a1 + 16);
          v27 = &off_24C4169B8;
          if (v19)
          {
            v28 = v19;
            v29 = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          else
          {
            v28 = 0;
            v29 = 0;
          }
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v27 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B2521A0((uint64_t)&v27, a2);
    v27 = &off_24C4169B8;
    v24 = v29;
    if (v29)
    {
      v25 = (unint64_t *)&v29->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_20B26FD58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B26FD6C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t (**v31)();
  uint64_t v32;
  std::__shared_weak_count *v33;

  if (sub_20B2531F4(a2))
  {
    sub_20B27E5CC(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 24);
        v4 = *(std::__shared_weak_count **)(a2 + 32);
        v31 = &off_24C4169B8;
        v32 = v5;
        v33 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        break;
      case 1:
        v13 = *(_QWORD *)(a2 + 24);
        v12 = *(std::__shared_weak_count **)(a2 + 32);
        v31 = &off_24C4169B8;
        v32 = v13;
        v33 = v12;
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        break;
      case 2:
        v9 = *(_QWORD *)(a2 + 24);
        v8 = *(std::__shared_weak_count **)(a2 + 32);
        v31 = &off_24C4169B8;
        v32 = v9;
        v33 = v8;
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        break;
      case 3:
        v16 = *(std::__shared_weak_count **)(a2 + 24);
        if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
        {
          v18 = v17;
          v19 = *(_QWORD *)(a2 + 16);
          v31 = &off_24C4169B8;
          if (v19)
          {
            v32 = v19;
            v33 = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          else
          {
            v32 = 0;
            v33 = 0;
          }
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v32 = 0;
          v33 = 0;
          v31 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B2521A0((uint64_t)&v31, (uint64_t)&v27);
    *(_QWORD *)a1 = v27;
    *(_OWORD *)(a1 + 8) = v28;
    *(_OWORD *)(a1 + 24) = v29;
    *(_QWORD *)(a1 + 40) = v30;
    v31 = &off_24C4169B8;
    v24 = v33;
    if (v33)
    {
      v25 = (unint64_t *)&v33->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_20B26FF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B26FF80()
{
  return 21;
}

_UNKNOWN **sub_20B26FF88()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B380);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B380))
    return &off_253EC31A0;
  __cxa_guard_release(&qword_25463B380);
  return &off_253EC31A0;
}

void sub_20B26FFDC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_20B2536BC(&v20, a1);
  sub_20B26FD6C((uint64_t)v16, a1);
  sub_20B26FD6C((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24C415360;
  if (v19 <= 0x20)
    v6 = 32;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 3;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_20B252770((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = off_24C415360;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20B289AFC((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C4169B8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B2701A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B270204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B270218(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B2536BC(a2, a1);
}

double sub_20B270224(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  double result;
  uint64_t v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _OWORD v43[2];
  __int128 v44;
  uint64_t (**v45)();
  uint64_t *v46;
  std::__shared_weak_count *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _DWORD v51[3];
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[3];

  v56[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C4159A8, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    sub_20B2536BC(&v45, (uint64_t)v4);
    sub_20B26FD6C((uint64_t)v43, v5);
    v48 = v43[0];
    v49 = v43[1];
    v50 = v44;
    *(_QWORD *)&v37 = off_24C415360;
    if (HIDWORD(v44) <= 0x20)
      v6 = 32;
    else
      v6 = HIDWORD(v44);
    *(_QWORD *)&v51[1] = v44;
    v51[0] = 3;
    LODWORD(v56[0]) = 1;
    *(_QWORD *)((char *)v56 + 4) = DWORD2(v44) | (unint64_t)(v6 << 32);
    v52 = v56[0];
    v53 = v6;
    v54 = v44;
    v55 = *(_QWORD *)((char *)v56 + 4);
    sub_20B252770((uint64_t)&v37, (uint64_t)v51, &v48);
    *(_QWORD *)&v37 = off_24C415360;
    if (!v46)
      goto LABEL_13;
    v8 = *v46;
    v7 = (std::__shared_weak_count *)v46[1];
    if (!v7)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if (!v8)
      {
LABEL_13:
        v45 = &off_24C4169B8;
        v12 = v47;
        if (v47)
        {
          v13 = (unint64_t *)&v47->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = DWORD2(v39);
        *(_DWORD *)(a1 + 8) = DWORD2(v37);
        v16 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v16 == -1)
        {
          if ((_DWORD)v15 == -1)
          {
            result = *(double *)&v40;
            v36 = v41;
            *(_OWORD *)(a1 + 48) = v40;
            *(_OWORD *)(a1 + 64) = v36;
            *(_QWORD *)(a1 + 80) = v42;
            return result;
          }
        }
        else if ((_DWORD)v15 == -1)
        {
          ((void (*)(__int128 *, uint64_t))off_24C415AE0[v16])(&v48, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_26;
        }
        *(_QWORD *)&v48 = a1 + 16;
        ((void (*)(__int128 *))off_24C415B20[v15])(&v48);
LABEL_26:
        v20 = DWORD2(v39);
        result = *(double *)&v40;
        v21 = v41;
        *(_OWORD *)(a1 + 48) = v40;
        *(_OWORD *)(a1 + 64) = v21;
        *(_QWORD *)(a1 + 80) = v42;
        *(_QWORD *)&v37 = off_24C414940;
        if ((_DWORD)v20 != -1)
          ((void (*)(__int128 *, __int128 *))off_24C415AE0[v20])(&v48, &v38);
        return result;
      }
    }
    sub_20B289AFC((uint64_t)v46);
    goto LABEL_13;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v48, lpsrc, 21);
  v18 = *(_OWORD *)(v48 + 16);
  v17 = *(_OWORD *)(v48 + 32);
  v37 = *(_OWORD *)v48;
  v38 = v18;
  v39 = v17;
  *(_QWORD *)&v48 = 0;
  MEMORY[0x20BD3583C]();
  sub_20B26FB7C(a1, (uint64_t)&v48);
  *(_QWORD *)&v43[0] = &v37;
  *((_QWORD *)&v43[0] + 1) = &v48;
  if (DWORD1(v38) == 1 && DWORD1(v49) == 1)
  {
    sub_20AFE5D88((size_t *)v43);
  }
  else if (DWORD2(v37) && HIDWORD(v37) && (_DWORD)v38)
  {
    v22 = HIDWORD(v37) - 1;
    v23 = DWORD2(v38);
    v24 = DWORD2(v49);
    v25 = (_BYTE *)v37;
    v26 = (_BYTE *)v48;
    v27 = v38 - 1;
    if ((_DWORD)v38 != 1)
    {
      v28 = HIDWORD(v49);
      v29 = HIDWORD(v38);
      if (HIDWORD(v37) == 1)
      {
        do
        {
          *v26 = *v25;
          v26[1] = v25[1];
          v26[2] = v25[2];
          v25 += v29;
          v26 += v28;
          --v27;
        }
        while (v27);
      }
      else
      {
        v30 = 0;
        v31 = (_BYTE *)(v48 + 2);
        v32 = (_BYTE *)(v37 + 2);
        do
        {
          v33 = v32;
          v34 = v31;
          v35 = v22;
          do
          {
            *(v34 - 2) = *(v33 - 2);
            *(v34 - 1) = *(v33 - 1);
            *v34 = *v33;
            v34 += v24;
            v33 += v23;
            --v35;
          }
          while (v35);
          *(v34 - 2) = *(v33 - 2);
          *(v34 - 1) = *(v33 - 1);
          *v34 = *v33;
          v25 += v29;
          v26 += v28;
          ++v30;
          v31 += v28;
          v32 += v29;
        }
        while (v30 != v27);
      }
    }
    for (; v22; --v22)
    {
      *v26 = *v25;
      v26[1] = v25[1];
      v26[2] = v25[2];
      v25 += v23;
      v26 += v24;
    }
    *v26 = *v25;
    v26[1] = v25[1];
    v26[2] = v25[2];
  }
  return result;
}

void sub_20B270654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B270764(uint64_t a1)
{
  _QWORD v2[6];

  sub_20B26FB7C(a1, (uint64_t)v2);
  return v2[0];
}

double sub_20B270788@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 21
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B26FB7C(a1, (uint64_t)v8);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_20B270828@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 21
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B26FD6C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_20B2708C8()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B4D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B4D8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_25463B4E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463B4E0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25463B4E8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B4E8))
    {
LABEL_13:
      if (byte_25463BA5F < 0)
      {
        sub_20AEC60F4(&xmmword_25463BA30, (void *)qword_25463BA48, unk_25463BA50);
      }
      else
      {
        xmmword_25463BA30 = *(_OWORD *)&qword_25463BA48;
        unk_25463BA40 = unk_25463BA58;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BA30, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B4E0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_25463B4F0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463B4F0))
    {
      sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgb8u>]", &qword_25463BA60);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463BA60, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B4F0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_25463B4F8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B4F8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_25463B500);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25463B500))
      {
        if (byte_25463BA78[23] < 0)
          sub_20AEC60F4(&__p, *(void **)byte_25463BA78, *(unint64_t *)&byte_25463BA78[8]);
        else
          __p = *(std::string *)byte_25463BA78;
        sub_20B52B814(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_25463BA90);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BA90, &dword_20AEBB000);
        __cxa_guard_release(&qword_25463B500);
      }
      if (byte_25463BAA7 < 0)
      {
        sub_20AEC60F4(v17, (void *)xmmword_25463BA90, *((unint64_t *)&xmmword_25463BA90 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_25463BA90;
        v18 = unk_25463BAA0;
      }
      sub_20AFCFF10((char *)v17, (std::string *)&qword_25463BA48);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463BA48, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B4E8);
      goto LABEL_13;
    }
    if (byte_25463BA77 >= 0)
      v6 = byte_25463BA77;
    else
      v6 = unk_25463BA68;
    if (byte_25463BA77 >= 0)
      v7 = &qword_25463BA60;
    else
      v7 = (uint64_t *)qword_25463BA60;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_25463BA78[8] = v6;
      *(_QWORD *)&byte_25463BA78[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_25463BA78 = v13;
    }
    else
    {
      v13 = byte_25463BA78;
      byte_25463BA78[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25463BA78, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B4F8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_25463BA47 < 0)
  {
    sub_20AEC60F4(&xmmword_25463BA18, (void *)xmmword_25463BA30, *((unint64_t *)&xmmword_25463BA30 + 1));
  }
  else
  {
    xmmword_25463BA18 = xmmword_25463BA30;
    unk_25463BA28 = unk_25463BA40;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BA18, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463B4D8);
LABEL_2:
  if (byte_25463BA2F >= 0)
    return &xmmword_25463BA18;
  else
    return (__int128 *)xmmword_25463BA18;
}

void sub_20B270D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25463B4E8);
  __cxa_guard_abort(&qword_25463B4E0);
  __cxa_guard_abort(&qword_25463B4D8);
  _Unwind_Resume(a1);
}

void sub_20B270DB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B4D8);
  _Unwind_Resume(a1);
}

void sub_20B270DD0()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B270E0C(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20B2533D4(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24C416998;
    *v4 = &off_24C415770;
    sub_20B2857F4(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20B289BEC(v42);
    }
LABEL_10:
    v41 = &off_24C4169B8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20B289BEC(v40);
LABEL_22:
    v39 = &off_24C4169B8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20B2536BC(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24C416978;
  *v22 = &off_24C415750;
  sub_20B2854CC(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20B289AFC(v42);
  }
LABEL_35:
  v41 = &off_24C4169B8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20B289AFC(v40);
LABEL_47:
  v39 = &off_24C4169B8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20B2711A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B2855D8(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B2711DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B2711F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B285900(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

void sub_20B271224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B271238()
{
  return 65792;
}

void sub_20B271244(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B2533D4(a2, a1);
}

uint64_t sub_20B271250(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  _BYTE v27[32];
  uint64_t v28;
  uint64_t (**v29)();
  uint64_t *v30;
  std::__shared_weak_count *v31;
  _BYTE v32[24];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C4153F0;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x10)
    v4 = 16;
  else
    v4 = v4;
  *(_DWORD *)v32 = 3;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v32[4] = v5;
  *(_QWORD *)v27 = *(_QWORD *)v32;
  *(_DWORD *)&v27[8] = HIDWORD(v5);
  *(_DWORD *)v32 = 1;
  *(_QWORD *)&v32[4] = v3 | (v4 << 32);
  *(_QWORD *)&v27[12] = *(_QWORD *)v32;
  *(_DWORD *)&v27[20] = v4;
  *(_QWORD *)&v27[24] = v5;
  v28 = *(_QWORD *)&v32[4];
  *(_QWORD *)a1 = off_24C414AF0;
  *(_DWORD *)(a1 + 8) = 0;
  sub_20B256E2C(0, 22, (uint64_t)v27, a1 + 16);
  v6 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v27[24] || !*(_DWORD *)&v27[28])
  {
    v25 = *(_OWORD *)&v27[16];
    *v6 = *(_OWORD *)v27;
    *(_OWORD *)(a1 + 64) = v25;
    *(_QWORD *)(a1 + 80) = v28;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_20AECFAB8();
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(std::__shared_weak_count **)(a1 + 32);
  v30 = v7;
  v31 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v29 = &off_24C416978;
  if (v7)
  {
    v12 = *v7;
    v11 = (std::__shared_weak_count *)v7[1];
    if (!v11)
      goto LABEL_16;
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (v15)
    {
LABEL_16:
      if (!v12)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v12)
LABEL_17:
      sub_20B289920((uint64_t)v30);
  }
LABEL_18:
  sub_20B2574F0((uint64_t)&v29, (uint64_t)v32);
  v16 = v33;
  *v6 = *(_OWORD *)&v32[8];
  *(_OWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 80) = v34;
  if (v30)
  {
    v18 = *v30;
    v17 = (std::__shared_weak_count *)v30[1];
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if (!v18)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v18)
LABEL_25:
      sub_20B289AFC((uint64_t)v30);
  }
LABEL_26:
  v29 = &off_24C4169B8;
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = off_24C4153F0;
  return a1;
}

void sub_20B2714CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B271580(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414AF0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20B2715E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;

  if (sub_20B25856C(a1))
  {
    sub_20B27E5CC(a2, 0, (_DWORD *)(a1 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v5 = *(_QWORD *)(a1 + 24);
        v4 = *(std::__shared_weak_count **)(a1 + 32);
        v27 = &off_24C4169B8;
        v28 = v5;
        v29 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        break;
      case 1:
        v13 = *(_QWORD *)(a1 + 24);
        v12 = *(std::__shared_weak_count **)(a1 + 32);
        v27 = &off_24C4169B8;
        v28 = v13;
        v29 = v12;
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        break;
      case 2:
        v9 = *(_QWORD *)(a1 + 24);
        v8 = *(std::__shared_weak_count **)(a1 + 32);
        v27 = &off_24C4169B8;
        v28 = v9;
        v29 = v8;
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        break;
      case 3:
        v16 = *(std::__shared_weak_count **)(a1 + 24);
        if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
        {
          v18 = v17;
          v19 = *(_QWORD *)(a1 + 16);
          v27 = &off_24C4169B8;
          if (v19)
          {
            v28 = v19;
            v29 = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          else
          {
            v28 = 0;
            v29 = 0;
          }
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v27 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B2574F0((uint64_t)&v27, a2);
    v27 = &off_24C4169B8;
    v24 = v29;
    if (v29)
    {
      v25 = (unint64_t *)&v29->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_20B2717C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B2717D4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t (**v31)();
  uint64_t v32;
  std::__shared_weak_count *v33;

  if (sub_20B25856C(a2))
  {
    sub_20B27E5CC(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 24);
        v4 = *(std::__shared_weak_count **)(a2 + 32);
        v31 = &off_24C4169B8;
        v32 = v5;
        v33 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        break;
      case 1:
        v13 = *(_QWORD *)(a2 + 24);
        v12 = *(std::__shared_weak_count **)(a2 + 32);
        v31 = &off_24C4169B8;
        v32 = v13;
        v33 = v12;
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        break;
      case 2:
        v9 = *(_QWORD *)(a2 + 24);
        v8 = *(std::__shared_weak_count **)(a2 + 32);
        v31 = &off_24C4169B8;
        v32 = v9;
        v33 = v8;
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        break;
      case 3:
        v16 = *(std::__shared_weak_count **)(a2 + 24);
        if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
        {
          v18 = v17;
          v19 = *(_QWORD *)(a2 + 16);
          v31 = &off_24C4169B8;
          if (v19)
          {
            v32 = v19;
            v33 = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          else
          {
            v32 = 0;
            v33 = 0;
          }
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v32 = 0;
          v33 = 0;
          v31 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B2574F0((uint64_t)&v31, (uint64_t)&v27);
    *(_QWORD *)a1 = v27;
    *(_OWORD *)(a1 + 8) = v28;
    *(_OWORD *)(a1 + 24) = v29;
    *(_QWORD *)(a1 + 40) = v30;
    v31 = &off_24C4169B8;
    v24 = v33;
    if (v33)
    {
      v25 = (unint64_t *)&v33->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_20B2719D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B285E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B2719E8()
{
  return 22;
}

_UNKNOWN **sub_20B2719F0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B380);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B380))
    return &off_253EC31A0;
  __cxa_guard_release(&qword_25463B380);
  return &off_253EC31A0;
}

void sub_20B271A44(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_20B258A34(&v20, a1);
  sub_20B2717D4((uint64_t)v16, a1);
  sub_20B2717D4((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24C4153F0;
  if (v19 <= 0x10)
    v6 = 16;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 3;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_20B257AC0((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = off_24C4153F0;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20B289AFC((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C4169B8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B271C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B271C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B271C80(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B258A34(a2, a1);
}

void sub_20B271C8C(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _WORD *v31;
  _WORD *v32;
  _WORD *v33;
  _WORD *v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _OWORD v43[2];
  __int128 v44;
  uint64_t (**v45)();
  uint64_t *v46;
  std::__shared_weak_count *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _DWORD v51[3];
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[3];

  v56[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C4159C0, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    sub_20B258A34(&v45, (uint64_t)v4);
    sub_20B2717D4((uint64_t)v43, v5);
    v48 = v43[0];
    v49 = v43[1];
    v50 = v44;
    *(_QWORD *)&v37 = off_24C4153F0;
    if (HIDWORD(v44) <= 0x10)
      v6 = 16;
    else
      v6 = HIDWORD(v44);
    *(_QWORD *)&v51[1] = v44;
    v51[0] = 3;
    LODWORD(v56[0]) = 1;
    *(_QWORD *)((char *)v56 + 4) = DWORD2(v44) | (unint64_t)(v6 << 32);
    v52 = v56[0];
    v53 = v6;
    v54 = v44;
    v55 = *(_QWORD *)((char *)v56 + 4);
    sub_20B257AC0((uint64_t)&v37, (uint64_t)v51, &v48);
    *(_QWORD *)&v37 = off_24C4153F0;
    if (!v46)
      goto LABEL_13;
    v8 = *v46;
    v7 = (std::__shared_weak_count *)v46[1];
    if (!v7)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if (!v8)
      {
LABEL_13:
        v45 = &off_24C4169B8;
        v12 = v47;
        if (v47)
        {
          v13 = (unint64_t *)&v47->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = DWORD2(v39);
        *(_DWORD *)(a1 + 8) = DWORD2(v37);
        v16 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v16 == -1)
        {
          if ((_DWORD)v15 == -1)
          {
            v36 = v41;
            *(_OWORD *)(a1 + 48) = v40;
            *(_OWORD *)(a1 + 64) = v36;
            *(_QWORD *)(a1 + 80) = v42;
            return;
          }
        }
        else if ((_DWORD)v15 == -1)
        {
          ((void (*)(__int128 *, uint64_t))off_24C415AE0[v16])(&v48, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_26;
        }
        *(_QWORD *)&v48 = a1 + 16;
        ((void (*)(__int128 *))off_24C415B20[v15])(&v48);
LABEL_26:
        v19 = DWORD2(v39);
        v20 = v41;
        *(_OWORD *)(a1 + 48) = v40;
        *(_OWORD *)(a1 + 64) = v20;
        *(_QWORD *)(a1 + 80) = v42;
        *(_QWORD *)&v37 = off_24C414AF0;
        if ((_DWORD)v19 != -1)
          ((void (*)(__int128 *, __int128 *))off_24C415AE0[v19])(&v48, &v38);
        return;
      }
    }
    sub_20B289AFC((uint64_t)v46);
    goto LABEL_13;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v48, lpsrc, 22);
  v18 = *(_OWORD *)(v48 + 16);
  v17 = *(_OWORD *)(v48 + 32);
  v37 = *(_OWORD *)v48;
  v38 = v18;
  v39 = v17;
  *(_QWORD *)&v48 = 0;
  MEMORY[0x20BD3583C]();
  sub_20B2715E4(a1, (uint64_t)&v48);
  *(_QWORD *)&v43[0] = &v37;
  *((_QWORD *)&v43[0] + 1) = &v48;
  if (DWORD1(v38) == 1 && DWORD1(v49) == 1)
  {
    sub_20AFC7BE4((uint64_t *)v43);
    return;
  }
  if (DWORD2(v37) && HIDWORD(v37) && (_DWORD)v38)
  {
    v21 = HIDWORD(v37) - 1;
    v22 = DWORD2(v38);
    v23 = DWORD2(v49);
    v24 = (_WORD *)v37;
    v25 = (_WORD *)v48;
    v26 = v38 - 1;
    if ((_DWORD)v38 != 1)
    {
      v27 = HIDWORD(v49);
      v28 = HIDWORD(v38);
      if (HIDWORD(v37) == 1)
      {
        do
        {
          *v25 = *v24;
          v25[1] = v24[1];
          v25[2] = v24[2];
          v24 += v28;
          v25 += v27;
          --v26;
        }
        while (v26);
LABEL_44:
        *v25 = *v24;
        v25[1] = v24[1];
        v25[2] = v24[2];
        return;
      }
      v29 = 0;
      v30 = 2 * DWORD2(v49);
      v31 = (_WORD *)(v48 + 4);
      v32 = (_WORD *)(v37 + 4);
      do
      {
        v33 = v32;
        v34 = v31;
        v35 = v21;
        do
        {
          *(v34 - 2) = *(v33 - 2);
          *(v34 - 1) = *(v33 - 1);
          *v34 = *v33;
          v34 = (_WORD *)((char *)v34 + v30);
          v33 += v22;
          --v35;
        }
        while (v35);
        *(v34 - 2) = *(v33 - 2);
        *(v34 - 1) = *(v33 - 1);
        *v34 = *v33;
        v24 += v28;
        v25 += v27;
        ++v29;
        v31 += v27;
        v32 += v28;
      }
      while (v29 != v26);
    }
    for (; v21; --v21)
    {
      *v25 = *v24;
      v25[1] = v24[1];
      v25[2] = v24[2];
      v24 += v22;
      v25 += v23;
    }
    goto LABEL_44;
  }
}

void sub_20B2720DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B2721EC(uint64_t a1)
{
  _QWORD v2[6];

  sub_20B2715E4(a1, (uint64_t)v2);
  return v2[0];
}

double sub_20B272210@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 22
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B2715E4(a1, (uint64_t)v8);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_20B2722B0@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 22
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B2717D4((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_20B272350()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B508);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B508))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_25463B510);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463B510))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25463B518);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B518))
    {
LABEL_13:
      if (byte_25463BAEF < 0)
      {
        sub_20AEC60F4(&xmmword_25463BAC0, (void *)qword_25463BAD8, unk_25463BAE0);
      }
      else
      {
        xmmword_25463BAC0 = *(_OWORD *)&qword_25463BAD8;
        unk_25463BAD0 = unk_25463BAE8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BAC0, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B510);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_25463B520);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463B520))
    {
      sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgb16u>]", &qword_25463BAF0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463BAF0, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B520);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_25463B528);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B528))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_25463B530);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25463B530))
      {
        if (byte_25463BB08[23] < 0)
          sub_20AEC60F4(&__p, *(void **)byte_25463BB08, *(unint64_t *)&byte_25463BB08[8]);
        else
          __p = *(std::string *)byte_25463BB08;
        sub_20B52B814(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_25463BB20);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BB20, &dword_20AEBB000);
        __cxa_guard_release(&qword_25463B530);
      }
      if (byte_25463BB37 < 0)
      {
        sub_20AEC60F4(v17, (void *)xmmword_25463BB20, *((unint64_t *)&xmmword_25463BB20 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_25463BB20;
        v18 = unk_25463BB30;
      }
      sub_20AFD055C((char *)v17, (std::string *)&qword_25463BAD8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463BAD8, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B518);
      goto LABEL_13;
    }
    if (byte_25463BB07 >= 0)
      v6 = byte_25463BB07;
    else
      v6 = unk_25463BAF8;
    if (byte_25463BB07 >= 0)
      v7 = &qword_25463BAF0;
    else
      v7 = (uint64_t *)qword_25463BAF0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_25463BB08[8] = v6;
      *(_QWORD *)&byte_25463BB08[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_25463BB08 = v13;
    }
    else
    {
      v13 = byte_25463BB08;
      byte_25463BB08[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25463BB08, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B528);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_25463BAD7 < 0)
  {
    sub_20AEC60F4(&xmmword_25463BAA8, (void *)xmmword_25463BAC0, *((unint64_t *)&xmmword_25463BAC0 + 1));
  }
  else
  {
    xmmword_25463BAA8 = xmmword_25463BAC0;
    unk_25463BAB8 = unk_25463BAD0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BAA8, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463B508);
LABEL_2:
  if (byte_25463BABF >= 0)
    return &xmmword_25463BAA8;
  else
    return (__int128 *)xmmword_25463BAA8;
}

void sub_20B2727A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25463B518);
  __cxa_guard_abort(&qword_25463B510);
  __cxa_guard_abort(&qword_25463B508);
  _Unwind_Resume(a1);
}

void sub_20B272840(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B508);
  _Unwind_Resume(a1);
}

void sub_20B272858()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B272894(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20B25874C(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24C416998;
    *v4 = &off_24C415770;
    sub_20B2857F4(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20B289BEC(v42);
    }
LABEL_10:
    v41 = &off_24C4169B8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20B289BEC(v40);
LABEL_22:
    v39 = &off_24C4169B8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20B258A34(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24C416978;
  *v22 = &off_24C415750;
  sub_20B2854CC(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20B289AFC(v42);
  }
LABEL_35:
  v41 = &off_24C4169B8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20B289AFC(v40);
LABEL_47:
  v39 = &off_24C4169B8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20B272C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B2855D8(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B272C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B272C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B285900(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

void sub_20B272CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B272CC0()
{
  return 65792;
}

void sub_20B272CCC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B25874C(a2, a1);
}

uint64_t sub_20B272CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  _BYTE v27[32];
  uint64_t v28;
  uint64_t (**v29)();
  uint64_t *v30;
  std::__shared_weak_count *v31;
  _BYTE v32[24];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C415480;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x20)
    v4 = 32;
  else
    v4 = v4;
  *(_DWORD *)v32 = 4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v32[4] = v5;
  *(_QWORD *)v27 = *(_QWORD *)v32;
  *(_DWORD *)&v27[8] = HIDWORD(v5);
  *(_DWORD *)v32 = 1;
  *(_QWORD *)&v32[4] = v3 | (v4 << 32);
  *(_QWORD *)&v27[12] = *(_QWORD *)v32;
  *(_DWORD *)&v27[20] = v4;
  *(_QWORD *)&v27[24] = v5;
  v28 = *(_QWORD *)&v32[4];
  *(_QWORD *)a1 = off_24C4149D0;
  *(_DWORD *)(a1 + 8) = 0;
  sub_20B2537B0(0, 25, (uint64_t)v27, a1 + 16);
  v6 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v27[24] || !*(_DWORD *)&v27[28])
  {
    v25 = *(_OWORD *)&v27[16];
    *v6 = *(_OWORD *)v27;
    *(_OWORD *)(a1 + 64) = v25;
    *(_QWORD *)(a1 + 80) = v28;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_20AECFAB8();
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(std::__shared_weak_count **)(a1 + 32);
  v30 = v7;
  v31 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v29 = &off_24C416978;
  if (v7)
  {
    v12 = *v7;
    v11 = (std::__shared_weak_count *)v7[1];
    if (!v11)
      goto LABEL_16;
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (v15)
    {
LABEL_16:
      if (!v12)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v12)
LABEL_17:
      sub_20B289920((uint64_t)v30);
  }
LABEL_18:
  sub_20B253E70((uint64_t)v32, (uint64_t)&v29);
  v16 = v33;
  *v6 = *(_OWORD *)&v32[8];
  *(_OWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 80) = v34;
  if (v30)
  {
    v18 = *v30;
    v17 = (std::__shared_weak_count *)v30[1];
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if (!v18)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v18)
LABEL_25:
      sub_20B289AFC((uint64_t)v30);
  }
LABEL_26:
  v29 = &off_24C4169B8;
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = off_24C415480;
  return a1;
}

void sub_20B272F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B273008(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C4149D0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20B27306C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20B254D2C(a1))
  {
    if (*(_DWORD *)(a1 + 76))
      v4 = *(_DWORD *)(a1 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a1 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(_QWORD *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(_QWORD *)(a2 + 32) = v5;
    *(_QWORD *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a1 + 24);
        v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a1 + 24);
        v19 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a1 + 24);
        v15 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a1 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v34 = &off_24C4169B8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B253E70(a2, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C4169B8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B2732CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B2732E0(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_20B254D2C(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 4;
    *(_QWORD *)&v37[4] = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 4);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24C4169B8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B253E70((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24C4169B8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B273564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B273578()
{
  return 25;
}

_UNKNOWN **sub_20B273580()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B380);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B380))
    return &off_253EC31A0;
  __cxa_guard_release(&qword_25463B380);
  return &off_253EC31A0;
}

void sub_20B2735D4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_20B255278(&v20, a1);
  sub_20B2732E0((uint64_t)v16, a1);
  sub_20B2732E0((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24C415480;
  if (v19 <= 0x20)
    v6 = 32;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 4;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_20B2543A0((uint64_t)v4, 25, (uint64_t)v24, v23);
  *v5 = off_24C415480;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20B289AFC((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C4169B8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B2737A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B273800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B273814(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B255278(a2, a1);
}

double sub_20B273820(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  double result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t (**v32)();
  uint64_t *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _DWORD v38[6];
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C4159D8, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    sub_20B255278(&v32, (uint64_t)v4);
    sub_20B2732E0((uint64_t)v30, v5);
    v35 = v30[0];
    v36 = v30[1];
    v37 = v31;
    *(_QWORD *)&v24 = off_24C415480;
    if (HIDWORD(v31) <= 0x20)
      v6 = 32;
    else
      v6 = HIDWORD(v31);
    *(_QWORD *)&v38[1] = v31;
    v38[0] = 4;
    LODWORD(v41[0]) = 1;
    *(_QWORD *)((char *)v41 + 4) = DWORD2(v31) | (unint64_t)(v6 << 32);
    *(_QWORD *)&v38[3] = v41[0];
    v38[5] = v6;
    v39 = v31;
    v40 = *(_QWORD *)((char *)v41 + 4);
    sub_20B2543A0((uint64_t)&v24, 25, (uint64_t)v38, &v35);
    *(_QWORD *)&v24 = off_24C415480;
    if (!v33)
      goto LABEL_13;
    v8 = *v33;
    v7 = (std::__shared_weak_count *)v33[1];
    if (!v7)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if (!v8)
      {
LABEL_13:
        v32 = &off_24C4169B8;
        v12 = v34;
        if (v34)
        {
          v13 = (unint64_t *)&v34->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = DWORD2(v26);
        *(_DWORD *)(a1 + 8) = DWORD2(v24);
        v16 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v16 == -1)
        {
          if ((_DWORD)v15 == -1)
          {
            result = *(double *)&v27;
            v23 = v28;
            *(_OWORD *)(a1 + 48) = v27;
            *(_OWORD *)(a1 + 64) = v23;
            *(_QWORD *)(a1 + 80) = v29;
            return result;
          }
        }
        else if ((_DWORD)v15 == -1)
        {
          ((void (*)(__int128 *, uint64_t))off_24C415AE0[v16])(&v35, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_26;
        }
        *(_QWORD *)&v35 = a1 + 16;
        ((void (*)(__int128 *))off_24C415B20[v15])(&v35);
LABEL_26:
        v21 = DWORD2(v26);
        result = *(double *)&v27;
        v22 = v28;
        *(_OWORD *)(a1 + 48) = v27;
        *(_OWORD *)(a1 + 64) = v22;
        *(_QWORD *)(a1 + 80) = v29;
        *(_QWORD *)&v24 = off_24C4149D0;
        if ((_DWORD)v21 != -1)
          ((void (*)(__int128 *, __int128 *))off_24C415AE0[v21])(&v35, &v25);
        return result;
      }
    }
    sub_20B289AFC((uint64_t)v33);
    goto LABEL_13;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v35, lpsrc, 25);
  v17 = v35;
  v19 = *(_OWORD *)(v35 + 16);
  v18 = *(_OWORD *)(v35 + 32);
  v24 = *(_OWORD *)v35;
  v25 = v19;
  v26 = v18;
  *(_QWORD *)&v35 = 0;
  MEMORY[0x20BD3583C](v17);
  sub_20B27306C(a1, (uint64_t)&v35);
  *(_QWORD *)&v30[0] = &v24;
  *((_QWORD *)&v30[0] + 1) = &v35;
  if (DWORD1(v25) == 1 && DWORD1(v36) == 1)
  {
    sub_20AFE5D88((size_t *)v30);
  }
  else
  {
    LOBYTE(v32) = 0;
    if (DWORD2(v24) && HIDWORD(v24) && (_DWORD)v25)
    {
      *(_QWORD *)v38 = &v32;
      sub_20AFEA3E0((uint64_t)v38, (uint64_t)&v24, (uint64_t)&v35);
    }
  }
  return result;
}

void sub_20B273B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B273C74(uint64_t a1)
{
  _QWORD v2[6];

  sub_20B27306C(a1, (uint64_t)v2);
  return v2[0];
}

double sub_20B273C98@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 25
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B27306C(a1, (uint64_t)v8);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_20B273D38@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 25
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B2732E0((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_20B273DD8()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B538);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B538))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_25463B540);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463B540))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25463B548);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B548))
    {
LABEL_13:
      if (byte_25463BB7F < 0)
      {
        sub_20AEC60F4(&xmmword_25463BB50, (void *)qword_25463BB68, unk_25463BB70);
      }
      else
      {
        xmmword_25463BB50 = *(_OWORD *)&qword_25463BB68;
        unk_25463BB60 = unk_25463BB78;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BB50, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B540);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_25463B550);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463B550))
    {
      sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Bgra8u>]", &qword_25463BB80);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463BB80, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B550);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_25463B558);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B558))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_25463B560);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25463B560))
      {
        if (byte_25463BB98[23] < 0)
          sub_20AEC60F4(&__p, *(void **)byte_25463BB98, *(unint64_t *)&byte_25463BB98[8]);
        else
          __p = *(std::string *)byte_25463BB98;
        sub_20B52B814(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_25463BBB0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BBB0, &dword_20AEBB000);
        __cxa_guard_release(&qword_25463B560);
      }
      if (byte_25463BBC7 < 0)
      {
        sub_20AEC60F4(v17, (void *)xmmword_25463BBB0, *((unint64_t *)&xmmword_25463BBB0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_25463BBB0;
        v18 = unk_25463BBC0;
      }
      sub_20AFD1AA4((char *)v17, (std::string *)&qword_25463BB68);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463BB68, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B548);
      goto LABEL_13;
    }
    if (byte_25463BB97 >= 0)
      v6 = byte_25463BB97;
    else
      v6 = unk_25463BB88;
    if (byte_25463BB97 >= 0)
      v7 = &qword_25463BB80;
    else
      v7 = (uint64_t *)qword_25463BB80;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_25463BB98[8] = v6;
      *(_QWORD *)&byte_25463BB98[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_25463BB98 = v13;
    }
    else
    {
      v13 = byte_25463BB98;
      byte_25463BB98[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25463BB98, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B558);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_25463BB67 < 0)
  {
    sub_20AEC60F4(&xmmword_25463BB38, (void *)xmmword_25463BB50, *((unint64_t *)&xmmword_25463BB50 + 1));
  }
  else
  {
    xmmword_25463BB38 = xmmword_25463BB50;
    unk_25463BB48 = unk_25463BB60;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BB38, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463B538);
LABEL_2:
  if (byte_25463BB4F >= 0)
    return &xmmword_25463BB38;
  else
    return (__int128 *)xmmword_25463BB38;
}

void sub_20B27422C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25463B548);
  __cxa_guard_abort(&qword_25463B540);
  __cxa_guard_abort(&qword_25463B538);
  _Unwind_Resume(a1);
}

void sub_20B2742C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B538);
  _Unwind_Resume(a1);
}

void sub_20B2742E0()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B27431C(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20B254F0C(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24C416998;
    *v4 = &off_24C415770;
    sub_20B2857F4(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20B289BEC(v42);
    }
LABEL_10:
    v41 = &off_24C4169B8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20B289BEC(v40);
LABEL_22:
    v39 = &off_24C4169B8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20B255278(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24C416978;
  *v22 = &off_24C415750;
  sub_20B2854CC(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20B289AFC(v42);
  }
LABEL_35:
  v41 = &off_24C4169B8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20B289AFC(v40);
LABEL_47:
  v39 = &off_24C4169B8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20B2746B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B2855D8(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B2746EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B274700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B285900(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

void sub_20B274734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B274748()
{
  return 65792;
}

void sub_20B274754(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B254F0C(a2, a1);
}

uint64_t sub_20B274760(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  _BYTE v27[32];
  uint64_t v28;
  uint64_t (**v29)();
  uint64_t *v30;
  std::__shared_weak_count *v31;
  _BYTE v32[24];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C415510;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x10)
    v4 = 16;
  else
    v4 = v4;
  *(_DWORD *)v32 = 4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v32[4] = v5;
  *(_QWORD *)v27 = *(_QWORD *)v32;
  *(_DWORD *)&v27[8] = HIDWORD(v5);
  *(_DWORD *)v32 = 1;
  *(_QWORD *)&v32[4] = v3 | (v4 << 32);
  *(_QWORD *)&v27[12] = *(_QWORD *)v32;
  *(_DWORD *)&v27[20] = v4;
  *(_QWORD *)&v27[24] = v5;
  v28 = *(_QWORD *)&v32[4];
  *(_QWORD *)a1 = off_24C414D30;
  *(_DWORD *)(a1 + 8) = 0;
  sub_20B25DC84(0, 31, (uint64_t)v27, a1 + 16);
  v6 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v27[24] || !*(_DWORD *)&v27[28])
  {
    v25 = *(_OWORD *)&v27[16];
    *v6 = *(_OWORD *)v27;
    *(_OWORD *)(a1 + 64) = v25;
    *(_QWORD *)(a1 + 80) = v28;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_20AECFAB8();
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(std::__shared_weak_count **)(a1 + 32);
  v30 = v7;
  v31 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v29 = &off_24C416978;
  if (v7)
  {
    v12 = *v7;
    v11 = (std::__shared_weak_count *)v7[1];
    if (!v11)
      goto LABEL_16;
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (v15)
    {
LABEL_16:
      if (!v12)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v12)
LABEL_17:
      sub_20B289920((uint64_t)v30);
  }
LABEL_18:
  sub_20B2591EC((uint64_t)v32, (uint64_t)&v29);
  v16 = v33;
  *v6 = *(_OWORD *)&v32[8];
  *(_OWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 80) = v34;
  if (v30)
  {
    v18 = *v30;
    v17 = (std::__shared_weak_count *)v30[1];
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if (!v18)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v18)
LABEL_25:
      sub_20B289AFC((uint64_t)v30);
  }
LABEL_26:
  v29 = &off_24C4169B8;
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = off_24C415510;
  return a1;
}

void sub_20B2749DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B274A90(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414D30;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20B274AF4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20B25EED4(a1))
  {
    if (*(_DWORD *)(a1 + 76))
      v4 = *(_DWORD *)(a1 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a1 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(_QWORD *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(_QWORD *)(a2 + 32) = v5;
    *(_QWORD *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a1 + 24);
        v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a1 + 24);
        v19 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a1 + 24);
        v15 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a1 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v34 = &off_24C4169B8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B2591EC(a2, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C4169B8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B274D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B274D68(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_20B25EED4(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 4;
    *(_QWORD *)&v37[4] = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 4);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24C4169B8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B2591EC((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24C4169B8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B274FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B275000()
{
  return 31;
}

_UNKNOWN **sub_20B275008()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B380);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B380))
    return &off_253EC31A0;
  __cxa_guard_release(&qword_25463B380);
  return &off_253EC31A0;
}

void sub_20B27505C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  _OWORD v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_20B25F41C(&v20, a1);
  sub_20B274D68((uint64_t)v16, a1);
  sub_20B274D68((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24C415510;
  if (v19 <= 0x10)
    v6 = 16;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 4;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_20B25E6DC((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = off_24C415510;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20B289AFC((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C4169B8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B275228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B275284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B275298(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B25F41C(a2, a1);
}

double sub_20B2752A4(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  uint64_t (**v36)();
  uint64_t *v37;
  std::__shared_weak_count *v38;
  _OWORD v39[3];
  _DWORD v40[3];
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];

  v45[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C4159F0, 0);
  if (!v4)
  {
    (*(void (**)(_OWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v39, lpsrc, 31);
    v17 = *(_QWORD *)&v39[0];
    v19 = *(_OWORD *)(*(_QWORD *)&v39[0] + 16);
    v18 = *(_OWORD *)(*(_QWORD *)&v39[0] + 32);
    v28 = **(_OWORD **)&v39[0];
    v29 = v19;
    v30 = v18;
    *(_QWORD *)&v39[0] = 0;
    MEMORY[0x20BD3583C](v17, 0xC400A2AC0F1, v20, v21, v22, v23);
    sub_20B274AF4(a1, (uint64_t)v39);
    *(_QWORD *)&v34[0] = &v28;
    *((_QWORD *)&v34[0] + 1) = v39;
    return sub_20AFEAE58(v34);
  }
  v5 = (uint64_t)v4;
  sub_20B25F41C(&v36, (uint64_t)v4);
  sub_20B274D68((uint64_t)v34, v5);
  v39[0] = v34[0];
  v39[1] = v34[1];
  v39[2] = v35;
  *(_QWORD *)&v28 = off_24C415510;
  if (HIDWORD(v35) <= 0x10)
    v6 = 16;
  else
    v6 = HIDWORD(v35);
  *(_QWORD *)&v40[1] = v35;
  v40[0] = 4;
  LODWORD(v45[0]) = 1;
  *(_QWORD *)((char *)v45 + 4) = DWORD2(v35) | (unint64_t)(v6 << 32);
  v41 = v45[0];
  v42 = v6;
  v43 = v35;
  v44 = *(_QWORD *)((char *)v45 + 4);
  sub_20B25E6DC((uint64_t)&v28, (uint64_t)v40, v39);
  *(_QWORD *)&v28 = off_24C415510;
  if (v37)
  {
    v8 = *v37;
    v7 = (std::__shared_weak_count *)v37[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20B289AFC((uint64_t)v37);
  }
LABEL_13:
  v36 = &off_24C4169B8;
  v12 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = DWORD2(v30);
  *(_DWORD *)(a1 + 8) = DWORD2(v28);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v31;
      v27 = v32;
      *(_OWORD *)(a1 + 48) = v31;
      *(_OWORD *)(a1 + 64) = v27;
      *(_QWORD *)(a1 + 80) = v33;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_24C415AE0[v16])(v39, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_24;
  }
  *(_QWORD *)&v39[0] = a1 + 16;
  ((void (*)(_OWORD *))off_24C415B20[v15])(v39);
LABEL_24:
  v25 = DWORD2(v30);
  result = *(double *)&v31;
  v26 = v32;
  *(_OWORD *)(a1 + 48) = v31;
  *(_OWORD *)(a1 + 64) = v26;
  *(_QWORD *)(a1 + 80) = v33;
  *(_QWORD *)&v28 = off_24C414D30;
  if ((_DWORD)v25 != -1)
    ((void (*)(_OWORD *, __int128 *))off_24C415AE0[v25])(v39, &v29);
  return result;
}

void sub_20B2755A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B2756B8(uint64_t a1)
{
  _QWORD v2[6];

  sub_20B274AF4(a1, (uint64_t)v2);
  return v2[0];
}

double sub_20B2756DC@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 31
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B274AF4(a1, (uint64_t)v8);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_20B27577C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 31
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B274D68((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_20B27581C()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B568);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B568))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_25463B570);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463B570))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25463B578);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B578))
    {
LABEL_13:
      if (byte_25463BC0F < 0)
      {
        sub_20AEC60F4(&xmmword_25463BBE0, (void *)qword_25463BBF8, unk_25463BC00);
      }
      else
      {
        xmmword_25463BBE0 = *(_OWORD *)&qword_25463BBF8;
        unk_25463BBF0 = unk_25463BC08;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BBE0, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B570);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_25463B580);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463B580))
    {
      sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgba16f>]", &qword_25463BC10);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463BC10, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B580);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_25463B588);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B588))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_25463B590);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25463B590))
      {
        if (byte_25463BC28[23] < 0)
          sub_20AEC60F4(&__p, *(void **)byte_25463BC28, *(unint64_t *)&byte_25463BC28[8]);
        else
          __p = *(std::string *)byte_25463BC28;
        sub_20B52B814(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_25463BC40);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BC40, &dword_20AEBB000);
        __cxa_guard_release(&qword_25463B590);
      }
      if (byte_25463BC57 < 0)
      {
        sub_20AEC60F4(v17, (void *)xmmword_25463BC40, *((unint64_t *)&xmmword_25463BC40 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_25463BC40;
        v18 = unk_25463BC50;
      }
      sub_20AFD45B8((char *)v17, (std::string *)&qword_25463BBF8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463BBF8, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B578);
      goto LABEL_13;
    }
    if (byte_25463BC27 >= 0)
      v6 = byte_25463BC27;
    else
      v6 = unk_25463BC18;
    if (byte_25463BC27 >= 0)
      v7 = &qword_25463BC10;
    else
      v7 = (uint64_t *)qword_25463BC10;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_25463BC28[8] = v6;
      *(_QWORD *)&byte_25463BC28[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_25463BC28 = v13;
    }
    else
    {
      v13 = byte_25463BC28;
      byte_25463BC28[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25463BC28, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B588);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_25463BBF7 < 0)
  {
    sub_20AEC60F4(&xmmword_25463BBC8, (void *)xmmword_25463BBE0, *((unint64_t *)&xmmword_25463BBE0 + 1));
  }
  else
  {
    xmmword_25463BBC8 = xmmword_25463BBE0;
    unk_25463BBD8 = unk_25463BBF0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BBC8, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463B568);
LABEL_2:
  if (byte_25463BBDF >= 0)
    return &xmmword_25463BBC8;
  else
    return (__int128 *)xmmword_25463BBC8;
}

void sub_20B275C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25463B578);
  __cxa_guard_abort(&qword_25463B570);
  __cxa_guard_abort(&qword_25463B568);
  _Unwind_Resume(a1);
}

void sub_20B275D0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B568);
  _Unwind_Resume(a1);
}

void sub_20B275D24()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B275D60(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20B25F0B4(a1, &v39);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24C416998;
    *v4 = &off_24C415770;
    sub_20B2857F4(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20B289BEC(v42);
    }
LABEL_10:
    v41 = &off_24C4169B8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20B289BEC(v40);
LABEL_22:
    v39 = &off_24C4169B8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20B25F41C(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24C416978;
  *v22 = &off_24C415750;
  sub_20B2854CC(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20B289AFC(v42);
  }
LABEL_35:
  v41 = &off_24C4169B8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20B289AFC(v40);
LABEL_47:
  v39 = &off_24C4169B8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20B276100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B2855D8(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B276134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B276148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B285900(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

void sub_20B27617C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B276190()
{
  return 65792;
}

uint64_t sub_20B2761A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  _BYTE v27[32];
  uint64_t v28;
  uint64_t (**v29)();
  uint64_t *v30;
  std::__shared_weak_count *v31;
  _BYTE v32[24];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C4155A0;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 8)
    v4 = 8;
  else
    v4 = v4;
  *(_DWORD *)v32 = 4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v32[4] = v5;
  *(_QWORD *)v27 = *(_QWORD *)v32;
  *(_DWORD *)&v27[8] = HIDWORD(v5);
  *(_DWORD *)v32 = 1;
  *(_QWORD *)&v32[4] = v3 | (v4 << 32);
  *(_QWORD *)&v27[12] = *(_QWORD *)v32;
  *(_DWORD *)&v27[20] = v4;
  *(_QWORD *)&v27[24] = v5;
  v28 = *(_QWORD *)&v32[4];
  *(_QWORD *)a1 = off_24C414EE0;
  *(_DWORD *)(a1 + 8) = 0;
  sub_20B262B94(0, 32, (uint64_t)v27, a1 + 16);
  v6 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v27[24] || !*(_DWORD *)&v27[28])
  {
    v25 = *(_OWORD *)&v27[16];
    *v6 = *(_OWORD *)v27;
    *(_OWORD *)(a1 + 64) = v25;
    *(_QWORD *)(a1 + 80) = v28;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_20AECFAB8();
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(std::__shared_weak_count **)(a1 + 32);
  v30 = v7;
  v31 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v29 = &off_24C416978;
  if (v7)
  {
    v12 = *v7;
    v11 = (std::__shared_weak_count *)v7[1];
    if (!v11)
      goto LABEL_16;
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (v15)
    {
LABEL_16:
      if (!v12)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v12)
LABEL_17:
      sub_20B289920((uint64_t)v30);
  }
LABEL_18:
  sub_20B263258((uint64_t)v32, (uint64_t)&v29);
  v16 = v33;
  *v6 = *(_OWORD *)&v32[8];
  *(_OWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 80) = v34;
  if (v30)
  {
    v18 = *v30;
    v17 = (std::__shared_weak_count *)v30[1];
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if (!v18)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v18)
LABEL_25:
      sub_20B289AFC((uint64_t)v30);
  }
LABEL_26:
  v29 = &off_24C4169B8;
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = off_24C4155A0;
  return a1;
}

void sub_20B27641C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B2764D0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414EE0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20B276534(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20B264164(a1))
  {
    if (*(_DWORD *)(a1 + 76))
      v4 = *(_DWORD *)(a1 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a1 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(_QWORD *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(_QWORD *)(a2 + 32) = v5;
    *(_QWORD *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a1 + 24);
        v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a1 + 24);
        v19 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a1 + 24);
        v15 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a1 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v34 = &off_24C4169B8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B263258(a2, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C4169B8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B276794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B2767A8(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_20B264164(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 4;
    *(_QWORD *)&v37[4] = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 4);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24C4169B8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B263258((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24C4169B8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B276A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B276A40()
{
  return 32;
}

_UNKNOWN **sub_20B276A48()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B380);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B380))
    return &off_253EC31A0;
  __cxa_guard_release(&qword_25463B380);
  return &off_253EC31A0;
}

void sub_20B276A9C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_20B2646AC(&v20, a1);
  sub_20B2767A8((uint64_t)v16, a1);
  sub_20B2767A8((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24C4155A0;
  if (v19 <= 8)
    v6 = 8;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 4;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_20B2637C8((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = off_24C4155A0;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20B289AFC((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C4169B8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B276C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B276CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B276CD8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B2646AC(a2, a1);
}

double sub_20B276CE4(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  double result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t (**v32)();
  uint64_t *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _DWORD v38[6];
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C415A08, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    sub_20B2646AC(&v32, (uint64_t)v4);
    sub_20B2767A8((uint64_t)v30, v5);
    v35 = v30[0];
    v36 = v30[1];
    v37 = v31;
    *(_QWORD *)&v24 = off_24C4155A0;
    if (HIDWORD(v31) <= 8)
      v6 = 8;
    else
      v6 = HIDWORD(v31);
    *(_QWORD *)&v38[1] = v31;
    v38[0] = 4;
    LODWORD(v41[0]) = 1;
    *(_QWORD *)((char *)v41 + 4) = DWORD2(v31) | (unint64_t)(v6 << 32);
    *(_QWORD *)&v38[3] = v41[0];
    v38[5] = v6;
    v39 = v31;
    v40 = *(_QWORD *)((char *)v41 + 4);
    sub_20B2637C8((uint64_t)&v24, (uint64_t)v38, &v35);
    *(_QWORD *)&v24 = off_24C4155A0;
    if (!v33)
      goto LABEL_13;
    v8 = *v33;
    v7 = (std::__shared_weak_count *)v33[1];
    if (!v7)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if (!v8)
      {
LABEL_13:
        v32 = &off_24C4169B8;
        v12 = v34;
        if (v34)
        {
          v13 = (unint64_t *)&v34->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = DWORD2(v26);
        *(_DWORD *)(a1 + 8) = DWORD2(v24);
        v16 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v16 == -1)
        {
          if ((_DWORD)v15 == -1)
          {
            result = *(double *)&v27;
            v23 = v28;
            *(_OWORD *)(a1 + 48) = v27;
            *(_OWORD *)(a1 + 64) = v23;
            *(_QWORD *)(a1 + 80) = v29;
            return result;
          }
        }
        else if ((_DWORD)v15 == -1)
        {
          ((void (*)(__int128 *, uint64_t))off_24C415AE0[v16])(&v35, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_26;
        }
        *(_QWORD *)&v35 = a1 + 16;
        ((void (*)(__int128 *))off_24C415B20[v15])(&v35);
LABEL_26:
        v21 = DWORD2(v26);
        result = *(double *)&v27;
        v22 = v28;
        *(_OWORD *)(a1 + 48) = v27;
        *(_OWORD *)(a1 + 64) = v22;
        *(_QWORD *)(a1 + 80) = v29;
        *(_QWORD *)&v24 = off_24C414EE0;
        if ((_DWORD)v21 != -1)
          ((void (*)(__int128 *, __int128 *))off_24C415AE0[v21])(&v35, &v25);
        return result;
      }
    }
    sub_20B289AFC((uint64_t)v33);
    goto LABEL_13;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v35, lpsrc, 32);
  v17 = v35;
  v19 = *(_OWORD *)(v35 + 16);
  v18 = *(_OWORD *)(v35 + 32);
  v24 = *(_OWORD *)v35;
  v25 = v19;
  v26 = v18;
  *(_QWORD *)&v35 = 0;
  MEMORY[0x20BD3583C](v17);
  sub_20B276534(a1, (uint64_t)&v35);
  *(_QWORD *)&v30[0] = &v24;
  *((_QWORD *)&v30[0] + 1) = &v35;
  if (DWORD1(v25) == 1 && DWORD1(v36) == 1)
  {
    sub_20AFC9A3C((uint64_t *)v30);
  }
  else
  {
    LOBYTE(v32) = 0;
    if (DWORD2(v24) && HIDWORD(v24) && (_DWORD)v25)
    {
      *(_QWORD *)v38 = &v32;
      *(float *)&result = sub_20AFEB5FC((uint64_t)v38, (uint64_t)&v24, (uint64_t)&v35);
    }
  }
  return result;
}

void sub_20B277024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B277134(uint64_t a1)
{
  _QWORD v2[6];

  sub_20B276534(a1, (uint64_t)v2);
  return v2[0];
}

double sub_20B277158@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 32
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B276534(a1, (uint64_t)v8);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_20B2771F8@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 32
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B2767A8((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_20B277298()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B598);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B598))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_25463B5A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463B5A0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25463B5A8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B5A8))
    {
LABEL_13:
      if (byte_25463BC9F < 0)
      {
        sub_20AEC60F4(&xmmword_25463BC70, (void *)qword_25463BC88, unk_25463BC90);
      }
      else
      {
        xmmword_25463BC70 = *(_OWORD *)&qword_25463BC88;
        unk_25463BC80 = unk_25463BC98;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BC70, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B5A0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_25463B5B0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463B5B0))
    {
      sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgba32f>]", &qword_25463BCA0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463BCA0, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B5B0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_25463B5B8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B5B8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_25463B5C0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25463B5C0))
      {
        if (byte_25463BCB8[23] < 0)
          sub_20AEC60F4(&__p, *(void **)byte_25463BCB8, *(unint64_t *)&byte_25463BCB8[8]);
        else
          __p = *(std::string *)byte_25463BCB8;
        sub_20B52B814(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_25463BCD0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BCD0, &dword_20AEBB000);
        __cxa_guard_release(&qword_25463B5C0);
      }
      if (byte_25463BCE7 < 0)
      {
        sub_20AEC60F4(v17, (void *)xmmword_25463BCD0, *((unint64_t *)&xmmword_25463BCD0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_25463BCD0;
        v18 = unk_25463BCE0;
      }
      sub_20AFD4C78((char *)v17, (std::string *)&qword_25463BC88);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463BC88, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B5A8);
      goto LABEL_13;
    }
    if (byte_25463BCB7 >= 0)
      v6 = byte_25463BCB7;
    else
      v6 = unk_25463BCA8;
    if (byte_25463BCB7 >= 0)
      v7 = &qword_25463BCA0;
    else
      v7 = (uint64_t *)qword_25463BCA0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_25463BCB8[8] = v6;
      *(_QWORD *)&byte_25463BCB8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_25463BCB8 = v13;
    }
    else
    {
      v13 = byte_25463BCB8;
      byte_25463BCB8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25463BCB8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B5B8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_25463BC87 < 0)
  {
    sub_20AEC60F4(&xmmword_25463BC58, (void *)xmmword_25463BC70, *((unint64_t *)&xmmword_25463BC70 + 1));
  }
  else
  {
    xmmword_25463BC58 = xmmword_25463BC70;
    unk_25463BC68 = unk_25463BC80;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BC58, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463B598);
LABEL_2:
  if (byte_25463BC6F >= 0)
    return &xmmword_25463BC58;
  else
    return (__int128 *)xmmword_25463BC58;
}

void sub_20B2776EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25463B5A8);
  __cxa_guard_abort(&qword_25463B5A0);
  __cxa_guard_abort(&qword_25463B598);
  _Unwind_Resume(a1);
}

void sub_20B277788(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B598);
  _Unwind_Resume(a1);
}

void sub_20B2777A0()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B2777DC(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20B264344(a1, &v39);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24C416998;
    *v4 = &off_24C415770;
    sub_20B2857F4(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20B289BEC(v42);
    }
LABEL_10:
    v41 = &off_24C4169B8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20B289BEC(v40);
LABEL_22:
    v39 = &off_24C4169B8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20B2646AC(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24C416978;
  *v22 = &off_24C415750;
  sub_20B2854CC(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20B289AFC(v42);
  }
LABEL_35:
  v41 = &off_24C4169B8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20B289AFC(v40);
LABEL_47:
  v39 = &off_24C4169B8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20B277B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B2855D8(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B277BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B277BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B285900(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

void sub_20B277BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B277C0C()
{
  return 65792;
}

uint64_t sub_20B277C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  _BYTE v27[32];
  uint64_t v28;
  uint64_t (**v29)();
  uint64_t *v30;
  std::__shared_weak_count *v31;
  _BYTE v32[24];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C415630;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x20)
    v4 = 32;
  else
    v4 = v4;
  *(_DWORD *)v32 = 4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v32[4] = v5;
  *(_QWORD *)v27 = *(_QWORD *)v32;
  *(_DWORD *)&v27[8] = HIDWORD(v5);
  *(_DWORD *)v32 = 1;
  *(_QWORD *)&v32[4] = v3 | (v4 << 32);
  *(_QWORD *)&v27[12] = *(_QWORD *)v32;
  *(_DWORD *)&v27[20] = v4;
  *(_QWORD *)&v27[24] = v5;
  v28 = *(_QWORD *)&v32[4];
  *(_QWORD *)a1 = off_24C4149D0;
  *(_DWORD *)(a1 + 8) = 0;
  sub_20B2537B0(0, 37, (uint64_t)v27, a1 + 16);
  v6 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v27[24] || !*(_DWORD *)&v27[28])
  {
    v25 = *(_OWORD *)&v27[16];
    *v6 = *(_OWORD *)v27;
    *(_OWORD *)(a1 + 64) = v25;
    *(_QWORD *)(a1 + 80) = v28;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_20AECFAB8();
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(std::__shared_weak_count **)(a1 + 32);
  v30 = v7;
  v31 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v29 = &off_24C416978;
  if (v7)
  {
    v12 = *v7;
    v11 = (std::__shared_weak_count *)v7[1];
    if (!v11)
      goto LABEL_16;
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (v15)
    {
LABEL_16:
      if (!v12)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v12)
LABEL_17:
      sub_20B289920((uint64_t)v30);
  }
LABEL_18:
  sub_20B253E70((uint64_t)v32, (uint64_t)&v29);
  v16 = v33;
  *v6 = *(_OWORD *)&v32[8];
  *(_OWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 80) = v34;
  if (v30)
  {
    v18 = *v30;
    v17 = (std::__shared_weak_count *)v30[1];
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if (!v18)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v18)
LABEL_25:
      sub_20B289AFC((uint64_t)v30);
  }
LABEL_26:
  v29 = &off_24C4169B8;
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = off_24C415630;
  return a1;
}

void sub_20B277E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B277F4C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C4149D0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20B277FB0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20B254D2C(a1))
  {
    if (*(_DWORD *)(a1 + 76))
      v4 = *(_DWORD *)(a1 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a1 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(_QWORD *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(_QWORD *)(a2 + 32) = v5;
    *(_QWORD *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a1 + 24);
        v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a1 + 24);
        v19 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a1 + 24);
        v15 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a1 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v34 = &off_24C4169B8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B253E70(a2, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C4169B8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B278210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B278224(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_20B254D2C(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 4;
    *(_QWORD *)&v37[4] = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 4);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24C4169B8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B253E70((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24C4169B8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B2784A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B2784BC()
{
  return 37;
}

_UNKNOWN **sub_20B2784C4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B380);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B380))
    return &off_253EC31A0;
  __cxa_guard_release(&qword_25463B380);
  return &off_253EC31A0;
}

void sub_20B278518(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_20B255278(&v20, a1);
  sub_20B278224((uint64_t)v16, a1);
  sub_20B278224((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24C415630;
  if (v19 <= 0x20)
    v6 = 32;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 4;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_20B2543A0((uint64_t)v4, 37, (uint64_t)v24, v23);
  *v5 = off_24C415630;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20B289AFC((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C4169B8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B2786E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B278744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B278758(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B255278(a2, a1);
}

double sub_20B278764(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  double result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t (**v32)();
  uint64_t *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _DWORD v38[6];
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C415A20, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    sub_20B255278(&v32, (uint64_t)v4);
    sub_20B278224((uint64_t)v30, v5);
    v35 = v30[0];
    v36 = v30[1];
    v37 = v31;
    *(_QWORD *)&v24 = off_24C415630;
    if (HIDWORD(v31) <= 0x20)
      v6 = 32;
    else
      v6 = HIDWORD(v31);
    *(_QWORD *)&v38[1] = v31;
    v38[0] = 4;
    LODWORD(v41[0]) = 1;
    *(_QWORD *)((char *)v41 + 4) = DWORD2(v31) | (unint64_t)(v6 << 32);
    *(_QWORD *)&v38[3] = v41[0];
    v38[5] = v6;
    v39 = v31;
    v40 = *(_QWORD *)((char *)v41 + 4);
    sub_20B2543A0((uint64_t)&v24, 37, (uint64_t)v38, &v35);
    *(_QWORD *)&v24 = off_24C415630;
    if (!v33)
      goto LABEL_13;
    v8 = *v33;
    v7 = (std::__shared_weak_count *)v33[1];
    if (!v7)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if (!v8)
      {
LABEL_13:
        v32 = &off_24C4169B8;
        v12 = v34;
        if (v34)
        {
          v13 = (unint64_t *)&v34->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = DWORD2(v26);
        *(_DWORD *)(a1 + 8) = DWORD2(v24);
        v16 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v16 == -1)
        {
          if ((_DWORD)v15 == -1)
          {
            result = *(double *)&v27;
            v23 = v28;
            *(_OWORD *)(a1 + 48) = v27;
            *(_OWORD *)(a1 + 64) = v23;
            *(_QWORD *)(a1 + 80) = v29;
            return result;
          }
        }
        else if ((_DWORD)v15 == -1)
        {
          ((void (*)(__int128 *, uint64_t))off_24C415AE0[v16])(&v35, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_26;
        }
        *(_QWORD *)&v35 = a1 + 16;
        ((void (*)(__int128 *))off_24C415B20[v15])(&v35);
LABEL_26:
        v21 = DWORD2(v26);
        result = *(double *)&v27;
        v22 = v28;
        *(_OWORD *)(a1 + 48) = v27;
        *(_OWORD *)(a1 + 64) = v22;
        *(_QWORD *)(a1 + 80) = v29;
        *(_QWORD *)&v24 = off_24C4149D0;
        if ((_DWORD)v21 != -1)
          ((void (*)(__int128 *, __int128 *))off_24C415AE0[v21])(&v35, &v25);
        return result;
      }
    }
    sub_20B289AFC((uint64_t)v33);
    goto LABEL_13;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v35, lpsrc, 37);
  v17 = v35;
  v19 = *(_OWORD *)(v35 + 16);
  v18 = *(_OWORD *)(v35 + 32);
  v24 = *(_OWORD *)v35;
  v25 = v19;
  v26 = v18;
  *(_QWORD *)&v35 = 0;
  MEMORY[0x20BD3583C](v17);
  sub_20B277FB0(a1, (uint64_t)&v35);
  *(_QWORD *)&v30[0] = &v24;
  *((_QWORD *)&v30[0] + 1) = &v35;
  if (DWORD1(v25) == 1 && DWORD1(v36) == 1)
  {
    sub_20AFE5D88((size_t *)v30);
  }
  else
  {
    LOBYTE(v32) = 0;
    if (DWORD2(v24) && HIDWORD(v24) && (_DWORD)v25)
    {
      *(_QWORD *)v38 = &v32;
      sub_20AFEA3E0((uint64_t)v38, (uint64_t)&v24, (uint64_t)&v35);
    }
  }
  return result;
}

void sub_20B278AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B278BB8(uint64_t a1)
{
  _QWORD v2[6];

  sub_20B277FB0(a1, (uint64_t)v2);
  return v2[0];
}

double sub_20B278BDC@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 37
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B277FB0(a1, (uint64_t)v8);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_20B278C7C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 37
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B278224((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_20B278D1C()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B5C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B5C8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_25463B5D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463B5D0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25463B5D8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B5D8))
    {
LABEL_13:
      if (byte_25463BD2F < 0)
      {
        sub_20AEC60F4(&xmmword_25463BD00, (void *)qword_25463BD18, unk_25463BD20);
      }
      else
      {
        xmmword_25463BD00 = *(_OWORD *)&qword_25463BD18;
        unk_25463BD10 = unk_25463BD28;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BD00, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B5D0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_25463B5E0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463B5E0))
    {
      sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Argb8u>]", &qword_25463BD30);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463BD30, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B5E0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_25463B5E8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B5E8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_25463B5F0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25463B5F0))
      {
        if (byte_25463BD48[23] < 0)
          sub_20AEC60F4(&__p, *(void **)byte_25463BD48, *(unint64_t *)&byte_25463BD48[8]);
        else
          __p = *(std::string *)byte_25463BD48;
        sub_20B52B814(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_25463BD60);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BD60, &dword_20AEBB000);
        __cxa_guard_release(&qword_25463B5F0);
      }
      if (byte_25463BD77 < 0)
      {
        sub_20AEC60F4(v17, (void *)xmmword_25463BD60, *((unint64_t *)&xmmword_25463BD60 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_25463BD60;
        v18 = unk_25463BD70;
      }
      sub_20AFD7048((char *)v17, (std::string *)&qword_25463BD18);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463BD18, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B5D8);
      goto LABEL_13;
    }
    if (byte_25463BD47 >= 0)
      v6 = byte_25463BD47;
    else
      v6 = unk_25463BD38;
    if (byte_25463BD47 >= 0)
      v7 = &qword_25463BD30;
    else
      v7 = (uint64_t *)qword_25463BD30;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_25463BD48[8] = v6;
      *(_QWORD *)&byte_25463BD48[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_25463BD48 = v13;
    }
    else
    {
      v13 = byte_25463BD48;
      byte_25463BD48[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25463BD48, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B5E8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_25463BD17 < 0)
  {
    sub_20AEC60F4(&xmmword_25463BCE8, (void *)xmmword_25463BD00, *((unint64_t *)&xmmword_25463BD00 + 1));
  }
  else
  {
    xmmword_25463BCE8 = xmmword_25463BD00;
    unk_25463BCF8 = unk_25463BD10;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BCE8, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463B5C8);
LABEL_2:
  if (byte_25463BCFF >= 0)
    return &xmmword_25463BCE8;
  else
    return (__int128 *)xmmword_25463BCE8;
}

void sub_20B279170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25463B5D8);
  __cxa_guard_abort(&qword_25463B5D0);
  __cxa_guard_abort(&qword_25463B5C8);
  _Unwind_Resume(a1);
}

void sub_20B27920C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B5C8);
  _Unwind_Resume(a1);
}

void sub_20B279224()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B279260(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20B254F0C(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24C416998;
    *v4 = &off_24C415770;
    sub_20B2857F4(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20B289BEC(v42);
    }
LABEL_10:
    v41 = &off_24C4169B8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20B289BEC(v40);
LABEL_22:
    v39 = &off_24C4169B8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20B255278(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24C416978;
  *v22 = &off_24C415750;
  sub_20B2854CC(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20B289AFC(v42);
  }
LABEL_35:
  v41 = &off_24C4169B8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20B289AFC(v40);
LABEL_47:
  v39 = &off_24C4169B8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20B2795FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B2855D8(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B279630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B279644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B285900(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

void sub_20B279678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B27968C()
{
  return 65792;
}

void sub_20B279698(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B254F0C(a2, a1);
}

uint64_t sub_20B2796A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  _BYTE v27[32];
  uint64_t v28;
  uint64_t (**v29)();
  uint64_t *v30;
  std::__shared_weak_count *v31;
  _BYTE v32[24];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C4156C0;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x10)
    v4 = 16;
  else
    v4 = v4;
  *(_DWORD *)v32 = 4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v32[4] = v5;
  *(_QWORD *)v27 = *(_QWORD *)v32;
  *(_DWORD *)&v27[8] = HIDWORD(v5);
  *(_DWORD *)v32 = 1;
  *(_QWORD *)&v32[4] = v3 | (v4 << 32);
  *(_QWORD *)&v27[12] = *(_QWORD *)v32;
  *(_DWORD *)&v27[20] = v4;
  *(_QWORD *)&v27[24] = v5;
  v28 = *(_QWORD *)&v32[4];
  *(_QWORD *)a1 = off_24C414B80;
  *(_DWORD *)(a1 + 8) = 0;
  sub_20B258B28(0, 38, (uint64_t)v27, a1 + 16);
  v6 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v27[24] || !*(_DWORD *)&v27[28])
  {
    v25 = *(_OWORD *)&v27[16];
    *v6 = *(_OWORD *)v27;
    *(_OWORD *)(a1 + 64) = v25;
    *(_QWORD *)(a1 + 80) = v28;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_20AECFAB8();
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(std::__shared_weak_count **)(a1 + 32);
  v30 = v7;
  v31 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v29 = &off_24C416978;
  if (v7)
  {
    v12 = *v7;
    v11 = (std::__shared_weak_count *)v7[1];
    if (!v11)
      goto LABEL_16;
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (v15)
    {
LABEL_16:
      if (!v12)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v12)
LABEL_17:
      sub_20B289920((uint64_t)v30);
  }
LABEL_18:
  sub_20B2591EC((uint64_t)v32, (uint64_t)&v29);
  v16 = v33;
  *v6 = *(_OWORD *)&v32[8];
  *(_OWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 80) = v34;
  if (v30)
  {
    v18 = *v30;
    v17 = (std::__shared_weak_count *)v30[1];
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if (!v18)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v18)
LABEL_25:
      sub_20B289AFC((uint64_t)v30);
  }
LABEL_26:
  v29 = &off_24C4169B8;
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = off_24C4156C0;
  return a1;
}

void sub_20B279920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B2799D4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414B80;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20B279A38(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20B25A0F8(a1))
  {
    if (*(_DWORD *)(a1 + 76))
      v4 = *(_DWORD *)(a1 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a1 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(_QWORD *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(_QWORD *)(a2 + 32) = v5;
    *(_QWORD *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a1 + 24);
        v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a1 + 24);
        v19 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a1 + 24);
        v15 = *(std::__shared_weak_count **)(a1 + 32);
        *(_QWORD *)&v34 = &off_24C4169B8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a1 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v34 = &off_24C4169B8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B2591EC(a2, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C4169B8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B279C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

void sub_20B279CAC(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_20B25A0F8(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 4;
    *(_QWORD *)&v37[4] = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 4);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C4169B8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24C4169B8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24C4169B8;
        }
        break;
      default:
        sub_20AECFAB8();
    }
    sub_20B2591EC((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24C4169B8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20B279F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285E60(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B279F44()
{
  return 38;
}

_UNKNOWN **sub_20B279F4C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B380);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B380))
    return &off_253EC31A0;
  __cxa_guard_release(&qword_25463B380);
  return &off_253EC31A0;
}

void sub_20B279FA0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_20B25A640(&v20, a1);
  sub_20B279CAC((uint64_t)v16, a1);
  sub_20B279CAC((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24C4156C0;
  if (v19 <= 0x10)
    v6 = 16;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 4;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_20B25975C((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = off_24C4156C0;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20B289AFC((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C4169B8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B27A16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B27A1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20B2855D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B27A1DC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B25A640(a2, a1);
}

double sub_20B27A1E8(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  double result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t (**v32)();
  uint64_t *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _DWORD v38[6];
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C415A38, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    sub_20B25A640(&v32, (uint64_t)v4);
    sub_20B279CAC((uint64_t)v30, v5);
    v35 = v30[0];
    v36 = v30[1];
    v37 = v31;
    *(_QWORD *)&v24 = off_24C4156C0;
    if (HIDWORD(v31) <= 0x10)
      v6 = 16;
    else
      v6 = HIDWORD(v31);
    *(_QWORD *)&v38[1] = v31;
    v38[0] = 4;
    LODWORD(v41[0]) = 1;
    *(_QWORD *)((char *)v41 + 4) = DWORD2(v31) | (unint64_t)(v6 << 32);
    *(_QWORD *)&v38[3] = v41[0];
    v38[5] = v6;
    v39 = v31;
    v40 = *(_QWORD *)((char *)v41 + 4);
    sub_20B25975C((uint64_t)&v24, (uint64_t)v38, &v35);
    *(_QWORD *)&v24 = off_24C4156C0;
    if (!v33)
      goto LABEL_13;
    v8 = *v33;
    v7 = (std::__shared_weak_count *)v33[1];
    if (!v7)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if (!v8)
      {
LABEL_13:
        v32 = &off_24C4169B8;
        v12 = v34;
        if (v34)
        {
          v13 = (unint64_t *)&v34->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = DWORD2(v26);
        *(_DWORD *)(a1 + 8) = DWORD2(v24);
        v16 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v16 == -1)
        {
          if ((_DWORD)v15 == -1)
          {
            result = *(double *)&v27;
            v23 = v28;
            *(_OWORD *)(a1 + 48) = v27;
            *(_OWORD *)(a1 + 64) = v23;
            *(_QWORD *)(a1 + 80) = v29;
            return result;
          }
        }
        else if ((_DWORD)v15 == -1)
        {
          ((void (*)(__int128 *, uint64_t))off_24C415AE0[v16])(&v35, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_26;
        }
        *(_QWORD *)&v35 = a1 + 16;
        ((void (*)(__int128 *))off_24C415B20[v15])(&v35);
LABEL_26:
        v21 = DWORD2(v26);
        result = *(double *)&v27;
        v22 = v28;
        *(_OWORD *)(a1 + 48) = v27;
        *(_OWORD *)(a1 + 64) = v22;
        *(_QWORD *)(a1 + 80) = v29;
        *(_QWORD *)&v24 = off_24C414B80;
        if ((_DWORD)v21 != -1)
          ((void (*)(__int128 *, __int128 *))off_24C415AE0[v21])(&v35, &v25);
        return result;
      }
    }
    sub_20B289AFC((uint64_t)v33);
    goto LABEL_13;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v35, lpsrc, 38);
  v17 = v35;
  v19 = *(_OWORD *)(v35 + 16);
  v18 = *(_OWORD *)(v35 + 32);
  v24 = *(_OWORD *)v35;
  v25 = v19;
  v26 = v18;
  *(_QWORD *)&v35 = 0;
  MEMORY[0x20BD3583C](v17);
  sub_20B279A38(a1, (uint64_t)&v35);
  *(_QWORD *)&v30[0] = &v24;
  *((_QWORD *)&v30[0] + 1) = &v35;
  if (DWORD1(v25) == 1 && DWORD1(v36) == 1)
  {
    sub_20AFC7BE4((uint64_t *)v30);
  }
  else
  {
    LOBYTE(v32) = 0;
    if (DWORD2(v24) && HIDWORD(v24) && (_DWORD)v25)
    {
      *(_QWORD *)v38 = &v32;
      sub_20AFEA8F4((uint64_t)v38, (uint64_t)&v24, (uint64_t)&v35);
    }
  }
  return result;
}

void sub_20B27A528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B27A638(uint64_t a1)
{
  _QWORD v2[6];

  sub_20B279A38(a1, (uint64_t)v2);
  return v2[0];
}

double sub_20B27A65C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 38
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B279A38(a1, (uint64_t)v8);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_20B27A6FC@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 38
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B279CAC((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_20B27A79C()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_25463B5F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B5F8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_25463B600);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463B600))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25463B608);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B608))
    {
LABEL_13:
      if (byte_25463BDBF < 0)
      {
        sub_20AEC60F4(&xmmword_25463BD90, (void *)qword_25463BDA8, unk_25463BDB0);
      }
      else
      {
        xmmword_25463BD90 = *(_OWORD *)&qword_25463BDA8;
        unk_25463BDA0 = unk_25463BDB8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BD90, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B600);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_25463B610);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463B610))
    {
      sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Argb16u>]", &qword_25463BDC0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463BDC0, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B610);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_25463B618);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B618))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_25463B620);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25463B620))
      {
        if (byte_25463BDD8[23] < 0)
          sub_20AEC60F4(&__p, *(void **)byte_25463BDD8, *(unint64_t *)&byte_25463BDD8[8]);
        else
          __p = *(std::string *)byte_25463BDD8;
        sub_20B52B814(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_25463BDF0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BDF0, &dword_20AEBB000);
        __cxa_guard_release(&qword_25463B620);
      }
      if (byte_25463BE07 < 0)
      {
        sub_20AEC60F4(v17, (void *)xmmword_25463BDF0, *((unint64_t *)&xmmword_25463BDF0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_25463BDF0;
        v18 = unk_25463BE00;
      }
      sub_20AFD7694((char *)v17, (std::string *)&qword_25463BDA8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463BDA8, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B608);
      goto LABEL_13;
    }
    if (byte_25463BDD7 >= 0)
      v6 = byte_25463BDD7;
    else
      v6 = unk_25463BDC8;
    if (byte_25463BDD7 >= 0)
      v7 = &qword_25463BDC0;
    else
      v7 = (uint64_t *)qword_25463BDC0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_25463BDD8[8] = v6;
      *(_QWORD *)&byte_25463BDD8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_25463BDD8 = v13;
    }
    else
    {
      v13 = byte_25463BDD8;
      byte_25463BDD8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25463BDD8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B618);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_25463BDA7 < 0)
  {
    sub_20AEC60F4(&xmmword_25463BD78, (void *)xmmword_25463BD90, *((unint64_t *)&xmmword_25463BD90 + 1));
  }
  else
  {
    xmmword_25463BD78 = xmmword_25463BD90;
    unk_25463BD88 = unk_25463BDA0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463BD78, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463B5F8);
LABEL_2:
  if (byte_25463BD8F >= 0)
    return &xmmword_25463BD78;
  else
    return (__int128 *)xmmword_25463BD78;
}

void sub_20B27ABF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25463B608);
  __cxa_guard_abort(&qword_25463B600);
  __cxa_guard_abort(&qword_25463B5F8);
  _Unwind_Resume(a1);
}

void sub_20B27AC8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B5F8);
  _Unwind_Resume(a1);
}

void sub_20B27ACA4()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B27ACE0(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20B25A2D8(a1, &v39);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24C416998;
    *v4 = &off_24C415770;
    sub_20B2857F4(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20B289BEC(v42);
    }
LABEL_10:
    v41 = &off_24C4169B8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20B289BEC(v40);
LABEL_22:
    v39 = &off_24C4169B8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20B25A640(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24C416978;
  *v22 = &off_24C415750;
  sub_20B2854CC(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20B289AFC(v42);
  }
LABEL_35:
  v41 = &off_24C4169B8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20B289AFC(v40);
LABEL_47:
  v39 = &off_24C4169B8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20B27B080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B2855D8(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B27B0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B2855D8(&a9);
  _Unwind_Resume(a1);
}

void sub_20B27B0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20B285900(&a12);
  MEMORY[0x20BD3583C](v12, 0xA1C40711E6FFCLL);
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

void sub_20B27B0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B285900(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B27B110()
{
  return 65792;
}

void sub_20B27B120(_DWORD *a1@<X1>, __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _BOOL8 v4;
  __int16 v5;
  double v6;
  uint64_t v7;
  __int128 v8;
  __int16 v9;

  v3 = a3;
  LODWORD(a3) = *a1;
  v4 = *a1 != 0;
  if (*a1 <= 0x10u)
    LODWORD(a3) = 16;
  v5 = *a2;
  if (a1[1])
    a3 = a3;
  else
    a3 = 16;
  *(_QWORD *)&v8 = *(_QWORD *)a1;
  *((_QWORD *)&v8 + 1) = v4 | (a3 << 32);
  v9 = v5;
  *(_QWORD *)v3 = off_24C414A60;
  *(_DWORD *)(v3 + 8) = 0;
  sub_20B25536C(0, 2, (unsigned int *)&v8, v3 + 16);
  if ((_DWORD)v8 && DWORD1(v8))
  {
    *(_QWORD *)(v3 + 48) = sub_20B255750(0, v3 + 16, v6);
    *(_QWORD *)(v3 + 56) = v7;
  }
  else
  {
    *(_OWORD *)(v3 + 48) = v8;
  }
  sub_20B255CEC(v3, &v9);
  *(_QWORD *)v3 = off_24C415000;
}

void sub_20B27B1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _DWORD *v19;
  unsigned int v20;

  v20 = *(_DWORD *)(v15 + 40);
  v19 = (_DWORD *)(v15 + 40);
  v18 = v20;
  if (v20 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v18])(&a15, v16);
  *v19 = -1;
  _Unwind_Resume(exception_object);
}

void sub_20B27B264(_DWORD *a1@<X1>, __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _BOOL8 v4;
  __int16 v5;
  double v6;
  uint64_t v7;
  __int128 v8;
  __int16 v9;

  v3 = a3;
  LODWORD(a3) = *a1;
  v4 = *a1 != 0;
  if (*a1 <= 0x10u)
    LODWORD(a3) = 16;
  v5 = *a2;
  if (a1[1])
    a3 = a3;
  else
    a3 = 16;
  *(_QWORD *)&v8 = *(_QWORD *)a1;
  *((_QWORD *)&v8 + 1) = v4 | (a3 << 32);
  v9 = v5;
  *(_QWORD *)v3 = off_24C414C10;
  *(_DWORD *)(v3 + 8) = 0;
  sub_20B25A738(0, 3, (unsigned int *)&v8, v3 + 16);
  if ((_DWORD)v8 && DWORD1(v8))
  {
    *(_QWORD *)(v3 + 48) = sub_20B25AB1C(0, v3 + 16, v6);
    *(_QWORD *)(v3 + 56) = v7;
  }
  else
  {
    *(_OWORD *)(v3 + 48) = v8;
  }
  sub_20B25AF58(v3, &v9);
  *(_QWORD *)v3 = off_24C415090;
}

void sub_20B27B334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _DWORD *v19;
  unsigned int v20;

  v20 = *(_DWORD *)(v15 + 40);
  v19 = (_DWORD *)(v15 + 40);
  v18 = v20;
  if (v20 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v18])(&a15, v16);
  *v19 = -1;
  _Unwind_Resume(exception_object);
}

void sub_20B27B3A8(_DWORD *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _BOOL8 v4;
  int v5;
  double v6;
  uint64_t v7;
  __int128 v8;
  int v9;

  v3 = a3;
  LODWORD(a3) = *a1;
  v4 = *a1 != 0;
  if (*a1 <= 8u)
    LODWORD(a3) = 8;
  v5 = *a2;
  if (a1[1])
    a3 = a3;
  else
    a3 = 8;
  *(_QWORD *)&v8 = *(_QWORD *)a1;
  *((_QWORD *)&v8 + 1) = v4 | (a3 << 32);
  v9 = v5;
  *(_QWORD *)v3 = off_24C414DC0;
  *(_DWORD *)(v3 + 8) = 0;
  sub_20B25F514(0, 4, (unsigned int *)&v8, v3 + 16);
  if ((_DWORD)v8 && DWORD1(v8))
  {
    *(_QWORD *)(v3 + 48) = sub_20B25F8F8(0, v3 + 16, v6);
    *(_QWORD *)(v3 + 56) = v7;
  }
  else
  {
    *(_OWORD *)(v3 + 48) = v8;
  }
  sub_20B25FE94(v3, &v9);
  *(_QWORD *)v3 = off_24C415120;
}

void sub_20B27B478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _DWORD *v19;
  unsigned int v20;

  v20 = *(_DWORD *)(v15 + 40);
  v19 = (_DWORD *)(v15 + 40);
  v18 = v20;
  if (v20 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v18])(&a15, v16);
  *v19 = -1;
  _Unwind_Resume(exception_object);
}

void sub_20B27B4EC(_DWORD *a1@<X1>, char *a2@<X2>, unint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _OWORD *v8;
  __int128 v9;
  char v10;
  _BYTE v11[32];
  uint64_t v12;
  _QWORD v13[3];

  v3 = a3;
  v13[2] = *MEMORY[0x24BDAC8D0];
  v4 = 2 * (*a1 != 0);
  LODWORD(a3) = v4 * *a1;
  if (a3 <= 0x20)
    LODWORD(a3) = 32;
  v5 = *(_QWORD *)a1;
  v6 = HIDWORD(*(_QWORD *)a1);
  v7 = *a2;
  if (a1[1])
    a3 = a3;
  else
    a3 = 32;
  *(_DWORD *)v11 = 2;
  *(_DWORD *)&v11[4] = v5;
  *(_DWORD *)&v11[8] = v6;
  LODWORD(v13[0]) = 1;
  *(_QWORD *)((char *)v13 + 4) = v4 & 0x1FFFFFFFFLL | ((unint64_t)(a3 >> 1) << 33);
  *(_QWORD *)&v11[12] = v13[0];
  *(_DWORD *)&v11[20] = a3;
  *(_QWORD *)&v11[24] = v5;
  v12 = *(_QWORD *)((char *)v13 + 4);
  v10 = v7;
  *(_QWORD *)v3 = off_24C4148B0;
  *(_DWORD *)(v3 + 8) = 0;
  sub_20B24FEF0(0, 5, (uint64_t)v11, v3 + 16);
  v8 = (_OWORD *)(v3 + 48);
  if (*(_DWORD *)&v11[24] && *(_DWORD *)&v11[28])
  {
    sub_20B2502D4(0, v3 + 16, (uint64_t)v8);
  }
  else
  {
    v9 = *(_OWORD *)&v11[16];
    *v8 = *(_OWORD *)v11;
    *(_OWORD *)(v3 + 64) = v9;
    *(_QWORD *)(v3 + 80) = v12;
  }
  sub_20B2508DC(v3, &v10);
  *(_QWORD *)v3 = off_24C4151B0;
}

void sub_20B27B634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;

  v21 = *(_DWORD *)(v16 + 40);
  v20 = (_DWORD *)(v16 + 40);
  v19 = v21;
  if (v21 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v19])(&a16, v17);
  *v20 = -1;
  _Unwind_Resume(exception_object);
}

void sub_20B27B6C0(_DWORD *a1@<X1>, __int16 *a2@<X2>, unint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  _OWORD *v8;
  __int128 v9;
  _BYTE v10[32];
  uint64_t v11;
  _QWORD v12[3];

  v3 = a3;
  v12[2] = *MEMORY[0x24BDAC8D0];
  v4 = 2 * (*a1 != 0);
  LODWORD(a3) = v4 * *a1;
  if (a3 <= 0x10)
    LODWORD(a3) = 16;
  v5 = *(_QWORD *)a1;
  v6 = HIDWORD(*(_QWORD *)a1);
  v7 = *a2;
  if (a1[1])
    a3 = a3;
  else
    a3 = 16;
  *(_DWORD *)v10 = 2;
  *(_DWORD *)&v10[4] = v5;
  *(_DWORD *)&v10[8] = v6;
  LODWORD(v12[0]) = 1;
  *(_QWORD *)((char *)v12 + 4) = v4 & 0x1FFFFFFFFLL | ((unint64_t)(a3 >> 1) << 33);
  *(_QWORD *)&v10[12] = v12[0];
  *(_DWORD *)&v10[20] = a3;
  *(_QWORD *)&v10[24] = v5;
  v11 = *(_QWORD *)((char *)v12 + 4);
  LOWORD(v12[0]) = v7;
  *(_QWORD *)v3 = off_24C414CA0;
  *(_DWORD *)(v3 + 8) = 0;
  sub_20B25BFB0(0, 7, (uint64_t)v10, v3 + 16);
  v8 = (_OWORD *)(v3 + 48);
  if (*(_DWORD *)&v10[24] && *(_DWORD *)&v10[28])
  {
    sub_20B25C394(0, v3 + 16, (uint64_t)v8);
  }
  else
  {
    v9 = *(_OWORD *)&v10[16];
    *v8 = *(_OWORD *)v10;
    *(_OWORD *)(v3 + 64) = v9;
    *(_QWORD *)(v3 + 80) = v11;
  }
  sub_20B25C9A4(v3, v12);
  *(_QWORD *)v3 = off_24C415240;
}

void sub_20B27B808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;
  unsigned int v18;

  v18 = *(_DWORD *)(v13 + 40);
  v17 = (_DWORD *)(v13 + 40);
  v16 = v18;
  if (v18 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v16])(&a13, v14);
  *v17 = -1;
  _Unwind_Resume(exception_object);
}

void sub_20B27B894(_DWORD *a1@<X1>, char *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _OWORD *v9;
  __int128 v10;
  char v11;
  _BYTE v12[32];
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  if (*a1)
    v4 = 3;
  else
    v4 = 0;
  LODWORD(v5) = v4 * *a1;
  if (v5 <= 0x20)
    LODWORD(v5) = 32;
  v6 = *(_QWORD *)a1;
  v7 = HIDWORD(*(_QWORD *)a1);
  v8 = *a2;
  if (a1[1])
    v5 = v5;
  else
    v5 = 32;
  *(_DWORD *)v12 = 3;
  *(_DWORD *)&v12[4] = v6;
  *(_DWORD *)&v12[8] = v7;
  LODWORD(v14[0]) = 1;
  *(_QWORD *)((char *)v14 + 4) = v4 | (v5 << 32);
  *(_QWORD *)&v12[12] = v14[0];
  *(_DWORD *)&v12[20] = v5;
  *(_QWORD *)&v12[24] = v6;
  v13 = *(_QWORD *)((char *)v14 + 4);
  v11 = v8;
  *(_QWORD *)a3 = off_24C414940;
  *(_DWORD *)(a3 + 8) = 0;
  sub_20B251ADC(0, 21, (uint64_t)v12, a3 + 16);
  v9 = (_OWORD *)(a3 + 48);
  if (*(_DWORD *)&v12[24] && *(_DWORD *)&v12[28])
  {
    sub_20B251EC0(0, a3 + 16, (uint64_t)v9);
  }
  else
  {
    v10 = *(_OWORD *)&v12[16];
    *v9 = *(_OWORD *)v12;
    *(_OWORD *)(a3 + 64) = v10;
    *(_QWORD *)(a3 + 80) = v13;
  }
  sub_20B2524CC(a3, &v11);
  *(_QWORD *)a3 = off_24C415360;
}

void sub_20B27B9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;

  v21 = *(_DWORD *)(v16 + 40);
  v20 = (_DWORD *)(v16 + 40);
  v19 = v21;
  if (v21 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v19])(&a16, v17);
  *v20 = -1;
  _Unwind_Resume(exception_object);
}

void sub_20B27BA60(_DWORD *a1@<X1>, __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  _OWORD *v9;
  __int128 v10;
  _BYTE v11[32];
  uint64_t v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  if (*a1)
    v4 = 3;
  else
    v4 = 0;
  LODWORD(v5) = v4 * *a1;
  if (v5 <= 0x10)
    LODWORD(v5) = 16;
  v6 = *(_QWORD *)a1;
  v7 = HIDWORD(*(_QWORD *)a1);
  v8 = *a2;
  if (a1[1])
    v5 = v5;
  else
    v5 = 16;
  *(_DWORD *)v11 = 3;
  *(_DWORD *)&v11[4] = v6;
  *(_DWORD *)&v11[8] = v7;
  LODWORD(v13[0]) = 1;
  *(_QWORD *)((char *)v13 + 4) = v4 | (v5 << 32);
  *(_QWORD *)&v11[12] = v13[0];
  *(_DWORD *)&v11[20] = v5;
  *(_QWORD *)&v11[24] = v6;
  v12 = *(_QWORD *)((char *)v13 + 4);
  LOWORD(v13[0]) = v8;
  *(_QWORD *)a3 = off_24C414AF0;
  *(_DWORD *)(a3 + 8) = 0;
  sub_20B256E2C(0, 22, (uint64_t)v11, a3 + 16);
  v9 = (_OWORD *)(a3 + 48);
  if (*(_DWORD *)&v11[24] && *(_DWORD *)&v11[28])
  {
    sub_20B257210(0, a3 + 16, (uint64_t)v9);
  }
  else
  {
    v10 = *(_OWORD *)&v11[16];
    *v9 = *(_OWORD *)v11;
    *(_OWORD *)(a3 + 64) = v10;
    *(_QWORD *)(a3 + 80) = v12;
  }
  sub_20B257824(a3, (uint64_t)v13);
  *(_QWORD *)a3 = off_24C4153F0;
}

void sub_20B27BBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;
  unsigned int v18;

  v18 = *(_DWORD *)(v13 + 40);
  v17 = (_DWORD *)(v13 + 40);
  v16 = v18;
  if (v18 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v16])(&a13, v14);
  *v17 = -1;
  _Unwind_Resume(exception_object);
}

void sub_20B27BC2C(_DWORD *a1@<X1>, char *a2@<X2>, unint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _OWORD *v8;
  __int128 v9;
  char v10;
  _BYTE v11[32];
  uint64_t v12;
  _QWORD v13[3];

  v3 = a3;
  v13[2] = *MEMORY[0x24BDAC8D0];
  v4 = 4 * (*a1 != 0);
  LODWORD(a3) = v4 * *a1;
  if (a3 <= 0x20)
    LODWORD(a3) = 32;
  v5 = *(_QWORD *)a1;
  v6 = HIDWORD(*(_QWORD *)a1);
  v7 = *a2;
  if (a1[1])
    a3 = a3;
  else
    a3 = 32;
  *(_DWORD *)v11 = 4;
  *(_DWORD *)&v11[4] = v5;
  *(_DWORD *)&v11[8] = v6;
  LODWORD(v13[0]) = 1;
  *(_QWORD *)((char *)v13 + 4) = v4 & 0x3FFFFFFFFLL | ((unint64_t)(a3 >> 2) << 34);
  *(_QWORD *)&v11[12] = v13[0];
  *(_DWORD *)&v11[20] = a3;
  *(_QWORD *)&v11[24] = v5;
  v12 = *(_QWORD *)((char *)v13 + 4);
  v10 = v7;
  *(_QWORD *)v3 = off_24C4149D0;
  *(_DWORD *)(v3 + 8) = 0;
  sub_20B2537B0(0, 25, (uint64_t)v11, v3 + 16);
  v8 = (_OWORD *)(v3 + 48);
  if (*(_DWORD *)&v11[24] && *(_DWORD *)&v11[28])
  {
    sub_20B253B94(0, v3 + 16, (uint64_t)v8);
  }
  else
  {
    v9 = *(_OWORD *)&v11[16];
    *v8 = *(_OWORD *)v11;
    *(_OWORD *)(v3 + 64) = v9;
    *(_QWORD *)(v3 + 80) = v12;
  }
  sub_20B25419C(v3, (uint64_t)&v10);
  *(_QWORD *)v3 = off_24C415480;
}

void sub_20B27BD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;

  v21 = *(_DWORD *)(v16 + 40);
  v20 = (_DWORD *)(v16 + 40);
  v19 = v21;
  if (v21 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v19])(&a16, v17);
  *v20 = -1;
  _Unwind_Resume(exception_object);
}

void sub_20B27BE00(_DWORD *a1@<X1>, char *a2@<X2>, unint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _OWORD *v8;
  __int128 v9;
  char v10;
  _BYTE v11[32];
  uint64_t v12;
  _QWORD v13[3];

  v3 = a3;
  v13[2] = *MEMORY[0x24BDAC8D0];
  v4 = 4 * (*a1 != 0);
  LODWORD(a3) = v4 * *a1;
  if (a3 <= 0x20)
    LODWORD(a3) = 32;
  v5 = *(_QWORD *)a1;
  v6 = HIDWORD(*(_QWORD *)a1);
  v7 = *a2;
  if (a1[1])
    a3 = a3;
  else
    a3 = 32;
  *(_DWORD *)v11 = 4;
  *(_DWORD *)&v11[4] = v5;
  *(_DWORD *)&v11[8] = v6;
  LODWORD(v13[0]) = 1;
  *(_QWORD *)((char *)v13 + 4) = v4 & 0x3FFFFFFFFLL | ((unint64_t)(a3 >> 2) << 34);
  *(_QWORD *)&v11[12] = v13[0];
  *(_DWORD *)&v11[20] = a3;
  *(_QWORD *)&v11[24] = v5;
  v12 = *(_QWORD *)((char *)v13 + 4);
  v10 = v7;
  *(_QWORD *)v3 = off_24C4149D0;
  *(_DWORD *)(v3 + 8) = 0;
  sub_20B2537B0(0, 37, (uint64_t)v11, v3 + 16);
  v8 = (_OWORD *)(v3 + 48);
  if (*(_DWORD *)&v11[24] && *(_DWORD *)&v11[28])
  {
    sub_20B253B94(0, v3 + 16, (uint64_t)v8);
  }
  else
  {
    v9 = *(_OWORD *)&v11[16];
    *v8 = *(_OWORD *)v11;
    *(_OWORD *)(v3 + 64) = v9;
    *(_QWORD *)(v3 + 80) = v12;
  }
  sub_20B25419C(v3, (uint64_t)&v10);
  *(_QWORD *)v3 = off_24C415630;
}

void sub_20B27BF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;

  v21 = *(_DWORD *)(v16 + 40);
  v20 = (_DWORD *)(v16 + 40);
  v19 = v21;
  if (v21 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v19])(&a16, v17);
  *v20 = -1;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B27BFD4(_QWORD *a1)
{
  *a1 = &off_24C415750;
  sub_20B2855D8(a1 + 1);
  return a1;
}

void sub_20B27C004(_QWORD *a1)
{
  *a1 = &off_24C415750;
  sub_20B2855D8(a1 + 1);
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B27C044(_QWORD *a1)
{
  *a1 = &off_24C415770;
  sub_20B285900(a1 + 1);
  return a1;
}

void sub_20B27C074(_QWORD *a1)
{
  *a1 = &off_24C415770;
  sub_20B285900(a1 + 1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B27C0B4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414820;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10A3C40A1F8E8FFLL);
}

uint64_t sub_20B27C12C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414A60;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10A3C40A1F8E8FFLL);
}

uint64_t sub_20B27C1A4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414C10;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10A3C40A1F8E8FFLL);
}

uint64_t sub_20B27C21C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414DC0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10A3C40A1F8E8FFLL);
}

uint64_t sub_20B27C294(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C4148B0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10A3C40ED729E16);
}

uint64_t sub_20B27C30C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414CA0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10A3C40ED729E16);
}

uint64_t sub_20B27C384(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414E50;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10A3C40ED729E16);
}

uint64_t sub_20B27C3FC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414940;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10A3C40ED729E16);
}

uint64_t sub_20B27C474(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414AF0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10A3C40ED729E16);
}

uint64_t sub_20B27C4EC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C4149D0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10A3C40ED729E16);
}

uint64_t sub_20B27C564(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414D30;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10A3C40ED729E16);
}

uint64_t sub_20B27C5DC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414EE0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10A3C40ED729E16);
}

uint64_t sub_20B27C654(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C4149D0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10A3C40ED729E16);
}

uint64_t sub_20B27C6CC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C414B80;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C415AE0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10A3C40ED729E16);
}

void sub_20B27C744(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a2 = &off_24C4169B8;
  v2 = (std::__shared_weak_count *)a2[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

_QWORD *sub_20B27C7A8(uint64_t a1, _QWORD *a2)
{
  return sub_20B2855D8(a2);
}

_QWORD *sub_20B27C7B0(uint64_t a1, _QWORD *a2)
{
  return sub_20B285900(a2);
}

void sub_20B27C7B8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_20B27C7C8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_24C415AE0[v5])(&v10, v4);
LABEL_9:
    *(_QWORD *)v4 = &off_24C4169B8;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_DWORD *)(v4 + 24) = 0;
    return;
  }
  v6 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20B27C898(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_18;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_24C415AE0[v5])(&v17, v4);
LABEL_18:
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)v4 = &off_24C416978;
    *(_DWORD *)(v4 + 24) = 1;
    return;
  }
  v7 = *(uint64_t **)(a2 + 8);
  if (v7)
  {
    v9 = *v7;
    v8 = (std::__shared_weak_count *)v7[1];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v9)
      sub_20B289AFC(*(_QWORD *)(a2 + 8));
  }
  v13 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v13;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_20B27C9E0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_18;
  if ((_DWORD)v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_24C415AE0[v5])(&v17, v4);
LABEL_18:
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)v4 = &off_24C416998;
    *(_DWORD *)(v4 + 24) = 2;
    return;
  }
  v7 = *(uint64_t **)(a2 + 8);
  if (v7)
  {
    v9 = *v7;
    v8 = (std::__shared_weak_count *)v7[1];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v9)
      sub_20B289BEC(*(_QWORD *)(a2 + 8));
  }
  v13 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v13;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

__n128 sub_20B27CB28(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  std::__shared_weak_count *v7;
  char v8;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[2];
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 3)
  {
    ((void (*)(char *, __n128 *))off_24C415AE0[v5])(&v8, v4);
LABEL_6:
    result = *a3;
    *v4 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    v4[1].n128_u32[2] = 3;
    return result;
  }
  result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  v7 = (std::__shared_weak_count *)a2->n128_u64[1];
  *a2 = result;
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  return result;
}

uint64_t sub_20B27CBB8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B27CC20(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B27CC88()
{
  return 1;
}

uint64_t sub_20B27CC90(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20B27CC98@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_20B27CCAC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B27CD30(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B27CD98(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B27CE00()
{
  return 2;
}

uint64_t sub_20B27CE08(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20B27CE10@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_20B27CE28(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B27CEAC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B27CF14(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B27CF7C()
{
  return 3;
}

uint64_t sub_20B27CF84(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20B27CF8C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_20B27CFA4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B27D028(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B27D090(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B27D0F8()
{
  return 4;
}

uint64_t sub_20B27D100(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20B27D108@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_20B27D120(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B27D1A4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B27D20C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B27D274()
{
  return 5;
}

uint64_t sub_20B27D27C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B27D284@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B27D298(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B27D31C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B27D384(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B27D3EC()
{
  return 7;
}

uint64_t sub_20B27D3F4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B27D3FC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B27D414(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B27D498(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B27D500(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B27D568()
{
  return 8;
}

uint64_t sub_20B27D570(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B27D578@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B27D590(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B27D614(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B27D67C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B27D6E4()
{
  return 21;
}

uint64_t sub_20B27D6EC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B27D6F4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B27D708(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B27D78C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B27D7F4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B27D85C()
{
  return 22;
}

uint64_t sub_20B27D864(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B27D86C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B27D884(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B27D908(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B27D970(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B27D9D8()
{
  return 25;
}

uint64_t sub_20B27D9E0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B27D9E8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B27D9FC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B27DA80(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B27DAE8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B27DB50()
{
  return 31;
}

uint64_t sub_20B27DB58(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B27DB60@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B27DB78(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B27DBFC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B27DC64(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B27DCCC()
{
  return 32;
}

uint64_t sub_20B27DCD4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B27DCDC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B27DCF4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B27DD78(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B27DDE0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B27DE48()
{
  return 37;
}

uint64_t sub_20B27DE50(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B27DE58@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B27DE6C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B27DEF0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B27DF58(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B27DFC0()
{
  return 38;
}

uint64_t sub_20B27DFC8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B27DFD0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B27DFE8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B27E06C(int a1)
{
  uint64_t result;
  int v3;
  int v4;
  unsigned int v5;

  result = 1;
  if (a1 <= 1278226487)
  {
    if (a1 > 875704421)
    {
      if (a1 > 875836533)
      {
        if (a1 != 875836534)
        {
          if (a1 == 1094862674)
            return result;
          v3 = 1111970369;
          goto LABEL_37;
        }
      }
      else if (a1 != 875704422 && a1 != 875704438 && a1 != 875836518)
      {
        goto LABEL_39;
      }
      return 2;
    }
    if (a1 > 843264055)
    {
      v4 = -843264056;
LABEL_23:
      v5 = a1 + v4;
      if (v5 > 0x30 || ((1 << v5) & 0x1400000000001) == 0)
        goto LABEL_39;
      return result;
    }
    if (a1 != 24 && a1 != 32)
    {
      v3 = 842285639;
      goto LABEL_37;
    }
  }
  else
  {
    if (a1 <= 1647392358)
    {
      if (a1 > 1278226741)
      {
        if (a1 > 1380410944)
        {
          if (a1 == 1380410945)
            return result;
          v3 = 1380411457;
        }
        else
        {
          if (a1 == 1278226742)
            return result;
          v3 = 1380401729;
        }
        goto LABEL_37;
      }
      v4 = -1278226488;
      goto LABEL_23;
    }
    if (a1 > 1717855599)
    {
      if (a1 > 1751410031)
      {
        if (a1 == 1751410032)
          return result;
        v3 = 1751411059;
      }
      else
      {
        if (a1 == 1717855600)
          return result;
        v3 = 1717856627;
      }
LABEL_37:
      if (a1 == v3)
        return result;
LABEL_39:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/PixelFormat/include/Kit/PixelFormat/Properties.h", 396, (uint64_t)&unk_20B5A99AE, 0, (uint64_t)"not yet implemented", 19, (void (*)(void **))sub_20B532360);
      abort();
    }
    if (a1 != 1647392359 && a1 != 1647589490)
    {
      v3 = 1647719521;
      goto LABEL_37;
    }
  }
  return result;
}

void ***sub_20B27E2A8(void ***result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  void **v5;
  int v6;
  int v7;
  BOOL v8;
  void **v9;
  int v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int i;
  int v15;
  _BYTE *v16;
  int v17;
  BOOL v18;
  char *v19;
  int v20;

  v1 = *result;
  v2 = *((unsigned int *)*result + 4);
  if ((_DWORD)v2 == 1)
  {
    v3 = *((unsigned int *)v1 + 5);
    v4 = *((unsigned int *)v1 + 2);
    v5 = result[1];
    if ((_DWORD)v3 == (_DWORD)v4)
    {
      return (void ***)memset(*v1, *(unsigned __int8 *)v5, (*((_DWORD *)v1 + 3) * v3));
    }
    else
    {
      v17 = *((_DWORD *)v1 + 3);
      if ((_DWORD)v4)
        v18 = v17 == 0;
      else
        v18 = 1;
      if (!v18)
      {
        v19 = (char *)*v1;
        v20 = v17 - 1;
        if (v17 != 1)
        {
          do
          {
            memset(v19, *(unsigned __int8 *)v5, v4);
            v19 += v3;
            --v20;
          }
          while (v20);
        }
        return (void ***)memset(v19, *(unsigned __int8 *)v5, v4);
      }
    }
  }
  else
  {
    v6 = *((_DWORD *)v1 + 2);
    v7 = *((_DWORD *)v1 + 3);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = result[1];
      v10 = v6 - 1;
      v11 = *v1;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *((unsigned int *)v1 + 5);
        if (v10)
        {
          for (i = 0; i != v12; ++i)
          {
            v15 = v10;
            v16 = v11;
            do
            {
              *v16 = *(_BYTE *)v9;
              v16 += v2;
              --v15;
            }
            while (v15);
            *v16 = *(_BYTE *)v9;
            v11 += v13;
          }
        }
        else
        {
          do
          {
            *v11 = *(_BYTE *)v9;
            v11 += v13;
            --v12;
          }
          while (v12);
        }
      }
      for (; v10; --v10)
      {
        *v11 = *(_BYTE *)v9;
        v11 += v2;
      }
      *v11 = *(_BYTE *)v9;
    }
  }
  return result;
}

_QWORD *sub_20B27E420(_QWORD *result)
{
  char **v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  size_t v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned __int8 *v12;
  int v13;
  char *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  char *v19;
  int v20;
  BOOL v21;
  char *v23;
  int v24;

  v1 = (char **)*result;
  v2 = *(unsigned int *)(*result + 8);
  v3 = *(unsigned int *)(*result + 24);
  if ((_DWORD)v3 == *(_DWORD *)(*result + 20) * (_DWORD)v2)
  {
    v4 = *((unsigned int *)v1 + 7);
    v5 = *((_DWORD *)v1 + 3);
    v6 = (unsigned __int8 *)result[1];
    v7 = (v5 * v2);
    if ((_DWORD)v4 == v5 * (_DWORD)v3)
    {
      return memset(*v1, *v6, (*((_DWORD *)v1 + 4) * v7));
    }
    else
    {
      v20 = *((_DWORD *)v1 + 4);
      if ((_DWORD)v2)
        v21 = v5 == 0;
      else
        v21 = 1;
      if (!v21 && v20 != 0)
      {
        v23 = *v1;
        v24 = v20 - 1;
        if (v20 != 1)
        {
          do
          {
            memset(v23, *v6, v7);
            v23 += v4;
            --v24;
          }
          while (v24);
        }
        return memset(v23, *v6, v7);
      }
    }
  }
  else
  {
    v9 = *((_DWORD *)v1 + 3);
    v8 = *((_DWORD *)v1 + 4);
    if ((_DWORD)v2)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10 && v8 != 0)
    {
      v12 = (unsigned __int8 *)result[1];
      v13 = v9 - 1;
      v14 = *v1;
      v15 = v8 - 1;
      if (v8 != 1)
      {
        v16 = *((unsigned int *)v1 + 7);
        if (v9 == 1)
        {
          do
          {
            memset(v14, *v12, v2);
            v14 += v16;
            --v15;
          }
          while (v15);
        }
        else
        {
          v17 = 0;
          do
          {
            v18 = v13;
            v19 = v14;
            do
            {
              memset(v19, *v12, v2);
              v19 += v3;
              --v18;
            }
            while (v18);
            memset(v19, *v12, v2);
            v14 += v16;
            ++v17;
          }
          while (v17 != v15);
        }
      }
      for (; v13; --v13)
      {
        memset(v14, *v12, v2);
        v14 += v3;
      }
      return memset(v14, *v12, v2);
    }
  }
  return result;
}

uint64_t sub_20B27E5CC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  if (a3[1])
    v4 = *a3 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a3;
  if (v4)
    v5 = 0;
  if ((_DWORD)v5)
    v6 = 3;
  else
    v6 = 0;
  LODWORD(v7) = v6 * v5;
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  LODWORD(v9) = 1;
  *(_QWORD *)((char *)&v9 + 4) = v6 | (v7 << 32);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = __PAIR64__(v5, 3);
  *(_DWORD *)(a1 + 16) = HIDWORD(v5);
  *(_QWORD *)(a1 + 20) = v9;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)((char *)&v9 + 4);
  if ((_DWORD)v7 * HIDWORD(v5) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return a1;
}

_DWORD *sub_20B27E6E4(_DWORD *result, uint64_t a2, _BYTE ***a3, _BYTE *a4)
{
  unsigned int v4;
  _BYTE *v5;
  unsigned int v6;
  unsigned int v7;

  if (result[5])
  {
    v4 = 0;
    do
    {
      *(_QWORD *)a2 = a4;
      v5 = a4;
      if (result[3])
      {
        v6 = 0;
        v5 = a4;
        do
        {
          *(_QWORD *)a2 = v5;
          *v5 = ***a3;
          *(_BYTE *)(*(_QWORD *)a2 + 1) = ***a3;
          *(_BYTE *)(*(_QWORD *)a2 + 2) = ***a3;
          *(_BYTE *)(*(_QWORD *)a2 + 3) = ***a3;
          v5 += result[4];
          ++v6;
        }
        while (v6 < result[3]);
      }
      *(_QWORD *)a2 = v5;
      *v5 = ***a3;
      *(_BYTE *)(*(_QWORD *)a2 + 1) = ***a3;
      *(_BYTE *)(*(_QWORD *)a2 + 2) = ***a3;
      *(_BYTE *)(*(_QWORD *)a2 + 3) = ***a3;
      a4 += result[6];
      ++v4;
    }
    while (v4 < result[5]);
  }
  *(_QWORD *)a2 = a4;
  if (result[3])
  {
    v7 = 0;
    do
    {
      *(_QWORD *)a2 = a4;
      *a4 = ***a3;
      *(_BYTE *)(*(_QWORD *)a2 + 1) = ***a3;
      *(_BYTE *)(*(_QWORD *)a2 + 2) = ***a3;
      *(_BYTE *)(*(_QWORD *)a2 + 3) = ***a3;
      a4 += result[4];
      ++v7;
    }
    while (v7 < result[3]);
  }
  *(_QWORD *)a2 = a4;
  *a4 = ***a3;
  *(_BYTE *)(*(_QWORD *)a2 + 1) = ***a3;
  *(_BYTE *)(*(_QWORD *)a2 + 2) = ***a3;
  *(_BYTE *)(*(_QWORD *)a2 + 3) = ***a3;
  return result;
}

uint64_t sub_20B27E8A0(uint64_t result)
{
  uint64_t v1;
  const __int16 *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int16 *v14;
  unint64_t v15;
  int16x8_t v16;
  int16x8_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[3];
  _DWORD v22[5];
  _QWORD v23[2];

  v1 = *(_QWORD *)result;
  v2 = *(const __int16 **)(result + 8);
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  v5 = *(_DWORD *)(*(_QWORD *)result + 16);
  v4 = *(_DWORD *)(*(_QWORD *)result + 20);
  if (v4 == v5 * (_DWORD)v3)
  {
    v6 = (*(_DWORD *)(v1 + 12) * v3);
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v12 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v12 < 0x10)
      goto LABEL_19;
    v13 = 2 * v6;
    if (!(_DWORD)v6)
      v13 = 2;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v13 > (unint64_t)v2)
    {
LABEL_19:
      v14 = (__int16 *)v7;
LABEL_20:
      v15 = v6 + 1;
      do
      {
        *v14++ = *v2;
        --v15;
      }
      while (v15 > 1);
      return result;
    }
    v14 = (__int16 *)(v7 + 2 * (v12 & 0xFFFFFFFFFFFFFFF0));
    v6 -= v12 & 0xFFFFFFFFFFFFFFF0;
    v16 = vld1q_dup_s16(v2);
    v17 = (int16x8_t *)(v7 + 16);
    v18 = v12 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v17[-1] = v16;
      *v17 = v16;
      v17 += 2;
      v18 -= 16;
    }
    while (v18);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_20;
  }
  else
  {
    v20 = 0;
    v19 = v3;
    v21[0] = &v20;
    v21[1] = &v19;
    v21[2] = v2;
    v9 = *(_DWORD *)(v1 + 12);
    if ((_DWORD)v3)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v22[0] = 0;
      v22[1] = v3 - 1;
      v22[2] = v5;
      v22[3] = v9 - 1;
      v22[4] = v4;
      v11 = *(_QWORD *)v1;
      v23[0] = 0;
      v23[1] = 0;
      return sub_20B27EA30((uint64_t)v22, (uint64_t)v23, (uint64_t)v21, v11);
    }
  }
  return result;
}

uint64_t sub_20B27EA30(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  unsigned int i;
  const __int16 *v10;
  uint64_t v11;
  __int16 *v12;
  BOOL v13;
  int16x8_t v14;
  int16x8_t *v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t *v19;
  const __int16 *v20;
  uint64_t v21;
  BOOL v22;
  __int16 *v23;
  uint64_t v24;
  int16x8_t v25;
  int16x8_t *v26;
  unint64_t v27;
  unint64_t v28;

  v4 = a4;
  v7 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    v8 = result;
    for (i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(_QWORD *)a2 = v4;
      v10 = *(const __int16 **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360);
          if ((_DWORD)result)
            goto LABEL_39;
        }
      }
      if (v11 >= 1)
      {
        if ((unint64_t)v11 >= 0x10)
        {
          v13 = v4 >= (unint64_t)(v10 + 1) || (unint64_t)v10 >= v4 + 2 * v11;
          v12 = (__int16 *)v4;
          if (v13)
          {
            v12 = (__int16 *)(v4 + 2 * (v11 & 0xFFFFFFFFFFFFFFF0));
            v14 = vld1q_dup_s16(v10);
            v15 = (int16x8_t *)(v4 + 16);
            v16 = v11 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v15[-1] = v14;
              *v15 = v14;
              v15 += 2;
              v16 -= 16;
            }
            while (v16);
            v17 = v11 == (v11 & 0x7FFFFFFFFFFFFFF0);
            v11 &= 0xFu;
            if (v17)
              goto LABEL_3;
          }
        }
        else
        {
          v12 = (__int16 *)v4;
        }
        v18 = v11 + 1;
        do
        {
          *v12++ = *v10;
          --v18;
        }
        while (v18 > 1);
      }
LABEL_3:
      v4 += 2 * *(unsigned int *)(v8 + 16);
    }
  }
  *(_QWORD *)a2 = v4;
  v19 = *(uint64_t **)(a3 + 8);
  v20 = *(const __int16 **)(a3 + 16);
  v21 = *v19;
  if (!v4)
  {
    if (v21)
    {
      result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360);
      if ((_DWORD)result)
LABEL_39:
        abort();
    }
  }
  if (v21 >= 1)
  {
    if ((unint64_t)v21 < 0x10
      || (v4 < (unint64_t)(v20 + 1) ? (v22 = (unint64_t)v20 >= v4 + 2 * v21) : (v22 = 1), !v22))
    {
      v23 = (__int16 *)v4;
      v24 = v21;
LABEL_36:
      v28 = v24 + 1;
      do
      {
        *v23++ = *v20;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v23 = (__int16 *)(v4 + 2 * (v21 & 0xFFFFFFFFFFFFFFF0));
    v24 = v21 & 0xF;
    v25 = vld1q_dup_s16(v20);
    v26 = (int16x8_t *)(v4 + 16);
    v27 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = v25;
      *v26 = v25;
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return result;
}

uint64_t sub_20B27EC40(uint64_t result)
{
  uint64_t v1;
  const __int16 *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int16 *v16;
  unint64_t v17;
  int16x8_t v18;
  int16x8_t *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];
  _DWORD v24[7];
  _QWORD v25[3];

  v1 = *(_QWORD *)result;
  v2 = *(const __int16 **)(result + 8);
  v3 = *(_DWORD *)(*(_QWORD *)result + 12);
  v5 = *(_DWORD *)(*(_QWORD *)result + 24);
  v4 = *(_DWORD *)(*(_QWORD *)result + 28);
  if (v4 == v5 * v3)
  {
    v6 = (*(_DWORD *)(v1 + 8) * v3 * *(_DWORD *)(v1 + 16));
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v14 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v14 < 0x10)
      goto LABEL_22;
    v15 = 2 * v6;
    if (!(_DWORD)v6)
      v15 = 2;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v15 > (unint64_t)v2)
    {
LABEL_22:
      v16 = (__int16 *)v7;
LABEL_23:
      v17 = v6 + 1;
      do
      {
        *v16++ = *v2;
        --v17;
      }
      while (v17 > 1);
      return result;
    }
    v16 = (__int16 *)(v7 + 2 * (v14 & 0xFFFFFFFFFFFFFFF0));
    v6 -= v14 & 0xFFFFFFFFFFFFFFF0;
    v18 = vld1q_dup_s16(v2);
    v19 = (int16x8_t *)(v7 + 16);
    v20 = v14 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 16;
    }
    while (v20);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_23;
  }
  else
  {
    v22 = 0;
    v9 = *(_DWORD *)(v1 + 8);
    v21 = (v9 * v3);
    v23[0] = &v22;
    v23[1] = &v21;
    v23[2] = v2;
    v10 = *(_DWORD *)(v1 + 16);
    if (v3)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (!v11 && v10 != 0)
    {
      v24[0] = 0;
      v24[1] = v9 - 1;
      v24[2] = *(_DWORD *)(v1 + 20);
      v24[3] = v3 - 1;
      v24[4] = v5;
      v24[5] = v10 - 1;
      v24[6] = v4;
      v13 = *(_QWORD *)v1;
      memset(v25, 0, sizeof(v25));
      return sub_20B27EDF4((_BOOL8)v24, (uint64_t)v25, (uint64_t)v23, v13);
    }
  }
  return result;
}

BOOL sub_20B27EDF4(_BOOL8 result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int i;
  const __int16 *v11;
  uint64_t v12;
  __int16 *v13;
  BOOL v14;
  int16x8_t v15;
  int16x8_t *v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t *v20;
  const __int16 *v21;
  uint64_t v22;
  BOOL v23;
  __int16 *v24;
  uint64_t v25;
  int16x8_t v26;
  int16x8_t *v27;
  unint64_t v28;
  unint64_t v29;

  v4 = a4;
  v7 = *(unsigned int *)(result + 16);
  v8 = *(unsigned int *)(result + 8) | (unint64_t)(v7 << 32);
  *(_QWORD *)a2 = a4;
  *(_QWORD *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 16) = v7;
  if (*(_DWORD *)(result + 20))
  {
    v9 = (unsigned int *)result;
    for (i = 0; i < v9[5]; ++i)
    {
      *(_QWORD *)a2 = v4;
      v11 = *(const __int16 **)(a3 + 16);
      v12 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v12)
        {
          result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360);
          if (result)
            goto LABEL_39;
        }
      }
      if (v12 >= 1)
      {
        if ((unint64_t)v12 >= 0x10)
        {
          v14 = v4 >= (unint64_t)(v11 + 1) || (unint64_t)v11 >= v4 + 2 * v12;
          v13 = (__int16 *)v4;
          if (v14)
          {
            v13 = (__int16 *)(v4 + 2 * (v12 & 0xFFFFFFFFFFFFFFF0));
            v15 = vld1q_dup_s16(v11);
            v16 = (int16x8_t *)(v4 + 16);
            v17 = v12 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v16[-1] = v15;
              *v16 = v15;
              v16 += 2;
              v17 -= 16;
            }
            while (v17);
            v18 = v12 == (v12 & 0x7FFFFFFFFFFFFFF0);
            v12 &= 0xFu;
            if (v18)
              goto LABEL_3;
          }
        }
        else
        {
          v13 = (__int16 *)v4;
        }
        v19 = v12 + 1;
        do
        {
          *v13++ = *v11;
          --v19;
        }
        while (v19 > 1);
      }
LABEL_3:
      v4 += 2 * v9[6];
    }
  }
  *(_QWORD *)a2 = v4;
  v20 = *(uint64_t **)(a3 + 8);
  v21 = *(const __int16 **)(a3 + 16);
  v22 = *v20;
  if (!v4)
  {
    if (v22)
    {
      result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360);
      if (result)
LABEL_39:
        abort();
    }
  }
  if (v22 >= 1)
  {
    if ((unint64_t)v22 < 0x10
      || (v4 < (unint64_t)(v21 + 1) ? (v23 = (unint64_t)v21 >= v4 + 2 * v22) : (v23 = 1), !v23))
    {
      v24 = (__int16 *)v4;
      v25 = v22;
LABEL_36:
      v29 = v25 + 1;
      do
      {
        *v24++ = *v21;
        --v29;
      }
      while (v29 > 1);
      return result;
    }
    v24 = (__int16 *)(v4 + 2 * (v22 & 0xFFFFFFFFFFFFFFF0));
    v25 = v22 & 0xF;
    v26 = vld1q_dup_s16(v21);
    v27 = (int16x8_t *)(v4 + 16);
    v28 = v22 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 16;
    }
    while (v28);
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return result;
}

uint64_t sub_20B27F00C(uint64_t result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unsigned int i;
  const __int16 *v9;
  uint64_t v10;
  __int16 *v11;
  BOOL v12;
  int16x8_t v13;
  int16x8_t *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t *v18;
  const __int16 *v19;
  uint64_t v20;
  BOOL v21;
  __int16 *v22;
  uint64_t v23;
  int16x8_t v24;
  int16x8_t *v25;
  unint64_t v26;
  unint64_t v27;

  v4 = a4;
  *a2 = a4;
  if (*(_DWORD *)(result + 12))
  {
    v7 = result;
    for (i = 0; i < *(_DWORD *)(v7 + 12); ++i)
    {
      *a2 = v4;
      v9 = *(const __int16 **)(a3 + 16);
      v10 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v10)
        {
          result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360);
          if ((_DWORD)result)
            goto LABEL_39;
        }
      }
      if (v10 >= 1)
      {
        if ((unint64_t)v10 >= 0x10)
        {
          v12 = v4 >= (unint64_t)(v9 + 1) || (unint64_t)v9 >= v4 + 2 * v10;
          v11 = (__int16 *)v4;
          if (v12)
          {
            v11 = (__int16 *)(v4 + 2 * (v10 & 0xFFFFFFFFFFFFFFF0));
            v13 = vld1q_dup_s16(v9);
            v14 = (int16x8_t *)(v4 + 16);
            v15 = v10 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v14[-1] = v13;
              *v14 = v13;
              v14 += 2;
              v15 -= 16;
            }
            while (v15);
            v16 = v10 == (v10 & 0x7FFFFFFFFFFFFFF0);
            v10 &= 0xFu;
            if (v16)
              goto LABEL_3;
          }
        }
        else
        {
          v11 = (__int16 *)v4;
        }
        v17 = v10 + 1;
        do
        {
          *v11++ = *v9;
          --v17;
        }
        while (v17 > 1);
      }
LABEL_3:
      v4 += 2 * *(unsigned int *)(v7 + 16);
    }
  }
  *a2 = v4;
  v18 = *(uint64_t **)(a3 + 8);
  v19 = *(const __int16 **)(a3 + 16);
  v20 = *v18;
  if (!v4)
  {
    if (v20)
    {
      result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360);
      if ((_DWORD)result)
LABEL_39:
        abort();
    }
  }
  if (v20 >= 1)
  {
    if ((unint64_t)v20 < 0x10
      || (v4 < (unint64_t)(v19 + 1) ? (v21 = (unint64_t)v19 >= v4 + 2 * v20) : (v21 = 1), !v21))
    {
      v22 = (__int16 *)v4;
      v23 = v20;
LABEL_36:
      v27 = v23 + 1;
      do
      {
        *v22++ = *v19;
        --v27;
      }
      while (v27 > 1);
      return result;
    }
    v22 = (__int16 *)(v4 + 2 * (v20 & 0xFFFFFFFFFFFFFFF0));
    v23 = v20 & 0xF;
    v24 = vld1q_dup_s16(v19);
    v25 = (int16x8_t *)(v4 + 16);
    v26 = v20 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v25[-1] = v24;
      *v25 = v24;
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return result;
}

_QWORD **sub_20B27F214(_QWORD **result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  int v6;
  uint64_t v7;
  _WORD *v8;
  int v9;
  uint64_t v10;
  _WORD *v11;
  int v12;
  _QWORD **v13;
  int v14;

  v2 = *(_DWORD *)(a2 + 12);
  v3 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v6 = v2 - 1;
    v7 = *(unsigned int *)(a2 + 24);
    v8 = *(_WORD **)a2;
    v9 = v3 - 1;
    if (v3 == 1)
    {
      v11 = (_WORD *)**result;
      if (!v6)
      {
LABEL_19:
        *v8 = *v11;
        v8[1] = *v11;
        v8[2] = *v11;
        return result;
      }
    }
    else
    {
      v10 = *(unsigned int *)(a2 + 28);
      v11 = (_WORD *)**result;
      if (!v6)
      {
        do
        {
          *v8 = *v11;
          v8[1] = *v11;
          v8[2] = *v11;
          v8 += v10;
          --v9;
        }
        while (v9);
        goto LABEL_19;
      }
      v12 = 0;
      v13 = (_QWORD **)(v8 + 2);
      do
      {
        result = v13;
        v14 = v6;
        do
        {
          *((_WORD *)result - 2) = *v11;
          *((_WORD *)result - 1) = *v11;
          *(_WORD *)result = *v11;
          result = (_QWORD **)((char *)result + 2 * v7);
          --v14;
        }
        while (v14);
        *((_WORD *)result - 2) = *v11;
        *((_WORD *)result - 1) = *v11;
        *(_WORD *)result = *v11;
        v8 += v10;
        ++v12;
        v13 = (_QWORD **)((char *)v13 + 2 * v10);
      }
      while (v12 != v9);
    }
    do
    {
      *v8 = *v11;
      v8[1] = *v11;
      v8[2] = *v11;
      v8 += v7;
      --v6;
    }
    while (v6);
    goto LABEL_19;
  }
  return result;
}

_DWORD *sub_20B27F33C(uint64_t a1)
{
  _DWORD *result;
  int v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  _WORD *v12;
  _DWORD v13[7];

  result = *(_DWORD **)a1;
  v3 = result[5];
  if (v3 == 1)
  {
    if (result[6] == result[2])
      return (_DWORD *)sub_20B27EC40(a1);
    else
      return (_DWORD *)sub_20B27F3F8((uint64_t)result, *(_QWORD *)(a1 + 8));
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8);
    v5 = result[2];
    v4 = result[3];
    v6 = result[4];
    if (v5)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7 && v6 != 0)
    {
      v11 = &v10;
      v13[0] = 0;
      v13[1] = v5 - 1;
      v13[2] = v3;
      v13[3] = v4 - 1;
      v9 = result[7];
      v13[4] = result[6];
      v13[5] = v6 - 1;
      v13[6] = v9;
      v12 = *(_WORD **)result;
      return sub_20B27F4B8(v13, &v11, &v12);
    }
  }
  return result;
}

uint64_t sub_20B27F3F8(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  _QWORD v13[3];
  _DWORD v14[5];
  unsigned int v15;
  unsigned int v16;
  unint64_t v17[2];

  v12 = 0;
  v13[0] = &v12;
  v13[1] = &v11;
  v3 = *(unsigned int *)(result + 8);
  v2 = *(_DWORD *)(result + 12);
  v11 = v3;
  v13[2] = a2;
  v4 = *(_DWORD *)(result + 16);
  if ((_DWORD)v3)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v14[0] = 0;
    v14[1] = v3 - 1;
    v7 = *(_DWORD *)(result + 24);
    v14[2] = *(_DWORD *)(result + 20);
    v14[3] = v2 - 1;
    v8 = *(_DWORD *)(result + 28);
    v9 = *(_QWORD *)result;
    v17[0] = 0;
    v17[1] = 0;
    v14[4] = v7;
    v15 = v4 - 1;
    v16 = v8;
    if (v4 != 1)
    {
      v10 = 0;
      do
      {
        sub_20B27F00C((uint64_t)v14, v17, (uint64_t)v13, v9);
        v9 += 2 * v16;
        ++v10;
      }
      while (v10 < v15);
    }
    return sub_20B27F00C((uint64_t)v14, v17, (uint64_t)v13, v9);
  }
  return result;
}

_DWORD *sub_20B27F4B8(_DWORD *result, _QWORD **a2, _WORD **a3)
{
  _WORD *v3;
  int v4;
  int v5;
  _WORD *v6;
  uint64_t v7;
  int v8;
  _WORD *v9;
  uint64_t v10;
  _WORD *v11;
  int v12;
  uint64_t v13;

  v3 = *a3;
  v4 = result[5];
  if (!v4)
  {
    v5 = result[3];
    v6 = (_WORD *)**a2;
    if (!v5)
      goto LABEL_13;
    goto LABEL_9;
  }
  v5 = result[3];
  v6 = (_WORD *)**a2;
  v7 = result[6];
  if (v5)
  {
    v8 = 0;
    v9 = v3 + 2;
    v10 = 2 * result[4];
    do
    {
      v11 = v9;
      v12 = v5;
      do
      {
        *(v11 - 2) = *v6;
        *(v11 - 1) = *v6;
        *v11 = *v6;
        v11[1] = *v6;
        v11 = (_WORD *)((char *)v11 + v10);
        --v12;
      }
      while (v12);
      *(v11 - 2) = *v6;
      *(v11 - 1) = *v6;
      *v11 = *v6;
      v11[1] = *v6;
      v3 += v7;
      ++v8;
      v9 += v7;
    }
    while (v8 != v4);
LABEL_9:
    v13 = 2 * result[4];
    do
    {
      *v3 = *v6;
      v3[1] = *v6;
      v3[2] = *v6;
      v3[3] = *v6;
      v3 = (_WORD *)((char *)v3 + v13);
      --v5;
    }
    while (v5);
    goto LABEL_13;
  }
  do
  {
    *v3 = *v6;
    v3[1] = *v6;
    v3[2] = *v6;
    v3[3] = *v6;
    v3 += v7;
    --v4;
  }
  while (v4);
LABEL_13:
  *v3 = *v6;
  v3[1] = *v6;
  v3[2] = *v6;
  v3[3] = *v6;
  return result;
}

void sub_20B27F5F8(_QWORD *a1, __n128 a2)
{
  uint64_t v2;
  const __int16 *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int16 *v15;
  unint64_t v16;
  int16x8_t v17;
  int16x8_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v22[3];
  _DWORD v23[5];
  _QWORD v24[2];

  v2 = *a1;
  v3 = (const __int16 *)a1[1];
  v4 = *(unsigned int *)(*a1 + 8);
  v6 = *(_DWORD *)(*a1 + 16);
  v5 = *(_DWORD *)(*a1 + 20);
  if (v5 == v6 * (_DWORD)v4)
  {
    v7 = (*(_DWORD *)(v2 + 12) * v4);
    v8 = *(_QWORD *)v2;
    if ((_DWORD)v7)
      v9 = v8 == 0;
    else
      v9 = 0;
    if (v9)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
    }
    else if (!(_DWORD)v7)
    {
      return;
    }
    v13 = v7 - ((_DWORD)v7 != 0) + 1;
    if (v13 < 0x10)
      goto LABEL_19;
    v14 = 2 * v7;
    if (!(_DWORD)v7)
      v14 = 2;
    if (v8 < (unint64_t)(v3 + 1) && v8 + v14 > (unint64_t)v3)
    {
LABEL_19:
      v15 = (__int16 *)v8;
LABEL_20:
      v16 = v7 + 1;
      do
      {
        *v15++ = *v3;
        --v16;
      }
      while (v16 > 1);
      return;
    }
    v15 = (__int16 *)(v8 + 2 * (v13 & 0xFFFFFFFFFFFFFFF0));
    v7 -= v13 & 0xFFFFFFFFFFFFFFF0;
    v17 = vld1q_dup_s16(v3);
    v18 = (int16x8_t *)(v8 + 16);
    v19 = v13 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v18[-1] = v17;
      *v18 = v17;
      v18 += 2;
      v19 -= 16;
    }
    while (v19);
    if (v13 != (v13 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_20;
  }
  else
  {
    v21 = 0;
    v20 = v4;
    v22[0] = &v21;
    v22[1] = &v20;
    v22[2] = v3;
    v10 = *(_DWORD *)(v2 + 12);
    if ((_DWORD)v4)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v23[0] = 0;
      v23[1] = v4 - 1;
      v23[2] = v6;
      v23[3] = v10 - 1;
      v23[4] = v5;
      v12 = *(_QWORD *)v2;
      v24[0] = 0;
      v24[1] = 0;
      sub_20B27F788(v23, (uint64_t)v24, (uint64_t)v22, v12, a2);
    }
  }
}

unsigned __int16 sub_20B27F788@<H0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 a5@<Q0>)
{
  unint64_t v5;
  int v8;
  unsigned int i;
  const __int16 *v11;
  uint64_t v12;
  __int16 *v13;
  BOOL v14;
  __n128 *v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t *v19;
  const __int16 *v20;
  uint64_t v21;
  BOOL v22;
  __int16 *v23;
  uint64_t v24;
  __n128 *v25;
  unint64_t v26;
  unint64_t v27;

  v5 = a4;
  v8 = a1[2];
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v8;
  if (a1[3])
  {
    for (i = 0; i < a1[3]; ++i)
    {
      *(_QWORD *)a2 = v5;
      v11 = *(const __int16 **)(a3 + 16);
      v12 = **(_QWORD **)(a3 + 8);
      if (!v5
        && v12
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_39;
      }
      if (v12 >= 1)
      {
        if ((unint64_t)v12 >= 0x10)
        {
          v14 = v5 >= (unint64_t)(v11 + 1) || (unint64_t)v11 >= v5 + 2 * v12;
          v13 = (__int16 *)v5;
          if (v14)
          {
            v13 = (__int16 *)(v5 + 2 * (v12 & 0xFFFFFFFFFFFFFFF0));
            a5 = (__n128)vld1q_dup_s16(v11);
            v15 = (__n128 *)(v5 + 16);
            v16 = v12 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v15[-1] = a5;
              *v15 = a5;
              v15 += 2;
              v16 -= 16;
            }
            while (v16);
            v17 = v12 == (v12 & 0x7FFFFFFFFFFFFFF0);
            v12 &= 0xFu;
            if (v17)
              goto LABEL_3;
          }
        }
        else
        {
          v13 = (__int16 *)v5;
        }
        v18 = v12 + 1;
        do
        {
          a5.n128_u16[0] = *v11;
          *v13++ = *v11;
          --v18;
        }
        while (v18 > 1);
      }
LABEL_3:
      v5 += 2 * a1[4];
    }
  }
  *(_QWORD *)a2 = v5;
  v19 = *(uint64_t **)(a3 + 8);
  v20 = *(const __int16 **)(a3 + 16);
  v21 = *v19;
  if (!v5
    && v21
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
LABEL_39:
    abort();
  }
  if (v21 >= 1)
  {
    if ((unint64_t)v21 < 0x10
      || (v5 < (unint64_t)(v20 + 1) ? (v22 = (unint64_t)v20 >= v5 + 2 * v21) : (v22 = 1), !v22))
    {
      v23 = (__int16 *)v5;
      v24 = v21;
LABEL_36:
      v27 = v24 + 1;
      do
      {
        a5.n128_u16[0] = *v20;
        *v23++ = *v20;
        --v27;
      }
      while (v27 > 1);
      return a5.n128_u16[0];
    }
    v23 = (__int16 *)(v5 + 2 * (v21 & 0xFFFFFFFFFFFFFFF0));
    v24 = v21 & 0xF;
    a5 = (__n128)vld1q_dup_s16(v20);
    v25 = (__n128 *)(v5 + 16);
    v26 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v25[-1] = a5;
      *v25 = a5;
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return a5.n128_u16[0];
}

void sub_20B27F998(_QWORD *a1, __n128 a2)
{
  uint64_t v2;
  const __int16 *v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  int v11;
  BOOL v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 *v17;
  unint64_t v18;
  int16x8_t v19;
  int16x8_t *v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD v24[3];
  unsigned int v25[7];
  _QWORD v26[3];

  v2 = *a1;
  v3 = (const __int16 *)a1[1];
  v4 = *(_DWORD *)(*a1 + 12);
  v6 = *(_DWORD *)(*a1 + 24);
  v5 = *(_DWORD *)(*a1 + 28);
  if (v5 == v6 * v4)
  {
    v7 = (*(_DWORD *)(v2 + 8) * v4 * *(_DWORD *)(v2 + 16));
    v8 = *(_QWORD *)v2;
    if ((_DWORD)v7)
      v9 = v8 == 0;
    else
      v9 = 0;
    if (v9)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
    }
    else if (!(_DWORD)v7)
    {
      return;
    }
    v15 = v7 - ((_DWORD)v7 != 0) + 1;
    if (v15 < 0x10)
      goto LABEL_22;
    v16 = 2 * v7;
    if (!(_DWORD)v7)
      v16 = 2;
    if (v8 < (unint64_t)(v3 + 1) && v8 + v16 > (unint64_t)v3)
    {
LABEL_22:
      v17 = (__int16 *)v8;
LABEL_23:
      v18 = v7 + 1;
      do
      {
        *v17++ = *v3;
        --v18;
      }
      while (v18 > 1);
      return;
    }
    v17 = (__int16 *)(v8 + 2 * (v15 & 0xFFFFFFFFFFFFFFF0));
    v7 -= v15 & 0xFFFFFFFFFFFFFFF0;
    v19 = vld1q_dup_s16(v3);
    v20 = (int16x8_t *)(v8 + 16);
    v21 = v15 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v20[-1] = v19;
      *v20 = v19;
      v20 += 2;
      v21 -= 16;
    }
    while (v21);
    if (v15 != (v15 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_23;
  }
  else
  {
    v23 = 0;
    v10 = *(_DWORD *)(v2 + 8);
    v22 = (v10 * v4);
    v24[0] = &v23;
    v24[1] = &v22;
    v24[2] = v3;
    v11 = *(_DWORD *)(v2 + 16);
    if (v4)
      v12 = v10 == 0;
    else
      v12 = 1;
    if (!v12 && v11 != 0)
    {
      v25[0] = 0;
      v25[1] = v10 - 1;
      v25[2] = *(_DWORD *)(v2 + 20);
      v25[3] = v4 - 1;
      v25[4] = v6;
      v25[5] = v11 - 1;
      v25[6] = v5;
      v14 = *(_QWORD *)v2;
      memset(v26, 0, sizeof(v26));
      sub_20B27FB4C(v25, (uint64_t)v26, (uint64_t)v24, v14, a2);
    }
  }
}

unsigned __int16 sub_20B27FB4C@<H0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 a5@<Q0>)
{
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unsigned int i;
  const __int16 *v12;
  uint64_t v13;
  __int16 *v14;
  BOOL v15;
  __n128 *v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t *v20;
  const __int16 *v21;
  uint64_t v22;
  BOOL v23;
  __int16 *v24;
  uint64_t v25;
  __n128 *v26;
  unint64_t v27;
  unint64_t v28;

  v5 = a4;
  v8 = a1[4];
  v9 = a1[2] | (unint64_t)(v8 << 32);
  *(_QWORD *)a2 = a4;
  *(_QWORD *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 16) = v8;
  if (a1[5])
  {
    for (i = 0; i < a1[5]; ++i)
    {
      *(_QWORD *)a2 = v5;
      v12 = *(const __int16 **)(a3 + 16);
      v13 = **(_QWORD **)(a3 + 8);
      if (!v5
        && v13
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_39;
      }
      if (v13 >= 1)
      {
        if ((unint64_t)v13 >= 0x10)
        {
          v15 = v5 >= (unint64_t)(v12 + 1) || (unint64_t)v12 >= v5 + 2 * v13;
          v14 = (__int16 *)v5;
          if (v15)
          {
            v14 = (__int16 *)(v5 + 2 * (v13 & 0xFFFFFFFFFFFFFFF0));
            a5 = (__n128)vld1q_dup_s16(v12);
            v16 = (__n128 *)(v5 + 16);
            v17 = v13 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v16[-1] = a5;
              *v16 = a5;
              v16 += 2;
              v17 -= 16;
            }
            while (v17);
            v18 = v13 == (v13 & 0x7FFFFFFFFFFFFFF0);
            v13 &= 0xFu;
            if (v18)
              goto LABEL_3;
          }
        }
        else
        {
          v14 = (__int16 *)v5;
        }
        v19 = v13 + 1;
        do
        {
          a5.n128_u16[0] = *v12;
          *v14++ = *v12;
          --v19;
        }
        while (v19 > 1);
      }
LABEL_3:
      v5 += 2 * a1[6];
    }
  }
  *(_QWORD *)a2 = v5;
  v20 = *(uint64_t **)(a3 + 8);
  v21 = *(const __int16 **)(a3 + 16);
  v22 = *v20;
  if (!v5
    && v22
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
LABEL_39:
    abort();
  }
  if (v22 >= 1)
  {
    if ((unint64_t)v22 < 0x10
      || (v5 < (unint64_t)(v21 + 1) ? (v23 = (unint64_t)v21 >= v5 + 2 * v22) : (v23 = 1), !v23))
    {
      v24 = (__int16 *)v5;
      v25 = v22;
LABEL_36:
      v28 = v25 + 1;
      do
      {
        a5.n128_u16[0] = *v21;
        *v24++ = *v21;
        --v28;
      }
      while (v28 > 1);
      return a5.n128_u16[0];
    }
    v24 = (__int16 *)(v5 + 2 * (v22 & 0xFFFFFFFFFFFFFFF0));
    v25 = v22 & 0xF;
    a5 = (__n128)vld1q_dup_s16(v21);
    v26 = (__n128 *)(v5 + 16);
    v27 = v22 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = a5;
      *v26 = a5;
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return a5.n128_u16[0];
}

unsigned __int16 sub_20B27FD64@<H0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 a5@<Q0>)
{
  unint64_t v5;
  unsigned int i;
  const __int16 *v10;
  uint64_t v11;
  __int16 *v12;
  BOOL v13;
  __n128 *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t *v18;
  const __int16 *v19;
  uint64_t v20;
  BOOL v21;
  __int16 *v22;
  uint64_t v23;
  __n128 *v24;
  unint64_t v25;
  unint64_t v26;

  v5 = a4;
  *a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    for (i = 0; i < *(_DWORD *)(a1 + 12); ++i)
    {
      *a2 = v5;
      v10 = *(const __int16 **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v5
        && v11
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_39;
      }
      if (v11 >= 1)
      {
        if ((unint64_t)v11 >= 0x10)
        {
          v13 = v5 >= (unint64_t)(v10 + 1) || (unint64_t)v10 >= v5 + 2 * v11;
          v12 = (__int16 *)v5;
          if (v13)
          {
            v12 = (__int16 *)(v5 + 2 * (v11 & 0xFFFFFFFFFFFFFFF0));
            a5 = (__n128)vld1q_dup_s16(v10);
            v14 = (__n128 *)(v5 + 16);
            v15 = v11 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v14[-1] = a5;
              *v14 = a5;
              v14 += 2;
              v15 -= 16;
            }
            while (v15);
            v16 = v11 == (v11 & 0x7FFFFFFFFFFFFFF0);
            v11 &= 0xFu;
            if (v16)
              goto LABEL_3;
          }
        }
        else
        {
          v12 = (__int16 *)v5;
        }
        v17 = v11 + 1;
        do
        {
          a5.n128_u16[0] = *v10;
          *v12++ = *v10;
          --v17;
        }
        while (v17 > 1);
      }
LABEL_3:
      v5 += 2 * *(unsigned int *)(a1 + 16);
    }
  }
  *a2 = v5;
  v18 = *(uint64_t **)(a3 + 8);
  v19 = *(const __int16 **)(a3 + 16);
  v20 = *v18;
  if (!v5
    && v20
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360))
  {
LABEL_39:
    abort();
  }
  if (v20 >= 1)
  {
    if ((unint64_t)v20 < 0x10
      || (v5 < (unint64_t)(v19 + 1) ? (v21 = (unint64_t)v19 >= v5 + 2 * v20) : (v21 = 1), !v21))
    {
      v22 = (__int16 *)v5;
      v23 = v20;
LABEL_36:
      v26 = v23 + 1;
      do
      {
        a5.n128_u16[0] = *v19;
        *v22++ = *v19;
        --v26;
      }
      while (v26 > 1);
      return a5.n128_u16[0];
    }
    v22 = (__int16 *)(v5 + 2 * (v20 & 0xFFFFFFFFFFFFFFF0));
    v23 = v20 & 0xF;
    a5 = (__n128)vld1q_dup_s16(v19);
    v24 = (__n128 *)(v5 + 16);
    v25 = v20 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v24[-1] = a5;
      *v24 = a5;
      v24 += 2;
      v25 -= 16;
    }
    while (v25);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return a5.n128_u16[0];
}

unsigned __int16 sub_20B27FF6C@<H0>(uint64_t *a1@<X0>, __n128 a2@<Q0>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v10;
  __int16 *v11;
  uint64_t v13;
  __int16 **v14;
  _DWORD v15[7];
  _QWORD v16[2];

  v3 = *a1;
  v4 = *(_DWORD *)(v3 + 20);
  if (v4 == 1)
  {
    if (*(_DWORD *)(v3 + 24) == *(_DWORD *)(v3 + 8))
      sub_20B27F998(a1, a2);
    else
      a2.n128_u16[0] = sub_20B280028(v3, a1[1], a2);
  }
  else
  {
    v13 = a1[1];
    v6 = *(_DWORD *)(v3 + 8);
    v5 = *(_DWORD *)(v3 + 12);
    v7 = *(_DWORD *)(v3 + 16);
    if (v6)
      v8 = v5 == 0;
    else
      v8 = 1;
    if (!v8 && v7 != 0)
    {
      v14 = (__int16 **)&v13;
      v15[0] = 0;
      v15[1] = v6 - 1;
      v15[2] = v4;
      v15[3] = v5 - 1;
      v10 = *(_DWORD *)(v3 + 28);
      v15[4] = *(_DWORD *)(v3 + 24);
      v15[5] = v7 - 1;
      v15[6] = v10;
      v11 = *(__int16 **)v3;
      v16[0] = 0;
      v16[1] = 0;
      a2.n128_u16[0] = sub_20B2800E8(v15, (uint64_t)v16, &v14, v11);
    }
  }
  return a2.n128_u16[0];
}

unsigned __int16 sub_20B280028@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 a3@<Q0>)
{
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v13;
  char v14;
  _QWORD v15[3];
  _DWORD v16[5];
  unsigned int v17;
  unsigned int v18;
  unint64_t v19[2];

  v14 = 0;
  v15[0] = &v14;
  v15[1] = &v13;
  v4 = *(unsigned int *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  v13 = v4;
  v15[2] = a2;
  v5 = *(_DWORD *)(a1 + 16);
  if ((_DWORD)v4)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v16[0] = 0;
    v16[1] = v4 - 1;
    v8 = *(_DWORD *)(a1 + 24);
    v16[2] = *(_DWORD *)(a1 + 20);
    v16[3] = v3 - 1;
    v9 = *(_DWORD *)(a1 + 28);
    v10 = *(_QWORD *)a1;
    v19[0] = 0;
    v19[1] = 0;
    v16[4] = v8;
    v17 = v5 - 1;
    v18 = v9;
    if (v5 != 1)
    {
      v11 = 0;
      do
      {
        a3.n128_u64[0] = sub_20B27FD64((uint64_t)v16, v19, (uint64_t)v15, v10, a3);
        v10 += 2 * v18;
        ++v11;
      }
      while (v11 < v17);
    }
    a3.n128_u16[0] = sub_20B27FD64((uint64_t)v16, v19, (uint64_t)v15, v10, a3);
  }
  return a3.n128_u16[0];
}

__int16 sub_20B2800E8@<H0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, __int16 ***a3@<X2>, __int16 *a4@<X3>)
{
  unsigned int v4;
  __int16 *v5;
  unsigned int v6;
  unsigned int v7;
  __int16 *v8;
  __int16 result;

  if (a1[5])
  {
    v4 = 0;
    do
    {
      *(_QWORD *)a2 = a4;
      v5 = a4;
      if (a1[3])
      {
        v6 = 0;
        v5 = a4;
        do
        {
          *(_QWORD *)a2 = v5;
          *v5 = ***a3;
          *(_WORD *)(*(_QWORD *)a2 + 2) = ***a3;
          *(_WORD *)(*(_QWORD *)a2 + 4) = ***a3;
          *(_WORD *)(*(_QWORD *)a2 + 6) = ***a3;
          v5 += a1[4];
          ++v6;
        }
        while (v6 < a1[3]);
      }
      *(_QWORD *)a2 = v5;
      *v5 = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 2) = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 4) = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 6) = ***a3;
      a4 += a1[6];
      ++v4;
    }
    while (v4 < a1[5]);
  }
  *(_QWORD *)a2 = a4;
  if (a1[3])
  {
    v7 = 0;
    do
    {
      *(_QWORD *)a2 = a4;
      *a4 = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 2) = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 4) = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 6) = ***a3;
      a4 += a1[4];
      ++v7;
    }
    while (v7 < a1[3]);
  }
  *(_QWORD *)a2 = a4;
  *a4 = ***a3;
  *(_WORD *)(*(_QWORD *)a2 + 2) = ***a3;
  *(_WORD *)(*(_QWORD *)a2 + 4) = ***a3;
  v8 = **a3;
  result = *v8;
  *(_WORD *)(*(_QWORD *)a2 + 6) = *v8;
  return result;
}

uint64_t sub_20B2802A4(uint64_t result)
{
  uint64_t v1;
  const float *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[3];
  _DWORD v22[5];
  _QWORD v23[2];

  v1 = *(_QWORD *)result;
  v2 = *(const float **)(result + 8);
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  v5 = *(_DWORD *)(*(_QWORD *)result + 16);
  v4 = *(_DWORD *)(*(_QWORD *)result + 20);
  if (v4 == v5 * (_DWORD)v3)
  {
    v6 = (*(_DWORD *)(v1 + 12) * v3);
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v12 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v12 < 0x10)
      goto LABEL_19;
    v13 = 4 * v6;
    if (!(_DWORD)v6)
      v13 = 4;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v13 > (unint64_t)v2)
    {
LABEL_19:
      v14 = (_DWORD *)v7;
LABEL_20:
      v15 = v6 + 1;
      do
      {
        *v14++ = *(_DWORD *)v2;
        --v15;
      }
      while (v15 > 1);
      return result;
    }
    v14 = (_DWORD *)(v7 + 4 * (v12 & 0xFFFFFFFFFFFFFFF8));
    v6 -= v12 & 0xFFFFFFFFFFFFFFF8;
    v16 = vld1q_dup_f32(v2);
    v17 = (float32x4_t *)(v7 + 16);
    v18 = v12 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17[-1] = v16;
      *v17 = v16;
      v17 += 2;
      v18 -= 8;
    }
    while (v18);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_20;
  }
  else
  {
    v20 = 0;
    v19 = v3;
    v21[0] = &v20;
    v21[1] = &v19;
    v21[2] = v2;
    v9 = *(_DWORD *)(v1 + 12);
    if ((_DWORD)v3)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v22[0] = 0;
      v22[1] = v3 - 1;
      v22[2] = v5;
      v22[3] = v9 - 1;
      v22[4] = v4;
      v11 = *(_QWORD *)v1;
      v23[0] = 0;
      v23[1] = 0;
      return sub_20B280434((uint64_t)v22, (uint64_t)v23, (uint64_t)v21, v11);
    }
  }
  return result;
}

uint64_t sub_20B280434(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  unsigned int i;
  const float *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  const float *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  unint64_t v31;

  v4 = a4;
  v7 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    v8 = result;
    for (i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(_QWORD *)a2 = v4;
      v10 = *(const float **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360);
          if ((_DWORD)result)
            goto LABEL_37;
        }
      }
      if (v11 >= 1)
      {
        v12 = v11 & 0x3FFFFFFFFFFFFFFFLL;
        v13 = (v11 & 0x3FFFFFFFFFFFFFFFLL) - ((v11 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v13 >= 0x10)
        {
          v15 = -4;
          if (!v12)
            v15 = 0;
          if (v4 >= (unint64_t)(v10 + 1)
            || (v16 = v4 + v15 + 4 * v11 + 4, v14 = (_DWORD *)v4, (unint64_t)v10 >= v16))
          {
            v14 = (_DWORD *)(v4 + 4 * (v13 & 0xFFFFFFFFFFFFFFF8));
            v12 -= v13 & 0xFFFFFFFFFFFFFFF8;
            v17 = vld1q_dup_f32(v10);
            v18 = (float32x4_t *)(v4 + 16);
            v19 = v13 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v18[-1] = v17;
              *v18 = v17;
              v18 += 2;
              v19 -= 8;
            }
            while (v19);
            if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_3;
          }
        }
        else
        {
          v14 = (_DWORD *)v4;
        }
        v20 = v12 + 1;
        do
        {
          *v14++ = *(_DWORD *)v10;
          --v20;
        }
        while (v20 > 1);
      }
LABEL_3:
      v4 += 4 * *(unsigned int *)(v8 + 16);
    }
  }
  *(_QWORD *)a2 = v4;
  v21 = *(uint64_t **)(a3 + 8);
  v22 = *(const float **)(a3 + 16);
  v23 = *v21;
  if (!v4)
  {
    if (v23)
    {
      result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360);
      if ((_DWORD)result)
LABEL_37:
        abort();
    }
  }
  if (v23 >= 1)
  {
    v24 = v23 & 0x3FFFFFFFFFFFFFFFLL;
    v25 = (v23 & 0x3FFFFFFFFFFFFFFFLL) - ((v23 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v25 < 0x10)
      goto LABEL_29;
    v26 = 4 * v23;
    if (!v24)
      v26 = 4;
    if (v4 < (unint64_t)(v22 + 1) && (unint64_t)v22 < v4 + v26)
    {
LABEL_29:
      v27 = (_DWORD *)v4;
LABEL_30:
      v28 = v24 + 1;
      do
      {
        *v27++ = *(_DWORD *)v22;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v27 = (_DWORD *)(v4 + 4 * (v25 & 0xFFFFFFFFFFFFFFF8));
    v24 -= v25 & 0xFFFFFFFFFFFFFFF8;
    v29 = vld1q_dup_f32(v22);
    v30 = (float32x4_t *)(v4 + 16);
    v31 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v30[-1] = v29;
      *v30 = v29;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
  return result;
}

float sub_20B280688(uint64_t *a1)
{
  uint64_t v2;
  float result;
  int v4;
  int v5;
  BOOL v6;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;

  v2 = *a1;
  if (*(_DWORD *)(v2 + 20) == 1)
  {
    if (*(_DWORD *)(v2 + 24) == *(_DWORD *)(v2 + 8))
      sub_20B2807A8((uint64_t)a1);
    else
      sub_20B280BB8(v2, a1[1]);
    return result;
  }
  v4 = *(_DWORD *)(v2 + 12);
  v5 = *(_DWORD *)(v2 + 16);
  if (*(_DWORD *)(v2 + 8))
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v8 = (_DWORD *)a1[1];
    v9 = v4 - 1;
    v10 = *(unsigned int *)(v2 + 24);
    v11 = *(_DWORD **)v2;
    v12 = v5 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(v2 + 28);
      if (!v9)
      {
        do
        {
          *v11 = *v8;
          v11[1] = *v8;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_22:
        *v11 = *v8;
        result = *(float *)v8;
        v11[1] = *v8;
        return result;
      }
      v14 = 0;
      v15 = v11 + 1;
      do
      {
        v16 = v15;
        v17 = v9;
        do
        {
          *(v16 - 1) = *v8;
          *v16 = *v8;
          v16 += v10;
          --v17;
        }
        while (v17);
        *(v16 - 1) = *v8;
        *v16 = *v8;
        v11 += v13;
        ++v14;
        v15 += v13;
      }
      while (v14 != v12);
    }
    for (; v9; --v9)
    {
      *v11 = *v8;
      v11[1] = *v8;
      v11 += v10;
    }
    goto LABEL_22;
  }
  return result;
}

uint64_t sub_20B2807A8(uint64_t result)
{
  uint64_t v1;
  const float *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];
  _DWORD v24[7];
  _QWORD v25[3];

  v1 = *(_QWORD *)result;
  v2 = *(const float **)(result + 8);
  v3 = *(_DWORD *)(*(_QWORD *)result + 12);
  v5 = *(_DWORD *)(*(_QWORD *)result + 24);
  v4 = *(_DWORD *)(*(_QWORD *)result + 28);
  if (v4 == v5 * v3)
  {
    v6 = (*(_DWORD *)(v1 + 8) * v3 * *(_DWORD *)(v1 + 16));
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v14 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v14 < 0x10)
      goto LABEL_22;
    v15 = 4 * v6;
    if (!(_DWORD)v6)
      v15 = 4;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v15 > (unint64_t)v2)
    {
LABEL_22:
      v16 = (_DWORD *)v7;
LABEL_23:
      v17 = v6 + 1;
      do
      {
        *v16++ = *(_DWORD *)v2;
        --v17;
      }
      while (v17 > 1);
      return result;
    }
    v16 = (_DWORD *)(v7 + 4 * (v14 & 0xFFFFFFFFFFFFFFF8));
    v6 -= v14 & 0xFFFFFFFFFFFFFFF8;
    v18 = vld1q_dup_f32(v2);
    v19 = (float32x4_t *)(v7 + 16);
    v20 = v14 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 8;
    }
    while (v20);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_23;
  }
  else
  {
    v22 = 0;
    v9 = *(_DWORD *)(v1 + 8);
    v21 = (v9 * v3);
    v23[0] = &v22;
    v23[1] = &v21;
    v23[2] = v2;
    v10 = *(_DWORD *)(v1 + 16);
    if (v3)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (!v11 && v10 != 0)
    {
      v24[0] = 0;
      v24[1] = v9 - 1;
      v24[2] = *(_DWORD *)(v1 + 20);
      v24[3] = v3 - 1;
      v24[4] = v5;
      v24[5] = v10 - 1;
      v24[6] = v4;
      v13 = *(_QWORD *)v1;
      memset(v25, 0, sizeof(v25));
      return sub_20B28095C((_BOOL8)v24, (uint64_t)v25, (uint64_t)v23, v13);
    }
  }
  return result;
}

BOOL sub_20B28095C(_BOOL8 result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int i;
  const float *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  const float *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  float32x4_t v30;
  float32x4_t *v31;
  unint64_t v32;

  v4 = a4;
  v7 = *(unsigned int *)(result + 16);
  v8 = *(unsigned int *)(result + 8) | (unint64_t)(v7 << 32);
  *(_QWORD *)a2 = a4;
  *(_QWORD *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 16) = v7;
  if (*(_DWORD *)(result + 20))
  {
    v9 = (unsigned int *)result;
    for (i = 0; i < v9[5]; ++i)
    {
      *(_QWORD *)a2 = v4;
      v11 = *(const float **)(a3 + 16);
      v12 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v12)
        {
          result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360);
          if (result)
            goto LABEL_37;
        }
      }
      if (v12 >= 1)
      {
        v13 = v12 & 0x3FFFFFFFFFFFFFFFLL;
        v14 = (v12 & 0x3FFFFFFFFFFFFFFFLL) - ((v12 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v14 >= 0x10)
        {
          v16 = -4;
          if (!v13)
            v16 = 0;
          if (v4 >= (unint64_t)(v11 + 1)
            || (v17 = v4 + v16 + 4 * v12 + 4, v15 = (_DWORD *)v4, (unint64_t)v11 >= v17))
          {
            v15 = (_DWORD *)(v4 + 4 * (v14 & 0xFFFFFFFFFFFFFFF8));
            v13 -= v14 & 0xFFFFFFFFFFFFFFF8;
            v18 = vld1q_dup_f32(v11);
            v19 = (float32x4_t *)(v4 + 16);
            v20 = v14 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v19[-1] = v18;
              *v19 = v18;
              v19 += 2;
              v20 -= 8;
            }
            while (v20);
            if (v14 == (v14 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_3;
          }
        }
        else
        {
          v15 = (_DWORD *)v4;
        }
        v21 = v13 + 1;
        do
        {
          *v15++ = *(_DWORD *)v11;
          --v21;
        }
        while (v21 > 1);
      }
LABEL_3:
      v4 += 4 * v9[6];
    }
  }
  *(_QWORD *)a2 = v4;
  v22 = *(uint64_t **)(a3 + 8);
  v23 = *(const float **)(a3 + 16);
  v24 = *v22;
  if (!v4)
  {
    if (v24)
    {
      result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360);
      if (result)
LABEL_37:
        abort();
    }
  }
  if (v24 >= 1)
  {
    v25 = v24 & 0x3FFFFFFFFFFFFFFFLL;
    v26 = (v24 & 0x3FFFFFFFFFFFFFFFLL) - ((v24 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v26 < 0x10)
      goto LABEL_29;
    v27 = 4 * v24;
    if (!v25)
      v27 = 4;
    if (v4 < (unint64_t)(v23 + 1) && (unint64_t)v23 < v4 + v27)
    {
LABEL_29:
      v28 = (_DWORD *)v4;
LABEL_30:
      v29 = v25 + 1;
      do
      {
        *v28++ = *(_DWORD *)v23;
        --v29;
      }
      while (v29 > 1);
      return result;
    }
    v28 = (_DWORD *)(v4 + 4 * (v26 & 0xFFFFFFFFFFFFFFF8));
    v25 -= v26 & 0xFFFFFFFFFFFFFFF8;
    v30 = vld1q_dup_f32(v23);
    v31 = (float32x4_t *)(v4 + 16);
    v32 = v26 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v31[-1] = v30;
      *v31 = v30;
      v31 += 2;
      v32 -= 8;
    }
    while (v32);
    if (v26 != (v26 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
  return result;
}

uint64_t sub_20B280BB8(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  _QWORD v13[3];
  _DWORD v14[5];
  unsigned int v15;
  unsigned int v16;
  unint64_t v17[2];

  v12 = 0;
  v13[0] = &v12;
  v13[1] = &v11;
  v3 = *(unsigned int *)(result + 8);
  v2 = *(_DWORD *)(result + 12);
  v11 = v3;
  v13[2] = a2;
  v4 = *(_DWORD *)(result + 16);
  if ((_DWORD)v3)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v14[0] = 0;
    v14[1] = v3 - 1;
    v7 = *(_DWORD *)(result + 24);
    v14[2] = *(_DWORD *)(result + 20);
    v14[3] = v2 - 1;
    v8 = *(_DWORD *)(result + 28);
    v9 = *(_QWORD *)result;
    v17[0] = 0;
    v17[1] = 0;
    v14[4] = v7;
    v15 = v4 - 1;
    v16 = v8;
    if (v4 != 1)
    {
      v10 = 0;
      do
      {
        sub_20B280C78((uint64_t)v14, v17, (uint64_t)v13, v9);
        v9 += 4 * v16;
        ++v10;
      }
      while (v10 < v15);
    }
    return sub_20B280C78((uint64_t)v14, v17, (uint64_t)v13, v9);
  }
  return result;
}

uint64_t sub_20B280C78(uint64_t result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unsigned int i;
  const float *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  const float *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  float32x4_t v28;
  float32x4_t *v29;
  unint64_t v30;

  v4 = a4;
  *a2 = a4;
  if (*(_DWORD *)(result + 12))
  {
    v7 = result;
    for (i = 0; i < *(_DWORD *)(v7 + 12); ++i)
    {
      *a2 = v4;
      v9 = *(const float **)(a3 + 16);
      v10 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v10)
        {
          result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360);
          if ((_DWORD)result)
            goto LABEL_37;
        }
      }
      if (v10 >= 1)
      {
        v11 = v10 & 0x3FFFFFFFFFFFFFFFLL;
        v12 = (v10 & 0x3FFFFFFFFFFFFFFFLL) - ((v10 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v12 >= 0x10)
        {
          v14 = -4;
          if (!v11)
            v14 = 0;
          if (v4 >= (unint64_t)(v9 + 1)
            || (v15 = v4 + v14 + 4 * v10 + 4, v13 = (_DWORD *)v4, (unint64_t)v9 >= v15))
          {
            v13 = (_DWORD *)(v4 + 4 * (v12 & 0xFFFFFFFFFFFFFFF8));
            v11 -= v12 & 0xFFFFFFFFFFFFFFF8;
            v16 = vld1q_dup_f32(v9);
            v17 = (float32x4_t *)(v4 + 16);
            v18 = v12 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v17[-1] = v16;
              *v17 = v16;
              v17 += 2;
              v18 -= 8;
            }
            while (v18);
            if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_3;
          }
        }
        else
        {
          v13 = (_DWORD *)v4;
        }
        v19 = v11 + 1;
        do
        {
          *v13++ = *(_DWORD *)v9;
          --v19;
        }
        while (v19 > 1);
      }
LABEL_3:
      v4 += 4 * *(unsigned int *)(v7 + 16);
    }
  }
  *a2 = v4;
  v20 = *(uint64_t **)(a3 + 8);
  v21 = *(const float **)(a3 + 16);
  v22 = *v20;
  if (!v4)
  {
    if (v22)
    {
      result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5A99AE, 0, (void (*)(void **))sub_20B532360);
      if ((_DWORD)result)
LABEL_37:
        abort();
    }
  }
  if (v22 >= 1)
  {
    v23 = v22 & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (v22 & 0x3FFFFFFFFFFFFFFFLL) - ((v22 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v24 < 0x10)
      goto LABEL_29;
    v25 = 4 * v22;
    if (!v23)
      v25 = 4;
    if (v4 < (unint64_t)(v21 + 1) && (unint64_t)v21 < v4 + v25)
    {
LABEL_29:
      v26 = (_DWORD *)v4;
LABEL_30:
      v27 = v23 + 1;
      do
      {
        *v26++ = *(_DWORD *)v21;
        --v27;
      }
      while (v27 > 1);
      return result;
    }
    v26 = (_DWORD *)(v4 + 4 * (v24 & 0xFFFFFFFFFFFFFFF8));
    v23 -= v24 & 0xFFFFFFFFFFFFFFF8;
    v28 = vld1q_dup_f32(v21);
    v29 = (float32x4_t *)(v4 + 16);
    v30 = v24 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v29[-1] = v28;
      *v29 = v28;
      v29 += 2;
      v30 -= 8;
    }
    while (v30);
    if (v24 != (v24 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
  return result;
}

