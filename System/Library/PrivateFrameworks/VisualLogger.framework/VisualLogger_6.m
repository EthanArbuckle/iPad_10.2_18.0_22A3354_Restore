void sub_20B152800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B152814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B152828(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x27)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  v14 = *(_OWORD *)(v12 + 16);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v12 + 32);
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  v15 = result[7];
  v16 = result[6] + 40;
  result[6] = v16;
  v4 = v15 >= v16;
  v17 = v15 - v16;
  if (!v4)
    v17 = 0;
  if (v17 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(result[3] + v16);
  result[6] += 8;
  return result;
}

void sub_20B152974(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B152988(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B15299C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1529B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1529C4(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x27)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  v14 = *(_OWORD *)(v12 + 16);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v12 + 32);
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  v15 = result[7];
  v16 = result[6] + 40;
  result[6] = v16;
  v4 = v15 >= v16;
  v17 = v15 - v16;
  if (!v4)
    v17 = 0;
  if (v17 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(result[3] + v16);
  result[6] += 8;
  return result;
}

void sub_20B152B10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B152B24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B152B38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B152B4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B152B60(_QWORD *a1, int *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  int v8;
  int v9;
  uint64_t (*v10)(uint64_t, int *, _QWORD, void *, void *);
  int *v11;
  uint64_t (*v12)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, int *, _QWORD, void *, void *);
  int *v15;
  uint64_t (*v16)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v17;
  uint64_t (*v18)(uint64_t, int *, _QWORD, void *, void *);
  int *v19;
  uint64_t (*v20)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v21;
  uint64_t (*v22)(uint64_t, int *, _QWORD, void *, void *);
  int *v23;
  uint64_t (*v24)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v25;
  uint64_t (*v26)(uint64_t, int *, _QWORD, void *, void *);
  int *v27;
  uint64_t (*v28)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v29;
  uint64_t (*v30)(uint64_t, int *, _QWORD, void *, void *);
  int *v31;
  uint64_t (*v32)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v33;
  uint64_t (*v34)(uint64_t, int *, _QWORD, void *, void *);
  int *v35;
  uint64_t (*v36)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v37;
  uint64_t (*v38)(uint64_t, int *, _QWORD, void *, void *);
  int *v39;
  uint64_t (*v40)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v41;
  std::logic_error *exception;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_DWORD *)(a1[3] + v2);
  a1[6] = v2 + 4;
  *a2 = v8;
  sub_20B44354C((void (**)(int))a2);
  v9 = *a2;
  switch(v9)
  {
    case 0:
      v16 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v15 = a2 + 2;
      v14 = v16;
      if (!v16)
        goto LABEL_31;
      v17 = (_QWORD *)v14(3, v15, 0, &unk_24C40F5E8, &unk_20B5E8904);
      if (!v17)
        goto LABEL_31;
      sub_20B14F9D8((uint64_t)&v43, a1, v17);
      break;
    case 1:
      v20 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v19 = a2 + 2;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = (_QWORD *)v18(3, v19, 0, &unk_24C40F638, &unk_20B5E89D8);
      if (!v21)
        goto LABEL_31;
      sub_20B14FF68((uint64_t)&v44, a1, v21);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v24 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v23 = a2 + 2;
      v22 = v24;
      if (!v24)
        goto LABEL_31;
      v25 = (_QWORD *)v22(3, v23, 0, &unk_24C40F688, &unk_20B5E8AAC);
      if (!v25)
        goto LABEL_31;
      sub_20B15052C((uint64_t)&v45, a1, v25);
      break;
    case 11:
      v28 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v27 = a2 + 2;
      v26 = v28;
      if (!v28 || (v29 = (_QWORD *)v26(3, v27, 0, &unk_24C40F6D8, &unk_20B5E8B80)) == 0)
LABEL_31:
        sub_20B13DFF8();
      sub_20B150ABC((uint64_t)&v46, a1, v29);
      break;
    default:
      switch(v9)
      {
        case 'd':
          v12 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v11 = a2 + 2;
          v10 = v12;
          if (!v12)
            goto LABEL_31;
          v13 = v10(3, v11, 0, &unk_24C40F728, &unk_20B5E8C58);
          if (!v13)
            goto LABEL_31;
          sub_20B151080((uint64_t)&v47, a1, v13);
          break;
        case 'e':
          v32 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v31 = a2 + 2;
          v30 = v32;
          if (!v32)
            goto LABEL_31;
          v33 = v30(3, v31, 0, &unk_24C40F778, &unk_20B5E8D30);
          if (!v33)
            goto LABEL_31;
          sub_20B151700((uint64_t)&v48, a1, v33);
          break;
        case 'n':
          v36 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v35 = a2 + 2;
          v34 = v36;
          if (!v36)
            goto LABEL_31;
          v37 = v34(3, v35, 0, &unk_24C40F7C8, &unk_20B5E8E08);
          if (!v37)
            goto LABEL_31;
          sub_20B151DF0((uint64_t)&v49, a1, v37);
          break;
        case 'o':
          v40 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v39 = a2 + 2;
          v38 = v40;
          if (!v40)
            goto LABEL_31;
          v41 = v38(3, v39, 0, &unk_24C40F818, &unk_20B5E8EE0);
          if (!v41)
            goto LABEL_31;
          sub_20B152470((uint64_t)&v50, a1, v41);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20B152EA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B152EB8(int *a1, uint64_t a2, void (**a3)(int a1), unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20B152FE4();
      sub_20B520518((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_20B153590(a2, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
    sub_20B153394((uint64_t)&v13, a2, (uint64_t)a3);
  else
    sub_20B153590(a2, a3);
}

__int128 *sub_20B152FE4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635A78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635A78))
    return &xmmword_254635A60;
  v2 = sub_20B1530C0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254635A60, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254635A70 = v2->__r_.__value_.__r.__words[2];
    xmmword_254635A60 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635A60, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635A78);
  return &xmmword_254635A60;
}

void sub_20B1530A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635A78);
  _Unwind_Resume(a1);
}

std::string *sub_20B1530C0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635A98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635A98))
    return &stru_254635A80;
  sub_20B1531B0((uint64_t)__p);
  sub_20AF6D7B0((char *)__p, &stru_254635A80);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254635A80, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635A98);
  return &stru_254635A80;
}

void sub_20B153170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254635A98);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254635A98);
  _Unwind_Resume(a1);
}

void sub_20B1531B0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254635AB8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254635AB8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::CameraSample<>]", qword_254635AA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635AA0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635AB8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254635AD8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254635AD8))
  {
    v5 = sub_20AED4780(qword_254635AA0, "<", 0);
    sub_20AED467C(qword_254635AA0, 0, v5, qword_254635AC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635AC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635AD8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254635AF8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254635AF8))
  {
    sub_20B531658((uint64_t)qword_254635AC0, (uint64_t)&xmmword_254635AE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635AE0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635AF8);
  }
  if (byte_254635AF7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254635AE0, *((unint64_t *)&xmmword_254635AE0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254635AE0;
    *(_QWORD *)(a1 + 16) = unk_254635AF0;
  }
}

void sub_20B15334C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635AF8);
  _Unwind_Resume(a1);
}

void sub_20B153364(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635AD8);
  _Unwind_Resume(a1);
}

void sub_20B15337C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635AB8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B153394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *result;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  void (*v15)(uint64_t);
  std::__shared_weak_count *v16;
  void (*v17)(int);
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  sub_20B448738(&v14);
  sub_20B441634((uint64_t)&v17, (uint64_t)&v14);
  v14 = &off_24C41D808;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20B1590D8(a2, &v17);
  sub_20B442B90((int *)&v17, v12);
  sub_20B443C18((uint64_t)&v14, (uint64_t)v12);
  v12[0] = &off_24C41D808;
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)a3 = (_DWORD)v14;
  result = sub_20AFA2CC8((_QWORD *)(a3 + 8), &v15);
  if (v15)
    result = (_QWORD *)((uint64_t (*)(_QWORD, void (**)(uint64_t), _QWORD, _QWORD, _QWORD))v15)(0, &v15, 0, 0, 0);
  if (v18[0])
    return (_QWORD *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v18[0])(0, v18, 0, 0, 0);
  return result;
}

void sub_20B153518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B153590(uint64_t a1, void (**a2)(int a1))
{
  int v4;
  void (*v5)(int);
  int *v6;
  void (*v7)(int);
  uint64_t v8;
  uint64_t v9;
  int v10;
  void (*v11)(int);
  int *v12;
  void (*v13)(int);
  uint64_t v14;
  void (*v15)(int);
  int *v16;
  void (*v17)(int);
  _QWORD *v18;
  void (*v19)(int);
  int *v20;
  void (*v21)(int);
  uint64_t v22;
  void (*v23)(int);
  int *v24;
  void (*v25)(int);
  _QWORD *v26;
  void (*v27)(int);
  int *v28;
  void (*v29)(int);
  uint64_t v30;
  uint64_t v31;
  int v32;
  void (*v33)(int);
  int *v34;
  void (*v35)(int);
  uint64_t v36;
  uint64_t v37;
  int v38;
  void (*v39)(int);
  int *v40;
  void (*v41)(int);
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45[3];
  unsigned int v46;

  *(_QWORD *)v45 = a2;
  sub_20B153A1C((_BYTE *)a1, (_DWORD **)v45);
  sub_20B44502C(a2);
  v4 = *(_DWORD *)a2;
  switch(v4)
  {
    case 0:
      v13 = a2[1];
      v12 = (int *)(a2 + 1);
      v11 = v13;
      if (!v13)
        goto LABEL_36;
      v14 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v11)(3, v12, 0, &unk_24C40F5E8, &unk_20B5E8904);
      if (!v14)
        goto LABEL_36;
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_20B153BD0(v45, a1, v14);
      break;
    case 1:
      v17 = a2[1];
      v16 = (int *)(a2 + 1);
      v15 = v17;
      if (!v17)
        goto LABEL_36;
      v18 = (_QWORD *)((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v15)(3, v16, 0, &unk_24C40F638, &unk_20B5E89D8);
      if (!v18)
        goto LABEL_36;
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_20B1546E8(v45, a1, v18);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v21 = a2[1];
      v20 = (int *)(a2 + 1);
      v19 = v21;
      if (!v21)
        goto LABEL_36;
      v22 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v19)(3, v20, 0, &unk_24C40F688, &unk_20B5E8AAC);
      if (!v22)
        goto LABEL_36;
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_20B155234(v45, a1, v22);
      break;
    case 11:
      v25 = a2[1];
      v24 = (int *)(a2 + 1);
      v23 = v25;
      if (!v25
        || (v26 = (_QWORD *)((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v23)(3, v24, 0, &unk_24C40F6D8, &unk_20B5E8B80)) == 0)
      {
LABEL_36:
        sub_20B13DFF8();
      }
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_20B155D4C(v45, a1, v26);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = a2[1];
          v6 = (int *)(a2 + 1);
          v5 = v7;
          if (!v7)
            goto LABEL_36;
          v8 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v5)(3, v6, 0, &unk_24C40F728, &unk_20B5E8C58);
          if (!v8)
            goto LABEL_36;
          v9 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v10 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v9 + 104))(a1, &v46);
          if (v10 < 1)
            sub_20B156E10(a1, v8, v46);
          else
            sub_20B156898(v45, a1, v8, v46);
          break;
        case 'e':
          v29 = a2[1];
          v28 = (int *)(a2 + 1);
          v27 = v29;
          if (!v29)
            goto LABEL_36;
          v30 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v27)(3, v28, 0, &unk_24C40F778, &unk_20B5E8D30);
          if (!v30)
            goto LABEL_36;
          v31 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v32 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v31 + 104))(a1, &v46);
          if (v32 < 1)
            sub_20B1577E8(a1, v30, v46);
          else
            sub_20B157270(v45, a1, v30, v46);
          break;
        case 'n':
          v35 = a2[1];
          v34 = (int *)(a2 + 1);
          v33 = v35;
          if (!v35)
            goto LABEL_36;
          v36 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v33)(3, v34, 0, &unk_24C40F7C8, &unk_20B5E8E08);
          if (!v36)
            goto LABEL_36;
          v37 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v38 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v37 + 104))(a1, &v46);
          if (v38 < 1)
            sub_20B158230(a1, v36, v46);
          else
            sub_20B157CB8(v45, a1, v36, v46);
          break;
        case 'o':
          v41 = a2[1];
          v40 = (int *)(a2 + 1);
          v39 = v41;
          if (!v41)
            goto LABEL_36;
          v42 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v39)(3, v40, 0, &unk_24C40F818, &unk_20B5E8EE0);
          if (!v42)
            goto LABEL_36;
          v43 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v44 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v43 + 104))(a1, &v46);
          if (v44 < 1)
            sub_20B158C08(a1, v42, v46);
          else
            sub_20B158690(v45, a1, v42, v46);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20B153A1C(_BYTE *a1, _DWORD **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  int v14;
  uint64_t v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_20B52CF30(v5, v7);
    v15 = v6;
    v14 = 0;
    sub_20B4457D0((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v6 + 128);
    MEMORY[0x20BD3583C](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LODWORD(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 104))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_20B153B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_20B52CE84(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B153BD0(int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  char v7;

  v6 = 2;
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_20B15444C((uint64_t)&v7, a2, a3);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
    }
  }
  else
  {
    sub_20B153CF8(a1, a2, a3, v6);
  }
}

void sub_20B153CF8(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 *v12;
  unsigned int v13;
  char v14;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v13 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_20B153E78();
      sub_20B520518((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_20B15444C((uint64_t)&v14, a2, a3);
    return;
  }
  v9 = 0;
LABEL_13:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20B153E78()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635B18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635B18))
    return &xmmword_254635B00;
  v2 = sub_20B153F54();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254635B00, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254635B10 = v2->__r_.__value_.__r.__words[2];
    xmmword_254635B00 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635B00, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635B18);
  return &xmmword_254635B00;
}

void sub_20B153F3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635B18);
  _Unwind_Resume(a1);
}

std::string *sub_20B153F54()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635B38);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635B38))
    return &stru_254635B20;
  sub_20B154268((uint64_t)__p);
  sub_20B154044((char *)__p, &stru_254635B20);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254635B20, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635B38);
  return &stru_254635B20;
}

void sub_20B154004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254635B38);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254635B38);
  _Unwind_Resume(a1);
}

void sub_20B154044(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  __int128 v19;
  std::string::size_type v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v15 = *(_OWORD *)"float32";
  v16 = 0x700000000000000;
  v4 = sub_20AF57188();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&v17, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v18 = v4->__r_.__value_.__r.__words[2];
    v17 = v5;
  }
  v6 = sub_20AF6DABC();
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&v19, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v20 = v6->__r_.__value_.__r.__words[2];
    v19 = v7;
  }
  sub_20AEC7620(&__p, (uint64_t)v15, 3uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)v19);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        return;
LABEL_21:
      operator delete(v15[0]);
      return;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_21;
}

void sub_20B1541E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20AEC2E90(&a10);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a13);
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20B154240()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20B154238);
  }
}

void sub_20B154268(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254635B58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254635B58))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::PinholeCameraSample<float, cv3d::kit::cam::PixelOrigin::Center>]", qword_254635B40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635B40, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635B58);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254635B78);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254635B78))
  {
    v5 = sub_20AED4780(qword_254635B40, "<", 0);
    sub_20AED467C(qword_254635B40, 0, v5, qword_254635B60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635B60, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635B78);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254635B98);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254635B98))
  {
    sub_20B531658((uint64_t)qword_254635B60, (uint64_t)&xmmword_254635B80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635B80, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635B98);
  }
  if (byte_254635B97 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254635B80, *((unint64_t *)&xmmword_254635B80 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254635B80;
    *(_QWORD *)(a1 + 16) = unk_254635B90;
  }
}

void sub_20B154404(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635B98);
  _Unwind_Resume(a1);
}

void sub_20B15441C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635B78);
  _Unwind_Resume(a1);
}

void sub_20B154434(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635B58);
  _Unwind_Resume(a1);
}

void sub_20B15444C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D588;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5D38;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5C88;
  v36 = (int8x16_t *)(v5 + 24);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 128))(a2, &v33);
  (*(void (**)(uint64_t, __int32 *))(*(_QWORD *)a2 + 128))(a2, (__int32 *)&v33 + 1);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 128))(a2, &v34);
  (*(void (**)(uint64_t, __int32 *))(*(_QWORD *)a2 + 128))(a2, (__int32 *)&v34 + 1);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 104))(a2, &v35);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v35 + 4);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24C41D6C8;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24C3F5D38;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24C3F5C88;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20B1546C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1546D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1546E8(int *a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v6;
  char v7;

  v6 = 2;
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_20B154F64((uint64_t)&v7, a2, a3);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 1);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 2);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 3);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 104))(a2, a3 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 36);
    }
  }
  else
  {
    sub_20B154810(a1, a2, a3, v6);
  }
}

void sub_20B154810(int *a1, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 *v12;
  unsigned int v13;
  char v14;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v13 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_20B154990();
      sub_20B520518((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_20B154F64((uint64_t)&v14, a2, a3);
    return;
  }
  v9 = 0;
LABEL_13:
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 1);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 2);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 3);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 104))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 36);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20B154990()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635BB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635BB8))
    return &xmmword_254635BA0;
  v2 = sub_20B154A6C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254635BA0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254635BB0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254635BA0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635BA0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635BB8);
  return &xmmword_254635BA0;
}

void sub_20B154A54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635BB8);
  _Unwind_Resume(a1);
}

std::string *sub_20B154A6C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635BD8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635BD8))
    return &stru_254635BC0;
  sub_20B154D80((uint64_t)__p);
  sub_20B154B5C((char *)__p, &stru_254635BC0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254635BC0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635BD8);
  return &stru_254635BC0;
}

void sub_20B154B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254635BD8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254635BD8);
  _Unwind_Resume(a1);
}

void sub_20B154B5C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  __int128 v19;
  std::string::size_type v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v15 = *(_OWORD *)"float64";
  v16 = 0x700000000000000;
  v4 = sub_20AF57188();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&v17, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v18 = v4->__r_.__value_.__r.__words[2];
    v17 = v5;
  }
  v6 = sub_20AF6DABC();
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&v19, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v20 = v6->__r_.__value_.__r.__words[2];
    v19 = v7;
  }
  sub_20AEC7620(&__p, (uint64_t)v15, 3uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)v19);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        return;
LABEL_21:
      operator delete(v15[0]);
      return;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_21;
}

void sub_20B154CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20AEC2E90(&a10);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a13);
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20B154D58()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20B154D50);
  }
}

void sub_20B154D80(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254635BF8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254635BF8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::PinholeCameraSample<double, cv3d::kit::cam::PixelOrigin::Center>]", qword_254635BE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635BE0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635BF8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254635C18);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254635C18))
  {
    v5 = sub_20AED4780(qword_254635BE0, "<", 0);
    sub_20AED467C(qword_254635BE0, 0, v5, qword_254635C00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635C00, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635C18);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254635C38);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254635C38))
  {
    sub_20B531658((uint64_t)qword_254635C00, (uint64_t)&xmmword_254635C20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635C20, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635C38);
  }
  if (byte_254635C37 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254635C20, *((unint64_t *)&xmmword_254635C20 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254635C20;
    *(_QWORD *)(a1 + 16) = unk_254635C30;
  }
}

void sub_20B154F1C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635C38);
  _Unwind_Resume(a1);
}

void sub_20B154F34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635C18);
  _Unwind_Resume(a1);
}

void sub_20B154F4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635BF8);
  _Unwind_Resume(a1);
}

void sub_20B154F64(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D628;
  v36 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *(_OWORD *)(v5 + 56) = v36;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_QWORD *)v5 + 4) = &off_24C3F5508;
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F57F8;
  v34 = v5 + 24;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v31);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v31 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v32);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v32 + 8);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v33);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v33 + 4);
  v7 = v31;
  v8 = v32;
  v9 = 1.0 / *(double *)&v31;
  v10 = v33;
  v11 = v34;
  *((_OWORD *)v34 + 1) = v31;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((_QWORD *)v11 + 10) = v7;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 14) = *((_QWORD *)&v7 + 1);
  *((_QWORD *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((_QWORD *)v11 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 19) = v10;
  v12 = v34;
  v13 = v34 + 16;
  v14 = *((_QWORD *)v34 + 2);
  v15 = *((_QWORD *)v34 + 3);
  v16 = v34 + 32;
  v17 = *((_QWORD *)v34 + 4);
  v18 = *((_QWORD *)v34 + 5);
  v19 = *((_QWORD *)v34 + 19);
  v20 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = &off_24C41D768;
  *((_QWORD *)v20 + 4) = &off_24C3F5508;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  v22 = *((_OWORD *)v12 + 6);
  v23 = *((_OWORD *)v12 + 7);
  v24 = *((_OWORD *)v12 + 8);
  *((_QWORD *)v20 + 21) = *((_QWORD *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((_QWORD *)v20 + 22) = v19;
  *((_QWORD *)v20 + 3) = &off_24C3F57F8;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20B15520C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B155220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B155234(int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  char v7;

  v6 = 2;
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_20B155AB0((uint64_t)&v7, a2, a3);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
    }
  }
  else
  {
    sub_20B15535C(a1, a2, a3, v6);
  }
}

void sub_20B15535C(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 *v12;
  unsigned int v13;
  char v14;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v13 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_20B1554DC();
      sub_20B520518((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_20B155AB0((uint64_t)&v14, a2, a3);
    return;
  }
  v9 = 0;
LABEL_13:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20B1554DC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635C58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635C58))
    return &xmmword_254635C40;
  v2 = sub_20B1555B8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254635C40, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254635C50 = v2->__r_.__value_.__r.__words[2];
    xmmword_254635C40 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635C40, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635C58);
  return &xmmword_254635C40;
}

void sub_20B1555A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635C58);
  _Unwind_Resume(a1);
}

std::string *sub_20B1555B8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635C78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635C78))
    return &stru_254635C60;
  sub_20B1558CC((uint64_t)__p);
  sub_20B1556A8((char *)__p, &stru_254635C60);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254635C60, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635C78);
  return &stru_254635C60;
}

void sub_20B155668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254635C78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254635C78);
  _Unwind_Resume(a1);
}

void sub_20B1556A8(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  __int128 v19;
  std::string::size_type v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v15 = *(_OWORD *)"float32";
  v16 = 0x700000000000000;
  v4 = sub_20AF55144();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&v17, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v18 = v4->__r_.__value_.__r.__words[2];
    v17 = v5;
  }
  v6 = sub_20AF6DABC();
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&v19, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v20 = v6->__r_.__value_.__r.__words[2];
    v19 = v7;
  }
  sub_20AEC7620(&__p, (uint64_t)v15, 3uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)v19);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        return;
LABEL_21:
      operator delete(v15[0]);
      return;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_21;
}

void sub_20B155844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20AEC2E90(&a10);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a13);
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20B1558A4()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20B15589CLL);
  }
}

void sub_20B1558CC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254635C98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254635C98))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::PinholeCameraSample<float, cv3d::kit::cam::PixelOrigin::Corner>]", qword_254635C80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635C80, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635C98);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254635CB8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254635CB8))
  {
    v5 = sub_20AED4780(qword_254635C80, "<", 0);
    sub_20AED467C(qword_254635C80, 0, v5, qword_254635CA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635CA0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635CB8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254635CD8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254635CD8))
  {
    sub_20B531658((uint64_t)qword_254635CA0, (uint64_t)&xmmword_254635CC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635CC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635CD8);
  }
  if (byte_254635CD7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254635CC0, *((unint64_t *)&xmmword_254635CC0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254635CC0;
    *(_QWORD *)(a1 + 16) = unk_254635CD0;
  }
}

void sub_20B155A68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635CD8);
  _Unwind_Resume(a1);
}

void sub_20B155A80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635CB8);
  _Unwind_Resume(a1);
}

void sub_20B155A98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635C98);
  _Unwind_Resume(a1);
}

void sub_20B155AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D5D8;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5D38;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5998;
  v36 = (int8x16_t *)(v5 + 24);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 128))(a2, &v33);
  (*(void (**)(uint64_t, __int32 *))(*(_QWORD *)a2 + 128))(a2, (__int32 *)&v33 + 1);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 128))(a2, &v34);
  (*(void (**)(uint64_t, __int32 *))(*(_QWORD *)a2 + 128))(a2, (__int32 *)&v34 + 1);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 104))(a2, &v35);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v35 + 4);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24C41D718;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24C3F5D38;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24C3F5998;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20B155D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B155D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B416820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B155D4C(int *a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v6;
  char v7;

  v6 = 2;
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_20B1565C8((uint64_t)&v7, a2, a3);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 1);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 2);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 3);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 104))(a2, a3 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 36);
    }
  }
  else
  {
    sub_20B155E74(a1, a2, a3, v6);
  }
}

void sub_20B155E74(int *a1, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 *v12;
  unsigned int v13;
  char v14;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v13 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_20B155FF4();
      sub_20B520518((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_20B1565C8((uint64_t)&v14, a2, a3);
    return;
  }
  v9 = 0;
LABEL_13:
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 1);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 2);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 3);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 104))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 36);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20B155FF4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635CF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635CF8))
    return &xmmword_254635CE0;
  v2 = sub_20B1560D0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254635CE0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254635CF0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254635CE0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635CE0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635CF8);
  return &xmmword_254635CE0;
}

void sub_20B1560B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635CF8);
  _Unwind_Resume(a1);
}

std::string *sub_20B1560D0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635D18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635D18))
    return &stru_254635D00;
  sub_20B1563E4((uint64_t)__p);
  sub_20B1561C0((char *)__p, &stru_254635D00);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254635D00, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635D18);
  return &stru_254635D00;
}

void sub_20B156180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254635D18);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254635D18);
  _Unwind_Resume(a1);
}

void sub_20B1561C0(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  __int128 v19;
  std::string::size_type v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v15 = *(_OWORD *)"float64";
  v16 = 0x700000000000000;
  v4 = sub_20AF55144();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&v17, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v18 = v4->__r_.__value_.__r.__words[2];
    v17 = v5;
  }
  v6 = sub_20AF6DABC();
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&v19, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v20 = v6->__r_.__value_.__r.__words[2];
    v19 = v7;
  }
  sub_20AEC7620(&__p, (uint64_t)v15, 3uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)v19);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        return;
LABEL_21:
      operator delete(v15[0]);
      return;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_21;
}

void sub_20B15635C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20AEC2E90(&a10);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a13);
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20B1563BC()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20B1563B4);
  }
}

void sub_20B1563E4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254635D38);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254635D38))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::PinholeCameraSample<double, cv3d::kit::cam::PixelOrigin::Corner>]", qword_254635D20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635D20, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635D38);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254635D58);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254635D58))
  {
    v5 = sub_20AED4780(qword_254635D20, "<", 0);
    sub_20AED467C(qword_254635D20, 0, v5, qword_254635D40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635D40, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635D58);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254635D78);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254635D78))
  {
    sub_20B531658((uint64_t)qword_254635D40, (uint64_t)&xmmword_254635D60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635D60, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635D78);
  }
  if (byte_254635D77 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254635D60, *((unint64_t *)&xmmword_254635D60 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254635D60;
    *(_QWORD *)(a1 + 16) = unk_254635D70;
  }
}

void sub_20B156580(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635D78);
  _Unwind_Resume(a1);
}

void sub_20B156598(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635D58);
  _Unwind_Resume(a1);
}

void sub_20B1565B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635D38);
  _Unwind_Resume(a1);
}

void sub_20B1565C8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D678;
  v36 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *(_OWORD *)(v5 + 56) = v36;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_QWORD *)v5 + 4) = &off_24C3F5508;
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F55F8;
  v34 = v5 + 24;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v31);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v31 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v32);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v32 + 8);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v33);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v33 + 4);
  v7 = v31;
  v8 = v32;
  v9 = 1.0 / *(double *)&v31;
  v10 = v33;
  v11 = v34;
  *((_OWORD *)v34 + 1) = v31;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((_QWORD *)v11 + 10) = v7;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 14) = *((_QWORD *)&v7 + 1);
  *((_QWORD *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((_QWORD *)v11 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 19) = v10;
  v12 = v34;
  v13 = v34 + 16;
  v14 = *((_QWORD *)v34 + 2);
  v15 = *((_QWORD *)v34 + 3);
  v16 = v34 + 32;
  v17 = *((_QWORD *)v34 + 4);
  v18 = *((_QWORD *)v34 + 5);
  v19 = *((_QWORD *)v34 + 19);
  v20 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = &off_24C41D7B8;
  *((_QWORD *)v20 + 4) = &off_24C3F5508;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  v22 = *((_OWORD *)v12 + 6);
  v23 = *((_OWORD *)v12 + 7);
  v24 = *((_OWORD *)v12 + 8);
  *((_QWORD *)v20 + 21) = *((_QWORD *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((_QWORD *)v20 + 22) = v19;
  *((_QWORD *)v20 + 3) = &off_24C3F55F8;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20B156870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B156884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447E60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B156898(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20B156A60();
      sub_20B520518((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 28);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 36);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 40);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  sub_20B156E10(a2, a3, v9);
}

__int128 *sub_20B156A60()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635D98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635D98))
    return &xmmword_254635D80;
  v2 = sub_20B156B3C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254635D80, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254635D90 = v2->__r_.__value_.__r.__words[2];
    xmmword_254635D80 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635D80, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635D98);
  return &xmmword_254635D80;
}

void sub_20B156B24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635D98);
  _Unwind_Resume(a1);
}

std::string *sub_20B156B3C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635DB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635DB8))
    return &stru_254635DA0;
  sub_20B156C2C((uint64_t)__p);
  sub_20B154044((char *)__p, &stru_254635DA0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254635DA0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635DB8);
  return &stru_254635DA0;
}

void sub_20B156BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254635DB8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254635DB8);
  _Unwind_Resume(a1);
}

void sub_20B156C2C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254635DD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254635DD8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::HeikkilaCameraSample<float, cv3d::kit::cam::PixelOrigin::Center>]", qword_254635DC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635DC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635DD8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254635DF8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254635DF8))
  {
    v5 = sub_20AED4780(qword_254635DC0, "<", 0);
    sub_20AED467C(qword_254635DC0, 0, v5, qword_254635DE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635DE0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635DF8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254635E18);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254635E18))
  {
    sub_20B531658((uint64_t)qword_254635DE0, (uint64_t)&xmmword_254635E00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635E00, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635E18);
  }
  if (byte_254635E17 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254635E00, *((unint64_t *)&xmmword_254635E00 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254635E00;
    *(_QWORD *)(a1 + 16) = unk_254635E10;
  }
}

void sub_20B156DC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635E18);
  _Unwind_Resume(a1);
}

void sub_20B156DE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635DF8);
  _Unwind_Resume(a1);
}

void sub_20B156DF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635DD8);
  _Unwind_Resume(a1);
}

void sub_20B156E10(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v5;

  if (a3 < 2)
  {
    sub_20B156F3C((uint64_t)&v5, a1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 28);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 36);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 40);
  }
}

void sub_20B156F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  _DWORD v25[8];
  char *v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v24 = 0u;
  memset(v25, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D2C0;
  v29 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5A28;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v29;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v27 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5B58;
  v26 = v5 + 24;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 128))(a2, &v24);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 128))(a2, (char *)&v24 + 4);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 128))(a2, (char *)&v24 + 8);
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 128))(a2, (unint64_t)&v24 | 0xC);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, v25);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[1]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[2]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[3]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[4]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 104))(a2, &v25[5]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 104))(a2, &v25[6]);
  v7 = sub_20B446E78((uint64_t)&v24);
  v23 = *(_OWORD *)(v7 + 16);
  v28 = *(_OWORD *)(v7 + 32);
  LODWORD(v29) = *(_DWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 120);
  v9 = (char *)operator new(0x98uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24C41D400;
  v10 = *(_QWORD *)(v7 + 52);
  v11 = *(_WORD *)(v7 + 112);
  v12 = *(_OWORD *)(v7 + 16);
  *((_QWORD *)v9 + 4) = &off_24C3F5A28;
  *(_OWORD *)(v9 + 40) = v12;
  v13 = *(_OWORD *)(v7 + 32);
  *((_DWORD *)v9 + 18) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 76) = v10;
  *(_OWORD *)(v9 + 84) = *(_OWORD *)(v7 + 60);
  v14 = *(_OWORD *)(v7 + 76);
  v15 = *(_OWORD *)(v7 + 92);
  *((_DWORD *)v9 + 33) = *(_DWORD *)(v7 + 108);
  *(_OWORD *)(v9 + 116) = v15;
  *(_OWORD *)(v9 + 100) = v14;
  *((_WORD *)v9 + 68) = v11;
  *((_QWORD *)v9 + 18) = v8;
  *((_QWORD *)v9 + 3) = &off_24C3F5B58;
  v16 = v28;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = v29;
  *(_QWORD *)(a3 + 36) = v8;
  v17 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v9 + 24;
  *(_QWORD *)(a3 + 56) = v9;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_20B157248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15725C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B157270(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20B157438();
      sub_20B520518((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 64);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 76);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  sub_20B1577E8(a2, a3, v9);
}

__int128 *sub_20B157438()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635E38);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635E38))
    return &xmmword_254635E20;
  v2 = sub_20B157514();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254635E20, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254635E30 = v2->__r_.__value_.__r.__words[2];
    xmmword_254635E20 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635E20, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635E38);
  return &xmmword_254635E20;
}

void sub_20B1574FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635E38);
  _Unwind_Resume(a1);
}

std::string *sub_20B157514()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635E58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635E58))
    return &stru_254635E40;
  sub_20B157604((uint64_t)__p);
  sub_20B154B5C((char *)__p, &stru_254635E40);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254635E40, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635E58);
  return &stru_254635E40;
}

void sub_20B1575C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254635E58);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254635E58);
  _Unwind_Resume(a1);
}

void sub_20B157604(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254635E78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254635E78))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::HeikkilaCameraSample<double, cv3d::kit::cam::PixelOrigin::Center>]", qword_254635E60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635E60, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635E78);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254635E98);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254635E98))
  {
    v5 = sub_20AED4780(qword_254635E60, "<", 0);
    sub_20AED467C(qword_254635E60, 0, v5, qword_254635E80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635E80, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635E98);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254635EB8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254635EB8))
  {
    sub_20B531658((uint64_t)qword_254635E80, (uint64_t)&xmmword_254635EA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635EA0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635EB8);
  }
  if (byte_254635EB7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254635EA0, *((unint64_t *)&xmmword_254635EA0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254635EA0;
    *(_QWORD *)(a1 + 16) = unk_254635EB0;
  }
}

void sub_20B1577A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635EB8);
  _Unwind_Resume(a1);
}

void sub_20B1577B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635E98);
  _Unwind_Resume(a1);
}

void sub_20B1577D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635E78);
  _Unwind_Resume(a1);
}

void sub_20B1577E8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v5;

  if (a3 < 2)
  {
    sub_20B157914((uint64_t)&v5, a1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 64);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 76);
  }
}

void sub_20B157914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D360;
  v41 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v40;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  *((_DWORD *)v5 + 30) = 10;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v36 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F58C8;
  v35 = v5 + 24;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v30);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v30 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v31);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v31 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v32);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v32 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v33);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v33 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v34);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v34 + 8);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v34 + 12);
  v7 = sub_20B446FA0((uint64_t)&v30);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v7 + 40);
  v12 = *(_OWORD *)(v7 + 64);
  v37 = *(_OWORD *)(v7 + 48);
  v38 = v12;
  *(_QWORD *)&v39 = *(_QWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 216);
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_24C41D4A0;
  v15 = *(_WORD *)(v7 + 208);
  *((_QWORD *)v14 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v7 + 32);
  v16 = *(_OWORD *)(v7 + 48);
  v17 = *(_OWORD *)(v7 + 64);
  *((_QWORD *)v14 + 13) = *(_QWORD *)(v7 + 80);
  *(_OWORD *)(v14 + 88) = v17;
  *(_OWORD *)(v14 + 72) = v16;
  v18 = *(_QWORD *)(v7 + 88);
  *((_DWORD *)v14 + 30) = *(_DWORD *)(v7 + 96);
  *((_QWORD *)v14 + 14) = v18;
  v19 = *(_OWORD *)(v7 + 120);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(v7 + 104);
  *((_OWORD *)v14 + 9) = v19;
  v20 = *(_OWORD *)(v7 + 152);
  v21 = *(_OWORD *)(v7 + 168);
  v22 = *(_OWORD *)(v7 + 184);
  *((_QWORD *)v14 + 28) = *(_QWORD *)(v7 + 200);
  *((_OWORD *)v14 + 12) = v21;
  *((_OWORD *)v14 + 13) = v22;
  *((_OWORD *)v14 + 11) = v20;
  *((_OWORD *)v14 + 10) = *(_OWORD *)(v7 + 136);
  *((_WORD *)v14 + 116) = v15;
  *((_QWORD *)v14 + 30) = v13;
  *((_QWORD *)v14 + 3) = &off_24C3F58C8;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v11;
  v23 = v38;
  *(_OWORD *)(a3 + 32) = v37;
  *(_OWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 64) = v39;
  *(_QWORD *)(a3 + 72) = v13;
  v24 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v14 + 24;
  *(_QWORD *)(a3 + 88) = v14;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v36;
  if (v36)
  {
    v28 = (unint64_t *)&v36->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_20B157C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B157CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B157CB8(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20B157E80();
      sub_20B520518((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 28);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 36);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 40);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  sub_20B158230(a2, a3, v9);
}

__int128 *sub_20B157E80()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635ED8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635ED8))
    return &xmmword_254635EC0;
  v2 = sub_20B157F5C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254635EC0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254635ED0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254635EC0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635EC0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635ED8);
  return &xmmword_254635EC0;
}

void sub_20B157F44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635ED8);
  _Unwind_Resume(a1);
}

std::string *sub_20B157F5C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635EF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635EF8))
    return &stru_254635EE0;
  sub_20B15804C((uint64_t)__p);
  sub_20B1556A8((char *)__p, &stru_254635EE0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254635EE0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635EF8);
  return &stru_254635EE0;
}

void sub_20B15800C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254635EF8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254635EF8);
  _Unwind_Resume(a1);
}

void sub_20B15804C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254635F18);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254635F18))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::HeikkilaCameraSample<float, cv3d::kit::cam::PixelOrigin::Corner>]", qword_254635F00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635F00, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635F18);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254635F38);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254635F38))
  {
    v5 = sub_20AED4780(qword_254635F00, "<", 0);
    sub_20AED467C(qword_254635F00, 0, v5, qword_254635F20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635F20, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635F38);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254635F58);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254635F58))
  {
    sub_20B531658((uint64_t)qword_254635F20, (uint64_t)&xmmword_254635F40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635F40, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635F58);
  }
  if (byte_254635F57 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254635F40, *((unint64_t *)&xmmword_254635F40 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254635F40;
    *(_QWORD *)(a1 + 16) = unk_254635F50;
  }
}

void sub_20B1581E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635F58);
  _Unwind_Resume(a1);
}

void sub_20B158200(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635F38);
  _Unwind_Resume(a1);
}

void sub_20B158218(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635F18);
  _Unwind_Resume(a1);
}

void sub_20B158230(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v5;

  if (a3 < 2)
  {
    sub_20B15835C((uint64_t)&v5, a1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 28);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 36);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 40);
  }
}

void sub_20B15835C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  _DWORD v25[8];
  char *v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v24 = 0u;
  memset(v25, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D310;
  v29 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F5A28;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v29;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v27 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5A88;
  v26 = v5 + 24;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 128))(a2, &v24);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 128))(a2, (char *)&v24 + 4);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 128))(a2, (char *)&v24 + 8);
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 128))(a2, (unint64_t)&v24 | 0xC);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, v25);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[1]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[2]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[3]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[4]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 104))(a2, &v25[5]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 104))(a2, &v25[6]);
  v7 = sub_20B446E78((uint64_t)&v24);
  v23 = *(_OWORD *)(v7 + 16);
  v28 = *(_OWORD *)(v7 + 32);
  LODWORD(v29) = *(_DWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 120);
  v9 = (char *)operator new(0x98uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24C41D450;
  v10 = *(_QWORD *)(v7 + 52);
  v11 = *(_WORD *)(v7 + 112);
  v12 = *(_OWORD *)(v7 + 16);
  *((_QWORD *)v9 + 4) = &off_24C3F5A28;
  *(_OWORD *)(v9 + 40) = v12;
  v13 = *(_OWORD *)(v7 + 32);
  *((_DWORD *)v9 + 18) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 76) = v10;
  *(_OWORD *)(v9 + 84) = *(_OWORD *)(v7 + 60);
  v14 = *(_OWORD *)(v7 + 76);
  v15 = *(_OWORD *)(v7 + 92);
  *((_DWORD *)v9 + 33) = *(_DWORD *)(v7 + 108);
  *(_OWORD *)(v9 + 116) = v15;
  *(_OWORD *)(v9 + 100) = v14;
  *((_WORD *)v9 + 68) = v11;
  *((_QWORD *)v9 + 18) = v8;
  *((_QWORD *)v9 + 3) = &off_24C3F5A88;
  v16 = v28;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = v29;
  *(_QWORD *)(a3 + 36) = v8;
  v17 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v9 + 24;
  *(_QWORD *)(a3 + 56) = v9;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_20B158668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15867C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B446F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B158690(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20B158858();
      sub_20B520518((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 64);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 76);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  sub_20B158C08(a2, a3, v9);
}

__int128 *sub_20B158858()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635F78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635F78))
    return &xmmword_254635F60;
  v2 = sub_20B158934();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254635F60, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254635F70 = v2->__r_.__value_.__r.__words[2];
    xmmword_254635F60 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635F60, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635F78);
  return &xmmword_254635F60;
}

void sub_20B15891C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635F78);
  _Unwind_Resume(a1);
}

std::string *sub_20B158934()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635F98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635F98))
    return &stru_254635F80;
  sub_20B158A24((uint64_t)__p);
  sub_20B1561C0((char *)__p, &stru_254635F80);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254635F80, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635F98);
  return &stru_254635F80;
}

void sub_20B1589E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254635F98);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254635F98);
  _Unwind_Resume(a1);
}

void sub_20B158A24(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254635FB8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254635FB8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::HeikkilaCameraSample<double, cv3d::kit::cam::PixelOrigin::Corner>]", qword_254635FA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635FA0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635FB8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254635FD8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254635FD8))
  {
    v5 = sub_20AED4780(qword_254635FA0, "<", 0);
    sub_20AED467C(qword_254635FA0, 0, v5, qword_254635FC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635FC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635FD8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254635FF8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254635FF8))
  {
    sub_20B531658((uint64_t)qword_254635FC0, (uint64_t)&xmmword_254635FE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635FE0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635FF8);
  }
  if (byte_254635FF7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254635FE0, *((unint64_t *)&xmmword_254635FE0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254635FE0;
    *(_QWORD *)(a1 + 16) = unk_254635FF0;
  }
}

void sub_20B158BC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635FF8);
  _Unwind_Resume(a1);
}

void sub_20B158BD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635FD8);
  _Unwind_Resume(a1);
}

void sub_20B158BF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635FB8);
  _Unwind_Resume(a1);
}

void sub_20B158C08(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v5;

  if (a3 < 2)
  {
    sub_20B158D34((uint64_t)&v5, a1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 64);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 76);
  }
}

void sub_20B158D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24C41D3B0;
  v41 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v40;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  *((_DWORD *)v5 + 30) = 10;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v36 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C3F5728;
  v35 = v5 + 24;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v30);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v30 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v31);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v31 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v32);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v32 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v33);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v33 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v34);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v34 + 8);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v34 + 12);
  v7 = sub_20B446FA0((uint64_t)&v30);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v7 + 40);
  v12 = *(_OWORD *)(v7 + 64);
  v37 = *(_OWORD *)(v7 + 48);
  v38 = v12;
  *(_QWORD *)&v39 = *(_QWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 216);
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_24C41D4F0;
  v15 = *(_WORD *)(v7 + 208);
  *((_QWORD *)v14 + 4) = &off_24C3F56C8;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v7 + 32);
  v16 = *(_OWORD *)(v7 + 48);
  v17 = *(_OWORD *)(v7 + 64);
  *((_QWORD *)v14 + 13) = *(_QWORD *)(v7 + 80);
  *(_OWORD *)(v14 + 88) = v17;
  *(_OWORD *)(v14 + 72) = v16;
  v18 = *(_QWORD *)(v7 + 88);
  *((_DWORD *)v14 + 30) = *(_DWORD *)(v7 + 96);
  *((_QWORD *)v14 + 14) = v18;
  v19 = *(_OWORD *)(v7 + 120);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(v7 + 104);
  *((_OWORD *)v14 + 9) = v19;
  v20 = *(_OWORD *)(v7 + 152);
  v21 = *(_OWORD *)(v7 + 168);
  v22 = *(_OWORD *)(v7 + 184);
  *((_QWORD *)v14 + 28) = *(_QWORD *)(v7 + 200);
  *((_OWORD *)v14 + 12) = v21;
  *((_OWORD *)v14 + 13) = v22;
  *((_OWORD *)v14 + 11) = v20;
  *((_OWORD *)v14 + 10) = *(_OWORD *)(v7 + 136);
  *((_WORD *)v14 + 116) = v15;
  *((_QWORD *)v14 + 30) = v13;
  *((_QWORD *)v14 + 3) = &off_24C3F5728;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v11;
  v23 = v38;
  *(_OWORD *)(a3 + 32) = v37;
  *(_OWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 64) = v39;
  *(_QWORD *)(a3 + 72) = v13;
  v24 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v14 + 24;
  *(_QWORD *)(a3 + 88) = v14;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v36;
  if (v36)
  {
    v28 = (unint64_t *)&v36->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_20B1590B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1590C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B447098((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1590D8(uint64_t a1, void (**a2)(int a1))
{
  int v4;
  void (*v5)(int);
  int *v6;
  void (*v7)(int);
  uint64_t v8;
  uint64_t v9;
  int v10;
  void (*v11)(int);
  int *v12;
  void (*v13)(int);
  uint64_t v14;
  void (*v15)(int);
  int *v16;
  void (*v17)(int);
  _QWORD *v18;
  void (*v19)(int);
  int *v20;
  void (*v21)(int);
  uint64_t v22;
  void (*v23)(int);
  int *v24;
  void (*v25)(int);
  _QWORD *v26;
  void (*v27)(int);
  int *v28;
  void (*v29)(int);
  uint64_t v30;
  uint64_t v31;
  int v32;
  void (*v33)(int);
  int *v34;
  void (*v35)(int);
  uint64_t v36;
  uint64_t v37;
  int v38;
  void (*v39)(int);
  int *v40;
  void (*v41)(int);
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45[3];
  unsigned int v46;

  *(_QWORD *)v45 = a2;
  sub_20B153A1C((_BYTE *)a1, (_DWORD **)v45);
  sub_20B44354C(a2);
  v4 = *(_DWORD *)a2;
  switch(v4)
  {
    case 0:
      v13 = a2[1];
      v12 = (int *)(a2 + 1);
      v11 = v13;
      if (!v13)
        goto LABEL_36;
      v14 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v11)(3, v12, 0, &unk_24C40F5E8, &unk_20B5E8904);
      if (!v14)
        goto LABEL_36;
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_20B153BD0(v45, a1, v14);
      break;
    case 1:
      v17 = a2[1];
      v16 = (int *)(a2 + 1);
      v15 = v17;
      if (!v17)
        goto LABEL_36;
      v18 = (_QWORD *)((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v15)(3, v16, 0, &unk_24C40F638, &unk_20B5E89D8);
      if (!v18)
        goto LABEL_36;
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_20B1546E8(v45, a1, v18);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v21 = a2[1];
      v20 = (int *)(a2 + 1);
      v19 = v21;
      if (!v21)
        goto LABEL_36;
      v22 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v19)(3, v20, 0, &unk_24C40F688, &unk_20B5E8AAC);
      if (!v22)
        goto LABEL_36;
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_20B155234(v45, a1, v22);
      break;
    case 11:
      v25 = a2[1];
      v24 = (int *)(a2 + 1);
      v23 = v25;
      if (!v25
        || (v26 = (_QWORD *)((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v23)(3, v24, 0, &unk_24C40F6D8, &unk_20B5E8B80)) == 0)
      {
LABEL_36:
        sub_20B13DFF8();
      }
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_20B155D4C(v45, a1, v26);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = a2[1];
          v6 = (int *)(a2 + 1);
          v5 = v7;
          if (!v7)
            goto LABEL_36;
          v8 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v5)(3, v6, 0, &unk_24C40F728, &unk_20B5E8C58);
          if (!v8)
            goto LABEL_36;
          v9 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v10 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v9 + 104))(a1, &v46);
          if (v10 < 1)
            sub_20B156E10(a1, v8, v46);
          else
            sub_20B156898(v45, a1, v8, v46);
          break;
        case 'e':
          v29 = a2[1];
          v28 = (int *)(a2 + 1);
          v27 = v29;
          if (!v29)
            goto LABEL_36;
          v30 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v27)(3, v28, 0, &unk_24C40F778, &unk_20B5E8D30);
          if (!v30)
            goto LABEL_36;
          v31 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v32 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v31 + 104))(a1, &v46);
          if (v32 < 1)
            sub_20B1577E8(a1, v30, v46);
          else
            sub_20B157270(v45, a1, v30, v46);
          break;
        case 'n':
          v35 = a2[1];
          v34 = (int *)(a2 + 1);
          v33 = v35;
          if (!v35)
            goto LABEL_36;
          v36 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v33)(3, v34, 0, &unk_24C40F7C8, &unk_20B5E8E08);
          if (!v36)
            goto LABEL_36;
          v37 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v38 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v37 + 104))(a1, &v46);
          if (v38 < 1)
            sub_20B158230(a1, v36, v46);
          else
            sub_20B157CB8(v45, a1, v36, v46);
          break;
        case 'o':
          v41 = a2[1];
          v40 = (int *)(a2 + 1);
          v39 = v41;
          if (!v41)
            goto LABEL_36;
          v42 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v39)(3, v40, 0, &unk_24C40F818, &unk_20B5E8EE0);
          if (!v42)
            goto LABEL_36;
          v43 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v44 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v43 + 104))(a1, &v46);
          if (v44 < 1)
            sub_20B158C08(a1, v42, v46);
          else
            sub_20B158690(v45, a1, v42, v46);
          break;
        default:
          return;
      }
      break;
  }
}

_QWORD *sub_20B159564@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24C3FA938;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(v4 + 72) = 1;
  }
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
  *(_BYTE *)(v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    *(_OWORD *)(v4 + 144) = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v6 = (unsigned __int128 *)(a1 + 176);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 176) = v7;
    *(_BYTE *)(v4 + 192) = 1;
  }
  *(_BYTE *)(v4 + 208) = 0;
  *(_BYTE *)(v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    *(_OWORD *)(v4 + 208) = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(v4 + 224) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_BYTE *)(v4 + 232) = 1;
  }
  *(_QWORD *)v4 = &off_24C40D700;
  *a2 = &off_24C411E78;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24C411F70;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20B159708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20AF77C10((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_20B15972C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;

  sub_20B50671C(a2);
  v14 = "version";
  v15 = 7;
  v16 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5086B4(a2, &v16);
  v6 = v16;
  v7 = *(_QWORD *)(a3 + 8);
  v14 = *(const char **)a3;
  v15 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20B159874(a2, &v14, v6);
  v10 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v11 = (unint64_t *)(v15 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 56) = v13 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B159830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B159874(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  int v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *v21;

  if (a3 > 2)
  {
    v11 = *a2;
    v12 = (unint64_t *)(*a2 + 88);
    v19 = *a2;
    v13 = atomic_load(v12);
    if (v13 != -1)
    {
      v21 = &v19;
      v20 = &v21;
      std::__call_once(v12, &v20, (void (__cdecl *)(void *))sub_20B417E0C);
    }
    sub_20B450618(&v17, v11 + 48);
    sub_20B159A1C(a1, (uint64_t)&v17);
    v14 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v4 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "dictionary";
      *(_QWORD *)(a1 + 80) = 10;
      if (!v4)
        *(_BYTE *)(a1 + 88) = 1;
    }
    v5 = *a2;
    v6 = (unint64_t *)(*a2 + 80);
    v17 = *a2;
    v18 = (std::__shared_weak_count *)&v19;
    v19 = 0;
    v7 = atomic_load(v6);
    if (v7 != -1)
    {
      v21 = &v17;
      v20 = &v21;
      std::__call_once(v6, &v20, (void (__cdecl *)(void *))sub_20B417AF0);
    }
    sub_20B4541AC((uint64_t)&v17, *(unsigned __int8 **)(v5 + 16));
    v8 = (unsigned __int8 *)sub_20B506370(a1);
    v9 = *v8;
    *v8 = v17;
    LOBYTE(v17) = v9;
    v10 = (void **)*((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v18;
    v18 = (std::__shared_weak_count *)v10;
    sub_20B4181DC((void ***)&v18, v9);
  }
}

void sub_20B1599F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B159A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v10;

  sub_20B4181DC((void ***)(v10 + 8), a10);
  _Unwind_Resume(a1);
}

void sub_20B159A1C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  void **v7;
  void ***v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  void **v16;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v3 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "dictionary";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v3)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20AEEC2D8(&v12, a2);
  sub_20B44F420((uint64_t)&v12, (uint64_t *)&v14);
  v4 = (uint64_t)v14;
  v15 = *v14;
  v16 = (void **)*((_QWORD *)v14 + 1);
  *v14 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unsigned __int8 *)sub_20B506370(a1);
  v6 = *v5;
  *v5 = v15;
  v15 = v6;
  v7 = (void **)*((_QWORD *)v5 + 1);
  *((_QWORD *)v5 + 1) = v16;
  v16 = v7;
  sub_20B4181DC(&v16, v6);
  v8 = (void ***)v14;
  v14 = 0;
  if (v8)
  {
    sub_20B4181DC(v8 + 1, *(unsigned __int8 *)v8);
    MEMORY[0x20BD3583C](v8, 0x1022C40B06DCE69);
  }
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B159B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void ***a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20B4181DC(v13, a13);
  sub_20B4F9938(&a12);
  sub_20AEC147C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20B159B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B159B8C(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v16 = v4;
  v7 = atomic_load((unint64_t *)(v4 + 88));
  if (v7 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once((std::once_flag::_State_type *)(v4 + 88), &v17, (void (__cdecl *)(void *))sub_20B417E0C);
  }
  sub_20B450618(&v14, v4 + 48);
  sub_20B159CD0(a1, (uint64_t)&v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v13)
  {
    v11 = (unint64_t *)&v13->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20B159CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B159CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B159CD0(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t *i;
  char *v27;
  uint64_t *v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  _OWORD v32[2];
  __int128 v33;
  char v34;

  v33 = 0u;
  memset(v32, 0, sizeof(v32));
  sub_20B450760((uint64_t)&v28, a2);
  v3 = v28;
  *(_QWORD *)&v32[0] = v28;
  *(_OWORD *)((char *)v32 + 8) = v29;
  v4 = v30;
  *((_QWORD *)&v32[1] + 1) = v30;
  v27 = (char *)v31;
  v33 = v31;
  v5 = (uint64_t *)v29;
  v6 = ((_QWORD)v29 - (_QWORD)v28) / 24;
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v28 = (uint64_t *)(v7 + 16);
    sub_20B51F33C(&v28, v6);
  }
  else
  {
    sub_20B51F644();
  }
  v8 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v8 + 40))
  {
    v28 = (uint64_t *)(v8 + 16);
    if (v5 != v3)
    {
      v9 = 24 * v6;
      v10 = (const void **)v3;
      do
      {
        sub_20B51FA2C((uint64_t)&v34, &v28, v10);
        v10 += 3;
        v9 -= 24;
      }
      while (v9);
    }
  }
  else if (v5 != v3)
  {
    v11 = v8 + 8;
    v12 = 24 * v6;
    v13 = (uint64_t)v3;
    do
    {
      sub_20B51FE64((uint64_t)&v28, v11, v13);
      v13 += 24;
      v12 -= 24;
    }
    while (v12);
  }
  v14 = v27;
  v15 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v15 + 40))
  {
    v28 = (uint64_t *)(v15 + 16);
    sub_20B51F33C(&v28, (v27 - v4) / 24);
  }
  else
  {
    sub_20B51F644();
  }
  if (v27 == v4)
  {
    if (!v4)
      goto LABEL_37;
    goto LABEL_36;
  }
  v16 = 0;
  do
  {
    v17 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v17 + 40))
    {
      v28 = (uint64_t *)(v17 + 16);
      sub_20B51E95C(&v28, 2u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v28, v17 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a1 + 24));
    sub_20B15A148(a1, (unsigned __int16 *)&v4[v16]);
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(_QWORD *)(*(_QWORD *)(v18 + 88) - 8);
    sub_20B5190E0((uint64_t *)(v18 + 48), *(_QWORD *)(v18 + 16) - v19 - 9);
    v20 = *(_QWORD *)(v18 + 48);
    if (v20)
      memmove((void *)(*(_QWORD *)(v18 + 24) + v19), *(const void **)(v18 + 56), v20);
    *(_QWORD *)(v18 + 48) = 0;
    v21 = *(_QWORD *)(v18 + 80);
    v22 = *(_QWORD *)(v18 + 88) - 8;
    *(_QWORD *)(v18 + 88) = v22;
    if (v21 == v22)
    {
      std::ostream::write();
      if (*(_BYTE *)(v18 + 40))
      {
        free(*(void **)(v18 + 24));
        *(_BYTE *)(v18 + 40) = 0;
      }
    }
    v16 += 24;
  }
  while (24 * ((v27 - v4) / 24) != v16);
  if (v4)
  {
    do
    {
      v23 = (std::__shared_weak_count *)*((_QWORD *)v14 - 1);
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v14 -= 24;
    }
    while (v14 != v4);
    v4 = (char *)*((_QWORD *)&v32[1] + 1);
    v3 = *(uint64_t **)&v32[0];
LABEL_36:
    operator delete(v4);
  }
LABEL_37:
  if (v3)
  {
    for (i = (uint64_t *)*((_QWORD *)&v32[0] + 1); i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete((void *)*(i - 3));
    }
    operator delete(v3);
  }
}

void sub_20B159FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15A004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15A018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15A02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15A040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15A054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void **sub_20B15A068(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void **v8;
  void **v9;
  void *v10;

  v2 = (char *)a1[3];
  if (v2)
  {
    v3 = (char *)a1[4];
    v4 = a1[3];
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v8 = (void **)*a1;
  if (*a1)
  {
    v9 = (void **)a1[1];
    v10 = *a1;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = *a1;
    }
    a1[1] = v8;
    operator delete(v10);
  }
  return a1;
}

void sub_20B15A148(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  const void *v7;
  CFTypeID TypeID;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  const void *v14;
  CFTypeID v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  const void *v21;
  const void *v22;
  CFTypeID v23;
  _BOOL4 v24;
  uint64_t v25;
  std::string::value_type v26;
  const void *v27;
  CFTypeID v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *size;
  unint64_t *v32;
  unint64_t v33;
  const __CFArray *v34;
  uint64_t v35;
  __int128 v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::string::size_type v54;
  char *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  void *v63;
  size_t v64;
  std::string::size_type v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  size_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  std::string::size_type v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  size_t v94;
  uint64_t v95;
  uint64_t v96;
  std::string::size_type v97;
  void *v98;
  std::__shared_weak_count *v99;
  unint64_t *p_shared_owners;
  unint64_t v101;
  unint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  size_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 theArray;
  uint64_t *v111;
  __int128 v112;
  std::string __p;
  std::string::size_type v114;
  std::string::size_type v115;
  __int128 v116;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v5 + 40))
  {
    if (v4 > 0x7F)
    {
      if (v4 > 0xFF)
      {
        __p.__r_.__value_.__s.__data_[0] = -51;
        *(_WORD *)((char *)&__p.__r_.__value_.__l.__data_ + 1) = __rev16(v4);
        std::ostream::write();
        v6 = *a2;
        if (v6 <= 4)
          goto LABEL_3;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = -52;
        __p.__r_.__value_.__s.__data_[1] = v4;
        std::ostream::write();
        v6 = *a2;
        if (v6 <= 4)
          goto LABEL_3;
      }
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = v4;
      std::ostream::write();
      v6 = *a2;
      if (v6 <= 4)
        goto LABEL_3;
    }
LABEL_16:
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 281, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_20B532360);
    abort();
  }
  __p.__r_.__value_.__r.__words[0] = v5 + 16;
  sub_20B51E278((uint64_t **)&__p, v4);
  v6 = *a2;
LABEL_3:
  switch(v6)
  {
    case 0u:
      v7 = (const void *)*((_QWORD *)a2 + 1);
      if (v7 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v7) == TypeID))
      {
        sub_20B15B25C(&v116, *((CFTypeRef *)a2 + 1));
        v109 = v116;
        if (*((_QWORD *)&v116 + 1))
        {
          v9 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
          v11 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
          if (*((_QWORD *)&v116 + 1))
          {
            v12 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
        }
      }
      else
      {
        v109 = 0uLL;
      }
      sub_20B15B3A0(&theArray, (uint64_t)&v109);
      sub_20B4F5FA8((CFNumberRef *)&theArray);
      __p.__r_.__value_.__s.__data_[0] = (char)v111;
      __p.__r_.__value_.__s.__data_[8] = (char)v111;
      v114 = 0;
      v115 = 0;
      __p.__r_.__value_.__r.__words[2] = 0;
      v63 = (void *)v112;
      v64 = *((_QWORD *)&v112 + 1) - v112;
      if (*((_QWORD *)&v112 + 1) != (_QWORD)v112)
      {
        if ((v64 & 0x8000000000000000) != 0)
          sub_20AEC60B8();
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)operator new(*((_QWORD *)&v112 + 1) - v112);
        v114 = __p.__r_.__value_.__r.__words[2];
        v65 = __p.__r_.__value_.__r.__words[2] + v64;
        v115 = __p.__r_.__value_.__r.__words[2] + v64;
        memcpy((void *)__p.__r_.__value_.__r.__words[2], v63, v64);
        v114 = v65;
      }
      if (v63)
      {
        *((_QWORD *)&v112 + 1) = v63;
        operator delete(v63);
      }
      v66 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      v69 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
      if (*((_QWORD *)&v109 + 1))
      {
        v70 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v72 + 40))
      {
        v111 = (uint64_t *)(v72 + 16);
        sub_20B51E95C(&v111, 2u);
      }
      else
      {
        sub_20B51EBD0((uint64_t)&v111, v72 + 8);
      }
      sub_20B51956C(*(_QWORD *)(a1 + 24));
      v88 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v88 + 40))
      {
        v111 = (uint64_t *)(v88 + 16);
        sub_20B51DD74(&v111, __p.__r_.__value_.__s.__data_[0]);
      }
      else
      {
        if (__p.__r_.__value_.__s.__data_[0] < 0)
        {
          LOBYTE(v111) = -52;
          BYTE1(v111) = __p.__r_.__value_.__s.__data_[0];
        }
        else
        {
          LOBYTE(v111) = __p.__r_.__value_.__s.__data_[0];
        }
        std::ostream::write();
      }
      sub_20B0FC39C(__p.__r_.__value_.__s.__data_[0], (uint64_t)&__p, a1);
      v103 = *(_QWORD *)(a1 + 24);
      v104 = *(_QWORD *)(*(_QWORD *)(v103 + 88) - 8);
      sub_20B5190E0((uint64_t *)(v103 + 48), *(_QWORD *)(v103 + 16) - v104 - 9);
      v105 = *(_QWORD *)(v103 + 48);
      if (v105)
        memmove((void *)(*(_QWORD *)(v103 + 24) + v104), *(const void **)(v103 + 56), v105);
      *(_QWORD *)(v103 + 48) = 0;
      v106 = *(_QWORD *)(v103 + 80);
      v107 = *(_QWORD *)(v103 + 88) - 8;
      *(_QWORD *)(v103 + 88) = v107;
      if (v106 == v107)
      {
        std::ostream::write();
        if (*(_BYTE *)(v103 + 40))
        {
          free(*(void **)(v103 + 24));
          *(_BYTE *)(v103 + 40) = 0;
        }
      }
      v73 = (void *)__p.__r_.__value_.__r.__words[2];
      if (!__p.__r_.__value_.__r.__words[2])
        return;
      v114 = __p.__r_.__value_.__r.__words[2];
      goto LABEL_188;
    case 1u:
      sub_20B4EE3FC(*((_QWORD *)a2 + 1), &__p);
      v35 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v35 + 40))
      {
        v111 = (uint64_t *)(v35 + 16);
        sub_20B51FA2C((uint64_t)&v116, &v111, (const void **)&__p.__r_.__value_.__l.__data_);
      }
      else
      {
        sub_20B51FE64((uint64_t)&v111, v35 + 8, (uint64_t)&__p);
      }
      if (!(_BYTE)v114 || (SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v73 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_188:
      operator delete(v73);
      return;
    case 2u:
      v22 = (const void *)*((_QWORD *)a2 + 1);
      if (!v22 || (v23 = CFBooleanGetTypeID(), CFGetTypeID(v22) != v23))
      {
        v24 = 0;
        LOWORD(v111) = 0;
        v25 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v25 + 40))
          goto LABEL_31;
LABEL_68:
        __p.__r_.__value_.__r.__words[0] = v25 + 16;
        sub_20B51F8F4((uint64_t)&v116, (uint64_t **)&__p, &v111);
        return;
      }
      v24 = CFBooleanGetValue((CFBooleanRef)v22) != 0;
      LOWORD(v111) = v24 | 0x100;
      v25 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v25 + 40))
        goto LABEL_68;
LABEL_31:
      if (v24)
        v26 = -61;
      else
        v26 = -62;
      __p.__r_.__value_.__s.__data_[0] = v26;
      std::ostream::write();
      return;
    case 3u:
      v27 = (const void *)*((_QWORD *)a2 + 1);
      if (v27 && (v28 = CFArrayGetTypeID(), CFGetTypeID(v27) == v28))
      {
        sub_20B15B4B0(&__p, *((CFTypeRef *)a2 + 1));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v29 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v32 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
        }
        v34 = (const __CFArray *)theArray;
      }
      else
      {
        v34 = 0;
        theArray = 0uLL;
      }
      memset(&__p, 0, sizeof(__p));
      Count = CFArrayGetCount(v34);
      sub_20B15AE88(&__p.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray, i);
          sub_20B15B754(&v116, ValueAtIndex);
          v108 = v116;
          if (*((_QWORD *)&v116 + 1))
          {
            v49 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
            do
              v50 = __ldxr(v49);
            while (__stxr(v50 + 1, v49));
            v51 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
            if (*((_QWORD *)&v116 + 1))
            {
              v52 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
          }
          sub_20B44FB7C((uint64_t)&v111, (uint64_t)&v108);
          v54 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v55 = sub_20B15B5F4(&__p.__r_.__value_.__l.__data_, (uint64_t)&v111);
            v56 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v55;
            if (*((_QWORD *)&v112 + 1))
            {
              v57 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
          }
          else
          {
            *(_WORD *)__p.__r_.__value_.__l.__size_ = (_WORD)v111;
            *(_OWORD *)(v54 + 8) = v112;
            v112 = 0uLL;
            __p.__r_.__value_.__l.__size_ = v54 + 24;
          }
          v59 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
          if (*((_QWORD *)&v108 + 1))
          {
            v60 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
        }
      }
      v62 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v62 + 40))
      {
        v111 = (uint64_t *)(v62 + 16);
        sub_20B51F33C(&v111, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
      }
      else
      {
        sub_20B51F644();
      }
      v89 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        v90 = 24 * ((int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          v91 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v91 + 40))
          {
            v111 = (uint64_t *)(v91 + 16);
            sub_20B51E95C(&v111, 2u);
          }
          else
          {
            sub_20B51EBD0((uint64_t)&v111, v91 + 8);
          }
          sub_20B51956C(*(_QWORD *)(a1 + 24));
          sub_20B15A148(a1, v89, 2);
          v92 = *(_QWORD *)(a1 + 24);
          v93 = *(_QWORD *)(*(_QWORD *)(v92 + 88) - 8);
          sub_20B5190E0((uint64_t *)(v92 + 48), *(_QWORD *)(v92 + 16) - v93 - 9);
          v94 = *(_QWORD *)(v92 + 48);
          if (v94)
            memmove((void *)(*(_QWORD *)(v92 + 24) + v93), *(const void **)(v92 + 56), v94);
          *(_QWORD *)(v92 + 48) = 0;
          v95 = *(_QWORD *)(v92 + 80);
          v96 = *(_QWORD *)(v92 + 88) - 8;
          *(_QWORD *)(v92 + 88) = v96;
          if (v95 == v96)
          {
            std::ostream::write();
            if (*(_BYTE *)(v92 + 40))
            {
              free(*(void **)(v92 + 24));
              *(_BYTE *)(v92 + 40) = 0;
            }
          }
          v89 += 24;
          v90 -= 24;
        }
        while (v90);
        v89 = __p.__r_.__value_.__r.__words[0];
      }
      if (v89)
      {
        v97 = __p.__r_.__value_.__l.__size_;
        v98 = (void *)v89;
        if (__p.__r_.__value_.__l.__size_ != v89)
        {
          do
          {
            v99 = *(std::__shared_weak_count **)(v97 - 8);
            if (v99)
            {
              p_shared_owners = (unint64_t *)&v99->__shared_owners_;
              do
                v101 = __ldaxr(p_shared_owners);
              while (__stlxr(v101 - 1, p_shared_owners));
              if (!v101)
              {
                ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                std::__shared_weak_count::__release_weak(v99);
              }
            }
            v97 -= 24;
          }
          while (v97 != v89);
          v98 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v89;
        operator delete(v98);
      }
      v85 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (!*((_QWORD *)&theArray + 1))
        return;
      v102 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
      do
        v87 = __ldaxr(v102);
      while (__stlxr(v87 - 1, v102));
      goto LABEL_175;
    case 4u:
      v14 = (const void *)*((_QWORD *)a2 + 1);
      if (v14 && (v15 = CFDictionaryGetTypeID(), CFGetTypeID(v14) == v15))
      {
        sub_20AEEC3E8(&__p, *((CFTypeRef *)a2 + 1));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v16 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
          v18 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v19 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
        v21 = (const void *)theArray;
      }
      else
      {
        v21 = 0;
        theArray = 0uLL;
      }
      sub_20AEEC3E8(&__p, v21);
      v36 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v37 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        v39 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v40 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        do
          v42 = __ldxr(v37);
        while (__stxr(v42 + 1, v37));
        v116 = v36;
        do
          v43 = __ldxr(v37);
        while (__stxr(v43 + 1, v37));
        do
          v44 = __ldaxr(v37);
        while (__stlxr(v44 - 1, v37));
        if (!v44)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v36 + 1) + 16))(*((_QWORD *)&v36 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v36 + 1));
        }
        do
          v45 = __ldaxr(v37);
        while (__stlxr(v45 - 1, v37));
        if (!v45)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v36 + 1) + 16))(*((_QWORD *)&v36 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v36 + 1));
        }
      }
      else
      {
        v116 = __p.__r_.__value_.__r.__words[0];
      }
      sub_20B450618(&v111, (uint64_t)&v116);
      v74 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
      if (*((_QWORD *)&v116 + 1))
      {
        v75 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      if (*((_QWORD *)&theArray + 1))
      {
        v77 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&theArray + 1) + 16))(*((_QWORD *)&theArray + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&theArray + 1));
        }
      }
      v79 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v79 + 40))
      {
        __p.__r_.__value_.__r.__words[0] = v79 + 16;
        sub_20B51E95C((uint64_t **)&__p, 2u);
      }
      else
      {
        sub_20B51EBD0((uint64_t)&__p, v79 + 8);
      }
      sub_20B51956C(*(_QWORD *)(a1 + 24));
      sub_20B159CD0(a1, &v111, 2);
      v80 = *(_QWORD *)(a1 + 24);
      v81 = *(_QWORD *)(*(_QWORD *)(v80 + 88) - 8);
      sub_20B5190E0((uint64_t *)(v80 + 48), *(_QWORD *)(v80 + 16) - v81 - 9);
      v82 = *(_QWORD *)(v80 + 48);
      if (v82)
        memmove((void *)(*(_QWORD *)(v80 + 24) + v81), *(const void **)(v80 + 56), v82);
      *(_QWORD *)(v80 + 48) = 0;
      v83 = *(_QWORD *)(v80 + 80);
      v84 = *(_QWORD *)(v80 + 88) - 8;
      *(_QWORD *)(v80 + 88) = v84;
      if (v83 == v84)
      {
        std::ostream::write();
        if (*(_BYTE *)(v80 + 40))
        {
          free(*(void **)(v80 + 24));
          *(_BYTE *)(v80 + 40) = 0;
        }
      }
      v85 = (std::__shared_weak_count *)v112;
      if (!(_QWORD)v112)
        return;
      v86 = (unint64_t *)(v112 + 8);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
LABEL_175:
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
      return;
    default:
      goto LABEL_16;
  }
}

void sub_20B15AD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15AD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_20AEC147C(v6 - 64);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15AD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  if ((_BYTE)a26)
  {
    if (a25 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B15AE88(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int16 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20AEC60B8();
    v4 = a1[1];
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_WORD *)v4 - 12);
        v4 -= 24;
        *((_WORD *)v9 - 12) = v10;
        v9 -= 24;
        *(_OWORD *)(v9 + 8) = *(_OWORD *)(v4 + 8);
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
      }
      while (v4 != v2);
      v2 = *a1;
      v11 = a1[1];
      *a1 = v9;
      a1[1] = v8;
      a1[2] = v7;
      while (v11 != v2)
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v11 -= 24;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void sub_20B15AFA8(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v21[0] = v5;
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)(&off_24C41D930)[2 * *a3], (uint64_t)(&off_24C41D930)[2 * *a3 + 1]);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 128);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20AECFAB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C40DC30[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20B15B208(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B15B22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B15B248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B15B25C(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C40FA18;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20B15B2BC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B15B2D4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B15B2EC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B15B310(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20B15B330(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_20B15B3A0(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20B15B25C(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20B15B49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B15B4B0(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C40FA68;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20B15B510(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B15B528(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B15B540(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B15B564(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20B15B584(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

char *sub_20B15B5F4(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int16 v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v4;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60CC();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v3];
  v10 = &v8[v7];
  *(_WORD *)v9 = *(_WORD *)a2;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *((_WORD *)v13 - 12);
      v13 -= 24;
      *((_WORD *)v9 - 12) = v14;
      v9 -= 24;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(v13 + 8);
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    while (v15 != v13)
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v15 -= 24;
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

_QWORD *sub_20B15B754(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C40FAB8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20B15B7B4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20B15B7CC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B15B7E4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B15B808(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20B15B828(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B15B898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  uint64_t v15;
  int v16;

  sub_20B505FB0(a2);
  v14 = (unsigned __int8 **)"version";
  v15 = 7;
  v16 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5069D0(a2, &v16);
  v6 = v16;
  v7 = *(_QWORD *)(a3 + 8);
  v14 = *(unsigned __int8 ***)a3;
  v15 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20B15B9E0(a2, &v14, v6);
  v10 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v11 = (unint64_t *)(v15 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 56) = v13 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B15B99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B15B9E0(uint64_t a1, unsigned __int8 ***a2, unsigned int a3)
{
  int v4;
  unsigned __int8 **v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 **v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unsigned __int8 **v17;
  std::__shared_weak_count *v18;
  unsigned __int8 **v19;
  unsigned __int8 ****v20;
  unsigned __int8 ***v21;

  if (a3 > 2)
  {
    v11 = *a2;
    v12 = (unint64_t *)(*a2 + 11);
    v19 = *a2;
    v13 = atomic_load(v12);
    if (v13 != -1)
    {
      v21 = &v19;
      v20 = &v21;
      std::__call_once(v12, &v20, (void (__cdecl *)(void *))sub_20B417E0C);
    }
    sub_20B450618(&v17, (uint64_t)(v11 + 6));
    sub_20B15BB88(a1, (uint64_t)&v17);
    v14 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v4 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "dictionary";
      *(_QWORD *)(a1 + 80) = 10;
      if (!v4)
        *(_BYTE *)(a1 + 88) = 1;
    }
    v5 = *a2;
    v6 = (unint64_t *)(*a2 + 9);
    v17 = *a2;
    v18 = (std::__shared_weak_count *)&v19;
    v19 = 0;
    v7 = atomic_load(v6);
    if (v7 != -1)
    {
      v21 = &v17;
      v20 = &v21;
      std::__call_once(v6, &v20, (void (__cdecl *)(void *))sub_20B4177D4);
    }
    sub_20B456794((uint64_t)&v17, *v5);
    v8 = (unsigned __int8 *)sub_20B505B08(a1);
    v9 = *v8;
    *v8 = v17;
    LOBYTE(v17) = v9;
    v10 = *((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v18;
    v18 = (std::__shared_weak_count *)v10;
    sub_20B416E08((uint64_t *)&v18, v9);
  }
}

void sub_20B15BB5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15BB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v10;

  sub_20B416E08((uint64_t *)(v10 + 8), a10);
  _Unwind_Resume(a1);
}

void sub_20B15BB88(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  uint64_t v16;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v3 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "dictionary";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v3)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20AEEC2D8(&v12, a2);
  sub_20B44F0B0((uint64_t)&v12, (uint64_t *)&v14);
  v4 = (uint64_t)v14;
  v15 = *v14;
  v16 = *((_QWORD *)v14 + 1);
  *v14 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unsigned __int8 *)sub_20B505B08(a1);
  v6 = *v5;
  *v5 = v15;
  v15 = v6;
  v7 = *((_QWORD *)v5 + 1);
  *((_QWORD *)v5 + 1) = v16;
  v16 = v7;
  sub_20B416E08(&v16, v6);
  v8 = (uint64_t *)v14;
  v14 = 0;
  if (v8)
  {
    sub_20B416E08(v8 + 1, *(unsigned __int8 *)v8);
    MEMORY[0x20BD3583C](v8, 0x1022C40B06DCE69);
  }
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B15BCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t *a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_20B416E08(v13, a13);
  sub_20B4F96AC(&a12);
  sub_20AEC147C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20B15BCE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15BCF8(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v16 = v4;
  v7 = atomic_load((unint64_t *)(v4 + 88));
  if (v7 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once((std::once_flag::_State_type *)(v4 + 88), &v17, (void (__cdecl *)(void *))sub_20B417E0C);
  }
  sub_20B450618(&v14, v4 + 48);
  sub_20B15BE3C(a1, (uint64_t)&v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v13)
  {
    v11 = (unint64_t *)&v13->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20B15BE0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15BE28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15BE3C(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  char *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void **i;
  void **v24;
  char *v25;
  void **v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;

  v31 = 0u;
  memset(v30, 0, sizeof(v30));
  sub_20B450760((uint64_t)&v26, a2);
  v3 = v26;
  *(_QWORD *)&v30[0] = v26;
  v4 = (void **)v27;
  *(_OWORD *)((char *)v30 + 8) = v27;
  v5 = v28;
  *((_QWORD *)&v30[1] + 1) = v28;
  v25 = (char *)v29;
  v31 = v29;
  if (*(_QWORD *)(a1 + 40))
  {
    v24 = (void **)v27;
    v6 = *(_QWORD **)(a1 + 24);
    LOBYTE(v26) = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v6, (uint64_t)&v26, 1);
    v4 = v24;
  }
  v7 = v4;
  v8 = ((char *)v4 - (char *)v3) / 24;
  std::ostream::operator<<();
  v9 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v9;
  if (v7 != v3)
  {
    v10 = 24 * v8;
    v11 = (uint64_t)v3;
    do
    {
      sub_20B512F6C(a1, v11);
      v11 += 24;
      v10 -= 24;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 40);
  }
  if (v9)
  {
    v12 = *(_QWORD **)(a1 + 24);
    LOBYTE(v26) = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v12, (uint64_t)&v26, 1);
  }
  v13 = v25;
  std::ostream::operator<<();
  v14 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v14;
  if (v25 == v5)
  {
    if (!v5)
      goto LABEL_27;
    goto LABEL_26;
  }
  v15 = 0;
  do
  {
    if (v14)
    {
      v16 = *(_QWORD **)(a1 + 24);
      LOBYTE(v26) = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v16, (uint64_t)&v26, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a1 + 40);
    sub_20B15C140(a1, (uint64_t)&v5[v15]);
    v17 = *(_BYTE *)(a1 + 34);
    if (*(_QWORD *)(a1 + 40))
    {
      v18 = *(_QWORD **)(a1 + 24);
      LOBYTE(v26) = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v18, (uint64_t)&v26, 1);
    }
    v19 = *(_QWORD **)(a1 + 24);
    LOBYTE(v26) = v17;
    sub_20AEC01D0(v19, (uint64_t)&v26, 1);
    v14 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v14;
    v15 += 24;
  }
  while (24 * ((v25 - v5) / 24) != v15);
  if (v5)
  {
    do
    {
      v20 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v13 -= 24;
    }
    while (v13 != v5);
    v5 = (char *)*((_QWORD *)&v30[1] + 1);
    v3 = *(void ***)&v30[0];
LABEL_26:
    operator delete(v5);
  }
LABEL_27:
  if (v3)
  {
    for (i = (void **)*((_QWORD *)&v30[0] + 1); i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v3);
  }
}

void sub_20B15C0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15C0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15C104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15C118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15C12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15C140(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  const void *v5;
  CFTypeID TypeID;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const void *v12;
  CFTypeID v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const void *v19;
  const __CFBoolean *v20;
  CFTypeID v21;
  _QWORD *v22;
  const void *v23;
  CFTypeID v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  const __CFArray *v30;
  void *v31;
  __int128 v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::string::size_type v50;
  char *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::string::size_type v60;
  int64_t v61;
  _QWORD *v62;
  char v63;
  _QWORD *v64;
  _QWORD *v65;
  std::string::size_type v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  void *v71;
  size_t v72;
  std::string::size_type v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  char v81;
  _QWORD *v82;
  _QWORD *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  std::string::value_type v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t *v96;
  __int128 v97;
  __int128 v98;
  __int128 theArray;
  uint64_t v100;
  __int128 v101;
  std::string __p;
  std::string::size_type v103;
  std::string::size_type v104;
  __int128 v105;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v4, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  switch(*(_WORD *)a2)
  {
    case 0:
      v5 = *(const void **)(a2 + 8);
      if (v5 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v5) == TypeID))
      {
        sub_20B15B25C(&v105, *(CFTypeRef *)(a2 + 8));
        v98 = v105;
        if (*((_QWORD *)&v105 + 1))
        {
          v7 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
          v9 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
          if (*((_QWORD *)&v105 + 1))
          {
            v10 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
        }
      }
      else
      {
        v98 = 0uLL;
      }
      sub_20B15B3A0(&theArray, (uint64_t)&v98);
      sub_20B4F5FA8((CFNumberRef *)&theArray);
      __p.__r_.__value_.__s.__data_[0] = v100;
      __p.__r_.__value_.__s.__data_[8] = v100;
      v103 = 0;
      v104 = 0;
      __p.__r_.__value_.__r.__words[2] = 0;
      v71 = (void *)v101;
      v72 = *((_QWORD *)&v101 + 1) - v101;
      if (*((_QWORD *)&v101 + 1) != (_QWORD)v101)
      {
        if ((v72 & 0x8000000000000000) != 0)
          sub_20AEC60B8();
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)operator new(*((_QWORD *)&v101 + 1) - v101);
        v103 = __p.__r_.__value_.__r.__words[2];
        v73 = __p.__r_.__value_.__r.__words[2] + v72;
        v104 = __p.__r_.__value_.__r.__words[2] + v72;
        memcpy((void *)__p.__r_.__value_.__r.__words[2], v71, v72);
        v103 = v73;
      }
      if (v71)
      {
        *((_QWORD *)&v101 + 1) = v71;
        operator delete(v71);
      }
      v74 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v75 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v77 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
      if (*((_QWORD *)&v98 + 1))
      {
        v78 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      if (*(_QWORD *)(a1 + 40))
      {
        v80 = *(_QWORD **)(a1 + 24);
        LOBYTE(v100) = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v80, (uint64_t)&v100, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a1 + 40);
      LOBYTE(v100) = __p.__r_.__value_.__s.__data_[0];
      sub_20B512EB0(a1, (unsigned __int8 *)&v100);
      sub_20B0FE5E0(__p.__r_.__value_.__s.__data_[0], (uint64_t)&__p, a1);
      v81 = *(_BYTE *)(a1 + 34);
      if (*(_QWORD *)(a1 + 40))
      {
        v82 = *(_QWORD **)(a1 + 24);
        LOBYTE(v100) = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v82, (uint64_t)&v100, 1);
      }
      v83 = *(_QWORD **)(a1 + 24);
      LOBYTE(v100) = v81;
      sub_20AEC01D0(v83, (uint64_t)&v100, 1);
      ++*(_QWORD *)(a1 + 40);
      v31 = (void *)__p.__r_.__value_.__r.__words[2];
      if (!__p.__r_.__value_.__r.__words[2])
        return;
      v103 = __p.__r_.__value_.__r.__words[2];
      goto LABEL_128;
    case 1:
      sub_20B4EE3FC(*(_QWORD *)(a2 + 8), &__p);
      sub_20B512F6C(a1, (uint64_t)&__p);
      if (!(_BYTE)v103 || (SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v31 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_128:
      operator delete(v31);
      return;
    case 2:
      v20 = *(const __CFBoolean **)(a2 + 8);
      if (!v20)
        goto LABEL_28;
      v21 = CFBooleanGetTypeID();
      if (CFGetTypeID(v20) == v21)
      {
        CFBooleanGetValue(v20);
LABEL_28:
        if (*(_QWORD *)(a1 + 40))
          goto LABEL_29;
      }
      else if (*(_QWORD *)(a1 + 40))
      {
LABEL_29:
        v22 = *(_QWORD **)(a1 + 24);
        __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v22, (uint64_t)&__p, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a1 + 40);
      return;
    case 3:
      v23 = *(const void **)(a2 + 8);
      if (v23 && (v24 = CFArrayGetTypeID(), CFGetTypeID(v23) == v24))
      {
        sub_20B15B4B0(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v25 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
        }
        v30 = (const __CFArray *)theArray;
      }
      else
      {
        v30 = 0;
        theArray = 0uLL;
      }
      memset(&__p, 0, sizeof(__p));
      Count = CFArrayGetCount(v30);
      sub_20B15AE88(&__p.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray, i);
          sub_20B15B754(&v105, ValueAtIndex);
          v97 = v105;
          if (*((_QWORD *)&v105 + 1))
          {
            v45 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            v47 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
            if (*((_QWORD *)&v105 + 1))
            {
              v48 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
          }
          sub_20B44FB7C((uint64_t)&v100, (uint64_t)&v97);
          v50 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v51 = sub_20B15B5F4(&__p.__r_.__value_.__l.__data_, (uint64_t)&v100);
            v52 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
            if (*((_QWORD *)&v101 + 1))
            {
              v53 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
          }
          else
          {
            *(_WORD *)__p.__r_.__value_.__l.__size_ = v100;
            *(_OWORD *)(v50 + 8) = v101;
            v101 = 0uLL;
            __p.__r_.__value_.__l.__size_ = v50 + 24;
          }
          v55 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
          if (*((_QWORD *)&v97 + 1))
          {
            v56 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
        }
      }
      if (*(_QWORD *)(a1 + 40))
      {
        v58 = *(_QWORD **)(a1 + 24);
        LOBYTE(v100) = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v58, (uint64_t)&v100, 1);
      }
      std::ostream::operator<<();
      v59 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v59;
      v60 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        v61 = 24 * ((int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          if (v59)
          {
            v62 = *(_QWORD **)(a1 + 24);
            LOBYTE(v100) = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v62, (uint64_t)&v100, 1);
          }
          std::ostream::operator<<();
          ++*(_QWORD *)(a1 + 40);
          sub_20B15C140(a1, v60, 2);
          v63 = *(_BYTE *)(a1 + 34);
          if (*(_QWORD *)(a1 + 40))
          {
            v64 = *(_QWORD **)(a1 + 24);
            LOBYTE(v100) = *(_BYTE *)(a1 + 32);
            sub_20AEC01D0(v64, (uint64_t)&v100, 1);
          }
          v65 = *(_QWORD **)(a1 + 24);
          LOBYTE(v100) = v63;
          sub_20AEC01D0(v65, (uint64_t)&v100, 1);
          v59 = *(_QWORD *)(a1 + 40) + 1;
          *(_QWORD *)(a1 + 40) = v59;
          v60 += 24;
          v61 -= 24;
        }
        while (v61);
        v60 = __p.__r_.__value_.__r.__words[0];
      }
      if (v60)
      {
        v66 = __p.__r_.__value_.__l.__size_;
        v67 = (void *)v60;
        if (__p.__r_.__value_.__l.__size_ != v60)
        {
          do
          {
            v68 = *(std::__shared_weak_count **)(v66 - 8);
            if (v68)
            {
              p_shared_owners = (unint64_t *)&v68->__shared_owners_;
              do
                v70 = __ldaxr(p_shared_owners);
              while (__stlxr(v70 - 1, p_shared_owners));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            v66 -= 24;
          }
          while (v66 != v60);
          v67 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v60;
        operator delete(v67);
      }
      v84 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (!*((_QWORD *)&theArray + 1))
        return;
      v85 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      goto LABEL_153;
    case 4:
      v12 = *(const void **)(a2 + 8);
      if (v12 && (v13 = CFDictionaryGetTypeID(), CFGetTypeID(v12) == v13))
      {
        sub_20AEEC3E8(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v14 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          v16 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v17 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
        v19 = (const void *)theArray;
      }
      else
      {
        v19 = 0;
        theArray = 0uLL;
      }
      sub_20AEEC3E8(&__p, v19);
      v32 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v33 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
        v35 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v36 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        do
          v38 = __ldxr(v33);
        while (__stxr(v38 + 1, v33));
        v105 = v32;
        do
          v39 = __ldxr(v33);
        while (__stxr(v39 + 1, v33));
        do
          v40 = __ldaxr(v33);
        while (__stlxr(v40 - 1, v33));
        if (!v40)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v32 + 1) + 16))(*((_QWORD *)&v32 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v32 + 1));
        }
        do
          v41 = __ldaxr(v33);
        while (__stlxr(v41 - 1, v33));
        if (!v41)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v32 + 1) + 16))(*((_QWORD *)&v32 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v32 + 1));
        }
      }
      else
      {
        v105 = __p.__r_.__value_.__r.__words[0];
      }
      sub_20B450618(&v100, (uint64_t)&v105);
      v87 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
      if (*((_QWORD *)&v105 + 1))
      {
        v88 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      if (*((_QWORD *)&theArray + 1))
      {
        v90 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&theArray + 1) + 16))(*((_QWORD *)&theArray + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&theArray + 1));
        }
      }
      if (*(_QWORD *)(a1 + 40))
      {
        v92 = *(_QWORD **)(a1 + 24);
        __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v92, (uint64_t)&__p, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a1 + 40);
      sub_20B15BE3C(a1, &v100, 2);
      v93 = *(_BYTE *)(a1 + 34);
      if (*(_QWORD *)(a1 + 40))
      {
        v94 = *(_QWORD **)(a1 + 24);
        __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v94, (uint64_t)&__p, 1);
      }
      v95 = *(_QWORD **)(a1 + 24);
      __p.__r_.__value_.__s.__data_[0] = v93;
      sub_20AEC01D0(v95, (uint64_t)&__p, 1);
      ++*(_QWORD *)(a1 + 40);
      v84 = (std::__shared_weak_count *)v101;
      if (!(_QWORD)v101)
        return;
      v96 = (unint64_t *)(v101 + 8);
      do
        v86 = __ldaxr(v96);
      while (__stlxr(v86 - 1, v96));
LABEL_153:
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
      return;
    default:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 281, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_20B532360);
      abort();
  }
}

void sub_20B15CB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15CB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_20AEC147C(v6 - 64);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15CBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15CBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  if ((_BYTE)a26)
  {
    if (a25 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B15CCBC(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v16 = v4;
  v7 = atomic_load((unint64_t *)(v4 + 88));
  if (v7 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once((std::once_flag::_State_type *)(v4 + 88), &v17, (void (__cdecl *)(void *))sub_20B417E0C);
  }
  sub_20B450618(&v14, v4 + 48);
  sub_20B15CE00(a1, (uint64_t)&v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v13)
  {
    v11 = (unint64_t *)&v13->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20B15CDD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15CDEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15CE00(uint64_t a1, uint64_t a2)
{
  void **v3;
  char *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  uint64_t v9;
  int64_t v10;
  char *v11;
  BOOL v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void **i;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  __int128 v24;
  _OWORD v25[2];
  __int128 v26;
  uint64_t __src;
  uint64_t v28;

  v26 = 0u;
  memset(v25, 0, sizeof(v25));
  sub_20B450760((uint64_t)&v21, a2);
  v3 = (void **)v21;
  *(_QWORD *)&v25[0] = v21;
  *(_OWORD *)((char *)v25 + 8) = v22;
  v4 = v23;
  *((_QWORD *)&v25[1] + 1) = v23;
  v20 = (char *)v24;
  v26 = v24;
  v5 = (void **)v22;
  v6 = ((uint64_t)v22 - v21) / 24;
  __src = v6;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v28, 8);
  if (v5 != v3)
  {
    v7 = 24 * v6;
    v8 = (char **)v3;
    do
    {
      v9 = *((unsigned __int8 *)v8 + 23);
      if ((v9 & 0x80u) != 0)
        v9 = (uint64_t)v8[1];
      v21 = v9;
      sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&v21, (char *)&v22, 8);
      if (*((char *)v8 + 23) < 0)
      {
        v11 = *v8;
        v10 = (int64_t)v8[1];
        if (*v8)
          v12 = 1;
        else
          v12 = v10 == 0;
        if (!v12)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360))
          {
            abort();
          }
          v11 = 0;
        }
      }
      else
      {
        v10 = *((unsigned __int8 *)v8 + 23);
        v11 = (char *)v8;
      }
      sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), v11, &v11[v10], v10);
      v8 += 3;
      v7 -= 24;
    }
    while (v7);
  }
  v13 = v20;
  v21 = (v20 - v4) / 24;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&v21, (char *)&v22, 8);
  if (v20 == v4)
  {
    if (!v4)
      goto LABEL_28;
    goto LABEL_27;
  }
  v14 = 0;
  do
  {
    LODWORD(__src) = 2;
    sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
    sub_20B42B554((_QWORD *)a1);
    sub_20B15D17C(a1, (uint64_t)&v4[v14]);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v15 + 10) = *(_QWORD *)(a1 + 32) - v15 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
    v14 += 24;
  }
  while (24 * ((v20 - v4) / 24) != v14);
  if (v4)
  {
    do
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v13 -= 24;
    }
    while (v13 != v4);
    v4 = (char *)*((_QWORD *)&v25[1] + 1);
    v3 = *(void ***)&v25[0];
LABEL_27:
    operator delete(v4);
  }
LABEL_28:
  if (v3)
  {
    for (i = (void **)*((_QWORD *)&v25[0] + 1); i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v3);
  }
}

void sub_20B15D104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15D118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15D12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15D140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15D154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15D168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15D17C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  CFTypeID TypeID;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const void *v12;
  CFTypeID v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const void *v19;
  const __CFBoolean *v20;
  CFTypeID v21;
  __int16 v22;
  __int16 v23;
  const void *v24;
  CFTypeID v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  const __CFArray *v31;
  std::string::size_type size;
  std::string::size_type v33;
  std::string *p_p;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::string::size_type v53;
  char *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::string::size_type v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::string::size_type v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  size_t v71;
  char *v72;
  char *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t data_low;
  uint64_t v91;
  unint64_t *v92;
  __int128 v93;
  __int128 v94;
  __int128 theArray;
  unint64_t __src;
  __int128 v97;
  std::string __p;
  char *v99;
  char *v100;
  __int128 v101;

  LOWORD(__p.__r_.__value_.__l.__data_) = *(_WORD *)a2;
  v4 = a1 + 24;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__p, &__p.__r_.__value_.__s.__data_[2], 2);
  switch(*(_WORD *)a2)
  {
    case 0:
      v5 = *(const void **)(a2 + 8);
      if (v5 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v5) == TypeID))
      {
        sub_20B15B25C(&v101, *(CFTypeRef *)(a2 + 8));
        v94 = v101;
        if (*((_QWORD *)&v101 + 1))
        {
          v7 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
          v9 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
          if (*((_QWORD *)&v101 + 1))
          {
            v10 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
        }
      }
      else
      {
        v94 = 0uLL;
      }
      sub_20B15B3A0(&theArray, (uint64_t)&v94);
      sub_20B4F5FA8((CFNumberRef *)&theArray);
      __p.__r_.__value_.__s.__data_[0] = __src;
      __p.__r_.__value_.__s.__data_[8] = __src;
      v99 = 0;
      v100 = 0;
      __p.__r_.__value_.__r.__words[2] = 0;
      v70 = (void *)v97;
      v71 = *((_QWORD *)&v97 + 1) - v97;
      if (*((_QWORD *)&v97 + 1) != (_QWORD)v97)
      {
        if ((v71 & 0x8000000000000000) != 0)
          sub_20AEC60B8();
        v72 = (char *)operator new(*((_QWORD *)&v97 + 1) - v97);
        v73 = &v72[v71];
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v72;
        v100 = &v72[v71];
        memcpy(v72, v70, v71);
        v99 = v73;
      }
      if (v70)
      {
        *((_QWORD *)&v97 + 1) = v70;
        operator delete(v70);
      }
      v74 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v75 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v77 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
      if (*((_QWORD *)&v94 + 1))
      {
        v78 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      LODWORD(__src) = 2;
      sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
      sub_20B42B554((_QWORD *)a1);
      LOBYTE(__src) = __p.__r_.__value_.__s.__data_[0];
      sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
      sub_20B0FEDB0(__p.__r_.__value_.__s.__data_[0], (uint64_t)&__p, a1);
      v80 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
      *(_QWORD *)(v80 + 10) = *(_QWORD *)(a1 + 32) - v80 - 18;
      *(_QWORD *)(a1 + 56) -= 8;
      v81 = (void *)__p.__r_.__value_.__r.__words[2];
      if (!__p.__r_.__value_.__r.__words[2])
        return;
      v99 = (char *)__p.__r_.__value_.__r.__words[2];
      goto LABEL_145;
    case 1:
      sub_20B4EE3FC(*(_QWORD *)(a2 + 8), &__p);
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      __src = size;
      sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v97, 8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v33 = __p.__r_.__value_.__l.__size_;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0] && __p.__r_.__value_.__l.__size_)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360))
          {
            abort();
          }
          p_p = 0;
        }
      }
      else
      {
        v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        p_p = &__p;
      }
      sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)p_p, (char *)p_p + v33, v33);
      if (!(_BYTE)v99 || (SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v81 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_145:
      operator delete(v81);
      return;
    case 2:
      v20 = *(const __CFBoolean **)(a2 + 8);
      if (v20 && (v21 = CFBooleanGetTypeID(), CFGetTypeID(v20) == v21))
      {
        v22 = CFBooleanGetValue(v20) != 0;
        v23 = 1;
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = v22 | (v23 << 8);
      sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&__p, &__p.__r_.__value_.__s.__data_[1], 1);
      return;
    case 3:
      v24 = *(const void **)(a2 + 8);
      if (v24 && (v25 = CFArrayGetTypeID(), CFGetTypeID(v24) == v25))
      {
        sub_20B15B4B0(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v26 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v28 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v29 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
        v31 = (const __CFArray *)theArray;
      }
      else
      {
        v31 = 0;
        theArray = 0uLL;
      }
      memset(&__p, 0, sizeof(__p));
      Count = CFArrayGetCount(v31);
      sub_20B15AE88(&__p.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray, i);
          sub_20B15B754(&v101, ValueAtIndex);
          v93 = v101;
          if (*((_QWORD *)&v101 + 1))
          {
            v48 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            v50 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
            if (*((_QWORD *)&v101 + 1))
            {
              v51 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
          }
          sub_20B44FB7C((uint64_t)&__src, (uint64_t)&v93);
          v53 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v54 = sub_20B15B5F4(&__p.__r_.__value_.__l.__data_, (uint64_t)&__src);
            v55 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v54;
            if (*((_QWORD *)&v97 + 1))
            {
              v56 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
          }
          else
          {
            *(_WORD *)__p.__r_.__value_.__l.__size_ = __src;
            *(_OWORD *)(v53 + 8) = v97;
            v97 = 0uLL;
            __p.__r_.__value_.__l.__size_ = v53 + 24;
          }
          v58 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
          if (*((_QWORD *)&v93 + 1))
          {
            v59 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
        }
      }
      __src = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
      sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v97, 8);
      v61 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        v62 = 24 * ((int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          LODWORD(v101) = 2;
          sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&v101, (char *)&v101 + 4, 4);
          v63 = v101;
          sub_20B42B554((_QWORD *)a1);
          sub_20B15D17C(a1, v61, v63);
          v64 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
          *(_QWORD *)(v64 + 10) = *(_QWORD *)(a1 + 32) - v64 - 18;
          *(_QWORD *)(a1 + 56) -= 8;
          v61 += 24;
          v62 -= 24;
        }
        while (v62);
        v61 = __p.__r_.__value_.__r.__words[0];
      }
      if (v61)
      {
        v65 = __p.__r_.__value_.__l.__size_;
        v66 = (void *)v61;
        if (__p.__r_.__value_.__l.__size_ != v61)
        {
          do
          {
            v67 = *(std::__shared_weak_count **)(v65 - 8);
            if (v67)
            {
              p_shared_owners = (unint64_t *)&v67->__shared_owners_;
              do
                v69 = __ldaxr(p_shared_owners);
              while (__stlxr(v69 - 1, p_shared_owners));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
            v65 -= 24;
          }
          while (v65 != v61);
          v66 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v61;
        operator delete(v66);
      }
      v82 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (!*((_QWORD *)&theArray + 1))
        return;
      v83 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      goto LABEL_136;
    case 4:
      v12 = *(const void **)(a2 + 8);
      if (v12 && (v13 = CFDictionaryGetTypeID(), CFGetTypeID(v12) == v13))
      {
        sub_20AEEC3E8(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v14 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          v16 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v17 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
        v19 = (const void *)theArray;
      }
      else
      {
        v19 = 0;
        theArray = 0uLL;
      }
      sub_20AEEC3E8(&__p, v19);
      v35 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v36 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
        v38 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v39 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        do
          v41 = __ldxr(v36);
        while (__stxr(v41 + 1, v36));
        v101 = v35;
        do
          v42 = __ldxr(v36);
        while (__stxr(v42 + 1, v36));
        do
          v43 = __ldaxr(v36);
        while (__stlxr(v43 - 1, v36));
        if (!v43)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
        }
        do
          v44 = __ldaxr(v36);
        while (__stlxr(v44 - 1, v36));
        if (!v44)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
        }
      }
      else
      {
        v101 = __p.__r_.__value_.__r.__words[0];
      }
      sub_20B450618(&__src, (uint64_t)&v101);
      v85 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
      if (*((_QWORD *)&v101 + 1))
      {
        v86 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      if (*((_QWORD *)&theArray + 1))
      {
        v88 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&theArray + 1) + 16))(*((_QWORD *)&theArray + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&theArray + 1));
        }
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 2;
      sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&__p, &__p.__r_.__value_.__s.__data_[4], 4);
      data_low = LODWORD(__p.__r_.__value_.__l.__data_);
      sub_20B42B554((_QWORD *)a1);
      sub_20B15CE00(a1, &__src, data_low);
      v91 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
      *(_QWORD *)(v91 + 10) = *(_QWORD *)(a1 + 32) - v91 - 18;
      *(_QWORD *)(a1 + 56) -= 8;
      v82 = (std::__shared_weak_count *)v97;
      if (!(_QWORD)v97)
        return;
      v92 = (unint64_t *)(v97 + 8);
      do
        v84 = __ldaxr(v92);
      while (__stlxr(v84 - 1, v92));
LABEL_136:
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
      return;
    default:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 281, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_20B532360);
      abort();
  }
}

void sub_20B15DB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15DB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_20AEC147C(v6 - 80);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15DBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15DBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15DBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  sub_20AEC147C((uint64_t)&a14);
  sub_20AEC147C((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_20B15DC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  if ((_BYTE)a26)
  {
    if (a25 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B15DCC8(_DWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v16 = v4;
  v7 = atomic_load((unint64_t *)(v4 + 88));
  if (v7 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once((std::once_flag::_State_type *)(v4 + 88), &v17, (void (__cdecl *)(void *))sub_20B417E0C);
  }
  sub_20B450618(&v14, v4 + 48);
  sub_20B15DE0C(a1, (uint64_t)&v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v13)
  {
    v11 = (unint64_t *)&v13->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20B15DDDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15DDF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15DE0C(_DWORD *a1, uint64_t a2)
{
  void **v3;
  char *v4;
  void (*v5)(_DWORD *, uint64_t *);
  void **v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void **i;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  _OWORD v22[2];
  __int128 v23;
  int v24;

  v23 = 0u;
  memset(v22, 0, sizeof(v22));
  sub_20B450760((uint64_t)&v18, a2);
  v3 = (void **)v18;
  *(_QWORD *)&v22[0] = v18;
  *(_OWORD *)((char *)v22 + 8) = v19;
  v4 = v20;
  *((_QWORD *)&v22[1] + 1) = v20;
  v17 = (char *)v21;
  v23 = v21;
  v5 = *(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a1 + 120);
  v6 = (void **)v19;
  v7 = ((uint64_t)v19 - v18) / 24;
  v18 = v7;
  v5(a1, &v18);
  if (v6 != v3)
  {
    v8 = 24 * v7;
    v9 = (char *)v3;
    do
    {
      (*(void (**)(_DWORD *, char *))(*(_QWORD *)a1 + 144))(a1, v9);
      v9 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  v10 = v17;
  v18 = (v17 - v4) / 24;
  (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v18);
  if (v17 == v4)
  {
    if (!v4)
      goto LABEL_23;
    goto LABEL_22;
  }
  v11 = 0;
  do
  {
    v12 = a1[2];
    v24 = 2;
    (*(void (**)(_DWORD *, int *))(*(_QWORD *)a1 + 104))(a1, &v24);
    if (v12 < 1)
    {
      sub_20B15E0E8((uint64_t)a1, (std::string::size_type)&v4[v11]);
    }
    else
    {
      if (v12 == 2)
      {
        v24 = 2;
        (*(void (**)(_DWORD *, int *))(*(_QWORD *)a1 + 104))(a1, &v24);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
      sub_20B15E0E8((uint64_t)a1, (std::string::size_type)&v4[v11]);
      (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
    }
    v11 += 24;
  }
  while (24 * ((v17 - v4) / 24) != v11);
  if (v4)
  {
    do
    {
      v13 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v10 -= 24;
    }
    while (v10 != v4);
    v4 = (char *)*((_QWORD *)&v22[1] + 1);
    v3 = *(void ***)&v22[0];
LABEL_22:
    operator delete(v4);
  }
LABEL_23:
  if (v3)
  {
    for (i = (void **)*((_QWORD *)&v22[0] + 1); i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v3);
  }
}

void sub_20B15E084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15E098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15E0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15E0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15E0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15E0E8(uint64_t a1, std::string::size_type a2)
{
  const void *v4;
  CFTypeID TypeID;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  const void *v11;
  CFTypeID v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  const __CFBoolean *v19;
  CFTypeID v20;
  __int16 v21;
  __int16 v22;
  const void *v23;
  CFTypeID v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  const __CFArray *v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::string::size_type v49;
  char *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::string::size_type v57;
  int64_t v58;
  int v59;
  uint64_t v60;
  void *v61;
  size_t v62;
  std::string::size_type v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  std::string::size_type v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  int v85;
  uint64_t data_low;
  unint64_t *v87;
  __int128 v88;
  __int128 v89;
  __int128 theArray;
  unint64_t p_p;
  __int128 v92;
  std::string __p;
  std::string::size_type v94;
  std::string::size_type v95;
  __int128 v96;

  __p.__r_.__value_.__r.__words[0] = a2;
  sub_20B15EBF4((_BYTE *)a1, (unsigned __int16 **)&__p);
  switch(*(_WORD *)a2)
  {
    case 0:
      v4 = *(const void **)(a2 + 8);
      if (v4 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v4) == TypeID))
      {
        sub_20B15B25C(&v96, *(CFTypeRef *)(a2 + 8));
        v89 = v96;
        if (*((_QWORD *)&v96 + 1))
        {
          v6 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
          do
            v7 = __ldxr(v6);
          while (__stxr(v7 + 1, v6));
          v8 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
          if (*((_QWORD *)&v96 + 1))
          {
            v9 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 - 1, v9));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
        }
      }
      else
      {
        v89 = 0uLL;
      }
      sub_20B15B3A0(&theArray, (uint64_t)&v89);
      sub_20B4F5FA8((CFNumberRef *)&theArray);
      __p.__r_.__value_.__s.__data_[0] = p_p;
      __p.__r_.__value_.__s.__data_[8] = p_p;
      v94 = 0;
      v95 = 0;
      __p.__r_.__value_.__r.__words[2] = 0;
      v61 = (void *)v92;
      v62 = *((_QWORD *)&v92 + 1) - v92;
      if (*((_QWORD *)&v92 + 1) != (_QWORD)v92)
      {
        if ((v62 & 0x8000000000000000) != 0)
          sub_20AEC60B8();
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)operator new(*((_QWORD *)&v92 + 1) - v92);
        v94 = __p.__r_.__value_.__r.__words[2];
        v63 = __p.__r_.__value_.__r.__words[2] + v62;
        v95 = __p.__r_.__value_.__r.__words[2] + v62;
        memcpy((void *)__p.__r_.__value_.__r.__words[2], v61, v62);
        v94 = v63;
      }
      if (v61)
      {
        *((_QWORD *)&v92 + 1) = v61;
        operator delete(v61);
      }
      v64 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v65 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
      if (*((_QWORD *)&v89 + 1))
      {
        v68 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = *(_QWORD *)a1;
      *(_QWORD *)&v96 = *(_QWORD *)(a1 + 8);
      v71 = v96;
      LODWORD(p_p) = 2;
      (*(void (**)(uint64_t, unint64_t *))(v70 + 104))(a1, &p_p);
      if (v71 < 1)
      {
        p_p = (unint64_t)&__p;
        sub_20B0FFA54((_BYTE *)a1, (_BYTE **)&p_p);
        sub_20B0FF8E8(__p.__r_.__value_.__s.__data_[0], (uint64_t)&__p, a1);
      }
      else
      {
        sub_20B15ED2C((int *)&v96, (_BYTE *)a1, &__p);
      }
      if (__p.__r_.__value_.__r.__words[2])
      {
        v94 = __p.__r_.__value_.__r.__words[2];
        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
      }
      return;
    case 1:
      sub_20B4EE3FC(*(_QWORD *)(a2 + 8), &__p);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 144))(a1, &__p);
      if ((_BYTE)v94 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    case 2:
      v19 = *(const __CFBoolean **)(a2 + 8);
      if (v19 && (v20 = CFBooleanGetTypeID(), CFGetTypeID(v19) == v20))
      {
        v21 = CFBooleanGetValue(v19) != 0;
        v22 = 1;
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = v21 | (v22 << 8);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 32))(a1, &__p);
      return;
    case 3:
      v23 = *(const void **)(a2 + 8);
      if (v23 && (v24 = CFArrayGetTypeID(), CFGetTypeID(v23) == v24))
      {
        sub_20B15B4B0(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v25 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
        }
        v30 = (const __CFArray *)theArray;
      }
      else
      {
        v30 = 0;
        theArray = 0uLL;
      }
      memset(&__p, 0, sizeof(__p));
      Count = CFArrayGetCount(v30);
      sub_20B15AE88(&__p.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray, i);
          sub_20B15B754(&v96, ValueAtIndex);
          v88 = v96;
          if (*((_QWORD *)&v96 + 1))
          {
            v44 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            v46 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
            if (*((_QWORD *)&v96 + 1))
            {
              v47 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
          }
          sub_20B44FB7C((uint64_t)&p_p, (uint64_t)&v88);
          v49 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v50 = sub_20B15B5F4(&__p.__r_.__value_.__l.__data_, (uint64_t)&p_p);
            v51 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v50;
            if (*((_QWORD *)&v92 + 1))
            {
              v52 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
          }
          else
          {
            *(_WORD *)__p.__r_.__value_.__l.__size_ = p_p;
            *(_OWORD *)(v49 + 8) = v92;
            v92 = 0uLL;
            __p.__r_.__value_.__l.__size_ = v49 + 24;
          }
          v54 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
          if (*((_QWORD *)&v88 + 1))
          {
            v55 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
        }
      }
      p_p = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &p_p);
      v57 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        v58 = 24 * ((int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          v59 = *(_DWORD *)(a1 + 8);
          LODWORD(v96) = 2;
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 104))(a1, &v96);
          v60 = v96;
          if (v59 < 1)
          {
            sub_20B15E0E8(a1, v57, v96);
          }
          else
          {
            if (v59 == 2)
            {
              LODWORD(v96) = 2;
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 104))(a1, &v96);
            }
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
            sub_20B15E0E8(a1, v57, v60);
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          }
          v57 += 24;
          v58 -= 24;
        }
        while (v58);
        v57 = __p.__r_.__value_.__r.__words[0];
      }
      if (v57)
      {
        v72 = __p.__r_.__value_.__l.__size_;
        v73 = (void *)v57;
        if (__p.__r_.__value_.__l.__size_ != v57)
        {
          do
          {
            v74 = *(std::__shared_weak_count **)(v72 - 8);
            if (v74)
            {
              p_shared_owners = (unint64_t *)&v74->__shared_owners_;
              do
                v76 = __ldaxr(p_shared_owners);
              while (__stlxr(v76 - 1, p_shared_owners));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
            }
            v72 -= 24;
          }
          while (v72 != v57);
          v73 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v57;
        operator delete(v73);
      }
      v77 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (!*((_QWORD *)&theArray + 1))
        return;
      v78 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      break;
    case 4:
      v11 = *(const void **)(a2 + 8);
      if (v11 && (v12 = CFDictionaryGetTypeID(), CFGetTypeID(v11) == v12))
      {
        sub_20AEEC3E8(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v13 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
          v15 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v16 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
        v18 = (const void *)theArray;
      }
      else
      {
        v18 = 0;
        theArray = 0uLL;
      }
      sub_20AEEC3E8(&__p, v18);
      v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v32 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        v34 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v35 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        do
          v37 = __ldxr(v32);
        while (__stxr(v37 + 1, v32));
        v96 = v31;
        do
          v38 = __ldxr(v32);
        while (__stxr(v38 + 1, v32));
        do
          v39 = __ldaxr(v32);
        while (__stlxr(v39 - 1, v32));
        if (!v39)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
        }
        do
          v40 = __ldaxr(v32);
        while (__stlxr(v40 - 1, v32));
        if (!v40)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
        }
      }
      else
      {
        v96 = __p.__r_.__value_.__r.__words[0];
      }
      sub_20B450618(&p_p, (uint64_t)&v96);
      v80 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
      if (*((_QWORD *)&v96 + 1))
      {
        v81 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      if (*((_QWORD *)&theArray + 1))
      {
        v83 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&theArray + 1) + 16))(*((_QWORD *)&theArray + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&theArray + 1));
        }
      }
      v85 = *(_DWORD *)(a1 + 8);
      LODWORD(__p.__r_.__value_.__l.__data_) = 2;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 104))(a1, &__p);
      data_low = LODWORD(__p.__r_.__value_.__l.__data_);
      if (v85 < 1)
      {
        sub_20B15DE0C(a1, &p_p, LODWORD(__p.__r_.__value_.__l.__data_));
      }
      else
      {
        if (v85 == 2)
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 2;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 104))(a1, &__p);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        sub_20B15DE0C(a1, &p_p, data_low);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      }
      v77 = (std::__shared_weak_count *)v92;
      if (!(_QWORD)v92)
        return;
      v87 = (unint64_t *)(v92 + 8);
      do
        v79 = __ldaxr(v87);
      while (__stlxr(v79 - 1, v87));
      break;
    default:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 281, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_20B532360);
      abort();
  }
  if (!v79)
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
  }
}

void sub_20B15EAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15EAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_20AEC147C(v6 - 64);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15EAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15EAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  if ((_BYTE)a26)
  {
    if (a25 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B15EBA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  sub_20AEC3318((uint64_t)va2);
  sub_20AEC147C((uint64_t)va);
  sub_20B0B8EC0((void **)va3);
  sub_20AEC147C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B15EBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20B0B8EC0(va1);
  sub_20AEC147C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B15EBF4(_BYTE *a1, unsigned __int16 **a2)
{
  unsigned __int16 *v3;
  void *__p[2];
  char v5;
  _WORD v6[12];
  int v7;
  char v8;
  char *v9;

  if ((a1[12] & 2) != 0)
  {
    v3 = *a2;
    v7 = 0;
    sub_20B15AFA8((uint64_t)&v9, (uint64_t)v6, v3);
    if (v7 == -1)
      sub_20AECFAB8();
    v9 = &v8;
    ((void (*)(void **__return_ptr, char **, _WORD *))off_24C40DC60[v7])(__p, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _WORD *))off_24C40DC48[v7])(&v9, v6);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6[0] = **a2;
    (*(void (**)(_BYTE *, _WORD *))(*(_QWORD *)a1 + 96))(a1, v6);
  }
}

void sub_20B15ECE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B15ED04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15ED18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B15ED2C(int *a1, _BYTE *a2, _BYTE *a3)
{
  int v5;
  int v8;
  _BYTE *v9;

  v5 = *a1;
  if (*a1 == 2)
  {
    v8 = 2;
    (*(void (**)(_BYTE *, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
    v5 = *a1;
  }
  if (v5 < 1)
  {
    v9 = a3;
    sub_20B0FFA54(a2, &v9);
    return sub_20B0FF8E8(*a3, (uint64_t)a3, (uint64_t)a2);
  }
  else
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v9 = a3;
    sub_20B0FFA54(a2, &v9);
    sub_20B0FF8E8(*a3, (uint64_t)a3, (uint64_t)a2);
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
  }
}

uint64_t sub_20B15EE04(uint64_t a1, uint64_t *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_20B50AC94(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_20B4552C4(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v6 = 2;
  else
    v6 = v12;
  if (v6 < 2)
    sub_20B15EF00((uint64_t)&v11, a1, a2, v6);
  else
    sub_20B15F004(a1, a2, 2u);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

void sub_20B15EF00(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  sub_20B416888(&v17);
  sub_20B15F560(a2, &v17, a4);
  v8 = v17;
  v7 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (std::__shared_weak_count *)a3[1];
  *a3 = v8;
  a3[1] = (uint64_t)v7;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_20B15EFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B15F004(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  int v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  int v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void ***v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  void ***v20;
  void **v21[2];
  __int128 v22;

  if (a3 > 2)
  {
    v21[0] = 0;
    v21[1] = 0;
    v20 = v21;
    sub_20B4F4BA0(&v20, &v22);
    v19 = v22;
    sub_20AEC833C((uint64_t)&v20, (char *)v21[0]);
    sub_20B15F2AC(a1, (uint64_t)&v19);
    sub_20B15F44C((uint64_t)a2, (uint64_t)&v19);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "dictionary";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (_QWORD *)operator new();
    *v6 = 0;
    v6[1] = 0;
    *(_QWORD *)&v22 = v6;
    v7 = (unsigned __int8 *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B4541AC((uint64_t)&v20, v7);
    v8 = *(unsigned __int8 *)v6;
    *(_BYTE *)v6 = (_BYTE)v20;
    LOBYTE(v20) = v8;
    v9 = (void **)v6[1];
    v6[1] = v21[0];
    v21[0] = v9;
    sub_20B4181DC(v21, v8);
    v10 = operator new();
    sub_20B415444(v10, (uint64_t *)&v22);
    v11 = (_QWORD *)operator new();
    *v11 = &off_24C41B240;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v10;
    v12 = (std::__shared_weak_count *)a2[1];
    *a2 = v10;
    a2[1] = (uint64_t)v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (void ***)v22;
    *(_QWORD *)&v22 = 0;
    if (v15)
    {
      sub_20B4181DC(v15 + 1, *(unsigned __int8 *)v15);
      MEMORY[0x20BD3583C](v15, 0x1022C40B06DCE69);
    }
  }
}

void sub_20B15F21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20AEC833C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20B15F234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t **v7;
  va_list va;

  va_start(va, a7);
  sub_20B416CE0(v7);
  MEMORY[0x20BD3583C](v7, 0x10E2C40590DAB7CLL);
  sub_20B4F9938((void ****)va);
  _Unwind_Resume(a1);
}

void sub_20B15F270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B4F9938((void ****)va);
  _Unwind_Resume(a1);
}

void sub_20B15F284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B15F298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B4F9938((void ****)va);
  _Unwind_Resume(a1);
}

void sub_20B15F2AC(uint64_t a1, uint64_t a2)
{
  int v4;
  void ***v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void ***v16;
  void ***v17;
  void ***v18;
  __int128 v19;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "dictionary";
  *(_QWORD *)(a1 + 96) = 10;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (void ***)operator new();
  *v5 = 0;
  v5[1] = 0;
  v18 = v5;
  v6 = (unsigned __int8 *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_20B4541AC((uint64_t)&v19, v6);
  v7 = *(unsigned __int8 *)v5;
  *(_BYTE *)v5 = v19;
  LOBYTE(v19) = v7;
  v8 = v5[1];
  v5[1] = (void **)*((_QWORD *)&v19 + 1);
  *((_QWORD *)&v19 + 1) = v8;
  sub_20B4181DC((void ***)&v19 + 1, v7);
  v17 = v5;
  sub_20B4515F4((uint64_t *)&v17, &v19);
  v9 = v19;
  v19 = 0uLL;
  v10 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v18;
  if (v18)
  {
    sub_20B4181DC(v18 + 1, *(unsigned __int8 *)v18);
    MEMORY[0x20BD3583C](v16, 0x1022C40B06DCE69);
  }
}

void sub_20B15F424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B4F9938((void ****)va);
  _Unwind_Resume(a1);
}

void sub_20B15F438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B4F9938((void ****)va);
  _Unwind_Resume(a1);
}

void sub_20B15F44C(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;

  sub_20AEEC2D8(&v13, a2);
  sub_20B416B18((uint64_t *)&v15, (uint64_t)&v13, 1);
  v3 = v15;
  v15 = 0uLL;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20B15F54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B15F560(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  int v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  int v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void ***v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  void ***v20;
  void **v21[2];
  __int128 v22;

  if (a3 > 2)
  {
    v21[0] = 0;
    v21[1] = 0;
    v20 = v21;
    sub_20B4F4BA0(&v20, &v22);
    v19 = v22;
    sub_20AEC833C((uint64_t)&v20, (char *)v21[0]);
    sub_20B15F2AC(a1, (uint64_t)&v19);
    sub_20B15F808((uint64_t)a2, (uint64_t)&v19);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "dictionary";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (_QWORD *)operator new();
    *v6 = 0;
    v6[1] = 0;
    *(_QWORD *)&v22 = v6;
    v7 = (unsigned __int8 *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B4541AC((uint64_t)&v20, v7);
    v8 = *(unsigned __int8 *)v6;
    *(_BYTE *)v6 = (_BYTE)v20;
    LOBYTE(v20) = v8;
    v9 = (void **)v6[1];
    v6[1] = v21[0];
    v21[0] = v9;
    sub_20B4181DC(v21, v8);
    v10 = operator new();
    sub_20B415444(v10, (uint64_t *)&v22);
    v11 = (_QWORD *)operator new();
    *v11 = &off_24C41B240;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v10;
    v12 = (std::__shared_weak_count *)a2[1];
    *a2 = v10;
    a2[1] = (uint64_t)v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (void ***)v22;
    *(_QWORD *)&v22 = 0;
    if (v15)
    {
      sub_20B4181DC(v15 + 1, *(unsigned __int8 *)v15);
      MEMORY[0x20BD3583C](v15, 0x1022C40B06DCE69);
    }
  }
}

void sub_20B15F778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20AEC833C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20B15F790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t **v7;
  va_list va;

  va_start(va, a7);
  sub_20B416CE0(v7);
  MEMORY[0x20BD3583C](v7, 0x10E2C40590DAB7CLL);
  sub_20B4F9938((void ****)va);
  _Unwind_Resume(a1);
}

void sub_20B15F7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B4F9938((void ****)va);
  _Unwind_Resume(a1);
}

void sub_20B15F7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B15F7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B4F9938((void ****)va);
  _Unwind_Resume(a1);
}

void sub_20B15F808(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;

  sub_20AEEC2D8(&v13, a2);
  sub_20B416B18((uint64_t *)&v15, (uint64_t)&v13, 1);
  v3 = v15;
  v15 = 0uLL;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20B15F908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B15F91C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  char v8;

  v7 = 2;
  sub_20B518854(a1[6], &v7);
  if (v7 <= 1)
  {
    sub_20B15FB0C((uint64_t)&v8, a1, a2);
    return a1;
  }
  else
  {
    sub_20B0DD290(a1 + 2);
    sub_20B15F9F4(a1, (uint64_t)a2);
    v4 = a1[4];
    v5 = *(_QWORD *)(v4 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v4 - 8);
    if (v5)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v5);
    a1[4] -= 16;
    return a1;
  }
}

void sub_20B15F9F4(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_20B4F4BA0(&v8, &v10);
  v7 = v10;
  sub_20AEC833C((uint64_t)&v8, v9[0]);
  sub_20B15FC10(a1, (uint64_t)&v7);
  sub_20B15F44C(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20B15FAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20AEC833C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20B15FAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B15FB0C(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_20B416888(&v15);
  sub_20B162A0C(a2, (uint64_t)&v15);
  v6 = v15;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)a3[1];
  *a3 = v6;
  a3[1] = (uint64_t)v5;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B15FBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B15FC10(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void *v31;
  __int128 v32;
  void *v33[2];
  void *__p[2];
  __int128 v35;
  unsigned int v36;

  *(_OWORD *)__p = 0u;
  v35 = 0u;
  *(_OWORD *)v33 = 0u;
  sub_20B0DDA1C((uint64_t)a1, (char **)v33);
  *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)__p[1]) >> 3);
  sub_20B518BE4(a1[6], &v32);
  v4 = (char *)v35;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)__p[1]) >> 3);
  v6 = v32 - v5;
  if ((unint64_t)v32 <= v5)
  {
    if ((unint64_t)v32 >= v5)
    {
      v7 = (char *)__p[1];
      v8 = v35 - (unint64_t)__p[1];
      if ((void *)v35 == __p[1])
        goto LABEL_22;
    }
    else
    {
      v9 = (char *)__p[1] + 24 * v32;
      while (v4 != v9)
      {
        v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v4 -= 24;
      }
      *(_QWORD *)&v35 = v9;
      v7 = (char *)__p[1];
      v8 = v9 - (char *)__p[1];
      if (v9 == __p[1])
        goto LABEL_22;
    }
  }
  else
  {
    sub_20B160170((char **)&__p[1], v6);
    v7 = (char *)__p[1];
    v8 = v35 - (unint64_t)__p[1];
    if ((void *)v35 == __p[1])
      goto LABEL_22;
  }
  v13 = 24 * (v8 / 24);
  do
  {
    while (1)
    {
      v36 = 2;
      sub_20B518854(a1[6], &v36);
      if (v36 > 1)
        break;
      sub_20B160348((uint64_t)&v36, a1, (uint64_t)v7);
      v7 += 24;
      v13 -= 24;
      if (!v13)
        goto LABEL_22;
    }
    sub_20B0DD290(a1 + 2);
    sub_20B160500(a1, (uint64_t)v7);
    v14 = a1[4];
    v15 = *(_QWORD *)(v14 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v14 - 8);
    if (v15)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v15);
    a1[4] -= 16;
    v7 += 24;
    v13 -= 24;
  }
  while (v13);
LABEL_22:
  sub_20B450D84((uint64_t *)v33, (void ***)&v32);
  v16 = v32;
  v32 = 0uLL;
  v17 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (char *)__p[1];
  if (__p[1])
  {
    v24 = (char *)v35;
    v25 = __p[1];
    if ((void *)v35 != __p[1])
    {
      do
      {
        v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 24;
      }
      while (v24 != v23);
      v25 = __p[1];
    }
    *(_QWORD *)&v35 = v23;
    operator delete(v25);
  }
  v29 = (void **)v33[0];
  if (v33[0])
  {
    v30 = (void **)v33[1];
    v31 = v33[0];
    if (v33[1] != v33[0])
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != v29);
      v31 = v33[0];
    }
    v33[1] = v29;
    operator delete(v31);
  }
}

void sub_20B15FF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15FF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15FF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15FF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B15FF98(_QWORD *a1, char **a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  char v20;

  v18 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20B518BE4(a1[6], &v18);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  v6 = v18 - v5;
  if (v18 <= v5)
  {
    if (v18 >= v5)
    {
      v7 = *a2;
      v10 = v4 - v7;
      if (v4 == v7)
        return;
    }
    else
    {
      v11 = (uint64_t)&(*a2)[24 * v18];
      while (v4 != (char *)v11)
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v4 -= 24;
      }
      a2[1] = (char *)v11;
      v7 = *a2;
      v10 = v11 - (_QWORD)v7;
      if ((char *)v11 == v7)
        return;
    }
  }
  else
  {
    sub_20B160170(a2, v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    v10 = v8 - v7;
    if (v8 == v7)
      return;
  }
  v15 = 24 * (v10 / 24);
  do
  {
    while (1)
    {
      v19 = 2;
      sub_20B518854(a1[6], &v19);
      if (v19 > 1)
        break;
      sub_20B160348((uint64_t)&v20, a1, (uint64_t)v7);
      v7 += 24;
      v15 -= 24;
      if (!v15)
        return;
    }
    sub_20B0DD290(a1 + 2);
    sub_20B160500(a1, v7, 2);
    v16 = a1[4];
    v17 = *(_QWORD *)(v16 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v16 - 8);
    if (v17)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v17);
    a1[4] -= 16;
    v7 += 24;
    v15 -= 24;
  }
  while (v15);
}

void sub_20B160170(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  __int16 v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;

  v4 = a1[1];
  v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v4[24 * a2];
      v12 = v4 + 8;
      v13 = 24 * a2;
      do
      {
        *v12 = 0;
        v12[1] = 0;
        v12 += 3;
        v13 -= 24;
      }
      while (v13);
      a1[1] = v11;
    }
    else
    {
      a1[1] = v4;
    }
    return;
  }
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v7 = v6 + a2;
  if (v6 + a2 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
  if (2 * v8 > v7)
    v7 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v7;
  if (v9)
  {
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v10 = (char *)operator new(24 * v9);
  }
  else
  {
    v10 = 0;
  }
  v14 = &v10[24 * v6];
  v15 = &v10[24 * v9];
  v16 = 24 * a2;
  v17 = &v14[24 * a2];
  v18 = v14 + 8;
  do
  {
    *v18 = 0;
    v18[1] = 0;
    v18 += 3;
    v16 -= 24;
  }
  while (v16);
  v19 = *a1;
  v20 = a1[1];
  if (v20 == *a1)
  {
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (!v20)
      return;
LABEL_34:
    operator delete(v20);
    return;
  }
  do
  {
    v21 = *((_WORD *)v20 - 12);
    v20 -= 24;
    *((_WORD *)v14 - 12) = v21;
    v14 -= 24;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(v20 + 8);
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = 0;
  }
  while (v20 != v19);
  v22 = *a1;
  v20 = a1[1];
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v15;
  if (v20 != v22)
  {
    do
    {
      v23 = (std::__shared_weak_count *)*((_QWORD *)v20 - 1);
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v20 -= 24;
    }
    while (v20 != v22);
    v20 = v22;
  }
  if (v20)
    goto LABEL_34;
}

void sub_20B160348(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __int16 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int16 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v20 = 0;
  v21 = 0;
  sub_20B162040(a2, (uint64_t)&v19);
  v4 = v19;
  sub_20B161578(&v22, (uint64_t)&v20);
  sub_20B161578(&v18, (uint64_t)&v22);
  v5 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_WORD *)a3 = v4;
  v8 = v18;
  v18 = 0uLL;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_OWORD *)(a3 + 8) = v8;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20B1604BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1604D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1604EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B160500(_QWORD *a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  char *v65;
  char *v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  void *v71[2];
  void *v72;
  void *v73[2];
  uint64_t v74;
  __int128 v75;
  void *v76[2];
  void *__p;
  void *v78;
  _DWORD *v79;

  LOWORD(v76[0]) = 0;
  sub_20B5186C0(a1[6], v76);
  v4 = LOWORD(v76[0]);
  *(_WORD *)a2 = v76[0];
  switch(v4)
  {
    case 0:
      LOBYTE(v76[0]) = 7;
      LOBYTE(v76[1]) = 7;
      v5 = operator new(4uLL);
      __p = v5;
      *v5 = 0;
      v78 = v5 + 1;
      v79 = v5 + 1;
      LODWORD(v73[0]) = 2;
      sub_20B518854(a1[6], v73);
      sub_20B100964((uint64_t)v73, a1, (unsigned __int8 *)v76, v73[0]);
      sub_20B4F6318((uint64_t)v73, (uint64_t)&v76[1]);
      v75 = *(_OWORD *)v73;
      sub_20B160DC8(v71, (uint64_t)&v75);
      v6 = *(_OWORD *)v71;
      v71[0] = 0;
      v71[1] = 0;
      v7 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v6;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v11 = (unint64_t *)((char *)v71[1] + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
      if (*((_QWORD *)&v75 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (__p)
      {
        v78 = __p;
        operator delete(__p);
      }
      return;
    case 1:
      v76[0] = 0;
      v76[1] = 0;
      __p = 0;
      sub_20B518FF8(a1[6], v76);
      sub_20B4EE2F0((uint64_t)v76, (CFStringRef *)v71);
      sub_20B160ED8(v73, (uint64_t)v71);
      v16 = *(_OWORD *)v73;
      v73[0] = 0;
      v73[1] = 0;
      v17 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v16;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = (std::__shared_weak_count *)v73[1];
      if (v73[1])
      {
        v21 = (unint64_t *)((char *)v73[1] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v24 = (unint64_t *)((char *)v71[1] + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (SHIBYTE(__p) < 0)
        operator delete(v76[0]);
      return;
    case 2:
      LOBYTE(v71[0]) = 0;
      sub_20B518F1C(a1[6], v71);
      sub_20B4EE200(v71, (std::__shared_weak_count_vtbl **)v73);
      sub_20B160FE8(v76, (uint64_t)v73);
      v26 = *(_OWORD *)v76;
      v76[0] = 0;
      v76[1] = 0;
      v27 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v26;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)v76[1];
      if (v76[1])
      {
        v31 = (unint64_t *)((char *)v76[1] + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = (std::__shared_weak_count *)v73[1];
      if (!v73[1])
        return;
      v34 = (unint64_t *)((char *)v73[1] + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      break;
    case 3:
      v73[0] = 0;
      v73[1] = 0;
      v74 = 0;
      sub_20B15FF98(a1, (char **)v73);
      v76[1] = 0;
      __p = 0;
      v76[0] = 0;
      sub_20B161318((uint64_t)v76, 0xAAAAAAAAAAAAAAABLL * (((char *)v73[1] - (char *)v73[0]) >> 3));
      sub_20B161410((uint64_t)v73[0], (uint64_t)v73[1], (uint64_t)v76);
      *(_OWORD *)v71 = *(_OWORD *)v76;
      v72 = __p;
      sub_20B1617BC((uint64_t *)v71, (CFMutableArrayRef *)&v75);
      sub_20B1610F8(v76, (uint64_t)&v75);
      v36 = *(_OWORD *)v76;
      v76[0] = 0;
      v76[1] = 0;
      v37 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v36;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = (std::__shared_weak_count *)v76[1];
      if (v76[1])
      {
        v41 = (unint64_t *)((char *)v76[1] + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
      if (*((_QWORD *)&v75 + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = (char *)v71[0];
      if (v71[0])
      {
        v47 = (char *)v71[1];
        v48 = v71[0];
        if (v71[1] != v71[0])
        {
          do
          {
            v49 = (std::__shared_weak_count *)*((_QWORD *)v47 - 1);
            if (v49)
            {
              v50 = (unint64_t *)&v49->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            v47 -= 16;
          }
          while (v47 != v46);
          v48 = v71[0];
        }
        v71[1] = v46;
        operator delete(v48);
      }
      v65 = (char *)v73[0];
      if (v73[0])
      {
        v66 = (char *)v73[1];
        v67 = v73[0];
        if (v73[1] != v73[0])
        {
          do
          {
            v68 = (std::__shared_weak_count *)*((_QWORD *)v66 - 1);
            if (v68)
            {
              v69 = (unint64_t *)&v68->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            v66 -= 24;
          }
          while (v66 != v65);
          v67 = v73[0];
        }
        v73[1] = v65;
        operator delete(v67);
      }
      return;
    case 4:
      v76[1] = 0;
      __p = 0;
      v76[0] = &v76[1];
      sub_20B4F4BA0(v76, v73);
      *(_OWORD *)v71 = *(_OWORD *)v73;
      sub_20AEC833C((uint64_t)v76, (char *)v76[1]);
      LODWORD(v76[0]) = 2;
      sub_20B518854(a1[6], v76);
      if (LODWORD(v76[0]) <= 1)
      {
        sub_20B161A50((uint64_t)v76, (uint64_t)a1, (uint64_t)v71);
      }
      else
      {
        sub_20B0DD290(a1 + 2);
        sub_20B15FC10(a1, v71, 2);
        v52 = a1[4];
        v53 = *(_QWORD *)(v52 - 16)
            - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2)
            + *(_QWORD *)(v52 - 8);
        if (v53)
          (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v53);
        a1[4] -= 16;
      }
      sub_20AEEC2D8(v73, (uint64_t)v71);
      sub_20B161208(v76, (uint64_t)v73);
      v54 = *(_OWORD *)v76;
      v76[0] = 0;
      v76[1] = 0;
      v55 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v54;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = (std::__shared_weak_count *)v76[1];
      if (v76[1])
      {
        v59 = (unint64_t *)((char *)v76[1] + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = (std::__shared_weak_count *)v73[1];
      if (v73[1])
      {
        v62 = (unint64_t *)((char *)v73[1] + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v33 = (std::__shared_weak_count *)v71[1];
      if (!v71[1])
        return;
      v64 = (unint64_t *)((char *)v71[1] + 8);
      do
        v35 = __ldaxr(v64);
      while (__stlxr(v35 - 1, v64));
      break;
    default:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_20B532360);
      abort();
  }
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
}

void sub_20B160C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_20AEC147C((uint64_t)&a13);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B160CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B160CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, char *a20)
{
  sub_20AEC833C((uint64_t)&a19, a20);
  _Unwind_Resume(a1);
}

void sub_20B160CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_20AEC147C((uint64_t)&a17);
  sub_20AEC3C38(&a9);
  sub_20B0B8EC0(&a13);
  _Unwind_Resume(a1);
}

void sub_20B160D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20AEC3C38((void **)va1);
  sub_20B0B8EC0((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B160D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B0B8EC0((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B160D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B160D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  sub_20AEC147C((uint64_t)&a9);
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20B160DC8(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20B15B754(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20B160EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B160ED8(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20B15B754(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20B160FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B160FE8(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20B15B754(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20B1610E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1610F8(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20B15B754(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20B1611F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B161208(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20B15B754(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20B161304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B161318(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      sub_20AEC60B8();
    v4 = *(char **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v11 != v2)
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v11 -= 16;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_20B161410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_20B161578(&v15, i + 8);
      sub_20B161578(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_20B161688((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_20B161548(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B161564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B161578(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20B15B754(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20B161674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20B161688(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_20AEC60B8();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 60)
      sub_20AEC60CC();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[16 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = v9 + 16;
  v11 = &v8[16 * v7];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v14 = *((_OWORD *)v13 - 1);
      v13 -= 16;
      *((_OWORD *)v9 - 1) = v14;
      v9 -= 16;
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v11;
    while (v15 != v13)
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v15 -= 16;
    }
  }
  if (v13)
    operator delete(v13);
  return v10;
}

void sub_20B1617BC(uint64_t *a1@<X0>, CFMutableArrayRef *a2@<X8>)
{
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v5;
  CFMutableArrayRef v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  const void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  CFMutableArrayRef theArray[2];

  Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  sub_20B4EE6C8((std::__shared_weak_count_vtbl **)theArray, Mutable, 0);
  v6 = theArray[0];
  v5 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_6;
  v7 = (unint64_t *)((char *)theArray[1] + 8);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 - 1, v7));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6)
      goto LABEL_30;
  }
  else
  {
LABEL_6:
    if (!v6)
      goto LABEL_30;
  }
  v10 = *a1;
  v11 = a1[1];
  if (*a1 != v11)
  {
    do
    {
      v13 = *(const void **)v10;
      v12 = *(std::__shared_weak_count **)(v10 + 8);
      if (!v12)
        goto LABEL_18;
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        if (v13)
        {
LABEL_19:
          CFArrayAppendValue(theArray[0], v13);
          if (v12)
            goto LABEL_23;
          goto LABEL_27;
        }
      }
      else
      {
LABEL_18:
        if (v13)
          goto LABEL_19;
      }
      *a2 = 0;
      a2[1] = 0;
      if (v12)
      {
LABEL_23:
        v20 = (unint64_t *)&v12->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
LABEL_27:
      if (!v13)
        goto LABEL_31;
      v10 += 16;
    }
    while (v10 != v11);
  }
  *(_OWORD *)a2 = *(_OWORD *)theArray;
  a2 = theArray;
LABEL_30:
  *a2 = 0;
  a2[1] = 0;
LABEL_31:
  v22 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v23 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_20B1619D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (a10)
  {
    v14 = (unint64_t *)&a10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B161A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  *((_QWORD *)&v16 + 1) = 0;
  v17 = 0;
  *(_QWORD *)&v16 = (char *)&v16 + 8;
  sub_20B4F4BA0(&v16, &v18);
  v15 = v18;
  sub_20AEC833C((uint64_t)&v16, *((char **)&v16 + 1));
  sub_20B161BD8(a2, (uint64_t)&v15);
  sub_20B450618(&v16, (uint64_t)&v15);
  v5 = v16;
  v16 = 0uLL;
  v6 = *(std::__shared_weak_count **)(a3 + 8);
  *(_OWORD *)a3 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B161B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B161BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B161BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
  sub_20AEC833C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20B161BD8(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  void **v28;
  void *v29;
  __int128 v30;
  void *v31[2];
  void *__p[2];
  __int128 v33;
  unsigned int v34;

  *(_OWORD *)__p = 0u;
  v33 = 0u;
  *(_OWORD *)v31 = 0u;
  sub_20B0DDA1C(a1, (char **)v31);
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  sub_20B518BE4(*(_QWORD *)(a1 + 48), &v30);
  v4 = (char *)v33;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  v6 = v30 - v5;
  if ((unint64_t)v30 > v5)
  {
    sub_20B160170((char **)&__p[1], v6);
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  if ((unint64_t)v30 >= v5)
  {
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  v9 = (char *)__p[1] + 24 * v30;
  while (v4 != v9)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v4 -= 24;
  }
  *(_QWORD *)&v33 = v9;
  v7 = (char *)__p[1];
  v8 = v9 - (char *)__p[1];
  if (v9 != __p[1])
  {
LABEL_16:
    v13 = 24 * (v8 / 24);
    do
    {
      v34 = 1;
      sub_20B518854(*(_QWORD *)(a1 + 48), &v34);
      sub_20B162040(a1, v7, v34);
      v7 += 24;
      v13 -= 24;
    }
    while (v13);
  }
LABEL_18:
  sub_20B45014C((uint64_t *)v31, (void ***)&v30);
  v14 = v30;
  v30 = 0uLL;
  v15 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (char *)__p[1];
  if (__p[1])
  {
    v22 = (char *)v33;
    v23 = __p[1];
    if ((void *)v33 != __p[1])
    {
      do
      {
        v24 = (std::__shared_weak_count *)*((_QWORD *)v22 - 1);
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v22 -= 24;
      }
      while (v22 != v21);
      v23 = __p[1];
    }
    *(_QWORD *)&v33 = v21;
    operator delete(v23);
  }
  v27 = (void **)v31[0];
  if (v31[0])
  {
    v28 = (void **)v31[1];
    v29 = v31[0];
    if (v31[1] != v31[0])
    {
      do
      {
        if (*((char *)v28 - 1) < 0)
          operator delete(*(v28 - 3));
        v28 -= 3;
      }
      while (v28 != v27);
      v29 = v31[0];
    }
    v31[1] = v27;
    operator delete(v29);
  }
}

void sub_20B161E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B161EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B161EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B161ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B161EE0(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;

  v16 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20B518BE4(*(_QWORD *)(a1 + 48), &v16);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  v6 = v16 - v5;
  if (v16 > v5)
  {
    sub_20B160170(a2, v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    v10 = v8 - v7;
    if (v8 == v7)
      return;
    goto LABEL_16;
  }
  if (v16 >= v5)
  {
    v7 = *a2;
    v10 = v4 - v7;
    if (v4 == v7)
      return;
    goto LABEL_16;
  }
  v11 = (uint64_t)&(*a2)[24 * v16];
  while (v4 != (char *)v11)
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v4 -= 24;
  }
  a2[1] = (char *)v11;
  v7 = *a2;
  v10 = v11 - (_QWORD)v7;
  if ((char *)v11 != v7)
  {
LABEL_16:
    v15 = 24 * (v10 / 24);
    do
    {
      v17 = 1;
      sub_20B518854(*(_QWORD *)(a1 + 48), &v17);
      sub_20B162040(a1, v7, v17);
      v7 += 24;
      v15 -= 24;
    }
    while (v15);
  }
}

void sub_20B162040(_QWORD *a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  char *v63;
  char *v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69[2];
  void *v70;
  void *v71[2];
  uint64_t v72;
  __int128 v73;
  void *v74[2];
  void *__p;
  void *v76;
  _DWORD *v77;

  LOWORD(v74[0]) = 0;
  sub_20B5186C0(a1[6], v74);
  v4 = LOWORD(v74[0]);
  *(_WORD *)a2 = v74[0];
  switch(v4)
  {
    case 0:
      LOBYTE(v74[0]) = 7;
      LOBYTE(v74[1]) = 7;
      v5 = operator new(4uLL);
      __p = v5;
      *v5 = 0;
      v76 = v5 + 1;
      v77 = v5 + 1;
      LODWORD(v71[0]) = 2;
      sub_20B518854(a1[6], v71);
      sub_20B100964((uint64_t)v71, a1, (unsigned __int8 *)v74, v71[0]);
      sub_20B4F6318((uint64_t)v71, (uint64_t)&v74[1]);
      v73 = *(_OWORD *)v71;
      sub_20B160DC8(v69, (uint64_t)&v73);
      v6 = *(_OWORD *)v69;
      v69[0] = 0;
      v69[1] = 0;
      v7 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v6;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = (std::__shared_weak_count *)v69[1];
      if (v69[1])
      {
        v11 = (unint64_t *)((char *)v69[1] + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
      if (*((_QWORD *)&v73 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (__p)
      {
        v76 = __p;
        operator delete(__p);
      }
      return;
    case 1:
      v74[0] = 0;
      v74[1] = 0;
      __p = 0;
      sub_20B518FF8(a1[6], v74);
      sub_20B4EE2F0((uint64_t)v74, (CFStringRef *)v69);
      sub_20B160ED8(v71, (uint64_t)v69);
      v16 = *(_OWORD *)v71;
      v71[0] = 0;
      v71[1] = 0;
      v17 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v16;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v21 = (unint64_t *)((char *)v71[1] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (std::__shared_weak_count *)v69[1];
      if (v69[1])
      {
        v24 = (unint64_t *)((char *)v69[1] + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (SHIBYTE(__p) < 0)
        operator delete(v74[0]);
      return;
    case 2:
      LOBYTE(v69[0]) = 0;
      sub_20B518F1C(a1[6], v69);
      sub_20B4EE200(v69, (std::__shared_weak_count_vtbl **)v71);
      sub_20B160FE8(v74, (uint64_t)v71);
      v26 = *(_OWORD *)v74;
      v74[0] = 0;
      v74[1] = 0;
      v27 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v26;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)v74[1];
      if (v74[1])
      {
        v31 = (unint64_t *)((char *)v74[1] + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = (std::__shared_weak_count *)v71[1];
      if (!v71[1])
        return;
      v34 = (unint64_t *)((char *)v71[1] + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      break;
    case 3:
      v71[0] = 0;
      v71[1] = 0;
      v72 = 0;
      sub_20B161EE0((uint64_t)a1, (char **)v71);
      v74[1] = 0;
      __p = 0;
      v74[0] = 0;
      sub_20B161318((uint64_t)v74, 0xAAAAAAAAAAAAAAABLL * (((char *)v71[1] - (char *)v71[0]) >> 3));
      sub_20B1628A4((uint64_t)v71[0], (uint64_t)v71[1], (uint64_t)v74);
      *(_OWORD *)v69 = *(_OWORD *)v74;
      v70 = __p;
      sub_20B1617BC((uint64_t *)v69, (CFMutableArrayRef *)&v73);
      sub_20B1610F8(v74, (uint64_t)&v73);
      v36 = *(_OWORD *)v74;
      v74[0] = 0;
      v74[1] = 0;
      v37 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v36;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = (std::__shared_weak_count *)v74[1];
      if (v74[1])
      {
        v41 = (unint64_t *)((char *)v74[1] + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
      if (*((_QWORD *)&v73 + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = (char *)v69[0];
      if (v69[0])
      {
        v47 = (char *)v69[1];
        v48 = v69[0];
        if (v69[1] != v69[0])
        {
          do
          {
            v49 = (std::__shared_weak_count *)*((_QWORD *)v47 - 1);
            if (v49)
            {
              v50 = (unint64_t *)&v49->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            v47 -= 16;
          }
          while (v47 != v46);
          v48 = v69[0];
        }
        v69[1] = v46;
        operator delete(v48);
      }
      v63 = (char *)v71[0];
      if (v71[0])
      {
        v64 = (char *)v71[1];
        v65 = v71[0];
        if (v71[1] != v71[0])
        {
          do
          {
            v66 = (std::__shared_weak_count *)*((_QWORD *)v64 - 1);
            if (v66)
            {
              v67 = (unint64_t *)&v66->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            v64 -= 24;
          }
          while (v64 != v63);
          v65 = v71[0];
        }
        v71[1] = v63;
        operator delete(v65);
      }
      return;
    case 4:
      v74[1] = 0;
      __p = 0;
      v74[0] = &v74[1];
      sub_20B4F4BA0(v74, v71);
      *(_OWORD *)v69 = *(_OWORD *)v71;
      sub_20AEC833C((uint64_t)v74, (char *)v74[1]);
      LODWORD(v74[0]) = 1;
      sub_20B518854(a1[6], v74);
      sub_20B161BD8((uint64_t)a1, (uint64_t)v69);
      sub_20AEEC2D8(v71, (uint64_t)v69);
      sub_20B161208(v74, (uint64_t)v71);
      v52 = *(_OWORD *)v74;
      v74[0] = 0;
      v74[1] = 0;
      v53 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v52;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v56 = (std::__shared_weak_count *)v74[1];
      if (v74[1])
      {
        v57 = (unint64_t *)((char *)v74[1] + 8);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v59 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v60 = (unint64_t *)((char *)v71[1] + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      v33 = (std::__shared_weak_count *)v69[1];
      if (!v69[1])
        return;
      v62 = (unint64_t *)((char *)v69[1] + 8);
      do
        v35 = __ldaxr(v62);
      while (__stlxr(v35 - 1, v62));
      break;
    default:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_20B532360);
      abort();
  }
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
}

void sub_20B16276C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_20AEC147C((uint64_t)&a13);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B162788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B16279C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, char *a20)
{
  sub_20AEC833C((uint64_t)&a19, a20);
  _Unwind_Resume(a1);
}

void sub_20B1627B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_20AEC147C((uint64_t)&a17);
  sub_20AEC3C38(&a9);
  sub_20B0B8EC0(&a13);
  _Unwind_Resume(a1);
}

void sub_20B1627E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20AEC3C38((void **)va1);
  sub_20B0B8EC0((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B162800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B0B8EC0((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B162814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B162828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  sub_20AEC147C((uint64_t)&a9);
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B1628A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_20B161578(&v15, i + 8);
      sub_20B161578(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_20B161688((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_20B1629DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1629F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B162A0C(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_20B4F4BA0(&v8, &v10);
  v7 = v10;
  sub_20AEC833C((uint64_t)&v8, v9[0]);
  sub_20B15FC10(a1, (uint64_t)&v7);
  sub_20B15F808(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20B162AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20AEC833C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20B162AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B162B24(uint64_t a1, uint64_t *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_20B50A7A4(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_20B454B2C(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v6 = 2;
  else
    v6 = v12;
  if (v6 < 2)
    sub_20B162C20((uint64_t)&v11, a1, a2, v6);
  else
    sub_20B162D24(a1, a2, 2u);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

void sub_20B162C20(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  sub_20B416888(&v17);
  sub_20B16316C(a2, &v17, a4);
  v8 = v17;
  v7 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (std::__shared_weak_count *)a3[1];
  *a3 = v8;
  a3[1] = (uint64_t)v7;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_20B162D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B162D24(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  int v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  int v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  char **v20;
  char *v21[2];
  __int128 v22;

  if (a3 > 2)
  {
    v21[0] = 0;
    v21[1] = 0;
    v20 = v21;
    sub_20B4F4BA0(&v20, &v22);
    v19 = v22;
    sub_20AEC833C((uint64_t)&v20, v21[0]);
    sub_20B162FCC(a1, (uint64_t)&v19);
    sub_20B15F44C((uint64_t)a2, (uint64_t)&v19);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "dictionary";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (_QWORD *)operator new();
    *v6 = 0;
    v6[1] = 0;
    *(_QWORD *)&v22 = v6;
    v7 = (unsigned __int8 *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B456794((uint64_t)&v20, v7);
    v8 = *(unsigned __int8 *)v6;
    *(_BYTE *)v6 = (_BYTE)v20;
    LOBYTE(v20) = v8;
    v9 = (char *)v6[1];
    v6[1] = v21[0];
    v21[0] = v9;
    sub_20B416E08((uint64_t *)v21, v8);
    v10 = operator new();
    sub_20B4155C8(v10, (uint64_t *)&v22);
    v11 = (_QWORD *)operator new();
    *v11 = &off_24C41B240;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v10;
    v12 = (std::__shared_weak_count *)a2[1];
    *a2 = v10;
    a2[1] = (uint64_t)v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (uint64_t *)v22;
    *(_QWORD *)&v22 = 0;
    if (v15)
    {
      sub_20B416E08(v15 + 1, *(unsigned __int8 *)v15);
      MEMORY[0x20BD3583C](v15, 0x1022C40B06DCE69);
    }
  }
}

void sub_20B162F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20AEC833C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20B162F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t **v7;
  va_list va;

  va_start(va, a7);
  sub_20B416CE0(v7);
  MEMORY[0x20BD3583C](v7, 0x10E2C40590DAB7CLL);
  sub_20B4F96AC((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_20B162F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B4F96AC((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_20B162FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B162FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B4F96AC((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_20B162FCC(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 v19;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "dictionary";
  *(_QWORD *)(a1 + 96) = 10;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (uint64_t *)operator new();
  *v5 = 0;
  v5[1] = 0;
  v18 = v5;
  v6 = (unsigned __int8 *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_20B456794((uint64_t)&v19, v6);
  v7 = *(unsigned __int8 *)v5;
  *(_BYTE *)v5 = v19;
  LOBYTE(v19) = v7;
  v8 = v5[1];
  v5[1] = *((_QWORD *)&v19 + 1);
  *((_QWORD *)&v19 + 1) = v8;
  sub_20B416E08((uint64_t *)&v19 + 1, v7);
  v17 = v5;
  sub_20B4514FC((uint64_t *)&v17, &v19);
  v9 = v19;
  v19 = 0uLL;
  v10 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v18;
  if (v18)
  {
    sub_20B416E08(v18 + 1, *(unsigned __int8 *)v18);
    MEMORY[0x20BD3583C](v16, 0x1022C40B06DCE69);
  }
}

void sub_20B163144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B4F96AC((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_20B163158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B4F96AC((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_20B16316C(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  int v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  int v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  char **v20;
  char *v21[2];
  __int128 v22;

  if (a3 > 2)
  {
    v21[0] = 0;
    v21[1] = 0;
    v20 = v21;
    sub_20B4F4BA0(&v20, &v22);
    v19 = v22;
    sub_20AEC833C((uint64_t)&v20, v21[0]);
    sub_20B162FCC(a1, (uint64_t)&v19);
    sub_20B15F808((uint64_t)a2, (uint64_t)&v19);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "dictionary";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (_QWORD *)operator new();
    *v6 = 0;
    v6[1] = 0;
    *(_QWORD *)&v22 = v6;
    v7 = (unsigned __int8 *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20B456794((uint64_t)&v20, v7);
    v8 = *(unsigned __int8 *)v6;
    *(_BYTE *)v6 = (_BYTE)v20;
    LOBYTE(v20) = v8;
    v9 = (char *)v6[1];
    v6[1] = v21[0];
    v21[0] = v9;
    sub_20B416E08((uint64_t *)v21, v8);
    v10 = operator new();
    sub_20B4155C8(v10, (uint64_t *)&v22);
    v11 = (_QWORD *)operator new();
    *v11 = &off_24C41B240;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v10;
    v12 = (std::__shared_weak_count *)a2[1];
    *a2 = v10;
    a2[1] = (uint64_t)v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (uint64_t *)v22;
    *(_QWORD *)&v22 = 0;
    if (v15)
    {
      sub_20B416E08(v15 + 1, *(unsigned __int8 *)v15);
      MEMORY[0x20BD3583C](v15, 0x1022C40B06DCE69);
    }
  }
}

void sub_20B163384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20AEC833C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20B16339C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t **v7;
  va_list va;

  va_start(va, a7);
  sub_20B416CE0(v7);
  MEMORY[0x20BD3583C](v7, 0x10E2C40590DAB7CLL);
  sub_20B4F96AC((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_20B1633D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B4F96AC((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_20B1633EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B163400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B4F96AC((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_20B163414(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_20B4F4BA0(&v8, &v10);
  v7 = v10;
  sub_20AEC833C((uint64_t)&v8, v9[0]);
  sub_20B163630(a1, (uint64_t)&v7);
  sub_20B15F44C(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20B1634D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20AEC833C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20B1634E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B16352C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_20B416888(&v15);
  sub_20B165AF8(a2, (uint64_t)&v15);
  v6 = v15;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)a3[1];
  *a3 = v6;
  a3[1] = (uint64_t)v5;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B16361C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B163630(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  char v15;
  char v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void **v30;
  void **v31;
  void *v32;
  void *v33[2];
  void *v34[2];
  __int128 v35;
  unint64_t v36;
  void *__p[2];
  char v38;

  *(_OWORD *)v34 = 0u;
  v35 = 0u;
  *(_OWORD *)v33 = 0u;
  sub_20B0E15D0(a1, (char **)v33);
  v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)v34[1]) >> 3);
  sub_20B514DE0(a1, &v36);
  v4 = (char *)v35;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)v34[1]) >> 3);
  v6 = v36 - v5;
  if (v36 > v5)
  {
    sub_20B160170((char **)&v34[1], v6);
    v7 = (char *)v34[1];
    v8 = (char *)v35;
    if ((void *)v35 != v34[1])
      goto LABEL_18;
    goto LABEL_44;
  }
  if (v36 < v5)
  {
    v8 = (char *)v34[1] + 24 * v36;
    while (v4 != v8)
    {
      v9 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v9->__on_zero_shared)(v9, v6);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v4 -= 24;
    }
    *(_QWORD *)&v35 = v8;
    v7 = (char *)v34[1];
    if (v8 == v34[1])
      goto LABEL_44;
LABEL_18:
    while (1)
    {
      LODWORD(__p[0]) = 2;
      sub_20B514490(a1, __p);
      v12 = __p[0];
      v13 = LODWORD(__p[0]) >= 2 ? 2 : LODWORD(__p[0]);
      if (v13 < 2)
        sub_20B163C30((uint64_t)__p, a1, (uint64_t)v7);
      else
        sub_20B163DE8(a1, (uint64_t)v7);
      if (v12 >= 2 && *(_BYTE *)(a1 + 131) == 0)
        break;
LABEL_17:
      v7 += 24;
      if (v7 == v8)
        goto LABEL_44;
    }
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_17;
      sub_20B51680C(a1, (uint64_t)__p);
      if (v38 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_40:
          v16 = 0;
          if (v38 < 0)
            goto LABEL_43;
          goto LABEL_29;
        }
      }
      else if (v38 == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_40;
      }
      v16 = 1;
      if (v38 < 0)
LABEL_43:
        operator delete(__p[0]);
LABEL_29:
      if (*(_BYTE *)(a1 + 131))
        v15 = 0;
      else
        v15 = v16;
      if ((v15 & 1) == 0)
        goto LABEL_17;
    }
  }
  v8 = (char *)v35;
  v7 = (char *)v34[1];
  if ((void *)v35 != v34[1])
    goto LABEL_18;
LABEL_44:
  sub_20B450D84((uint64_t *)v33, (void ***)__p);
  v17 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v18 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v22 = (unint64_t *)((char *)__p[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (char *)v34[1];
  if (v34[1])
  {
    v25 = (char *)v35;
    v26 = v34[1];
    if ((void *)v35 != v34[1])
    {
      do
      {
        v27 = (std::__shared_weak_count *)*((_QWORD *)v25 - 1);
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v25 -= 24;
      }
      while (v25 != v24);
      v26 = v34[1];
    }
    *(_QWORD *)&v35 = v24;
    operator delete(v26);
  }
  v30 = (void **)v33[0];
  if (v33[0])
  {
    v31 = (void **)v33[1];
    v32 = v33[0];
    if (v33[1] != v33[0])
    {
      do
      {
        if (*((char *)v31 - 1) < 0)
          operator delete(*(v31 - 3));
        v31 -= 3;
      }
      while (v31 != v30);
      v32 = v33[0];
    }
    v33[1] = v30;
    operator delete(v32);
  }
}

void sub_20B1639A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20B15A068(&a9);
  _Unwind_Resume(a1);
}

void sub_20B1639B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20B15A068(&a9);
  _Unwind_Resume(a1);
}

void sub_20B1639CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20B15A068(&a9);
  _Unwind_Resume(a1);
}

void sub_20B1639E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20B15A068(&a9);
  _Unwind_Resume(a1);
}

void sub_20B1639F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20B15A068(&a9);
  _Unwind_Resume(a1);
}

void sub_20B163A08(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char **v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  char v17;
  char v18;
  unint64_t v19;
  void *__p[2];
  char v21;

  v19 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20B514DE0(a1, &v19);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  v6 = v19 - v5;
  if (v19 > v5)
  {
    sub_20B160170(a2, v6);
    v9 = a2;
    v7 = *a2;
    v8 = (uint64_t)v9[1];
    if ((char *)v8 != v7)
      goto LABEL_18;
    return;
  }
  if (v19 < v5)
  {
    v8 = (uint64_t)&(*a2)[24 * v19];
    while (v4 != (char *)v8)
    {
      v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v4 -= 24;
    }
    a2[1] = (char *)v8;
    v7 = *a2;
    if ((char *)v8 == v7)
      return;
    while (1)
    {
LABEL_18:
      LODWORD(__p[0]) = 2;
      sub_20B514490(a1, __p);
      v13 = __p[0];
      if (LODWORD(__p[0]) >= 2)
        v14 = 2;
      else
        v14 = __p[0];
      if (v14 >= 2)
      {
        sub_20B163DE8(a1, v7, 2);
        if (v13 >= 2 && *(_BYTE *)(a1 + 131) == 0)
          goto LABEL_36;
        goto LABEL_17;
      }
      sub_20B163C30((uint64_t)__p, a1, (uint64_t)v7);
      if (v13 >= 2 && *(_BYTE *)(a1 + 131) == 0)
        break;
LABEL_17:
      v7 += 24;
      if (v7 == (char *)v8)
        return;
    }
    while (1)
    {
LABEL_36:
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_17;
      sub_20B51680C(a1, (uint64_t)__p);
      if (v21 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_43:
          v18 = 0;
          if (v21 < 0)
            goto LABEL_46;
          goto LABEL_32;
        }
      }
      else if (v21 == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_43;
      }
      v18 = 1;
      if (v21 < 0)
LABEL_46:
        operator delete(__p[0]);
LABEL_32:
      if (*(_BYTE *)(a1 + 131))
        v17 = 0;
      else
        v17 = v18;
      if ((v17 & 1) == 0)
        goto LABEL_17;
    }
  }
  v8 = (uint64_t)a2[1];
  v7 = *a2;
  if (v4 != v7)
    goto LABEL_18;
}

void sub_20B163C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int16 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v20 = 0;
  v21 = 0;
  sub_20B164FE0(a2, (uint64_t)&v19);
  v4 = v19;
  sub_20B161578(&v22, (uint64_t)&v20);
  sub_20B161578(&v18, (uint64_t)&v22);
  v5 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_WORD *)a3 = v4;
  v8 = v18;
  v18 = 0uLL;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_OWORD *)(a3 + 8) = v8;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20B163DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B163DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B163DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B163DE8(uint64_t a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char v57;
  char v58;
  char v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  char v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81[2];
  void *v82;
  __int128 v83;
  void *v84[2];
  void *__p;
  void *v86;
  _DWORD *v87;
  __int128 v88;
  void *v89;

  LOWORD(v84[0]) = 0;
  sub_20B513FE8(a1, v84);
  v4 = LOWORD(v84[0]);
  *(_WORD *)a2 = v84[0];
  switch(v4)
  {
    case 0:
      LOBYTE(v84[0]) = 7;
      LOBYTE(v84[1]) = 7;
      v5 = operator new(4uLL);
      __p = v5;
      *v5 = 0;
      v86 = v5 + 1;
      v87 = v5 + 1;
      LODWORD(v88) = 2;
      sub_20B514490(a1, &v88);
      v6 = v88;
      if (v88 >= 2)
        v7 = 2;
      else
        v7 = v88;
      if (v7 < 2)
      {
        sub_20B101F14((uint64_t)&v88, a1, (uint64_t)v84);
      }
      else
      {
        LOBYTE(v88) = 0;
        sub_20B513B4C(a1, &v88);
        LOBYTE(v84[0]) = v88;
        sub_20B102098(v88, a1, (uint64_t)v84);
      }
      if (v6 < 2 || *(_BYTE *)(a1 + 131))
        goto LABEL_75;
      while (2)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) == 0)
        {
          sub_20B51680C(a1, (uint64_t)&v88);
          if (SHIBYTE(v89) < 0)
          {
            if (*((_QWORD *)&v88 + 1) != 1 || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)v88)
            {
LABEL_92:
              v57 = 1;
              if ((SHIBYTE(v89) & 0x80000000) == 0)
                goto LABEL_93;
              goto LABEL_105;
            }
          }
          else if (SHIBYTE(v89) != 1 || *(unsigned __int8 *)(a1 + 72) != v88)
          {
            goto LABEL_92;
          }
          v57 = 0;
          if ((SHIBYTE(v89) & 0x80000000) == 0)
          {
LABEL_93:
            if (*(_BYTE *)(a1 + 131))
              v58 = 0;
            else
              v58 = v57;
            if ((v58 & 1) == 0)
              break;
            continue;
          }
LABEL_105:
          operator delete((void *)v88);
          if (*(_BYTE *)(a1 + 131))
            v59 = 0;
          else
            v59 = v57;
          if ((v59 & 1) == 0)
            break;
          continue;
        }
        break;
      }
LABEL_75:
      sub_20B4F6318((uint64_t)&v88, (uint64_t)&v84[1]);
      v83 = v88;
      sub_20B160DC8(v81, (uint64_t)&v83);
      v47 = *(_OWORD *)v81;
      v81[0] = 0;
      v81[1] = 0;
      v48 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v47;
      if (v48)
      {
        p_shared_owners = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(p_shared_owners);
        while (__stlxr(v50 - 1, p_shared_owners));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v52 = (unint64_t *)((char *)v81[1] + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      if (__p)
      {
        v86 = __p;
        operator delete(__p);
      }
      return;
    case 1:
      v88 = 0uLL;
      v89 = 0;
      ++*(_QWORD *)(a1 + 80);
      if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
      {
        *(_BYTE *)(a1 + 132) = 1;
      }
      else
      {
        sub_20B51680C(a1, (uint64_t)v84);
        v36 = *(_QWORD *)(a1 + 104);
        v88 = *(_OWORD *)v84;
        v89 = __p;
        *(_QWORD *)(a1 + 104) = v36 + 1;
      }
      sub_20B4EE2F0((uint64_t)&v88, (CFStringRef *)v81);
      sub_20B160ED8(v84, (uint64_t)v81);
      v37 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v38 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v37;
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v42 = (unint64_t *)((char *)v84[1] + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v45 = (unint64_t *)((char *)v81[1] + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      if (SHIBYTE(v89) < 0)
        operator delete((void *)v88);
      return;
    case 2:
      LOBYTE(v81[0]) = 0;
      sub_20B515758(a1, v81);
      sub_20B4EE200(v81, (std::__shared_weak_count_vtbl **)&v88);
      sub_20B160FE8(v84, (uint64_t)&v88);
      v8 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v9 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v8;
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v13 = (unint64_t *)((char *)v84[1] + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
          goto LABEL_132;
      }
      return;
    case 3:
      v88 = 0uLL;
      v89 = 0;
      sub_20B163A08(a1, (char **)&v88);
      v84[1] = 0;
      __p = 0;
      v84[0] = 0;
      sub_20B161318((uint64_t)v84, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v88 + 1) - v88) >> 3));
      sub_20B16488C(v88, *((uint64_t *)&v88 + 1), (uint64_t)v84);
      *(_OWORD *)v81 = *(_OWORD *)v84;
      v82 = __p;
      sub_20B1617BC((uint64_t *)v81, (CFMutableArrayRef *)&v83);
      sub_20B1610F8(v84, (uint64_t)&v83);
      v20 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v21 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v20;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v25 = (unint64_t *)((char *)v84[1] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (char *)v81[0];
      if (v81[0])
      {
        v31 = (char *)v81[1];
        v32 = v81[0];
        if (v81[1] != v81[0])
        {
          do
          {
            v33 = (std::__shared_weak_count *)*((_QWORD *)v31 - 1);
            if (v33)
            {
              v34 = (unint64_t *)&v33->__shared_owners_;
              do
                v35 = __ldaxr(v34);
              while (__stlxr(v35 - 1, v34));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            v31 -= 16;
          }
          while (v31 != v30);
          v32 = v81[0];
        }
        v81[1] = v30;
        operator delete(v32);
      }
      v75 = v88;
      if ((_QWORD)v88)
      {
        v76 = *((_QWORD *)&v88 + 1);
        v77 = (void *)v88;
        if (*((_QWORD *)&v88 + 1) != (_QWORD)v88)
        {
          do
          {
            v78 = *(std::__shared_weak_count **)(v76 - 8);
            if (v78)
            {
              v79 = (unint64_t *)&v78->__shared_owners_;
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            v76 -= 24;
          }
          while (v76 != v75);
          v77 = (void *)v88;
        }
        *((_QWORD *)&v88 + 1) = v75;
        operator delete(v77);
      }
      return;
    case 4:
      v84[1] = 0;
      __p = 0;
      v84[0] = &v84[1];
      sub_20B4F4BA0(v84, &v88);
      *(_OWORD *)v81 = v88;
      sub_20AEC833C((uint64_t)v84, (char *)v84[1]);
      LODWORD(v84[0]) = 2;
      sub_20B514490(a1, v84);
      v18 = v84[0];
      if (LODWORD(v84[0]) >= 2)
        v19 = 2;
      else
        v19 = v84[0];
      if (v19 < 2)
        sub_20B1649F4((uint64_t)v84, a1, (uint64_t)v81);
      else
        sub_20B163630(a1, v81, 2);
      if (v18 < 2 || *(_BYTE *)(a1 + 131))
        goto LABEL_113;
      while (2)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) == 0)
        {
          sub_20B51680C(a1, (uint64_t)v84);
          if (SHIBYTE(__p) < 0)
          {
            if (v84[1] != (void *)1 || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)v84[0])
            {
LABEL_133:
              v72 = 1;
              if ((SHIBYTE(__p) & 0x80000000) == 0)
                goto LABEL_134;
              goto LABEL_146;
            }
          }
          else if (SHIBYTE(__p) != 1 || *(unsigned __int8 *)(a1 + 72) != LOBYTE(v84[0]))
          {
            goto LABEL_133;
          }
          v72 = 0;
          if ((SHIBYTE(__p) & 0x80000000) == 0)
          {
LABEL_134:
            if (*(_BYTE *)(a1 + 131))
              v73 = 0;
            else
              v73 = v72;
            if ((v73 & 1) == 0)
              break;
            continue;
          }
LABEL_146:
          operator delete(v84[0]);
          if (*(_BYTE *)(a1 + 131))
            v74 = 0;
          else
            v74 = v72;
          if ((v74 & 1) == 0)
            break;
          continue;
        }
        break;
      }
LABEL_113:
      sub_20AEEC2D8(&v88, (uint64_t)v81);
      sub_20B161208(v84, (uint64_t)&v88);
      v60 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v61 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v60;
      if (v61)
      {
        v62 = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v64 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v65 = (unint64_t *)((char *)v84[1] + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v68 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v15 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v70 = (unint64_t *)((char *)v81[1] + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
LABEL_132:
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      return;
    default:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_20B532360);
      abort();
  }
}

void sub_20B16472C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AEC147C(v9 - 64);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B164748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B16475C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  sub_20AEC147C((uint64_t)&a13);
  if (!__p)
    _Unwind_Resume(a1);
  a18 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B16488C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_20B161578(&v15, i + 8);
      sub_20B161578(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_20B161688((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_20B1649C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1649E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1649F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  *((_QWORD *)&v16 + 1) = 0;
  v17 = 0;
  *(_QWORD *)&v16 = (char *)&v16 + 8;
  sub_20B4F4BA0(&v16, &v18);
  v15 = v18;
  sub_20AEC833C((uint64_t)&v16, *((char **)&v16 + 1));
  sub_20B164B7C(a2, (uint64_t)&v15);
  sub_20B450618(&v16, (uint64_t)&v15);
  v5 = v16;
  v16 = 0uLL;
  v6 = *(std::__shared_weak_count **)(a3 + 8);
  *(_OWORD *)a3 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B164B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B164B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B164B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
  sub_20AEC833C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20B164B7C(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  void **v28;
  void *v29;
  __int128 v30;
  void *v31[2];
  void *__p[2];
  __int128 v33;
  unsigned int v34;

  *(_OWORD *)__p = 0u;
  v33 = 0u;
  *(_OWORD *)v31 = 0u;
  sub_20B0E15D0(a1, (char **)v31);
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  sub_20B514DE0(a1, &v30);
  v4 = (char *)v33;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  v6 = v30 - v5;
  if ((unint64_t)v30 > v5)
  {
    sub_20B160170((char **)&__p[1], v6);
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  if ((unint64_t)v30 >= v5)
  {
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  v9 = (char *)__p[1] + 24 * v30;
  while (v4 != v9)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v4 -= 24;
  }
  *(_QWORD *)&v33 = v9;
  v7 = (char *)__p[1];
  v8 = v9 - (char *)__p[1];
  if (v9 != __p[1])
  {
LABEL_16:
    v13 = 24 * (v8 / 24);
    do
    {
      v34 = 1;
      sub_20B514490(a1, &v34);
      sub_20B164FE0(a1, v7, v34);
      v7 += 24;
      v13 -= 24;
    }
    while (v13);
  }
LABEL_18:
  sub_20B45014C((uint64_t *)v31, (void ***)&v30);
  v14 = v30;
  v30 = 0uLL;
  v15 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (char *)__p[1];
  if (__p[1])
  {
    v22 = (char *)v33;
    v23 = __p[1];
    if ((void *)v33 != __p[1])
    {
      do
      {
        v24 = (std::__shared_weak_count *)*((_QWORD *)v22 - 1);
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v22 -= 24;
      }
      while (v22 != v21);
      v23 = __p[1];
    }
    *(_QWORD *)&v33 = v21;
    operator delete(v23);
  }
  v27 = (void **)v31[0];
  if (v31[0])
  {
    v28 = (void **)v31[1];
    v29 = v31[0];
    if (v31[1] != v31[0])
    {
      do
      {
        if (*((char *)v28 - 1) < 0)
          operator delete(*(v28 - 3));
        v28 -= 3;
      }
      while (v28 != v27);
      v29 = v31[0];
    }
    v31[1] = v27;
    operator delete(v29);
  }
}

void sub_20B164E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B164E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B164E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B164E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B164E84(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;

  v16 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20B514DE0(a1, &v16);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  v6 = v16 - v5;
  if (v16 > v5)
  {
    sub_20B160170(a2, v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    v10 = v8 - v7;
    if (v8 == v7)
      return;
    goto LABEL_16;
  }
  if (v16 >= v5)
  {
    v7 = *a2;
    v10 = v4 - v7;
    if (v4 == v7)
      return;
    goto LABEL_16;
  }
  v11 = (uint64_t)&(*a2)[24 * v16];
  while (v4 != (char *)v11)
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v4 -= 24;
  }
  a2[1] = (char *)v11;
  v7 = *a2;
  v10 = v11 - (_QWORD)v7;
  if ((char *)v11 != v7)
  {
LABEL_16:
    v15 = 24 * (v10 / 24);
    do
    {
      v17 = 1;
      sub_20B514490(a1, &v17);
      sub_20B164FE0(a1, v7, v17);
      v7 += 24;
      v15 -= 24;
    }
    while (v15);
  }
}

void sub_20B164FE0(uint64_t a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  char v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void *v76[2];
  void *v77;
  __int128 v78;
  __int128 v79;
  void *__p;
  void *v81;
  _DWORD *v82;
  __int128 v83;
  void *v84;

  LOWORD(v79) = 0;
  sub_20B513FE8(a1, &v79);
  v4 = (unsigned __int16)v79;
  *(_WORD *)a2 = v79;
  switch(v4)
  {
    case 0:
      LOBYTE(v79) = 7;
      BYTE8(v79) = 7;
      v5 = operator new(4uLL);
      __p = v5;
      *v5 = 0;
      v81 = v5 + 1;
      v82 = v5 + 1;
      LODWORD(v83) = 2;
      sub_20B514490(a1, &v83);
      v6 = v83;
      if (v83 >= 2)
        v7 = 2;
      else
        v7 = v83;
      if (v7 < 2)
      {
        sub_20B101F14((uint64_t)&v83, a1, (uint64_t)&v79);
      }
      else
      {
        LOBYTE(v83) = 0;
        sub_20B513B4C(a1, &v83);
        LOBYTE(v79) = v83;
        sub_20B102098(v83, a1, (uint64_t)&v79);
      }
      if (v6 < 2 || *(_BYTE *)(a1 + 131))
        goto LABEL_90;
      break;
    case 1:
      v83 = 0uLL;
      v84 = 0;
      ++*(_QWORD *)(a1 + 80);
      if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
      {
        *(_BYTE *)(a1 + 132) = 1;
      }
      else
      {
        sub_20B51680C(a1, (uint64_t)&v79);
        v46 = *(_QWORD *)(a1 + 104);
        v83 = v79;
        v84 = __p;
        *(_QWORD *)(a1 + 104) = v46 + 1;
      }
      sub_20B4EE2F0((uint64_t)&v83, (CFStringRef *)v76);
      sub_20B160ED8(&v79, (uint64_t)v76);
      v47 = v79;
      v79 = 0uLL;
      v48 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v47;
      if (v48)
      {
        p_shared_owners = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(p_shared_owners);
        while (__stlxr(v50 - 1, p_shared_owners));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v52 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)v76[1];
      if (v76[1])
      {
        v55 = (unint64_t *)((char *)v76[1] + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      if (SHIBYTE(v84) < 0)
        operator delete((void *)v83);
      return;
    case 2:
      LOBYTE(v76[0]) = 0;
      sub_20B515758(a1, v76);
      sub_20B4EE200(v76, (std::__shared_weak_count_vtbl **)&v83);
      sub_20B160FE8(&v79, (uint64_t)&v83);
      v8 = v79;
      v79 = 0uLL;
      v9 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v8;
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
          goto LABEL_41;
      }
      return;
    case 3:
      v83 = 0uLL;
      v84 = 0;
      sub_20B164E84(a1, (char **)&v83);
      __p = 0;
      v79 = 0uLL;
      sub_20B161318((uint64_t)&v79, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v83 + 1) - v83) >> 3));
      sub_20B165990(v83, *((uint64_t *)&v83 + 1), (uint64_t)&v79);
      *(_OWORD *)v76 = v79;
      v77 = __p;
      sub_20B1617BC((uint64_t *)v76, (CFMutableArrayRef *)&v78);
      sub_20B1610F8(&v79, (uint64_t)&v78);
      v30 = v79;
      v79 = 0uLL;
      v31 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v30;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
      if (*((_QWORD *)&v78 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = (char *)v76[0];
      if (v76[0])
      {
        v41 = (char *)v76[1];
        v42 = v76[0];
        if (v76[1] != v76[0])
        {
          do
          {
            v43 = (std::__shared_weak_count *)*((_QWORD *)v41 - 1);
            if (v43)
            {
              v44 = (unint64_t *)&v43->__shared_owners_;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
            v41 -= 16;
          }
          while (v41 != v40);
          v42 = v76[0];
        }
        v76[1] = v40;
        operator delete(v42);
      }
      v70 = v83;
      if ((_QWORD)v83)
      {
        v71 = *((_QWORD *)&v83 + 1);
        v72 = (void *)v83;
        if (*((_QWORD *)&v83 + 1) != (_QWORD)v83)
        {
          do
          {
            v73 = *(std::__shared_weak_count **)(v71 - 8);
            if (v73)
            {
              v74 = (unint64_t *)&v73->__shared_owners_;
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
            v71 -= 24;
          }
          while (v71 != v70);
          v72 = (void *)v83;
        }
        *((_QWORD *)&v83 + 1) = v70;
        operator delete(v72);
      }
      return;
    case 4:
      *((_QWORD *)&v79 + 1) = 0;
      __p = 0;
      *(_QWORD *)&v79 = (char *)&v79 + 8;
      sub_20B4F4BA0(&v79, &v83);
      *(_OWORD *)v76 = v83;
      sub_20AEC833C((uint64_t)&v79, *((char **)&v79 + 1));
      LODWORD(v79) = 1;
      sub_20B514490(a1, &v79);
      sub_20B164B7C(a1, (uint64_t)v76);
      sub_20AEEC2D8(&v83, (uint64_t)v76);
      sub_20B161208(&v79, (uint64_t)&v83);
      v18 = v79;
      v79 = 0uLL;
      v19 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v18;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v15 = (std::__shared_weak_count *)v76[1];
      if (v76[1])
      {
        v28 = (unint64_t *)((char *)v76[1] + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
LABEL_41:
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      return;
    default:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_20B532360);
      abort();
  }
  while ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) == 0)
  {
    sub_20B51680C(a1, (uint64_t)&v83);
    if (SHIBYTE(v84) < 0)
    {
      if (*((_QWORD *)&v83 + 1) == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)v83)
        goto LABEL_119;
LABEL_107:
      v67 = 1;
      if (SHIBYTE(v84) < 0)
        goto LABEL_120;
LABEL_108:
      if (*(_BYTE *)(a1 + 131))
        v68 = 0;
      else
        v68 = v67;
      if ((v68 & 1) == 0)
        break;
    }
    else
    {
      if (SHIBYTE(v84) != 1 || *(unsigned __int8 *)(a1 + 72) != v83)
        goto LABEL_107;
LABEL_119:
      v67 = 0;
      if ((SHIBYTE(v84) & 0x80000000) == 0)
        goto LABEL_108;
LABEL_120:
      operator delete((void *)v83);
      if (*(_BYTE *)(a1 + 131))
        v69 = 0;
      else
        v69 = v67;
      if ((v69 & 1) == 0)
        break;
    }
  }
LABEL_90:
  sub_20B4F6318((uint64_t)&v83, (uint64_t)&v79 + 8);
  v78 = v83;
  sub_20B160DC8(v76, (uint64_t)&v78);
  v57 = *(_OWORD *)v76;
  v76[0] = 0;
  v76[1] = 0;
  v58 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v57;
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)v76[1];
  if (v76[1])
  {
    v62 = (unint64_t *)((char *)v76[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (__p)
  {
    v81 = __p;
    operator delete(__p);
  }
}

void sub_20B165844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  sub_20AEC147C((uint64_t)&a13);
  if (!__p)
    _Unwind_Resume(a1);
  a18 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B165990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_20B161578(&v15, i + 8);
      sub_20B161578(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_20B161688((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_20B165AC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B165AE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B165AF8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_20B4F4BA0(&v8, &v10);
  v7 = v10;
  sub_20AEC833C((uint64_t)&v8, v9[0]);
  sub_20B163630(a1, (uint64_t)&v7);
  sub_20B15F808(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20B165BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20AEC833C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20B165BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B165C10(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20B165E1C((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_20B42BA30(a2);
    sub_20B165D04(a2, (uint64_t)a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20B165CF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B165D04(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_20B4F4BA0(&v8, &v10);
  v7 = v10;
  sub_20AEC833C((uint64_t)&v8, v9[0]);
  sub_20B165F20(a1, (uint64_t)&v7);
  sub_20B15F44C(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20B165DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20AEC833C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20B165DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B165E1C(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_20B416888(&v15);
  sub_20B168484(a2, (uint64_t)&v15);
  v6 = v15;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)a3[1];
  *a3 = v6;
  a3[1] = (uint64_t)v5;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B165F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B165F20(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void *v31;
  std::logic_error *exception;
  void *v33[2];
  void *__p[2];
  __int128 v35;
  __int128 v36;

  *(_OWORD *)__p = 0u;
  v35 = 0u;
  *(_OWORD *)v33 = 0u;
  sub_20B0E2D50(a1, (uint64_t)v33);
  v5 = a1[6];
  v4 = a1[7];
  v6 = v4 >= v5;
  v7 = v4 - v5;
  if (!v6)
    v7 = 0;
  if (v7 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v5);
  a1[6] = v5 + 8;
  v9 = (char *)v35;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)__p[1]) >> 3);
  v11 = v8 - v10;
  if (v8 <= v10)
  {
    if (v8 >= v10)
    {
      v12 = (char *)v35;
    }
    else
    {
      v12 = (char *)__p[1] + 24 * v8;
      while (v9 != v12)
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v13->__on_zero_shared)(v13, v11);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v9 -= 24;
      }
      *(_QWORD *)&v35 = v12;
    }
  }
  else
  {
    sub_20B160170((char **)&__p[1], v11);
    v12 = (char *)v35;
  }
  *(_QWORD *)&v36 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (char *)__p[1]) >> 3);
  *((void **)&v36 + 1) = __p[1];
  sub_20B1663BC(a1, &v36);
  sub_20B450D84((uint64_t *)v33, (void ***)&v36);
  v16 = v36;
  v36 = 0uLL;
  v17 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (char *)__p[1];
  if (__p[1])
  {
    v24 = (char *)v35;
    v25 = __p[1];
    if ((void *)v35 != __p[1])
    {
      do
      {
        v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 24;
      }
      while (v24 != v23);
      v25 = __p[1];
    }
    *(_QWORD *)&v35 = v23;
    operator delete(v25);
  }
  v29 = (void **)v33[0];
  if (v33[0])
  {
    v30 = (void **)v33[1];
    v31 = v33[0];
    if (v33[1] != v33[0])
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != v29);
      v31 = v33[0];
    }
    v33[1] = v29;
    operator delete(v31);
  }
}

void sub_20B1661D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_20B15A068(&a9);
  _Unwind_Resume(a1);
}

void sub_20B1661F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20B15A068(&a9);
  _Unwind_Resume(a1);
}

void sub_20B166204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20B15A068(&a9);
  _Unwind_Resume(a1);
}

void sub_20B166218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20B15A068(&a9);
  _Unwind_Resume(a1);
}

void sub_20B16622C(_QWORD *a1, char **a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char **v15;
  int64_t v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::logic_error *exception;
  char v23;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v3);
  a1[6] = v3 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 3);
  v12 = v8 - v11;
  if (v8 > v11)
  {
    sub_20B160170(a2, v12);
    v15 = a2;
    v13 = *a2;
    v14 = v15[1];
    v16 = v14 - v13;
    if (v14 == v13)
      return;
    goto LABEL_19;
  }
  if (v8 >= v11)
  {
    v13 = *a2;
    v16 = v10 - v13;
    if (v10 == v13)
      return;
    goto LABEL_19;
  }
  v17 = &v9[24 * v8];
  while (v10 != v17)
  {
    v18 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v18->__on_zero_shared)(v18, v12);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v10 -= 24;
  }
  a2[1] = v17;
  v13 = *a2;
  v16 = v17 - v13;
  if (v17 != v13)
  {
LABEL_19:
    v21 = 24 * (v16 / 24);
    do
    {
      sub_20B1664D4((uint64_t)&v23, a1, (uint64_t)v13);
      v13 += 24;
      v21 -= 24;
    }
    while (v21);
  }
}

void sub_20B1663A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1663BC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unsigned int v11;
  std::logic_error *exception;
  char v13;

  if (*a2)
  {
    v3 = a2[1];
    v4 = 24 * *a2;
    do
    {
      while (1)
      {
        v7 = a1[6];
        v8 = a1[7];
        v9 = v8 >= v7;
        v10 = v8 - v7;
        if (!v9)
          v10 = 0;
        if (v10 <= 3)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_20AEC74EC(exception, "Not enough data to read");
          __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
        }
        v11 = *(_DWORD *)(a1[3] + v7);
        a1[6] = v7 + 4;
        if (v11 <= 1)
          break;
        sub_20B42BA30(a1);
        sub_20B166780(a1, v3);
        v5 = a1[12];
        v6 = a1[9];
        a1[6] = *(_QWORD *)(v5 - 8) + *(_QWORD *)(v6 - 8) + 8;
        a1[9] = v6 - 8;
        a1[12] = v5 - 8;
        v3 += 24;
        v4 -= 24;
        if (!v4)
          return;
      }
      sub_20B1665C8((uint64_t)&v13, a1, v3);
      v3 += 24;
      v4 -= 24;
    }
    while (v4);
  }
}

void sub_20B1664C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1664D4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20B1665C8((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_20B42BA30(a2);
    sub_20B166780(a2, a3, 2);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20B1665B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1665C8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __int16 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int16 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v20 = 0;
  v21 = 0;
  sub_20B1679DC(a2, (uint64_t)&v19);
  v4 = v19;
  sub_20B161578(&v22, (uint64_t)&v20);
  sub_20B161578(&v18, (uint64_t)&v22);
  v5 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_WORD *)a3 = v4;
  v8 = v18;
  v18 = 0uLL;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_OWORD *)(a3 + 8) = v8;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20B16673C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B166758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B16676C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B166780(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _DWORD *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  char *v76;
  char *v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::logic_error *exception;
  std::logic_error *v83;
  void *v84[2];
  void *v85;
  void *v86[2];
  uint64_t v87;
  __int128 v88;
  void *v89[2];
  void *__p;
  void *v91;
  _DWORD *v92;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 - v2;
  if (v3 < v2)
    v4 = 0;
  if (v4 <= 1)
  {
LABEL_119:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v7 = a1[3];
  v8 = *(unsigned __int16 *)(v7 + v2);
  v9 = v2 + 2;
  a1[6] = v2 + 2;
  *(_WORD *)a2 = v8;
  switch(v8)
  {
    case 0:
      LOBYTE(v89[0]) = 7;
      LOBYTE(v89[1]) = 7;
      v10 = operator new(4uLL);
      __p = v10;
      *v10 = 0;
      v91 = v10 + 1;
      v92 = v10 + 1;
      sub_20B102628((uint64_t)v86, a1, v89);
      sub_20B4F6318((uint64_t)v86, (uint64_t)&v89[1]);
      v88 = *(_OWORD *)v86;
      sub_20B160DC8(v84, (uint64_t)&v88);
      v11 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v12 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v11;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v16 = (unint64_t *)((char *)v84[1] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v91 = __p;
        operator delete(__p);
      }
      return;
    case 1:
      v89[0] = 0;
      v89[1] = 0;
      __p = 0;
      sub_20B42BD80(a1, (uint64_t)v89);
      sub_20B4EE2F0((uint64_t)v89, (CFStringRef *)v84);
      sub_20B160ED8(v86, (uint64_t)v84);
      v54 = *(_OWORD *)v86;
      v86[0] = 0;
      v86[1] = 0;
      v55 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v54;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = (std::__shared_weak_count *)v86[1];
      if (v86[1])
      {
        v59 = (unint64_t *)((char *)v86[1] + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v62 = (unint64_t *)((char *)v84[1] + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if (SHIBYTE(__p) < 0)
        operator delete(v89[0]);
      return;
    case 2:
      if (v3 <= v9)
        goto LABEL_119;
      LOBYTE(v84[0]) = *(_BYTE *)(v7 + v9);
      a1[6] = v2 + 3;
      sub_20B4EE200(v84, (std::__shared_weak_count_vtbl **)v86);
      sub_20B160FE8(v89, (uint64_t)v86);
      v28 = *(_OWORD *)v89;
      v89[0] = 0;
      v89[1] = 0;
      v29 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v28;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = (std::__shared_weak_count *)v89[1];
      if (v89[1])
      {
        v33 = (unint64_t *)((char *)v89[1] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = (std::__shared_weak_count *)v86[1];
      if (v86[1])
      {
        v36 = (unint64_t *)((char *)v86[1] + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
LABEL_104:
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      return;
    case 3:
      v86[0] = 0;
      v86[1] = 0;
      v87 = 0;
      sub_20B16622C(a1, (char **)v86);
      v89[1] = 0;
      __p = 0;
      v89[0] = 0;
      sub_20B161318((uint64_t)v89, 0xAAAAAAAAAAAAAAABLL * (((char *)v86[1] - (char *)v86[0]) >> 3));
      sub_20B16710C((uint64_t)v86[0], (uint64_t)v86[1], (uint64_t)v89);
      *(_OWORD *)v84 = *(_OWORD *)v89;
      v85 = __p;
      sub_20B1617BC((uint64_t *)v84, (CFMutableArrayRef *)&v88);
      sub_20B1610F8(v89, (uint64_t)&v88);
      v38 = *(_OWORD *)v89;
      v89[0] = 0;
      v89[1] = 0;
      v39 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v38;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = (std::__shared_weak_count *)v89[1];
      if (v89[1])
      {
        v43 = (unint64_t *)((char *)v89[1] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v46 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = (char *)v84[0];
      if (v84[0])
      {
        v49 = (char *)v84[1];
        v50 = v84[0];
        if (v84[1] != v84[0])
        {
          do
          {
            v51 = (std::__shared_weak_count *)*((_QWORD *)v49 - 1);
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v49 -= 16;
          }
          while (v49 != v48);
          v50 = v84[0];
        }
        v84[1] = v48;
        operator delete(v50);
      }
      v76 = (char *)v86[0];
      if (v86[0])
      {
        v77 = (char *)v86[1];
        v78 = v86[0];
        if (v86[1] != v86[0])
        {
          do
          {
            v79 = (std::__shared_weak_count *)*((_QWORD *)v77 - 1);
            if (v79)
            {
              v80 = (unint64_t *)&v79->__shared_owners_;
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
            v77 -= 24;
          }
          while (v77 != v76);
          v78 = v86[0];
        }
        v86[1] = v76;
        operator delete(v78);
      }
      return;
    case 4:
      v89[1] = 0;
      __p = 0;
      v89[0] = &v89[1];
      sub_20B4F4BA0(v89, v86);
      *(_OWORD *)v84 = *(_OWORD *)v86;
      sub_20AEC833C((uint64_t)v89, (char *)v89[1]);
      v21 = a1[6];
      v22 = a1[7];
      v23 = v22 >= v21;
      v24 = v22 - v21;
      if (!v23)
        v24 = 0;
      if (v24 <= 3)
      {
        v83 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v83, "Not enough data to read");
        v83->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
        __cxa_throw(v83, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
      }
      v25 = *(_DWORD *)(a1[3] + v21);
      a1[6] = v21 + 4;
      if (v25 <= 1)
      {
        sub_20B167274((uint64_t)v89, a1, (uint64_t)v84);
      }
      else
      {
        sub_20B42BA30(a1);
        sub_20B165F20(a1, v84, 2);
        v26 = a1[12];
        v27 = a1[9];
        a1[6] = *(_QWORD *)(v26 - 8) + *(_QWORD *)(v27 - 8) + 8;
        a1[9] = v27 - 8;
        a1[12] = v26 - 8;
      }
      sub_20AEEC2D8(v86, (uint64_t)v84);
      sub_20B161208(v89, (uint64_t)v86);
      v64 = *(_OWORD *)v89;
      v89[0] = 0;
      v89[1] = 0;
      v65 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v64;
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = (std::__shared_weak_count *)v89[1];
      if (v89[1])
      {
        v69 = (unint64_t *)((char *)v89[1] + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v71 = (std::__shared_weak_count *)v86[1];
      if (v86[1])
      {
        v72 = (unint64_t *)((char *)v86[1] + 8);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v35 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v74 = (unint64_t *)((char *)v84[1] + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
          goto LABEL_104;
      }
      return;
    default:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_20B532360);
      abort();
  }
}

void sub_20B166F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B166FB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B166FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_20AEC147C((uint64_t)&a13);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B166FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_20AEC147C((uint64_t)&a17);
  sub_20AEC3C38(&a9);
  sub_20B0B8EC0(&a13);
  _Unwind_Resume(a1);
}

void sub_20B167024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  sub_20AEC147C((uint64_t)&a9);
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B1670E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1670F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B16710C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_20B161578(&v15, i + 8);
      sub_20B161578(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_20B161688((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_20B167244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B167260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B167274(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  *((_QWORD *)&v16 + 1) = 0;
  v17 = 0;
  *(_QWORD *)&v16 = (char *)&v16 + 8;
  sub_20B4F4BA0(&v16, &v18);
  v15 = v18;
  sub_20AEC833C((uint64_t)&v16, *((char **)&v16 + 1));
  sub_20B1673FC(a2, (uint64_t)&v15);
  sub_20B450618(&v16, (uint64_t)&v15);
  v5 = v16;
  v16 = 0uLL;
  v6 = *(std::__shared_weak_count **)(a3 + 8);
  *(_OWORD *)a3 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B1673BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1673D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1673E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
  sub_20AEC833C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20B1673FC(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void *v31;
  std::logic_error *exception;
  void *v33[2];
  void *__p[2];
  __int128 v35;
  __int128 v36;

  *(_OWORD *)__p = 0u;
  v35 = 0u;
  *(_OWORD *)v33 = 0u;
  sub_20B0E2D50(a1, (uint64_t)v33);
  v5 = a1[6];
  v4 = a1[7];
  v6 = v4 >= v5;
  v7 = v4 - v5;
  if (!v6)
    v7 = 0;
  if (v7 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v5);
  a1[6] = v5 + 8;
  v9 = (char *)v35;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)__p[1]) >> 3);
  v11 = v8 - v10;
  if (v8 <= v10)
  {
    if (v8 >= v10)
    {
      v12 = (char *)v35;
    }
    else
    {
      v12 = (char *)__p[1] + 24 * v8;
      while (v9 != v12)
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v13->__on_zero_shared)(v13, v11);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v9 -= 24;
      }
      *(_QWORD *)&v35 = v12;
    }
  }
  else
  {
    sub_20B160170((char **)&__p[1], v11);
    v12 = (char *)v35;
  }
  *(_QWORD *)&v36 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (char *)__p[1]) >> 3);
  *((void **)&v36 + 1) = __p[1];
  sub_20B167898((uint64_t)a1, &v36);
  sub_20B45014C((uint64_t *)v33, (void ***)&v36);
  v16 = v36;
  v36 = 0uLL;
  v17 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (char *)__p[1];
  if (__p[1])
  {
    v24 = (char *)v35;
    v25 = __p[1];
    if ((void *)v35 != __p[1])
    {
      do
      {
        v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 24;
      }
      while (v24 != v23);
      v25 = __p[1];
    }
    *(_QWORD *)&v35 = v23;
    operator delete(v25);
  }
  v29 = (void **)v33[0];
  if (v33[0])
  {
    v30 = (void **)v33[1];
    v31 = v33[0];
    if (v33[1] != v33[0])
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != v29);
      v31 = v33[0];
    }
    v33[1] = v29;
    operator delete(v31);
  }
}

void sub_20B1676B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_20B15A068(&a9);
  _Unwind_Resume(a1);
}

void sub_20B1676CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20B15A068(&a9);
  _Unwind_Resume(a1);
}

void sub_20B1676E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20B15A068(&a9);
  _Unwind_Resume(a1);
}

void sub_20B1676F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20B15A068(&a9);
  _Unwind_Resume(a1);
}

void sub_20B167708(_QWORD *a1, char **a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char **v15;
  int64_t v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::logic_error *exception;
  char v23;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v3);
  a1[6] = v3 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 3);
  v12 = v8 - v11;
  if (v8 > v11)
  {
    sub_20B160170(a2, v12);
    v15 = a2;
    v13 = *a2;
    v14 = v15[1];
    v16 = v14 - v13;
    if (v14 == v13)
      return;
    goto LABEL_19;
  }
  if (v8 >= v11)
  {
    v13 = *a2;
    v16 = v10 - v13;
    if (v10 == v13)
      return;
    goto LABEL_19;
  }
  v17 = &v9[24 * v8];
  while (v10 != v17)
  {
    v18 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v18->__on_zero_shared)(v18, v12);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v10 -= 24;
  }
  a2[1] = v17;
  v13 = *a2;
  v16 = v17 - v13;
  if (v17 != v13)
  {
LABEL_19:
    v21 = 24 * (v16 / 24);
    do
    {
      sub_20B167950((uint64_t)&v23, a1, (uint64_t)v13);
      v13 += 24;
      v21 -= 24;
    }
    while (v21);
  }
}

void sub_20B167884(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B167898(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  std::logic_error *exception;

  if (*a2)
  {
    v2 = (_QWORD *)result;
    v3 = a2[1];
    v4 = 24 * *a2;
    do
    {
      v5 = v2[6];
      v6 = v2[7];
      v7 = v6 >= v5;
      v8 = v6 - v5;
      if (!v7)
        v8 = 0;
      if (v8 <= 3)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20AEC74EC(exception, "Not enough data to read");
        __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
      }
      v9 = *(unsigned int *)(v2[3] + v5);
      v2[6] = v5 + 4;
      result = sub_20B1679DC(v2, v3, v9);
      v3 += 24;
      v4 -= 24;
    }
    while (v4);
  }
  return result;
}

void sub_20B16793C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B167950(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  std::logic_error *exception;

  v4 = a2[6];
  v3 = a2[7];
  v5 = v3 >= v4;
  v6 = v3 - v4;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v7 = *(unsigned int *)(a2[3] + v4);
  a2[6] = v4 + 4;
  return sub_20B1679DC(a2, a3, v7);
}

void sub_20B1679C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1679DC(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _DWORD *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  char *v73;
  char *v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::logic_error *exception;
  std::logic_error *v80;
  void *v81[2];
  void *v82;
  void *v83[2];
  uint64_t v84;
  __int128 v85;
  void *v86[2];
  void *__p;
  void *v88;
  _DWORD *v89;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 - v2;
  if (v3 < v2)
    v4 = 0;
  if (v4 <= 1)
  {
LABEL_116:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v7 = a1[3];
  v8 = *(unsigned __int16 *)(v7 + v2);
  v9 = v2 + 2;
  a1[6] = v2 + 2;
  *(_WORD *)a2 = v8;
  switch(v8)
  {
    case 0:
      LOBYTE(v86[0]) = 7;
      LOBYTE(v86[1]) = 7;
      v10 = operator new(4uLL);
      __p = v10;
      *v10 = 0;
      v88 = v10 + 1;
      v89 = v10 + 1;
      sub_20B102628((uint64_t)v83, a1, v86);
      sub_20B4F6318((uint64_t)v83, (uint64_t)&v86[1]);
      v85 = *(_OWORD *)v83;
      sub_20B160DC8(v81, (uint64_t)&v85);
      v11 = *(_OWORD *)v81;
      v81[0] = 0;
      v81[1] = 0;
      v12 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v11;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v16 = (unint64_t *)((char *)v81[1] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (*((_QWORD *)&v85 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v88 = __p;
        operator delete(__p);
      }
      return;
    case 1:
      v86[0] = 0;
      v86[1] = 0;
      __p = 0;
      sub_20B42BD80(a1, (uint64_t)v86);
      sub_20B4EE2F0((uint64_t)v86, (CFStringRef *)v81);
      sub_20B160ED8(v83, (uint64_t)v81);
      v63 = *(_OWORD *)v83;
      v83[0] = 0;
      v83[1] = 0;
      v64 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v63;
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)v83[1];
      if (v83[1])
      {
        v68 = (unint64_t *)((char *)v83[1] + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v71 = (unint64_t *)((char *)v81[1] + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      if (SHIBYTE(__p) < 0)
        operator delete(v86[0]);
      return;
    case 2:
      if (v3 <= v9)
        goto LABEL_116;
      LOBYTE(v81[0]) = *(_BYTE *)(v7 + v9);
      a1[6] = v2 + 3;
      sub_20B4EE200(v81, (std::__shared_weak_count_vtbl **)v83);
      sub_20B160FE8(v86, (uint64_t)v83);
      v38 = *(_OWORD *)v86;
      v86[0] = 0;
      v86[1] = 0;
      v39 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v38;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = (std::__shared_weak_count *)v86[1];
      if (v86[1])
      {
        v43 = (unint64_t *)((char *)v86[1] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v35 = (std::__shared_weak_count *)v83[1];
      if (v83[1])
      {
        v45 = (unint64_t *)((char *)v83[1] + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
LABEL_60:
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      return;
    case 3:
      v83[0] = 0;
      v83[1] = 0;
      v84 = 0;
      sub_20B167708(a1, (char **)v83);
      v86[1] = 0;
      __p = 0;
      v86[0] = 0;
      sub_20B161318((uint64_t)v86, 0xAAAAAAAAAAAAAAABLL * (((char *)v83[1] - (char *)v83[0]) >> 3));
      sub_20B16831C((uint64_t)v83[0], (uint64_t)v83[1], (uint64_t)v86);
      *(_OWORD *)v81 = *(_OWORD *)v86;
      v82 = __p;
      sub_20B1617BC((uint64_t *)v81, (CFMutableArrayRef *)&v85);
      sub_20B1610F8(v86, (uint64_t)&v85);
      v47 = *(_OWORD *)v86;
      v86[0] = 0;
      v86[1] = 0;
      v48 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v47;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = (std::__shared_weak_count *)v86[1];
      if (v86[1])
      {
        v52 = (unint64_t *)((char *)v86[1] + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (*((_QWORD *)&v85 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = (char *)v81[0];
      if (v81[0])
      {
        v58 = (char *)v81[1];
        v59 = v81[0];
        if (v81[1] != v81[0])
        {
          do
          {
            v60 = (std::__shared_weak_count *)*((_QWORD *)v58 - 1);
            if (v60)
            {
              v61 = (unint64_t *)&v60->__shared_owners_;
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
            v58 -= 16;
          }
          while (v58 != v57);
          v59 = v81[0];
        }
        v81[1] = v57;
        operator delete(v59);
      }
      v73 = (char *)v83[0];
      if (v83[0])
      {
        v74 = (char *)v83[1];
        v75 = v83[0];
        if (v83[1] != v83[0])
        {
          do
          {
            v76 = (std::__shared_weak_count *)*((_QWORD *)v74 - 1);
            if (v76)
            {
              v77 = (unint64_t *)&v76->__shared_owners_;
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            v74 -= 24;
          }
          while (v74 != v73);
          v75 = v83[0];
        }
        v83[1] = v73;
        operator delete(v75);
      }
      return;
    case 4:
      v86[1] = 0;
      __p = 0;
      v86[0] = &v86[1];
      sub_20B4F4BA0(v86, v83);
      *(_OWORD *)v81 = *(_OWORD *)v83;
      sub_20AEC833C((uint64_t)v86, (char *)v86[1]);
      v21 = a1[6];
      v22 = a1[7];
      v23 = v22 >= v21;
      v24 = v22 - v21;
      if (!v23)
        v24 = 0;
      if (v24 <= 3)
      {
        v80 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v80, "Not enough data to read");
        v80->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
        __cxa_throw(v80, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
      }
      a1[6] = v21 + 4;
      sub_20B1673FC(a1, (uint64_t)v81);
      sub_20AEEC2D8(v83, (uint64_t)v81);
      sub_20B161208(v86, (uint64_t)v83);
      v25 = *(_OWORD *)v86;
      v86[0] = 0;
      v86[1] = 0;
      v26 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v25;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = (std::__shared_weak_count *)v86[1];
      if (v86[1])
      {
        v30 = (unint64_t *)((char *)v86[1] + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = (std::__shared_weak_count *)v83[1];
      if (v83[1])
      {
        v33 = (unint64_t *)((char *)v83[1] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v36 = (unint64_t *)((char *)v81[1] + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
          goto LABEL_60;
      }
      return;
    default:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_20B532360);
      abort();
  }
}

void sub_20B1681A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1681C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1681D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_20AEC147C((uint64_t)&a17);
  sub_20AEC3C38(&a9);
  sub_20B0B8EC0(&a13);
  _Unwind_Resume(a1);
}

void sub_20B168220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B168234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  sub_20AEC147C((uint64_t)&a9);
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B1682F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B168308(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B16831C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_20B161578(&v15, i + 8);
      sub_20B161578(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_20B161688((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_20B168454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B168470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B168484(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_20B4F4BA0(&v8, &v10);
  v7 = v10;
  sub_20AEC833C((uint64_t)&v8, v9[0]);
  sub_20B165F20(a1, (uint64_t)&v7);
  sub_20B15F808(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20B168540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20AEC833C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20B168558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B16859C(int *a1, _QWORD *a2, uint64_t *a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(_QWORD *, unsigned int *))(*a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20B1686C8();
      sub_20B520518((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(_QWORD *))(*a2 + 16))(a2);
    sub_20B168A78(a2, (uint64_t)a3);
    (*(void (**)(_QWORD *))(*a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
    sub_20B168B90((uint64_t)&v13, a2, a3);
  else
    sub_20B168A78(a2, (uint64_t)a3);
}

__int128 *sub_20B1686C8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254636018);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254636018))
    return &xmmword_254636000;
  v2 = sub_20B1687A4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254636000, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254636010 = v2->__r_.__value_.__r.__words[2];
    xmmword_254636000 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254636000, &dword_20AEBB000);
  __cxa_guard_release(&qword_254636018);
  return &xmmword_254636000;
}

void sub_20B16878C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636018);
  _Unwind_Resume(a1);
}

std::string *sub_20B1687A4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254636038);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254636038))
    return &stru_254636020;
  sub_20B168894((uint64_t)__p);
  sub_20AF6D7B0((char *)__p, &stru_254636020);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254636020, &dword_20AEBB000);
  __cxa_guard_release(&qword_254636038);
  return &stru_254636020;
}

void sub_20B168854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254636038);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254636038);
  _Unwind_Resume(a1);
}

void sub_20B168894(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254636058);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254636058))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::dictio::DictionarySample<>]", qword_254636040);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254636040, &dword_20AEBB000);
    __cxa_guard_release(&qword_254636058);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254636078);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254636078))
  {
    v5 = sub_20AED4780(qword_254636040, "<", 0);
    sub_20AED467C(qword_254636040, 0, v5, qword_254636060);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254636060, &dword_20AEBB000);
    __cxa_guard_release(&qword_254636078);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254636098);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254636098))
  {
    sub_20B531658((uint64_t)qword_254636060, (uint64_t)&xmmword_254636080);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254636080, &dword_20AEBB000);
    __cxa_guard_release(&qword_254636098);
  }
  if (byte_254636097 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254636080, *((unint64_t *)&xmmword_254636080 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254636080;
    *(_QWORD *)(a1 + 16) = unk_254636090;
  }
}

void sub_20B168A30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636098);
  _Unwind_Resume(a1);
}

void sub_20B168A48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636078);
  _Unwind_Resume(a1);
}

void sub_20B168A60(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636058);
  _Unwind_Resume(a1);
}

void sub_20B168A78(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_20B4F4BA0(&v8, &v10);
  v7 = v10;
  sub_20AEC833C((uint64_t)&v8, v9[0]);
  sub_20B168C94(a1, (uint64_t)&v7);
  sub_20B15F44C(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20B168B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20AEC833C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20B168B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B168B90(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_20B416888(&v15);
  sub_20B16BAC8(a2, (uint64_t)&v15);
  v6 = v15;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)a3[1];
  *a3 = v6;
  a3[1] = (uint64_t)v5;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B168C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B168C94(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _WORD *v7;
  int64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void *v31;
  void *v32[2];
  void *__p[2];
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t *v38;
  int *v39;
  int v40;
  char v41;

  *(_OWORD *)__p = 0u;
  v34 = 0u;
  *(_OWORD *)v32 = 0u;
  sub_20B0E4ED8((uint64_t)a1, (char **)v32);
  v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (unint64_t)__p[1]) >> 3);
  (*(void (**)(_QWORD *, unint64_t *))(*a1 + 120))(a1, &v35);
  v4 = (char *)v34;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (unint64_t)__p[1]) >> 3);
  v6 = v35 - v5;
  if (v35 > v5)
  {
    sub_20B160170((char **)&__p[1], v6);
    v7 = __p[1];
    v8 = v34 - (unint64_t)__p[1];
    if ((void *)v34 == __p[1])
      goto LABEL_23;
    goto LABEL_16;
  }
  if (v35 >= v5)
  {
    v7 = __p[1];
    v8 = v34 - (unint64_t)__p[1];
    if ((void *)v34 == __p[1])
      goto LABEL_23;
    goto LABEL_16;
  }
  v9 = (char *)__p[1] + 24 * v35;
  while (v4 != v9)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v4 -= 24;
  }
  *(_QWORD *)&v34 = v9;
  v7 = __p[1];
  v8 = v9 - (char *)__p[1];
  if (v9 != __p[1])
  {
LABEL_16:
    v13 = 24 * (v8 / 24);
    do
    {
      v14 = *a1;
      v36 = a1[1];
      v40 = 0;
      LODWORD(v37) = 2;
      (*(void (**)(_QWORD *, __int128 *))(v14 + 104))(a1, &v37);
      v15 = v37;
      v40 = v37;
      *(_QWORD *)&v37 = a1;
      *((_QWORD *)&v37 + 1) = v7;
      v38 = &v36;
      v39 = &v40;
      if ((int)v36 >= 1)
      {
        sub_20B1691C0((uint64_t)&v37);
      }
      else if (v15 < 2)
      {
        sub_20B1697C0((uint64_t)&v41, (uint64_t)a1, (uint64_t)v7);
      }
      else
      {
        sub_20B169978((uint64_t)a1, v7);
      }
      v7 += 12;
      v13 -= 24;
    }
    while (v13);
  }
LABEL_23:
  sub_20B450D84((uint64_t *)v32, (void ***)&v37);
  v16 = v37;
  v37 = 0uLL;
  v17 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (char *)__p[1];
  if (__p[1])
  {
    v24 = (char *)v34;
    v25 = __p[1];
    if ((void *)v34 != __p[1])
    {
      do
      {
        v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 24;
      }
      while (v24 != v23);
      v25 = __p[1];
    }
    *(_QWORD *)&v34 = v23;
    operator delete(v25);
  }
  v29 = (void **)v32[0];
  if (v32[0])
  {
    v30 = (void **)v32[1];
    v31 = v32[0];
    if (v32[1] != v32[0])
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != v29);
      v31 = v32[0];
    }
    v32[1] = v29;
    operator delete(v31);
  }
}

void sub_20B168FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20B15A068(&a9);
  _Unwind_Resume(a1);
}

void sub_20B168FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20B15A068(&a9);
  _Unwind_Resume(a1);
}

void sub_20B168FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20B15A068(&a9);
  _Unwind_Resume(a1);
}

void sub_20B168FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20B15A068(&a9);
  _Unwind_Resume(a1);
}

void sub_20B16900C(_QWORD *a1, char **a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;

  v17 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  (*(void (**)(_QWORD *, unint64_t *))(*a1 + 120))(a1, &v17);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  v6 = v17 - v5;
  if (v17 > v5)
  {
    sub_20B160170(a2, v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    v10 = v8 - v7;
    if (v8 == v7)
      return;
    goto LABEL_16;
  }
  if (v17 >= v5)
  {
    v7 = *a2;
    v10 = v4 - v7;
    if (v4 == v7)
      return;
    goto LABEL_16;
  }
  v11 = (uint64_t)&(*a2)[24 * v17];
  while (v4 != (char *)v11)
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v4 -= 24;
  }
  a2[1] = (char *)v11;
  v7 = *a2;
  v10 = v11 - (_QWORD)v7;
  if ((char *)v11 != v7)
  {
LABEL_16:
    v15 = 24 * (v10 / 24);
    do
    {
      v16 = *a1;
      v18 = a1[1];
      v19 = 2;
      (*(void (**)(_QWORD *, unsigned int *))(v16 + 104))(a1, &v19);
      if ((int)v18 >= 1)
      {
        sub_20B1692E4((int *)&v18, (uint64_t)a1, (uint64_t)v7, v19);
      }
      else if (v19 < 2)
      {
        sub_20B1697C0((uint64_t)&v19, (uint64_t)a1, (uint64_t)v7);
      }
      else
      {
        sub_20B169978(a1, v7, v19);
      }
      v7 += 24;
      v15 -= 24;
    }
    while (v15);
  }
}

void sub_20B1691C0(uint64_t a1)
{
  uint64_t v1;
  _WORD *v2;
  int *v3;
  unsigned int v4;
  int v5;
  unsigned int v7;
  unsigned int v8;
  __int128 *v9;
  char v10;
  unsigned int v11;

  v1 = *(_QWORD *)a1;
  v2 = *(_WORD **)(a1 + 8);
  v3 = *(int **)(a1 + 16);
  v4 = **(_DWORD **)(a1 + 24);
  v5 = *v3;
  if (*v3 == 2)
  {
    if (v4 < 2)
      goto LABEL_9;
    v11 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v1 + 104))(v1, &v11);
    if (v11 >= 3)
    {
      v8 = v11;
      v9 = sub_20B169410();
      sub_20B520518((std::string *)v9, v8, 2u);
    }
    v5 = *v3;
  }
  if (v5 >= 1 && v4 > 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
    sub_20B169978(v1, v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
    return;
  }
LABEL_9:
  if (v4 >= 2)
    v7 = 2;
  else
    v7 = v4;
  if (v7 <= 1)
    sub_20B1697C0((uint64_t)&v10, v1, (uint64_t)v2);
  else
    sub_20B169978(v1, v2);
}

void sub_20B1692E4(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20B169410();
      sub_20B520518((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_20B169978(a2, a3, 2);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
    sub_20B1697C0((uint64_t)&v13, a2, a3);
  else
    sub_20B169978(a2, a3, 2);
}

__int128 *sub_20B169410()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546360B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546360B8))
    return &xmmword_2546360A0;
  v2 = sub_20B1694EC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546360A0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546360B0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546360A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546360A0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546360B8);
  return &xmmword_2546360A0;
}

void sub_20B1694D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546360B8);
  _Unwind_Resume(a1);
}

std::string *sub_20B1694EC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546360D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546360D8))
    return &stru_2546360C0;
  sub_20B1695DC((uint64_t)__p);
  sub_20AF6D7B0((char *)__p, &stru_2546360C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546360C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546360D8);
  return &stru_2546360C0;
}

void sub_20B16959C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546360D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546360D8);
  _Unwind_Resume(a1);
}

void sub_20B1695DC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546360F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546360F8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cfio::DictionaryValueSample<>]", qword_2546360E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546360E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546360F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254636118);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254636118))
  {
    v5 = sub_20AED4780(qword_2546360E0, "<", 0);
    sub_20AED467C(qword_2546360E0, 0, v5, qword_254636100);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254636100, &dword_20AEBB000);
    __cxa_guard_release(&qword_254636118);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254636138);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254636138))
  {
    sub_20B531658((uint64_t)qword_254636100, (uint64_t)&xmmword_254636120);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254636120, &dword_20AEBB000);
    __cxa_guard_release(&qword_254636138);
  }
  if (byte_254636137 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254636120, *((unint64_t *)&xmmword_254636120 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254636120;
    *(_QWORD *)(a1 + 16) = unk_254636130;
  }
}

void sub_20B169778(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636138);
  _Unwind_Resume(a1);
}

void sub_20B169790(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636118);
  _Unwind_Resume(a1);
}

void sub_20B1697A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546360F8);
  _Unwind_Resume(a1);
}

void sub_20B1697C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int16 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v20 = 0;
  v21 = 0;
  sub_20B16B094(a2, &v19);
  v4 = v19;
  sub_20B161578(&v22, (uint64_t)&v20);
  sub_20B161578(&v18, (uint64_t)&v22);
  v5 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_WORD *)a3 = v4;
  v8 = v18;
  v18 = 0uLL;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_OWORD *)(a3 + 8) = v8;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20B169934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B169950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B169964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B169978(uint64_t a1, _WORD *a2)
{
  _DWORD *v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  void *v72[2];
  void *v73;
  void *v74[2];
  uint64_t v75;
  __int128 v76;
  void *__p[2];
  void *v78;
  __int128 *v79;
  _DWORD *v80;
  char v81;

  __p[0] = a2;
  sub_20B16A298((_BYTE *)a1, (_WORD **)__p);
  switch(*a2)
  {
    case 0:
      LOBYTE(__p[0]) = 7;
      LOBYTE(__p[1]) = 7;
      v4 = operator new(4uLL);
      v78 = v4;
      *v4 = 0;
      v79 = (__int128 *)(v4 + 1);
      v80 = v4 + 1;
      v5 = *(_QWORD *)a1;
      v72[0] = *(void **)(a1 + 8);
      LODWORD(v74[0]) = 2;
      (*(void (**)(uint64_t, void **))(v5 + 104))(a1, v74);
      if (SLODWORD(v72[0]) < 1)
      {
        if (LODWORD(v74[0]) < 2)
        {
          sub_20B103798((uint64_t)v74, (_BYTE *)a1, (uint64_t)__p);
        }
        else
        {
          v74[0] = __p;
          sub_20B103C34((_BYTE *)a1, (_BYTE **)v74);
          sub_20B10391C(LOBYTE(__p[0]), a1, (uint64_t)__p);
        }
      }
      else
      {
        sub_20B103450((int *)v72, (_BYTE *)a1, __p, v74[0]);
      }
      sub_20B4F6318((uint64_t)v74, (uint64_t)&__p[1]);
      v76 = *(_OWORD *)v74;
      sub_20B160DC8(v72, (uint64_t)&v76);
      v51 = *(_OWORD *)v72;
      v72[0] = 0;
      v72[1] = 0;
      v52 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v51;
      if (v52)
      {
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldaxr(p_shared_owners);
        while (__stlxr(v54 - 1, p_shared_owners));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = (std::__shared_weak_count *)v72[1];
      if (v72[1])
      {
        v56 = (unint64_t *)((char *)v72[1] + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        v59 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      if (v78)
      {
        v79 = (__int128 *)v78;
        operator delete(v78);
      }
      return;
    case 1:
      __p[0] = 0;
      __p[1] = 0;
      v78 = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, __p);
      sub_20B4EE2F0((uint64_t)__p, (CFStringRef *)v72);
      sub_20B160ED8(v74, (uint64_t)v72);
      v6 = *(_OWORD *)v74;
      v74[0] = 0;
      v74[1] = 0;
      v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v6;
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = (std::__shared_weak_count *)v74[1];
      if (v74[1])
      {
        v11 = (unint64_t *)((char *)v74[1] + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (std::__shared_weak_count *)v72[1];
      if (v72[1])
      {
        v14 = (unint64_t *)((char *)v72[1] + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (SHIBYTE(v78) < 0)
        operator delete(__p[0]);
      return;
    case 2:
      LOBYTE(v72[0]) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 32))(a1, v72);
      sub_20B4EE200(v72, (std::__shared_weak_count_vtbl **)v74);
      sub_20B160FE8(__p, (uint64_t)v74);
      v16 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v17 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v16;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v21 = (unint64_t *)((char *)__p[1] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (std::__shared_weak_count *)v74[1];
      if (!v74[1])
        return;
      v24 = (unint64_t *)((char *)v74[1] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      break;
    case 3:
      v74[0] = 0;
      v74[1] = 0;
      v75 = 0;
      sub_20B16900C((_QWORD *)a1, (char **)v74);
      __p[1] = 0;
      v78 = 0;
      __p[0] = 0;
      sub_20B161318((uint64_t)__p, 0xAAAAAAAAAAAAAAABLL * (((char *)v74[1] - (char *)v74[0]) >> 3));
      sub_20B16A44C((uint64_t)v74[0], (uint64_t)v74[1], (uint64_t)__p);
      *(_OWORD *)v72 = *(_OWORD *)__p;
      v73 = v78;
      sub_20B1617BC((uint64_t *)v72, (CFMutableArrayRef *)&v76);
      sub_20B1610F8(__p, (uint64_t)&v76);
      v26 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v27 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v26;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v31 = (unint64_t *)((char *)__p[1] + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = (char *)v72[0];
      if (v72[0])
      {
        v37 = (char *)v72[1];
        v38 = v72[0];
        if (v72[1] != v72[0])
        {
          do
          {
            v39 = (std::__shared_weak_count *)*((_QWORD *)v37 - 1);
            if (v39)
            {
              v40 = (unint64_t *)&v39->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            v37 -= 16;
          }
          while (v37 != v36);
          v38 = v72[0];
        }
        v72[1] = v36;
        operator delete(v38);
      }
      v45 = (char *)v74[0];
      if (v74[0])
      {
        v46 = (char *)v74[1];
        v47 = v74[0];
        if (v74[1] != v74[0])
        {
          do
          {
            v48 = (std::__shared_weak_count *)*((_QWORD *)v46 - 1);
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v46 -= 24;
          }
          while (v46 != v45);
          v47 = v74[0];
        }
        v74[1] = v45;
        operator delete(v47);
      }
      return;
    case 4:
      __p[1] = 0;
      v78 = 0;
      __p[0] = &__p[1];
      sub_20B4F4BA0(__p, v74);
      *(_OWORD *)v72 = *(_OWORD *)v74;
      sub_20AEC833C((uint64_t)__p, (char *)__p[1]);
      v42 = *(_QWORD *)a1;
      v74[0] = *(void **)(a1 + 8);
      v43 = (int)v74[0];
      LODWORD(v76) = 0;
      LODWORD(__p[0]) = 2;
      (*(void (**)(uint64_t, void **))(v42 + 104))(a1, __p);
      v44 = LODWORD(__p[0]);
      LODWORD(v76) = __p[0];
      __p[0] = (void *)a1;
      __p[1] = v72;
      v78 = v74;
      v79 = &v76;
      if (v43 < 1)
      {
        if (v44 < 2)
          sub_20B16AA88((uint64_t)&v81, a1, (uint64_t)v72);
        else
          sub_20B168C94(a1, v72, v44);
      }
      else
      {
        sub_20B16A5B4((uint64_t)__p);
      }
      sub_20AEEC2D8(v74, (uint64_t)v72);
      sub_20B161208(__p, (uint64_t)v74);
      v61 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v62 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v61;
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v65 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v66 = (unint64_t *)((char *)__p[1] + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = (std::__shared_weak_count *)v74[1];
      if (v74[1])
      {
        v69 = (unint64_t *)((char *)v74[1] + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v23 = (std::__shared_weak_count *)v72[1];
      if (!v72[1])
        return;
      v71 = (unint64_t *)((char *)v72[1] + 8);
      do
        v25 = __ldaxr(v71);
      while (__stlxr(v25 - 1, v71));
      break;
    default:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_20B532360);
      abort();
  }
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_20B16A160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_20AEC147C((uint64_t)&a13);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B16A17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B16A190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,void *__p,uint64_t a22)
{
  sub_20AEC147C((uint64_t)&a17);
  if (!__p)
    _Unwind_Resume(a1);
  a22 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B16A298(_BYTE *a1, _WORD **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_20B52CF30(v5, v7);
    v15 = v6;
    v14 = 0;
    sub_20B4516EC((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v6 + 128);
    MEMORY[0x20BD3583C](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LOWORD(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 96))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_20B16A400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_20B52CE84(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B16A44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_20B161578(&v15, i + 8);
      sub_20B161578(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_20B161688((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_20B16A584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B16A5A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B16A5B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  unsigned int v4;
  int v5;
  unsigned int v7;
  unsigned int v8;
  __int128 *v9;
  char v10;
  unsigned int v11;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(int **)(a1 + 16);
  v4 = **(_DWORD **)(a1 + 24);
  v5 = *v3;
  if (*v3 == 2)
  {
    if (v4 < 2)
      goto LABEL_9;
    v11 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v1 + 104))(v1, &v11);
    if (v11 >= 3)
    {
      v8 = v11;
      v9 = sub_20B16A6D8();
      sub_20B520518((std::string *)v9, v8, 2u);
    }
    v5 = *v3;
  }
  if (v5 >= 1 && v4 > 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
    sub_20B168C94(v1, v2, 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
    return;
  }
LABEL_9:
  if (v4 >= 2)
    v7 = 2;
  else
    v7 = v4;
  if (v7 <= 1)
    sub_20B16AA88((uint64_t)&v10, v1, v2);
  else
    sub_20B168C94(v1, v2, 2);
}

__int128 *sub_20B16A6D8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254636158);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254636158))
    return &xmmword_254636140;
  v2 = sub_20B16A7B4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254636140, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254636150 = v2->__r_.__value_.__r.__words[2];
    xmmword_254636140 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254636140, &dword_20AEBB000);
  __cxa_guard_release(&qword_254636158);
  return &xmmword_254636140;
}

void sub_20B16A79C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636158);
  _Unwind_Resume(a1);
}

std::string *sub_20B16A7B4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254636178);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254636178))
    return &stru_254636160;
  sub_20B16A8A4((uint64_t)__p);
  sub_20AF6D7B0((char *)__p, &stru_254636160);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254636160, &dword_20AEBB000);
  __cxa_guard_release(&qword_254636178);
  return &stru_254636160;
}

void sub_20B16A864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254636178);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254636178);
  _Unwind_Resume(a1);
}

void sub_20B16A8A4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254636198);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254636198))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cfio::DictionaryRefSample<>]", qword_254636180);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254636180, &dword_20AEBB000);
    __cxa_guard_release(&qword_254636198);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2546361B8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2546361B8))
  {
    v5 = sub_20AED4780(qword_254636180, "<", 0);
    sub_20AED467C(qword_254636180, 0, v5, qword_2546361A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546361A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546361B8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546361D8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546361D8))
  {
    sub_20B531658((uint64_t)qword_2546361A0, (uint64_t)&xmmword_2546361C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546361C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546361D8);
  }
  if (byte_2546361D7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546361C0, *((unint64_t *)&xmmword_2546361C0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546361C0;
    *(_QWORD *)(a1 + 16) = unk_2546361D0;
  }
}

void sub_20B16AA40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546361D8);
  _Unwind_Resume(a1);
}

void sub_20B16AA58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546361B8);
  _Unwind_Resume(a1);
}

void sub_20B16AA70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636198);
  _Unwind_Resume(a1);
}

void sub_20B16AA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  *((_QWORD *)&v16 + 1) = 0;
  v17 = 0;
  *(_QWORD *)&v16 = (char *)&v16 + 8;
  sub_20B4F4BA0(&v16, &v18);
  v15 = v18;
  sub_20AEC833C((uint64_t)&v16, *((char **)&v16 + 1));
  sub_20B16AC10(a2, (uint64_t)&v15);
  sub_20B450618(&v16, (uint64_t)&v15);
  v5 = v16;
  v16 = 0uLL;
  v6 = *(std::__shared_weak_count **)(a3 + 8);
  *(_OWORD *)a3 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B16ABD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B16ABE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B16ABF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
  sub_20AEC833C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20B16AC10(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  void **v28;
  void *v29;
  __int128 v30;
  void *v31[2];
  void *__p[2];
  __int128 v33;
  unsigned int v34;

  *(_OWORD *)__p = 0u;
  v33 = 0u;
  *(_OWORD *)v31 = 0u;
  sub_20B0E4ED8(a1, (char **)v31);
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, &v30);
  v4 = (char *)v33;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  v6 = v30 - v5;
  if ((unint64_t)v30 > v5)
  {
    sub_20B160170((char **)&__p[1], v6);
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  if ((unint64_t)v30 >= v5)
  {
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  v9 = (char *)__p[1] + 24 * v30;
  while (v4 != v9)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v4 -= 24;
  }
  *(_QWORD *)&v33 = v9;
  v7 = (char *)__p[1];
  v8 = v9 - (char *)__p[1];
  if (v9 != __p[1])
  {
LABEL_16:
    v13 = 24 * (v8 / 24);
    do
    {
      v34 = 1;
      (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 104))(a1, &v34);
      sub_20B16B094(a1, v7, v34);
      v7 += 24;
      v13 -= 24;
    }
    while (v13);
  }
LABEL_18:
  sub_20B45014C((uint64_t *)v31, (void ***)&v30);
  v14 = v30;
  v30 = 0uLL;
  v15 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (char *)__p[1];
  if (__p[1])
  {
    v22 = (char *)v33;
    v23 = __p[1];
    if ((void *)v33 != __p[1])
    {
      do
      {
        v24 = (std::__shared_weak_count *)*((_QWORD *)v22 - 1);
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v22 -= 24;
      }
      while (v22 != v21);
      v23 = __p[1];
    }
    *(_QWORD *)&v33 = v21;
    operator delete(v23);
  }
  v27 = (void **)v31[0];
  if (v31[0])
  {
    v28 = (void **)v31[1];
    v29 = v31[0];
    if (v31[1] != v31[0])
    {
      do
      {
        if (*((char *)v28 - 1) < 0)
          operator delete(*(v28 - 3));
        v28 -= 3;
      }
      while (v28 != v27);
      v29 = v31[0];
    }
    v31[1] = v27;
    operator delete(v29);
  }
}

void sub_20B16AED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B16AEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B16AF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B16AF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B15A068((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B16AF28(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;

  v16 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v16);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  v6 = v16 - v5;
  if (v16 > v5)
  {
    sub_20B160170(a2, v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    v10 = v8 - v7;
    if (v8 == v7)
      return;
    goto LABEL_16;
  }
  if (v16 >= v5)
  {
    v7 = *a2;
    v10 = v4 - v7;
    if (v4 == v7)
      return;
    goto LABEL_16;
  }
  v11 = (uint64_t)&(*a2)[24 * v16];
  while (v4 != (char *)v11)
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v4 -= 24;
  }
  a2[1] = (char *)v11;
  v7 = *a2;
  v10 = v11 - (_QWORD)v7;
  if ((char *)v11 != v7)
  {
LABEL_16:
    v15 = 24 * (v10 / 24);
    do
    {
      v17 = 1;
      (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 104))(a1, &v17);
      sub_20B16B094(a1, v7, v17);
      v7 += 24;
      v15 -= 24;
    }
    while (v15);
  }
}

void sub_20B16B094(uint64_t a1, _WORD *a2)
{
  _DWORD *v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  char *v53;
  char *v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69[2];
  void *v70;
  void *v71[2];
  uint64_t v72;
  __int128 v73;
  void *__p[2];
  void *v75;
  void *v76;
  _DWORD *v77;

  __p[0] = a2;
  sub_20B16A298((_BYTE *)a1, (_WORD **)__p);
  switch(*a2)
  {
    case 0:
      LOBYTE(__p[0]) = 7;
      LOBYTE(__p[1]) = 7;
      v4 = operator new(4uLL);
      v75 = v4;
      *v4 = 0;
      v76 = v4 + 1;
      v77 = v4 + 1;
      v5 = *(_QWORD *)a1;
      v69[0] = *(void **)(a1 + 8);
      LODWORD(v71[0]) = 2;
      (*(void (**)(uint64_t, void **))(v5 + 104))(a1, v71);
      if (SLODWORD(v69[0]) < 1)
      {
        if (LODWORD(v71[0]) < 2)
        {
          sub_20B103798((uint64_t)v71, (_BYTE *)a1, (uint64_t)__p);
        }
        else
        {
          v71[0] = __p;
          sub_20B103C34((_BYTE *)a1, (_BYTE **)v71);
          sub_20B10391C(LOBYTE(__p[0]), a1, (uint64_t)__p);
        }
      }
      else
      {
        sub_20B103450((int *)v69, (_BYTE *)a1, __p, v71[0]);
      }
      sub_20B4F6318((uint64_t)v71, (uint64_t)&__p[1]);
      v73 = *(_OWORD *)v71;
      sub_20B160DC8(v69, (uint64_t)&v73);
      v59 = *(_OWORD *)v69;
      v69[0] = 0;
      v69[1] = 0;
      v60 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v59;
      if (v60)
      {
        p_shared_owners = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldaxr(p_shared_owners);
        while (__stlxr(v62 - 1, p_shared_owners));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v63 = (std::__shared_weak_count *)v69[1];
      if (v69[1])
      {
        v64 = (unint64_t *)((char *)v69[1] + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v66 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
      if (*((_QWORD *)&v73 + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      if (v75)
      {
        v76 = v75;
        operator delete(v75);
      }
      return;
    case 1:
      __p[0] = 0;
      __p[1] = 0;
      v75 = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, __p);
      sub_20B4EE2F0((uint64_t)__p, (CFStringRef *)v69);
      sub_20B160ED8(v71, (uint64_t)v69);
      v6 = *(_OWORD *)v71;
      v71[0] = 0;
      v71[1] = 0;
      v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v6;
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v11 = (unint64_t *)((char *)v71[1] + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (std::__shared_weak_count *)v69[1];
      if (v69[1])
      {
        v14 = (unint64_t *)((char *)v69[1] + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (SHIBYTE(v75) < 0)
        operator delete(__p[0]);
      return;
    case 2:
      LOBYTE(v69[0]) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 32))(a1, v69);
      sub_20B4EE200(v69, (std::__shared_weak_count_vtbl **)v71);
      sub_20B160FE8(__p, (uint64_t)v71);
      v16 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v17 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v16;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v21 = (unint64_t *)((char *)__p[1] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (std::__shared_weak_count *)v71[1];
      if (!v71[1])
        return;
      v24 = (unint64_t *)((char *)v71[1] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      break;
    case 3:
      v71[0] = 0;
      v71[1] = 0;
      v72 = 0;
      sub_20B16AF28(a1, (char **)v71);
      __p[1] = 0;
      v75 = 0;
      __p[0] = 0;
      sub_20B161318((uint64_t)__p, 0xAAAAAAAAAAAAAAABLL * (((char *)v71[1] - (char *)v71[0]) >> 3));
      sub_20B16B960((uint64_t)v71[0], (uint64_t)v71[1], (uint64_t)__p);
      *(_OWORD *)v69 = *(_OWORD *)__p;
      v70 = v75;
      sub_20B1617BC((uint64_t *)v69, (CFMutableArrayRef *)&v73);
      sub_20B1610F8(__p, (uint64_t)&v73);
      v26 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v27 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v26;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v31 = (unint64_t *)((char *)__p[1] + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
      if (*((_QWORD *)&v73 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = (char *)v69[0];
      if (v69[0])
      {
        v37 = (char *)v69[1];
        v38 = v69[0];
        if (v69[1] != v69[0])
        {
          do
          {
            v39 = (std::__shared_weak_count *)*((_QWORD *)v37 - 1);
            if (v39)
            {
              v40 = (unint64_t *)&v39->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            v37 -= 16;
          }
          while (v37 != v36);
          v38 = v69[0];
        }
        v69[1] = v36;
        operator delete(v38);
      }
      v53 = (char *)v71[0];
      if (v71[0])
      {
        v54 = (char *)v71[1];
        v55 = v71[0];
        if (v71[1] != v71[0])
        {
          do
          {
            v56 = (std::__shared_weak_count *)*((_QWORD *)v54 - 1);
            if (v56)
            {
              v57 = (unint64_t *)&v56->__shared_owners_;
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            v54 -= 24;
          }
          while (v54 != v53);
          v55 = v71[0];
        }
        v71[1] = v53;
        operator delete(v55);
      }
      return;
    case 4:
      __p[1] = 0;
      v75 = 0;
      __p[0] = &__p[1];
      sub_20B4F4BA0(__p, v71);
      *(_OWORD *)v69 = *(_OWORD *)v71;
      sub_20AEC833C((uint64_t)__p, (char *)__p[1]);
      LODWORD(__p[0]) = 1;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 104))(a1, __p);
      sub_20B16AC10(a1, (uint64_t)v69);
      sub_20AEEC2D8(v71, (uint64_t)v69);
      sub_20B161208(__p, (uint64_t)v71);
      v42 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v43 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v42;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v47 = (unint64_t *)((char *)__p[1] + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v49 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v50 = (unint64_t *)((char *)v71[1] + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v23 = (std::__shared_weak_count *)v69[1];
      if (!v69[1])
        return;
      v52 = (unint64_t *)((char *)v69[1] + 8);
      do
        v25 = __ldaxr(v52);
      while (__stlxr(v25 - 1, v52));
      break;
    default:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_20B532360);
      abort();
  }
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_20B16B828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,void *__p,uint64_t a22)
{
  sub_20AEC147C((uint64_t)&a17);
  if (!__p)
    _Unwind_Resume(a1);
  a22 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B16B960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_20B161578(&v15, i + 8);
      sub_20B161578(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_20B161688((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_20B16BA98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B16BAB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B16BAC8(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_20B4F4BA0(&v8, &v10);
  v7 = v10;
  sub_20AEC833C((uint64_t)&v8, v9[0]);
  sub_20B168C94(a1, (uint64_t)&v7);
  sub_20B15F808(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20B16BB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20AEC833C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20B16BB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B16BBE0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24C3F5478;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
  *(_BYTE *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 88) = 0;
  if (*(_BYTE *)(a1 + 88))
  {
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(v4 + 80) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(v4 + 88) = 1;
  }
  *(_BYTE *)(v4 + 96) = 0;
  *(_BYTE *)(v4 + 120) = 0;
  if (*(_BYTE *)(a1 + 120))
  {
    *(_OWORD *)(v4 + 96) = *(_OWORD *)(a1 + 96);
    *(_QWORD *)(v4 + 112) = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_BYTE *)(v4 + 120) = 1;
  }
  *(_BYTE *)(v4 + 160) = 0;
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(v4 + 144) = *(_QWORD *)(a1 + 144);
  *(_BYTE *)(v4 + 208) = 0;
  if (*(_BYTE *)(a1 + 208))
  {
    *(_OWORD *)(v4 + 160) = *(_OWORD *)(a1 + 160);
    *(_QWORD *)(v4 + 176) = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    v6 = (unsigned __int128 *)(a1 + 192);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 192) = v7;
    *(_BYTE *)(v4 + 208) = 1;
  }
  *(_BYTE *)(v4 + 224) = 0;
  *(_BYTE *)(v4 + 248) = 0;
  if (*(_BYTE *)(a1 + 248))
  {
    *(_OWORD *)(v4 + 224) = *(_OWORD *)(a1 + 224);
    *(_QWORD *)(v4 + 240) = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_BYTE *)(v4 + 248) = 1;
  }
  *(_QWORD *)v4 = &off_24C3F53F8;
  *a2 = &off_24C411E78;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24C411F70;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20B16BD80(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20B16BD9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  sub_20B50671C(a2);
  v14 = "version";
  v15 = 7;
  LODWORD(v16) = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5086B4(a2, &v16);
  v6 = *(_QWORD *)(a3 + 8);
  v14 = *(const char **)a3;
  v15 = v6;
  v7 = *(std::__shared_weak_count **)(a3 + 16);
  v16 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v17 = *(_OWORD *)(a3 + 24);
  sub_20B16BEF4(a2, (uint64_t)&v14);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 56) = v13 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B16BEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B16BEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BYTE *v6;
  _QWORD *v7;
  BOOL v8;
  BOOL v9;
  void **v10;
  unsigned __int8 *v11;
  int v12;
  void **v13;
  void **v14;
  size_t v15;
  int v16;
  size_t v17;
  void **v18;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "byte_size";
    v4 = a1 + 72;
    v6 = (_BYTE *)(a1 + 88);
    v5 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 9;
    v7 = (_QWORD *)(a1 + 80);
    if (!v5)
      *v6 = 1;
    goto LABEL_13;
  }
  v7 = (_QWORD *)(a1 + 80);
  v4 = a1 + 72;
  v6 = (_BYTE *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
    v8 = *(_QWORD *)(a1 + 80) == 7;
  else
    v8 = 0;
  if (!v8
    || (**(_DWORD **)v4 == *(_DWORD *)"version"
      ? (v9 = *(_DWORD *)(*(_QWORD *)v4 + 3) == *(_DWORD *)"sion")
      : (v9 = 0),
        !v9))
  {
LABEL_13:
    v10 = *(void ***)a2;
    LOBYTE(v17) = 6;
    v18 = v10;
    v11 = (unsigned __int8 *)sub_20B506370(a1);
    v12 = *v11;
    *v11 = 6;
    LOBYTE(v17) = v12;
    v13 = (void **)*((_QWORD *)v11 + 1);
    *((_QWORD *)v11 + 1) = v18;
    v18 = v13;
    sub_20B4181DC(&v18, v12);
  }
  v15 = *(_QWORD *)(a2 + 24);
  v14 = *(void ***)(a2 + 32);
  if (v15
    && !v14
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v17 = v15;
  v18 = v14;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v16 = *v6;
    *(_QWORD *)v4 = "bytes";
    *v7 = 5;
    if (!v16)
      *v6 = 1;
  }
  sub_20B506898(a1, &v17);
}

void sub_20B16C088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B16C0A0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t *v14[2];
  char v15;

  v4 = *(_QWORD *)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v12 = *(_OWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v8 + 40))
  {
    v14[0] = (uint64_t *)(v8 + 16);
    sub_20B51F33C(v14, v4);
  }
  else
  {
    sub_20B51F644();
  }
  if ((_QWORD)v12
    && !*((_QWORD *)&v12 + 1)
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
    v13 = (uint64_t *)(v9 + 16);
    LODWORD(v14[0]) = v12;
    v14[1] = *((uint64_t **)&v12 + 1);
    sub_20B51D930((uint64_t)&v15, &v13, (unsigned int *)v14);
  }
  else
  {
    if (v12 > 0xFF)
    {
      if (WORD1(v12))
      {
        LOBYTE(v14[0]) = -58;
        *(_DWORD *)((char *)v14 + 1) = bswap32(v12);
      }
      else
      {
        LOBYTE(v14[0]) = -59;
        *(_WORD *)((char *)v14 + 1) = bswap32(v12) >> 16;
      }
      std::ostream::write();
    }
    else
    {
      LOBYTE(v14[0]) = -60;
      BYTE1(v14[0]) = v12;
      std::ostream::write();
    }
    std::ostream::write();
  }
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_20B16C270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B16C284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  sub_20B505FB0(a2);
  v14 = "version";
  v15 = 7;
  LODWORD(v16) = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5069D0(a2, &v16);
  v6 = *(_QWORD *)(a3 + 8);
  v14 = *(const char **)a3;
  v15 = v6;
  v7 = *(std::__shared_weak_count **)(a3 + 16);
  v16 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v17 = *(_OWORD *)(a3 + 24);
  sub_20B16C3DC(a2, (uint64_t *)&v14);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 56) = v13 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B16C398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B16C3DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  _BYTE *v6;
  _QWORD *v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  int v16;
  size_t v17;
  uint64_t v18;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "byte_size";
    v4 = a1 + 72;
    v6 = (_BYTE *)(a1 + 88);
    v5 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 9;
    v7 = (_QWORD *)(a1 + 80);
    if (!v5)
      *v6 = 1;
    goto LABEL_13;
  }
  v7 = (_QWORD *)(a1 + 80);
  v4 = a1 + 72;
  v6 = (_BYTE *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
    v8 = *(_QWORD *)(a1 + 80) == 7;
  else
    v8 = 0;
  if (!v8
    || (**(_DWORD **)v4 == *(_DWORD *)"version"
      ? (v9 = *(_DWORD *)(*(_QWORD *)v4 + 3) == *(_DWORD *)"sion")
      : (v9 = 0),
        !v9))
  {
LABEL_13:
    v10 = *a2;
    LOBYTE(v17) = 6;
    v18 = v10;
    v11 = (unsigned __int8 *)sub_20B505B08(a1);
    v12 = *v11;
    *v11 = 6;
    LOBYTE(v17) = v12;
    v13 = *((_QWORD *)v11 + 1);
    *((_QWORD *)v11 + 1) = v18;
    v18 = v13;
    sub_20B416E08(&v18, v12);
  }
  v15 = a2[3];
  v14 = a2[4];
  if (v15
    && !v14
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v17 = v15;
  v18 = v14;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v16 = *v6;
    *(_QWORD *)v4 = "bytes";
    *v7 = 5;
    if (!v16)
      *v6 = 1;
  }
  sub_20B50612C(a1, &v17);
}

void sub_20B16C570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B16C588(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;

  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v9 = *(_OWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    LOBYTE(v10) = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v6, (uint64_t)&v10, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  if ((_QWORD)v9
    && !*((_QWORD *)&v9 + 1)
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v10 = v9;
  sub_20B5134A8(a1, (std::string::size_type *)&v10);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B16C6BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B16C6D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t __src;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;

  v3 = a2[1];
  __src = *a2;
  v12 = v3;
  v4 = (std::__shared_weak_count *)a2[2];
  v13 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v14 = *(_OWORD *)(a2 + 3);
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v12, 8);
  v7 = v14;
  if ((_QWORD)v14
    && !*((_QWORD *)&v14 + 1)
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), *((char **)&v7 + 1), (char *)(*((_QWORD *)&v7 + 1) + v7), v7);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20B16C7F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B16C80C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[2];
  std::__shared_weak_count *v12;
  __int128 v13;
  __int128 v14;

  v3 = *(_QWORD *)(a2 + 8);
  v11[0] = *(_QWORD *)a2;
  v11[1] = v3;
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v12 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v13 = *(_OWORD *)(a2 + 24);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 120))(a1, v11);
  v7 = v13;
  if ((_QWORD)v13
    && !*((_QWORD *)&v13 + 1)
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = v7;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 272))(a1, &v14);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20B16C928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B16C93C(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_20B50AC94(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_20B4552C4(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v6 = 2;
  else
    v6 = v12;
  if (v6 < 2)
    sub_20B16CA38((uint64_t)&v11, a1, a2);
  else
    sub_20B16CBA4(a1, a2);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

void sub_20B16CA38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void *__p;
  void *v19;
  uint64_t v20;
  _OWORD v21[2];

  v15 = 0;
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_20B4331C4((uint64_t)v21, (uint64_t)&__p);
  v16 = v21[0];
  v17 = v21[1];
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  sub_20B16CD40(a2, (uint64_t)&v15);
  v5 = v15;
  v6 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v21[0] = v17;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&v6 + 1);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_OWORD *)(a3 + 24) = v21[0];
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B16CB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC3318((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B16CB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B16CBA4(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  size_t v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  void *__p;
  char *v17;
  char *v18;
  size_t __sz[2];
  __int128 v20;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "byte_size";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  __sz[0] = 0;
  sub_20B4552C4(v5, __sz);
  v6 = __sz[0];
  *(_QWORD *)a2 = __sz[0];
  __p = 0;
  v17 = 0;
  v18 = 0;
  if (v6)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v7 = (char *)operator new(v6);
    v8 = &v7[v6];
    __p = v7;
    v18 = &v7[v6];
    bzero(v7, v6);
    v17 = &v7[v6];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v15[0] = v8 - v7;
  v15[1] = v7;
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "bytes";
  *(_QWORD *)(a1 + 96) = 5;
  if (!v9)
    *(_BYTE *)(a1 + 104) = 1;
  v10 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_20B50B064(v10, (uint64_t)v15);
  sub_20B4331C4((uint64_t)__sz, (uint64_t)&__p);
  v14 = v20;
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__sz;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_OWORD *)(a2 + 24) = v14;
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B16CD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B16CD40(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  size_t v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  void *__p;
  char *v17;
  char *v18;
  size_t __sz[2];
  __int128 v20;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "byte_size";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  __sz[0] = 0;
  sub_20B4552C4(v5, __sz);
  v6 = __sz[0];
  *(_QWORD *)a2 = __sz[0];
  __p = 0;
  v17 = 0;
  v18 = 0;
  if (v6)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v7 = (char *)operator new(v6);
    v8 = &v7[v6];
    __p = v7;
    v18 = &v7[v6];
    bzero(v7, v6);
    v17 = &v7[v6];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v15[0] = v8 - v7;
  v15[1] = v7;
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "bytes";
  *(_QWORD *)(a1 + 96) = 5;
  if (!v9)
    *(_BYTE *)(a1 + 104) = 1;
  v10 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_20B50B064(v10, (uint64_t)v15);
  sub_20B4331C4((uint64_t)__sz, (uint64_t)&__p);
  v14 = v20;
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__sz;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_OWORD *)(a2 + 24) = v14;
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B16CEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B16CEDC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  char v8;

  v7 = 2;
  sub_20B518854(a1[6], &v7);
  if (v7 <= 1)
  {
    sub_20B16CFB4((uint64_t)&v8, (uint64_t)a1, a2);
    return a1;
  }
  else
  {
    sub_20B0DD290(a1 + 2);
    sub_20B16D120((uint64_t)a1, a2);
    v4 = a1[4];
    v5 = *(_QWORD *)(v4 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v4 - 8);
    if (v5)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v5);
    a1[4] -= 16;
    return a1;
  }
}

void sub_20B16CFB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void *__p;
  void *v19;
  uint64_t v20;
  _OWORD v21[2];

  v15 = 0;
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_20B4331C4((uint64_t)v21, (uint64_t)&__p);
  v16 = v21[0];
  v17 = v21[1];
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  sub_20B16D2A0(a2, (uint64_t)&v15);
  v5 = v15;
  v6 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v21[0] = v17;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&v6 + 1);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_OWORD *)(a3 + 24) = v21[0];
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B16D0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC3318((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B16D104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B16D120(uint64_t a1, uint64_t a2)
{
  size_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::bad_cast *exception;
  std::bad_cast *v12;
  __int128 v13;
  void *__p;
  char *v15;
  char *v16;
  void *__src[2];
  __int128 v18;

  sub_20B518BE4(*(_QWORD *)(a1 + 48), (_QWORD *)a2);
  v4 = *(_QWORD *)a2;
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v5 = (char *)operator new(v4);
    v6 = &v5[v4];
    __p = v5;
    v16 = &v5[v4];
    bzero(v5, v4);
    v15 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a1 + 48);
  LODWORD(__src[0]) = 0;
  __src[1] = 0;
  sub_20B5191B4(v7, (uint64_t)__src);
  if (v6 - v5 != LODWORD(__src[0]))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v12 = std::bad_cast::bad_cast(exception);
    v12->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
    __cxa_throw(v12, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
  }
  memcpy(v5, __src[1], v6 - v5);
  sub_20B4331C4((uint64_t)__src, (uint64_t)&__p);
  v13 = v18;
  v8 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__src;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_OWORD *)(a2 + 24) = v13;
  if (__p)
  {
    v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B16D27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B16D2A0(uint64_t a1, uint64_t a2)
{
  size_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::bad_cast *exception;
  std::bad_cast *v12;
  __int128 v13;
  void *__p;
  char *v15;
  char *v16;
  void *__src[2];
  __int128 v18;

  sub_20B518BE4(*(_QWORD *)(a1 + 48), (_QWORD *)a2);
  v4 = *(_QWORD *)a2;
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v5 = (char *)operator new(v4);
    v6 = &v5[v4];
    __p = v5;
    v16 = &v5[v4];
    bzero(v5, v4);
    v15 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a1 + 48);
  LODWORD(__src[0]) = 0;
  __src[1] = 0;
  sub_20B5191B4(v7, (uint64_t)__src);
  if (v6 - v5 != LODWORD(__src[0]))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v12 = std::bad_cast::bad_cast(exception);
    v12->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
    __cxa_throw(v12, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
  }
  memcpy(v5, __src[1], v6 - v5);
  sub_20B4331C4((uint64_t)__src, (uint64_t)&__p);
  v13 = v18;
  v8 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__src;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_OWORD *)(a2 + 24) = v13;
  if (__p)
  {
    v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B16D3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B16D420(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_20B50A7A4(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_20B454B2C(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v6 = 2;
  else
    v6 = v12;
  if (v6 < 2)
    sub_20B16D51C((uint64_t)&v11, a1, a2);
  else
    sub_20B16D688(a1, a2);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

void sub_20B16D51C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void *__p;
  void *v19;
  uint64_t v20;
  _OWORD v21[2];

  v15 = 0;
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_20B4331C4((uint64_t)v21, (uint64_t)&__p);
  v16 = v21[0];
  v17 = v21[1];
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  sub_20B16D824(a2, (uint64_t)&v15);
  v5 = v15;
  v6 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v21[0] = v17;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&v6 + 1);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_OWORD *)(a3 + 24) = v21[0];
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B16D658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC3318((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B16D66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B16D688(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  size_t v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  void *__p;
  char *v17;
  char *v18;
  size_t __sz[2];
  __int128 v20;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "byte_size";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  __sz[0] = 0;
  sub_20B454B2C(v5, __sz);
  v6 = __sz[0];
  *(_QWORD *)a2 = __sz[0];
  __p = 0;
  v17 = 0;
  v18 = 0;
  if (v6)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v7 = (char *)operator new(v6);
    v8 = &v7[v6];
    __p = v7;
    v18 = &v7[v6];
    bzero(v7, v6);
    v17 = &v7[v6];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v15[0] = v8 - v7;
  v15[1] = v7;
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "bytes";
  *(_QWORD *)(a1 + 96) = 5;
  if (!v9)
    *(_BYTE *)(a1 + 104) = 1;
  v10 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_20B50AB74(v10, (uint64_t)v15);
  sub_20B4331C4((uint64_t)__sz, (uint64_t)&__p);
  v14 = v20;
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__sz;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_OWORD *)(a2 + 24) = v14;
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B16D800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B16D824(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  size_t v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  void *__p;
  char *v17;
  char *v18;
  size_t __sz[2];
  __int128 v20;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "byte_size";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  __sz[0] = 0;
  sub_20B454B2C(v5, __sz);
  v6 = __sz[0];
  *(_QWORD *)a2 = __sz[0];
  __p = 0;
  v17 = 0;
  v18 = 0;
  if (v6)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v7 = (char *)operator new(v6);
    v8 = &v7[v6];
    __p = v7;
    v18 = &v7[v6];
    bzero(v7, v6);
    v17 = &v7[v6];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v15[0] = v8 - v7;
  v15[1] = v7;
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "bytes";
  *(_QWORD *)(a1 + 96) = 5;
  if (!v9)
    *(_BYTE *)(a1 + 104) = 1;
  v10 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_20B50AB74(v10, (uint64_t)v15);
  sub_20B4331C4((uint64_t)__sz, (uint64_t)&__p);
  v14 = v20;
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__sz;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_OWORD *)(a2 + 24) = v14;
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B16D99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B16D9C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void *__p;
  void *v19;
  uint64_t v20;
  _OWORD v21[2];

  v15 = 0;
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_20B4331C4((uint64_t)v21, (uint64_t)&__p);
  v16 = v21[0];
  v17 = v21[1];
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  sub_20B16DC58(a2, (uint64_t)&v15);
  v5 = v15;
  v6 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v21[0] = v17;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&v6 + 1);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_OWORD *)(a3 + 24) = v21[0];
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B16DAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC3318((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B16DB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B16DB2C(uint64_t a1, uint64_t a2)
{
  size_t v4;
  char *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  void *__p;
  char *v13;
  char *v14;
  _OWORD v15[2];

  sub_20B514DE0(a1, (_QWORD *)a2);
  v4 = *(_QWORD *)a2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v5 = (char *)operator new(v4);
    v6 = &v5[v4];
    __p = v5;
    v14 = &v5[v4];
    bzero(v5, v4);
    v13 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v11[0] = v6 - v5;
  v11[1] = v5;
  sub_20B516A0C(a1, (uint64_t)v11);
  sub_20B4331C4((uint64_t)v15, (uint64_t)&__p);
  v10 = v15[1];
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v15[0];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a2 + 24) = v10;
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B16DC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B16DC58(uint64_t a1, uint64_t a2)
{
  size_t v4;
  char *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  void *__p;
  char *v13;
  char *v14;
  _OWORD v15[2];

  sub_20B514DE0(a1, (_QWORD *)a2);
  v4 = *(_QWORD *)a2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v5 = (char *)operator new(v4);
    v6 = &v5[v4];
    __p = v5;
    v14 = &v5[v4];
    bzero(v5, v4);
    v13 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v11[0] = v6 - v5;
  v11[1] = v5;
  sub_20B516A0C(a1, (uint64_t)v11);
  sub_20B4331C4((uint64_t)v15, (uint64_t)&__p);
  v10 = v15[1];
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v15[0];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a2 + 24) = v10;
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B16DD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B16DD84(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20B16DE78((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_20B42BA30(a2);
    sub_20B16DFE4(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20B16DE64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B16DE78(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void *__p;
  void *v19;
  uint64_t v20;
  _OWORD v21[2];

  v15 = 0;
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_20B4331C4((uint64_t)v21, (uint64_t)&__p);
  v16 = v21[0];
  v17 = v21[1];
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  sub_20B16E200(a2, (uint64_t)&v15);
  v5 = v15;
  v6 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v21[0] = v17;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&v6 + 1);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_OWORD *)(a3 + 24) = v21[0];
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B16DFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC3318((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B16DFC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B16DFE4(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  size_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  size_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::logic_error *v16;
  std::logic_error *exception;
  __int128 v18;
  void *__p;
  char *v20;
  char *v21;
  _OWORD v22[2];

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  *(_QWORD *)a2 = v8;
  v9 = a1[6] + 8;
  a1[6] = v9;
  __p = 0;
  v20 = 0;
  v21 = 0;
  if (v8)
  {
    if ((v8 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v10 = (char *)operator new(v8);
    __p = v10;
    v21 = &v10[v8];
    bzero(v10, v8);
    v20 = &v10[v8];
    v11 = a1[7];
    v4 = v11 >= v9;
    v12 = v11 - v9;
    if (!v4)
      v12 = 0;
    if (v12 < v8)
    {
      v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v16, "Not enough data to read binary blob");
      v16->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
      __cxa_throw(v16, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
    }
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  memcpy(v10, (const void *)(a1[3] + v9), v8);
  a1[6] = v8 + v9;
  sub_20B4331C4((uint64_t)v22, (uint64_t)&__p);
  v18 = v22[1];
  v13 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v22[0];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_OWORD *)(a2 + 24) = v18;
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B16E1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B16E200(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  size_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  size_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::logic_error *v16;
  std::logic_error *exception;
  __int128 v18;
  void *__p;
  char *v20;
  char *v21;
  _OWORD v22[2];

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  *(_QWORD *)a2 = v8;
  v9 = a1[6] + 8;
  a1[6] = v9;
  __p = 0;
  v20 = 0;
  v21 = 0;
  if (v8)
  {
    if ((v8 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v10 = (char *)operator new(v8);
    __p = v10;
    v21 = &v10[v8];
    bzero(v10, v8);
    v20 = &v10[v8];
    v11 = a1[7];
    v4 = v11 >= v9;
    v12 = v11 - v9;
    if (!v4)
      v12 = 0;
    if (v12 < v8)
    {
      v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v16, "Not enough data to read binary blob");
      v16->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
      __cxa_throw(v16, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
    }
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  memcpy(v10, (const void *)(a1[3] + v9), v8);
  a1[6] = v8 + v9;
  sub_20B4331C4((uint64_t)v22, (uint64_t)&__p);
  v18 = v22[1];
  v13 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v22[0];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_OWORD *)(a2 + 24) = v18;
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B16E3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B16E41C(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20B16E548();
      sub_20B520518((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_20B16E8B0(a2, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
    sub_20B16E744((uint64_t)&v13, a2, a3);
  else
    sub_20B16E8B0(a2, a3);
}

__int128 *sub_20B16E548()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546361F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546361F8))
    return &xmmword_2546361E0;
  v2 = (char *)sub_20B16E624();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_2546361E0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_2546361F0 = *((_QWORD *)v2 + 2);
    xmmword_2546361E0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546361E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546361F8);
  return &xmmword_2546361E0;
}

void sub_20B16E60C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546361F8);
  _Unwind_Resume(a1);
}

void *sub_20B16E624()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254636218);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254636218))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::BlobSample]", qword_254636200);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254636200, &dword_20AEBB000);
    __cxa_guard_release(&qword_254636218);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254636238);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254636238))
    return &unk_254636220;
  sub_20B531658((uint64_t)qword_254636200, (uint64_t)&unk_254636220);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254636220, &dword_20AEBB000);
  __cxa_guard_release(&qword_254636238);
  return &unk_254636220;
}

void sub_20B16E714(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636238);
  _Unwind_Resume(a1);
}

void sub_20B16E72C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636218);
  _Unwind_Resume(a1);
}

void sub_20B16E744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void *__p;
  void *v19;
  uint64_t v20;
  _OWORD v21[2];

  v15 = 0;
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_20B4331C4((uint64_t)v21, (uint64_t)&__p);
  v16 = v21[0];
  v17 = v21[1];
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  sub_20B16E9EC(a2, (uint64_t)&v15);
  v5 = v15;
  v6 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v21[0] = v17;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&v6 + 1);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_OWORD *)(a3 + 24) = v21[0];
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B16E880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC3318((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B16E894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B16E8B0(uint64_t a1, uint64_t a2)
{
  size_t v4;
  char *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  void *__p;
  char *v13;
  char *v14;
  _OWORD v15[2];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = *(_QWORD *)a2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v5 = (char *)operator new(v4);
    v6 = &v5[v4];
    __p = v5;
    v14 = &v5[v4];
    bzero(v5, v4);
    v13 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v11[0] = v6 - v5;
  v11[1] = v5;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 272))(a1, v11);
  sub_20B4331C4((uint64_t)v15, (uint64_t)&__p);
  v10 = v15[1];
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v15[0];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a2 + 24) = v10;
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B16E9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B16E9EC(uint64_t a1, uint64_t a2)
{
  size_t v4;
  char *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  void *__p;
  char *v13;
  char *v14;
  _OWORD v15[2];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = *(_QWORD *)a2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v5 = (char *)operator new(v4);
    v6 = &v5[v4];
    __p = v5;
    v14 = &v5[v4];
    bzero(v5, v4);
    v13 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v11[0] = v6 - v5;
  v11[1] = v5;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 272))(a1, v11);
  sub_20B4331C4((uint64_t)v15, (uint64_t)&__p);
  v10 = v15[1];
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v15[0];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a2 + 24) = v10;
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B16EB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B16EB28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  _BOOL8 v11;
  _QWORD v13[5];
  uint64_t *v14;
  _QWORD v15[5];
  _QWORD *v16;
  char v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[6];

  v29[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v24);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v24);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v24);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20B0C0D90(v6, (uint64_t)v18);
  }
  else if (v7 == 1)
  {
    sub_20B0F9F8C(v6, (uint64_t)v18);
  }
  else
  {
    if (v7)
      sub_20AECFAB8();
    sub_20B0C6034(v6, (uint64_t)v18);
  }
  v15[0] = v24;
  v15[1] = &v25;
  v15[2] = &v26;
  v15[3] = &v27;
  v15[4] = &v28;
  v16 = v29;
  v13[0] = v18;
  v13[1] = &v19;
  v13[2] = &v20;
  v13[3] = &v21;
  v13[4] = &v22;
  v14 = &v23;
  if (!sub_20B2178A8((uint64_t)&v17, v15, v13))
    goto LABEL_24;
  if (!*((_BYTE *)v16 + 24) || !*((_BYTE *)v14 + 24))
  {
    if ((*((_BYTE *)v16 + 24) != 0) == (*((_BYTE *)v14 + 24) != 0))
      goto LABEL_22;
LABEL_24:
    v11 = 0;
    goto LABEL_25;
  }
  v8 = (unsigned __int8 *)*v16;
  v9 = (unsigned __int8 *)v16[1];
  v10 = (unsigned __int8 *)*v14;
  if (&v9[-*v16] != (unsigned __int8 *)(v14[1] - *v14))
    goto LABEL_24;
  if (v8 != v9)
  {
    while (sub_20B2167B8(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9)
        goto LABEL_22;
    }
    goto LABEL_24;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
    goto LABEL_24;
  v11 = sub_20B5234F4((unsigned __int8 *)(a1 + 208), (_BYTE *)(a2 + 208)) == 0;
LABEL_25:
  sub_20AF4EA3C((uint64_t)v18);
  sub_20AF4EA3C((uint64_t)v24);
  return v11;
}

void sub_20B16ED24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a23);
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B16ED40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B16ED54(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EB80, 0);
  if (v4)
  {
    sub_20B16F160(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EBC8, 0);
    if (v5)
    {
      sub_20B16F460(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC50, 0);
      if (v6)
      {
        sub_20B16F6E0(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC98, 0);
        if (v7)
        {
          sub_20B16F9E0(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C2C8)
            sub_20B16FBF8(&v9, (uint64_t)a1);
          else
            sub_20B16EEB8(&v8, a1);
        }
      }
    }
  }
}

void sub_20B16EEB8(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FF5BC((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20B0FF5BC((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FEF34((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20B0FEF34((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0D8514((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20B0D8514((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = v3 + 200;
  v13 = a2[2];
  v14 = 2;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20B0FF808(a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 2;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B0FF808(a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20B16F160(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FADD8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B50671C(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5086B4(a2, &v18);
      sub_20B0D1154(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FA468(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B50671C(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5086B4(a2, &v18);
  sub_20B0FB4B4(a2, v3 + 200);
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B16F460(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20B51E95C(&v20, 4u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v7 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBED4(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20B51E95C(&v20, 5u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v8 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBDB8(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20B51E95C(&v20, 6u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v6 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0D3CE4(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20B51E95C(&v20, 2u);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v20, v14 + 8);
  }
  sub_20B51956C(*(_QWORD *)(a2 + 24));
  sub_20B0FC270(a2, (char *)(v3 + 200));
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20B16F6E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FCF30(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B505FB0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5069D0(a2, &v18);
      sub_20B0D4F88(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FC7EC(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B505FB0(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5069D0(a2, &v18);
  sub_20B0FD3E0(a2, v3 + 200);
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

_QWORD *sub_20B16F9E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FE288(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20AEC01D0(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20B0D66C4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FDCE4(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20AEC01D0(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20B0FE500(a2, v3 + 200);
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20AEC01D0(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20B16FBF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE9C0(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE8A4(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    __src = 6;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0D757C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 2;
  sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_20B42B554((_QWORD *)a2);
  sub_20B0FECC0(a2, v3 + 200);
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20B16FDB0(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED20, 0);
  if (v4)
  {
    sub_20B170454(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED58, 0);
    if (v5)
    {
      sub_20B170904(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EDE0, 0);
      if (v6)
      {
        sub_20B170D90(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EE18, 0);
        if (v7)
        {
          sub_20B171240(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C508)
            sub_20B17189C(&v9, a1);
          else
            sub_20B16FF14(&v8, (uint64_t)a1);
        }
      }
    }
  }
}

void sub_20B16FF14(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  _BYTE *v29[27];
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v29);
    sub_20B0D0A00((uint64_t)&v30, (uint64_t *)v29);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)&v30);
        if (!v45)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v28, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(_BYTE *)(v3 + 64) = 0;
    if (v34)
    {
      v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(_QWORD *)(v3 + 56) = v8;
      v32 = 0uLL;
      v33 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v36;
    v10 = v35;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v39)
    {
      v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(_QWORD *)(v3 + 112) = v11;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v42)
    {
      v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(_QWORD *)(v3 + 144) = v12;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(_QWORD *)(v3 + 176) = v44;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v43;
    if (!(_QWORD)v43)
      goto LABEL_46;
    v15 = *((_QWORD *)&v43 + 1);
    v16 = (void *)v43;
    if (*((_QWORD *)&v43 + 1) == (_QWORD)v43)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v43;
LABEL_45:
    *((_QWORD *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v29);
  sub_20B0D0A00((uint64_t)&v30, (uint64_t *)v29);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v28, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(_BYTE *)(v3 + 64) = 0;
    if (v34)
    {
      v17 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(_QWORD *)(v3 + 56) = v17;
      v32 = 0uLL;
      v33 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v36;
    v19 = v35;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v39)
    {
      v20 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(_QWORD *)(v3 + 112) = v20;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v42)
    {
      v21 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(_QWORD *)(v3 + 144) = v21;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(_QWORD *)(v3 + 176) = v44;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)&v30);
  if (v45)
  {
LABEL_38:
    v14 = v43;
    if (!(_QWORD)v43)
      goto LABEL_46;
    v23 = *((_QWORD *)&v43 + 1);
    v16 = (void *)v43;
    if (*((_QWORD *)&v43 + 1) == (_QWORD)v43)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v34 && SHIBYTE(v33) < 0)
    operator delete((void *)v32);
  sub_20AF4EA3C((uint64_t)v29);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(_QWORD *)a2;
  v29[0] = *(_BYTE **)(a2 + 8);
  v25 = (int)v29[0];
  LODWORD(v30) = 6;
  (*(void (**)(uint64_t, uint64_t *))(v24 + 104))(a2, &v30);
  if (v25 < 1)
  {
    if (v30 < 3)
      sub_20B0E41CC((uint64_t)&v30, a2, v4, v30);
    else
      sub_20B0E4440(a2, v4, v30);
  }
  else
  {
    sub_20B0E3BD4((int *)v29, a2, v4, v30);
  }
  v26 = *(_QWORD *)a2;
  v30 = *(_QWORD *)(a2 + 8);
  v27 = v30;
  LODWORD(v29[0]) = 2;
  (*(void (**)(uint64_t, _BYTE **))(v26 + 104))(a2, v29);
  if (v27 < 1)
  {
    if (LODWORD(v29[0]) < 2)
    {
      sub_20B103798((uint64_t)v29, (_BYTE *)a2, v3 + 200);
    }
    else
    {
      v29[0] = (_BYTE *)(v3 + 200);
      sub_20B103C34((_BYTE *)a2, v29);
      sub_20B10391C(*(unsigned __int8 *)(v3 + 200), a2, v3 + 200);
    }
  }
  else
  {
    sub_20B103450((int *)&v30, (_BYTE *)a2, (_BYTE *)(v3 + 200), v29[0]);
  }
}

void sub_20B17040C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B170454(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v27);
    sub_20B0D0A00((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v27);
  sub_20B0D0A00((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20AF4EA3C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0D978C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0FFB8C((uint64_t)v27, a2, (_BYTE *)(v3 + 200));
}

void sub_20B1708BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B170904(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v25);
    sub_20B0D0A00((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v25);
  sub_20B0D0A00((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20AF4EA3C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0DD1A0((uint64_t)v25, a2, v4);
  LODWORD(v25[0]) = 2;
  sub_20B518854(a2[6], v25);
  sub_20B100964((uint64_t)v25, a2, (unsigned __int8 *)(v3 + 200), v25[0]);
}

void sub_20B170D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B170D90(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v27);
    sub_20B0D0A00((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v27);
  sub_20B0D0A00((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20AF4EA3C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0DE788(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B10113C((uint64_t)v27, a2, (_BYTE *)(v3 + 200));
}

void sub_20B1711F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B171240(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  void *__p;
  uint64_t v36;
  char v37;
  _BYTE v38[8];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)&__p);
    sub_20B0D0A00((uint64_t)v38, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v38);
        if (!v53)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v34, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v39;
    *(_BYTE *)(v3 + 64) = 0;
    if (v42)
    {
      v8 = v41;
      *(_OWORD *)(v3 + 40) = v40;
      *(_QWORD *)(v3 + 56) = v8;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v44;
    v10 = v43;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v47)
    {
      v11 = v46;
      *(_OWORD *)(v3 + 96) = v45;
      *(_QWORD *)(v3 + 112) = v11;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v50)
    {
      v12 = v49;
      *(_OWORD *)(v3 + 128) = v48;
      *(_QWORD *)(v3 + 144) = v12;
      v48 = 0uLL;
      v49 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v53;
    if (v53)
    {
      *(_OWORD *)(v3 + 160) = v51;
      *(_QWORD *)(v3 + 176) = v52;
      v51 = 0uLL;
      v52 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v51;
    if (!(_QWORD)v51)
      goto LABEL_46;
    v15 = *((_QWORD *)&v51 + 1);
    v16 = (void *)v51;
    if (*((_QWORD *)&v51 + 1) == (_QWORD)v51)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v51;
LABEL_45:
    *((_QWORD *)&v51 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)&__p);
  sub_20B0D0A00((uint64_t)v38, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v34, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v39;
    *(_BYTE *)(v3 + 64) = 0;
    if (v42)
    {
      v17 = v41;
      *(_OWORD *)(v3 + 40) = v40;
      *(_QWORD *)(v3 + 56) = v17;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v44;
    v19 = v43;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v47)
    {
      v20 = v46;
      *(_OWORD *)(v3 + 96) = v45;
      *(_QWORD *)(v3 + 112) = v20;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v50)
    {
      v21 = v49;
      *(_OWORD *)(v3 + 128) = v48;
      *(_QWORD *)(v3 + 144) = v21;
      v48 = 0uLL;
      v49 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v53;
    if (v53)
    {
      *(_OWORD *)(v3 + 160) = v51;
      *(_QWORD *)(v3 + 176) = v52;
      v51 = 0uLL;
      v52 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v38);
  if (v53)
  {
LABEL_38:
    v14 = v51;
    if (!(_QWORD)v51)
      goto LABEL_46;
    v23 = *((_QWORD *)&v51 + 1);
    v16 = (void *)v51;
    if (*((_QWORD *)&v51 + 1) == (_QWORD)v51)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v50 && SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  if (v47 && SHIBYTE(v46) < 0)
    operator delete((void *)v45);
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  sub_20AF4EA3C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20B514490(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20B0E0A94((uint64_t)&__p, a2, v4, v25);
  else
    sub_20B0E0C84(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (v37 < 0)
      {
        if (v36 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_80:
          v31 = 0;
          if (v37 < 0)
            goto LABEL_83;
          goto LABEL_69;
        }
      }
      else if (v37 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_80;
      }
      v31 = 1;
      if (v37 < 0)
LABEL_83:
        operator delete(__p);
LABEL_69:
      if (*(_BYTE *)(a2 + 131))
        v30 = 0;
      else
        v30 = v31;
    }
    while ((v30 & 1) != 0);
  }
  LODWORD(__p) = 2;
  sub_20B514490(a2, &__p);
  v26 = (_BYTE *)(v3 + 200);
  v27 = __p;
  if (__p >= 2)
    v28 = 2;
  else
    v28 = __p;
  if (v28 < 2)
  {
    sub_20B101F14((uint64_t)&__p, a2, (uint64_t)v26);
  }
  else
  {
    LOBYTE(__p) = 0;
    sub_20B513B4C(a2, &__p);
    v29 = __p;
    *v26 = (_BYTE)__p;
    sub_20B102098(v29, a2, (uint64_t)v26);
  }
  if (v27 >= 2 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (v37 < 0)
      {
        if (v36 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_99:
          v33 = 0;
          if (v37 < 0)
            goto LABEL_102;
          goto LABEL_88;
        }
      }
      else if (v37 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_99;
      }
      v33 = 1;
      if (v37 < 0)
LABEL_102:
        operator delete(__p);
LABEL_88:
      if (*(_BYTE *)(a2 + 131))
        v32 = 0;
      else
        v32 = v33;
    }
    while ((v32 & 1) != 0);
  }
}

void sub_20B171854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B17189C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v25);
    sub_20B0D0A00((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v25);
  sub_20B0D0A00((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20AF4EA3C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0E2418((uint64_t)v25, a2, v4);
  sub_20B102628((uint64_t)v25, a2, (_BYTE *)(v3 + 200));
}

void sub_20B171CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B171D10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  _BOOL8 v14;
  _QWORD v16[5];
  uint64_t *v17;
  _BYTE *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  char v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[6];

  v36[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v31);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v31);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v31);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20B0C0D90(v6, (uint64_t)v25);
  }
  else if (v7 == 1)
  {
    sub_20B0F9F8C(v6, (uint64_t)v25);
  }
  else
  {
    if (v7)
      sub_20AECFAB8();
    sub_20B0C6034(v6, (uint64_t)v25);
  }
  v18 = v31;
  v19 = &v32;
  v20 = &v33;
  v21 = &v34;
  v22 = &v35;
  v23 = v36;
  v16[0] = v25;
  v16[1] = &v26;
  v16[2] = &v27;
  v16[3] = &v28;
  v16[4] = &v29;
  v17 = &v30;
  if (!sub_20B2178A8((uint64_t)&v24, &v18, v16))
    goto LABEL_26;
  if (!*((_BYTE *)v23 + 24) || !*((_BYTE *)v17 + 24))
  {
    if ((*((_BYTE *)v23 + 24) != 0) == (*((_BYTE *)v17 + 24) != 0))
      goto LABEL_22;
LABEL_26:
    v14 = 0;
    goto LABEL_27;
  }
  v8 = (unsigned __int8 *)*v23;
  v9 = (unsigned __int8 *)v23[1];
  v10 = (unsigned __int8 *)*v17;
  if (&v9[-*v23] != (unsigned __int8 *)(v17[1] - *v17))
    goto LABEL_26;
  if (v8 != v9)
  {
    while (sub_20B2167B8(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9)
        goto LABEL_22;
    }
    goto LABEL_26;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
    goto LABEL_26;
  if (*(_QWORD *)(a1 + 208) != *(_QWORD *)(a2 + 208))
    goto LABEL_26;
  v11 = *(unsigned __int8 **)(a1 + 216);
  v12 = *v11;
  v13 = *(unsigned __int8 **)(a2 + 216);
  if (v12 != *v13)
    goto LABEL_26;
  v18 = v16;
  v19 = (uint64_t *)v11;
  v20 = (uint64_t *)v13;
  v14 = sub_20B43E450(v12, (uint64_t)&v18);
LABEL_27:
  sub_20AF4EA3C((uint64_t)v25);
  sub_20AF4EA3C((uint64_t)v31);
  return v14;
}

void sub_20B171F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a23);
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B171F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B171F68(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EB80, 0);
  if (v4)
  {
    sub_20B172374(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EBC8, 0);
    if (v5)
    {
      sub_20B172674(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC50, 0);
      if (v6)
      {
        sub_20B1728F4(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC98, 0);
        if (v7)
        {
          sub_20B172BF4(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C2C8)
            sub_20B172E0C(&v9, (uint64_t)a1);
          else
            sub_20B1720CC(&v8, a1);
        }
      }
    }
  }
}

void sub_20B1720CC(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  __int128 *v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FF5BC((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20B0FF5BC((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FEF34((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20B0FEF34((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0D8514((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20B0D8514((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = (__int128 *)(v3 + 200);
  v13 = a2[2];
  v14 = 2;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20B1069C8(a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 2;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B1069C8(a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20B172374(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FADD8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B50671C(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5086B4(a2, &v18);
      sub_20B0D1154(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FA468(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B50671C(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5086B4(a2, &v18);
  sub_20B1042B4(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B172674(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20B51E95C(&v20, 4u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v7 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBED4(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20B51E95C(&v20, 5u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v8 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBDB8(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20B51E95C(&v20, 6u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v6 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0D3CE4(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20B51E95C(&v20, 2u);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v20, v14 + 8);
  }
  sub_20B51956C(*(_QWORD *)(a2 + 24));
  sub_20B104B80(a2, (__int128 *)(v3 + 200));
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20B1728F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FCF30(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B505FB0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5069D0(a2, &v18);
      sub_20B0D4F88(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FC7EC(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B505FB0(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5069D0(a2, &v18);
  sub_20B1054D4(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

_QWORD *sub_20B172BF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FE288(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20AEC01D0(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20B0D66C4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FDCE4(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20AEC01D0(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20B105DA0(a2, (__int128 *)(v3 + 200));
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20AEC01D0(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20B172E0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE9C0(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE8A4(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    __src = 6;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0D757C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 2;
  sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_20B42B554((_QWORD *)a2);
  sub_20B106574(a2, (__int128 *)(v3 + 200));
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20B172FC4(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED20, 0);
  if (v4)
  {
    sub_20B173600(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED58, 0);
    if (v5)
    {
      sub_20B173AB0(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EDE0, 0);
      if (v6)
      {
        sub_20B173F3C(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EE18, 0);
        if (v7)
        {
          sub_20B1743EC(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C508)
            sub_20B174948(&v9, a1);
          else
            sub_20B173128(&v8, (uint64_t)a1);
        }
      }
    }
  }
}

void sub_20B173128(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27[27];
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v27);
    sub_20B0D0A00((uint64_t)&v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)&v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v27);
  sub_20B0D0A00((uint64_t)&v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)&v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20AF4EA3C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(_QWORD *)a2;
  v27[0] = *(_QWORD *)(a2 + 8);
  v25 = v27[0];
  v28 = 6;
  (*(void (**)(uint64_t, unsigned int *))(v24 + 104))(a2, &v28);
  if (v25 < 1)
  {
    if (v28 < 3)
      sub_20B0E41CC((uint64_t)&v28, a2, v4, v28);
    else
      sub_20B0E4440(a2, v4, v28);
  }
  else
  {
    sub_20B0E3BD4((int *)v27, a2, v4, v28);
  }
  v27[0] = *(_QWORD *)(a2 + 8);
  sub_20B111640((int *)v27, (_BYTE *)a2, (_BYTE *)(v3 + 200));
}

void sub_20B1735B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B173600(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v27);
    sub_20B0D0A00((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v27);
  sub_20B0D0A00((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20AF4EA3C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0D978C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B107038((uint64_t)v27, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20B173A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B173AB0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v25);
    sub_20B0D0A00((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v25);
  sub_20B0D0A00((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20AF4EA3C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0DD1A0((uint64_t)v25, a2, v4);
  LODWORD(v25[0]) = 2;
  sub_20B518854(a2[6], v25);
  sub_20B10918C((uint64_t)v25, a2, (unsigned __int8 *)(v3 + 200), v25[0]);
}

void sub_20B173EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B173F3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v27);
    sub_20B0D0A00((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v27);
  sub_20B0D0A00((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20AF4EA3C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0DE788(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B10AFC0((uint64_t)v27, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20B1743A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1743EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  char v28;
  void *__p[2];
  char v30;
  _BYTE v31[8];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)__p);
    sub_20B0D0A00((uint64_t)v31, (uint64_t *)__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v31);
        if (!v46)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v28, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v8;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v37;
    v10 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v11;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v12;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v15 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v44;
LABEL_45:
    *((_QWORD *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)__p);
  sub_20B0D0A00((uint64_t)v31, (uint64_t *)__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v28, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v17;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v37;
    v19 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v20;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v21;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v31);
  if (v46)
  {
LABEL_38:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v23 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  sub_20AF4EA3C((uint64_t)__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  LODWORD(__p[0]) = 6;
  sub_20B514490(a2, __p);
  v24 = __p[0];
  if (LODWORD(__p[0]) >= 6)
    v25 = 6;
  else
    v25 = __p[0];
  if (v25 < 3)
    sub_20B0E0A94((uint64_t)__p, a2, v4, v25);
  else
    sub_20B0E0C84(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20B51680C(a2, (uint64_t)__p);
      if (v30 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_76:
          v27 = 0;
          if (v30 < 0)
            goto LABEL_79;
          goto LABEL_65;
        }
      }
      else if (v30 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_76;
      }
      v27 = 1;
      if (v30 < 0)
LABEL_79:
        operator delete(__p[0]);
LABEL_65:
      if (*(_BYTE *)(a2 + 131))
        v26 = 0;
      else
        v26 = v27;
    }
    while ((v26 & 1) != 0);
  }
  sub_20B10D114((uint64_t)__p, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20B174900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B174948(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v25);
    sub_20B0D0A00((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v25);
  sub_20B0D0A00((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20AF4EA3C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0E2418((uint64_t)v25, a2, v4);
  sub_20B10EF70((uint64_t)v25, a2, v3 + 200);
}

void sub_20B174D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B174DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  _BOOL8 v14;
  _QWORD v16[5];
  uint64_t *v17;
  _BYTE *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  char v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[6];

  v36[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v31);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v31);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v31);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20B0C0D90(v6, (uint64_t)v25);
  }
  else if (v7 == 1)
  {
    sub_20B0F9F8C(v6, (uint64_t)v25);
  }
  else
  {
    if (v7)
      sub_20AECFAB8();
    sub_20B0C6034(v6, (uint64_t)v25);
  }
  v18 = v31;
  v19 = &v32;
  v20 = &v33;
  v21 = &v34;
  v22 = &v35;
  v23 = v36;
  v16[0] = v25;
  v16[1] = &v26;
  v16[2] = &v27;
  v16[3] = &v28;
  v16[4] = &v29;
  v17 = &v30;
  if (!sub_20B2178A8((uint64_t)&v24, &v18, v16))
    goto LABEL_26;
  if (!*((_BYTE *)v23 + 24) || !*((_BYTE *)v17 + 24))
  {
    if ((*((_BYTE *)v23 + 24) != 0) == (*((_BYTE *)v17 + 24) != 0))
      goto LABEL_22;
LABEL_26:
    v14 = 0;
    goto LABEL_27;
  }
  v8 = (unsigned __int8 *)*v23;
  v9 = (unsigned __int8 *)v23[1];
  v10 = (unsigned __int8 *)*v17;
  if (&v9[-*v23] != (unsigned __int8 *)(v17[1] - *v17))
    goto LABEL_26;
  if (v8 != v9)
  {
    while (sub_20B2167B8(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9)
        goto LABEL_22;
    }
    goto LABEL_26;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
    goto LABEL_26;
  if (*(_QWORD *)(a1 + 208) != *(_QWORD *)(a2 + 208))
    goto LABEL_26;
  v11 = *(unsigned __int8 **)(a1 + 216);
  v12 = *v11;
  v13 = *(unsigned __int8 **)(a2 + 216);
  if (v12 != *v13)
    goto LABEL_26;
  v18 = v16;
  v19 = (uint64_t *)v11;
  v20 = (uint64_t *)v13;
  v14 = sub_20B43E450(v12, (uint64_t)&v18);
LABEL_27:
  sub_20AF4EA3C((uint64_t)v25);
  sub_20AF4EA3C((uint64_t)v31);
  return v14;
}

void sub_20B174FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a23);
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B175000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B175014(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EB80, 0);
  if (v4)
  {
    sub_20B175420(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EBC8, 0);
    if (v5)
    {
      sub_20B175720(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC50, 0);
      if (v6)
      {
        sub_20B1759A0(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC98, 0);
        if (v7)
        {
          sub_20B175CA0(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C2C8)
            sub_20B175EB8(&v9, (uint64_t)a1);
          else
            sub_20B175178(&v8, a1);
        }
      }
    }
  }
}

void sub_20B175178(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  __int128 *v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FF5BC((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20B0FF5BC((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FEF34((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20B0FEF34((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0D8514((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20B0D8514((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = (__int128 *)(v3 + 200);
  v13 = a2[2];
  v14 = 2;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20B1166E4(a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 2;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B1166E4(a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20B175420(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FADD8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B50671C(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5086B4(a2, &v18);
      sub_20B0D1154(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FA468(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B50671C(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5086B4(a2, &v18);
  sub_20B11374C(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B175720(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = a2[3];
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20B51E95C(&v20, 4u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v7 + 8);
    }
    sub_20B51956C(a2[3]);
    sub_20B0FBED4((uint64_t)a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = a2[3];
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20B51E95C(&v20, 5u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v8 + 8);
    }
    sub_20B51956C(a2[3]);
    sub_20B0FBDB8((uint64_t)a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[3];
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20B51E95C(&v20, 6u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v6 + 8);
    }
    sub_20B51956C(a2[3]);
    sub_20B0D3CE4((uint64_t)a2, v4, 6u);
  }
  v9 = a2[3];
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = a2[3];
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20B51E95C(&v20, 2u);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v20, v14 + 8);
  }
  sub_20B51956C(a2[3]);
  sub_20B1143C4(a2, (__int128 *)(v3 + 200));
  v15 = a2[3];
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20B1759A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FCF30(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B505FB0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5069D0(a2, &v18);
      sub_20B0D4F88(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FC7EC(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B505FB0(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5069D0(a2, &v18);
  sub_20B114D80(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

_QWORD *sub_20B175CA0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FE288(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20AEC01D0(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20B0D66C4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FDCE4(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20AEC01D0(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20B1159F8(a2, (__int128 *)(v3 + 200));
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20AEC01D0(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20B175EB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE9C0(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE8A4(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    __src = 6;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0D757C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 2;
  sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_20B42B554((_QWORD *)a2);
  sub_20B116234(a2, (__int128 *)(v3 + 200));
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20B176070(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED20, 0);
  if (v4)
  {
    sub_20B1766AC(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED58, 0);
    if (v5)
    {
      sub_20B176C04(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EDE0, 0);
      if (v6)
      {
        sub_20B177090(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EE18, 0);
        if (v7)
        {
          sub_20B1775E8(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C508)
            sub_20B177B44(&v9, a1);
          else
            sub_20B1761D4(&v8, (uint64_t)a1);
        }
      }
    }
  }
}

void sub_20B1761D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27[27];
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v27);
    sub_20B0D0A00((uint64_t)&v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)&v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v27);
  sub_20B0D0A00((uint64_t)&v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)&v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20AF4EA3C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(_QWORD *)a2;
  v27[0] = *(_QWORD *)(a2 + 8);
  v25 = v27[0];
  v28 = 6;
  (*(void (**)(uint64_t, unsigned int *))(v24 + 104))(a2, &v28);
  if (v25 < 1)
  {
    if (v28 < 3)
      sub_20B0E41CC((uint64_t)&v28, a2, v4, v28);
    else
      sub_20B0E4440(a2, v4, v28);
  }
  else
  {
    sub_20B0E3BD4((int *)v27, a2, v4, v28);
  }
  v27[0] = *(_QWORD *)(a2 + 8);
  sub_20B125368((int *)v27, (_BYTE *)a2, (_BYTE *)(v3 + 200));
}

void sub_20B176664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1766AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *exception;
  char v32;
  uint64_t v33[27];
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v33);
    sub_20B0D0A00((uint64_t)v34, v33);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v33);
  sub_20B0D0A00((uint64_t)v34, v33);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20AF4EA3C((uint64_t)v33);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0D978C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50AC94(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v33[0] = 0;
  sub_20B4552C4(v27, v33);
  if (HIDWORD(v33[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (LODWORD(v33[0]) >= 2)
    v28 = 2;
  else
    v28 = v33[0];
  sub_20B116DBC(a2, (unsigned __int8 *)(v3 + 200), v28);
  v29 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v29 - 8);
  v30 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 48) = v29 - 8;
  *(_QWORD *)(a2 + 72) = v30 - 8;
}

void sub_20B176BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B176C04(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v25);
    sub_20B0D0A00((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v25);
  sub_20B0D0A00((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20AF4EA3C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0DD1A0((uint64_t)v25, a2, v4);
  LODWORD(v25[0]) = 2;
  sub_20B518854(a2[6], v25);
  sub_20B11A084((uint64_t)v25, a2, (unsigned __int8 *)(v3 + 200), v25[0]);
}

void sub_20B177048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B177090(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *exception;
  char v32;
  uint64_t v33[27];
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v33);
    sub_20B0D0A00((uint64_t)v34, v33);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v33);
  sub_20B0D0A00((uint64_t)v34, v33);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20AF4EA3C((uint64_t)v33);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0DE788(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50A7A4(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v33[0] = 0;
  sub_20B454B2C(v27, v33);
  if (HIDWORD(v33[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (LODWORD(v33[0]) >= 2)
    v28 = 2;
  else
    v28 = v33[0];
  sub_20B11C83C(a2, (unsigned __int8 *)(v3 + 200), v28);
  v29 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v29 - 8);
  v30 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 48) = v29 - 8;
  *(_QWORD *)(a2 + 72) = v30 - 8;
}

void sub_20B1775A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1775E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  char v28;
  void *__p[2];
  char v30;
  _BYTE v31[8];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)__p);
    sub_20B0D0A00((uint64_t)v31, (uint64_t *)__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v31);
        if (!v46)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v28, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v8;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v37;
    v10 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v11;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v12;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v15 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v44;
LABEL_45:
    *((_QWORD *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)__p);
  sub_20B0D0A00((uint64_t)v31, (uint64_t *)__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v28, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v17;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v37;
    v19 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v20;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v21;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v31);
  if (v46)
  {
LABEL_38:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v23 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  sub_20AF4EA3C((uint64_t)__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  LODWORD(__p[0]) = 6;
  sub_20B514490(a2, __p);
  v24 = __p[0];
  if (LODWORD(__p[0]) >= 6)
    v25 = 6;
  else
    v25 = __p[0];
  if (v25 < 3)
    sub_20B0E0A94((uint64_t)__p, a2, v4, v25);
  else
    sub_20B0E0C84(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20B51680C(a2, (uint64_t)__p);
      if (v30 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_76:
          v27 = 0;
          if (v30 < 0)
            goto LABEL_79;
          goto LABEL_65;
        }
      }
      else if (v30 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_76;
      }
      v27 = 1;
      if (v30 < 0)
LABEL_79:
        operator delete(__p[0]);
LABEL_65:
      if (*(_BYTE *)(a2 + 131))
        v26 = 0;
      else
        v26 = v27;
    }
    while ((v26 & 1) != 0);
  }
  sub_20B11FB04((uint64_t)__p, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20B177AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B177B44(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v25);
    sub_20B0D0A00((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v25);
  sub_20B0D0A00((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20AF4EA3C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0E2418((uint64_t)v25, a2, v4);
  sub_20B1222E4((uint64_t)v25, a2, v3 + 200);
}

void sub_20B177F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B177FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  _BOOL8 v14;
  _QWORD v16[5];
  uint64_t *v17;
  _BYTE *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  char v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[6];

  v36[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v31);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v31);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v31);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20B0C0D90(v6, (uint64_t)v25);
  }
  else if (v7 == 1)
  {
    sub_20B0F9F8C(v6, (uint64_t)v25);
  }
  else
  {
    if (v7)
      sub_20AECFAB8();
    sub_20B0C6034(v6, (uint64_t)v25);
  }
  v18 = v31;
  v19 = &v32;
  v20 = &v33;
  v21 = &v34;
  v22 = &v35;
  v23 = v36;
  v16[0] = v25;
  v16[1] = &v26;
  v16[2] = &v27;
  v16[3] = &v28;
  v16[4] = &v29;
  v17 = &v30;
  if (!sub_20B2178A8((uint64_t)&v24, &v18, v16))
    goto LABEL_26;
  if (!*((_BYTE *)v23 + 24) || !*((_BYTE *)v17 + 24))
  {
    if ((*((_BYTE *)v23 + 24) != 0) == (*((_BYTE *)v17 + 24) != 0))
      goto LABEL_22;
LABEL_26:
    v14 = 0;
    goto LABEL_27;
  }
  v8 = (unsigned __int8 *)*v23;
  v9 = (unsigned __int8 *)v23[1];
  v10 = (unsigned __int8 *)*v17;
  if (&v9[-*v23] != (unsigned __int8 *)(v17[1] - *v17))
    goto LABEL_26;
  if (v8 != v9)
  {
    while (sub_20B2167B8(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9)
        goto LABEL_22;
    }
    goto LABEL_26;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
    goto LABEL_26;
  if (*(_QWORD *)(a1 + 208) != *(_QWORD *)(a2 + 208))
    goto LABEL_26;
  v11 = *(unsigned __int8 **)(a1 + 216);
  v12 = *v11;
  v13 = *(unsigned __int8 **)(a2 + 216);
  if (v12 != *v13)
    goto LABEL_26;
  v18 = v16;
  v19 = (uint64_t *)v11;
  v20 = (uint64_t *)v13;
  v14 = sub_20B43E450(v12, (uint64_t)&v18);
LABEL_27:
  sub_20AF4EA3C((uint64_t)v25);
  sub_20AF4EA3C((uint64_t)v31);
  return v14;
}

void sub_20B1781E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a23);
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B1781FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B178210(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EB80, 0);
  if (v4)
  {
    sub_20B17861C(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EBC8, 0);
    if (v5)
    {
      sub_20B17891C(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC50, 0);
      if (v6)
      {
        sub_20B178B9C(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC98, 0);
        if (v7)
        {
          sub_20B178E9C(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C2C8)
            sub_20B1790B4(&v9, (uint64_t)a1);
          else
            sub_20B178374(&v8, a1);
        }
      }
    }
  }
}

void sub_20B178374(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  __int128 *v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FF5BC((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20B0FF5BC((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FEF34((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20B0FEF34((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0D8514((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20B0D8514((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = (__int128 *)(v3 + 200);
  v13 = a2[2];
  v14 = 2;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20B12AFDC(a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 2;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B12AFDC(a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20B17861C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FADD8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B50671C(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5086B4(a2, &v18);
      sub_20B0D1154(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FA468(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B50671C(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5086B4(a2, &v18);
  sub_20B128044(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B17891C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = a2[3];
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20B51E95C(&v20, 4u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v7 + 8);
    }
    sub_20B51956C(a2[3]);
    sub_20B0FBED4((uint64_t)a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = a2[3];
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20B51E95C(&v20, 5u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v8 + 8);
    }
    sub_20B51956C(a2[3]);
    sub_20B0FBDB8((uint64_t)a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[3];
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20B51E95C(&v20, 6u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v6 + 8);
    }
    sub_20B51956C(a2[3]);
    sub_20B0D3CE4((uint64_t)a2, v4, 6u);
  }
  v9 = a2[3];
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = a2[3];
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20B51E95C(&v20, 2u);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v20, v14 + 8);
  }
  sub_20B51956C(a2[3]);
  sub_20B128CBC(a2, (__int128 *)(v3 + 200));
  v15 = a2[3];
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20B178B9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FCF30(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B505FB0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5069D0(a2, &v18);
      sub_20B0D4F88(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FC7EC(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B505FB0(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5069D0(a2, &v18);
  sub_20B129678(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

_QWORD *sub_20B178E9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FE288(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20AEC01D0(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20B0D66C4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FDCE4(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20AEC01D0(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20B12A2F0(a2, (__int128 *)(v3 + 200));
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20AEC01D0(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20B1790B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE9C0(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE8A4(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    __src = 6;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0D757C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 2;
  sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_20B42B554((_QWORD *)a2);
  sub_20B12AB2C(a2, (__int128 *)(v3 + 200));
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20B17926C(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED20, 0);
  if (v4)
  {
    sub_20B1798A8(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED58, 0);
    if (v5)
    {
      sub_20B179E00(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EDE0, 0);
      if (v6)
      {
        sub_20B17A28C(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EE18, 0);
        if (v7)
        {
          sub_20B17A7E4(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C508)
            sub_20B17AD40(&v9, a1);
          else
            sub_20B1793D0(&v8, (uint64_t)a1);
        }
      }
    }
  }
}

void sub_20B1793D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27[27];
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v27);
    sub_20B0D0A00((uint64_t)&v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)&v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v27);
  sub_20B0D0A00((uint64_t)&v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)&v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20AF4EA3C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(_QWORD *)a2;
  v27[0] = *(_QWORD *)(a2 + 8);
  v25 = v27[0];
  v28 = 6;
  (*(void (**)(uint64_t, unsigned int *))(v24 + 104))(a2, &v28);
  if (v25 < 1)
  {
    if (v28 < 3)
      sub_20B0E41CC((uint64_t)&v28, a2, v4, v28);
    else
      sub_20B0E4440(a2, v4, v28);
  }
  else
  {
    sub_20B0E3BD4((int *)v27, a2, v4, v28);
  }
  v27[0] = *(_QWORD *)(a2 + 8);
  sub_20B13A5A0((int *)v27, (_BYTE *)a2, (_BYTE *)(v3 + 200));
}

void sub_20B179860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1798A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *exception;
  char v32;
  uint64_t v33[27];
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v33);
    sub_20B0D0A00((uint64_t)v34, v33);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v33);
  sub_20B0D0A00((uint64_t)v34, v33);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20AF4EA3C((uint64_t)v33);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0D978C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50AC94(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v33[0] = 0;
  sub_20B4552C4(v27, v33);
  if (HIDWORD(v33[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (LODWORD(v33[0]) >= 2)
    v28 = 2;
  else
    v28 = v33[0];
  sub_20B12B6B4(a2, (unsigned __int8 *)(v3 + 200), v28);
  v29 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v29 - 8);
  v30 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 48) = v29 - 8;
  *(_QWORD *)(a2 + 72) = v30 - 8;
}

void sub_20B179DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B179E00(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v25);
    sub_20B0D0A00((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v25);
  sub_20B0D0A00((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20AF4EA3C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0DD1A0((uint64_t)v25, a2, v4);
  LODWORD(v25[0]) = 2;
  sub_20B518854(a2[6], v25);
  sub_20B12EB4C((uint64_t)v25, a2, (unsigned __int8 *)(v3 + 200), v25[0]);
}

void sub_20B17A244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B17A28C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *exception;
  char v32;
  uint64_t v33[27];
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v33);
    sub_20B0D0A00((uint64_t)v34, v33);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v33);
  sub_20B0D0A00((uint64_t)v34, v33);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20AF4EA3C((uint64_t)v33);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0DE788(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50A7A4(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v33[0] = 0;
  sub_20B454B2C(v27, v33);
  if (HIDWORD(v33[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (LODWORD(v33[0]) >= 2)
    v28 = 2;
  else
    v28 = v33[0];
  sub_20B1314E4(a2, (unsigned __int8 *)(v3 + 200), v28);
  v29 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v29 - 8);
  v30 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 48) = v29 - 8;
  *(_QWORD *)(a2 + 72) = v30 - 8;
}

void sub_20B17A79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B17A7E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  char v28;
  void *__p[2];
  char v30;
  _BYTE v31[8];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)__p);
    sub_20B0D0A00((uint64_t)v31, (uint64_t *)__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v31);
        if (!v46)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v28, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v8;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v37;
    v10 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v11;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v12;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v15 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v44;
LABEL_45:
    *((_QWORD *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)__p);
  sub_20B0D0A00((uint64_t)v31, (uint64_t *)__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v28, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v17;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v37;
    v19 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v20;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v21;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v31);
  if (v46)
  {
LABEL_38:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v23 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  sub_20AF4EA3C((uint64_t)__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  LODWORD(__p[0]) = 6;
  sub_20B514490(a2, __p);
  v24 = __p[0];
  if (LODWORD(__p[0]) >= 6)
    v25 = 6;
  else
    v25 = __p[0];
  if (v25 < 3)
    sub_20B0E0A94((uint64_t)__p, a2, v4, v25);
  else
    sub_20B0E0C84(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20B51680C(a2, (uint64_t)__p);
      if (v30 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_76:
          v27 = 0;
          if (v30 < 0)
            goto LABEL_79;
          goto LABEL_65;
        }
      }
      else if (v30 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_76;
      }
      v27 = 1;
      if (v30 < 0)
LABEL_79:
        operator delete(__p[0]);
LABEL_65:
      if (*(_BYTE *)(a2 + 131))
        v26 = 0;
      else
        v26 = v27;
    }
    while ((v26 & 1) != 0);
  }
  sub_20B13497C((uint64_t)__p, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20B17ACF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B17AD40(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v25);
    sub_20B0D0A00((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v25);
  sub_20B0D0A00((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20AF4EA3C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0E2418((uint64_t)v25, a2, v4);
  sub_20B13733C((uint64_t)v25, a2, v3 + 200);
}

void sub_20B17B16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B17B1B4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24C3F6680;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(v4 + 72) = 1;
  }
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
  *(_BYTE *)(v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    *(_OWORD *)(v4 + 144) = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v6 = (unsigned __int128 *)(a1 + 176);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 176) = v7;
    *(_BYTE *)(v4 + 192) = 1;
  }
  *(_BYTE *)(v4 + 208) = 0;
  *(_BYTE *)(v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    *(_OWORD *)(v4 + 208) = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(v4 + 224) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_BYTE *)(v4 + 232) = 1;
  }
  *(_QWORD *)v4 = &off_24C3F6600;
  *a2 = &off_24C411E78;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24C411F70;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20B17B34C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL sub_20B17B368(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  _BOOL8 v14;
  _QWORD v16[5];
  uint64_t *v17;
  _BYTE *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  char v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[6];

  v36[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v31);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v31);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v31);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20B0C0D90(v6, (uint64_t)v25);
  }
  else if (v7 == 1)
  {
    sub_20B0F9F8C(v6, (uint64_t)v25);
  }
  else
  {
    if (v7)
      sub_20AECFAB8();
    sub_20B0C6034(v6, (uint64_t)v25);
  }
  v18 = v31;
  v19 = &v32;
  v20 = &v33;
  v21 = &v34;
  v22 = &v35;
  v23 = v36;
  v16[0] = v25;
  v16[1] = &v26;
  v16[2] = &v27;
  v16[3] = &v28;
  v16[4] = &v29;
  v17 = &v30;
  if (!sub_20B2178A8((uint64_t)&v24, &v18, v16))
    goto LABEL_26;
  if (!*((_BYTE *)v23 + 24) || !*((_BYTE *)v17 + 24))
  {
    if ((*((_BYTE *)v23 + 24) != 0) == (*((_BYTE *)v17 + 24) != 0))
      goto LABEL_22;
LABEL_26:
    v14 = 0;
    goto LABEL_27;
  }
  v8 = (unsigned __int8 *)*v23;
  v9 = (unsigned __int8 *)v23[1];
  v10 = (unsigned __int8 *)*v17;
  if (&v9[-*v23] != (unsigned __int8 *)(v17[1] - *v17))
    goto LABEL_26;
  if (v8 != v9)
  {
    while (sub_20B2167B8(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9)
        goto LABEL_22;
    }
    goto LABEL_26;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
    goto LABEL_26;
  if (*(_QWORD *)(a1 + 208) != *(_QWORD *)(a2 + 208))
    goto LABEL_26;
  v11 = *(unsigned __int8 **)(a1 + 216);
  v12 = *v11;
  v13 = *(unsigned __int8 **)(a2 + 216);
  if (v12 != *v13)
    goto LABEL_26;
  v18 = v16;
  v19 = (uint64_t *)v11;
  v20 = (uint64_t *)v13;
  v14 = sub_20B43E450(v12, (uint64_t)&v18);
LABEL_27:
  sub_20AF4EA3C((uint64_t)v25);
  sub_20AF4EA3C((uint64_t)v31);
  return v14;
}

void sub_20B17B590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a23);
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B17B5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B17B5C0(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EB80, 0);
  if (v4)
  {
    sub_20B17B9CC(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EBC8, 0);
    if (v5)
    {
      sub_20B17D29C(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC50, 0);
      if (v6)
      {
        sub_20B17DED8(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC98, 0);
        if (v7)
        {
          sub_20B17F7A8(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C2C8)
            sub_20B1801FC(&v9, (uint64_t)a1);
          else
            sub_20B17B724(&v8, a1);
        }
      }
    }
  }
}

void sub_20B17B724(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  __int128 *v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FF5BC((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20B0FF5BC((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FEF34((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20B0FEF34((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0D8514((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20B0D8514((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = (__int128 *)(v3 + 200);
  v13 = a2[2];
  v14 = 1;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20B180864(a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 1;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B180864(a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20B17B9CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FADD8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B50671C(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5086B4(a2, &v18);
      sub_20B0D1154(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FA468(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B50671C(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5086B4(a2, &v18);
  sub_20B17BCCC(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B17BCCC(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  void **v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  void **v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_20B0FBCB0(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = (void **)*((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_20B506370(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = (void **)*((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_20B4181DC(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "lines2";
    *v11 = 6;
    if (!v16)
      *v10 = 1;
  }
  sub_20B50671C(a1);
  sub_20B17BF2C(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20B17BEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20B4181DC(v13, a13);
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B17BF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_20B17BF2C(int a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **result;
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  switch(a1)
  {
    case 0:
      result = sub_20B17C054(v4);
      break;
    case 1:
      result = sub_20B17C228(v4);
      break;
    case 2:
      result = sub_20B17C3FC(v4);
      break;
    case 3:
      result = sub_20B17C5D0(v4);
      break;
    case 5:
      result = sub_20B17C7A4(v4);
      break;
    case 6:
      result = sub_20B17C978(v4);
      break;
    case 7:
      result = sub_20B17CB4C(v4);
      break;
    case 8:
      result = sub_20B17CD20(v4);
      break;
    case 11:
      result = sub_20B17CEF4(v4);
      break;
    case 12:
      result = sub_20B17D0C8(v4);
      break;
    default:
      sub_20B521E58(a1);
  }
  return result;
}

unsigned __int8 **sub_20B17C054(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  size_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 0);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 1;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) == 0;
  if (!v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_19;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B506898(v10, &v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 2;
      sub_20B506898(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 4;
      if (!--v6)
        return result;
    }
LABEL_19:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B506898(v7, &v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 2;
    sub_20B506898(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 4;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B17C228(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 1);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 2uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B509034(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 4;
      sub_20B509034(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 8;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B509034(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 4;
    sub_20B509034(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 8;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B17C3FC(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 2);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B5092A4(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 8;
      sub_20B5092A4(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 16;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B5092A4(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 8;
    sub_20B5092A4(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 16;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B17C5D0(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 3);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B509784(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 16;
      sub_20B509784(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 32;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B509784(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 16;
    sub_20B509784(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 32;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B17C7A4(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  size_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 5);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 1;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) == 0;
  if (!v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_19;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B508DC4(v10, &v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 2;
      sub_20B508DC4(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 4;
      if (!--v6)
        return result;
    }
LABEL_19:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B508DC4(v7, &v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 2;
    sub_20B508DC4(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 4;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B17C978(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 6);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 2uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B508EFC(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 4;
      sub_20B508EFC(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 8;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B508EFC(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 4;
    sub_20B508EFC(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 8;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B17CB4C(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 7);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B50916C(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 8;
      sub_20B50916C(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 16;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B50916C(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 8;
    sub_20B50916C(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 16;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B17CD20(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 8);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B50964C(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 16;
      sub_20B50964C(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 32;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B50964C(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 16;
    sub_20B50964C(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 32;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B17CEF4(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 11);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B509D64(v10, (float **)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 8;
      sub_20B509D64(v11, (float **)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 16;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B509D64(v7, (float **)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 8;
    sub_20B509D64(v8, (float **)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 16;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B17D0C8(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 12);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B50A184(v10, &v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 16;
      sub_20B50A184(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 32;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B50A184(v7, &v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 16;
    sub_20B50A184(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 32;
    --v6;
  }
  while (v6);
  return result;
}

void sub_20B17D29C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = a2[3];
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20B51E95C(&v20, 4u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v7 + 8);
    }
    sub_20B51956C(a2[3]);
    sub_20B0FBED4((uint64_t)a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = a2[3];
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20B51E95C(&v20, 5u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v8 + 8);
    }
    sub_20B51956C(a2[3]);
    sub_20B0FBDB8((uint64_t)a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[3];
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20B51E95C(&v20, 6u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v6 + 8);
    }
    sub_20B51956C(a2[3]);
    sub_20B0D3CE4((uint64_t)a2, v4, 6u);
  }
  v9 = a2[3];
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = a2[3];
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20B51E95C(&v20, 1u);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v20, v14 + 8);
  }
  sub_20B51956C(a2[3]);
  sub_20B17D51C(a2, (__int128 *)(v3 + 200));
  v15 = a2[3];
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20B17D51C(uint64_t *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14[3];
  __int128 v15;

  v11 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v12 = *((_QWORD *)a2 + 2);
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = a1[3];
  if (*(_BYTE *)(v6 + 40))
  {
    v14[0] = (uint64_t *)(v6 + 16);
    sub_20B51DD74(v14, v11);
  }
  else
  {
    if ((char)v11 < 0)
    {
      LOBYTE(v14[0]) = -52;
      BYTE1(v14[0]) = v11;
    }
    else
    {
      LOBYTE(v14[0]) = v11;
    }
    std::ostream::write();
  }
  v7 = a1[3];
  if (*(_BYTE *)(v7 + 40))
  {
    v14[0] = (uint64_t *)(v7 + 16);
    sub_20B51F33C(v14, *((unint64_t *)&v11 + 1));
  }
  else
  {
    sub_20B51F644();
  }
  v15 = xmmword_24C40DDE8;
  v14[0] = (uint64_t *)&v11;
  v14[1] = a1;
  v14[2] = (uint64_t *)&v15;
  sub_20B17D680(v11, v14);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20B17D66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B17D680(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 *v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  __int128 v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(char **)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (!v8)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v9 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v9 + 40))
      {
        for (*(_QWORD *)&v91 = v9 + 16; v7; --v7)
          result = (uint64_t)sub_20B51DD74((uint64_t **)&v91, *v6++);
      }
      else
      {
        for (; v7; --v7)
        {
          v78 = *v6;
          if (v78 < 0)
          {
            LOBYTE(v91) = -52;
            BYTE1(v91) = v78;
          }
          else
          {
            LOBYTE(v91) = *v6;
          }
          result = std::ostream::write();
          ++v6;
        }
      }
      break;
    case 1:
      v10 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 1);
      v11 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v11 + 40);
      v12 = *(_QWORD *)(v11 + 48);
      if (v12)
        v14 = 0;
      else
        v14 = v13 >= 2;
      if (v14
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v15 = a2[1];
      *(_QWORD *)&v91 = v13 >> 1;
      *((_QWORD *)&v91 + 1) = v12;
      result = sub_20B518234(*(_QWORD *)(v15 + 24), &v91);
      break;
    case 2:
      v16 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 2);
      v17 = *(_QWORD *)(v16 + 16);
      v19 = *(_QWORD *)(v17 + 40);
      v18 = *(unsigned int **)(v17 + 48);
      if (v18)
        v20 = 0;
      else
        v20 = v19 >= 4;
      if (v20)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v21 = v19 >> 2;
      v22 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v22 + 40))
      {
        *(_QWORD *)&v91 = v22 + 16;
        if (v19 >= 4)
        {
          v23 = 4 * v21;
          do
          {
            result = (uint64_t)sub_20B51E95C((uint64_t **)&v91, *v18++);
            v23 -= 4;
          }
          while (v23);
        }
      }
      else if (v19 >= 4)
      {
        v79 = v22 + 8;
        v80 = 4 * v21;
        do
        {
          result = sub_20B51EBD0((uint64_t)&v91, v79);
          ++v18;
          v80 -= 4;
        }
        while (v80);
      }
      break;
    case 3:
      v24 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 3);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(unint64_t **)(v25 + 48);
      if (v26)
        v28 = 0;
      else
        v28 = v27 >= 8;
      if (v28)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v29 = v27 >> 3;
      v30 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v30 + 40))
      {
        *(_QWORD *)&v91 = v30 + 16;
        if (v27 >= 8)
        {
          v31 = 8 * v29;
          do
          {
            result = (uint64_t)sub_20B51F33C((uint64_t **)&v91, *v26++);
            v31 -= 8;
          }
          while (v31);
        }
      }
      else if (v27 >= 8)
      {
        v81 = 8 * v29;
        do
        {
          ++v26;
          result = sub_20B51F644();
          v81 -= 8;
        }
        while (v81);
      }
      break;
    case 5:
      v32 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 5);
      v33 = *(_QWORD *)(v32 + 16);
      v35 = *(_QWORD *)(v33 + 40);
      v34 = *(_BYTE **)(v33 + 48);
      if (v34)
        v36 = 1;
      else
        v36 = v35 == 0;
      if (!v36)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v37 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v37 + 40))
      {
        for (*(_QWORD *)&v91 = v37 + 16; v35; --v35)
          result = (uint64_t)sub_20B51DC2C((uint64_t **)&v91, (char)*v34++);
      }
      else
      {
        for (; v35; --v35)
        {
          v82 = (char)*v34;
          if (v82 > -33)
          {
            LOBYTE(v91) = *v34;
          }
          else
          {
            LOBYTE(v91) = -48;
            BYTE1(v91) = v82;
          }
          result = std::ostream::write();
          ++v34;
        }
      }
      break;
    case 6:
      v38 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 6);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(__int16 **)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 2;
      if (v42)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v43 = v41 >> 1;
      v44 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v44 + 40))
      {
        *(_QWORD *)&v91 = v44 + 16;
        if (v41 >= 2)
        {
          v45 = 2 * v43;
          do
          {
            result = (uint64_t)sub_20B51DEB8((uint64_t **)&v91, *v40++);
            v45 -= 2;
          }
          while (v45);
        }
      }
      else if (v41 >= 2)
      {
        v83 = 2 * v43;
        do
        {
          ++v40;
          result = sub_20B51E17C();
          v83 -= 2;
        }
        while (v83);
      }
      break;
    case 7:
      v46 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 7);
      v47 = *(_QWORD *)(v46 + 16);
      v49 = *(_QWORD *)(v47 + 40);
      v48 = *(unsigned int **)(v47 + 48);
      if (v48)
        v50 = 0;
      else
        v50 = v49 >= 4;
      if (v50)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v51 = v49 >> 2;
      v52 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v52 + 40))
      {
        *(_QWORD *)&v91 = v52 + 16;
        if (v49 >= 4)
        {
          v53 = 4 * v51;
          do
          {
            result = (uint64_t)sub_20B51E444((uint64_t **)&v91, *v48++);
            v53 -= 4;
          }
          while (v53);
        }
      }
      else if (v49 >= 4)
      {
        v84 = 4 * v51;
        do
        {
          ++v48;
          result = sub_20B51E860();
          v84 -= 4;
        }
        while (v84);
      }
      break;
    case 8:
      v54 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 8);
      v55 = *(_QWORD *)(v54 + 16);
      v57 = *(_QWORD *)(v55 + 40);
      v56 = *(unint64_t **)(v55 + 48);
      if (v56)
        v58 = 0;
      else
        v58 = v57 >= 8;
      if (v58)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v59 = v57 >> 3;
      v60 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v60 + 40))
      {
        *(_QWORD *)&v91 = v60 + 16;
        if (v57 >= 8)
        {
          v61 = 8 * v59;
          do
          {
            result = (uint64_t)sub_20B51ECC0((uint64_t **)&v91, *v56++);
            v61 -= 8;
          }
          while (v61);
        }
      }
      else if (v57 >= 8)
      {
        v85 = 8 * v59;
        do
        {
          ++v56;
          result = sub_20B51F1FC();
          v85 -= 8;
        }
        while (v85);
      }
      break;
    case 11:
      v62 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 11);
      v63 = *(_QWORD *)(v62 + 16);
      v65 = *(_QWORD *)(v63 + 40);
      v64 = *(unsigned int **)(v63 + 48);
      if (v64)
        v66 = 0;
      else
        v66 = v65 >= 4;
      if (v66)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v67 = v65 >> 2;
      v68 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v68 + 40))
      {
        *(_QWORD *)&v91 = v68 + 16;
        if (v65 >= 4)
        {
          v69 = 4 * v67;
          do
          {
            result = (uint64_t)sub_20B51F73C((uint64_t)&v90, (uint64_t **)&v91, v64++);
            v69 -= 4;
          }
          while (v69);
        }
      }
      else if (v65 >= 4)
      {
        v86 = 4 * v67;
        do
        {
          v87 = *v64;
          LOBYTE(v91) = -54;
          *(_DWORD *)((char *)&v91 + 1) = bswap32(v87);
          result = std::ostream::write();
          ++v64;
          v86 -= 4;
        }
        while (v86);
      }
      break;
    case 12:
      v70 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 12);
      v71 = *(_QWORD *)(v70 + 16);
      v73 = *(_QWORD *)(v71 + 40);
      v72 = *(unint64_t **)(v71 + 48);
      if (v72)
        v74 = 0;
      else
        v74 = v73 >= 8;
      if (v74)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
LABEL_144:
          abort();
      }
      v75 = v73 >> 3;
      v76 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v76 + 40))
      {
        *(_QWORD *)&v91 = v76 + 16;
        if (v73 >= 8)
        {
          v77 = 8 * v75;
          do
          {
            result = (uint64_t)sub_20B51F818((uint64_t)&v90, (uint64_t **)&v91, v72++);
            v77 -= 8;
          }
          while (v77);
        }
      }
      else if (v73 >= 8)
      {
        v88 = 8 * v75;
        do
        {
          v89 = *v72;
          LOBYTE(v91) = -53;
          *(_QWORD *)((char *)&v91 + 1) = bswap64(v89);
          result = std::ostream::write();
          ++v72;
          v88 -= 8;
        }
        while (v88);
      }
      break;
    default:
      sub_20B521E58(a1);
  }
  return result;
}

void sub_20B17DED8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FCF30(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B505FB0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5069D0(a2, &v18);
      sub_20B0D4F88(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FC7EC(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B505FB0(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5069D0(a2, &v18);
  sub_20B17E1D8(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B17E1D8(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  uint64_t v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_20B0FDBDC(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = *((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_20B505B08(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = *((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_20B416E08(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "lines2";
    *v11 = 6;
    if (!v16)
      *v10 = 1;
  }
  sub_20B505FB0(a1);
  sub_20B17E438(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20B17E404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_20B416E08(v13, a13);
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B17E424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_20B17E438(int a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **result;
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  switch(a1)
  {
    case 0:
      result = sub_20B17E560(v4);
      break;
    case 1:
      result = sub_20B17E734(v4);
      break;
    case 2:
      result = sub_20B17E908(v4);
      break;
    case 3:
      result = sub_20B17EADC(v4);
      break;
    case 5:
      result = sub_20B17ECB0(v4);
      break;
    case 6:
      result = sub_20B17EE84(v4);
      break;
    case 7:
      result = sub_20B17F058(v4);
      break;
    case 8:
      result = sub_20B17F22C(v4);
      break;
    case 11:
      result = sub_20B17F400(v4);
      break;
    case 12:
      result = sub_20B17F5D4(v4);
      break;
    default:
      sub_20B521E58(a1);
  }
  return result;
}

unsigned __int8 **sub_20B17E560(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  size_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 0);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 1;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) == 0;
  if (!v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_19;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B50612C(v10, &v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 2;
      sub_20B50612C(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 4;
      if (!--v6)
        return result;
    }
LABEL_19:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B50612C(v7, &v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 2;
    sub_20B50612C(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 4;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B17E734(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 1);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 2uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B507218(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 4;
      sub_20B507218(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 8;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B507218(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 4;
    sub_20B507218(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 8;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B17E908(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 2);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B507488(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 8;
      sub_20B507488(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 16;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B507488(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 8;
    sub_20B507488(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 16;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B17EADC(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 3);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B5076F8(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 16;
      sub_20B5076F8(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 32;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B5076F8(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 16;
    sub_20B5076F8(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 32;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B17ECB0(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  size_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 5);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 1;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) == 0;
  if (!v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_19;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B506FA8(v10, &v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 2;
      sub_20B506FA8(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 4;
      if (!--v6)
        return result;
    }
LABEL_19:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B506FA8(v7, &v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 2;
    sub_20B506FA8(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 4;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B17EE84(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 6);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 2uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B5070E0(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 4;
      sub_20B5070E0(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 8;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B5070E0(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 4;
    sub_20B5070E0(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 8;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B17F058(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 7);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B507350(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 8;
      sub_20B507350(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 16;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B507350(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 8;
    sub_20B507350(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 16;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B17F22C(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 8);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B5075C0(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 16;
      sub_20B5075C0(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 32;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B5075C0(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 16;
    sub_20B5075C0(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 32;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B17F400(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 11);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B507CD8(v10, (float **)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 8;
      sub_20B507CD8(v11, (float **)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 16;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B507CD8(v7, (float **)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 8;
    sub_20B507CD8(v8, (float **)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 16;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B17F5D4(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 12);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_20B5080F8(v10, &v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 16;
      sub_20B5080F8(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 32;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_20B5080F8(v7, &v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 16;
    sub_20B5080F8(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 32;
    --v6;
  }
  while (v6);
  return result;
}

_QWORD *sub_20B17F7A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FE288(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20AEC01D0(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20B0D66C4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FDCE4(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20AEC01D0(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20B17F9C0(a2, (__int128 *)(v3 + 200));
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20AEC01D0(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20B17F9C0(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD v13[3];
  __int128 v14;

  v10 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 2);
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(v13[0]) = v10;
  sub_20B512EB0(a1, (unsigned __int8 *)v13);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    LOBYTE(v13[0]) = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v6, (uint64_t)v13, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v14 = xmmword_24C40DDE8;
  v13[0] = &v10;
  v13[1] = a1;
  v13[2] = &v14;
  sub_20B17FAE0(v10, v13);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20B17FACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B17FAE0(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v6 = *(_QWORD *)(v4 + 40);
      v5 = *(unsigned __int8 **)(v4 + 48);
      if (v5)
        v7 = 1;
      else
        v7 = v6 == 0;
      if (v7)
      {
        if (!v6)
          return;
        goto LABEL_65;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_65:
        v54 = a2[1];
        do
        {
          sub_20B512EB0(v54, v5++);
          --v6;
        }
        while (v6);
        return;
      }
      goto LABEL_112;
    case 1:
      v8 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 1);
      v9 = *(_QWORD *)(v8 + 16);
      v11 = *(_QWORD *)(v9 + 40);
      v10 = *(_QWORD *)(v9 + 48);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 2;
      if (!v12)
      {
        if (v11 < 2)
          return;
        goto LABEL_69;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_69:
        v55 = a2[1];
        v56 = *(_QWORD *)(v55 + 40);
        v57 = v11 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v56)
          {
            v58 = *(_QWORD **)(v55 + 24);
            v89 = *(_BYTE *)(v55 + 32);
            sub_20AEC01D0(v58, (uint64_t)&v89, 1);
          }
          v10 += 2;
          std::ostream::operator<<();
          v56 = *(_QWORD *)(v55 + 40) + 1;
          *(_QWORD *)(v55 + 40) = v56;
          v57 -= 2;
        }
        while (v57);
        return;
      }
      goto LABEL_112;
    case 2:
      v13 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 2);
      v14 = *(_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v14 + 40);
      v15 = *(_QWORD *)(v14 + 48);
      if (v15)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
      {
        if (v16 < 4)
          return;
        goto LABEL_74;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_74:
        v59 = a2[1];
        v60 = *(_QWORD *)(v59 + 40);
        v61 = v16 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v60)
          {
            v62 = *(_QWORD **)(v59 + 24);
            v90 = *(_BYTE *)(v59 + 32);
            sub_20AEC01D0(v62, (uint64_t)&v90, 1);
          }
          v15 += 4;
          std::ostream::operator<<();
          v60 = *(_QWORD *)(v59 + 40) + 1;
          *(_QWORD *)(v59 + 40) = v60;
          v61 -= 4;
        }
        while (v61);
        return;
      }
      goto LABEL_112;
    case 3:
      v18 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v21 = *(_QWORD *)(v19 + 40);
      v20 = *(_QWORD *)(v19 + 48);
      if (v20)
        v22 = 0;
      else
        v22 = v21 >= 8;
      if (!v22)
      {
        if (v21 < 8)
          return;
        goto LABEL_79;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_79:
        v63 = a2[1];
        v64 = *(_QWORD *)(v63 + 40);
        v65 = v21 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v64)
          {
            v66 = *(_QWORD **)(v63 + 24);
            v91 = *(_BYTE *)(v63 + 32);
            sub_20AEC01D0(v66, (uint64_t)&v91, 1);
          }
          v20 += 8;
          std::ostream::operator<<();
          v64 = *(_QWORD *)(v63 + 40) + 1;
          *(_QWORD *)(v63 + 40) = v64;
          v65 -= 8;
        }
        while (v65);
        return;
      }
      goto LABEL_112;
    case 5:
      v23 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 5);
      v24 = *(_QWORD *)(v23 + 16);
      v26 = *(_QWORD *)(v24 + 40);
      v25 = *(char **)(v24 + 48);
      if (v25)
        v27 = 1;
      else
        v27 = v26 == 0;
      if (v27)
      {
        if (!v26)
          return;
        goto LABEL_84;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_84:
        v68 = a2[1];
        do
        {
          sub_20B512CCC(v68, v25++);
          --v26;
        }
        while (v26);
        return;
      }
      goto LABEL_112;
    case 6:
      v28 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 6);
      v29 = *(_QWORD *)(v28 + 16);
      v31 = *(_QWORD *)(v29 + 40);
      v30 = *(_QWORD *)(v29 + 48);
      if (v30)
        v32 = 0;
      else
        v32 = v31 >= 2;
      if (!v32)
      {
        if (v31 < 2)
          return;
        goto LABEL_88;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_88:
        v69 = a2[1];
        v70 = *(_QWORD *)(v69 + 40);
        v71 = v31 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v70)
          {
            v72 = *(_QWORD **)(v69 + 24);
            v92 = *(_BYTE *)(v69 + 32);
            sub_20AEC01D0(v72, (uint64_t)&v92, 1);
          }
          v30 += 2;
          std::ostream::operator<<();
          v70 = *(_QWORD *)(v69 + 40) + 1;
          *(_QWORD *)(v69 + 40) = v70;
          v71 -= 2;
        }
        while (v71);
        return;
      }
      goto LABEL_112;
    case 7:
      v33 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 7);
      v34 = *(_QWORD *)(v33 + 16);
      v36 = *(_QWORD *)(v34 + 40);
      v35 = *(_QWORD *)(v34 + 48);
      if (v35)
        v37 = 0;
      else
        v37 = v36 >= 4;
      if (!v37)
      {
        if (v36 < 4)
          return;
        goto LABEL_93;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_93:
        v73 = a2[1];
        v74 = *(_QWORD *)(v73 + 40);
        v75 = v36 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v74)
          {
            v76 = *(_QWORD **)(v73 + 24);
            v93 = *(_BYTE *)(v73 + 32);
            sub_20AEC01D0(v76, (uint64_t)&v93, 1);
          }
          v35 += 4;
          std::ostream::operator<<();
          v74 = *(_QWORD *)(v73 + 40) + 1;
          *(_QWORD *)(v73 + 40) = v74;
          v75 -= 4;
        }
        while (v75);
        return;
      }
      goto LABEL_112;
    case 8:
      v38 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 8);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(_QWORD *)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 8;
      if (!v42)
      {
        if (v41 < 8)
          return;
        goto LABEL_98;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_98:
        v77 = a2[1];
        v78 = *(_QWORD *)(v77 + 40);
        v79 = v41 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v78)
          {
            v80 = *(_QWORD **)(v77 + 24);
            v94 = *(_BYTE *)(v77 + 32);
            sub_20AEC01D0(v80, (uint64_t)&v94, 1);
          }
          v40 += 8;
          std::ostream::operator<<();
          v78 = *(_QWORD *)(v77 + 40) + 1;
          *(_QWORD *)(v77 + 40) = v78;
          v79 -= 8;
        }
        while (v79);
        return;
      }
      goto LABEL_112;
    case 11:
      v43 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 11);
      v44 = *(_QWORD *)(v43 + 16);
      v46 = *(_QWORD *)(v44 + 40);
      v45 = *(_QWORD *)(v44 + 48);
      if (v45)
        v47 = 0;
      else
        v47 = v46 >= 4;
      if (!v47)
      {
        if (v46 < 4)
          return;
        goto LABEL_103;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_103:
        v81 = a2[1];
        v82 = *(_QWORD *)(v81 + 40);
        v83 = v46 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v82)
          {
            v84 = *(_QWORD **)(v81 + 24);
            v95 = *(_BYTE *)(v81 + 32);
            sub_20AEC01D0(v84, (uint64_t)&v95, 1);
          }
          *(_QWORD *)(*(_QWORD *)(v81 + 24) + *(_QWORD *)(**(_QWORD **)(v81 + 24) - 24) + 16) = 9;
          v45 += 4;
          std::ostream::operator<<();
          v82 = *(_QWORD *)(v81 + 40) + 1;
          *(_QWORD *)(v81 + 40) = v82;
          v83 -= 4;
        }
        while (v83);
        return;
      }
      goto LABEL_112;
    case 12:
      v48 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 12);
      v49 = *(_QWORD *)(v48 + 16);
      v51 = *(_QWORD *)(v49 + 40);
      v50 = *(_QWORD *)(v49 + 48);
      if (v50)
        v52 = 0;
      else
        v52 = v51 >= 8;
      if (v52)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
        {
LABEL_112:
          abort();
        }
      }
      else if (v51 < 8)
      {
        return;
      }
      v85 = a2[1];
      v86 = *(_QWORD *)(v85 + 40);
      v87 = v51 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        if (v86)
        {
          v88 = *(_QWORD **)(v85 + 24);
          v96 = *(_BYTE *)(v85 + 32);
          sub_20AEC01D0(v88, (uint64_t)&v96, 1);
        }
        *(_QWORD *)(*(_QWORD *)(v85 + 24) + *(_QWORD *)(**(_QWORD **)(v85 + 24) - 24) + 16) = 17;
        v50 += 8;
        std::ostream::operator<<();
        v86 = *(_QWORD *)(v85 + 40) + 1;
        *(_QWORD *)(v85 + 40) = v86;
        v87 -= 8;
      }
      while (v87);
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B1801FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE9C0(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE8A4(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    __src = 6;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0D757C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 1;
  sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_20B42B554((_QWORD *)a2);
  sub_20B1803B4(a2, (__int128 *)(v3 + 200));
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20B1803B4(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD __src[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(__src[0]) = v9;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)__src, (char *)__src + 1, 1);
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&v9 + 8, (char *)&v10, 8);
  v13 = xmmword_24C40DDE8;
  __src[0] = &v9;
  __src[1] = a1;
  __src[2] = &v13;
  sub_20B1804D8(v9, __src);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20B1804C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20B1804D8(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  char *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  char *result;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v4 + 40);
      v6 = *(char **)(v4 + 48);
      if (v6)
        v7 = 1;
      else
        v7 = v5 == 0;
      if (!v7)
        goto LABEL_27;
      goto LABEL_7;
    case 1:
      v9 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(char **)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
        goto LABEL_37;
      goto LABEL_36;
    case 2:
      v14 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v15 + 40);
      v11 = *(char **)(v15 + 48);
      if (v11)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
        goto LABEL_59;
      goto LABEL_58;
    case 3:
      v18 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v19 + 40);
      v11 = *(char **)(v19 + 48);
      if (v11)
        v21 = 0;
      else
        v21 = v20 >= 8;
      if (!v21)
        goto LABEL_71;
      goto LABEL_70;
    case 5:
      v22 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 5);
      v23 = *(_QWORD *)(v22 + 16);
      v5 = *(_QWORD *)(v23 + 40);
      v6 = *(char **)(v23 + 48);
      if (v6)
        v24 = 1;
      else
        v24 = v5 == 0;
      if (v24)
      {
LABEL_7:
        v8 = a2[1];
      }
      else
      {
LABEL_27:
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360)|| (v8 = a2[1], sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)))
        {
LABEL_77:
          abort();
        }
      }
      result = sub_20B42DB24(v8 + 24, *(char **)(v8 + 32), v6, &v6[v5], v5);
      break;
    case 6:
      v25 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 6);
      v26 = *(_QWORD *)(v25 + 16);
      v12 = *(_QWORD *)(v26 + 40);
      v11 = *(char **)(v26 + 48);
      if (v11)
        v27 = 0;
      else
        v27 = v12 >= 2;
      if (!v27)
        goto LABEL_37;
LABEL_36:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
LABEL_37:
      v28 = v12 & 0xFFFFFFFFFFFFFFFELL;
      v29 = a2[1];
      if (v11)
        v30 = 1;
      else
        v30 = v28 == 0;
      if (!v30)
        goto LABEL_75;
      goto LABEL_76;
    case 7:
      v31 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 7);
      v32 = *(_QWORD *)(v31 + 16);
      v16 = *(_QWORD *)(v32 + 40);
      v11 = *(char **)(v32 + 48);
      if (v11)
        v33 = 0;
      else
        v33 = v16 >= 4;
      if (!v33)
        goto LABEL_59;
      goto LABEL_58;
    case 8:
      v34 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 8);
      v35 = *(_QWORD *)(v34 + 16);
      v20 = *(_QWORD *)(v35 + 40);
      v11 = *(char **)(v35 + 48);
      if (v11)
        v36 = 0;
      else
        v36 = v20 >= 8;
      if (!v36)
        goto LABEL_71;
      goto LABEL_70;
    case 11:
      v37 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 11);
      v38 = *(_QWORD *)(v37 + 16);
      v16 = *(_QWORD *)(v38 + 40);
      v11 = *(char **)(v38 + 48);
      if (v11)
        v39 = 0;
      else
        v39 = v16 >= 4;
      if (!v39)
        goto LABEL_59;
LABEL_58:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
LABEL_59:
      v28 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      v29 = a2[1];
      if (v11)
        v40 = 1;
      else
        v40 = v28 == 0;
      if (!v40)
        goto LABEL_75;
      goto LABEL_76;
    case 12:
      v41 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 12);
      v42 = *(_QWORD *)(v41 + 16);
      v20 = *(_QWORD *)(v42 + 40);
      v11 = *(char **)(v42 + 48);
      if (v11)
        v43 = 0;
      else
        v43 = v20 >= 8;
      if (!v43)
        goto LABEL_71;
LABEL_70:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
LABEL_71:
      v28 = v20 & 0xFFFFFFFFFFFFFFF8;
      v29 = a2[1];
      if (v11)
        v44 = 1;
      else
        v44 = v28 == 0;
      if (v44)
        goto LABEL_76;
LABEL_75:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
LABEL_76:
      result = sub_20B42DB24(v29 + 24, *(char **)(v29 + 32), v11, &v11[v28], v28);
      break;
    default:
      sub_20B521E58(a1);
  }
  return result;
}

void sub_20B180864(_BYTE *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _BYTE *v12[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v12[0] = &v9;
  sub_20B0FFA54(a1, v12);
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 120))(a1, (char *)&v9 + 8);
  v13 = xmmword_24C40DDE8;
  v12[0] = &v9;
  v12[1] = a1;
  v12[2] = &v13;
  sub_20B180960(v9, v12);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20B18094C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_20B180960(int a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned __int8 **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(_QWORD *)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (v8)
      {
        if (!v7)
          return result;
        goto LABEL_65;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_65:
        v55 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 80))(v55, v6++);
          --v7;
        }
        while (v7);
        return result;
      }
      goto LABEL_104;
    case 1:
      v9 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
      {
        if (v12 < 2)
          return result;
        goto LABEL_69;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_69:
        v56 = a2[1];
        v57 = v12 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 96))(v56, v11);
          v11 += 2;
          v57 -= 2;
        }
        while (v57);
        return result;
      }
      goto LABEL_104;
    case 2:
      v14 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v17 = *(_QWORD *)(v15 + 40);
      v16 = *(_QWORD *)(v15 + 48);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (!v18)
      {
        if (v17 < 4)
          return result;
        goto LABEL_73;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_73:
        v58 = a2[1];
        v59 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 104))(v58, v16);
          v16 += 4;
          v59 -= 4;
        }
        while (v59);
        return result;
      }
      goto LABEL_104;
    case 3:
      v19 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 3);
      v20 = *(_QWORD *)(v19 + 16);
      v22 = *(_QWORD *)(v20 + 40);
      v21 = *(_QWORD *)(v20 + 48);
      if (v21)
        v23 = 0;
      else
        v23 = v22 >= 8;
      if (!v23)
      {
        if (v22 < 8)
          return result;
        goto LABEL_77;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_77:
        v60 = a2[1];
        v61 = v22 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 120))(v60, v21);
          v21 += 8;
          v61 -= 8;
        }
        while (v61);
        return result;
      }
      goto LABEL_104;
    case 5:
      v24 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 5);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
        v28 = 1;
      else
        v28 = v27 == 0;
      if (v28)
      {
        if (!v27)
          return result;
        goto LABEL_81;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_81:
        v63 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 88))(v63, v26++);
          --v27;
        }
        while (v27);
        return result;
      }
      goto LABEL_104;
    case 6:
      v29 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 6);
      v30 = *(_QWORD *)(v29 + 16);
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 2;
      if (!v33)
      {
        if (v32 < 2)
          return result;
        goto LABEL_85;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_85:
        v64 = a2[1];
        v65 = v32 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 48))(v64, v31);
          v31 += 2;
          v65 -= 2;
        }
        while (v65);
        return result;
      }
      goto LABEL_104;
    case 7:
      v34 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 7);
      v35 = *(_QWORD *)(v34 + 16);
      v37 = *(_QWORD *)(v35 + 40);
      v36 = *(_QWORD *)(v35 + 48);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (!v38)
      {
        if (v37 < 4)
          return result;
        goto LABEL_89;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_89:
        v66 = a2[1];
        v67 = v37 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 56))(v66, v36);
          v36 += 4;
          v67 -= 4;
        }
        while (v67);
        return result;
      }
      goto LABEL_104;
    case 8:
      v39 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 8);
      v40 = *(_QWORD *)(v39 + 16);
      v42 = *(_QWORD *)(v40 + 40);
      v41 = *(_QWORD *)(v40 + 48);
      if (v41)
        v43 = 0;
      else
        v43 = v42 >= 8;
      if (!v43)
      {
        if (v42 < 8)
          return result;
        goto LABEL_93;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_93:
        v68 = a2[1];
        v69 = v42 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 72))(v68, v41);
          v41 += 8;
          v69 -= 8;
        }
        while (v69);
        return result;
      }
      goto LABEL_104;
    case 11:
      v44 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 11);
      v45 = *(_QWORD *)(v44 + 16);
      v47 = *(_QWORD *)(v45 + 40);
      v46 = *(_QWORD *)(v45 + 48);
      if (v46)
        v48 = 0;
      else
        v48 = v47 >= 4;
      if (!v48)
      {
        if (v47 < 4)
          return result;
        goto LABEL_97;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_97:
        v70 = a2[1];
        v71 = v47 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 128))(v70, v46);
          v46 += 4;
          v71 -= 4;
        }
        while (v71);
        return result;
      }
      goto LABEL_104;
    case 12:
      v49 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 12);
      v50 = *(_QWORD *)(v49 + 16);
      v52 = *(_QWORD *)(v50 + 40);
      v51 = *(_QWORD *)(v50 + 48);
      if (v51)
        v53 = 0;
      else
        v53 = v52 >= 8;
      if (v53)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
        {
LABEL_104:
          abort();
        }
      }
      else if (v52 < 8)
      {
        return result;
      }
      v72 = a2[1];
      v73 = v52 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 136))(v72, v51);
        v51 += 8;
        v73 -= 8;
      }
      while (v73);
      return result;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B180F3C(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED20, 0);
  if (v4)
  {
    sub_20B1815F0(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED58, 0);
    if (v5)
    {
      sub_20B1839B8(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EDE0, 0);
      if (v6)
      {
        sub_20B1851CC(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EE18, 0);
        if (v7)
        {
          sub_20B187594(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C508)
            sub_20B188E80(&v9, a1);
          else
            sub_20B1810A0(&v8, (uint64_t)a1);
        }
      }
    }
  }
}

void sub_20B1810A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  _BYTE *v30[26];
  _BYTE v31[24];
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 __p;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v30);
    sub_20B0D0A00((uint64_t)v31, (uint64_t *)v30);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v31);
        if (!v45)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(uint64_t *, uint64_t))*(&off_24C40DC18 + v6))(&v29, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v31[8];
    *(_BYTE *)(v3 + 64) = 0;
    if (v34)
    {
      v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(_QWORD *)(v3 + 56) = v8;
      v32 = 0uLL;
      v33 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v36;
    v10 = v35;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v39)
    {
      v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(_QWORD *)(v3 + 112) = v11;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v42)
    {
      v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(_QWORD *)(v3 + 144) = v12;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = __p;
      *(_QWORD *)(v3 + 176) = v44;
      __p = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = __p;
    if (!(_QWORD)__p)
      goto LABEL_46;
    v15 = *((_QWORD *)&__p + 1);
    v16 = (void *)__p;
    if (*((_QWORD *)&__p + 1) == (_QWORD)__p)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)__p;
LABEL_45:
    *((_QWORD *)&__p + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v30);
  sub_20B0D0A00((uint64_t)v31, (uint64_t *)v30);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(uint64_t *, uint64_t))*(&off_24C40DC18 + v7))(&v29, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v31[8];
    *(_BYTE *)(v3 + 64) = 0;
    if (v34)
    {
      v17 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(_QWORD *)(v3 + 56) = v17;
      v32 = 0uLL;
      v33 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v36;
    v19 = v35;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v39)
    {
      v20 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(_QWORD *)(v3 + 112) = v20;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v42)
    {
      v21 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(_QWORD *)(v3 + 144) = v21;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = __p;
      *(_QWORD *)(v3 + 176) = v44;
      __p = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v31);
  if (v45)
  {
LABEL_38:
    v14 = __p;
    if (!(_QWORD)__p)
      goto LABEL_46;
    v23 = *((_QWORD *)&__p + 1);
    v16 = (void *)__p;
    if (*((_QWORD *)&__p + 1) == (_QWORD)__p)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v34 && SHIBYTE(v33) < 0)
    operator delete((void *)v32);
  sub_20AF4EA3C((uint64_t)v30);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(_QWORD *)a2;
  v30[0] = *(_BYTE **)(a2 + 8);
  v25 = (int)v30[0];
  *(_DWORD *)v31 = 6;
  (*(void (**)(uint64_t, _BYTE *))(v24 + 104))(a2, v31);
  if (v25 < 1)
  {
    if (*(_DWORD *)v31 < 3u)
      sub_20B0E41CC((uint64_t)v31, a2, v4, *(unsigned int *)v31);
    else
      sub_20B0E4440(a2, v4, *(unsigned int *)v31);
  }
  else
  {
    sub_20B0E3BD4((int *)v30, a2, v4, *(unsigned int *)v31);
  }
  v26 = *(_QWORD *)a2;
  v29 = *(_QWORD *)(a2 + 8);
  v27 = v29;
  LODWORD(v30[0]) = 1;
  (*(void (**)(uint64_t, _BYTE **))(v26 + 104))(a2, v30);
  if (v27 < 1)
  {
    v30[0] = (_BYTE *)(v3 + 200);
    sub_20B103C34((_BYTE *)a2, v30);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, v3 + 208);
    *(_OWORD *)v31 = xmmword_24C40DDE8;
    v28 = *(unsigned __int8 *)(v3 + 200);
    v30[0] = (_BYTE *)(v3 + 200);
    v30[1] = (_BYTE *)a2;
    v30[2] = v31;
    sub_20B18AFB4(v28, v30);
  }
  else
  {
    sub_20B18AB04((int *)&v29, (_BYTE *)a2, (_BYTE *)(v3 + 200));
  }
}

void sub_20B1815A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1815F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v27);
    sub_20B0D0A00((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v27);
  sub_20B0D0A00((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20AF4EA3C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0D978C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B181AA0((uint64_t)v27, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20B181A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B181AA0(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  char *v6;
  int v7;
  int v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  _BYTE *v14;

  sub_20B50AC94(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_20B4552C4(v6, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v14 = a3;
  sub_20B1002E8((uint64_t *)a2, &v14);
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  v9 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_20B4552C4(v9, &v14);
  *((_QWORD *)a3 + 1) = v14;
  v10 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "lines2";
  *(_QWORD *)(a2 + 96) = 6;
  if (!v10)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50AC94(a2);
  sub_20B181C30(*a3, (uint64_t)a3, a2);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 16);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 16);
  *(_QWORD *)(a2 + 48) = v11 - 16;
  *(_QWORD *)(a2 + 72) = v12 - 16;
}

void sub_20B181C30(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B181D58(v3);
      break;
    case 1:
      sub_20B182010(v3);
      break;
    case 2:
      sub_20B1822D4(v3);
      break;
    case 3:
      sub_20B18259C(v3);
      break;
    case 5:
      sub_20B1828D4(v3);
      break;
    case 6:
      sub_20B182B8C(v3);
      break;
    case 7:
      sub_20B182E50(v3);
      break;
    case 8:
      sub_20B183118(v3);
      break;
    case 11:
      sub_20B183450(v3);
      break;
    case 12:
      sub_20B183704(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B181D58(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(4 * v2);
    v5 = &v4[v3];
    __p = v4;
    v22 = &v4[v3];
    bzero(v4, 4 * v2);
    v21 = v5;
  }
  if (v2)
  {
    v6 = (_QWORD *)a1[1];
    v7 = 2;
    do
    {
      sub_20B50AC94((uint64_t)v6);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v8 = (uint64_t *)a1[1], v23 = 2, v24 = (char *)__p + v7 - 2, v9 = (char *)sub_20B50AF4C(v8), ++v8[14], sub_20B50B064(v9, (uint64_t)&v23), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v10 = (uint64_t *)a1[1];
      v23 = 2;
      v24 = (char *)__p + v7;
      v11 = (char *)sub_20B50AF4C(v10);
      ++v10[14];
      sub_20B50B064(v11, (uint64_t)&v23);
      v6 = (_QWORD *)a1[1];
      v12 = v6[6];
      v6[4] = *(_QWORD *)(v12 - 8);
      v13 = v6[9];
      v6[14] = *(_QWORD *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20B43BC04(&v23, 0, (uint64_t)&__p);
  v15 = v23;
  v14 = v24;
  if ((*(_BYTE *)(v23 + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v16 = *a1;
  v17 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v14;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20B181FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B182010(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (4 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(8 * v2);
    v19 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 4;
    do
    {
      sub_20B50AC94((uint64_t)v3);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v5 = (uint64_t *)a1[1], v20 = 2, v21 = (char *)__p + v4 - 4, v6 = (char *)sub_20B50AF4C(v5), ++v5[14], sub_20B50BE9C(v6, (uint64_t)&v20), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 2;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_20B50AF4C(v7);
      ++v7[14];
      sub_20B50BE9C(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20B43BF48(&v20, 1, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if ((*(_BYTE *)(v20 + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20B18226C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1822D4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(16 * v2);
    v19 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 8;
    do
    {
      sub_20B50AC94((uint64_t)v3);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v5 = (uint64_t *)a1[1], v20 = 2, v21 = (char *)__p + v4 - 8, v6 = (char *)sub_20B50AF4C(v5), ++v5[14], sub_20B50C014(v6, (uint64_t)&v20), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 2;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_20B50AF4C(v7);
      ++v7[14];
      sub_20B50C014(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20B43C290(&v20, 2, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if ((*(_BYTE *)(v20 + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20B182534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B18259C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  const void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*a1 + 8);
  v22 = 0;
  v23 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(32 * v2);
    v23 = (char *)__p + 32 * v2;
    bzero(__p, 32 * v2);
    v22 = v23;
  }
  if (v2)
  {
    v3 = 0;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_20B50AC94((uint64_t)v4);
      v7 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_29;
      }
      v8 = (uint64_t *)a1[1];
      v9 = (char *)sub_20B50AF4C(v8);
      ++v8[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_20B50E45C(v9, (uint64_t)&v24);
      v10 = v24;
      if (v25 != v24)
      {
        memmove(&v7[v3], v24, v25 - v24);
        v10 = v24;
      }
      if (v10)
      {
        v25 = v10;
        operator delete(v10);
      }
      v11 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
LABEL_29:
        abort();
      }
      v12 = (uint64_t *)a1[1];
      v13 = (char *)sub_20B50AF4C(v12);
      ++v12[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_20B50E45C(v13, (uint64_t)&v24);
      v14 = v24;
      if (v25 != v24)
      {
        memmove(&v11[v3 + 16], v24, v25 - v24);
        v14 = v24;
      }
      if (v14)
      {
        v25 = v14;
        operator delete(v14);
      }
      v4 = (_QWORD *)a1[1];
      v5 = v4[6];
      v4[4] = *(_QWORD *)(v5 - 8);
      v6 = v4[9];
      v4[14] = *(_QWORD *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 32;
      --v2;
    }
    while (v2);
  }
  sub_20B43C5D8(&v24, 3, (uint64_t)&__p);
  v16 = v24;
  v15 = v25;
  if ((v24[56] & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v17 = *a1;
  v18 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v15;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20B182850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1828D4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(4 * v2);
    v5 = &v4[v3];
    __p = v4;
    v22 = &v4[v3];
    bzero(v4, 4 * v2);
    v21 = v5;
  }
  if (v2)
  {
    v6 = (_QWORD *)a1[1];
    v7 = 2;
    do
    {
      sub_20B50AC94((uint64_t)v6);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v8 = (uint64_t *)a1[1], v23 = 2, v24 = (char *)__p + v7 - 2, v9 = (char *)sub_20B50AF4C(v8), ++v8[14], sub_20B50BCBC(v9, (uint64_t)&v23), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v10 = (uint64_t *)a1[1];
      v23 = 2;
      v24 = (char *)__p + v7;
      v11 = (char *)sub_20B50AF4C(v10);
      ++v10[14];
      sub_20B50BCBC(v11, (uint64_t)&v23);
      v6 = (_QWORD *)a1[1];
      v12 = v6[6];
      v6[4] = *(_QWORD *)(v12 - 8);
      v13 = v6[9];
      v6[14] = *(_QWORD *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20B43BA64(&v23, 5, (uint64_t)&__p);
  v15 = v23;
  v14 = v24;
  if ((*(_BYTE *)(v23 + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v16 = *a1;
  v17 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v14;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20B182B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B182B8C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (4 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(8 * v2);
    v19 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 4;
    do
    {
      sub_20B50AC94((uint64_t)v3);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v5 = (uint64_t *)a1[1], v20 = 2, v21 = (char *)__p + v4 - 4, v6 = (char *)sub_20B50AF4C(v5), ++v5[14], sub_20B50BDAC(v6, (uint64_t)&v20), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 2;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_20B50AF4C(v7);
      ++v7[14];
      sub_20B50BDAC(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20B43BDA4(&v20, 6, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if ((*(_BYTE *)(v20 + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20B182DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B182E50(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(16 * v2);
    v19 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 8;
    do
    {
      sub_20B50AC94((uint64_t)v3);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v5 = (uint64_t *)a1[1], v20 = 2, v21 = (char *)__p + v4 - 8, v6 = (char *)sub_20B50AF4C(v5), ++v5[14], sub_20B50BF58(v6, (uint64_t)&v20), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 2;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_20B50AF4C(v7);
      ++v7[14];
      sub_20B50BF58(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20B43C0EC(&v20, 7, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if ((*(_BYTE *)(v20 + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20B1830B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B183118(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  const void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*a1 + 8);
  v22 = 0;
  v23 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(32 * v2);
    v23 = (char *)__p + 32 * v2;
    bzero(__p, 32 * v2);
    v22 = v23;
  }
  if (v2)
  {
    v3 = 0;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_20B50AC94((uint64_t)v4);
      v7 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_29;
      }
      v8 = (uint64_t *)a1[1];
      v9 = (char *)sub_20B50AF4C(v8);
      ++v8[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_20B50E120(v9, (uint64_t)&v24);
      v10 = v24;
      if (v25 != v24)
      {
        memmove(&v7[v3], v24, v25 - v24);
        v10 = v24;
      }
      if (v10)
      {
        v25 = v10;
        operator delete(v10);
      }
      v11 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
LABEL_29:
        abort();
      }
      v12 = (uint64_t *)a1[1];
      v13 = (char *)sub_20B50AF4C(v12);
      ++v12[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_20B50E120(v13, (uint64_t)&v24);
      v14 = v24;
      if (v25 != v24)
      {
        memmove(&v11[v3 + 16], v24, v25 - v24);
        v14 = v24;
      }
      if (v14)
      {
        v25 = v14;
        operator delete(v14);
      }
      v4 = (_QWORD *)a1[1];
      v5 = v4[6];
      v4[4] = *(_QWORD *)(v5 - 8);
      v6 = v4[9];
      v4[14] = *(_QWORD *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 32;
      --v2;
    }
    while (v2);
  }
  sub_20B43C434(&v24, 8, (uint64_t)&__p);
  v16 = v24;
  v15 = v25;
  if ((v24[56] & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v17 = *a1;
  v18 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v15;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20B1833CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B183450(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  void *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(16 * v2);
    v21 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v20 = v21;
  }
  if (v2)
  {
    v3 = 8;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_20B50AC94((uint64_t)v4);
      v5 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v6 = (uint64_t *)a1[1], v7 = sub_20B50AF4C(v6), ++v6[14], sub_20B50C420(v7, (float *)&v5[v3 - 8]), (v8 = (char *)__p) == 0)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v9 = (uint64_t *)a1[1];
      v10 = sub_20B50AF4C(v9);
      ++v9[14];
      sub_20B50C420(v10, (float *)&v8[v3]);
      v4 = (_QWORD *)a1[1];
      v11 = v4[6];
      v4[4] = *(_QWORD *)(v11 - 8);
      v12 = v4[9];
      v4[14] = *(_QWORD *)(v12 - 8);
      v4[6] = v11 - 8;
      v4[9] = v12 - 8;
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20B43C77C(v22, 11, (uint64_t)&__p);
  v14 = v22[0];
  v13 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_20B18369C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B183704(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  void *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(32 * v2);
    v21 = (char *)__p + 32 * v2;
    bzero(__p, 32 * v2);
    v20 = v21;
  }
  if (v2)
  {
    v3 = 16;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_20B50AC94((uint64_t)v4);
      v5 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v6 = (uint64_t *)a1[1], v7 = sub_20B50AF4C(v6), ++v6[14], sub_20B50C528(v7, (double *)&v5[v3 - 16]), (v8 = (char *)__p) == 0)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v9 = (uint64_t *)a1[1];
      v10 = sub_20B50AF4C(v9);
      ++v9[14];
      sub_20B50C528(v10, (double *)&v8[v3]);
      v4 = (_QWORD *)a1[1];
      v11 = v4[6];
      v4[4] = *(_QWORD *)(v11 - 8);
      v12 = v4[9];
      v4[14] = *(_QWORD *)(v12 - 8);
      v4[6] = v11 - 8;
      v4[9] = v12 - 8;
      v3 += 32;
      --v2;
    }
    while (v2);
  }
  sub_20B43C920(v22, 12, (uint64_t)&__p);
  v14 = v22[0];
  v13 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_20B183950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1839B8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v25;
  uint64_t v26[27];
  _BYTE v27[8];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v26);
    sub_20B0D0A00((uint64_t)v27, v26);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v27);
        if (!v42)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v25, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v8;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v33;
    v10 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v11;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v12;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v15 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v40;
LABEL_45:
    *((_QWORD *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v26);
  sub_20B0D0A00((uint64_t)v27, v26);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v25, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v17;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v33;
    v19 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v20;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v21;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v23 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  sub_20AF4EA3C((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0DD1A0((uint64_t)v26, a2, v4);
  LODWORD(v26[0]) = 1;
  sub_20B518854(a2[6], v26);
  return sub_20B183E44((uint64_t)v26, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20B183DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B183E44(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD v10[3];
  __int128 v11;

  v5 = a2 + 2;
  sub_20B0DD290(a2 + 2);
  LOBYTE(v10[0]) = 0;
  sub_20B51852C(a2[6], v10);
  *a3 = v10[0];
  sub_20B518BE4(a2[6], (_QWORD *)a3 + 1);
  v11 = xmmword_24C40DDE8;
  v6 = *a3;
  v10[0] = a3;
  v10[1] = a2;
  v10[2] = &v11;
  sub_20B183F0C(v6, v10);
  v7 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(v5);
  v9 = *(_QWORD *)(v7 - 16) - result + *(_QWORD *)(v7 - 8);
  if (v9)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v5 + 40))(v5, v9);
  a2[4] -= 16;
  return result;
}

void sub_20B183F0C(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B183FB4(a2);
      break;
    case 1:
      sub_20B184174(a2);
      break;
    case 2:
      sub_20B184344(a2);
      break;
    case 3:
      sub_20B184518(a2);
      break;
    case 5:
      sub_20B1846EC(a2);
      break;
    case 6:
      sub_20B1848AC(a2);
      break;
    case 7:
      sub_20B184A7C(a2);
      break;
    case 8:
      sub_20B184C50(a2);
      break;
    case 11:
      sub_20B184E24(a2);
      break;
    case 12:
      sub_20B184FF8(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B183FB4(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v4 = operator new(4 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20B51852C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BC04(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B184114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B184174(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20B5186C0(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BF48(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1842E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B184344(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20B518854(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C290(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1844B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B184518(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20B518BE4(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C5D8(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B18468C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1846EC(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v4 = operator new(4 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20B51847C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BA64(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B18484C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1848AC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20B518610(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BDA4(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B184A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B184A7C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20B5187A4(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C0EC(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B184BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B184C50(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20B518AFC(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C434(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B184DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B184E24(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20B518CC0(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C77C(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B184F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B184FF8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20B518DF0(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C920(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B18516C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1851CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v27);
    sub_20B0D0A00((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v27);
  sub_20B0D0A00((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20AF4EA3C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0DE788(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B18567C((uint64_t)v27, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20B185634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B18567C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  char *v6;
  int v7;
  int v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  _BYTE *v14;

  sub_20B50A7A4(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_20B454B2C(v6, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v14 = a3;
  sub_20B101898((uint64_t *)a2, &v14);
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  v9 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_20B454B2C(v9, &v14);
  *((_QWORD *)a3 + 1) = v14;
  v10 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "lines2";
  *(_QWORD *)(a2 + 96) = 6;
  if (!v10)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50A7A4(a2);
  sub_20B18580C(*a3, (uint64_t)a3, a2);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 16);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 16);
  *(_QWORD *)(a2 + 48) = v11 - 16;
  *(_QWORD *)(a2 + 72) = v12 - 16;
}

void sub_20B18580C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B185934(v3);
      break;
    case 1:
      sub_20B185BEC(v3);
      break;
    case 2:
      sub_20B185EB0(v3);
      break;
    case 3:
      sub_20B186178(v3);
      break;
    case 5:
      sub_20B1864B0(v3);
      break;
    case 6:
      sub_20B186768(v3);
      break;
    case 7:
      sub_20B186A2C(v3);
      break;
    case 8:
      sub_20B186CF4(v3);
      break;
    case 11:
      sub_20B18702C(v3);
      break;
    case 12:
      sub_20B1872E0(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B185934(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(4 * v2);
    v5 = &v4[v3];
    __p = v4;
    v22 = &v4[v3];
    bzero(v4, 4 * v2);
    v21 = v5;
  }
  if (v2)
  {
    v6 = (_QWORD *)a1[1];
    v7 = 2;
    do
    {
      sub_20B50A7A4((uint64_t)v6);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v8 = (uint64_t *)a1[1], v23 = 2, v24 = (char *)__p + v7 - 2, v9 = (char *)sub_20B50AA5C(v8), ++v8[14], sub_20B50AB74(v9, (uint64_t)&v23), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v10 = (uint64_t *)a1[1];
      v23 = 2;
      v24 = (char *)__p + v7;
      v11 = (char *)sub_20B50AA5C(v10);
      ++v10[14];
      sub_20B50AB74(v11, (uint64_t)&v23);
      v6 = (_QWORD *)a1[1];
      v12 = v6[6];
      v6[4] = *(_QWORD *)(v12 - 8);
      v13 = v6[9];
      v6[14] = *(_QWORD *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20B43BC04(&v23, 0, (uint64_t)&__p);
  v15 = v23;
  v14 = v24;
  if ((*(_BYTE *)(v23 + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v16 = *a1;
  v17 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v14;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20B185B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B185BEC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (4 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(8 * v2);
    v19 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 4;
    do
    {
      sub_20B50A7A4((uint64_t)v3);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v5 = (uint64_t *)a1[1], v20 = 2, v21 = (char *)__p + v4 - 4, v6 = (char *)sub_20B50AA5C(v5), ++v5[14], sub_20B50B300(v6, (uint64_t)&v20), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 2;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_20B50AA5C(v7);
      ++v7[14];
      sub_20B50B300(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20B43BF48(&v20, 1, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if ((*(_BYTE *)(v20 + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20B185E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B185EB0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(16 * v2);
    v19 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 8;
    do
    {
      sub_20B50A7A4((uint64_t)v3);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v5 = (uint64_t *)a1[1], v20 = 2, v21 = (char *)__p + v4 - 8, v6 = (char *)sub_20B50AA5C(v5), ++v5[14], sub_20B50B478(v6, (uint64_t)&v20), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 2;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_20B50AA5C(v7);
      ++v7[14];
      sub_20B50B478(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20B43C290(&v20, 2, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if ((*(_BYTE *)(v20 + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20B186110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B186178(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  const void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*a1 + 8);
  v22 = 0;
  v23 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(32 * v2);
    v23 = (char *)__p + 32 * v2;
    bzero(__p, 32 * v2);
    v22 = v23;
  }
  if (v2)
  {
    v3 = 0;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_20B50A7A4((uint64_t)v4);
      v7 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_29;
      }
      v8 = (uint64_t *)a1[1];
      v9 = (char *)sub_20B50AA5C(v8);
      ++v8[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_20B50D194(v9, (uint64_t)&v24);
      v10 = v24;
      if (v25 != v24)
      {
        memmove(&v7[v3], v24, v25 - v24);
        v10 = v24;
      }
      if (v10)
      {
        v25 = v10;
        operator delete(v10);
      }
      v11 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
LABEL_29:
        abort();
      }
      v12 = (uint64_t *)a1[1];
      v13 = (char *)sub_20B50AA5C(v12);
      ++v12[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_20B50D194(v13, (uint64_t)&v24);
      v14 = v24;
      if (v25 != v24)
      {
        memmove(&v11[v3 + 16], v24, v25 - v24);
        v14 = v24;
      }
      if (v14)
      {
        v25 = v14;
        operator delete(v14);
      }
      v4 = (_QWORD *)a1[1];
      v5 = v4[6];
      v4[4] = *(_QWORD *)(v5 - 8);
      v6 = v4[9];
      v4[14] = *(_QWORD *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 32;
      --v2;
    }
    while (v2);
  }
  sub_20B43C5D8(&v24, 3, (uint64_t)&__p);
  v16 = v24;
  v15 = v25;
  if ((v24[56] & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v17 = *a1;
  v18 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v15;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20B18642C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1864B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(4 * v2);
    v5 = &v4[v3];
    __p = v4;
    v22 = &v4[v3];
    bzero(v4, 4 * v2);
    v21 = v5;
  }
  if (v2)
  {
    v6 = (_QWORD *)a1[1];
    v7 = 2;
    do
    {
      sub_20B50A7A4((uint64_t)v6);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v8 = (uint64_t *)a1[1], v23 = 2, v24 = (char *)__p + v7 - 2, v9 = (char *)sub_20B50AA5C(v8), ++v8[14], sub_20B50B120(v9, (uint64_t)&v23), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v10 = (uint64_t *)a1[1];
      v23 = 2;
      v24 = (char *)__p + v7;
      v11 = (char *)sub_20B50AA5C(v10);
      ++v10[14];
      sub_20B50B120(v11, (uint64_t)&v23);
      v6 = (_QWORD *)a1[1];
      v12 = v6[6];
      v6[4] = *(_QWORD *)(v12 - 8);
      v13 = v6[9];
      v6[14] = *(_QWORD *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20B43BA64(&v23, 5, (uint64_t)&__p);
  v15 = v23;
  v14 = v24;
  if ((*(_BYTE *)(v23 + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v16 = *a1;
  v17 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v14;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20B186700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B186768(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (4 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(8 * v2);
    v19 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 4;
    do
    {
      sub_20B50A7A4((uint64_t)v3);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v5 = (uint64_t *)a1[1], v20 = 2, v21 = (char *)__p + v4 - 4, v6 = (char *)sub_20B50AA5C(v5), ++v5[14], sub_20B50B210(v6, (uint64_t)&v20), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 2;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_20B50AA5C(v7);
      ++v7[14];
      sub_20B50B210(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20B43BDA4(&v20, 6, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if ((*(_BYTE *)(v20 + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20B1869C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B186A2C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(16 * v2);
    v19 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 8;
    do
    {
      sub_20B50A7A4((uint64_t)v3);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v5 = (uint64_t *)a1[1], v20 = 2, v21 = (char *)__p + v4 - 8, v6 = (char *)sub_20B50AA5C(v5), ++v5[14], sub_20B50B3BC(v6, (uint64_t)&v20), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 2;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_20B50AA5C(v7);
      ++v7[14];
      sub_20B50B3BC(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20B43C0EC(&v20, 7, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if ((*(_BYTE *)(v20 + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20B186C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B186CF4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  const void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*a1 + 8);
  v22 = 0;
  v23 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(32 * v2);
    v23 = (char *)__p + 32 * v2;
    bzero(__p, 32 * v2);
    v22 = v23;
  }
  if (v2)
  {
    v3 = 0;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_20B50A7A4((uint64_t)v4);
      v7 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_29;
      }
      v8 = (uint64_t *)a1[1];
      v9 = (char *)sub_20B50AA5C(v8);
      ++v8[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_20B50CAD8(v9, (uint64_t)&v24);
      v10 = v24;
      if (v25 != v24)
      {
        memmove(&v7[v3], v24, v25 - v24);
        v10 = v24;
      }
      if (v10)
      {
        v25 = v10;
        operator delete(v10);
      }
      v11 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
LABEL_29:
        abort();
      }
      v12 = (uint64_t *)a1[1];
      v13 = (char *)sub_20B50AA5C(v12);
      ++v12[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_20B50CAD8(v13, (uint64_t)&v24);
      v14 = v24;
      if (v25 != v24)
      {
        memmove(&v11[v3 + 16], v24, v25 - v24);
        v14 = v24;
      }
      if (v14)
      {
        v25 = v14;
        operator delete(v14);
      }
      v4 = (_QWORD *)a1[1];
      v5 = v4[6];
      v4[4] = *(_QWORD *)(v5 - 8);
      v6 = v4[9];
      v4[14] = *(_QWORD *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 32;
      --v2;
    }
    while (v2);
  }
  sub_20B43C434(&v24, 8, (uint64_t)&__p);
  v16 = v24;
  v15 = v25;
  if ((v24[56] & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v17 = *a1;
  v18 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v15;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20B186FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B18702C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  void *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(16 * v2);
    v21 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v20 = v21;
  }
  if (v2)
  {
    v3 = 8;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_20B50A7A4((uint64_t)v4);
      v5 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v6 = (uint64_t *)a1[1], v7 = sub_20B50AA5C(v6), ++v6[14], sub_20B50B8AC(v7, (float *)&v5[v3 - 8]), (v8 = (char *)__p) == 0)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v9 = (uint64_t *)a1[1];
      v10 = sub_20B50AA5C(v9);
      ++v9[14];
      sub_20B50B8AC(v10, (float *)&v8[v3]);
      v4 = (_QWORD *)a1[1];
      v11 = v4[6];
      v4[4] = *(_QWORD *)(v11 - 8);
      v12 = v4[9];
      v4[14] = *(_QWORD *)(v12 - 8);
      v4[6] = v11 - 8;
      v4[9] = v12 - 8;
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20B43C77C(v22, 11, (uint64_t)&__p);
  v14 = v22[0];
  v13 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_20B187278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1872E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  void *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(32 * v2);
    v21 = (char *)__p + 32 * v2;
    bzero(__p, 32 * v2);
    v20 = v21;
  }
  if (v2)
  {
    v3 = 16;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_20B50A7A4((uint64_t)v4);
      v5 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v6 = (uint64_t *)a1[1], v7 = sub_20B50AA5C(v6), ++v6[14], sub_20B50B9DC(v7, (double *)&v5[v3 - 16]), (v8 = (char *)__p) == 0)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v9 = (uint64_t *)a1[1];
      v10 = sub_20B50AA5C(v9);
      ++v9[14];
      sub_20B50B9DC(v10, (double *)&v8[v3]);
      v4 = (_QWORD *)a1[1];
      v11 = v4[6];
      v4[4] = *(_QWORD *)(v11 - 8);
      v12 = v4[9];
      v4[14] = *(_QWORD *)(v12 - 8);
      v4[6] = v11 - 8;
      v4[9] = v12 - 8;
      v3 += 32;
      --v2;
    }
    while (v2);
  }
  sub_20B43C920(v22, 12, (uint64_t)&__p);
  v14 = v22[0];
  v13 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_20B18752C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B187594(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  void *__p;
  uint64_t v33;
  _BYTE *v34;
  _BYTE v35[24];
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)&__p);
    sub_20B0D0A00((uint64_t)v35, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v35);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v35[8];
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)&__p);
  sub_20B0D0A00((uint64_t)v35, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v35[8];
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v35);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20AF4EA3C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20B514490(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20B0E0A94((uint64_t)&__p, a2, v4, v25);
  else
    sub_20B0E0C84(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (SHIBYTE(v34) < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_92:
          v30 = 0;
          if (SHIBYTE(v34) < 0)
            goto LABEL_95;
          goto LABEL_81;
        }
      }
      else if (SHIBYTE(v34) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_92;
      }
      v30 = 1;
      if (SHIBYTE(v34) < 0)
LABEL_95:
        operator delete(__p);
LABEL_81:
      if (*(_BYTE *)(a2 + 131))
        v29 = 0;
      else
        v29 = v30;
    }
    while ((v29 & 1) != 0);
  }
  LODWORD(__p) = 1;
  sub_20B514490(a2, &__p);
  LOBYTE(__p) = 0;
  sub_20B513B4C(a2, &__p);
  *(_BYTE *)(v3 + 200) = (_BYTE)__p;
  sub_20B514DE0(a2, (_QWORD *)(v3 + 208));
  *(_OWORD *)v35 = xmmword_24C40DDE8;
  v26 = *(unsigned __int8 *)(v3 + 200);
  __p = (void *)(v3 + 200);
  v33 = a2;
  v34 = v35;
  sub_20B187BE8(v26, &__p);
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (SHIBYTE(v34) < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_77:
          v28 = 0;
          if (SHIBYTE(v34) < 0)
            goto LABEL_80;
          goto LABEL_66;
        }
      }
      else if (SHIBYTE(v34) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_77;
      }
      v28 = 1;
      if (SHIBYTE(v34) < 0)
LABEL_80:
        operator delete(__p);
LABEL_66:
      if (*(_BYTE *)(a2 + 131))
        v27 = 0;
      else
        v27 = v28;
    }
    while ((v27 & 1) != 0);
  }
}

void sub_20B187BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B187BE8(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B187C90(a2);
      break;
    case 1:
      sub_20B187E4C(a2);
      break;
    case 2:
      sub_20B188018(a2);
      break;
    case 3:
      sub_20B1881E8(a2);
      break;
    case 5:
      sub_20B1883B8(a2);
      break;
    case 6:
      sub_20B188574(a2);
      break;
    case 7:
      sub_20B188740(a2);
      break;
    case 8:
      sub_20B188910(a2);
      break;
    case 11:
      sub_20B188AE0(a2);
      break;
    case 12:
      sub_20B188CB0(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B187C90(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v4 = operator new(4 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20B513B4C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BC04(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B187DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B187E4C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20B513FE8(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BF48(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B187FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B188018(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20B514490(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C290(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B188188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1881E8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20B514DE0(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C5D8(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B188358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1883B8(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v4 = operator new(4 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20B513904(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BA64(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B188514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B188574(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20B513D94(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BDA4(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1886E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B188740(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20B51423C(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C0EC(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1888B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B188910(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20B514B8C(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C434(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B188A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B188AE0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20B5152B0(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C77C(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B188C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B188CB0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20B515504(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C920(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B188E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B188E80(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v25);
    sub_20B0D0A00((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v25);
  sub_20B0D0A00((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20AF4EA3C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0E2418((uint64_t)v25, a2, v4);
  sub_20B1892F4((uint64_t)v25, a2, v3 + 200);
}

void sub_20B1892AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1892F4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_20B42BA30(a2);
  sub_20B1893C4(a2, a3);
  v9 = a2[12];
  v10 = a2[9];
  a2[6] = *(_QWORD *)(v9 - 8) + *(_QWORD *)(v10 - 8) + 8;
  a2[9] = v10 - 8;
  a2[12] = v9 - 8;
}

void sub_20B1893B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1893C4(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[3];
  __int128 v11;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v4 = a1[3];
  v5 = *(unsigned __int8 *)(v4 + v2);
  v6 = v2 + 1;
  a1[6] = v6;
  *(_BYTE *)a2 = v5;
  v7 = v3 >= v6;
  v8 = v3 - v6;
  if (!v7)
    v8 = 0;
  if (v8 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v4 + v6);
  a1[6] += 8;
  v11 = xmmword_24C40DDE8;
  v10[0] = a2;
  v10[1] = a1;
  v10[2] = &v11;
  sub_20B1894C4(v5, v10);
}

void sub_20B18949C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1894B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1894C4(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B18956C(a2);
      break;
    case 1:
      sub_20B18978C(a2);
      break;
    case 2:
      sub_20B1899B4(a2);
      break;
    case 3:
      sub_20B189BE0(a2);
      break;
    case 5:
      sub_20B189E0C(a2);
      break;
    case 6:
      sub_20B18A02C(a2);
      break;
    case 7:
      sub_20B18A254(a2);
      break;
    case 8:
      sub_20B18A480(a2);
      break;
    case 11:
      sub_20B18A6AC(a2);
      break;
    case 12:
      sub_20B18A8D8(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B18956C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(4 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43BC04(v22, 0, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B18971C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B18978C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43BF48(v23, 1, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B189944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1899B4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C290(v23, 2, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B189B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B189BE0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C5D8(v23, 3, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B189D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B189E0C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(4 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43BA64(v22, 5, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B189FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B18A02C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43BDA4(v23, 6, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B18A1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B18A254(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C0EC(v23, 7, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B18A410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B18A480(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C434(v23, 8, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B18A63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B18A6AC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C77C(v23, 11, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B18A868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B18A8D8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C920(v23, 12, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B18AA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B18AB04(int *a1, _BYTE *a2, _BYTE *a3)
{
  int v5;
  int v7;
  unsigned int v8;
  __int128 *v9;
  _BYTE *v10[3];
  __int128 v11;

  v5 = *a1;
  if (*a1 == 2)
  {
    LODWORD(v10[0]) = 1;
    (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, v10);
    if (LODWORD(v10[0]) >= 2)
    {
      v8 = v10[0];
      v9 = sub_20B18AC04();
      sub_20B520518((std::string *)v9, v8, 1u);
    }
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
  v10[0] = a3;
  sub_20B103C34(a2, v10);
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
  v11 = xmmword_24C40DDE8;
  v7 = *a3;
  v10[0] = a3;
  v10[1] = a2;
  v10[2] = &v11;
  sub_20B18AFB4(v7, v10);
  if (v5 >= 1)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20B18AC04()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254636478);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254636478))
    return &xmmword_254636460;
  v2 = sub_20B18ACE0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254636460, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254636470 = v2->__r_.__value_.__r.__words[2];
    xmmword_254636460 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254636460, &dword_20AEBB000);
  __cxa_guard_release(&qword_254636478);
  return &xmmword_254636460;
}

void sub_20B18ACC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636478);
  _Unwind_Resume(a1);
}

std::string *sub_20B18ACE0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254636498);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254636498))
    return &stru_254636480;
  sub_20B18ADD0((uint64_t)__p);
  sub_20AF6D7B0((char *)__p, &stru_254636480);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254636480, &dword_20AEBB000);
  __cxa_guard_release(&qword_254636498);
  return &stru_254636480;
}

void sub_20B18AD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254636498);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254636498);
  _Unwind_Resume(a1);
}

void sub_20B18ADD0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546364B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546364B8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::LinesSample<2>]", qword_2546364A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546364A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546364B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2546364D8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2546364D8))
  {
    v5 = sub_20AED4780(qword_2546364A0, "<", 0);
    sub_20AED467C(qword_2546364A0, 0, v5, qword_2546364C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546364C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546364D8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546364F8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546364F8))
  {
    sub_20B531658((uint64_t)qword_2546364C0, (uint64_t)&xmmword_2546364E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546364E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546364F8);
  }
  if (byte_2546364F7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546364E0, *((unint64_t *)&xmmword_2546364E0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546364E0;
    *(_QWORD *)(a1 + 16) = unk_2546364F0;
  }
}

void sub_20B18AF6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546364F8);
  _Unwind_Resume(a1);
}

void sub_20B18AF84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546364D8);
  _Unwind_Resume(a1);
}

void sub_20B18AF9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546364B8);
  _Unwind_Resume(a1);
}

void sub_20B18AFB4(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B18B05C(a2);
      break;
    case 1:
      sub_20B18B204(a2);
      break;
    case 2:
      sub_20B18B3C0(a2);
      break;
    case 3:
      sub_20B18B580(a2);
      break;
    case 5:
      sub_20B18B740(a2);
      break;
    case 6:
      sub_20B18B8E8(a2);
      break;
    case 7:
      sub_20B18BAA4(a2);
      break;
    case 8:
      sub_20B18BC64(a2);
      break;
    case 11:
      sub_20B18BE24(a2);
      break;
    case 12:
      sub_20B18BFE4(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B18B05C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20B43BC04(v15, 0, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if ((*(_BYTE *)(v15[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B18B1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B18B204(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BF48(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B18B360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B18B3C0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C290(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B18B520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B18B580(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C5D8(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B18B6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B18B740(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20B43BA64(v15, 5, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if ((*(_BYTE *)(v15[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B18B888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B18B8E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BDA4(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B18BA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B18BAA4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C0EC(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B18BC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B18BC64(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C434(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B18BDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B18BE24(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C77C(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B18BF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B18BFE4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C920(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B18C144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B18C1A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24C3F6750;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(v4 + 72) = 1;
  }
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
  *(_BYTE *)(v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    *(_OWORD *)(v4 + 144) = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v6 = (unsigned __int128 *)(a1 + 176);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 176) = v7;
    *(_BYTE *)(v4 + 192) = 1;
  }
  *(_BYTE *)(v4 + 208) = 0;
  *(_BYTE *)(v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    *(_OWORD *)(v4 + 208) = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(v4 + 224) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_BYTE *)(v4 + 232) = 1;
  }
  *(_QWORD *)v4 = &off_24C3F66D0;
  *a2 = &off_24C411E78;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24C411F70;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20B18C33C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL sub_20B18C358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  _BOOL8 v14;
  _QWORD v16[5];
  uint64_t *v17;
  _BYTE *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  char v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[6];

  v36[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v31);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v31);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v31);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20B0C0D90(v6, (uint64_t)v25);
  }
  else if (v7 == 1)
  {
    sub_20B0F9F8C(v6, (uint64_t)v25);
  }
  else
  {
    if (v7)
      sub_20AECFAB8();
    sub_20B0C6034(v6, (uint64_t)v25);
  }
  v18 = v31;
  v19 = &v32;
  v20 = &v33;
  v21 = &v34;
  v22 = &v35;
  v23 = v36;
  v16[0] = v25;
  v16[1] = &v26;
  v16[2] = &v27;
  v16[3] = &v28;
  v16[4] = &v29;
  v17 = &v30;
  if (!sub_20B2178A8((uint64_t)&v24, &v18, v16))
    goto LABEL_26;
  if (!*((_BYTE *)v23 + 24) || !*((_BYTE *)v17 + 24))
  {
    if ((*((_BYTE *)v23 + 24) != 0) == (*((_BYTE *)v17 + 24) != 0))
      goto LABEL_22;
LABEL_26:
    v14 = 0;
    goto LABEL_27;
  }
  v8 = (unsigned __int8 *)*v23;
  v9 = (unsigned __int8 *)v23[1];
  v10 = (unsigned __int8 *)*v17;
  if (&v9[-*v23] != (unsigned __int8 *)(v17[1] - *v17))
    goto LABEL_26;
  if (v8 != v9)
  {
    while (sub_20B2167B8(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9)
        goto LABEL_22;
    }
    goto LABEL_26;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
    goto LABEL_26;
  if (*(_QWORD *)(a1 + 208) != *(_QWORD *)(a2 + 208))
    goto LABEL_26;
  v11 = *(unsigned __int8 **)(a1 + 216);
  v12 = *v11;
  v13 = *(unsigned __int8 **)(a2 + 216);
  if (v12 != *v13)
    goto LABEL_26;
  v18 = v16;
  v19 = (uint64_t *)v11;
  v20 = (uint64_t *)v13;
  v14 = sub_20B43E450(v12, (uint64_t)&v18);
LABEL_27:
  sub_20AF4EA3C((uint64_t)v25);
  sub_20AF4EA3C((uint64_t)v31);
  return v14;
}

void sub_20B18C580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a23);
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B18C59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B18C5B0(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EB80, 0);
  if (v4)
  {
    sub_20B18C9BC(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EBC8, 0);
    if (v5)
    {
      sub_20B18E28C(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC50, 0);
      if (v6)
      {
        sub_20B18EEC8(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC98, 0);
        if (v7)
        {
          sub_20B190798(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C2C8)
            sub_20B1911EC(&v9, (uint64_t)a1);
          else
            sub_20B18C714(&v8, a1);
        }
      }
    }
  }
}

void sub_20B18C714(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  __int128 *v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FF5BC((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20B0FF5BC((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FEF34((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20B0FEF34((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0D8514((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20B0D8514((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = (__int128 *)(v3 + 200);
  v13 = a2[2];
  v14 = 1;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20B191854(a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 1;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B191854(a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20B18C9BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FADD8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B50671C(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5086B4(a2, &v18);
      sub_20B0D1154(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FA468(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B50671C(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5086B4(a2, &v18);
  sub_20B18CCBC(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B18CCBC(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  void **v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  void **v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_20B0FBCB0(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = (void **)*((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_20B506370(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = (void **)*((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_20B4181DC(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "lines3";
    *v11 = 6;
    if (!v16)
      *v10 = 1;
  }
  sub_20B50671C(a1);
  sub_20B18CF1C(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20B18CEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20B4181DC(v13, a13);
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B18CF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_20B18CF1C(int a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **result;
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  switch(a1)
  {
    case 0:
      result = sub_20B18D044(v4);
      break;
    case 1:
      result = sub_20B18D218(v4);
      break;
    case 2:
      result = sub_20B18D3EC(v4);
      break;
    case 3:
      result = sub_20B18D5C0(v4);
      break;
    case 5:
      result = sub_20B18D794(v4);
      break;
    case 6:
      result = sub_20B18D968(v4);
      break;
    case 7:
      result = sub_20B18DB3C(v4);
      break;
    case 8:
      result = sub_20B18DD10(v4);
      break;
    case 11:
      result = sub_20B18DEE4(v4);
      break;
    case 12:
      result = sub_20B18E0B8(v4);
      break;
    default:
      sub_20B521E58(a1);
  }
  return result;
}

unsigned __int8 **sub_20B18D044(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  size_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 0);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 1;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) == 0;
  if (!v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_19;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B506898(v10, &v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 3;
      sub_20B506898(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 6;
      if (!--v6)
        return result;
    }
LABEL_19:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B506898(v7, &v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 3;
    sub_20B506898(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 6;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B18D218(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 1);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 2uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B509034(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 6;
      sub_20B509034(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 12;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B509034(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 6;
    sub_20B509034(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 12;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B18D3EC(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 2);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B5092A4(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 12;
      sub_20B5092A4(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 24;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B5092A4(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 12;
    sub_20B5092A4(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 24;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B18D5C0(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 3);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B509784(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 24;
      sub_20B509784(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 48;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B509784(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 24;
    sub_20B509784(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 48;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B18D794(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  size_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 5);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 1;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) == 0;
  if (!v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_19;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B508DC4(v10, &v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 3;
      sub_20B508DC4(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 6;
      if (!--v6)
        return result;
    }
LABEL_19:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B508DC4(v7, &v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 3;
    sub_20B508DC4(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 6;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B18D968(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 6);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 2uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B508EFC(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 6;
      sub_20B508EFC(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 12;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B508EFC(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 6;
    sub_20B508EFC(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 12;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B18DB3C(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 7);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B50916C(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 12;
      sub_20B50916C(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 24;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B50916C(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 12;
    sub_20B50916C(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 24;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B18DD10(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 8);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B50964C(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 24;
      sub_20B50964C(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 48;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B50964C(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 24;
    sub_20B50964C(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 48;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B18DEE4(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 11);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B509D64(v10, (float **)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 12;
      sub_20B509D64(v11, (float **)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 24;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B509D64(v7, (float **)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 12;
    sub_20B509D64(v8, (float **)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 24;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B18E0B8(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 12);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B50671C((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B50A184(v10, &v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 24;
      sub_20B50A184(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 48;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B50671C((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B50A184(v7, &v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 24;
    sub_20B50A184(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 48;
    --v6;
  }
  while (v6);
  return result;
}

void sub_20B18E28C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = a2[3];
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20B51E95C(&v20, 4u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v7 + 8);
    }
    sub_20B51956C(a2[3]);
    sub_20B0FBED4((uint64_t)a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = a2[3];
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20B51E95C(&v20, 5u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v8 + 8);
    }
    sub_20B51956C(a2[3]);
    sub_20B0FBDB8((uint64_t)a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[3];
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20B51E95C(&v20, 6u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v6 + 8);
    }
    sub_20B51956C(a2[3]);
    sub_20B0D3CE4((uint64_t)a2, v4, 6u);
  }
  v9 = a2[3];
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = a2[3];
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20B51E95C(&v20, 1u);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v20, v14 + 8);
  }
  sub_20B51956C(a2[3]);
  sub_20B18E50C(a2, (__int128 *)(v3 + 200));
  v15 = a2[3];
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20B18E50C(uint64_t *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14[3];
  __int128 v15;

  v11 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v12 = *((_QWORD *)a2 + 2);
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = a1[3];
  if (*(_BYTE *)(v6 + 40))
  {
    v14[0] = (uint64_t *)(v6 + 16);
    sub_20B51DD74(v14, v11);
  }
  else
  {
    if ((char)v11 < 0)
    {
      LOBYTE(v14[0]) = -52;
      BYTE1(v14[0]) = v11;
    }
    else
    {
      LOBYTE(v14[0]) = v11;
    }
    std::ostream::write();
  }
  v7 = a1[3];
  if (*(_BYTE *)(v7 + 40))
  {
    v14[0] = (uint64_t *)(v7 + 16);
    sub_20B51F33C(v14, *((unint64_t *)&v11 + 1));
  }
  else
  {
    sub_20B51F644();
  }
  v15 = xmmword_24C40DDF8;
  v14[0] = (uint64_t *)&v11;
  v14[1] = a1;
  v14[2] = (uint64_t *)&v15;
  sub_20B18E670(v11, v14);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20B18E65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B18E670(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 *v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  __int128 v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(char **)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (!v8)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v9 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v9 + 40))
      {
        for (*(_QWORD *)&v91 = v9 + 16; v7; --v7)
          result = (uint64_t)sub_20B51DD74((uint64_t **)&v91, *v6++);
      }
      else
      {
        for (; v7; --v7)
        {
          v78 = *v6;
          if (v78 < 0)
          {
            LOBYTE(v91) = -52;
            BYTE1(v91) = v78;
          }
          else
          {
            LOBYTE(v91) = *v6;
          }
          result = std::ostream::write();
          ++v6;
        }
      }
      break;
    case 1:
      v10 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 1);
      v11 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v11 + 40);
      v12 = *(_QWORD *)(v11 + 48);
      if (v12)
        v14 = 0;
      else
        v14 = v13 >= 2;
      if (v14
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_144;
      }
      v15 = a2[1];
      *(_QWORD *)&v91 = v13 >> 1;
      *((_QWORD *)&v91 + 1) = v12;
      result = sub_20B518234(*(_QWORD *)(v15 + 24), &v91);
      break;
    case 2:
      v16 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 2);
      v17 = *(_QWORD *)(v16 + 16);
      v19 = *(_QWORD *)(v17 + 40);
      v18 = *(unsigned int **)(v17 + 48);
      if (v18)
        v20 = 0;
      else
        v20 = v19 >= 4;
      if (v20)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v21 = v19 >> 2;
      v22 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v22 + 40))
      {
        *(_QWORD *)&v91 = v22 + 16;
        if (v19 >= 4)
        {
          v23 = 4 * v21;
          do
          {
            result = (uint64_t)sub_20B51E95C((uint64_t **)&v91, *v18++);
            v23 -= 4;
          }
          while (v23);
        }
      }
      else if (v19 >= 4)
      {
        v79 = v22 + 8;
        v80 = 4 * v21;
        do
        {
          result = sub_20B51EBD0((uint64_t)&v91, v79);
          ++v18;
          v80 -= 4;
        }
        while (v80);
      }
      break;
    case 3:
      v24 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 3);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(unint64_t **)(v25 + 48);
      if (v26)
        v28 = 0;
      else
        v28 = v27 >= 8;
      if (v28)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v29 = v27 >> 3;
      v30 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v30 + 40))
      {
        *(_QWORD *)&v91 = v30 + 16;
        if (v27 >= 8)
        {
          v31 = 8 * v29;
          do
          {
            result = (uint64_t)sub_20B51F33C((uint64_t **)&v91, *v26++);
            v31 -= 8;
          }
          while (v31);
        }
      }
      else if (v27 >= 8)
      {
        v81 = 8 * v29;
        do
        {
          ++v26;
          result = sub_20B51F644();
          v81 -= 8;
        }
        while (v81);
      }
      break;
    case 5:
      v32 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 5);
      v33 = *(_QWORD *)(v32 + 16);
      v35 = *(_QWORD *)(v33 + 40);
      v34 = *(_BYTE **)(v33 + 48);
      if (v34)
        v36 = 1;
      else
        v36 = v35 == 0;
      if (!v36)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v37 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v37 + 40))
      {
        for (*(_QWORD *)&v91 = v37 + 16; v35; --v35)
          result = (uint64_t)sub_20B51DC2C((uint64_t **)&v91, (char)*v34++);
      }
      else
      {
        for (; v35; --v35)
        {
          v82 = (char)*v34;
          if (v82 > -33)
          {
            LOBYTE(v91) = *v34;
          }
          else
          {
            LOBYTE(v91) = -48;
            BYTE1(v91) = v82;
          }
          result = std::ostream::write();
          ++v34;
        }
      }
      break;
    case 6:
      v38 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 6);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(__int16 **)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 2;
      if (v42)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v43 = v41 >> 1;
      v44 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v44 + 40))
      {
        *(_QWORD *)&v91 = v44 + 16;
        if (v41 >= 2)
        {
          v45 = 2 * v43;
          do
          {
            result = (uint64_t)sub_20B51DEB8((uint64_t **)&v91, *v40++);
            v45 -= 2;
          }
          while (v45);
        }
      }
      else if (v41 >= 2)
      {
        v83 = 2 * v43;
        do
        {
          ++v40;
          result = sub_20B51E17C();
          v83 -= 2;
        }
        while (v83);
      }
      break;
    case 7:
      v46 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 7);
      v47 = *(_QWORD *)(v46 + 16);
      v49 = *(_QWORD *)(v47 + 40);
      v48 = *(unsigned int **)(v47 + 48);
      if (v48)
        v50 = 0;
      else
        v50 = v49 >= 4;
      if (v50)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v51 = v49 >> 2;
      v52 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v52 + 40))
      {
        *(_QWORD *)&v91 = v52 + 16;
        if (v49 >= 4)
        {
          v53 = 4 * v51;
          do
          {
            result = (uint64_t)sub_20B51E444((uint64_t **)&v91, *v48++);
            v53 -= 4;
          }
          while (v53);
        }
      }
      else if (v49 >= 4)
      {
        v84 = 4 * v51;
        do
        {
          ++v48;
          result = sub_20B51E860();
          v84 -= 4;
        }
        while (v84);
      }
      break;
    case 8:
      v54 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 8);
      v55 = *(_QWORD *)(v54 + 16);
      v57 = *(_QWORD *)(v55 + 40);
      v56 = *(unint64_t **)(v55 + 48);
      if (v56)
        v58 = 0;
      else
        v58 = v57 >= 8;
      if (v58)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v59 = v57 >> 3;
      v60 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v60 + 40))
      {
        *(_QWORD *)&v91 = v60 + 16;
        if (v57 >= 8)
        {
          v61 = 8 * v59;
          do
          {
            result = (uint64_t)sub_20B51ECC0((uint64_t **)&v91, *v56++);
            v61 -= 8;
          }
          while (v61);
        }
      }
      else if (v57 >= 8)
      {
        v85 = 8 * v59;
        do
        {
          ++v56;
          result = sub_20B51F1FC();
          v85 -= 8;
        }
        while (v85);
      }
      break;
    case 11:
      v62 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 11);
      v63 = *(_QWORD *)(v62 + 16);
      v65 = *(_QWORD *)(v63 + 40);
      v64 = *(unsigned int **)(v63 + 48);
      if (v64)
        v66 = 0;
      else
        v66 = v65 >= 4;
      if (v66)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v67 = v65 >> 2;
      v68 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v68 + 40))
      {
        *(_QWORD *)&v91 = v68 + 16;
        if (v65 >= 4)
        {
          v69 = 4 * v67;
          do
          {
            result = (uint64_t)sub_20B51F73C((uint64_t)&v90, (uint64_t **)&v91, v64++);
            v69 -= 4;
          }
          while (v69);
        }
      }
      else if (v65 >= 4)
      {
        v86 = 4 * v67;
        do
        {
          v87 = *v64;
          LOBYTE(v91) = -54;
          *(_DWORD *)((char *)&v91 + 1) = bswap32(v87);
          result = std::ostream::write();
          ++v64;
          v86 -= 4;
        }
        while (v86);
      }
      break;
    case 12:
      v70 = *a2;
      result = (uint64_t)sub_20B43D624((unsigned __int8 **)(*a2 + 16), 12);
      v71 = *(_QWORD *)(v70 + 16);
      v73 = *(_QWORD *)(v71 + 40);
      v72 = *(unint64_t **)(v71 + 48);
      if (v72)
        v74 = 0;
      else
        v74 = v73 >= 8;
      if (v74)
      {
        result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
        if ((_DWORD)result)
LABEL_144:
          abort();
      }
      v75 = v73 >> 3;
      v76 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v76 + 40))
      {
        *(_QWORD *)&v91 = v76 + 16;
        if (v73 >= 8)
        {
          v77 = 8 * v75;
          do
          {
            result = (uint64_t)sub_20B51F818((uint64_t)&v90, (uint64_t **)&v91, v72++);
            v77 -= 8;
          }
          while (v77);
        }
      }
      else if (v73 >= 8)
      {
        v88 = 8 * v75;
        do
        {
          v89 = *v72;
          LOBYTE(v91) = -53;
          *(_QWORD *)((char *)&v91 + 1) = bswap64(v89);
          result = std::ostream::write();
          ++v72;
          v88 -= 8;
        }
        while (v88);
      }
      break;
    default:
      sub_20B521E58(a1);
  }
  return result;
}

void sub_20B18EEC8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FCF30(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B505FB0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5069D0(a2, &v18);
      sub_20B0D4F88(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FC7EC(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B505FB0(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5069D0(a2, &v18);
  sub_20B18F1C8(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B18F1C8(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  uint64_t v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_20B0FDBDC(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = *((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_20B505B08(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = *((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_20B416E08(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "lines3";
    *v11 = 6;
    if (!v16)
      *v10 = 1;
  }
  sub_20B505FB0(a1);
  sub_20B18F428(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20B18F3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_20B416E08(v13, a13);
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B18F414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_20B18F428(int a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **result;
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  switch(a1)
  {
    case 0:
      result = sub_20B18F550(v4);
      break;
    case 1:
      result = sub_20B18F724(v4);
      break;
    case 2:
      result = sub_20B18F8F8(v4);
      break;
    case 3:
      result = sub_20B18FACC(v4);
      break;
    case 5:
      result = sub_20B18FCA0(v4);
      break;
    case 6:
      result = sub_20B18FE74(v4);
      break;
    case 7:
      result = sub_20B190048(v4);
      break;
    case 8:
      result = sub_20B19021C(v4);
      break;
    case 11:
      result = sub_20B1903F0(v4);
      break;
    case 12:
      result = sub_20B1905C4(v4);
      break;
    default:
      sub_20B521E58(a1);
  }
  return result;
}

unsigned __int8 **sub_20B18F550(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  size_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 0);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 1;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) == 0;
  if (!v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_19;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B50612C(v10, &v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 3;
      sub_20B50612C(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 6;
      if (!--v6)
        return result;
    }
LABEL_19:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B50612C(v7, &v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 3;
    sub_20B50612C(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 6;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B18F724(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 1);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 2uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B507218(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 6;
      sub_20B507218(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 12;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B507218(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 6;
    sub_20B507218(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 12;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B18F8F8(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 2);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B507488(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 12;
      sub_20B507488(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 24;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B507488(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 12;
    sub_20B507488(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 24;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B18FACC(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 3);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B5076F8(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 24;
      sub_20B5076F8(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 48;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B5076F8(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 24;
    sub_20B5076F8(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 48;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B18FCA0(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  size_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 5);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 1;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) == 0;
  if (!v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_19;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B506FA8(v10, &v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 3;
      sub_20B506FA8(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 6;
      if (!--v6)
        return result;
    }
LABEL_19:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B506FA8(v7, &v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 3;
    sub_20B506FA8(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 6;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B18FE74(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 6);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 2uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B5070E0(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 6;
      sub_20B5070E0(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 12;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B5070E0(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 6;
    sub_20B5070E0(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 12;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B190048(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 7);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B507350(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 12;
      sub_20B507350(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 24;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B507350(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 12;
    sub_20B507350(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 24;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B19021C(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 8);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B5075C0(v10, (uint64_t)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 24;
      sub_20B5075C0(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 48;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B5075C0(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 24;
    sub_20B5075C0(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 48;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B1903F0(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 11);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B507CD8(v10, (float **)&v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 12;
      sub_20B507CD8(v11, (float **)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 24;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B507CD8(v7, (float **)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 12;
    sub_20B507CD8(v8, (float **)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 24;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20B1905C4(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_20B43D624((unsigned __int8 **)(*a1 + 16), 12);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_20B505FB0((uint64_t)result);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_20B5080F8(v10, &v13);
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 24;
      sub_20B5080F8(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 48;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_20B505FB0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_20B5080F8(v7, &v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 24;
    sub_20B5080F8(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 48;
    --v6;
  }
  while (v6);
  return result;
}

_QWORD *sub_20B190798(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FE288(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20AEC01D0(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20B0D66C4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FDCE4(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20AEC01D0(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20B1909B0(a2, (__int128 *)(v3 + 200));
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20AEC01D0(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20B1909B0(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD v13[3];
  __int128 v14;

  v10 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 2);
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(v13[0]) = v10;
  sub_20B512EB0(a1, (unsigned __int8 *)v13);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    LOBYTE(v13[0]) = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v6, (uint64_t)v13, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v14 = xmmword_24C40DDF8;
  v13[0] = &v10;
  v13[1] = a1;
  v13[2] = &v14;
  sub_20B190AD0(v10, v13);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20B190ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B190AD0(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v6 = *(_QWORD *)(v4 + 40);
      v5 = *(unsigned __int8 **)(v4 + 48);
      if (v5)
        v7 = 1;
      else
        v7 = v6 == 0;
      if (v7)
      {
        if (!v6)
          return;
        goto LABEL_65;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_65:
        v54 = a2[1];
        do
        {
          sub_20B512EB0(v54, v5++);
          --v6;
        }
        while (v6);
        return;
      }
      goto LABEL_112;
    case 1:
      v8 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 1);
      v9 = *(_QWORD *)(v8 + 16);
      v11 = *(_QWORD *)(v9 + 40);
      v10 = *(_QWORD *)(v9 + 48);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 2;
      if (!v12)
      {
        if (v11 < 2)
          return;
        goto LABEL_69;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_69:
        v55 = a2[1];
        v56 = *(_QWORD *)(v55 + 40);
        v57 = v11 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v56)
          {
            v58 = *(_QWORD **)(v55 + 24);
            v89 = *(_BYTE *)(v55 + 32);
            sub_20AEC01D0(v58, (uint64_t)&v89, 1);
          }
          v10 += 2;
          std::ostream::operator<<();
          v56 = *(_QWORD *)(v55 + 40) + 1;
          *(_QWORD *)(v55 + 40) = v56;
          v57 -= 2;
        }
        while (v57);
        return;
      }
      goto LABEL_112;
    case 2:
      v13 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 2);
      v14 = *(_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v14 + 40);
      v15 = *(_QWORD *)(v14 + 48);
      if (v15)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
      {
        if (v16 < 4)
          return;
        goto LABEL_74;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_74:
        v59 = a2[1];
        v60 = *(_QWORD *)(v59 + 40);
        v61 = v16 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v60)
          {
            v62 = *(_QWORD **)(v59 + 24);
            v90 = *(_BYTE *)(v59 + 32);
            sub_20AEC01D0(v62, (uint64_t)&v90, 1);
          }
          v15 += 4;
          std::ostream::operator<<();
          v60 = *(_QWORD *)(v59 + 40) + 1;
          *(_QWORD *)(v59 + 40) = v60;
          v61 -= 4;
        }
        while (v61);
        return;
      }
      goto LABEL_112;
    case 3:
      v18 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v21 = *(_QWORD *)(v19 + 40);
      v20 = *(_QWORD *)(v19 + 48);
      if (v20)
        v22 = 0;
      else
        v22 = v21 >= 8;
      if (!v22)
      {
        if (v21 < 8)
          return;
        goto LABEL_79;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_79:
        v63 = a2[1];
        v64 = *(_QWORD *)(v63 + 40);
        v65 = v21 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v64)
          {
            v66 = *(_QWORD **)(v63 + 24);
            v91 = *(_BYTE *)(v63 + 32);
            sub_20AEC01D0(v66, (uint64_t)&v91, 1);
          }
          v20 += 8;
          std::ostream::operator<<();
          v64 = *(_QWORD *)(v63 + 40) + 1;
          *(_QWORD *)(v63 + 40) = v64;
          v65 -= 8;
        }
        while (v65);
        return;
      }
      goto LABEL_112;
    case 5:
      v23 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 5);
      v24 = *(_QWORD *)(v23 + 16);
      v26 = *(_QWORD *)(v24 + 40);
      v25 = *(char **)(v24 + 48);
      if (v25)
        v27 = 1;
      else
        v27 = v26 == 0;
      if (v27)
      {
        if (!v26)
          return;
        goto LABEL_84;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_84:
        v68 = a2[1];
        do
        {
          sub_20B512CCC(v68, v25++);
          --v26;
        }
        while (v26);
        return;
      }
      goto LABEL_112;
    case 6:
      v28 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 6);
      v29 = *(_QWORD *)(v28 + 16);
      v31 = *(_QWORD *)(v29 + 40);
      v30 = *(_QWORD *)(v29 + 48);
      if (v30)
        v32 = 0;
      else
        v32 = v31 >= 2;
      if (!v32)
      {
        if (v31 < 2)
          return;
        goto LABEL_88;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_88:
        v69 = a2[1];
        v70 = *(_QWORD *)(v69 + 40);
        v71 = v31 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v70)
          {
            v72 = *(_QWORD **)(v69 + 24);
            v92 = *(_BYTE *)(v69 + 32);
            sub_20AEC01D0(v72, (uint64_t)&v92, 1);
          }
          v30 += 2;
          std::ostream::operator<<();
          v70 = *(_QWORD *)(v69 + 40) + 1;
          *(_QWORD *)(v69 + 40) = v70;
          v71 -= 2;
        }
        while (v71);
        return;
      }
      goto LABEL_112;
    case 7:
      v33 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 7);
      v34 = *(_QWORD *)(v33 + 16);
      v36 = *(_QWORD *)(v34 + 40);
      v35 = *(_QWORD *)(v34 + 48);
      if (v35)
        v37 = 0;
      else
        v37 = v36 >= 4;
      if (!v37)
      {
        if (v36 < 4)
          return;
        goto LABEL_93;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_93:
        v73 = a2[1];
        v74 = *(_QWORD *)(v73 + 40);
        v75 = v36 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v74)
          {
            v76 = *(_QWORD **)(v73 + 24);
            v93 = *(_BYTE *)(v73 + 32);
            sub_20AEC01D0(v76, (uint64_t)&v93, 1);
          }
          v35 += 4;
          std::ostream::operator<<();
          v74 = *(_QWORD *)(v73 + 40) + 1;
          *(_QWORD *)(v73 + 40) = v74;
          v75 -= 4;
        }
        while (v75);
        return;
      }
      goto LABEL_112;
    case 8:
      v38 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 8);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(_QWORD *)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 8;
      if (!v42)
      {
        if (v41 < 8)
          return;
        goto LABEL_98;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_98:
        v77 = a2[1];
        v78 = *(_QWORD *)(v77 + 40);
        v79 = v41 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v78)
          {
            v80 = *(_QWORD **)(v77 + 24);
            v94 = *(_BYTE *)(v77 + 32);
            sub_20AEC01D0(v80, (uint64_t)&v94, 1);
          }
          v40 += 8;
          std::ostream::operator<<();
          v78 = *(_QWORD *)(v77 + 40) + 1;
          *(_QWORD *)(v77 + 40) = v78;
          v79 -= 8;
        }
        while (v79);
        return;
      }
      goto LABEL_112;
    case 11:
      v43 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 11);
      v44 = *(_QWORD *)(v43 + 16);
      v46 = *(_QWORD *)(v44 + 40);
      v45 = *(_QWORD *)(v44 + 48);
      if (v45)
        v47 = 0;
      else
        v47 = v46 >= 4;
      if (!v47)
      {
        if (v46 < 4)
          return;
        goto LABEL_103;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_103:
        v81 = a2[1];
        v82 = *(_QWORD *)(v81 + 40);
        v83 = v46 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v82)
          {
            v84 = *(_QWORD **)(v81 + 24);
            v95 = *(_BYTE *)(v81 + 32);
            sub_20AEC01D0(v84, (uint64_t)&v95, 1);
          }
          *(_QWORD *)(*(_QWORD *)(v81 + 24) + *(_QWORD *)(**(_QWORD **)(v81 + 24) - 24) + 16) = 9;
          v45 += 4;
          std::ostream::operator<<();
          v82 = *(_QWORD *)(v81 + 40) + 1;
          *(_QWORD *)(v81 + 40) = v82;
          v83 -= 4;
        }
        while (v83);
        return;
      }
      goto LABEL_112;
    case 12:
      v48 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 12);
      v49 = *(_QWORD *)(v48 + 16);
      v51 = *(_QWORD *)(v49 + 40);
      v50 = *(_QWORD *)(v49 + 48);
      if (v50)
        v52 = 0;
      else
        v52 = v51 >= 8;
      if (v52)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
        {
LABEL_112:
          abort();
        }
      }
      else if (v51 < 8)
      {
        return;
      }
      v85 = a2[1];
      v86 = *(_QWORD *)(v85 + 40);
      v87 = v51 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        if (v86)
        {
          v88 = *(_QWORD **)(v85 + 24);
          v96 = *(_BYTE *)(v85 + 32);
          sub_20AEC01D0(v88, (uint64_t)&v96, 1);
        }
        *(_QWORD *)(*(_QWORD *)(v85 + 24) + *(_QWORD *)(**(_QWORD **)(v85 + 24) - 24) + 16) = 17;
        v50 += 8;
        std::ostream::operator<<();
        v86 = *(_QWORD *)(v85 + 40) + 1;
        *(_QWORD *)(v85 + 40) = v86;
        v87 -= 8;
      }
      while (v87);
      return;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B1911EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE9C0(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE8A4(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    __src = 6;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0D757C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 1;
  sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_20B42B554((_QWORD *)a2);
  sub_20B1913A4(a2, (__int128 *)(v3 + 200));
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20B1913A4(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD __src[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(__src[0]) = v9;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)__src, (char *)__src + 1, 1);
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&v9 + 8, (char *)&v10, 8);
  v13 = xmmword_24C40DDF8;
  __src[0] = &v9;
  __src[1] = a1;
  __src[2] = &v13;
  sub_20B1914C8(v9, __src);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20B1914B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20B1914C8(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  char *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  char *result;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v4 + 40);
      v6 = *(char **)(v4 + 48);
      if (v6)
        v7 = 1;
      else
        v7 = v5 == 0;
      if (!v7)
        goto LABEL_27;
      goto LABEL_7;
    case 1:
      v9 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(char **)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
        goto LABEL_37;
      goto LABEL_36;
    case 2:
      v14 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v15 + 40);
      v11 = *(char **)(v15 + 48);
      if (v11)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
        goto LABEL_59;
      goto LABEL_58;
    case 3:
      v18 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v19 + 40);
      v11 = *(char **)(v19 + 48);
      if (v11)
        v21 = 0;
      else
        v21 = v20 >= 8;
      if (!v21)
        goto LABEL_71;
      goto LABEL_70;
    case 5:
      v22 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 5);
      v23 = *(_QWORD *)(v22 + 16);
      v5 = *(_QWORD *)(v23 + 40);
      v6 = *(char **)(v23 + 48);
      if (v6)
        v24 = 1;
      else
        v24 = v5 == 0;
      if (v24)
      {
LABEL_7:
        v8 = a2[1];
      }
      else
      {
LABEL_27:
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360)|| (v8 = a2[1], sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)))
        {
LABEL_77:
          abort();
        }
      }
      result = sub_20B42DB24(v8 + 24, *(char **)(v8 + 32), v6, &v6[v5], v5);
      break;
    case 6:
      v25 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 6);
      v26 = *(_QWORD *)(v25 + 16);
      v12 = *(_QWORD *)(v26 + 40);
      v11 = *(char **)(v26 + 48);
      if (v11)
        v27 = 0;
      else
        v27 = v12 >= 2;
      if (!v27)
        goto LABEL_37;
LABEL_36:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
LABEL_37:
      v28 = v12 & 0xFFFFFFFFFFFFFFFELL;
      v29 = a2[1];
      if (v11)
        v30 = 1;
      else
        v30 = v28 == 0;
      if (!v30)
        goto LABEL_75;
      goto LABEL_76;
    case 7:
      v31 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 7);
      v32 = *(_QWORD *)(v31 + 16);
      v16 = *(_QWORD *)(v32 + 40);
      v11 = *(char **)(v32 + 48);
      if (v11)
        v33 = 0;
      else
        v33 = v16 >= 4;
      if (!v33)
        goto LABEL_59;
      goto LABEL_58;
    case 8:
      v34 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 8);
      v35 = *(_QWORD *)(v34 + 16);
      v20 = *(_QWORD *)(v35 + 40);
      v11 = *(char **)(v35 + 48);
      if (v11)
        v36 = 0;
      else
        v36 = v20 >= 8;
      if (!v36)
        goto LABEL_71;
      goto LABEL_70;
    case 11:
      v37 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 11);
      v38 = *(_QWORD *)(v37 + 16);
      v16 = *(_QWORD *)(v38 + 40);
      v11 = *(char **)(v38 + 48);
      if (v11)
        v39 = 0;
      else
        v39 = v16 >= 4;
      if (!v39)
        goto LABEL_59;
LABEL_58:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
LABEL_59:
      v28 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      v29 = a2[1];
      if (v11)
        v40 = 1;
      else
        v40 = v28 == 0;
      if (!v40)
        goto LABEL_75;
      goto LABEL_76;
    case 12:
      v41 = *a2;
      sub_20B43D624((unsigned __int8 **)(*a2 + 16), 12);
      v42 = *(_QWORD *)(v41 + 16);
      v20 = *(_QWORD *)(v42 + 40);
      v11 = *(char **)(v42 + 48);
      if (v11)
        v43 = 0;
      else
        v43 = v20 >= 8;
      if (!v43)
        goto LABEL_71;
LABEL_70:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
LABEL_71:
      v28 = v20 & 0xFFFFFFFFFFFFFFF8;
      v29 = a2[1];
      if (v11)
        v44 = 1;
      else
        v44 = v28 == 0;
      if (v44)
        goto LABEL_76;
LABEL_75:
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_77;
      }
LABEL_76:
      result = sub_20B42DB24(v29 + 24, *(char **)(v29 + 32), v11, &v11[v28], v28);
      break;
    default:
      sub_20B521E58(a1);
  }
  return result;
}

void sub_20B191854(_BYTE *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _BYTE *v12[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v12[0] = &v9;
  sub_20B0FFA54(a1, v12);
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 120))(a1, (char *)&v9 + 8);
  v13 = xmmword_24C40DDF8;
  v12[0] = &v9;
  v12[1] = a1;
  v12[2] = &v13;
  sub_20B191950(v9, v12);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20B19193C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CE38C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_20B191950(int a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned __int8 **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(_QWORD *)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (v8)
      {
        if (!v7)
          return result;
        goto LABEL_65;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_65:
        v55 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 80))(v55, v6++);
          --v7;
        }
        while (v7);
        return result;
      }
      goto LABEL_104;
    case 1:
      v9 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
      {
        if (v12 < 2)
          return result;
        goto LABEL_69;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_69:
        v56 = a2[1];
        v57 = v12 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 96))(v56, v11);
          v11 += 2;
          v57 -= 2;
        }
        while (v57);
        return result;
      }
      goto LABEL_104;
    case 2:
      v14 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v17 = *(_QWORD *)(v15 + 40);
      v16 = *(_QWORD *)(v15 + 48);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (!v18)
      {
        if (v17 < 4)
          return result;
        goto LABEL_73;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_73:
        v58 = a2[1];
        v59 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 104))(v58, v16);
          v16 += 4;
          v59 -= 4;
        }
        while (v59);
        return result;
      }
      goto LABEL_104;
    case 3:
      v19 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 3);
      v20 = *(_QWORD *)(v19 + 16);
      v22 = *(_QWORD *)(v20 + 40);
      v21 = *(_QWORD *)(v20 + 48);
      if (v21)
        v23 = 0;
      else
        v23 = v22 >= 8;
      if (!v23)
      {
        if (v22 < 8)
          return result;
        goto LABEL_77;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_77:
        v60 = a2[1];
        v61 = v22 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 120))(v60, v21);
          v21 += 8;
          v61 -= 8;
        }
        while (v61);
        return result;
      }
      goto LABEL_104;
    case 5:
      v24 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 5);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
        v28 = 1;
      else
        v28 = v27 == 0;
      if (v28)
      {
        if (!v27)
          return result;
        goto LABEL_81;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_81:
        v63 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 88))(v63, v26++);
          --v27;
        }
        while (v27);
        return result;
      }
      goto LABEL_104;
    case 6:
      v29 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 6);
      v30 = *(_QWORD *)(v29 + 16);
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 2;
      if (!v33)
      {
        if (v32 < 2)
          return result;
        goto LABEL_85;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_85:
        v64 = a2[1];
        v65 = v32 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 48))(v64, v31);
          v31 += 2;
          v65 -= 2;
        }
        while (v65);
        return result;
      }
      goto LABEL_104;
    case 7:
      v34 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 7);
      v35 = *(_QWORD *)(v34 + 16);
      v37 = *(_QWORD *)(v35 + 40);
      v36 = *(_QWORD *)(v35 + 48);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (!v38)
      {
        if (v37 < 4)
          return result;
        goto LABEL_89;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_89:
        v66 = a2[1];
        v67 = v37 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 56))(v66, v36);
          v36 += 4;
          v67 -= 4;
        }
        while (v67);
        return result;
      }
      goto LABEL_104;
    case 8:
      v39 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 8);
      v40 = *(_QWORD *)(v39 + 16);
      v42 = *(_QWORD *)(v40 + 40);
      v41 = *(_QWORD *)(v40 + 48);
      if (v41)
        v43 = 0;
      else
        v43 = v42 >= 8;
      if (!v43)
      {
        if (v42 < 8)
          return result;
        goto LABEL_93;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_93:
        v68 = a2[1];
        v69 = v42 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 72))(v68, v41);
          v41 += 8;
          v69 -= 8;
        }
        while (v69);
        return result;
      }
      goto LABEL_104;
    case 11:
      v44 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 11);
      v45 = *(_QWORD *)(v44 + 16);
      v47 = *(_QWORD *)(v45 + 40);
      v46 = *(_QWORD *)(v45 + 48);
      if (v46)
        v48 = 0;
      else
        v48 = v47 >= 4;
      if (!v48)
      {
        if (v47 < 4)
          return result;
        goto LABEL_97;
      }
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_97:
        v70 = a2[1];
        v71 = v47 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 128))(v70, v46);
          v46 += 4;
          v71 -= 4;
        }
        while (v71);
        return result;
      }
      goto LABEL_104;
    case 12:
      v49 = *a2;
      result = sub_20B43D624((unsigned __int8 **)(*a2 + 16), 12);
      v50 = *(_QWORD *)(v49 + 16);
      v52 = *(_QWORD *)(v50 + 40);
      v51 = *(_QWORD *)(v50 + 48);
      if (v51)
        v53 = 0;
      else
        v53 = v52 >= 8;
      if (v53)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
        {
LABEL_104:
          abort();
        }
      }
      else if (v52 < 8)
      {
        return result;
      }
      v72 = a2[1];
      v73 = v52 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 136))(v72, v51);
        v51 += 8;
        v73 -= 8;
      }
      while (v73);
      return result;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B191F2C(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED20, 0);
  if (v4)
  {
    sub_20B1925E0(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED58, 0);
    if (v5)
    {
      sub_20B194B08(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EDE0, 0);
      if (v6)
      {
        sub_20B19647C(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EE18, 0);
        if (v7)
        {
          sub_20B1989A4(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C508)
            sub_20B19A3F0(&v9, a1);
          else
            sub_20B192090(&v8, (uint64_t)a1);
        }
      }
    }
  }
}

void sub_20B192090(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  _BYTE *v30[26];
  _BYTE v31[24];
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 __p;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v30);
    sub_20B0D0A00((uint64_t)v31, (uint64_t *)v30);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v31);
        if (!v45)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(uint64_t *, uint64_t))*(&off_24C40DC18 + v6))(&v29, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v31[8];
    *(_BYTE *)(v3 + 64) = 0;
    if (v34)
    {
      v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(_QWORD *)(v3 + 56) = v8;
      v32 = 0uLL;
      v33 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v36;
    v10 = v35;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v39)
    {
      v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(_QWORD *)(v3 + 112) = v11;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v42)
    {
      v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(_QWORD *)(v3 + 144) = v12;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = __p;
      *(_QWORD *)(v3 + 176) = v44;
      __p = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = __p;
    if (!(_QWORD)__p)
      goto LABEL_46;
    v15 = *((_QWORD *)&__p + 1);
    v16 = (void *)__p;
    if (*((_QWORD *)&__p + 1) == (_QWORD)__p)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)__p;
LABEL_45:
    *((_QWORD *)&__p + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v30);
  sub_20B0D0A00((uint64_t)v31, (uint64_t *)v30);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(uint64_t *, uint64_t))*(&off_24C40DC18 + v7))(&v29, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v31[8];
    *(_BYTE *)(v3 + 64) = 0;
    if (v34)
    {
      v17 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(_QWORD *)(v3 + 56) = v17;
      v32 = 0uLL;
      v33 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v36;
    v19 = v35;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v39)
    {
      v20 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(_QWORD *)(v3 + 112) = v20;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v42)
    {
      v21 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(_QWORD *)(v3 + 144) = v21;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = __p;
      *(_QWORD *)(v3 + 176) = v44;
      __p = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v31);
  if (v45)
  {
LABEL_38:
    v14 = __p;
    if (!(_QWORD)__p)
      goto LABEL_46;
    v23 = *((_QWORD *)&__p + 1);
    v16 = (void *)__p;
    if (*((_QWORD *)&__p + 1) == (_QWORD)__p)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v34 && SHIBYTE(v33) < 0)
    operator delete((void *)v32);
  sub_20AF4EA3C((uint64_t)v30);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(_QWORD *)a2;
  v30[0] = *(_BYTE **)(a2 + 8);
  v25 = (int)v30[0];
  *(_DWORD *)v31 = 6;
  (*(void (**)(uint64_t, _BYTE *))(v24 + 104))(a2, v31);
  if (v25 < 1)
  {
    if (*(_DWORD *)v31 < 3u)
      sub_20B0E41CC((uint64_t)v31, a2, v4, *(unsigned int *)v31);
    else
      sub_20B0E4440(a2, v4, *(unsigned int *)v31);
  }
  else
  {
    sub_20B0E3BD4((int *)v30, a2, v4, *(unsigned int *)v31);
  }
  v26 = *(_QWORD *)a2;
  v29 = *(_QWORD *)(a2 + 8);
  v27 = v29;
  LODWORD(v30[0]) = 1;
  (*(void (**)(uint64_t, _BYTE **))(v26 + 104))(a2, v30);
  if (v27 < 1)
  {
    v30[0] = (_BYTE *)(v3 + 200);
    sub_20B103C34((_BYTE *)a2, v30);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, v3 + 208);
    *(_OWORD *)v31 = xmmword_24C40DDF8;
    v28 = *(unsigned __int8 *)(v3 + 200);
    v30[0] = (_BYTE *)(v3 + 200);
    v30[1] = (_BYTE *)a2;
    v30[2] = v31;
    sub_20B19C684(v28, v30);
  }
  else
  {
    sub_20B19C1D4((int *)&v29, (_BYTE *)a2, (_BYTE *)(v3 + 200));
  }
}

void sub_20B192598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1925E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v27);
    sub_20B0D0A00((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v27);
  sub_20B0D0A00((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20AF4EA3C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0D978C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B192A90((uint64_t)v27, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20B192A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B192A90(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  char *v6;
  int v7;
  int v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  _BYTE *v14;

  sub_20B50AC94(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_20B4552C4(v6, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v14 = a3;
  sub_20B1002E8((uint64_t *)a2, &v14);
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  v9 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_20B4552C4(v9, &v14);
  *((_QWORD *)a3 + 1) = v14;
  v10 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "lines3";
  *(_QWORD *)(a2 + 96) = 6;
  if (!v10)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50AC94(a2);
  sub_20B192C20(*a3, (uint64_t)a3, a2);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 16);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 16);
  *(_QWORD *)(a2 + 48) = v11 - 16;
  *(_QWORD *)(a2 + 72) = v12 - 16;
}

void sub_20B192C20(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B192D48(v3);
      break;
    case 1:
      sub_20B193020(v3);
      break;
    case 2:
      sub_20B193308(v3);
      break;
    case 3:
      sub_20B1935F4(v3);
      break;
    case 5:
      sub_20B193950(v3);
      break;
    case 6:
      sub_20B193C28(v3);
      break;
    case 7:
      sub_20B193F10(v3);
      break;
    case 8:
      sub_20B1941FC(v3);
      break;
    case 11:
      sub_20B194558(v3);
      break;
    case 12:
      sub_20B194830(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B192D48(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(6 * v2);
    v5 = &v4[v3];
    __p = v4;
    v22 = &v4[v3];
    bzero(v4, 6 * v2);
    v21 = v5;
  }
  if (v2)
  {
    v6 = (_QWORD *)a1[1];
    v7 = 3;
    do
    {
      sub_20B50AC94((uint64_t)v6);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v8 = (uint64_t *)a1[1], v23 = 3, v24 = (char *)__p + v7 - 3, v9 = (char *)sub_20B50AF4C(v8), ++v8[14], sub_20B50B064(v9, (uint64_t)&v23), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v10 = (uint64_t *)a1[1];
      v23 = 3;
      v24 = (char *)__p + v7;
      v11 = (char *)sub_20B50AF4C(v10);
      ++v10[14];
      sub_20B50B064(v11, (uint64_t)&v23);
      v6 = (_QWORD *)a1[1];
      v12 = v6[6];
      v6[4] = *(_QWORD *)(v12 - 8);
      v13 = v6[9];
      v6[14] = *(_QWORD *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20B43BC04(&v23, 0, (uint64_t)&__p);
  v15 = v23;
  v14 = v24;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v16 = *a1;
  v17 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v14;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20B192FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B193020(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (6 * v2)
  {
    if (6 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(12 * v2);
    v19 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 6;
    do
    {
      sub_20B50AC94((uint64_t)v3);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v5 = (uint64_t *)a1[1], v20 = 3, v21 = (char *)__p + v4 - 6, v6 = (char *)sub_20B50AF4C(v5), ++v5[14], sub_20B50BE9C(v6, (uint64_t)&v20), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 3;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_20B50AF4C(v7);
      ++v7[14];
      sub_20B50BE9C(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20B43BF48(&v20, 1, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v20 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20B1932A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B193308(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(24 * v2);
    v19 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 12;
    do
    {
      sub_20B50AC94((uint64_t)v3);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v5 = (uint64_t *)a1[1], v20 = 3, v21 = (char *)__p + v4 - 12, v6 = (char *)sub_20B50AF4C(v5), ++v5[14], sub_20B50C014(v6, (uint64_t)&v20), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 3;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_20B50AF4C(v7);
      ++v7[14];
      sub_20B50C014(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20B43C290(&v20, 2, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v20 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20B19358C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1935F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  const void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*a1 + 8);
  v22 = 0;
  v23 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(48 * v2);
    v23 = (char *)__p + 48 * v2;
    bzero(__p, 48 * v2);
    v22 = v23;
  }
  if (v2)
  {
    v3 = 0;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_20B50AC94((uint64_t)v4);
      v7 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_29;
      }
      v8 = (uint64_t *)a1[1];
      v9 = (char *)sub_20B50AF4C(v8);
      ++v8[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_20B50E45C(v9, (uint64_t)&v24);
      v10 = v24;
      if (v25 != v24)
      {
        memmove(&v7[v3], v24, v25 - v24);
        v10 = v24;
      }
      if (v10)
      {
        v25 = v10;
        operator delete(v10);
      }
      v11 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
LABEL_29:
        abort();
      }
      v12 = (uint64_t *)a1[1];
      v13 = (char *)sub_20B50AF4C(v12);
      ++v12[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_20B50E45C(v13, (uint64_t)&v24);
      v14 = v24;
      if (v25 != v24)
      {
        memmove(&v11[v3 + 24], v24, v25 - v24);
        v14 = v24;
      }
      if (v14)
      {
        v25 = v14;
        operator delete(v14);
      }
      v4 = (_QWORD *)a1[1];
      v5 = v4[6];
      v4[4] = *(_QWORD *)(v5 - 8);
      v6 = v4[9];
      v4[14] = *(_QWORD *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  sub_20B43C5D8(&v24, 3, (uint64_t)&__p);
  v16 = v24;
  v15 = v25;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v24 + 7), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v17 = *a1;
  v18 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v15;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20B1938CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B193950(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(6 * v2);
    v5 = &v4[v3];
    __p = v4;
    v22 = &v4[v3];
    bzero(v4, 6 * v2);
    v21 = v5;
  }
  if (v2)
  {
    v6 = (_QWORD *)a1[1];
    v7 = 3;
    do
    {
      sub_20B50AC94((uint64_t)v6);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v8 = (uint64_t *)a1[1], v23 = 3, v24 = (char *)__p + v7 - 3, v9 = (char *)sub_20B50AF4C(v8), ++v8[14], sub_20B50BCBC(v9, (uint64_t)&v23), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v10 = (uint64_t *)a1[1];
      v23 = 3;
      v24 = (char *)__p + v7;
      v11 = (char *)sub_20B50AF4C(v10);
      ++v10[14];
      sub_20B50BCBC(v11, (uint64_t)&v23);
      v6 = (_QWORD *)a1[1];
      v12 = v6[6];
      v6[4] = *(_QWORD *)(v12 - 8);
      v13 = v6[9];
      v6[14] = *(_QWORD *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20B43BA64(&v23, 5, (uint64_t)&__p);
  v15 = v23;
  v14 = v24;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v16 = *a1;
  v17 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v14;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20B193BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B193C28(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (6 * v2)
  {
    if (6 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(12 * v2);
    v19 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 6;
    do
    {
      sub_20B50AC94((uint64_t)v3);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v5 = (uint64_t *)a1[1], v20 = 3, v21 = (char *)__p + v4 - 6, v6 = (char *)sub_20B50AF4C(v5), ++v5[14], sub_20B50BDAC(v6, (uint64_t)&v20), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 3;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_20B50AF4C(v7);
      ++v7[14];
      sub_20B50BDAC(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20B43BDA4(&v20, 6, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v20 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20B193EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B193F10(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(24 * v2);
    v19 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 12;
    do
    {
      sub_20B50AC94((uint64_t)v3);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v5 = (uint64_t *)a1[1], v20 = 3, v21 = (char *)__p + v4 - 12, v6 = (char *)sub_20B50AF4C(v5), ++v5[14], sub_20B50BF58(v6, (uint64_t)&v20), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 3;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_20B50AF4C(v7);
      ++v7[14];
      sub_20B50BF58(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20B43C0EC(&v20, 7, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v20 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20B194194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1941FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  const void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*a1 + 8);
  v22 = 0;
  v23 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(48 * v2);
    v23 = (char *)__p + 48 * v2;
    bzero(__p, 48 * v2);
    v22 = v23;
  }
  if (v2)
  {
    v3 = 0;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_20B50AC94((uint64_t)v4);
      v7 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_29;
      }
      v8 = (uint64_t *)a1[1];
      v9 = (char *)sub_20B50AF4C(v8);
      ++v8[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_20B50E120(v9, (uint64_t)&v24);
      v10 = v24;
      if (v25 != v24)
      {
        memmove(&v7[v3], v24, v25 - v24);
        v10 = v24;
      }
      if (v10)
      {
        v25 = v10;
        operator delete(v10);
      }
      v11 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
LABEL_29:
        abort();
      }
      v12 = (uint64_t *)a1[1];
      v13 = (char *)sub_20B50AF4C(v12);
      ++v12[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_20B50E120(v13, (uint64_t)&v24);
      v14 = v24;
      if (v25 != v24)
      {
        memmove(&v11[v3 + 24], v24, v25 - v24);
        v14 = v24;
      }
      if (v14)
      {
        v25 = v14;
        operator delete(v14);
      }
      v4 = (_QWORD *)a1[1];
      v5 = v4[6];
      v4[4] = *(_QWORD *)(v5 - 8);
      v6 = v4[9];
      v4[14] = *(_QWORD *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  sub_20B43C434(&v24, 8, (uint64_t)&__p);
  v16 = v24;
  v15 = v25;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v24 + 7), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v17 = *a1;
  v18 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v15;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20B1944D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B194558(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  void *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(24 * v2);
    v21 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v20 = v21;
  }
  if (v2)
  {
    v3 = 12;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_20B50AC94((uint64_t)v4);
      v5 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v6 = (uint64_t *)a1[1], v7 = sub_20B50AF4C(v6), ++v6[14], sub_20B50C420(v7, (float *)&v5[v3 - 12]), (v8 = (char *)__p) == 0)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v9 = (uint64_t *)a1[1];
      v10 = sub_20B50AF4C(v9);
      ++v9[14];
      sub_20B50C420(v10, (float *)&v8[v3]);
      v4 = (_QWORD *)a1[1];
      v11 = v4[6];
      v4[4] = *(_QWORD *)(v11 - 8);
      v12 = v4[9];
      v4[14] = *(_QWORD *)(v12 - 8);
      v4[6] = v11 - 8;
      v4[9] = v12 - 8;
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20B43C77C(v22, 11, (uint64_t)&__p);
  v14 = v22[0];
  v13 = v22[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_20B1947C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B194830(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  void *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(48 * v2);
    v21 = (char *)__p + 48 * v2;
    bzero(__p, 48 * v2);
    v20 = v21;
  }
  if (v2)
  {
    v3 = 24;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_20B50AC94((uint64_t)v4);
      v5 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v6 = (uint64_t *)a1[1], v7 = sub_20B50AF4C(v6), ++v6[14], sub_20B50C528(v7, (double *)&v5[v3 - 24]), (v8 = (char *)__p) == 0)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v9 = (uint64_t *)a1[1];
      v10 = sub_20B50AF4C(v9);
      ++v9[14];
      sub_20B50C528(v10, (double *)&v8[v3]);
      v4 = (_QWORD *)a1[1];
      v11 = v4[6];
      v4[4] = *(_QWORD *)(v11 - 8);
      v12 = v4[9];
      v4[14] = *(_QWORD *)(v12 - 8);
      v4[6] = v11 - 8;
      v4[9] = v12 - 8;
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  sub_20B43C920(v22, 12, (uint64_t)&__p);
  v14 = v22[0];
  v13 = v22[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_20B194AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B194B08(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v25;
  uint64_t v26[27];
  _BYTE v27[8];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v26);
    sub_20B0D0A00((uint64_t)v27, v26);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v27);
        if (!v42)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v25, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v8;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v33;
    v10 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v11;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v12;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v15 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v40;
LABEL_45:
    *((_QWORD *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v26);
  sub_20B0D0A00((uint64_t)v27, v26);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v25, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v17;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v33;
    v19 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v20;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v21;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v23 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  sub_20AF4EA3C((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0DD1A0((uint64_t)v26, a2, v4);
  LODWORD(v26[0]) = 1;
  sub_20B518854(a2[6], v26);
  return sub_20B194F94((uint64_t)v26, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20B194F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B194F94(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD v10[3];
  __int128 v11;

  v5 = a2 + 2;
  sub_20B0DD290(a2 + 2);
  LOBYTE(v10[0]) = 0;
  sub_20B51852C(a2[6], v10);
  *a3 = v10[0];
  sub_20B518BE4(a2[6], (_QWORD *)a3 + 1);
  v11 = xmmword_24C40DDF8;
  v6 = *a3;
  v10[0] = a3;
  v10[1] = a2;
  v10[2] = &v11;
  sub_20B19505C(v6, v10);
  v7 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(v5);
  v9 = *(_QWORD *)(v7 - 16) - result + *(_QWORD *)(v7 - 8);
  if (v9)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v5 + 40))(v5, v9);
  a2[4] -= 16;
  return result;
}

void sub_20B19505C(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B195104(a2);
      break;
    case 1:
      sub_20B1952E4(a2);
      break;
    case 2:
      sub_20B1954D8(a2);
      break;
    case 3:
      sub_20B1956D0(a2);
      break;
    case 5:
      sub_20B1958C8(a2);
      break;
    case 6:
      sub_20B195AA8(a2);
      break;
    case 7:
      sub_20B195C9C(a2);
      break;
    case 8:
      sub_20B195E94(a2);
      break;
    case 11:
      sub_20B19608C(a2);
      break;
    case 12:
      sub_20B196284(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B195104(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = 3 * *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  v3 = 2 * v2;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20B51852C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BC04(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B195284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1952E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20B5186C0(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BF48(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B195478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1954D8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20B518854(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C290(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B195670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1956D0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20B518BE4(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C5D8(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B195868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1958C8(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = 3 * *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  v3 = 2 * v2;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20B51847C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BA64(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B195A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B195AA8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20B518610(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BDA4(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B195C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B195C9C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20B5187A4(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C0EC(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B195E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B195E94(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20B518AFC(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C434(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19602C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19608C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20B518CC0(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C77C(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B196224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B196284(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20B518DF0(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C920(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19641C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19647C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v27);
    sub_20B0D0A00((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v27);
  sub_20B0D0A00((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20AF4EA3C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0DE788(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B19692C((uint64_t)v27, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20B1968E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B19692C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  char *v6;
  int v7;
  int v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  _BYTE *v14;

  sub_20B50A7A4(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_20B454B2C(v6, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v14 = a3;
  sub_20B101898((uint64_t *)a2, &v14);
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  v9 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_20B454B2C(v9, &v14);
  *((_QWORD *)a3 + 1) = v14;
  v10 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "lines3";
  *(_QWORD *)(a2 + 96) = 6;
  if (!v10)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50A7A4(a2);
  sub_20B196ABC(*a3, (uint64_t)a3, a2);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 16);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 16);
  *(_QWORD *)(a2 + 48) = v11 - 16;
  *(_QWORD *)(a2 + 72) = v12 - 16;
}

void sub_20B196ABC(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20B196BE4(v3);
      break;
    case 1:
      sub_20B196EBC(v3);
      break;
    case 2:
      sub_20B1971A4(v3);
      break;
    case 3:
      sub_20B197490(v3);
      break;
    case 5:
      sub_20B1977EC(v3);
      break;
    case 6:
      sub_20B197AC4(v3);
      break;
    case 7:
      sub_20B197DAC(v3);
      break;
    case 8:
      sub_20B198098(v3);
      break;
    case 11:
      sub_20B1983F4(v3);
      break;
    case 12:
      sub_20B1986CC(v3);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B196BE4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(6 * v2);
    v5 = &v4[v3];
    __p = v4;
    v22 = &v4[v3];
    bzero(v4, 6 * v2);
    v21 = v5;
  }
  if (v2)
  {
    v6 = (_QWORD *)a1[1];
    v7 = 3;
    do
    {
      sub_20B50A7A4((uint64_t)v6);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v8 = (uint64_t *)a1[1], v23 = 3, v24 = (char *)__p + v7 - 3, v9 = (char *)sub_20B50AA5C(v8), ++v8[14], sub_20B50AB74(v9, (uint64_t)&v23), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v10 = (uint64_t *)a1[1];
      v23 = 3;
      v24 = (char *)__p + v7;
      v11 = (char *)sub_20B50AA5C(v10);
      ++v10[14];
      sub_20B50AB74(v11, (uint64_t)&v23);
      v6 = (_QWORD *)a1[1];
      v12 = v6[6];
      v6[4] = *(_QWORD *)(v12 - 8);
      v13 = v6[9];
      v6[14] = *(_QWORD *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20B43BC04(&v23, 0, (uint64_t)&__p);
  v15 = v23;
  v14 = v24;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v16 = *a1;
  v17 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v14;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20B196E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B196EBC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (6 * v2)
  {
    if (6 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(12 * v2);
    v19 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 6;
    do
    {
      sub_20B50A7A4((uint64_t)v3);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v5 = (uint64_t *)a1[1], v20 = 3, v21 = (char *)__p + v4 - 6, v6 = (char *)sub_20B50AA5C(v5), ++v5[14], sub_20B50B300(v6, (uint64_t)&v20), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 3;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_20B50AA5C(v7);
      ++v7[14];
      sub_20B50B300(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20B43BF48(&v20, 1, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v20 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20B19713C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1971A4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(24 * v2);
    v19 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 12;
    do
    {
      sub_20B50A7A4((uint64_t)v3);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v5 = (uint64_t *)a1[1], v20 = 3, v21 = (char *)__p + v4 - 12, v6 = (char *)sub_20B50AA5C(v5), ++v5[14], sub_20B50B478(v6, (uint64_t)&v20), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 3;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_20B50AA5C(v7);
      ++v7[14];
      sub_20B50B478(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20B43C290(&v20, 2, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v20 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20B197428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B197490(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  const void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*a1 + 8);
  v22 = 0;
  v23 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(48 * v2);
    v23 = (char *)__p + 48 * v2;
    bzero(__p, 48 * v2);
    v22 = v23;
  }
  if (v2)
  {
    v3 = 0;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_20B50A7A4((uint64_t)v4);
      v7 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_29;
      }
      v8 = (uint64_t *)a1[1];
      v9 = (char *)sub_20B50AA5C(v8);
      ++v8[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_20B50D194(v9, (uint64_t)&v24);
      v10 = v24;
      if (v25 != v24)
      {
        memmove(&v7[v3], v24, v25 - v24);
        v10 = v24;
      }
      if (v10)
      {
        v25 = v10;
        operator delete(v10);
      }
      v11 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
LABEL_29:
        abort();
      }
      v12 = (uint64_t *)a1[1];
      v13 = (char *)sub_20B50AA5C(v12);
      ++v12[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_20B50D194(v13, (uint64_t)&v24);
      v14 = v24;
      if (v25 != v24)
      {
        memmove(&v11[v3 + 24], v24, v25 - v24);
        v14 = v24;
      }
      if (v14)
      {
        v25 = v14;
        operator delete(v14);
      }
      v4 = (_QWORD *)a1[1];
      v5 = v4[6];
      v4[4] = *(_QWORD *)(v5 - 8);
      v6 = v4[9];
      v4[14] = *(_QWORD *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  sub_20B43C5D8(&v24, 3, (uint64_t)&__p);
  v16 = v24;
  v15 = v25;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v24 + 7), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v17 = *a1;
  v18 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v15;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20B197768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1977EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(6 * v2);
    v5 = &v4[v3];
    __p = v4;
    v22 = &v4[v3];
    bzero(v4, 6 * v2);
    v21 = v5;
  }
  if (v2)
  {
    v6 = (_QWORD *)a1[1];
    v7 = 3;
    do
    {
      sub_20B50A7A4((uint64_t)v6);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v8 = (uint64_t *)a1[1], v23 = 3, v24 = (char *)__p + v7 - 3, v9 = (char *)sub_20B50AA5C(v8), ++v8[14], sub_20B50B120(v9, (uint64_t)&v23), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v10 = (uint64_t *)a1[1];
      v23 = 3;
      v24 = (char *)__p + v7;
      v11 = (char *)sub_20B50AA5C(v10);
      ++v10[14];
      sub_20B50B120(v11, (uint64_t)&v23);
      v6 = (_QWORD *)a1[1];
      v12 = v6[6];
      v6[4] = *(_QWORD *)(v12 - 8);
      v13 = v6[9];
      v6[14] = *(_QWORD *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20B43BA64(&v23, 5, (uint64_t)&__p);
  v15 = v23;
  v14 = v24;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v16 = *a1;
  v17 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v14;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20B197A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B197AC4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (6 * v2)
  {
    if (6 * v2 < 0)
      sub_20AF6E1D0();
    __p = operator new(12 * v2);
    v19 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 6;
    do
    {
      sub_20B50A7A4((uint64_t)v3);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v5 = (uint64_t *)a1[1], v20 = 3, v21 = (char *)__p + v4 - 6, v6 = (char *)sub_20B50AA5C(v5), ++v5[14], sub_20B50B210(v6, (uint64_t)&v20), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 3;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_20B50AA5C(v7);
      ++v7[14];
      sub_20B50B210(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20B43BDA4(&v20, 6, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v20 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20B197D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B197DAC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(24 * v2);
    v19 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 12;
    do
    {
      sub_20B50A7A4((uint64_t)v3);
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v5 = (uint64_t *)a1[1], v20 = 3, v21 = (char *)__p + v4 - 12, v6 = (char *)sub_20B50AA5C(v5), ++v5[14], sub_20B50B3BC(v6, (uint64_t)&v20), !__p)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 3;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_20B50AA5C(v7);
      ++v7[14];
      sub_20B50B3BC(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20B43C0EC(&v20, 7, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v20 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20B198030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B198098(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  const void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*a1 + 8);
  v22 = 0;
  v23 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(48 * v2);
    v23 = (char *)__p + 48 * v2;
    bzero(__p, 48 * v2);
    v22 = v23;
  }
  if (v2)
  {
    v3 = 0;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_20B50A7A4((uint64_t)v4);
      v7 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_29;
      }
      v8 = (uint64_t *)a1[1];
      v9 = (char *)sub_20B50AA5C(v8);
      ++v8[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_20B50CAD8(v9, (uint64_t)&v24);
      v10 = v24;
      if (v25 != v24)
      {
        memmove(&v7[v3], v24, v25 - v24);
        v10 = v24;
      }
      if (v10)
      {
        v25 = v10;
        operator delete(v10);
      }
      v11 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
LABEL_29:
        abort();
      }
      v12 = (uint64_t *)a1[1];
      v13 = (char *)sub_20B50AA5C(v12);
      ++v12[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_20B50CAD8(v13, (uint64_t)&v24);
      v14 = v24;
      if (v25 != v24)
      {
        memmove(&v11[v3 + 24], v24, v25 - v24);
        v14 = v24;
      }
      if (v14)
      {
        v25 = v14;
        operator delete(v14);
      }
      v4 = (_QWORD *)a1[1];
      v5 = v4[6];
      v4[4] = *(_QWORD *)(v5 - 8);
      v6 = v4[9];
      v4[14] = *(_QWORD *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  sub_20B43C434(&v24, 8, (uint64_t)&__p);
  v16 = v24;
  v15 = v25;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v24 + 7), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v17 = *a1;
  v18 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v15;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20B198370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1983F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  void *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 62)
      sub_20AF6E1D0();
    __p = operator new(24 * v2);
    v21 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v20 = v21;
  }
  if (v2)
  {
    v3 = 12;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_20B50A7A4((uint64_t)v4);
      v5 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v6 = (uint64_t *)a1[1], v7 = sub_20B50AA5C(v6), ++v6[14], sub_20B50B8AC(v7, (float *)&v5[v3 - 12]), (v8 = (char *)__p) == 0)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v9 = (uint64_t *)a1[1];
      v10 = sub_20B50AA5C(v9);
      ++v9[14];
      sub_20B50B8AC(v10, (float *)&v8[v3]);
      v4 = (_QWORD *)a1[1];
      v11 = v4[6];
      v4[4] = *(_QWORD *)(v11 - 8);
      v12 = v4[9];
      v4[14] = *(_QWORD *)(v12 - 8);
      v4[6] = v11 - 8;
      v4[9] = v12 - 8;
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20B43C77C(v22, 11, (uint64_t)&__p);
  v14 = v22[0];
  v13 = v22[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_20B198664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1986CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  void *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 61)
      sub_20AF6E1D0();
    __p = operator new(48 * v2);
    v21 = (char *)__p + 48 * v2;
    bzero(__p, 48 * v2);
    v20 = v21;
  }
  if (v2)
  {
    v3 = 24;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_20B50A7A4((uint64_t)v4);
      v5 = (char *)__p;
      if (!__p
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360)|| (v6 = (uint64_t *)a1[1], v7 = sub_20B50AA5C(v6), ++v6[14], sub_20B50B9DC(v7, (double *)&v5[v3 - 24]), (v8 = (char *)__p) == 0)&& sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v9 = (uint64_t *)a1[1];
      v10 = sub_20B50AA5C(v9);
      ++v9[14];
      sub_20B50B9DC(v10, (double *)&v8[v3]);
      v4 = (_QWORD *)a1[1];
      v11 = v4[6];
      v4[4] = *(_QWORD *)(v11 - 8);
      v12 = v4[9];
      v4[14] = *(_QWORD *)(v12 - 8);
      v4[6] = v11 - 8;
      v4[9] = v12 - 8;
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  sub_20B43C920(v22, 12, (uint64_t)&__p);
  v14 = v22[0];
  v13 = v22[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_20B19893C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1989A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  void *__p;
  uint64_t v33;
  _BYTE *v34;
  _BYTE v35[24];
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)&__p);
    sub_20B0D0A00((uint64_t)v35, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v35);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v35[8];
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)&__p);
  sub_20B0D0A00((uint64_t)v35, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v35[8];
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v35);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20AF4EA3C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20B514490(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20B0E0A94((uint64_t)&__p, a2, v4, v25);
  else
    sub_20B0E0C84(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (SHIBYTE(v34) < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_92:
          v30 = 0;
          if (SHIBYTE(v34) < 0)
            goto LABEL_95;
          goto LABEL_81;
        }
      }
      else if (SHIBYTE(v34) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_92;
      }
      v30 = 1;
      if (SHIBYTE(v34) < 0)
LABEL_95:
        operator delete(__p);
LABEL_81:
      if (*(_BYTE *)(a2 + 131))
        v29 = 0;
      else
        v29 = v30;
    }
    while ((v29 & 1) != 0);
  }
  LODWORD(__p) = 1;
  sub_20B514490(a2, &__p);
  LOBYTE(__p) = 0;
  sub_20B513B4C(a2, &__p);
  *(_BYTE *)(v3 + 200) = (_BYTE)__p;
  sub_20B514DE0(a2, (_QWORD *)(v3 + 208));
  *(_OWORD *)v35 = xmmword_24C40DDF8;
  v26 = *(unsigned __int8 *)(v3 + 200);
  __p = (void *)(v3 + 200);
  v33 = a2;
  v34 = v35;
  sub_20B198FF8(v26, &__p);
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (SHIBYTE(v34) < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_77:
          v28 = 0;
          if (SHIBYTE(v34) < 0)
            goto LABEL_80;
          goto LABEL_66;
        }
      }
      else if (SHIBYTE(v34) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_77;
      }
      v28 = 1;
      if (SHIBYTE(v34) < 0)
LABEL_80:
        operator delete(__p);
LABEL_66:
      if (*(_BYTE *)(a2 + 131))
        v27 = 0;
      else
        v27 = v28;
    }
    while ((v27 & 1) != 0);
  }
}

void sub_20B198FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B198FF8(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B1990A0(a2);
      break;
    case 1:
      sub_20B19927C(a2);
      break;
    case 2:
      sub_20B19946C(a2);
      break;
    case 3:
      sub_20B199660(a2);
      break;
    case 5:
      sub_20B199854(a2);
      break;
    case 6:
      sub_20B199A30(a2);
      break;
    case 7:
      sub_20B199C20(a2);
      break;
    case 8:
      sub_20B199E14(a2);
      break;
    case 11:
      sub_20B19A008(a2);
      break;
    case 12:
      sub_20B19A1FC(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B1990A0(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = 3 * *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  v3 = 2 * v2;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20B513B4C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BC04(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B19921C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19927C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20B513FE8(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BF48(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19940C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19946C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20B514490(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C290(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B199600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B199660(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20B514DE0(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C5D8(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B1997F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B199854(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = 3 * *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  v3 = 2 * v2;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20B513904(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20B43BA64(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B1999D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B199A30(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20B513D94(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BDA4(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B199BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B199C20(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20B51423C(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C0EC(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B199DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B199E14(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20B514B8C(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C434(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B199FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19A008(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20B5152B0(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C77C(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19A19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19A1FC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20B515504(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C920(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19A390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19A3F0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v25);
    sub_20B0D0A00((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v25);
  sub_20B0D0A00((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20AF4EA3C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0E2418((uint64_t)v25, a2, v4);
  sub_20B19A864((uint64_t)v25, a2, v3 + 200);
}

void sub_20B19A81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B19A864(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_20B42BA30(a2);
  sub_20B19A934(a2, a3);
  v9 = a2[12];
  v10 = a2[9];
  a2[6] = *(_QWORD *)(v9 - 8) + *(_QWORD *)(v10 - 8) + 8;
  a2[9] = v10 - 8;
  a2[12] = v9 - 8;
}

void sub_20B19A920(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B19A934(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[3];
  __int128 v11;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v4 = a1[3];
  v5 = *(unsigned __int8 *)(v4 + v2);
  v6 = v2 + 1;
  a1[6] = v6;
  *(_BYTE *)a2 = v5;
  v7 = v3 >= v6;
  v8 = v3 - v6;
  if (!v7)
    v8 = 0;
  if (v8 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v4 + v6);
  a1[6] += 8;
  v11 = xmmword_24C40DDF8;
  v10[0] = a2;
  v10[1] = a1;
  v10[2] = &v11;
  sub_20B19AA34(v5, v10);
}

void sub_20B19AA0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B19AA20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B19AA34(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B19AADC(a2);
      break;
    case 1:
      sub_20B19AD1C(a2);
      break;
    case 2:
      sub_20B19AF68(a2);
      break;
    case 3:
      sub_20B19B1B8(a2);
      break;
    case 5:
      sub_20B19B408(a2);
      break;
    case 6:
      sub_20B19B648(a2);
      break;
    case 7:
      sub_20B19B894(a2);
      break;
    case 8:
      sub_20B19BAE4(a2);
      break;
    case 11:
      sub_20B19BD34(a2);
      break;
    case 12:
      sub_20B19BF84(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B19AADC(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = 3 * *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  v3 = 2 * v2;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43BC04(v22, 0, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19ACAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19AD1C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43BF48(v23, 1, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19AEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19AF68(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C290(v23, 2, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19B148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19B1B8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C5D8(v23, 3, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19B398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19B408(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = 3 * *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  v3 = 2 * v2;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20B43BA64(v22, 5, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19B5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19B648(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43BDA4(v23, 6, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19B824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19B894(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C0EC(v23, 7, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19BA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19BAE4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C434(v23, 8, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19BCC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19BD34(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C77C(v23, 11, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19BF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19BF84(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20B43C920(v23, 12, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19C164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19C1D4(int *a1, _BYTE *a2, _BYTE *a3)
{
  int v5;
  int v7;
  unsigned int v8;
  __int128 *v9;
  _BYTE *v10[3];
  __int128 v11;

  v5 = *a1;
  if (*a1 == 2)
  {
    LODWORD(v10[0]) = 1;
    (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, v10);
    if (LODWORD(v10[0]) >= 2)
    {
      v8 = v10[0];
      v9 = sub_20B19C2D4();
      sub_20B520518((std::string *)v9, v8, 1u);
    }
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
  v10[0] = a3;
  sub_20B103C34(a2, v10);
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
  v11 = xmmword_24C40DDF8;
  v7 = *a3;
  v10[0] = a3;
  v10[1] = a2;
  v10[2] = &v11;
  sub_20B19C684(v7, v10);
  if (v5 >= 1)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20B19C2D4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254636518);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254636518))
    return &xmmword_254636500;
  v2 = sub_20B19C3B0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254636500, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254636510 = v2->__r_.__value_.__r.__words[2];
    xmmword_254636500 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254636500, &dword_20AEBB000);
  __cxa_guard_release(&qword_254636518);
  return &xmmword_254636500;
}

void sub_20B19C398(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636518);
  _Unwind_Resume(a1);
}

std::string *sub_20B19C3B0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254636538);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254636538))
    return &stru_254636520;
  sub_20B19C4A0((uint64_t)__p);
  sub_20AF70068((char *)__p, &stru_254636520);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254636520, &dword_20AEBB000);
  __cxa_guard_release(&qword_254636538);
  return &stru_254636520;
}

void sub_20B19C460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254636538);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254636538);
  _Unwind_Resume(a1);
}

void sub_20B19C4A0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254636558);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254636558))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::LinesSample<3>]", qword_254636540);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254636540, &dword_20AEBB000);
    __cxa_guard_release(&qword_254636558);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254636578);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254636578))
  {
    v5 = sub_20AED4780(qword_254636540, "<", 0);
    sub_20AED467C(qword_254636540, 0, v5, qword_254636560);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254636560, &dword_20AEBB000);
    __cxa_guard_release(&qword_254636578);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254636598);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254636598))
  {
    sub_20B531658((uint64_t)qword_254636560, (uint64_t)&xmmword_254636580);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254636580, &dword_20AEBB000);
    __cxa_guard_release(&qword_254636598);
  }
  if (byte_254636597 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254636580, *((unint64_t *)&xmmword_254636580 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254636580;
    *(_QWORD *)(a1 + 16) = unk_254636590;
  }
}

void sub_20B19C63C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636598);
  _Unwind_Resume(a1);
}

void sub_20B19C654(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636578);
  _Unwind_Resume(a1);
}

void sub_20B19C66C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636558);
  _Unwind_Resume(a1);
}

void sub_20B19C684(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20B19C72C(a2);
      break;
    case 1:
      sub_20B19C8F4(a2);
      break;
    case 2:
      sub_20B19CAD4(a2);
      break;
    case 3:
      sub_20B19CCB8(a2);
      break;
    case 5:
      sub_20B19CE9C(a2);
      break;
    case 6:
      sub_20B19D064(a2);
      break;
    case 7:
      sub_20B19D244(a2);
      break;
    case 8:
      sub_20B19D428(a2);
      break;
    case 11:
      sub_20B19D60C(a2);
      break;
    case 12:
      sub_20B19D7F0(a2);
      break;
    default:
      sub_20B521E58(a1);
  }
}

void sub_20B19C72C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = 3 * *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  v3 = 2 * v2;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF4BAC0();
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20B43BC04(v15, 0, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19C894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19C8F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BF48(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19CA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19CAD4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C290(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19CC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19CCB8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C5D8(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19CE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19CE9C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = 3 * *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  v3 = 2 * v2;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20AF6E1D0();
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20B43BA64(v15, 5, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19D004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19D064(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20AF6E1D0();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20B43BDA4(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19D1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19D244(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C0EC(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19D3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19D428(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C434(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19D5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19D60C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20AF6E1D0();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20B43C77C(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19D790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B19D7F0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20AF6E1D0();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20B43C920(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B19D974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B19D9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  _BOOL8 v11;
  _QWORD v13[5];
  unsigned __int8 **v14;
  _QWORD v15[5];
  unsigned __int8 **v16;
  char v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[6];

  v29[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v24);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v24);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v24);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20B0C0D90(v6, (uint64_t)v18);
  }
  else if (v7 == 1)
  {
    sub_20B0F9F8C(v6, (uint64_t)v18);
  }
  else
  {
    if (v7)
      sub_20AECFAB8();
    sub_20B0C6034(v6, (uint64_t)v18);
  }
  v15[0] = v24;
  v15[1] = &v25;
  v15[2] = &v26;
  v15[3] = &v27;
  v15[4] = &v28;
  v16 = (unsigned __int8 **)v29;
  v13[0] = v18;
  v13[1] = &v19;
  v13[2] = &v20;
  v13[3] = &v21;
  v13[4] = &v22;
  v14 = (unsigned __int8 **)&v23;
  if (sub_20B2178A8((uint64_t)&v17, v15, v13))
  {
    if (*((_BYTE *)v16 + 24) && *((_BYTE *)v14 + 24))
    {
      v8 = *v16;
      v9 = v16[1];
      v10 = *v14;
      if (v9 - *v16 == v14[1] - *v14)
      {
        if (v8 != v9)
        {
          while (sub_20B2167B8(v8, v10))
          {
            v8 += 96;
            v10 += 96;
            if (v8 == v9)
              goto LABEL_23;
          }
          goto LABEL_22;
        }
LABEL_23:
        v11 = sub_20B444EE4((int *)(a1 + 200), (int *)(a2 + 200));
        goto LABEL_24;
      }
    }
    else if ((*((_BYTE *)v16 + 24) != 0) == (*((_BYTE *)v14 + 24) != 0))
    {
      goto LABEL_23;
    }
  }
LABEL_22:
  v11 = 0;
LABEL_24:
  sub_20AF4EA3C((uint64_t)v18);
  sub_20AF4EA3C((uint64_t)v24);
  return v11;
}

void sub_20B19DBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a23);
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B19DBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B19DBEC(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EB80, 0);
  if (v4)
  {
    sub_20B19DF64(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EBC8, 0);
    if (v5)
    {
      sub_20B19E204(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC50, 0);
      if (v6)
      {
        sub_20B19E3F8(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC98, 0);
        if (v7)
        {
          sub_20B19E698(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C2C8)
            sub_20B19E870(&v9, (uint64_t)a1);
          else
            sub_20B19DD50(&v8, a1);
        }
      }
    }
  }
}

void sub_20B19DD50(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    LODWORD(v12) = 4;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v12);
    v9 = v12;
    if (v8 < 1)
    {
      sub_20B0FF5BC((uint64_t)a2, v4, v12);
      goto LABEL_17;
    }
    if (v8 == 2)
    {
      LODWORD(v12) = 3;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v12);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B0FF5BC((uint64_t)a2, v4, v9);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    LODWORD(v12) = 5;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v12);
    v11 = v12;
    if (v10 < 1)
    {
      sub_20B0FEF34((uint64_t)a2, v4, v12);
      goto LABEL_17;
    }
    if (v10 == 2)
    {
      LODWORD(v12) = 3;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v12);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B0FEF34((uint64_t)a2, v4, v11);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[2];
    LODWORD(v12) = 6;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v12);
    v7 = v12;
    if (v6 < 1)
    {
      sub_20B0D8514((uint64_t)a2, v4, v12);
      goto LABEL_17;
    }
    if (v6 == 2)
    {
      LODWORD(v12) = 3;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v12);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B0D8514((uint64_t)a2, v4, v7);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
LABEL_17:
  v12 = *((_QWORD *)a2 + 1);
  sub_20B141C48((int *)&v12, (uint64_t)a2, v3 + 200);
}

void sub_20B19DF64(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v16 = "version";
    v17 = 7;
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FADD8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B50671C(a2);
      v16 = "version";
      v17 = 7;
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5086B4(a2, &v18);
      sub_20B0D1154(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v16 = "version";
    v17 = 7;
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FA468(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B13D49C((uint64_t)&v16, a2, v3 + 200);
}

void sub_20B19E204(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v15 = (uint64_t *)(v7 + 16);
      sub_20B51E95C(&v15, 4u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v15, v7 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBED4(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v15 = (uint64_t *)(v8 + 16);
      sub_20B51E95C(&v15, 5u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v15, v8 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBDB8(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v15 = (uint64_t *)(v6 + 16);
      sub_20B51E95C(&v15, 6u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v15, v6 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0D3CE4(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v15 = (uint64_t *)(v14 + 16);
    sub_20B51E95C(&v15, 2u);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v15, v14 + 8);
  }
  sub_20B13E580((uint64_t)&v15, a2, (int *)(v3 + 200));
}

void sub_20B19E3F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v16 = "version";
    v17 = 7;
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FCF30(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B505FB0(a2);
      v16 = "version";
      v17 = 7;
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5069D0(a2, &v18);
      sub_20B0D4F88(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v16 = "version";
    v17 = 7;
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FC7EC(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B13FBAC((uint64_t)&v16, a2, v3 + 200);
}

_QWORD *sub_20B19E698(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v18 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v8, (uint64_t)&v18, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FE288(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v16 = *(_BYTE *)(a2 + 32);
        sub_20AEC01D0(v6, (uint64_t)&v16, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20B0D66C4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v10, (uint64_t)&v19, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v17 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v9, (uint64_t)&v17, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FDCE4(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v20 = v7;
  sub_20AEC01D0(v11, (uint64_t)&v20, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v21 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v13, (uint64_t)&v21, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  return sub_20B140998((uint64_t)&v15, a2, v3 + 200);
}

char *sub_20B19E870(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE9C0(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE8A4(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    __src = 6;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0D757C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 2;
  sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  return sub_20B1416C8((uint64_t)&__src, (_QWORD *)a2, (int *)(v3 + 200));
}

void sub_20B19E9F0(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED20, 0);
  if (v4)
  {
    sub_20B19F07C(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED58, 0);
    if (v5)
    {
      sub_20B19F528(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EDE0, 0);
      if (v6)
      {
        sub_20B19F998(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EE18, 0);
        if (v7)
        {
          sub_20B19FE44(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C508)
            sub_20B1A0488(&v9, a1);
          else
            sub_20B19EB54(&v8, (uint64_t *)a1);
        }
      }
    }
  }
}

void sub_20B19EB54(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  void (**v28)(int);
  char v29;
  uint64_t v30[27];
  unsigned int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v30);
    sub_20B0D0A00((uint64_t)&v31, v30);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)&v31);
        if (!v46)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v29, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v8;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v37;
    v10 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v11;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v12;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v15 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v44;
LABEL_45:
    *((_QWORD *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v30);
  sub_20B0D0A00((uint64_t)&v31, v30);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v29, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v17;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v37;
    v19 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v20;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v21;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)&v31);
  if (v46)
  {
LABEL_38:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v23 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  sub_20AF4EA3C((uint64_t)v30);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *a2;
  v30[0] = a2[1];
  v25 = v30[0];
  v31 = 6;
  (*(void (**)(uint64_t *, unsigned int *))(v24 + 104))(a2, &v31);
  if (v25 < 1)
  {
    if (v31 < 3)
      sub_20B0E41CC((uint64_t)&v31, (uint64_t)a2, v4, v31);
    else
      sub_20B0E4440((uint64_t)a2, v4, v31);
  }
  else
  {
    sub_20B0E3BD4((int *)v30, (uint64_t)a2, v4, v31);
  }
  v26 = *a2;
  v30[0] = a2[1];
  v27 = v30[0];
  v31 = 2;
  (*(void (**)(uint64_t *, unsigned int *))(v26 + 104))(a2, &v31);
  v28 = (void (**)(int))(v3 + 200);
  if (v27 < 1)
  {
    if (v31 < 2)
      sub_20B153394((uint64_t)&v31, (uint64_t)a2, (uint64_t)v28);
    else
      sub_20B153590((uint64_t)a2, (void (**)(int))(v3 + 200));
  }
  else
  {
    sub_20B152EB8((int *)v30, (uint64_t)a2, v28, v31);
  }
}

void sub_20B19F034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B19F07C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v27;
  uint64_t v28[27];
  _BYTE v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v28);
    sub_20B0D0A00((uint64_t)v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v28);
  sub_20B0D0A00((uint64_t)v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20AF4EA3C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0D978C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  return sub_20B142C84(a2, v3 + 200);
}

void sub_20B19F4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B19F528(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v25;
  uint64_t v26[27];
  _BYTE v27[8];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v26);
    sub_20B0D0A00((uint64_t)v27, v26);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v27);
        if (!v42)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v25, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v8;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v33;
    v10 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v11;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v12;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v15 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v40;
LABEL_45:
    *((_QWORD *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v26);
  sub_20B0D0A00((uint64_t)v27, v26);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v25, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v17;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v33;
    v19 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v20;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v21;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v23 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  sub_20AF4EA3C((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0DD1A0((uint64_t)v26, a2, v4);
  return sub_20B1463D8(a2, (int *)(v3 + 200));
}

void sub_20B19F950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B19F998(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v27;
  uint64_t v28[27];
  _BYTE v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v28);
    sub_20B0D0A00((uint64_t)v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v28);
  sub_20B0D0A00((uint64_t)v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20AF4EA3C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0DE788(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  return sub_20B148FBC(a2, v3 + 200);
}

void sub_20B19FDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B19FE44(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  void *__p;
  uint64_t v34;
  char v35;
  _BYTE v36[8];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)&__p);
    sub_20B0D0A00((uint64_t)v36, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v36);
        if (!v51)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v37;
    *(_BYTE *)(v3 + 64) = 0;
    if (v40)
    {
      v8 = v39;
      *(_OWORD *)(v3 + 40) = v38;
      *(_QWORD *)(v3 + 56) = v8;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v42;
    v10 = v41;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v45)
    {
      v11 = v44;
      *(_OWORD *)(v3 + 96) = v43;
      *(_QWORD *)(v3 + 112) = v11;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v48)
    {
      v12 = v47;
      *(_OWORD *)(v3 + 128) = v46;
      *(_QWORD *)(v3 + 144) = v12;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v51;
    if (v51)
    {
      *(_OWORD *)(v3 + 160) = v49;
      *(_QWORD *)(v3 + 176) = v50;
      v49 = 0uLL;
      v50 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v49;
    if (!(_QWORD)v49)
      goto LABEL_46;
    v15 = *((_QWORD *)&v49 + 1);
    v16 = (void *)v49;
    if (*((_QWORD *)&v49 + 1) == (_QWORD)v49)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v49;
LABEL_45:
    *((_QWORD *)&v49 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)&__p);
  sub_20B0D0A00((uint64_t)v36, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v37;
    *(_BYTE *)(v3 + 64) = 0;
    if (v40)
    {
      v17 = v39;
      *(_OWORD *)(v3 + 40) = v38;
      *(_QWORD *)(v3 + 56) = v17;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v42;
    v19 = v41;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v45)
    {
      v20 = v44;
      *(_OWORD *)(v3 + 96) = v43;
      *(_QWORD *)(v3 + 112) = v20;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v48)
    {
      v21 = v47;
      *(_OWORD *)(v3 + 128) = v46;
      *(_QWORD *)(v3 + 144) = v21;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v51;
    if (v51)
    {
      *(_OWORD *)(v3 + 160) = v49;
      *(_QWORD *)(v3 + 176) = v50;
      v49 = 0uLL;
      v50 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v36);
  if (v51)
  {
LABEL_38:
    v14 = v49;
    if (!(_QWORD)v49)
      goto LABEL_46;
    v23 = *((_QWORD *)&v49 + 1);
    v16 = (void *)v49;
    if (*((_QWORD *)&v49 + 1) == (_QWORD)v49)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v48 && SHIBYTE(v47) < 0)
    operator delete((void *)v46);
  if (v45 && SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  sub_20AF4EA3C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20B514490(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20B0E0A94((uint64_t)&__p, a2, v4, v25);
  else
    sub_20B0E0C84(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (v35 < 0)
      {
        if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_80:
          v29 = 0;
          if (v35 < 0)
            goto LABEL_83;
          goto LABEL_69;
        }
      }
      else if (v35 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_80;
      }
      v29 = 1;
      if (v35 < 0)
LABEL_83:
        operator delete(__p);
LABEL_69:
      if (*(_BYTE *)(a2 + 131))
        v28 = 0;
      else
        v28 = v29;
    }
    while ((v28 & 1) != 0);
  }
  LODWORD(__p) = 2;
  sub_20B514490(a2, &__p);
  v26 = __p;
  if (__p >= 2)
    v27 = 2;
  else
    v27 = __p;
  if (v27 < 2)
    sub_20B14C6CC((uint64_t)&__p, a2, v3 + 200);
  else
    sub_20B14C8C8(a2, (int *)(v3 + 200));
  if (v26 >= 2 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (v35 < 0)
      {
        if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_99:
          v31 = 0;
          if (v35 < 0)
            goto LABEL_102;
          goto LABEL_88;
        }
      }
      else if (v35 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_99;
      }
      v31 = 1;
      if (v35 < 0)
LABEL_102:
        operator delete(__p);
LABEL_88:
      if (*(_BYTE *)(a2 + 131))
        v30 = 0;
      else
        v30 = v31;
    }
    while ((v30 & 1) != 0);
  }
}

void sub_20B1A0440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1A0488(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v25);
    sub_20B0D0A00((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v25);
  sub_20B0D0A00((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20AF4EA3C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0E2418((uint64_t)v25, a2, v4);
  sub_20B14F390((uint64_t)v25, a2, (int *)(v3 + 200));
}

void sub_20B1A08B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1A08FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _QWORD v13[5];
  unsigned __int8 **v14;
  _QWORD v15[5];
  unsigned __int8 **v16;
  char v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[6];

  v29[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v24);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v24);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v24);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20B0C0D90(v6, (uint64_t)v18);
  }
  else if (v7 == 1)
  {
    sub_20B0F9F8C(v6, (uint64_t)v18);
  }
  else
  {
    if (v7)
      sub_20AECFAB8();
    sub_20B0C6034(v6, (uint64_t)v18);
  }
  v15[0] = v24;
  v15[1] = &v25;
  v15[2] = &v26;
  v15[3] = &v27;
  v15[4] = &v28;
  v16 = (unsigned __int8 **)v29;
  v13[0] = v18;
  v13[1] = &v19;
  v13[2] = &v20;
  v13[3] = &v21;
  v13[4] = &v22;
  v14 = (unsigned __int8 **)&v23;
  if (sub_20B2178A8((uint64_t)&v17, v15, v13))
  {
    if (*((_BYTE *)v16 + 24) && *((_BYTE *)v14 + 24))
    {
      v8 = *v16;
      v9 = v16[1];
      v10 = *v14;
      if (v9 - *v16 == v14[1] - *v14)
      {
        if (v8 != v9)
        {
          while (sub_20B2167B8(v8, v10))
          {
            v8 += 96;
            v10 += 96;
            if (v8 == v9)
              goto LABEL_23;
          }
          goto LABEL_22;
        }
LABEL_23:
        v11 = sub_20B418A18((uint64_t *)(a1 + 200), (uint64_t *)(a2 + 200));
        goto LABEL_24;
      }
    }
    else if ((*((_BYTE *)v16 + 24) != 0) == (*((_BYTE *)v14 + 24) != 0))
    {
      goto LABEL_23;
    }
  }
LABEL_22:
  v11 = 0;
LABEL_24:
  sub_20AF4EA3C((uint64_t)v18);
  sub_20AF4EA3C((uint64_t)v24);
  return v11;
}

void sub_20B1A0AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a23);
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B1A0B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B1A0B14(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EB80, 0);
  if (v4)
  {
    sub_20B1A0F20(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EBC8, 0);
    if (v5)
    {
      sub_20B1A11C0(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC50, 0);
      if (v6)
      {
        sub_20B1A1440(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC98, 0);
        if (v7)
        {
          sub_20B1A16E0(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C2C8)
            sub_20B1A18F8(&v9, (uint64_t)a1);
          else
            sub_20B1A0C78(&v8, a1);
        }
      }
    }
  }
}

void sub_20B1A0C78(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FF5BC((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20B0FF5BC((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FEF34((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20B0FEF34((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0D8514((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20B0D8514((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = (uint64_t *)(v3 + 200);
  v13 = a2[2];
  v14 = 2;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20B15DCC8(a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 2;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B15DCC8(a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20B1A0F20(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v16 = "version";
    v17 = 7;
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FADD8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B50671C(a2);
      v16 = "version";
      v17 = 7;
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5086B4(a2, &v18);
      sub_20B0D1154(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v16 = "version";
    v17 = 7;
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FA468(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B15972C((uint64_t)&v16, a2, v3 + 200);
}

void sub_20B1A11C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20B51E95C(&v20, 4u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v7 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBED4(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20B51E95C(&v20, 5u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v8 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBDB8(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20B51E95C(&v20, 6u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v6 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0D3CE4(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20B51E95C(&v20, 2u);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v20, v14 + 8);
  }
  sub_20B51956C(*(_QWORD *)(a2 + 24));
  sub_20B159B8C(a2, (uint64_t *)(v3 + 200));
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20B1A1440(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v16 = "version";
    v17 = 7;
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FCF30(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B505FB0(a2);
      v16 = "version";
      v17 = 7;
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5069D0(a2, &v18);
      sub_20B0D4F88(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v16 = "version";
    v17 = 7;
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FC7EC(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B15B898((uint64_t)&v16, a2, v3 + 200);
}

_QWORD *sub_20B1A16E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FE288(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20AEC01D0(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20B0D66C4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FDCE4(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20AEC01D0(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20B15BCF8(a2, (uint64_t *)(v3 + 200));
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20AEC01D0(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20B1A18F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE9C0(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE8A4(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    __src = 6;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0D757C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 2;
  sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_20B42B554((_QWORD *)a2);
  sub_20B15CCBC(a2, (uint64_t *)(v3 + 200));
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20B1A1AB0(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED20, 0);
  if (v4)
  {
    sub_20B1A213C(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED58, 0);
    if (v5)
    {
      sub_20B1A25E8(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EDE0, 0);
      if (v6)
      {
        sub_20B1A2A58(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EE18, 0);
        if (v7)
        {
          sub_20B1A2F04(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C508)
            sub_20B1A3548(&v9, a1);
          else
            sub_20B1A1C14(&v8, (uint64_t *)a1);
        }
      }
    }
  }
}

void sub_20B1A1C14(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  char v29;
  uint64_t v30[27];
  unsigned int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v30);
    sub_20B0D0A00((uint64_t)&v31, v30);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)&v31);
        if (!v46)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v29, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v8;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v37;
    v10 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v11;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v12;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v15 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v44;
LABEL_45:
    *((_QWORD *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v30);
  sub_20B0D0A00((uint64_t)&v31, v30);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v29, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v17;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v37;
    v19 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v20;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v21;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)&v31);
  if (v46)
  {
LABEL_38:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v23 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  sub_20AF4EA3C((uint64_t)v30);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *a2;
  v30[0] = a2[1];
  v25 = v30[0];
  v31 = 6;
  (*(void (**)(uint64_t *, unsigned int *))(v24 + 104))(a2, &v31);
  if (v25 < 1)
  {
    if (v31 < 3)
      sub_20B0E41CC((uint64_t)&v31, (uint64_t)a2, v4, v31);
    else
      sub_20B0E4440((uint64_t)a2, v4, v31);
  }
  else
  {
    sub_20B0E3BD4((int *)v30, (uint64_t)a2, v4, v31);
  }
  v26 = *a2;
  v30[0] = a2[1];
  v27 = v30[0];
  v31 = 2;
  (*(void (**)(uint64_t *, unsigned int *))(v26 + 104))(a2, &v31);
  v28 = (uint64_t *)(v3 + 200);
  if (v27 < 1)
  {
    if (v31 < 2)
      sub_20B168B90((uint64_t)&v31, a2, v28);
    else
      sub_20B168A78(a2, v3 + 200);
  }
  else
  {
    sub_20B16859C((int *)v30, a2, v28, v31);
  }
}

void sub_20B1A20F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1A213C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v27;
  uint64_t v28[27];
  _BYTE v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v28);
    sub_20B0D0A00((uint64_t)v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v28);
  sub_20B0D0A00((uint64_t)v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20AF4EA3C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0D978C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  return sub_20B15EE04(a2, (uint64_t *)(v3 + 200));
}

void sub_20B1A25A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B1A25E8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v25;
  uint64_t v26[27];
  _BYTE v27[8];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v26);
    sub_20B0D0A00((uint64_t)v27, v26);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v27);
        if (!v42)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v25, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v8;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v33;
    v10 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v11;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v12;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v15 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v40;
LABEL_45:
    *((_QWORD *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v26);
  sub_20B0D0A00((uint64_t)v27, v26);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v25, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v17;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v33;
    v19 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v20;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v21;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v23 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  sub_20AF4EA3C((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0DD1A0((uint64_t)v26, a2, v4);
  return sub_20B15F91C(a2, (uint64_t *)(v3 + 200));
}

void sub_20B1A2A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1A2A58(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v27;
  uint64_t v28[27];
  _BYTE v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v28);
    sub_20B0D0A00((uint64_t)v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v28);
  sub_20B0D0A00((uint64_t)v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20AF4EA3C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0DE788(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  return sub_20B162B24(a2, (uint64_t *)(v3 + 200));
}

void sub_20B1A2EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1A2F04(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  void *__p;
  uint64_t v34;
  char v35;
  _BYTE v36[8];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)&__p);
    sub_20B0D0A00((uint64_t)v36, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v36);
        if (!v51)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v37;
    *(_BYTE *)(v3 + 64) = 0;
    if (v40)
    {
      v8 = v39;
      *(_OWORD *)(v3 + 40) = v38;
      *(_QWORD *)(v3 + 56) = v8;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v42;
    v10 = v41;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v45)
    {
      v11 = v44;
      *(_OWORD *)(v3 + 96) = v43;
      *(_QWORD *)(v3 + 112) = v11;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v48)
    {
      v12 = v47;
      *(_OWORD *)(v3 + 128) = v46;
      *(_QWORD *)(v3 + 144) = v12;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v51;
    if (v51)
    {
      *(_OWORD *)(v3 + 160) = v49;
      *(_QWORD *)(v3 + 176) = v50;
      v49 = 0uLL;
      v50 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v49;
    if (!(_QWORD)v49)
      goto LABEL_46;
    v15 = *((_QWORD *)&v49 + 1);
    v16 = (void *)v49;
    if (*((_QWORD *)&v49 + 1) == (_QWORD)v49)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v49;
LABEL_45:
    *((_QWORD *)&v49 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)&__p);
  sub_20B0D0A00((uint64_t)v36, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v37;
    *(_BYTE *)(v3 + 64) = 0;
    if (v40)
    {
      v17 = v39;
      *(_OWORD *)(v3 + 40) = v38;
      *(_QWORD *)(v3 + 56) = v17;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v42;
    v19 = v41;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v45)
    {
      v20 = v44;
      *(_OWORD *)(v3 + 96) = v43;
      *(_QWORD *)(v3 + 112) = v20;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v48)
    {
      v21 = v47;
      *(_OWORD *)(v3 + 128) = v46;
      *(_QWORD *)(v3 + 144) = v21;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v51;
    if (v51)
    {
      *(_OWORD *)(v3 + 160) = v49;
      *(_QWORD *)(v3 + 176) = v50;
      v49 = 0uLL;
      v50 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v36);
  if (v51)
  {
LABEL_38:
    v14 = v49;
    if (!(_QWORD)v49)
      goto LABEL_46;
    v23 = *((_QWORD *)&v49 + 1);
    v16 = (void *)v49;
    if (*((_QWORD *)&v49 + 1) == (_QWORD)v49)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v48 && SHIBYTE(v47) < 0)
    operator delete((void *)v46);
  if (v45 && SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  sub_20AF4EA3C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20B514490(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20B0E0A94((uint64_t)&__p, a2, v4, v25);
  else
    sub_20B0E0C84(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (v35 < 0)
      {
        if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_80:
          v29 = 0;
          if (v35 < 0)
            goto LABEL_83;
          goto LABEL_69;
        }
      }
      else if (v35 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_80;
      }
      v29 = 1;
      if (v35 < 0)
LABEL_83:
        operator delete(__p);
LABEL_69:
      if (*(_BYTE *)(a2 + 131))
        v28 = 0;
      else
        v28 = v29;
    }
    while ((v28 & 1) != 0);
  }
  LODWORD(__p) = 2;
  sub_20B514490(a2, &__p);
  v26 = __p;
  if (__p >= 2)
    v27 = 2;
  else
    v27 = __p;
  if (v27 < 2)
    sub_20B16352C((uint64_t)&__p, a2, (uint64_t *)(v3 + 200));
  else
    sub_20B163414(a2, v3 + 200);
  if (v26 >= 2 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (v35 < 0)
      {
        if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_99:
          v31 = 0;
          if (v35 < 0)
            goto LABEL_102;
          goto LABEL_88;
        }
      }
      else if (v35 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_99;
      }
      v31 = 1;
      if (v35 < 0)
LABEL_102:
        operator delete(__p);
LABEL_88:
      if (*(_BYTE *)(a2 + 131))
        v30 = 0;
      else
        v30 = v31;
    }
    while ((v30 & 1) != 0);
  }
}

void sub_20B1A3500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1A3548(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v25);
    sub_20B0D0A00((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v25);
  sub_20B0D0A00((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20AF4EA3C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0E2418((uint64_t)v25, a2, v4);
  sub_20B165C10((uint64_t)v25, a2, (uint64_t *)(v3 + 200));
}

void sub_20B1A3974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B1A39BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v19;
  _QWORD v21[5];
  uint64_t *v22;
  _QWORD v23[5];
  _QWORD *v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[6];

  v37[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v32);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v32);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v32);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20B0C0D90(v6, (uint64_t)v26);
  }
  else if (v7 == 1)
  {
    sub_20B0F9F8C(v6, (uint64_t)v26);
  }
  else
  {
    if (v7)
      sub_20AECFAB8();
    sub_20B0C6034(v6, (uint64_t)v26);
  }
  v23[0] = v32;
  v23[1] = &v33;
  v23[2] = &v34;
  v23[3] = &v35;
  v23[4] = &v36;
  v24 = v37;
  v21[0] = v26;
  v21[1] = &v27;
  v21[2] = &v28;
  v21[3] = &v29;
  v21[4] = &v30;
  v22 = &v31;
  if (!sub_20B2178A8((uint64_t)&v25, v23, v21))
    goto LABEL_35;
  if (!*((_BYTE *)v24 + 24) || !*((_BYTE *)v22 + 24))
  {
    if ((*((_BYTE *)v24 + 24) != 0) == (*((_BYTE *)v22 + 24) != 0))
      goto LABEL_22;
LABEL_35:
    v19 = 0;
    goto LABEL_36;
  }
  v8 = (unsigned __int8 *)*v24;
  v9 = (unsigned __int8 *)v24[1];
  v10 = (unsigned __int8 *)*v22;
  if (&v9[-*v24] != (unsigned __int8 *)(v22[1] - *v22))
    goto LABEL_35;
  if (v8 != v9)
  {
    while (sub_20B2167B8(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9)
        goto LABEL_22;
    }
    goto LABEL_35;
  }
LABEL_22:
  if (*(_QWORD *)(a1 + 200) != *(_QWORD *)(a2 + 200))
    goto LABEL_35;
  v11 = *(_QWORD *)(a1 + 224);
  if (v11 != *(_QWORD *)(a2 + 224))
    goto LABEL_35;
  v12 = *(unsigned __int8 **)(a1 + 232);
  v13 = *(unsigned __int8 **)(a2 + 232);
  v14 = &v12[v11];
  v15 = &v13[v11];
  if (v11)
  {
    v16 = v11 - 1;
    while (1)
    {
      v17 = v16;
      if (*v12 != *v13)
        goto LABEL_35;
      ++v12;
      ++v13;
      --v16;
      if (!v17)
      {
        v13 = v15;
        v12 = v14;
        break;
      }
    }
  }
  v19 = v12 == v14 && v13 == v15;
LABEL_36:
  sub_20AF4EA3C((uint64_t)v26);
  sub_20AF4EA3C((uint64_t)v32);
  return v19;
}

void sub_20B1A3C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a23);
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B1A3C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B1A3C34(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EB80, 0);
  if (v4)
  {
    sub_20B1A4040(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EBC8, 0);
    if (v5)
    {
      sub_20B1A42E0(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC50, 0);
      if (v6)
      {
        sub_20B1A4560(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC98, 0);
        if (v7)
        {
          sub_20B1A4800(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C2C8)
            sub_20B1A4A18(&v9, (uint64_t)a1);
          else
            sub_20B1A3D98(&v8, a1);
        }
      }
    }
  }
}

void sub_20B1A3D98(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FF5BC((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20B0FF5BC((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FEF34((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20B0FEF34((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0D8514((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20B0D8514((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = v3 + 200;
  v13 = a2[2];
  v14 = 2;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20B16C80C((uint64_t)a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 2;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B16C80C((uint64_t)a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20B1A4040(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v16 = "version";
    v17 = 7;
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FADD8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B50671C(a2);
      v16 = "version";
      v17 = 7;
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5086B4(a2, &v18);
      sub_20B0D1154(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v16 = "version";
    v17 = 7;
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FA468(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B16BD9C((uint64_t)&v16, a2, v3 + 200);
}

void sub_20B1A42E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20B51E95C(&v20, 4u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v7 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBED4(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20B51E95C(&v20, 5u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v8 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBDB8(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20B51E95C(&v20, 6u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v6 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0D3CE4(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20B51E95C(&v20, 2u);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v20, v14 + 8);
  }
  sub_20B51956C(*(_QWORD *)(a2 + 24));
  sub_20B16C0A0(a2, v3 + 200);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20B1A4560(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v16 = "version";
    v17 = 7;
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FCF30(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B505FB0(a2);
      v16 = "version";
      v17 = 7;
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5069D0(a2, &v18);
      sub_20B0D4F88(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v16 = "version";
    v17 = 7;
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FC7EC(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B16C284((uint64_t)&v16, a2, v3 + 200);
}

_QWORD *sub_20B1A4800(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FE288(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20AEC01D0(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20B0D66C4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FDCE4(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20AEC01D0(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20B16C588(a2, v3 + 200);
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20AEC01D0(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20B1A4A18(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE9C0(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE8A4(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    __src = 6;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0D757C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 2;
  sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_20B42B554((_QWORD *)a2);
  sub_20B16C6D0(a2, (uint64_t *)(v3 + 200));
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20B1A4BD0(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED20, 0);
  if (v4)
  {
    sub_20B1A525C(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED58, 0);
    if (v5)
    {
      sub_20B1A5708(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EDE0, 0);
      if (v6)
      {
        sub_20B1A5B78(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EE18, 0);
        if (v7)
        {
          sub_20B1A6024(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C508)
            sub_20B1A6668(&v9, a1);
          else
            sub_20B1A4D34(&v8, (uint64_t *)a1);
        }
      }
    }
  }
}

void sub_20B1A4D34(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30[27];
  unsigned int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v30);
    sub_20B0D0A00((uint64_t)&v31, v30);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)&v31);
        if (!v46)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v29, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v8;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v37;
    v10 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v11;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v12;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v15 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v44;
LABEL_45:
    *((_QWORD *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v30);
  sub_20B0D0A00((uint64_t)&v31, v30);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v29, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v17;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v37;
    v19 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v20;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v21;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)&v31);
  if (v46)
  {
LABEL_38:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v23 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  sub_20AF4EA3C((uint64_t)v30);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *a2;
  v30[0] = a2[1];
  v25 = v30[0];
  v31 = 6;
  (*(void (**)(uint64_t *, unsigned int *))(v24 + 104))(a2, &v31);
  if (v25 < 1)
  {
    if (v31 < 3)
      sub_20B0E41CC((uint64_t)&v31, (uint64_t)a2, v4, v31);
    else
      sub_20B0E4440((uint64_t)a2, v4, v31);
  }
  else
  {
    sub_20B0E3BD4((int *)v30, (uint64_t)a2, v4, v31);
  }
  v26 = *a2;
  v30[0] = a2[1];
  v27 = v30[0];
  v31 = 2;
  (*(void (**)(uint64_t *, unsigned int *))(v26 + 104))(a2, &v31);
  v28 = v3 + 200;
  if (v27 < 1)
  {
    if (v31 < 2)
      sub_20B16E744((uint64_t)&v31, (uint64_t)a2, v28);
    else
      sub_20B16E8B0((uint64_t)a2, v3 + 200);
  }
  else
  {
    sub_20B16E41C((int *)v30, (uint64_t)a2, v28, v31);
  }
}

void sub_20B1A5214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1A525C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v27;
  uint64_t v28[27];
  _BYTE v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v28);
    sub_20B0D0A00((uint64_t)v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v28);
  sub_20B0D0A00((uint64_t)v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20AF4EA3C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0D978C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  return sub_20B16C93C(a2, v3 + 200);
}

void sub_20B1A56C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B1A5708(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v25;
  uint64_t v26[27];
  _BYTE v27[8];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v26);
    sub_20B0D0A00((uint64_t)v27, v26);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v27);
        if (!v42)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v25, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v8;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v33;
    v10 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v11;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v12;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v15 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v40;
LABEL_45:
    *((_QWORD *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v26);
  sub_20B0D0A00((uint64_t)v27, v26);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v25, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v17;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v33;
    v19 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v20;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v21;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v23 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  sub_20AF4EA3C((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0DD1A0((uint64_t)v26, a2, v4);
  return sub_20B16CEDC(a2, v3 + 200);
}

void sub_20B1A5B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1A5B78(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v27;
  uint64_t v28[27];
  _BYTE v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v28);
    sub_20B0D0A00((uint64_t)v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v28);
  sub_20B0D0A00((uint64_t)v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20AF4EA3C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0DE788(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  return sub_20B16D420(a2, v3 + 200);
}

void sub_20B1A5FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1A6024(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  void *__p;
  uint64_t v34;
  char v35;
  _BYTE v36[8];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)&__p);
    sub_20B0D0A00((uint64_t)v36, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v36);
        if (!v51)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v37;
    *(_BYTE *)(v3 + 64) = 0;
    if (v40)
    {
      v8 = v39;
      *(_OWORD *)(v3 + 40) = v38;
      *(_QWORD *)(v3 + 56) = v8;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v42;
    v10 = v41;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v45)
    {
      v11 = v44;
      *(_OWORD *)(v3 + 96) = v43;
      *(_QWORD *)(v3 + 112) = v11;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v48)
    {
      v12 = v47;
      *(_OWORD *)(v3 + 128) = v46;
      *(_QWORD *)(v3 + 144) = v12;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v51;
    if (v51)
    {
      *(_OWORD *)(v3 + 160) = v49;
      *(_QWORD *)(v3 + 176) = v50;
      v49 = 0uLL;
      v50 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v49;
    if (!(_QWORD)v49)
      goto LABEL_46;
    v15 = *((_QWORD *)&v49 + 1);
    v16 = (void *)v49;
    if (*((_QWORD *)&v49 + 1) == (_QWORD)v49)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v49;
LABEL_45:
    *((_QWORD *)&v49 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)&__p);
  sub_20B0D0A00((uint64_t)v36, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v37;
    *(_BYTE *)(v3 + 64) = 0;
    if (v40)
    {
      v17 = v39;
      *(_OWORD *)(v3 + 40) = v38;
      *(_QWORD *)(v3 + 56) = v17;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v42;
    v19 = v41;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v45)
    {
      v20 = v44;
      *(_OWORD *)(v3 + 96) = v43;
      *(_QWORD *)(v3 + 112) = v20;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v48)
    {
      v21 = v47;
      *(_OWORD *)(v3 + 128) = v46;
      *(_QWORD *)(v3 + 144) = v21;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v51;
    if (v51)
    {
      *(_OWORD *)(v3 + 160) = v49;
      *(_QWORD *)(v3 + 176) = v50;
      v49 = 0uLL;
      v50 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v36);
  if (v51)
  {
LABEL_38:
    v14 = v49;
    if (!(_QWORD)v49)
      goto LABEL_46;
    v23 = *((_QWORD *)&v49 + 1);
    v16 = (void *)v49;
    if (*((_QWORD *)&v49 + 1) == (_QWORD)v49)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v48 && SHIBYTE(v47) < 0)
    operator delete((void *)v46);
  if (v45 && SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  sub_20AF4EA3C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20B514490(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20B0E0A94((uint64_t)&__p, a2, v4, v25);
  else
    sub_20B0E0C84(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (v35 < 0)
      {
        if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_80:
          v29 = 0;
          if (v35 < 0)
            goto LABEL_83;
          goto LABEL_69;
        }
      }
      else if (v35 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_80;
      }
      v29 = 1;
      if (v35 < 0)
LABEL_83:
        operator delete(__p);
LABEL_69:
      if (*(_BYTE *)(a2 + 131))
        v28 = 0;
      else
        v28 = v29;
    }
    while ((v28 & 1) != 0);
  }
  LODWORD(__p) = 2;
  sub_20B514490(a2, &__p);
  v26 = __p;
  if (__p >= 2)
    v27 = 2;
  else
    v27 = __p;
  if (v27 < 2)
    sub_20B16D9C0((uint64_t)&__p, a2, v3 + 200);
  else
    sub_20B16DB2C(a2, v3 + 200);
  if (v26 >= 2 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (v35 < 0)
      {
        if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_99:
          v31 = 0;
          if (v35 < 0)
            goto LABEL_102;
          goto LABEL_88;
        }
      }
      else if (v35 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_99;
      }
      v31 = 1;
      if (v35 < 0)
LABEL_102:
        operator delete(__p);
LABEL_88:
      if (*(_BYTE *)(a2 + 131))
        v30 = 0;
      else
        v30 = v31;
    }
    while ((v30 & 1) != 0);
  }
}

void sub_20B1A6620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1A6668(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v25);
    sub_20B0D0A00((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v25);
  sub_20B0D0A00((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20AF4EA3C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0E2418((uint64_t)v25, a2, v4);
  sub_20B16DD84((uint64_t)v25, a2, v3 + 200);
}

void sub_20B1A6A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1A6ADC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C4100D8;
  sub_20AF4EA3C(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 40));
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_8;
LABEL_4:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20B1A6B74(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  unsigned __int128 *v12;
  unsigned __int128 v13;

  *(_QWORD *)result = off_24C4100D8;
  v2 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(result + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  v3 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(result + 40) = v3;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(result + 72) = v4;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v5 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(result + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(result + 96) = v5;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v6 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(result + 144) = 0;
  *(_OWORD *)(result + 128) = v6;
  *(_BYTE *)(result + 168) = 0;
  if (*(_BYTE *)(a2 + 168))
  {
    v7 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(result + 160) = *(_QWORD *)(a2 + 160);
    *(_OWORD *)(result + 144) = v7;
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_BYTE *)(result + 168) = 1;
  }
  *(_BYTE *)(result + 176) = 0;
  *(_BYTE *)(result + 200) = 0;
  if (*(_BYTE *)(a2 + 200))
  {
    v8 = *(_OWORD *)(a2 + 176);
    *(_QWORD *)(result + 192) = *(_QWORD *)(a2 + 192);
    *(_OWORD *)(result + 176) = v8;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    *(_BYTE *)(result + 200) = 1;
  }
  v9 = *(_OWORD *)(a2 + 208);
  v10 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(result + 240) = 0;
  *(_QWORD *)(result + 224) = v10;
  *(_OWORD *)(result + 208) = v9;
  *(_BYTE *)(result + 288) = 0;
  if (*(_BYTE *)(a2 + 288))
  {
    v11 = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(result + 256) = *(_QWORD *)(a2 + 256);
    *(_OWORD *)(result + 240) = v11;
    *(_QWORD *)(a2 + 248) = 0;
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(a2 + 240) = 0;
    v12 = (unsigned __int128 *)(a2 + 272);
    do
      v13 = __ldaxp(v12);
    while (__stlxp(v13, v12));
    *(_OWORD *)(result + 272) = v13;
    *(_BYTE *)(result + 288) = 1;
  }
  *(_BYTE *)(result + 304) = 0;
  *(_BYTE *)(result + 328) = 0;
  if (*(_BYTE *)(a2 + 328))
  {
    *(_QWORD *)(result + 304) = 0;
    *(_QWORD *)(result + 312) = 0;
    *(_QWORD *)(result + 320) = 0;
    *(_OWORD *)(result + 304) = *(_OWORD *)(a2 + 304);
    *(_QWORD *)(result + 320) = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a2 + 304) = 0;
    *(_QWORD *)(a2 + 312) = 0;
    *(_QWORD *)(a2 + 320) = 0;
    *(_BYTE *)(result + 328) = 1;
  }
  *(_QWORD *)result = off_24C410058;
  return result;
}

void sub_20B1A6D04(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C4100D8;
  sub_20AF4EA3C(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*(void **)(a1 + 40));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_10:
    JUMPOUT(0x20BD3583CLL);
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  goto LABEL_10;
}

uint64_t sub_20B1A6DA0(uint64_t a1)
{
  return a1 + 128;
}

unsigned __int8 **sub_20B1A6DA8(char *a1, char *lpsrc)
{
  unsigned __int8 **result;
  unsigned __int8 **v5[6];
  _QWORD v6[6];

  result = (unsigned __int8 **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C410098, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return (unsigned __int8 **)1;
    }
    else
    {
      v6[0] = a1 + 8;
      v6[1] = a1 + 32;
      v6[2] = a1 + 40;
      v6[3] = a1 + 64;
      v6[4] = a1 + 72;
      v6[5] = a1 + 96;
      v5[0] = result + 1;
      v5[1] = result + 4;
      v5[2] = result + 5;
      v5[3] = result + 8;
      v5[4] = result + 9;
      v5[5] = result + 12;
      return (unsigned __int8 **)sub_20B1A8500((uint64_t)v6, v5);
    }
  }
  return result;
}

void sub_20B1A6E68(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20B1A8778();
  sub_20B1A6F1C(a1);
  sub_20AF4DD70(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 128, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20B1A6F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1A6F1C(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254636398);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254636398))
  {
    v4 = sub_20B1A81B8();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20AF4E53C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20AEC60F4(&xmmword_254636380, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254636390 = *(_QWORD *)(v9 - 8);
      xmmword_254636380 = v7;
    }
    sub_20AEC2E90(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254636380, &dword_20AEBB000);
    __cxa_guard_release(&qword_254636398);
  }
  return sub_20B1A8B38(&xmmword_254636380, (__int128 *)"{", (__int128 *)(a1 + 8), (__int128 *)"}");
}

void sub_20B1A702C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20AEC2E90(&a9);
  __cxa_guard_abort(&qword_254636398);
  _Unwind_Resume(a1);
}

void sub_20B1A704C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636398);
  _Unwind_Resume(a1);
}

void sub_20B1A7064(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 10;
}

void sub_20B1A7090(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_20B2346E4(lpsrc, 10, a2);
}

uint64_t sub_20B1A70C8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C4100D8;
  sub_20AF4EA3C(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 40));
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_8;
LABEL_4:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20B1A7160(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C4100D8;
  sub_20AF4EA3C(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*(void **)(a1 + 40));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_10:
    JUMPOUT(0x20BD3583CLL);
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  goto LABEL_10;
}

uint64_t sub_20B1A71FC(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20B1A7C54();
  return sub_20B1A7320(v2, (__int128 *)"{", (__int128 *)(a1 + 8), (__int128 *)",", a1 + 128, (__int128 *)"}");
}

uint64_t sub_20B1A7254(uint64_t a1)
{
  return sub_20B1A83B4(a1 + 8);
}

void sub_20B1A725C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20B1A7288(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C4100D8;
  sub_20AF4EA3C(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 40));
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_8;
LABEL_4:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20B1A7320(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5, __int128 *a6)
{
  uint64_t result;
  __int128 v12;
  uint64_t v13;
  int v14;
  __int128 *v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  char v21;
  __int128 *v22;
  const char *v23;
  __int128 *v24;
  const char *v25;
  const char *v26;
  __int128 **v27;

  v14 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20AEC60F4(&v12, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    v12 = *a1;
    v13 = *((_QWORD *)a1 + 2);
  }
  v14 = 1;
  v15 = &v12;
  v16 = a2;
  v17 = &v12;
  v18 = a2;
  v19 = a2;
  sub_20AED5C4C((uint64_t *)&v17, (uint64_t)&v12);
  v15 = a3;
  v16 = (__int128 *)((char *)a3 + 24);
  v17 = a3 + 2;
  v18 = (__int128 *)((char *)a3 + 56);
  v19 = a3 + 4;
  v20 = (uint64_t)a3 + 88;
  v22 = &v12;
  v23 = "{";
  v24 = &v12;
  v25 = "{";
  v26 = "{";
  if (v14 == -1)
    goto LABEL_12;
  v27 = &v22;
  ((void (*)(__int128 ***, __int128 *))off_24C40DCC0[v14])(&v27, &v12);
  LOBYTE(v22) = 1;
  v23 = (const char *)&v12;
  v24 = (__int128 *)&v21;
  sub_20B1A7600((uint64_t)&v15, (uint64_t)&v22);
  v22 = &v12;
  v23 = "}";
  v24 = &v12;
  v25 = "}";
  v26 = "}";
  if (v14 == -1)
LABEL_12:
    sub_20AECFAB8();
  v27 = &v22;
  ((void (*)(__int128 ***, __int128 *))off_24C40DCC0[v14])(&v27, &v12);
  v15 = &v12;
  v16 = a4;
  v17 = &v12;
  v18 = a4;
  v19 = a4;
  if (v14 == -1)
    sub_20AECFAB8();
  v22 = (__int128 *)&v15;
  ((void (*)(__int128 **, __int128 *))off_24C40DCC0[v14])(&v22, &v12);
  sub_20AF4D170((uint64_t)&v27, (uint64_t)&v12, a5);
  v15 = &v12;
  v16 = a6;
  v17 = &v12;
  v18 = a6;
  v19 = a6;
  if (v14 == -1)
    sub_20AECFAB8();
  v22 = (__int128 *)&v15;
  ((void (*)(__int128 **, __int128 *))off_24C40DCC0[v14])(&v22, &v12);
  if (v14 == -1)
    sub_20AECFAB8();
  v15 = (__int128 *)&v22;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C40DC60[v14])(&v15, &v12);
  if (v14 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C40DC48[v14])(&v15, &v12);
  return result;
}

void sub_20B1A7570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1A7588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1A759C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1A75B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1A75C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1A75D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1A75EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1A7600(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  uint64_t *v23;

  v4 = *(const char **)a1;
  if (!*(_BYTE *)a2)
  {
    v18 = *(_QWORD *)(a2 + 8);
    v19 = ",";
    v20 = v18;
    v21 = ",";
    v22 = ",";
    v5 = *(unsigned int *)(v18 + 24);
    if ((_DWORD)v5 == -1)
      goto LABEL_21;
    v23 = &v18;
    ((void (*)(uint64_t **))off_24C40DCC0[v5])(&v23);
  }
  *(_BYTE *)a2 = 0;
  v18 = *(_QWORD *)(a2 + 8);
  v19 = v4;
  v20 = v18;
  v21 = v4;
  v22 = v4;
  v6 = *(unsigned int *)(v18 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_21;
  v23 = &v18;
  ((void (*)(uint64_t **))off_24C40DCA8[v6])(&v23);
  if (!*(_BYTE *)a2)
  {
    v18 = *(_QWORD *)(a2 + 8);
    v19 = ",";
    v20 = v18;
    v21 = ",";
    v22 = ",";
    v7 = *(unsigned int *)(v18 + 24);
    if ((_DWORD)v7 == -1)
      goto LABEL_21;
    v23 = &v18;
    ((void (*)(uint64_t **))off_24C40DCC0[v7])(&v23);
  }
  *(_BYTE *)a2 = 0;
  sub_20B1A79B0((uint64_t)&v18, *(_QWORD *)(a2 + 8));
  v8 = *(const char **)(a1 + 16);
  if (!*(_BYTE *)a2)
  {
    v18 = *(_QWORD *)(a2 + 8);
    v19 = ",";
    v20 = v18;
    v21 = ",";
    v22 = ",";
    v9 = *(unsigned int *)(v18 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_21;
    v23 = &v18;
    ((void (*)(uint64_t **))off_24C40DCC0[v9])(&v23);
  }
  *(_BYTE *)a2 = 0;
  v18 = *(_QWORD *)(a2 + 8);
  v19 = v8;
  v20 = v18;
  v21 = v8;
  v22 = v8;
  v10 = *(unsigned int *)(v18 + 24);
  if ((_DWORD)v10 == -1)
    goto LABEL_21;
  v23 = &v18;
  ((void (*)(uint64_t **))off_24C40DCA8[v10])(&v23);
  sub_20B1A78A8(a2, *(unsigned int **)(a1 + 24));
  v11 = *(const char **)(a1 + 32);
  if (!*(_BYTE *)a2)
  {
    v18 = *(_QWORD *)(a2 + 8);
    v19 = ",";
    v20 = v18;
    v21 = ",";
    v22 = ",";
    v12 = *(unsigned int *)(v18 + 24);
    if ((_DWORD)v12 == -1)
      goto LABEL_21;
    v23 = &v18;
    ((void (*)(uint64_t **))off_24C40DCC0[v12])(&v23);
  }
  *(_BYTE *)a2 = 0;
  v18 = *(_QWORD *)(a2 + 8);
  v19 = v11;
  v20 = v18;
  v21 = v11;
  v22 = v11;
  v13 = *(unsigned int *)(v18 + 24);
  if ((_DWORD)v13 == -1)
    goto LABEL_21;
  v23 = &v18;
  ((void (*)(uint64_t **))off_24C40DCA8[v13])(&v23);
  v14 = *(const char **)(a1 + 40);
  if (!*(_BYTE *)a2)
  {
    v18 = *(_QWORD *)(a2 + 8);
    v19 = ",";
    v20 = v18;
    v21 = ",";
    v22 = ",";
    v15 = *(unsigned int *)(v18 + 24);
    if ((_DWORD)v15 == -1)
      goto LABEL_21;
    v23 = &v18;
    ((void (*)(uint64_t **))off_24C40DCC0[v15])(&v23);
  }
  *(_BYTE *)a2 = 0;
  v18 = *(_QWORD *)(a2 + 8);
  v19 = v14;
  v20 = v18;
  v21 = v14;
  v22 = v14;
  v16 = *(unsigned int *)(v18 + 24);
  if ((_DWORD)v16 == -1)
LABEL_21:
    sub_20AECFAB8();
  v23 = &v18;
  return ((uint64_t (*)(uint64_t **))off_24C40DCA8[v16])(&v23);
}

void sub_20B1A78A8(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  uint64_t *v13;

  if (!*(_BYTE *)a1)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (std::string *)",";
    v10 = v8;
    v11 = (std::string *)",";
    v12 = (std::string *)",";
    v4 = *(unsigned int *)(v8 + 24);
    if ((_DWORD)v4 == -1)
      sub_20AECFAB8();
    v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    ((void (*)(std::string *))off_24C40DCC0[v4])(&v7);
  }
  *(_BYTE *)a1 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  std::to_string(&v7, *a2);
  v8 = v5;
  v9 = &v7;
  v10 = v5;
  v11 = &v7;
  v12 = &v7;
  v6 = *(unsigned int *)(v5 + 24);
  if ((_DWORD)v6 == -1)
    sub_20AECFAB8();
  v13 = &v8;
  ((void (*)(uint64_t **, uint64_t))off_24C40DC30[v6])(&v13, v5);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_20B1A7994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1A79B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  size_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__dst[2];
  unint64_t v18;
  _QWORD v19[5];
  _QWORD *v20;

  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_QWORD *)(v3 + 272) = 0;
  sub_20AEC0BD8(v3);
  v19[0] = v3;
  std::ostream::operator<<();
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(v3 + 112);
    v8 = *(_QWORD *)(v3 + 72);
    if (v7 < v8)
    {
      *(_QWORD *)(v3 + 112) = v8;
      v7 = v8;
    }
    v9 = *(const void **)(v3 + 64);
    v5 = v7 - (_QWORD)v9;
    if (v7 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v4 & 8) == 0)
    {
      v5 = 0;
      HIBYTE(v18) = 0;
      v6 = __dst;
      goto LABEL_14;
    }
    v9 = *(const void **)(v3 + 40);
    v5 = *(_QWORD *)(v3 + 56) - (_QWORD)v9;
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v6 = (void **)operator new(v10 + 1);
    __dst[1] = (void *)v5;
    v18 = v11 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_13;
  }
  HIBYTE(v18) = v5;
  v6 = __dst;
  if (v5)
LABEL_13:
    memmove(v6, v9, v5);
LABEL_14:
  *((_BYTE *)v6 + v5) = 0;
  v12 = v19[0];
  if (v19[0])
  {
    v13 = MEMORY[0x24BEDB7F0];
    v14 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v19[0] = *MEMORY[0x24BEDB7F0];
    v15 = *(_QWORD *)(v13 + 72);
    *(_QWORD *)(v12 + *(_QWORD *)(v14 - 24)) = *(_QWORD *)(v13 + 64);
    *(_QWORD *)(v12 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v12 + 16) = v15;
    if (*(char *)(v12 + 111) < 0)
      operator delete(*(void **)(v12 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v12 + 128);
    MEMORY[0x20BD3583C](v12, 0x10B2C40EED050F3);
  }
  v19[0] = a2;
  v19[1] = __dst;
  v19[2] = a2;
  v19[3] = __dst;
  v19[4] = __dst;
  v16 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v16 == -1)
    sub_20AECFAB8();
  v20 = v19;
  ((void (*)(_QWORD **, uint64_t))off_24C40DC30[v16])(&v20, a2);
  if (SHIBYTE(v18) < 0)
    operator delete(__dst[0]);
}

void sub_20B1A7C00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B1A7C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1A7C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20B1A7C54()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254636258);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254636258))
    return &xmmword_254636240;
  v2 = sub_20B1A7D30();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254636240, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254636250 = v2->__r_.__value_.__r.__words[2];
    xmmword_254636240 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254636240, &dword_20AEBB000);
  __cxa_guard_release(&qword_254636258);
  return &xmmword_254636240;
}

void sub_20B1A7D18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636258);
  _Unwind_Resume(a1);
}

std::string *sub_20B1A7D30()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254636278);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254636278))
    return &stru_254636260;
  sub_20B1A7FD4((uint64_t)__p);
  sub_20B1A7E20((char *)__p, &stru_254636260);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254636260, &dword_20AEBB000);
  __cxa_guard_release(&qword_254636278);
  return &stru_254636260;
}

void sub_20B1A7DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254636278);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254636278);
  _Unwind_Resume(a1);
}

void sub_20B1A7E20(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B1A81B8();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20AF4DB74();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 2uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20B1A7F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20AEC2E90((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B1A7FD4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546362F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546362F8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::TextLog>]", qword_2546362E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546362E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546362F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254636318);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254636318))
  {
    v5 = sub_20AED4780(qword_2546362E0, "<", 0);
    sub_20AED467C(qword_2546362E0, 0, v5, qword_254636300);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254636300, &dword_20AEBB000);
    __cxa_guard_release(&qword_254636318);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254636338);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254636338))
  {
    sub_20B531658((uint64_t)qword_254636300, (uint64_t)&xmmword_254636320);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254636320, &dword_20AEBB000);
    __cxa_guard_release(&qword_254636338);
  }
  if (byte_254636337 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254636320, *((unint64_t *)&xmmword_254636320 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254636320;
    *(_QWORD *)(a1 + 16) = unk_254636330;
  }
}

void sub_20B1A8170(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636338);
  _Unwind_Resume(a1);
}

void sub_20B1A8188(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636318);
  _Unwind_Resume(a1);
}

void sub_20B1A81A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546362F8);
  _Unwind_Resume(a1);
}

__int128 *sub_20B1A81B8()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254636298);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254636298))
    return &xmmword_254636280;
  v2 = (char *)sub_20B1A8294();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254636280, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254636290 = *((_QWORD *)v2 + 2);
    xmmword_254636280 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254636280, &dword_20AEBB000);
  __cxa_guard_release(&qword_254636298);
  return &xmmword_254636280;
}

void sub_20B1A827C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636298);
  _Unwind_Resume(a1);
}

void *sub_20B1A8294()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2546362B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546362B8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::TextLog]", qword_2546362A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546362A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546362B8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546362D8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_2546362D8))
    return &unk_2546362C0;
  sub_20B531658((uint64_t)qword_2546362A0, (uint64_t)&unk_2546362C0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_2546362C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546362D8);
  return &unk_2546362C0;
}

void sub_20B1A8384(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546362D8);
  _Unwind_Resume(a1);
}

void sub_20B1A839C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546362B8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1A83B4(uint64_t a1)
{
  uint64_t result;
  _DWORD v2[6];
  int v3;
  _QWORD v4[6];
  char v5;
  _DWORD *v6;
  const char *v7;
  char *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v3 = 0;
  v4[0] = a1;
  v4[1] = a1 + 24;
  v4[2] = a1 + 32;
  v4[3] = a1 + 56;
  v4[4] = a1 + 64;
  v4[5] = a1 + 88;
  sub_20AED5B5C(v2, "{");
  LOBYTE(v6) = 1;
  v7 = (const char *)v2;
  v8 = &v5;
  sub_20B1A7600((uint64_t)v4, (uint64_t)&v6);
  v6 = v2;
  v7 = "}";
  v8 = (char *)v2;
  v9 = "}";
  v10 = "}";
  if (v3 == -1)
    sub_20AECFAB8();
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C40DCC0[v3])(&v11, v2);
  if (v3 == -1)
    sub_20AECFAB8();
  v4[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C40DC60[v3])(v4, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C40DC48[v3])(v4, v2);
  return result;
}

void sub_20B1A84D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1A84EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1A8500(uint64_t a1, unsigned __int8 ***a2)
{
  const void **v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 **v10;
  uint64_t result;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  BOOL v39;

  v2 = *(const void ***)a1;
  v3 = *a2;
  v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (unsigned __int8 *)*(unsigned __int8 *)(*(_QWORD *)a1 + 23);
  else
    v5 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  v6 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v7 = (char)v6;
  if ((char)v6 < 0)
    v6 = v3[1];
  if (v5 != v6)
    return 0;
  if (v7 >= 0)
    v10 = *a2;
  else
    v10 = (unsigned __int8 **)*v3;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v10, *(_QWORD *)(*(_QWORD *)a1 + 8)))
      return 0;
  }
  else if (*(_BYTE *)(*(_QWORD *)a1 + 23))
  {
    while (*(unsigned __int8 *)v2 == *(unsigned __int8 *)v10)
    {
      v2 = (const void **)((char *)v2 + 1);
      v10 = (unsigned __int8 **)((char *)v10 + 1);
      if (!--v4)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  if (**(_DWORD **)(a1 + 8) != *(_DWORD *)a2[1])
    return 0;
  v12 = *(unsigned __int8 **)(a1 + 16);
  v13 = (unsigned __int8 *)a2[2];
  v14 = v12[23];
  if ((v14 & 0x80u) == 0)
    v15 = (unsigned __int8 *)v12[23];
  else
    v15 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
  v16 = (unsigned __int8 *)v13[23];
  v17 = (char)v16;
  if ((char)v16 < 0)
    v16 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
  if (v15 != v16)
    return 0;
  if (v17 >= 0)
    v18 = (unsigned __int8 *)a2[2];
  else
    v18 = *(unsigned __int8 **)v13;
  if ((v14 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v12, v18, *((_QWORD *)v12 + 1)))
      return 0;
  }
  else if (v12[23])
  {
    while (*v12 == *v18)
    {
      ++v12;
      ++v18;
      if (!--v14)
        goto LABEL_34;
    }
    return 0;
  }
LABEL_34:
  if (**(_DWORD **)(a1 + 24) != *(_DWORD *)a2[3])
    return 0;
  v19 = *(unsigned __int8 **)(a1 + 32);
  v20 = (unsigned __int8 *)a2[4];
  v21 = v19[23];
  if ((v21 & 0x80u) == 0)
    v22 = (unsigned __int8 *)v19[23];
  else
    v22 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
  v23 = (unsigned __int8 *)v20[23];
  v24 = (char)v23;
  if ((char)v23 < 0)
    v23 = (unsigned __int8 *)*((_QWORD *)v20 + 1);
  if (v22 != v23)
    return 0;
  if (v24 >= 0)
    v25 = (unsigned __int8 *)a2[4];
  else
    v25 = *(unsigned __int8 **)v20;
  if ((v21 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v19, v25, *((_QWORD *)v19 + 1)))
      goto LABEL_50;
    return 0;
  }
  if (v19[23])
  {
    while (*v19 == *v25)
    {
      ++v19;
      ++v25;
      if (!--v21)
        goto LABEL_50;
    }
    return 0;
  }
LABEL_50:
  v26 = *(unsigned __int8 **)(a1 + 40);
  v27 = (unsigned __int8 *)a2[5];
  v28 = v26[23];
  if ((v28 & 0x80u) == 0)
    v29 = (unsigned __int8 *)v26[23];
  else
    v29 = (unsigned __int8 *)*((_QWORD *)v26 + 1);
  v30 = (unsigned __int8 *)v27[23];
  v31 = (char)v30;
  if ((char)v30 < 0)
    v30 = (unsigned __int8 *)*((_QWORD *)v27 + 1);
  if (v29 != v30)
    return 0;
  if (v31 >= 0)
    v32 = (unsigned __int8 *)a2[5];
  else
    v32 = *(unsigned __int8 **)v27;
  if ((v28 & 0x80) != 0)
    return memcmp(*(const void **)v26, v32, *((_QWORD *)v26 + 1)) == 0;
  if (!v26[23])
    return 1;
  v33 = v28 - 1;
  do
  {
    v35 = *v26++;
    v34 = v35;
    v37 = *v32++;
    v36 = v37;
    v39 = v33-- != 0;
    result = v34 == v36;
  }
  while (v34 == v36 && v39);
  return result;
}

std::string *sub_20B1A8778()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254636358);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254636358))
  {
    sub_20AEC0D64(v9, "viz::PackageData");
    v2 = sub_20B1A81B8();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_20B1A8A40();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20AEC60F4(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_20AEC7620(v8, (uint64_t)__dst, 4uLL);
    sub_20B53170C((char *)v9, (uint64_t *)v8, &stru_254636340, v6, v7);
    sub_20AEC2E90(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254636340, &dword_20AEBB000);
        __cxa_guard_release(&qword_254636358);
        return &stru_254636340;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_254636340;
}

void sub_20B1A895C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20AEC2E90(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_254636358);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_254636358);
  _Unwind_Resume(a1);
}

std::string *sub_20B1A8A40()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254636378);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254636378))
    return &stru_254636360;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 10U]", __p);
  sub_20B531884((uint64_t)__p, &stru_254636360);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254636360, &dword_20AEBB000);
  __cxa_guard_release(&qword_254636378);
  return &stru_254636360;
}

void sub_20B1A8AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254636378);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254636378);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1A8B38(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  char v17;
  __int128 *v18;
  const char *v19;
  __int128 *v20;
  const char *v21;
  const char *v22;
  __int128 **v23;

  v10 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20AEC60F4(&v8, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    v8 = *a1;
    v9 = *((_QWORD *)a1 + 2);
  }
  v10 = 1;
  v11 = &v8;
  v12 = a2;
  v13 = &v8;
  v14 = a2;
  v15 = a2;
  sub_20AED5C4C((uint64_t *)&v13, (uint64_t)&v8);
  v11 = a3;
  v12 = (__int128 *)((char *)a3 + 24);
  v13 = a3 + 2;
  v14 = (__int128 *)((char *)a3 + 56);
  v15 = a3 + 4;
  v16 = (uint64_t)a3 + 88;
  v18 = &v8;
  v19 = "{";
  v20 = &v8;
  v21 = "{";
  v22 = "{";
  if (v10 == -1)
    goto LABEL_11;
  v23 = &v18;
  ((void (*)(__int128 ***, __int128 *))off_24C40DCC0[v10])(&v23, &v8);
  LOBYTE(v18) = 1;
  v19 = (const char *)&v8;
  v20 = (__int128 *)&v17;
  sub_20B1A7600((uint64_t)&v11, (uint64_t)&v18);
  v18 = &v8;
  v19 = "}";
  v20 = &v8;
  v21 = "}";
  v22 = "}";
  if (v10 == -1)
LABEL_11:
    sub_20AECFAB8();
  v23 = &v18;
  ((void (*)(__int128 ***, __int128 *))off_24C40DCC0[v10])(&v23, &v8);
  v11 = &v8;
  v12 = a4;
  v13 = &v8;
  v14 = a4;
  v15 = a4;
  if (v10 == -1)
    sub_20AECFAB8();
  v18 = (__int128 *)&v11;
  ((void (*)(__int128 **, __int128 *))off_24C40DCC0[v10])(&v18, &v8);
  if (v10 == -1)
    sub_20AECFAB8();
  v11 = (__int128 *)&v18;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C40DC60[v10])(&v11, &v8);
  if (v10 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C40DC48[v10])(&v11, &v8);
  return result;
}

void sub_20B1A8D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1A8D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1A8D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1A8D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1A8D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1A8D94(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a1 = off_24C4100D8;
  v4 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 6);
  v5 = a2[2];
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(a1 + 40) = v5;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 14);
  v6 = a2[4];
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 10);
  *(_OWORD *)(a1 + 72) = v6;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 8) = 0;
  v7 = *(__int128 *)((char *)a2 + 88);
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 13);
  *(_OWORD *)(a1 + 96) = v7;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 11) = 0;
  sub_20AF4CAF4(a1 + 128, a3);
  *(_QWORD *)a1 = off_24C410058;
  return a1;
}

void sub_20B1A8E68(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (v1[119] < 0)
  {
    operator delete(*v5);
    if ((v1[95] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v1[63] & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v1[95] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v4);
  if ((v1[63] & 0x80000000) == 0)
  {
LABEL_4:
    if ((v1[31] & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*v3);
  if ((v1[31] & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1A8ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned __int8 **v18;
  _BYTE *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  unsigned __int8 **v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[6];

  v37[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v32);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v32);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v32);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20B0C0D90(v6, (uint64_t)v26);
  }
  else if (v7 == 1)
  {
    sub_20B0F9F8C(v6, (uint64_t)v26);
  }
  else
  {
    if (v7)
      sub_20AECFAB8();
    sub_20B0C6034(v6, (uint64_t)v26);
  }
  v19 = v32;
  v20 = &v33;
  v21 = &v34;
  v22 = &v35;
  v23 = &v36;
  v24 = (unsigned __int8 **)v37;
  v13 = v26;
  v14 = &v27;
  v15 = &v28;
  v16 = &v29;
  v17 = &v30;
  v18 = (unsigned __int8 **)&v31;
  if (sub_20B2178A8((uint64_t)&v25, &v19, &v13))
  {
    if (*((_BYTE *)v24 + 24) && *((_BYTE *)v18 + 24))
    {
      v8 = *v24;
      v9 = v24[1];
      v10 = *v18;
      if (v9 - *v24 == v18[1] - *v18)
      {
        if (v8 != v9)
        {
          while (sub_20B2167B8(v8, v10))
          {
            v8 += 96;
            v10 += 96;
            if (v8 == v9)
              goto LABEL_23;
          }
          goto LABEL_22;
        }
LABEL_23:
        v19 = (_BYTE *)(a1 + 200);
        v20 = (uint64_t *)(a1 + 224);
        v21 = (uint64_t *)(a1 + 232);
        v22 = (uint64_t *)(a1 + 256);
        v23 = (uint64_t *)(a1 + 264);
        v24 = (unsigned __int8 **)(a1 + 288);
        v13 = (_BYTE *)(a2 + 200);
        v14 = (uint64_t *)(a2 + 224);
        v15 = (uint64_t *)(a2 + 232);
        v16 = (uint64_t *)(a2 + 256);
        v17 = (uint64_t *)(a2 + 264);
        v18 = (unsigned __int8 **)(a2 + 288);
        v11 = sub_20B1A9138((uint64_t)&v25, (uint64_t)&v19, (uint64_t)&v13);
        goto LABEL_24;
      }
    }
    else if ((*((_BYTE *)v24 + 24) != 0) == (*((_BYTE *)v18 + 24) != 0))
    {
      goto LABEL_23;
    }
  }
LABEL_22:
  v11 = 0;
LABEL_24:
  sub_20AF4EA3C((uint64_t)v26);
  sub_20AF4EA3C((uint64_t)v32);
  return v11;
}

void sub_20B1A9108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a23);
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B1A9124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1A9138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t result;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v26;
  char v27;

  if ((sub_20B1A92C0((uint64_t)&v27, a2, (unsigned __int8 **)a3) & 1) == 0)
    return 0;
  if (**(_DWORD **)(a2 + 24) != **(_DWORD **)(a3 + 24))
    return 0;
  v5 = *(unsigned __int8 **)(a2 + 32);
  v6 = *(unsigned __int8 ***)(a3 + 32);
  v7 = v5[23];
  if ((v7 & 0x80u) == 0)
    v8 = (unsigned __int8 *)v5[23];
  else
    v8 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
  v9 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
  v10 = (char)v9;
  if ((char)v9 < 0)
    v9 = v6[1];
  if (v8 != v9)
    return 0;
  if (v10 >= 0)
    v11 = *(unsigned __int8 **)(a3 + 32);
  else
    v11 = *v6;
  if ((v7 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v5, v11, *((_QWORD *)v5 + 1)))
      goto LABEL_20;
    return 0;
  }
  if (v5[23])
  {
    while (*v5 == *v11)
    {
      ++v5;
      ++v11;
      if (!--v7)
        goto LABEL_20;
    }
    return 0;
  }
LABEL_20:
  v13 = *(unsigned __int8 **)(a2 + 40);
  v14 = *(unsigned __int8 ***)(a3 + 40);
  v15 = v13[23];
  if ((v15 & 0x80u) == 0)
    v16 = (unsigned __int8 *)v13[23];
  else
    v16 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
  v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
  v18 = (char)v17;
  if ((char)v17 < 0)
    v17 = v14[1];
  if (v16 != v17)
    return 0;
  if (v18 >= 0)
    v19 = *(unsigned __int8 **)(a3 + 40);
  else
    v19 = *v14;
  if ((v15 & 0x80) != 0)
    return memcmp(*(const void **)v13, v19, *((_QWORD *)v13 + 1)) == 0;
  if (!v13[23])
    return 1;
  v20 = v15 - 1;
  do
  {
    v22 = *v13++;
    v21 = v22;
    v24 = *v19++;
    v23 = v24;
    v26 = v20-- != 0;
    result = v21 == v23;
  }
  while (v21 == v23 && v26);
  return result;
}

uint64_t sub_20B1A92C0(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  const void **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v12;
  uint64_t result;
  unsigned __int8 *v14;
  unsigned __int8 **v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;

  v4 = *(const void ***)a2;
  v5 = *a3;
  v6 = *(unsigned __int8 *)(*(_QWORD *)a2 + 23);
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if ((v6 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(*(_QWORD *)a2 + 23);
  else
    v8 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v9 = v5[23];
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *((_QWORD *)v5 + 1);
  if (v8 != v9)
    return 0;
  if (v10 >= 0)
    v12 = v5;
  else
    v12 = *(unsigned __int8 **)v5;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v4, v12, v7))
      return 0;
  }
  else if ((_DWORD)v6)
  {
    while (*(unsigned __int8 *)v4 == *v12)
    {
      v4 = (const void **)((char *)v4 + 1);
      ++v12;
      if (!--v6)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  if (**(unsigned __int8 **)(a2 + 8) != *a3[1])
    return 0;
  v14 = *(unsigned __int8 **)(a2 + 16);
  v15 = (unsigned __int8 **)a3[2];
  v16 = v14[23];
  if ((v16 & 0x80u) == 0)
    v17 = (unsigned __int8 *)v14[23];
  else
    v17 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
  v18 = (unsigned __int8 *)*((unsigned __int8 *)v15 + 23);
  v19 = (char)v18;
  if ((char)v18 < 0)
    v18 = v15[1];
  if (v17 != v18)
    return 0;
  if (v19 >= 0)
    v20 = a3[2];
  else
    v20 = *v15;
  if ((v16 & 0x80) != 0)
    return memcmp(*(const void **)v14, v20, *((_QWORD *)v14 + 1)) == 0;
  if (!v14[23])
    return 1;
  v21 = v16 - 1;
  do
  {
    v23 = *v14++;
    v22 = v23;
    v25 = *v20++;
    v24 = v25;
    v27 = v21-- != 0;
    result = v22 == v24;
  }
  while (v22 == v24 && v27);
  return result;
}

void sub_20B1A9428(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EB80, 0);
  if (v4)
  {
    sub_20B1A97B8(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EBC8, 0);
    if (v5)
    {
      sub_20B1A9DCC(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC50, 0);
      if (v6)
      {
        sub_20B1AA1D8(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC98, 0);
        if (v7)
        {
          sub_20B1AA668(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C2C8)
            sub_20B1AA964(&v9, (uint64_t)a1);
          else
            sub_20B1A958C(&v8, a1);
        }
      }
    }
  }
}

void sub_20B1A958C(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v12 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    v9 = v12;
    if (v8 < 1)
    {
      sub_20B0FF5BC((uint64_t)a2, v4, v12);
      goto LABEL_17;
    }
    if (v8 == 2)
    {
      v12 = 3;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B0FF5BC((uint64_t)a2, v4, v9);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v12 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    v11 = v12;
    if (v10 < 1)
    {
      sub_20B0FEF34((uint64_t)a2, v4, v12);
      goto LABEL_17;
    }
    if (v10 == 2)
    {
      v12 = 3;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B0FEF34((uint64_t)a2, v4, v11);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[2];
    v12 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    v7 = v12;
    if (v6 < 1)
    {
      sub_20B0D8514((uint64_t)a2, v4, v12);
      goto LABEL_17;
    }
    if (v6 == 2)
    {
      v12 = 3;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B0D8514((uint64_t)a2, v4, v7);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
LABEL_17:
  v12 = 1;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
  sub_20B1AAE5C((uint64_t)a2, (__int128 *)(v3 + 200));
}

void sub_20B1A97B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FADD8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B50671C(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5086B4(a2, &v18);
      sub_20B0D1154(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FA468(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B50671C(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5086B4(a2, &v18);
  sub_20B1A9AB8(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B1A9AB8(uint64_t a1, __int128 *a2)
{
  BOOL v3;
  int *v4;
  int v5;
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void *v11[2];
  char v12;
  unsigned __int8 v13;
  void *v14;
  char v15;
  int v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  char v21;
  unint64_t v22;

  sub_20B1A9C48(v11, a2);
  sub_20B508B7C(a1, (uint64_t)v11);
  if (*(_BYTE *)(a1 + 88))
    v3 = *(_QWORD *)(a1 + 80) == 7;
  else
    v3 = 0;
  if (!v3
    || ((v4 = *(int **)(a1 + 72), v5 = *v4, v6 = *(int *)((char *)v4 + 3), v5 == *(_DWORD *)"version")
      ? (v7 = v6 == *(_DWORD *)"sion")
      : (v7 = 0),
        !v7))
  {
    v21 = 6;
    v22 = v13;
    v8 = (unsigned __int8 *)sub_20B506370(a1);
    v9 = *v8;
    *v8 = v21;
    v21 = v9;
    v10 = (void **)*((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v22;
    v22 = (unint64_t)v10;
    sub_20B4181DC((void ***)&v22, v9);
  }
  sub_20B508B7C(a1, (uint64_t)&v14);
  sub_20B5086B4(a1, &v16);
  sub_20B508B7C(a1, (uint64_t)&v17);
  sub_20B508B7C(a1, (uint64_t)&__p);
  if (v20 < 0)
  {
    operator delete(__p);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_13:
      if ((v15 & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_18;
    }
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v17);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v12 & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(v11[0]);
    return;
  }
LABEL_18:
  operator delete(v14);
  if (v12 < 0)
    goto LABEL_19;
}

void sub_20B1A9C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void ***v9;
  uint64_t v10;

  sub_20B4181DC(v9, *(unsigned __int8 *)(v10 - 32));
  sub_20B0CFD2C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1A9C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CFD2C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_20B1A9C48(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    __dst[24] = *((_BYTE *)a2 + 24);
    v5 = __dst + 32;
    if ((*((char *)a2 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    __dst[24] = *((_BYTE *)a2 + 24);
    v5 = __dst + 32;
    if ((*((char *)a2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = a2[2];
      *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 6);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_20AEC60F4(v5, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
LABEL_6:
  *((_DWORD *)__dst + 14) = *((_DWORD *)a2 + 14);
  if (*((char *)a2 + 87) < 0)
  {
    sub_20AEC60F4(__dst + 64, *((void **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v7 = a2[4];
    *((_QWORD *)__dst + 10) = *((_QWORD *)a2 + 10);
    *((_OWORD *)__dst + 4) = v7;
  }
  v8 = __dst + 88;
  if (*((char *)a2 + 111) < 0)
  {
    sub_20AEC60F4(v8, *((void **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v9 = *(__int128 *)((char *)a2 + 88);
    *((_QWORD *)__dst + 13) = *((_QWORD *)a2 + 13);
    *(_OWORD *)v8 = v9;
  }
  return __dst;
}

void sub_20B1A9D58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 87) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20B1A9DCC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v15 = (uint64_t *)(v7 + 16);
      sub_20B51E95C(&v15, 4u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v15, v7 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBED4(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v15 = (uint64_t *)(v8 + 16);
      sub_20B51E95C(&v15, 5u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v15, v8 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBDB8(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v15 = (uint64_t *)(v6 + 16);
      sub_20B51E95C(&v15, 6u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v15, v6 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0D3CE4(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v15 = (uint64_t *)(v14 + 16);
    sub_20B51E95C(&v15, 1u);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v15, v14 + 8);
  }
  sub_20B1A9FBC(a2, (__int128 *)(v3 + 200));
}

void sub_20B1A9FBC(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9[2];
  char v10;
  char v11;
  void *v12[2];
  char v13;
  unsigned int v14;
  void *v15[2];
  char v16;
  void *__p[2];
  char v18;
  uint64_t *v19;
  char v20;

  sub_20B1A9C48(v9, a2);
  v3 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v3 + 40))
  {
    v19 = (uint64_t *)(v3 + 16);
    sub_20B51FA2C((uint64_t)&v20, &v19, (const void **)v9);
  }
  else
  {
    sub_20B51FE64((uint64_t)&v19, v3 + 8, (uint64_t)v9);
  }
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v19 = (uint64_t *)(v4 + 16);
    sub_20B51DD74(&v19, v11);
  }
  else
  {
    if (v11 < 0)
    {
      LOBYTE(v19) = -52;
      BYTE1(v19) = v11;
    }
    else
    {
      LOBYTE(v19) = v11;
    }
    std::ostream::write();
  }
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v19 = (uint64_t *)(v5 + 16);
    sub_20B51FA2C((uint64_t)&v20, &v19, (const void **)v12);
  }
  else
  {
    sub_20B51FE64((uint64_t)&v19, v5 + 8, (uint64_t)v12);
  }
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    v19 = (uint64_t *)(v6 + 16);
    sub_20B51E95C(&v19, v14);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v19, v6 + 8);
  }
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v19 = (uint64_t *)(v7 + 16);
    sub_20B51FA2C((uint64_t)&v20, &v19, (const void **)v15);
  }
  else
  {
    sub_20B51FE64((uint64_t)&v19, v7 + 8, (uint64_t)v15);
  }
  v8 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v8 + 40))
  {
    v19 = (uint64_t *)(v8 + 16);
    sub_20B51FA2C((uint64_t)&v20, &v19, (const void **)__p);
  }
  else
  {
    sub_20B51FE64((uint64_t)&v19, v8 + 8, (uint64_t)__p);
  }
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_24:
      if ((v13 & 0x80000000) == 0)
        goto LABEL_25;
      goto LABEL_29;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v15[0]);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v10 & 0x80000000) == 0)
      return;
LABEL_30:
    operator delete(v9[0]);
    return;
  }
LABEL_29:
  operator delete(v12[0]);
  if (v10 < 0)
    goto LABEL_30;
}

void sub_20B1AA1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CFD2C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1AA1D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FCF30(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B505FB0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5069D0(a2, &v18);
      sub_20B0D4F88(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FC7EC(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B505FB0(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5069D0(a2, &v18);
  sub_20B1AA4D8(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B1AA4D8(uint64_t a1, __int128 *a2)
{
  BOOL v3;
  int *v4;
  int v5;
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  void *v11[2];
  char v12;
  unsigned __int8 v13;
  void *v14;
  char v15;
  int v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  char v21;
  uint64_t v22;

  sub_20B1A9C48(v11, a2);
  sub_20B506E98(a1, (uint64_t)v11);
  if (*(_BYTE *)(a1 + 88))
    v3 = *(_QWORD *)(a1 + 80) == 7;
  else
    v3 = 0;
  if (!v3
    || ((v4 = *(int **)(a1 + 72), v5 = *v4, v6 = *(int *)((char *)v4 + 3), v5 == *(_DWORD *)"version")
      ? (v7 = v6 == *(_DWORD *)"sion")
      : (v7 = 0),
        !v7))
  {
    v21 = 6;
    v22 = v13;
    v8 = (unsigned __int8 *)sub_20B505B08(a1);
    v9 = *v8;
    *v8 = v21;
    v21 = v9;
    v10 = *((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v22;
    v22 = v10;
    sub_20B416E08(&v22, v9);
  }
  sub_20B506E98(a1, (uint64_t)&v14);
  sub_20B5069D0(a1, &v16);
  sub_20B506E98(a1, (uint64_t)&v17);
  sub_20B506E98(a1, (uint64_t)&__p);
  if (v20 < 0)
  {
    operator delete(__p);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_13:
      if ((v15 & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_18;
    }
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v17);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v12 & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(v11[0]);
    return;
  }
LABEL_18:
  operator delete(v14);
  if (v12 < 0)
    goto LABEL_19;
}

void sub_20B1AA634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;

  sub_20B416E08(v9, *(unsigned __int8 *)(v10 - 32));
  sub_20B0CFD2C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1AA654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CFD2C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1AA668(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v16 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v8, (uint64_t)&v16, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FE288(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v14 = *(_BYTE *)(a2 + 32);
        sub_20AEC01D0(v6, (uint64_t)&v14, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20B0D66C4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v17 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v10, (uint64_t)&v17, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v15 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v9, (uint64_t)&v15, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FDCE4(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v18 = v7;
  sub_20AEC01D0(v11, (uint64_t)&v18, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v19 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v13, (uint64_t)&v19, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20B1AA83C(a2, (__int128 *)(v3 + 200));
}

void sub_20B1AA83C(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  void *__dst[2];
  char v5;
  unsigned __int8 v6[8];
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *__p;
  char v12;
  char v13;

  sub_20B1A9C48(__dst, a2);
  sub_20B512F6C(a1, (uint64_t)__dst);
  sub_20B512EB0(a1, v6);
  sub_20B512F6C(a1, (uint64_t)&v7);
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = *(_QWORD **)(a1 + 24);
    v13 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v3, (uint64_t)&v13, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20B512F6C(a1, (uint64_t)&v9);
  sub_20B512F6C(a1, (uint64_t)&__p);
  if (v12 < 0)
  {
    operator delete(__p);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_5:
      if ((v8 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v9);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v5 & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(__dst[0]);
    return;
  }
LABEL_10:
  operator delete(v7);
  if (v5 < 0)
    goto LABEL_11;
}

void sub_20B1AA950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CFD2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1AA964(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int __src;
  uint64_t v11;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v11, 4);
    v7 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE9C0(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v11, 4);
    v8 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE8A4(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    __src = 6;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v11, 4);
    v6 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0D757C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 1;
  sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v11, 4);
  sub_20B1AAAE0(a2, (__int128 *)(v3 + 200));
}

void sub_20B1AAAE0(uint64_t a1, __int128 *a2)
{
  int64_t v3;
  int64_t v4;
  char *p_dst;
  int64_t v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *p_p;
  int64_t v14;
  void *__dst;
  int64_t v16;
  unsigned __int8 v17;
  char v18;
  char v19[7];
  void *v20;
  int64_t v21;
  unsigned __int8 v22;
  char v23[4];
  char v24[4];
  void *v25;
  int64_t v26;
  unsigned __int8 v27;
  void *__p;
  int64_t v29;
  unsigned __int8 v30;
  int64_t __src;
  uint64_t v32;

  sub_20B1A9C48(&__dst, a2);
  v3 = v17;
  if ((v17 & 0x80u) != 0)
    v3 = v16;
  __src = v3;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v32, 8);
  if ((char)v17 < 0)
  {
    p_dst = (char *)__dst;
    v4 = v16;
    if (!__dst && v16)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_42;
      }
      p_dst = 0;
    }
  }
  else
  {
    v4 = v17;
    p_dst = (char *)&__dst;
  }
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), p_dst, &p_dst[v4], v4);
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), &v18, v19, 1);
  v6 = v22;
  if ((v22 & 0x80u) != 0)
    v6 = v21;
  __src = v6;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v32, 8);
  if ((char)v22 < 0)
  {
    v7 = (char *)v20;
    v8 = v21;
    if (!v20 && v21)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_42;
      }
      v7 = 0;
    }
  }
  else
  {
    v7 = (char *)&v20;
    v8 = v22;
  }
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), v7, &v7[v8], v8);
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), v23, v24, 4);
  v9 = v27;
  if ((v27 & 0x80u) != 0)
    v9 = v26;
  __src = v9;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v32, 8);
  if ((char)v27 < 0)
  {
    v10 = (char *)v25;
    v11 = v26;
    if (!v25 && v26)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_42;
      }
      v10 = 0;
    }
  }
  else
  {
    v10 = (char *)&v25;
    v11 = v27;
  }
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), v10, &v10[v11], v11);
  v12 = v30;
  if ((v30 & 0x80u) != 0)
    v12 = v29;
  __src = v12;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v32, 8);
  if (((char)v30 & 0x80000000) == 0)
  {
    p_p = (char *)&__p;
    v14 = v30;
    goto LABEL_33;
  }
  p_p = (char *)__p;
  v14 = v29;
  if (!__p && v29)
  {
    if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360))
    {
      p_p = 0;
      goto LABEL_33;
    }
LABEL_42:
    abort();
  }
LABEL_33:
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), p_p, &p_p[v14], v14);
  if ((char)v30 < 0)
  {
    operator delete(__p);
    if (((char)v27 & 0x80000000) == 0)
    {
LABEL_35:
      if (((char)v22 & 0x80000000) == 0)
        goto LABEL_36;
      goto LABEL_40;
    }
  }
  else if (((char)v27 & 0x80000000) == 0)
  {
    goto LABEL_35;
  }
  operator delete(v25);
  if (((char)v22 & 0x80000000) == 0)
  {
LABEL_36:
    if (((char)v17 & 0x80000000) == 0)
      return;
LABEL_41:
    operator delete(__dst);
    return;
  }
LABEL_40:
  operator delete(v20);
  if ((char)v17 < 0)
    goto LABEL_41;
}

void sub_20B1AAE48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CFD2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1AAE5C(uint64_t a1, __int128 *a2)
{
  void *v3[2];
  char v4;
  uint64_t v5;
  void *v6;
  char v7;
  uint64_t v8;
  void *v9;
  char v10;
  void *__p;
  char v12;

  sub_20B1A9C48(v3, a2);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, v3);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v5);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, &v6);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v8);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, &v9);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, &__p);
  if (v12 < 0)
  {
    operator delete(__p);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v9);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(v3[0]);
    return;
  }
LABEL_8:
  operator delete(v6);
  if (v4 < 0)
    goto LABEL_9;
}

void sub_20B1AAF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CFD2C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_20B1AAF88(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  double result;
  _QWORD *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v10 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED20, 0);
  if (v4)
    return sub_20B1AB640(&v10, (uint64_t)v4);
  v10 = a2;
  v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED58, 0);
  if (v6)
  {
    sub_20B1ABD6C(&v10, v6);
  }
  else
  {
    v10 = a2;
    v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EDE0, 0);
    if (v7)
    {
      return sub_20B1AC22C(&v10, (uint64_t)v7);
    }
    else
    {
      v10 = a2;
      v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EE18, 0);
      if (v8)
      {
        return sub_20B1AC958(&v10, (uint64_t)v8);
      }
      else
      {
        v10 = a2;
        if (*a1 == &off_24C41C508)
          return sub_20B1AD07C(&v10, a1);
        else
          sub_20B1AB0EC(&v9, a1);
      }
    }
  }
  return result;
}

uint64_t sub_20B1AB0EC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v27;
  uint64_t v28[27];
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v28);
    sub_20B0D0A00((uint64_t)&v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)&v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v28);
  sub_20B0D0A00((uint64_t)&v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)&v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20AF4EA3C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *a2;
  v28[0] = a2[1];
  v25 = v28[0];
  v29 = 6;
  (*(void (**)(_QWORD *, unsigned int *))(v24 + 104))(a2, &v29);
  if (v25 < 1)
  {
    if (v29 < 3)
      sub_20B0E41CC((uint64_t)&v29, (uint64_t)a2, v4, v29);
    else
      sub_20B0E4440((uint64_t)a2, v4, v29);
  }
  else
  {
    sub_20B0E3BD4((int *)v28, (uint64_t)a2, v4, v29);
  }
  LODWORD(v28[0]) = 1;
  (*(void (**)(_QWORD *, uint64_t *))(*a2 + 104))(a2, v28);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 144))(a2, v3 + 200);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, v3 + 224);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 144))(a2, v3 + 232);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 104))(a2, v3 + 256);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 144))(a2, v3 + 264);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 144))(a2, v3 + 288);
}

void sub_20B1AB5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_20B1AB640(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v27);
    sub_20B0D0A00((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v27);
  sub_20B0D0A00((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20AF4EA3C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0D978C(a2, v4);
  v27[0] = (uint64_t)"value";
  v27[1] = 5;
  v27[2] = v3 + 200;
  return sub_20B1ABAE4(a2, (uint64_t)v27);
}

void sub_20B1ABA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_20B1ABAE4(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  char *v6;
  void **v7;
  __int128 v8;
  char *v9;
  void **v10;
  void **v11;
  char *v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  double result;
  uint64_t v18;
  uint64_t v19;
  _QWORD *exception;
  __int128 v21;
  uint64_t v22;

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(_QWORD *)(a2 + 16);
  sub_20B50AC94(a1);
  v5 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a1 + 104) = 1;
  v6 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v21 = 0;
  sub_20B4552C4(v6, &v21);
  if (DWORD1(v21))
    goto LABEL_17;
  v7 = (void **)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v22 = 0;
  v21 = 0uLL;
  sub_20B4557C4(v7, (uint64_t)&v21);
  if (*(char *)(v4 + 23) < 0)
    operator delete(*(void **)v4);
  v8 = v21;
  *(_QWORD *)(v4 + 16) = v22;
  *(_OWORD *)v4 = v8;
  v9 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v21 = 0;
  sub_20B4552C4(v9, &v21);
  if ((unint64_t)v21 >= 0x100)
    goto LABEL_17;
  *(_BYTE *)(v4 + 24) = v21;
  v10 = (void **)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v22 = 0;
  v21 = 0uLL;
  sub_20B4557C4(v10, (uint64_t)&v21);
  v11 = (void **)(v4 + 32);
  if (*(char *)(v4 + 55) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = v21;
  *(_QWORD *)(v4 + 48) = v22;
  v12 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v21 = 0;
  sub_20B4552C4(v12, &v21);
  if (DWORD1(v21))
  {
LABEL_17:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  *(_DWORD *)(v4 + 56) = v21;
  v13 = (void **)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v22 = 0;
  v21 = 0uLL;
  sub_20B4557C4(v13, (uint64_t)&v21);
  v14 = (void **)(v4 + 64);
  if (*(char *)(v4 + 87) < 0)
    operator delete(*v14);
  *(_OWORD *)v14 = v21;
  *(_QWORD *)(v4 + 80) = v22;
  v15 = (void **)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v22 = 0;
  v21 = 0uLL;
  sub_20B4557C4(v15, (uint64_t)&v21);
  v16 = (void **)(v4 + 88);
  if (*(char *)(v4 + 111) < 0)
    operator delete(*v16);
  result = *(double *)&v21;
  *(_OWORD *)v16 = v21;
  *(_QWORD *)(v4 + 104) = v22;
  v18 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v18 - 8);
  v19 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(a1 + 48) = v18 - 8;
  *(_QWORD *)(a1 + 72) = v19 - 8;
  return result;
}

void sub_20B1ABD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20B1ABD6C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v27);
    sub_20B0D0A00((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v27);
  sub_20B0D0A00((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20AF4EA3C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0DD1A0((uint64_t)v27, a2, v4);
  LODWORD(v27[0]) = 1;
  v25 = a2[6];
  v24 = a2 + 6;
  sub_20B518854(v25, v27);
  sub_20B518FF8(*v24, (void **)(v3 + 200));
  sub_20B51852C(*v24, (_BYTE *)(v3 + 224));
  sub_20B518FF8(*v24, (void **)(v3 + 232));
  sub_20B518854(*v24, (_DWORD *)(v3 + 256));
  sub_20B518FF8(*v24, (void **)(v3 + 264));
  sub_20B518FF8(*v24, (void **)(v3 + 288));
}

void sub_20B1AC1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_20B1AC22C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v27);
    sub_20B0D0A00((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v27);
  sub_20B0D0A00((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20AF4EA3C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0DE788(a2, v4);
  v27[0] = (uint64_t)"value";
  v27[1] = 5;
  v27[2] = v3 + 200;
  return sub_20B1AC6D0(a2, (uint64_t)v27);
}

void sub_20B1AC688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_20B1AC6D0(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  char *v6;
  void **v7;
  __int128 v8;
  char *v9;
  void **v10;
  void **v11;
  char *v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  double result;
  uint64_t v18;
  uint64_t v19;
  _QWORD *exception;
  __int128 v21;
  uint64_t v22;

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(_QWORD *)(a2 + 16);
  sub_20B50A7A4(a1);
  v5 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a1 + 104) = 1;
  v6 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v21 = 0;
  sub_20B454B2C(v6, &v21);
  if (DWORD1(v21))
    goto LABEL_17;
  v7 = (void **)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v22 = 0;
  v21 = 0uLL;
  sub_20B45502C(v7, (uint64_t)&v21);
  if (*(char *)(v4 + 23) < 0)
    operator delete(*(void **)v4);
  v8 = v21;
  *(_QWORD *)(v4 + 16) = v22;
  *(_OWORD *)v4 = v8;
  v9 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v21 = 0;
  sub_20B454B2C(v9, &v21);
  if ((unint64_t)v21 >= 0x100)
    goto LABEL_17;
  *(_BYTE *)(v4 + 24) = v21;
  v10 = (void **)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v22 = 0;
  v21 = 0uLL;
  sub_20B45502C(v10, (uint64_t)&v21);
  v11 = (void **)(v4 + 32);
  if (*(char *)(v4 + 55) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = v21;
  *(_QWORD *)(v4 + 48) = v22;
  v12 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v21 = 0;
  sub_20B454B2C(v12, &v21);
  if (DWORD1(v21))
  {
LABEL_17:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  *(_DWORD *)(v4 + 56) = v21;
  v13 = (void **)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v22 = 0;
  v21 = 0uLL;
  sub_20B45502C(v13, (uint64_t)&v21);
  v14 = (void **)(v4 + 64);
  if (*(char *)(v4 + 87) < 0)
    operator delete(*v14);
  *(_OWORD *)v14 = v21;
  *(_QWORD *)(v4 + 80) = v22;
  v15 = (void **)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v22 = 0;
  v21 = 0uLL;
  sub_20B45502C(v15, (uint64_t)&v21);
  v16 = (void **)(v4 + 88);
  if (*(char *)(v4 + 111) < 0)
    operator delete(*v16);
  result = *(double *)&v21;
  *(_OWORD *)v16 = v21;
  *(_QWORD *)(v4 + 104) = v22;
  v18 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v18 - 8);
  v19 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(a1 + 48) = v18 - 8;
  *(_QWORD *)(a1 + 72) = v19 - 8;
  return result;
}

void sub_20B1AC92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

double sub_20B1AC958(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  void **v28;
  void **v29;
  double result;
  uint64_t v31;
  void **v32;
  int v33;
  int v34;
  void **v35;
  char v36;
  void *__p[2];
  uint64_t v38;
  _BYTE v39[8];
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)__p);
    sub_20B0D0A00((uint64_t)v39, (uint64_t *)__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v39);
        if (!v54)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v36, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v40;
    *(_BYTE *)(v3 + 64) = 0;
    if (v43)
    {
      v8 = v42;
      *(_OWORD *)(v3 + 40) = v41;
      *(_QWORD *)(v3 + 56) = v8;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v45;
    v10 = v44;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v48)
    {
      v11 = v47;
      *(_OWORD *)(v3 + 96) = v46;
      *(_QWORD *)(v3 + 112) = v11;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v51)
    {
      v12 = v50;
      *(_OWORD *)(v3 + 128) = v49;
      *(_QWORD *)(v3 + 144) = v12;
      v49 = 0uLL;
      v50 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v54;
    if (v54)
    {
      *(_OWORD *)(v3 + 160) = v52;
      *(_QWORD *)(v3 + 176) = v53;
      v52 = 0uLL;
      v53 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v52;
    if (!(_QWORD)v52)
      goto LABEL_46;
    v15 = *((_QWORD *)&v52 + 1);
    v16 = (void *)v52;
    if (*((_QWORD *)&v52 + 1) == (_QWORD)v52)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v52;
LABEL_45:
    *((_QWORD *)&v52 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)__p);
  sub_20B0D0A00((uint64_t)v39, (uint64_t *)__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v36, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v40;
    *(_BYTE *)(v3 + 64) = 0;
    if (v43)
    {
      v17 = v42;
      *(_OWORD *)(v3 + 40) = v41;
      *(_QWORD *)(v3 + 56) = v17;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v45;
    v19 = v44;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v48)
    {
      v20 = v47;
      *(_OWORD *)(v3 + 96) = v46;
      *(_QWORD *)(v3 + 112) = v20;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v51)
    {
      v21 = v50;
      *(_OWORD *)(v3 + 128) = v49;
      *(_QWORD *)(v3 + 144) = v21;
      v49 = 0uLL;
      v50 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v54;
    if (v54)
    {
      *(_OWORD *)(v3 + 160) = v52;
      *(_QWORD *)(v3 + 176) = v53;
      v52 = 0uLL;
      v53 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v39);
  if (v54)
  {
LABEL_38:
    v14 = v52;
    if (!(_QWORD)v52)
      goto LABEL_46;
    v23 = *((_QWORD *)&v52 + 1);
    v16 = (void *)v52;
    if (*((_QWORD *)&v52 + 1) == (_QWORD)v52)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v51 && SHIBYTE(v50) < 0)
    operator delete((void *)v49);
  if (v48 && SHIBYTE(v47) < 0)
    operator delete((void *)v46);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  sub_20AF4EA3C((uint64_t)__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  LODWORD(__p[0]) = 6;
  sub_20B514490(a2, __p);
  v24 = __p[0];
  if (LODWORD(__p[0]) >= 6)
    v25 = 6;
  else
    v25 = __p[0];
  if (v25 < 3)
    sub_20B0E0A94((uint64_t)__p, a2, v4, v25);
  else
    sub_20B0E0C84(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20B51680C(a2, (uint64_t)__p);
      if (SHIBYTE(v38) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_78:
          v27 = 0;
          if (SHIBYTE(v38) < 0)
            goto LABEL_81;
          goto LABEL_67;
        }
      }
      else if (SHIBYTE(v38) == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_78;
      }
      v27 = 1;
      if (SHIBYTE(v38) < 0)
LABEL_81:
        operator delete(__p[0]);
LABEL_67:
      if (*(_BYTE *)(a2 + 131))
        v26 = 0;
      else
        v26 = v27;
    }
    while ((v26 & 1) != 0);
  }
  LODWORD(__p[0]) = 1;
  sub_20B514490(a2, __p);
  ++*(_QWORD *)(a2 + 80);
  if (*(_BYTE *)(a2 + 128) && *(_BYTE *)(a2 + 131))
  {
    *(_BYTE *)(a2 + 132) = 1;
  }
  else
  {
    sub_20B51680C(a2, (uint64_t)__p);
    v28 = (void **)(v3 + 200);
    if (*(char *)(v3 + 223) < 0)
      operator delete(*v28);
    *(_OWORD *)v28 = *(_OWORD *)__p;
    *(_QWORD *)(v3 + 216) = v38;
    ++*(_QWORD *)(a2 + 104);
  }
  sub_20B513B4C(a2, (_BYTE *)(v3 + 224));
  ++*(_QWORD *)(a2 + 80);
  if (*(_BYTE *)(a2 + 128) && *(_BYTE *)(a2 + 131))
  {
    *(_BYTE *)(a2 + 132) = 1;
  }
  else
  {
    sub_20B51680C(a2, (uint64_t)__p);
    v29 = (void **)(v3 + 232);
    if (*(char *)(v3 + 255) < 0)
      operator delete(*v29);
    *(_OWORD *)v29 = *(_OWORD *)__p;
    *(_QWORD *)(v3 + 248) = v38;
    ++*(_QWORD *)(a2 + 104);
  }
  sub_20B514490(a2, (_DWORD *)(v3 + 256));
  v31 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v31 + 1;
  if (*(_BYTE *)(a2 + 128) && *(_BYTE *)(a2 + 131))
  {
    *(_BYTE *)(a2 + 132) = 1;
    *(_QWORD *)(a2 + 80) = v31 + 2;
LABEL_98:
    *(_BYTE *)(a2 + 132) = 1;
    return result;
  }
  sub_20B51680C(a2, (uint64_t)__p);
  v32 = (void **)(v3 + 264);
  if (*(char *)(v3 + 287) < 0)
    operator delete(*v32);
  result = *(double *)__p;
  *(_OWORD *)v32 = *(_OWORD *)__p;
  *(_QWORD *)(v3 + 280) = v38;
  ++*(_QWORD *)(a2 + 104);
  v33 = *(unsigned __int8 *)(a2 + 128);
  v34 = *(unsigned __int8 *)(a2 + 131);
  ++*(_QWORD *)(a2 + 80);
  if (v33 && v34)
    goto LABEL_98;
  sub_20B51680C(a2, (uint64_t)__p);
  v35 = (void **)(v3 + 288);
  if (*(char *)(v3 + 311) < 0)
    operator delete(*v35);
  result = *(double *)__p;
  *(_OWORD *)v35 = *(_OWORD *)__p;
  *(_QWORD *)(v3 + 304) = v38;
  ++*(_QWORD *)(a2 + 104);
  return result;
}

void sub_20B1AD034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_20B1AD07C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  std::logic_error *exception;
  char v30;
  uint64_t v31[27];
  _BYTE v32[8];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v31);
    sub_20B0D0A00((uint64_t)v32, v31);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v32);
        if (!v47)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v30, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v33;
    *(_BYTE *)(v3 + 64) = 0;
    if (v36)
    {
      v8 = v35;
      *(_OWORD *)(v3 + 40) = v34;
      *(_QWORD *)(v3 + 56) = v8;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v38;
    v10 = v37;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v41)
    {
      v11 = v40;
      *(_OWORD *)(v3 + 96) = v39;
      *(_QWORD *)(v3 + 112) = v11;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v44)
    {
      v12 = v43;
      *(_OWORD *)(v3 + 128) = v42;
      *(_QWORD *)(v3 + 144) = v12;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v47;
    if (v47)
    {
      *(_OWORD *)(v3 + 160) = v45;
      *(_QWORD *)(v3 + 176) = v46;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v45;
    if (!(_QWORD)v45)
      goto LABEL_46;
    v15 = *((_QWORD *)&v45 + 1);
    v16 = (void *)v45;
    if (*((_QWORD *)&v45 + 1) == (_QWORD)v45)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v45;
LABEL_45:
    *((_QWORD *)&v45 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v31);
  sub_20B0D0A00((uint64_t)v32, v31);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v30, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v33;
    *(_BYTE *)(v3 + 64) = 0;
    if (v36)
    {
      v17 = v35;
      *(_OWORD *)(v3 + 40) = v34;
      *(_QWORD *)(v3 + 56) = v17;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v38;
    v19 = v37;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v41)
    {
      v20 = v40;
      *(_OWORD *)(v3 + 96) = v39;
      *(_QWORD *)(v3 + 112) = v20;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v44)
    {
      v21 = v43;
      *(_OWORD *)(v3 + 128) = v42;
      *(_QWORD *)(v3 + 144) = v21;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v47;
    if (v47)
    {
      *(_OWORD *)(v3 + 160) = v45;
      *(_QWORD *)(v3 + 176) = v46;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v32);
  if (v47)
  {
LABEL_38:
    v14 = v45;
    if (!(_QWORD)v45)
      goto LABEL_46;
    v23 = *((_QWORD *)&v45 + 1);
    v16 = (void *)v45;
    if (*((_QWORD *)&v45 + 1) == (_QWORD)v45)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v44 && SHIBYTE(v43) < 0)
    operator delete((void *)v42);
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  sub_20AF4EA3C((uint64_t)v31);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0E2418((uint64_t)v31, a2, v4);
  v24 = a2[6];
  v25 = a2[7];
  v26 = v25 >= v24;
  v27 = v25 - v24;
  if (!v26)
    v27 = 0;
  if (v27 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v24 + 4;
  return sub_20B1AD558(a2, v3 + 200);
}

void sub_20B1AD4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_20B1AD558(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;

  sub_20B42BD80(a1, a2);
  v4 = a1[6];
  if (a1[7] <= v4)
    goto LABEL_6;
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a1[3] + v4);
  ++a1[6];
  sub_20B42BD80(a1, a2 + 32);
  v5 = a1[6];
  v6 = a1[7];
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (!v7)
    v8 = 0;
  if (v8 <= 3)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1[3] + v5);
  a1[6] += 4;
  sub_20B42BD80(a1, a2 + 64);
  return sub_20B42BD80(a1, a2 + 88);
}

void sub_20B1AD638(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1AD64C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20B1AD660(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  uint64_t v9;
  unsigned __int128 *v10;
  unsigned __int128 v11;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a1 = off_24C40C098;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    v3 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    v4 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_BYTE *)(a1 + 72) = 1;
  }
  v5 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = v5;
  *(_BYTE *)(a1 + 120) = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    v6 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v6;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_BYTE *)(a1 + 120) = 1;
  }
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    v7 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = v7;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 1;
  }
  result = *(__n128 *)(a2 + 160);
  v9 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = v9;
  *(__n128 *)(a1 + 160) = result;
  *(_BYTE *)(a1 + 240) = 0;
  if (*(_BYTE *)(a2 + 240))
  {
    result = *(__n128 *)(a2 + 192);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(__n128 *)(a1 + 192) = result;
    *(_QWORD *)(a2 + 200) = 0;
    *(_QWORD *)(a2 + 208) = 0;
    *(_QWORD *)(a2 + 192) = 0;
    v10 = (unsigned __int128 *)(a2 + 224);
    do
      v11 = __ldaxp(v10);
    while (__stlxp(v11, v10));
    *(_OWORD *)(a1 + 224) = v11;
    *(_BYTE *)(a1 + 240) = 1;
  }
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  if (*(_BYTE *)(a2 + 280))
  {
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    result = *(__n128 *)(a2 + 256);
    *(__n128 *)(a1 + 256) = result;
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(a2 + 264) = 0;
    *(_QWORD *)(a2 + 272) = 0;
    *(_BYTE *)(a1 + 280) = 1;
  }
  return result;
}

uint64_t sub_20B1AD7E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = off_24C40C098;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    v5 = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[3];
    *(_OWORD *)(a1 + 16) = v5;
    a2[2] = 0;
    a2[3] = 0;
    a2[1] = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*((_BYTE *)a2 + 64))
  {
    v6 = *(_OWORD *)(a2 + 5);
    *(_QWORD *)(a1 + 64) = a2[7];
    *(_OWORD *)(a1 + 48) = v6;
    a2[6] = 0;
    a2[7] = 0;
    a2[5] = 0;
    *(_BYTE *)(a1 + 72) = 1;
  }
  sub_20AF4CAF4(a1 + 80, a3);
  *(_QWORD *)a1 = off_24C40C018;
  return a1;
}

void sub_20B1AD8A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v5;

  if (*(_BYTE *)(v1 + 72) && *(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(_BYTE *)(v1 + 40) && *(char *)(v1 + 39) < 0)
    operator delete(*v2);
  v5 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v5)
    MEMORY[0x20BD3583C](v5, 0x1000C4072FAA15ELL);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1AD8FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _QWORD v13[5];
  unsigned __int8 **v14;
  _QWORD v15[5];
  unsigned __int8 **v16;
  char v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[6];

  v29[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v24);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v24);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v24);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20B0C0D90(v6, (uint64_t)v18);
  }
  else if (v7 == 1)
  {
    sub_20B0F9F8C(v6, (uint64_t)v18);
  }
  else
  {
    if (v7)
      sub_20AECFAB8();
    sub_20B0C6034(v6, (uint64_t)v18);
  }
  v15[0] = v24;
  v15[1] = &v25;
  v15[2] = &v26;
  v15[3] = &v27;
  v15[4] = &v28;
  v16 = (unsigned __int8 **)v29;
  v13[0] = v18;
  v13[1] = &v19;
  v13[2] = &v20;
  v13[3] = &v21;
  v13[4] = &v22;
  v14 = (unsigned __int8 **)&v23;
  if (sub_20B2178A8((uint64_t)&v17, v15, v13))
  {
    if (*((_BYTE *)v16 + 24) && *((_BYTE *)v14 + 24))
    {
      v8 = *v16;
      v9 = v16[1];
      v10 = *v14;
      if (v9 - *v16 == v14[1] - *v14)
      {
        if (v8 != v9)
        {
          while (sub_20B2167B8(v8, v10))
          {
            v8 += 96;
            v10 += 96;
            if (v8 == v9)
              goto LABEL_23;
          }
          goto LABEL_22;
        }
LABEL_23:
        v11 = sub_20B24A498((unsigned __int8 *)(a1 + 200), (unsigned __int8 *)(a2 + 200));
        goto LABEL_24;
      }
    }
    else if ((*((_BYTE *)v16 + 24) != 0) == (*((_BYTE *)v14 + 24) != 0))
    {
      goto LABEL_23;
    }
  }
LABEL_22:
  v11 = 0;
LABEL_24:
  sub_20AF4EA3C((uint64_t)v18);
  sub_20AF4EA3C((uint64_t)v24);
  return v11;
}

void sub_20B1ADAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a23);
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B1ADB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B1ADB14(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EB80, 0);
  if (v4)
  {
    sub_20B1ADF20(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EBC8, 0);
    if (v5)
    {
      sub_20B1AEE18(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC50, 0);
      if (v6)
      {
        sub_20B1AFD90(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC98, 0);
        if (v7)
        {
          sub_20B1B0898(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C2C8)
            sub_20B1B17A4(&v9, (uint64_t)a1);
          else
            sub_20B1ADC78(&v8, a1);
        }
      }
    }
  }
}

void sub_20B1ADC78(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FF5BC((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20B0FF5BC((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FEF34((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20B0FEF34((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0D8514((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20B0D8514((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = v3 + 200;
  v13 = a2[2];
  v14 = 1;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20B1B1E48(a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 1;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B1B1E48(a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20B1ADF20(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FADD8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B50671C(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5086B4(a2, &v18);
      sub_20B0D1154(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FA468(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B50671C(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5086B4(a2, &v18);
  sub_20B1AE220(a2, v3 + 200);
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B1AE220(uint64_t a1, uint64_t a2)
{
  _BYTE v3[120];
  void *v4;
  char v5;
  char v6;
  void *__p;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20B1AE548((uint64_t)v3, a2);
  sub_20B1AE304(a1, (uint64_t)v3);
  if (v9 && v8 < 0)
    operator delete(__p);
  if (v6)
  {
    if (v5 < 0)
      operator delete(v4);
  }
}

void sub_20B1AE2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37 && a36 < 0)
    operator delete(__p);
  if (a30)
  {
    if (a29 < 0)
    {
      operator delete(a24);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B1AE304(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  void **v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  void **v15;
  uint64_t v16;
  int v17;

  v4 = a2 + 8;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "src_to_dst";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B50671C(a1);
  v16 = 7;
  v17 = 1;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B5086B4(a1, &v17);
  sub_20B1AE674(a1, v4);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(unsigned __int8 **)(v7 - 8);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 56) = v7 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v8 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "src";
    *(_QWORD *)(a1 + 80) = 3;
    *(_BYTE *)(a1 + 88) = 1;
  }
  if (*(_BYTE *)(a2 + 144))
  {
    sub_20B508B7C(a1, a2 + 120);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_16;
  }
  else
  {
    v16 = 0;
    v9 = (unsigned __int8 *)sub_20B506370(a1);
    v10 = *v9;
    *v9 = 0;
    v11 = (void **)*((_QWORD *)v9 + 1);
    *((_QWORD *)v9 + 1) = v16;
    v16 = (uint64_t)v11;
    sub_20B4181DC((void ***)&v16, v10);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_16;
  }
  v12 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "dst";
  *(_QWORD *)(a1 + 80) = 3;
  if (!v12)
  {
    *(_BYTE *)(a1 + 88) = 1;
    if (*(_BYTE *)(a2 + 176))
      goto LABEL_17;
    goto LABEL_19;
  }
LABEL_16:
  if (*(_BYTE *)(a2 + 176))
  {
LABEL_17:
    sub_20B508B7C(a1, a2 + 152);
    return;
  }
LABEL_19:
  v16 = 0;
  v13 = (unsigned __int8 *)sub_20B506370(a1);
  v14 = *v13;
  *v13 = 0;
  v15 = (void **)*((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = v16;
  v16 = (uint64_t)v15;
  sub_20B4181DC((void ***)&v16, v14);
}

void sub_20B1AE518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B1AE530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1AE548(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v4 = *(_OWORD *)(a2 + 56);
  v5 = *(_OWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 88);
  v7 = *(_OWORD *)(a2 + 104);
  v8 = *(_OWORD *)(a2 + 8);
  v9 = *(_OWORD *)(a2 + 24);
  v10 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 8) = v8;
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 144) = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    if (*(char *)(a2 + 143) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 120), *(void **)(a2 + 120), *(_QWORD *)(a2 + 128));
    }
    else
    {
      v11 = *(_OWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = v11;
    }
    *(_BYTE *)(a1 + 144) = 1;
  }
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  if (*(_BYTE *)(a2 + 176))
  {
    if (*(char *)(a2 + 175) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 152), *(void **)(a2 + 152), *(_QWORD *)(a2 + 160));
    }
    else
    {
      v12 = *(_OWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = v12;
    }
    *(_BYTE *)(a1 + 176) = 1;
  }
  return a1;
}

void sub_20B1AE630(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[176] && v1[175] < 0)
    operator delete(*v3);
  if (v1[144])
  {
    if (v1[143] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B1AE674(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v4 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "se3_type";
    *(_QWORD *)(a1 + 80) = 8;
    if (!v4)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v9 = a2;
  sub_20B1AEA4C(a1, (_BYTE **)&v9);
  switch(*(_BYTE *)a2)
  {
    case 1:
      if (*(_DWORD *)(a2 + 104) != 2)
        goto LABEL_23;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v5 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "algebra_r";
        *(_QWORD *)(a1 + 80) = 9;
        if (!v5)
          *(_BYTE *)(a1 + 88) = 1;
      }
      v9 = 3;
      v10 = a2 + 8;
      sub_20B509D64(a1, (float **)&v9);
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "algebra_t";
        *(_QWORD *)(a1 + 80) = 9;
        if (!v6)
          *(_BYTE *)(a1 + 88) = 1;
      }
      v9 = 3;
      v10 = a2 + 20;
      sub_20B509D64(a1, (float **)&v9);
      break;
    case 2:
      if (*(_DWORD *)(a2 + 104) != 3)
LABEL_23:
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "algebra_r";
        *(_QWORD *)(a1 + 80) = 9;
        if (!v7)
          *(_BYTE *)(a1 + 88) = 1;
      }
      v9 = 3;
      v10 = a2 + 8;
      sub_20B50A184(a1, &v9);
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v8 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "algebra_t";
        *(_QWORD *)(a1 + 80) = 9;
        if (!v8)
          *(_BYTE *)(a1 + 88) = 1;
      }
      v9 = 3;
      v10 = a2 + 32;
      sub_20B50A184(a1, &v9);
      break;
    case 4:
      sub_20B1AE8A8(a1, a2);
      break;
    case 5:
      sub_20B1AE978(a1, a2);
      break;
    default:
      return;
  }
}

void sub_20B1AE8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a2 + 104))
    sub_20AECFAB8();
  v4 = a2 + 8;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "affine3x4";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v5)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B50671C(a1);
  v7 = 4;
  v8 = v4;
  sub_20B509D64(a1, (float **)&v7);
  v7 = 4;
  v8 = a2 + 24;
  sub_20B509D64(a1, (float **)&v7);
  v7 = 4;
  v8 = a2 + 40;
  sub_20B509D64(a1, (float **)&v7);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(a1 + 56) = v6 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
}

void sub_20B1AE978(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a2 + 104) != 1)
    sub_20AECFAB8();
  v4 = a2 + 8;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "affine3x4";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v5)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B50671C(a1);
  v7 = 4;
  v8 = v4;
  sub_20B50A184(a1, &v7);
  v7 = 4;
  v8 = a2 + 40;
  sub_20B50A184(a1, &v7);
  v7 = 4;
  v8 = a2 + 72;
  sub_20B50A184(a1, &v7);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(a1 + 56) = v6 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
}

void sub_20B1AEA4C(uint64_t a1, _BYTE **a2)
{
  _BYTE *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20B1AEB54((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
  sub_20B508B7C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20B1AEB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1AEB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1AEB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1AEB54(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v21[0] = v5;
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)off_24C4105F8[(char)*a3 - 1], *(_QWORD *)&asc_20B5E9C00[8 * (char)(*a3 - 1)]);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 128);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20AECFAB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C40DC30[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20B1AEDC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B1AEDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1AEE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B1AEE18(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20B51E95C(&v20, 4u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v7 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBED4(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20B51E95C(&v20, 5u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v8 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBDB8(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20B51E95C(&v20, 6u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v6 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0D3CE4(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20B51E95C(&v20, 1u);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v20, v14 + 8);
  }
  sub_20B51956C(*(_QWORD *)(a2 + 24));
  sub_20B1AF098(a2, v3 + 200);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20B1AF098(uint64_t a1, uint64_t a2)
{
  _BYTE v3[120];
  void *v4;
  char v5;
  char v6;
  void *__p;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20B1AE548((uint64_t)v3, a2);
  sub_20B1AF17C(a1, (uint64_t)v3);
  if (v9 && v8 < 0)
    operator delete(__p);
  if (v6)
  {
    if (v5 < 0)
      operator delete(v4);
  }
}

void sub_20B1AF134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37 && a36 < 0)
    operator delete(__p);
  if (a30)
  {
    if (a29 < 0)
    {
      operator delete(a24);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B1AF17C(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t *v20;

  v4 = (char *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v20 = (uint64_t *)(v5 + 16);
    sub_20B51E95C(&v20, 1u);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v20, v5 + 8);
  }
  sub_20B51956C(*(_QWORD *)(a1 + 24));
  sub_20B1AF438(a1, v4);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v6 + 48), *(_QWORD *)(v6 + 16) - v7 - 9);
  v8 = *(_QWORD *)(v6 + 48);
  if (v8)
    memmove((void *)(*(_QWORD *)(v6 + 24) + v7), *(const void **)(v6 + 56), v8);
  *(_QWORD *)(v6 + 48) = 0;
  v9 = *(_QWORD *)(v6 + 80);
  v10 = *(_QWORD *)(v6 + 88) - 8;
  *(_QWORD *)(v6 + 88) = v10;
  if (v9 == v10)
  {
    std::ostream::write();
    if (*(_BYTE *)(v6 + 40))
    {
      free(*(void **)(v6 + 24));
      *(_BYTE *)(v6 + 40) = 0;
    }
  }
  if (*(_BYTE *)(a2 + 144))
  {
    v11 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v11 + 40))
    {
      v20 = (uint64_t *)(v11 + 16);
      sub_20B51DD74(&v20, 1);
      v12 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v12 + 40))
        goto LABEL_12;
    }
    else
    {
      LOBYTE(v20) = 1;
      std::ostream::write();
      v12 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v12 + 40))
      {
LABEL_12:
        v20 = (uint64_t *)(v12 + 16);
        sub_20B51FA2C((uint64_t)&v19, &v20, (const void **)(a2 + 120));
        if (!*(_BYTE *)(a2 + 176))
          goto LABEL_25;
LABEL_19:
        v14 = (const void **)(a2 + 152);
        v15 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v15 + 40))
        {
          v20 = (uint64_t *)(v15 + 16);
          sub_20B51DD74(&v20, 1);
          v16 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v16 + 40))
          {
LABEL_21:
            v20 = (uint64_t *)(v16 + 16);
            return (char *)sub_20B51FA2C((uint64_t)&v19, &v20, v14);
          }
        }
        else
        {
          LOBYTE(v20) = 1;
          std::ostream::write();
          v16 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v16 + 40))
            goto LABEL_21;
        }
        return (char *)sub_20B51FE64((uint64_t)&v20, v16 + 8, (uint64_t)v14);
      }
    }
    sub_20B51FE64((uint64_t)&v20, v12 + 8, a2 + 120);
    if (!*(_BYTE *)(a2 + 176))
      goto LABEL_25;
    goto LABEL_19;
  }
  v13 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v13 + 40))
  {
    LOBYTE(v20) = 0;
    std::ostream::write();
    if (!*(_BYTE *)(a2 + 176))
      goto LABEL_25;
    goto LABEL_19;
  }
  v20 = (uint64_t *)(v13 + 16);
  sub_20B51DD74(&v20, 0);
  if (*(_BYTE *)(a2 + 176))
    goto LABEL_19;
LABEL_25:
  v18 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v18 + 40))
  {
    v20 = (uint64_t *)(v18 + 16);
    return sub_20B51DD74(&v20, 0);
  }
  else
  {
    LOBYTE(v20) = 0;
    return (char *)std::ostream::write();
  }
}

uint64_t sub_20B1AF438(uint64_t a1, char *a2)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  _BYTE v49[9];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    *(_QWORD *)v49 = v5 + 16;
    result = (uint64_t)sub_20B51DD74((uint64_t **)v49, v4);
  }
  else
  {
    if (v4 < 0)
    {
      v49[0] = -52;
      v49[1] = v4;
    }
    else
    {
      v49[0] = *a2;
    }
    result = std::ostream::write();
  }
  switch(*a2)
  {
    case 1:
      if (*((_DWORD *)a2 + 26) != 2)
        sub_20AECFAB8();
      v7 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v7 + 40))
      {
        *(_QWORD *)v49 = v7 + 16;
        sub_20B51F73C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 2);
        sub_20B51F73C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 3);
        sub_20B51F73C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 4);
      }
      else
      {
        v16 = *((_DWORD *)a2 + 2);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v16);
        std::ostream::write();
        v17 = *((_DWORD *)a2 + 3);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v17);
        std::ostream::write();
        v18 = *((_DWORD *)a2 + 4);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v18);
        std::ostream::write();
      }
      v19 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v19 + 40))
      {
        *(_QWORD *)v49 = v19 + 16;
        sub_20B51F73C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 5);
        sub_20B51F73C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 6);
        result = (uint64_t)sub_20B51F73C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 7);
      }
      else
      {
        v27 = *((_DWORD *)a2 + 5);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v27);
        std::ostream::write();
        v28 = *((_DWORD *)a2 + 6);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v28);
        std::ostream::write();
        v29 = *((_DWORD *)a2 + 7);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v29);
        result = std::ostream::write();
      }
      break;
    case 2:
      if (*((_DWORD *)a2 + 26) != 3)
        sub_20AECFAB8();
      v9 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v9 + 40))
      {
        *(_QWORD *)v49 = v9 + 16;
        sub_20B51F818((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 1);
        sub_20B51F818((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 2);
        sub_20B51F818((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 3);
      }
      else
      {
        *(_QWORD *)&v49[1] = bswap64(*((_QWORD *)a2 + 1));
        v49[0] = -53;
        std::ostream::write();
        v20 = *((_QWORD *)a2 + 2);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v20);
        std::ostream::write();
        v21 = *((_QWORD *)a2 + 3);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v21);
        std::ostream::write();
      }
      v22 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v22 + 40))
      {
        *(_QWORD *)v49 = v22 + 16;
        sub_20B51F818((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 4);
        sub_20B51F818((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 5);
        result = (uint64_t)sub_20B51F818((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 6);
      }
      else
      {
        *(_QWORD *)&v49[1] = bswap64(*((_QWORD *)a2 + 4));
        v49[0] = -53;
        std::ostream::write();
        v30 = *((_QWORD *)a2 + 5);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v30);
        std::ostream::write();
        v31 = *((_QWORD *)a2 + 6);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v31);
        result = std::ostream::write();
      }
      break;
    case 4:
      if (*((_DWORD *)a2 + 26))
        sub_20AECFAB8();
      v8 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v8 + 40))
      {
        *(_QWORD *)v49 = v8 + 16;
        sub_20B51F73C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 2);
        sub_20B51F73C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 3);
        sub_20B51F73C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 4);
        sub_20B51F73C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 5);
      }
      else
      {
        v11 = *((_DWORD *)a2 + 2);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v11);
        std::ostream::write();
        v12 = *((_DWORD *)a2 + 3);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v12);
        std::ostream::write();
        v13 = *((_DWORD *)a2 + 4);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v13);
        std::ostream::write();
        v14 = *((_DWORD *)a2 + 5);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v14);
        std::ostream::write();
      }
      v15 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v15 + 40))
      {
        *(_QWORD *)v49 = v15 + 16;
        sub_20B51F73C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 6);
        sub_20B51F73C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 7);
        sub_20B51F73C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 8);
        sub_20B51F73C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 9);
      }
      else
      {
        v32 = *((_DWORD *)a2 + 6);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v32);
        std::ostream::write();
        v33 = *((_DWORD *)a2 + 7);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v33);
        std::ostream::write();
        v34 = *((_DWORD *)a2 + 8);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v34);
        std::ostream::write();
        v35 = *((_DWORD *)a2 + 9);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v35);
        std::ostream::write();
      }
      v36 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v36 + 40))
      {
        *(_QWORD *)v49 = v36 + 16;
        sub_20B51F73C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 10);
        sub_20B51F73C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 11);
        sub_20B51F73C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 12);
        result = (uint64_t)sub_20B51F73C((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 13);
      }
      else
      {
        v41 = *((_DWORD *)a2 + 10);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v41);
        std::ostream::write();
        v42 = *((_DWORD *)a2 + 11);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v42);
        std::ostream::write();
        v43 = *((_DWORD *)a2 + 12);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v43);
        std::ostream::write();
        v44 = *((_DWORD *)a2 + 13);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v44);
        result = std::ostream::write();
      }
      break;
    case 5:
      if (*((_DWORD *)a2 + 26) != 1)
        sub_20AECFAB8();
      v10 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v10 + 40))
      {
        *(_QWORD *)v49 = v10 + 16;
        sub_20B51F818((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 1);
        sub_20B51F818((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 2);
        sub_20B51F818((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 3);
        sub_20B51F818((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 4);
      }
      else
      {
        *(_QWORD *)&v49[1] = bswap64(*((_QWORD *)a2 + 1));
        v49[0] = -53;
        std::ostream::write();
        v23 = *((_QWORD *)a2 + 2);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v23);
        std::ostream::write();
        v24 = *((_QWORD *)a2 + 3);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v24);
        std::ostream::write();
        v25 = *((_QWORD *)a2 + 4);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v25);
        std::ostream::write();
      }
      v26 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v26 + 40))
      {
        *(_QWORD *)v49 = v26 + 16;
        sub_20B51F818((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 5);
        sub_20B51F818((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 6);
        sub_20B51F818((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 7);
        sub_20B51F818((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 8);
      }
      else
      {
        *(_QWORD *)&v49[1] = bswap64(*((_QWORD *)a2 + 5));
        v49[0] = -53;
        std::ostream::write();
        v37 = *((_QWORD *)a2 + 6);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v37);
        std::ostream::write();
        v38 = *((_QWORD *)a2 + 7);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v38);
        std::ostream::write();
        v39 = *((_QWORD *)a2 + 8);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v39);
        std::ostream::write();
      }
      v40 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v40 + 40))
      {
        *(_QWORD *)v49 = v40 + 16;
        sub_20B51F818((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 9);
        sub_20B51F818((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 10);
        sub_20B51F818((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 11);
        result = (uint64_t)sub_20B51F818((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 12);
      }
      else
      {
        *(_QWORD *)&v49[1] = bswap64(*((_QWORD *)a2 + 9));
        v49[0] = -53;
        std::ostream::write();
        v45 = *((_QWORD *)a2 + 10);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v45);
        std::ostream::write();
        v46 = *((_QWORD *)a2 + 11);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v46);
        std::ostream::write();
        v47 = *((_QWORD *)a2 + 12);
        v49[0] = -53;
        *(_QWORD *)&v49[1] = bswap64(v47);
        result = std::ostream::write();
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_20B1AFD90(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FCF30(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B505FB0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5069D0(a2, &v18);
      sub_20B0D4F88(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FC7EC(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B505FB0(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5069D0(a2, &v18);
  sub_20B1B0090(a2, v3 + 200);
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B1B0090(uint64_t a1, uint64_t a2)
{
  _BYTE v3[120];
  void *v4;
  char v5;
  char v6;
  void *__p;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20B1AE548((uint64_t)v3, a2);
  sub_20B1B0174(a1, (uint64_t)v3);
  if (v9 && v8 < 0)
    operator delete(__p);
  if (v6)
  {
    if (v5 < 0)
      operator delete(v4);
  }
}

void sub_20B1B012C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37 && a36 < 0)
    operator delete(__p);
  if (a30)
  {
    if (a29 < 0)
    {
      operator delete(a24);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B1B0174(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v4 = a2 + 8;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "src_to_dst";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B505FB0(a1);
  v16 = 7;
  v17 = 1;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B5069D0(a1, &v17);
  sub_20B1B03B8(a1, v4);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(unsigned __int8 **)(v7 - 8);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 56) = v7 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v8 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "src";
    *(_QWORD *)(a1 + 80) = 3;
    *(_BYTE *)(a1 + 88) = 1;
  }
  if (*(_BYTE *)(a2 + 144))
  {
    sub_20B506E98(a1, a2 + 120);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_16;
  }
  else
  {
    v16 = 0;
    v9 = (unsigned __int8 *)sub_20B505B08(a1);
    v10 = *v9;
    *v9 = 0;
    v11 = *((_QWORD *)v9 + 1);
    *((_QWORD *)v9 + 1) = v16;
    v16 = v11;
    sub_20B416E08(&v16, v10);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_16;
  }
  v12 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "dst";
  *(_QWORD *)(a1 + 80) = 3;
  if (!v12)
  {
    *(_BYTE *)(a1 + 88) = 1;
    if (*(_BYTE *)(a2 + 176))
      goto LABEL_17;
    goto LABEL_19;
  }
LABEL_16:
  if (*(_BYTE *)(a2 + 176))
  {
LABEL_17:
    sub_20B506E98(a1, a2 + 152);
    return;
  }
LABEL_19:
  v16 = 0;
  v13 = (unsigned __int8 *)sub_20B505B08(a1);
  v14 = *v13;
  *v13 = 0;
  v15 = *((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = v16;
  v16 = v15;
  sub_20B416E08(&v16, v14);
}

void sub_20B1B0388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B1B03A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B1B03B8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v4 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "se3_type";
    *(_QWORD *)(a1 + 80) = 8;
    if (!v4)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v9 = a2;
  sub_20B1B0790(a1, (_BYTE **)&v9);
  switch(*(_BYTE *)a2)
  {
    case 1:
      if (*(_DWORD *)(a2 + 104) != 2)
        goto LABEL_23;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v5 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "algebra_r";
        *(_QWORD *)(a1 + 80) = 9;
        if (!v5)
          *(_BYTE *)(a1 + 88) = 1;
      }
      v9 = 3;
      v10 = a2 + 8;
      sub_20B507CD8(a1, (float **)&v9);
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "algebra_t";
        *(_QWORD *)(a1 + 80) = 9;
        if (!v6)
          *(_BYTE *)(a1 + 88) = 1;
      }
      v9 = 3;
      v10 = a2 + 20;
      sub_20B507CD8(a1, (float **)&v9);
      break;
    case 2:
      if (*(_DWORD *)(a2 + 104) != 3)
LABEL_23:
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "algebra_r";
        *(_QWORD *)(a1 + 80) = 9;
        if (!v7)
          *(_BYTE *)(a1 + 88) = 1;
      }
      v9 = 3;
      v10 = a2 + 8;
      sub_20B5080F8(a1, &v9);
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v8 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "algebra_t";
        *(_QWORD *)(a1 + 80) = 9;
        if (!v8)
          *(_BYTE *)(a1 + 88) = 1;
      }
      v9 = 3;
      v10 = a2 + 32;
      sub_20B5080F8(a1, &v9);
      break;
    case 4:
      sub_20B1B05EC(a1, a2);
      break;
    case 5:
      sub_20B1B06BC(a1, a2);
      break;
    default:
      return;
  }
}

void sub_20B1B05EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a2 + 104))
    sub_20AECFAB8();
  v4 = a2 + 8;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "affine3x4";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v5)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B505FB0(a1);
  v7 = 4;
  v8 = v4;
  sub_20B507CD8(a1, (float **)&v7);
  v7 = 4;
  v8 = a2 + 24;
  sub_20B507CD8(a1, (float **)&v7);
  v7 = 4;
  v8 = a2 + 40;
  sub_20B507CD8(a1, (float **)&v7);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(a1 + 56) = v6 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
}

void sub_20B1B06BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a2 + 104) != 1)
    sub_20AECFAB8();
  v4 = a2 + 8;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "affine3x4";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v5)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B505FB0(a1);
  v7 = 4;
  v8 = v4;
  sub_20B5080F8(a1, &v7);
  v7 = 4;
  v8 = a2 + 40;
  sub_20B5080F8(a1, &v7);
  v7 = 4;
  v8 = a2 + 72;
  sub_20B5080F8(a1, &v7);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(a1 + 56) = v6 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
}

void sub_20B1B0790(uint64_t a1, _BYTE **a2)
{
  _BYTE *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20B1AEB54((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
  sub_20B506E98(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20B1B0854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1B0870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1B0884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1B0898(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FE288(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20AEC01D0(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20B0D66C4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FDCE4(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20AEC01D0(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20B1B0AB0(a2, v3 + 200);
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20AEC01D0(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20B1B0AB0(uint64_t a1, uint64_t a2)
{
  _BYTE v3[120];
  void *v4;
  char v5;
  char v6;
  void *__p;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20B1AE548((uint64_t)v3, a2);
  sub_20B1B0B94(a1, (uint64_t)v3);
  if (v9 && v8 < 0)
    operator delete(__p);
  if (v6)
  {
    if (v5 < 0)
      operator delete(v4);
  }
}

void sub_20B1B0B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37 && a36 < 0)
    operator delete(__p);
  if (a30)
  {
    if (a29 < 0)
    {
      operator delete(a24);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B1B0B94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  char v13;
  char v14;
  char v15;

  v4 = a2 + 8;
  if (*(_QWORD *)(a1 + 40))
  {
    v5 = *(_QWORD **)(a1 + 24);
    v13 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v5, (uint64_t)&v13, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20B1B0CE8(a1, v4);
  v6 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v7 = *(_QWORD **)(a1 + 24);
    v14 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v7, (uint64_t)&v14, 1);
  }
  v8 = *(_QWORD **)(a1 + 24);
  v15 = v6;
  sub_20AEC01D0(v8, (uint64_t)&v15, 1);
  ++*(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a2 + 144))
  {
    v10 = 1;
    sub_20B512EB0(a1, &v10);
    sub_20B512F6C(a1, a2 + 120);
    if (*(_BYTE *)(a2 + 176))
    {
LABEL_7:
      v12 = 1;
      sub_20B512EB0(a1, &v12);
      sub_20B512F6C(a1, a2 + 152);
      return;
    }
  }
  else
  {
    v9 = 0;
    sub_20B512EB0(a1, &v9);
    if (*(_BYTE *)(a2 + 176))
      goto LABEL_7;
  }
  v11 = 0;
  sub_20B512EB0(a1, &v11);
}

void sub_20B1B0CE8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  unsigned __int8 v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;

  v73 = *(_BYTE *)a2;
  sub_20B512EB0(a1, &v73);
  switch(*(_BYTE *)a2)
  {
    case 1:
      if (*(_DWORD *)(a2 + 104) != 2)
        goto LABEL_84;
      v4 = (_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 40))
      {
        v5 = *(_QWORD **)(a1 + 24);
        v74 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v5, (uint64_t)&v74, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v6 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v6 + 1;
      if (v6 != -1)
      {
        v7 = *(_QWORD **)(a1 + 24);
        v74 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v7, (uint64_t)&v74, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v8 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v8 + 1;
      if (v8 != -1)
      {
        v9 = *(_QWORD **)(a1 + 24);
        v74 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v9, (uint64_t)&v74, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v10 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v10 + 1;
      if (v10 != -1)
      {
        v11 = *(_QWORD **)(a1 + 24);
        v75 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v11, (uint64_t)&v75, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v12 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v12 + 1;
      if (v12 != -1)
      {
        v13 = *(_QWORD **)(a1 + 24);
        v75 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v13, (uint64_t)&v75, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v14 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v14 + 1;
      if (v14 != -1)
      {
        v15 = *(_QWORD **)(a1 + 24);
        v75 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v15, (uint64_t)&v75, 1);
      }
      goto LABEL_15;
    case 2:
      if (*(_DWORD *)(a2 + 104) != 3)
        goto LABEL_84;
      v4 = (_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 40))
      {
        v39 = *(_QWORD **)(a1 + 24);
        v76 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v39, (uint64_t)&v76, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v40 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v40 + 1;
      if (v40 != -1)
      {
        v41 = *(_QWORD **)(a1 + 24);
        v76 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v41, (uint64_t)&v76, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v42 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v42 + 1;
      if (v42 != -1)
      {
        v43 = *(_QWORD **)(a1 + 24);
        v76 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v43, (uint64_t)&v76, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v44 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v44 + 1;
      if (v44 != -1)
      {
        v45 = *(_QWORD **)(a1 + 24);
        v77 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v45, (uint64_t)&v77, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v46 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v46 + 1;
      if (v46 != -1)
      {
        v47 = *(_QWORD **)(a1 + 24);
        v77 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v47, (uint64_t)&v77, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v48 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v48 + 1;
      if (v48 != -1)
      {
        v49 = *(_QWORD **)(a1 + 24);
        v77 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v49, (uint64_t)&v77, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      goto LABEL_82;
    case 4:
      if (*(_DWORD *)(a2 + 104))
        goto LABEL_84;
      v4 = (_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 40))
      {
        v16 = *(_QWORD **)(a1 + 24);
        v78 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v16, (uint64_t)&v78, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v17 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v17 + 1;
      if (v17 != -1)
      {
        v18 = *(_QWORD **)(a1 + 24);
        v78 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v18, (uint64_t)&v78, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v19 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v19 + 1;
      if (v19 != -1)
      {
        v20 = *(_QWORD **)(a1 + 24);
        v78 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v20, (uint64_t)&v78, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v21 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v21 + 1;
      if (v21 != -1)
      {
        v22 = *(_QWORD **)(a1 + 24);
        v78 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v22, (uint64_t)&v78, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v23 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v23 + 1;
      if (v23 != -1)
      {
        v24 = *(_QWORD **)(a1 + 24);
        v79 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v24, (uint64_t)&v79, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v25 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v25 + 1;
      if (v25 != -1)
      {
        v26 = *(_QWORD **)(a1 + 24);
        v79 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v26, (uint64_t)&v79, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v27 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v27 + 1;
      if (v27 != -1)
      {
        v28 = *(_QWORD **)(a1 + 24);
        v79 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v28, (uint64_t)&v79, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v29 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v29 + 1;
      if (v29 != -1)
      {
        v30 = *(_QWORD **)(a1 + 24);
        v79 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v30, (uint64_t)&v79, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v31 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v31 + 1;
      if (v31 != -1)
      {
        v32 = *(_QWORD **)(a1 + 24);
        v80 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v32, (uint64_t)&v80, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v33 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v33 + 1;
      if (v33 != -1)
      {
        v34 = *(_QWORD **)(a1 + 24);
        v80 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v34, (uint64_t)&v80, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v35 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v35 + 1;
      if (v35 != -1)
      {
        v36 = *(_QWORD **)(a1 + 24);
        v80 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v36, (uint64_t)&v80, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v37 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v37 + 1;
      if (v37 != -1)
      {
        v38 = *(_QWORD **)(a1 + 24);
        v80 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v38, (uint64_t)&v80, 1);
      }
LABEL_15:
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      goto LABEL_83;
    case 5:
      if (*(_DWORD *)(a2 + 104) != 1)
LABEL_84:
        sub_20AECFAB8();
      v4 = (_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 40))
      {
        v50 = *(_QWORD **)(a1 + 24);
        v81 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v50, (uint64_t)&v81, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v51 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v51 + 1;
      if (v51 != -1)
      {
        v52 = *(_QWORD **)(a1 + 24);
        v81 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v52, (uint64_t)&v81, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v53 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v53 + 1;
      if (v53 != -1)
      {
        v54 = *(_QWORD **)(a1 + 24);
        v81 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v54, (uint64_t)&v81, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v55 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v55 + 1;
      if (v55 != -1)
      {
        v56 = *(_QWORD **)(a1 + 24);
        v81 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v56, (uint64_t)&v81, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v57 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v57 + 1;
      if (v57 != -1)
      {
        v58 = *(_QWORD **)(a1 + 24);
        v82 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v58, (uint64_t)&v82, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v59 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v59 + 1;
      if (v59 != -1)
      {
        v60 = *(_QWORD **)(a1 + 24);
        v82 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v60, (uint64_t)&v82, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v61 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v61 + 1;
      if (v61 != -1)
      {
        v62 = *(_QWORD **)(a1 + 24);
        v82 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v62, (uint64_t)&v82, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v63 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v63 + 1;
      if (v63 != -1)
      {
        v64 = *(_QWORD **)(a1 + 24);
        v82 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v64, (uint64_t)&v82, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v65 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v65 + 1;
      if (v65 != -1)
      {
        v66 = *(_QWORD **)(a1 + 24);
        v83 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v66, (uint64_t)&v83, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v67 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v67 + 1;
      if (v67 != -1)
      {
        v68 = *(_QWORD **)(a1 + 24);
        v83 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v68, (uint64_t)&v83, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v69 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v69 + 1;
      if (v69 != -1)
      {
        v70 = *(_QWORD **)(a1 + 24);
        v83 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v70, (uint64_t)&v83, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v71 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v71 + 1;
      if (v71 != -1)
      {
        v72 = *(_QWORD **)(a1 + 24);
        v83 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v72, (uint64_t)&v83, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
LABEL_82:
      std::ostream::operator<<();
LABEL_83:
      ++*v4;
      break;
    default:
      return;
  }
}

void sub_20B1B17A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE9C0(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE8A4(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    __src = 6;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0D757C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 1;
  sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_20B42B554((_QWORD *)a2);
  sub_20B1B195C(a2, v3 + 200);
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20B1B195C(uint64_t a1, uint64_t a2)
{
  _BYTE v3[120];
  void *v4;
  char v5;
  char v6;
  void *__p;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20B1AE548((uint64_t)v3, a2);
  sub_20B1B1A40(a1, (uint64_t)v3);
  if (v9 && v8 < 0)
    operator delete(__p);
  if (v6)
  {
    if (v5 < 0)
      operator delete(v4);
  }
}

void sub_20B1B19F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37 && a36 < 0)
    operator delete(__p);
  if (a30)
  {
    if (a29 < 0)
    {
      operator delete(a24);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B1B1A40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  char *v10;
  char *v11;
  char *p_src;
  uint64_t v13;
  int64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  int64_t v17;
  _BOOL4 v18;
  uint64_t __src;
  uint64_t v21;

  v4 = a2 + 8;
  LODWORD(__src) = 1;
  v5 = a1 + 24;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  sub_20B42B554((_QWORD *)a1);
  sub_20B1B1CC0(a1, v4);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v6 + 10) = *(_QWORD *)(a1 + 32) - v6 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  if (*(_BYTE *)(a2 + 144))
  {
    LOBYTE(__src) = 1;
    sub_20B42DB24(v5, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    v7 = *(unsigned __int8 *)(a2 + 143);
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(a2 + 128);
    __src = v7;
    sub_20B42DB24(v5, *(char **)(a1 + 32), (char *)&__src, (char *)&v21, 8);
    if (*(char *)(a2 + 143) < 0)
    {
      v8 = *(char **)(a2 + 120);
      v9 = *(_QWORD *)(a2 + 128);
      if (!v8)
      {
        if (v9)
        {
          v15 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360);
          v8 = 0;
          if (v15)
            goto LABEL_21;
        }
      }
    }
    else
    {
      v8 = (char *)(a2 + 120);
      v9 = *(unsigned __int8 *)(a2 + 143);
    }
    sub_20B42DB24(v5, *(char **)(a1 + 32), v8, &v8[v9], v9);
    if (*(_BYTE *)(a2 + 176))
    {
LABEL_12:
      LOBYTE(__src) = 1;
      sub_20B42DB24(v5, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
      v16 = *(unsigned __int8 *)(a2 + 175);
      if ((v16 & 0x80u) != 0)
        v16 = *(_QWORD *)(a2 + 160);
      __src = v16;
      sub_20B42DB24(v5, *(char **)(a1 + 32), (char *)&__src, (char *)&v21, 8);
      if ((*(char *)(a2 + 175) & 0x80000000) == 0)
      {
        p_src = (char *)(a2 + 152);
        v17 = *(unsigned __int8 *)(a2 + 175);
LABEL_19:
        v10 = *(char **)(a1 + 32);
        v11 = &p_src[v17];
        v13 = v5;
        v14 = v17;
        return sub_20B42DB24(v13, v10, p_src, v11, v14);
      }
      p_src = *(char **)(a2 + 152);
      v17 = *(_QWORD *)(a2 + 160);
      if (p_src)
        goto LABEL_19;
      if (!v17)
        goto LABEL_19;
      v18 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360);
      p_src = 0;
      if (!v18)
        goto LABEL_19;
LABEL_21:
      abort();
    }
  }
  else
  {
    LOBYTE(__src) = 0;
    sub_20B42DB24(v5, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    if (*(_BYTE *)(a2 + 176))
      goto LABEL_12;
  }
  LOBYTE(__src) = 0;
  v10 = *(char **)(a1 + 32);
  v11 = (char *)&__src + 1;
  p_src = (char *)&__src;
  v13 = v5;
  v14 = 1;
  return sub_20B42DB24(v13, v10, p_src, v11, v14);
}

char *sub_20B1B1CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  char *v6;
  char *v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  char *v14;
  char __src;
  uint64_t v16;

  __src = *(_BYTE *)a2;
  v4 = a1 + 24;
  result = sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v16, 1);
  switch(*(_BYTE *)a2)
  {
    case 1:
      if (*(_DWORD *)(a2 + 104) != 2)
        goto LABEL_11;
      v6 = (char *)(a2 + 8);
      v7 = *(char **)(a1 + 32);
      v8 = (char *)(a2 + 20);
      v9 = 12;
      v10 = v4;
      v11 = v8;
      v12 = 12;
      goto LABEL_10;
    case 2:
      if (*(_DWORD *)(a2 + 104) != 3)
        goto LABEL_11;
      v6 = (char *)(a2 + 8);
      v7 = *(char **)(a1 + 32);
      v8 = (char *)(a2 + 32);
      v9 = 24;
      v10 = v4;
      v11 = v8;
      v12 = 24;
      goto LABEL_10;
    case 4:
      if (*(_DWORD *)(a2 + 104))
        goto LABEL_11;
      v13 = (char *)(a2 + 24);
      v9 = 16;
      sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)(a2 + 8), (char *)(a2 + 24), 16);
      v7 = *(char **)(a1 + 32);
      v8 = (char *)(a2 + 40);
      v10 = v4;
      v6 = v13;
      v11 = v8;
      v12 = 16;
      goto LABEL_10;
    case 5:
      if (*(_DWORD *)(a2 + 104) != 1)
LABEL_11:
        sub_20AECFAB8();
      v14 = (char *)(a2 + 40);
      v9 = 32;
      sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)(a2 + 8), (char *)(a2 + 40), 32);
      v7 = *(char **)(a1 + 32);
      v8 = (char *)(a2 + 72);
      v10 = v4;
      v6 = v14;
      v11 = v8;
      v12 = 32;
LABEL_10:
      sub_20B42DB24(v10, v7, v6, v11, v12);
      result = sub_20B42DB24(v4, *(char **)(a1 + 32), v8, &v8[v9], v9);
      break;
    default:
      return result;
  }
  return result;
}

void sub_20B1B1E48(_DWORD *a1, uint64_t a2)
{
  _BYTE v3[120];
  void *v4;
  char v5;
  char v6;
  void *__p;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20B1AE548((uint64_t)v3, a2);
  sub_20B1B1F2C(a1, (uint64_t)v3);
  if (v9 && v8 < 0)
    operator delete(__p);
  if (v6)
  {
    if (v5 < 0)
      operator delete(v4);
  }
}

void sub_20B1B1EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37 && a36 < 0)
    operator delete(__p);
  if (a30)
  {
    if (a29 < 0)
    {
      operator delete(a24);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1B1F2C(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v7;
  int v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v4 = a2 + 8;
  v5 = a1[2];
  v7 = 1;
  (*(void (**)(_DWORD *, int *))(*(_QWORD *)a1 + 104))(a1, &v7);
  if (v5 < 1)
  {
    sub_20B1B20AC(a1, v4);
    if (*(_BYTE *)(a2 + 144))
      goto LABEL_5;
LABEL_8:
    v9 = 0;
    (*(void (**)(_DWORD *, char *))(*(_QWORD *)a1 + 80))(a1, &v9);
    if (*(_BYTE *)(a2 + 176))
      goto LABEL_6;
    goto LABEL_9;
  }
  if (v5 == 2)
  {
    v8 = 1;
    (*(void (**)(_DWORD *, int *))(*(_QWORD *)a1 + 104))(a1, &v8);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
  sub_20B1B20AC(a1, v4);
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
  if (!*(_BYTE *)(a2 + 144))
    goto LABEL_8;
LABEL_5:
  v10 = 1;
  (*(void (**)(_DWORD *, char *))(*(_QWORD *)a1 + 80))(a1, &v10);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 120);
  if (*(_BYTE *)(a2 + 176))
  {
LABEL_6:
    v12 = 1;
    (*(void (**)(_DWORD *, char *))(*(_QWORD *)a1 + 80))(a1, &v12);
    return (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 152);
  }
LABEL_9:
  v11 = 0;
  return (*(uint64_t (**)(_DWORD *, char *))(*(_QWORD *)a1 + 80))(a1, &v11);
}

void sub_20B1B20AC(_BYTE *a1, uint64_t a2)
{
  _BYTE *v4;

  v4 = (_BYTE *)a2;
  sub_20B1B2490(a1, &v4);
  switch(*(_BYTE *)a2)
  {
    case 1:
      if (*(_DWORD *)(a2 + 104) != 2)
        goto LABEL_9;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 8);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 12);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 16);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 20);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 24);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 28);
      break;
    case 2:
      if (*(_DWORD *)(a2 + 104) != 3)
LABEL_9:
        sub_20AECFAB8();
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 8);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 16);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 24);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 32);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 40);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 48);
      break;
    case 4:
      sub_20B1B2264((uint64_t)a1, a2);
      break;
    case 5:
      sub_20B1B2378((uint64_t)a1, a2);
      break;
    default:
      return;
  }
}

uint64_t sub_20B1B2264(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 104))
    sub_20AECFAB8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 36);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 44);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 48);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 52);
}

uint64_t sub_20B1B2378(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 104) != 1)
    sub_20AECFAB8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 56);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 64);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 88);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 96);
}

void sub_20B1B2490(_BYTE *a1, _BYTE **a2)
{
  _BYTE *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  if ((a1[12] & 2) != 0)
  {
    v3 = *a2;
    v7 = 0;
    sub_20B1AEB54((uint64_t)&v9, (uint64_t)v6, v3);
    if (v7 == -1)
      sub_20AECFAB8();
    v9 = &v8;
    ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6[0] = **a2;
    (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v6);
  }
}

void sub_20B1B2584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1B25A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1B25B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1B25C8(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED20, 0);
  if (v4)
  {
    sub_20B1B2C3C(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED58, 0);
    if (v5)
    {
      sub_20B1B382C(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EDE0, 0);
      if (v6)
      {
        sub_20B1B4158(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EE18, 0);
        if (v7)
        {
          sub_20B1B4D48(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C508)
            sub_20B1B58B8(&v9, a1);
          else
            sub_20B1B272C(&v8, (uint64_t *)a1);
        }
      }
    }
  }
}

void sub_20B1B272C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29[27];
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v29);
    sub_20B0D0A00((uint64_t)&v30, v29);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)&v30);
        if (!v45)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v28, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(_BYTE *)(v3 + 64) = 0;
    if (v34)
    {
      v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(_QWORD *)(v3 + 56) = v8;
      v32 = 0uLL;
      v33 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v36;
    v10 = v35;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v39)
    {
      v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(_QWORD *)(v3 + 112) = v11;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v42)
    {
      v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(_QWORD *)(v3 + 144) = v12;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(_QWORD *)(v3 + 176) = v44;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v43;
    if (!(_QWORD)v43)
      goto LABEL_46;
    v15 = *((_QWORD *)&v43 + 1);
    v16 = (void *)v43;
    if (*((_QWORD *)&v43 + 1) == (_QWORD)v43)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v43;
LABEL_45:
    *((_QWORD *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v29);
  sub_20B0D0A00((uint64_t)&v30, v29);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v28, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(_BYTE *)(v3 + 64) = 0;
    if (v34)
    {
      v17 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(_QWORD *)(v3 + 56) = v17;
      v32 = 0uLL;
      v33 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v36;
    v19 = v35;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v39)
    {
      v20 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(_QWORD *)(v3 + 112) = v20;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v42)
    {
      v21 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(_QWORD *)(v3 + 144) = v21;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(_QWORD *)(v3 + 176) = v44;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)&v30);
  if (v45)
  {
LABEL_38:
    v14 = v43;
    if (!(_QWORD)v43)
      goto LABEL_46;
    v23 = *((_QWORD *)&v43 + 1);
    v16 = (void *)v43;
    if (*((_QWORD *)&v43 + 1) == (_QWORD)v43)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v34 && SHIBYTE(v33) < 0)
    operator delete((void *)v32);
  sub_20AF4EA3C((uint64_t)v29);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *a2;
  v29[0] = a2[1];
  v25 = v29[0];
  v30 = 6;
  (*(void (**)(uint64_t *, unsigned int *))(v24 + 104))(a2, &v30);
  if (v25 < 1)
  {
    if (v30 < 3)
      sub_20B0E41CC((uint64_t)&v30, (uint64_t)a2, v4, v30);
    else
      sub_20B0E4440((uint64_t)a2, v4, v30);
  }
  else
  {
    sub_20B0E3BD4((int *)v29, (uint64_t)a2, v4, v30);
  }
  v26 = *a2;
  v29[0] = a2[1];
  v27 = v29[0];
  v30 = 1;
  (*(void (**)(uint64_t *, unsigned int *))(v26 + 104))(a2, &v30);
  if (v27 < 1)
    sub_20B1B66EC(a2, v3 + 200);
  else
    sub_20B1B6404((int *)v29, a2, v3 + 200);
}

void sub_20B1B2BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1B2C3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *exception;
  char v31;
  uint64_t v32[27];
  _BYTE v33[8];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v32);
    sub_20B0D0A00((uint64_t)v33, v32);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v33);
        if (!v48)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v8 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v8;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v39;
    v10 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v11 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v11;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v12 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v12;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v15 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v46;
LABEL_45:
    *((_QWORD *)&v46 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v32);
  sub_20B0D0A00((uint64_t)v33, v32);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v17 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v17;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v39;
    v19 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v20 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v20;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v21 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v21;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v33);
  if (v48)
  {
LABEL_38:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v23 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v45 && SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  sub_20AF4EA3C((uint64_t)v32);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0D978C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50AC94(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v32[0] = 0;
  sub_20B4552C4(v27, v32);
  if (HIDWORD(v32[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  sub_20B1B3190(a2, v3 + 200);
  v28 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v28 - 8);
  v29 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(a2 + 48) = v28 - 8;
  *(_QWORD *)(a2 + 72) = v29 - 8;
}

void sub_20B1B3148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1B3190(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *exception;
  unint64_t v11;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "src_to_dst";
  *(_QWORD *)(a1 + 96) = 10;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B50AC94(a1);
  v5 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a1 + 104) = 1;
  v6 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v11 = 0;
  sub_20B4552C4(v6, &v11);
  if (HIDWORD(v11))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  sub_20B1B32E0(a1, a2 + 8);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  LODWORD(v7) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "src";
  *(_QWORD *)(a1 + 96) = 3;
  if (!(_DWORD)v7)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B0DA2A0((uint64_t *)a1, a2 + 120);
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "dst";
  *(_QWORD *)(a1 + 96) = 3;
  if (!v9)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B0DA2A0((uint64_t *)a1, a2 + 152);
}

void sub_20B1B32E0(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unint64_t v6;
  float *v7;
  int v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  double *v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "se3_type";
  *(_QWORD *)(a1 + 96) = 8;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v25 = (_BYTE *)a2;
  sub_20B1B363C((uint64_t *)a1, &v25);
  switch(*(_BYTE *)a2)
  {
    case 1:
      if (*(_DWORD *)(a2 + 104) != 2)
      {
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 104) = 2;
      }
      v5 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "algebra_r";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v5)
        *(_BYTE *)(a1 + 104) = 1;
      v6 = sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50C420(v6, (float *)(a2 + 8));
      v7 = (float *)(a2 + 20);
      v8 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "algebra_t";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v8)
        *(_BYTE *)(a1 + 104) = 1;
      v9 = sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50C420(v9, v7);
      break;
    case 2:
      if (*(_DWORD *)(a2 + 104) != 3)
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_DWORD *)(a2 + 104) = 3;
      }
      v10 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "algebra_r";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v10)
        *(_BYTE *)(a1 + 104) = 1;
      v11 = sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50C528(v11, (double *)(a2 + 8));
      v12 = (double *)(a2 + 32);
      v13 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "algebra_t";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v13)
        *(_BYTE *)(a1 + 104) = 1;
      v14 = sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50C528(v14, v12);
      break;
    case 4:
      if (*(_DWORD *)(a2 + 104))
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_DWORD *)(a2 + 104) = 0;
      }
      v15 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "affine3x4";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v15)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50AC94(a1);
      v16 = sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50C420(v16, (float *)(a2 + 8));
      v17 = sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50C420(v17, (float *)(a2 + 24));
      v18 = sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50C420(v18, (float *)(a2 + 40));
      goto LABEL_28;
    case 5:
      if (*(_DWORD *)(a2 + 104) != 1)
      {
        *(_OWORD *)(a2 + 72) = 0u;
        *(_OWORD *)(a2 + 88) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_DWORD *)(a2 + 104) = 1;
      }
      v19 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "affine3x4";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v19)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50AC94(a1);
      v20 = sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50C528(v20, (double *)(a2 + 8));
      v21 = sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50C528(v21, (double *)(a2 + 40));
      v22 = sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50C528(v22, (double *)(a2 + 72));
LABEL_28:
      v23 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v23 - 8);
      v24 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(v24 - 8);
      *(_QWORD *)(a1 + 48) = v23 - 8;
      *(_QWORD *)(a1 + 72) = v24 - 8;
      break;
    default:
      return;
  }
}

void sub_20B1B363C(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_20B50AF4C(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_20B4557C4(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20B24965C((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20B1B37A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1B382C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char v27;
  uint64_t v28[27];
  _BYTE v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v28);
    sub_20B0D0A00((uint64_t)v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v28);
  sub_20B0D0A00((uint64_t)v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20AF4EA3C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0DD1A0((uint64_t)v28, a2, v4);
  LODWORD(v28[0]) = 1;
  sub_20B518854(a2[6], v28);
  sub_20B0DD290(a2 + 2);
  sub_20B1B3D10(a2, v3 + 200);
  v24 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2);
  v26 = *(_QWORD *)(v24 - 16) - result + *(_QWORD *)(v24 - 8);
  if (v26)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v26);
  a2[4] -= 16;
  return result;
}

void sub_20B1B3CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1B3D10(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;
  int v9;
  char v10;
  char v11;

  v4 = a2 + 8;
  v9 = 1;
  sub_20B518854(a1[6], &v9);
  sub_20B0DD290(a1 + 2);
  sub_20B1B3E90((uint64_t)a1, v4);
  v5 = a1[4];
  v6 = *(_QWORD *)(v5 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v5 - 8);
  if (v6)
    (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v6);
  a1[4] -= 16;
  v7 = (void **)(a2 + 120);
  v10 = 0;
  sub_20B51852C(a1[6], &v10);
  if (v10)
  {
    if (!*(_BYTE *)(a2 + 144))
    {
      *v7 = 0;
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      *(_BYTE *)(a2 + 144) = 1;
    }
    sub_20B518FF8(a1[6], (void **)(a2 + 120));
  }
  else if (*(_BYTE *)(a2 + 144))
  {
    if (*(char *)(a2 + 143) < 0)
      operator delete(*v7);
    *(_BYTE *)(a2 + 144) = 0;
  }
  v8 = (void **)(a2 + 152);
  v11 = 0;
  sub_20B51852C(a1[6], &v11);
  if (v11)
  {
    if (!*(_BYTE *)(a2 + 176))
    {
      *v8 = 0;
      *(_QWORD *)(a2 + 160) = 0;
      *(_QWORD *)(a2 + 168) = 0;
      *(_BYTE *)(a2 + 176) = 1;
    }
    sub_20B518FF8(a1[6], (void **)(a2 + 152));
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    if (*(char *)(a2 + 175) < 0)
      operator delete(*v8);
    *(_BYTE *)(a2 + 176) = 0;
  }
}

void sub_20B1B3E90(uint64_t a1, uint64_t a2)
{
  int v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;

  v19 = 0;
  sub_20B51852C(*(_QWORD *)(a1 + 48), &v19);
  v4 = v19;
  *(_BYTE *)a2 = v19;
  switch(v4)
  {
    case 1:
      v5 = (float *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 2)
      {
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 104) = 2;
      }
      v6 = *(_QWORD *)(a1 + 48);
      sub_20B518CC0(v6, v5);
      sub_20B518CC0(v6, (float *)(a2 + 12));
      sub_20B518CC0(v6, (float *)(a2 + 16));
      v7 = *(_QWORD *)(a1 + 48);
      sub_20B518CC0(v7, (float *)(a2 + 20));
      sub_20B518CC0(v7, (float *)(a2 + 24));
      v8 = (float *)(a2 + 28);
      goto LABEL_11;
    case 2:
      v9 = (double *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 3)
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)v9 = 0u;
        *(_DWORD *)(a2 + 104) = 3;
      }
      v10 = *(_QWORD *)(a1 + 48);
      sub_20B518DF0(v10, v9);
      sub_20B518DF0(v10, (double *)(a2 + 16));
      sub_20B518DF0(v10, (double *)(a2 + 24));
      v11 = *(_QWORD *)(a1 + 48);
      sub_20B518DF0(v11, (double *)(a2 + 32));
      sub_20B518DF0(v11, (double *)(a2 + 40));
      v12 = (double *)(a2 + 48);
      goto LABEL_15;
    case 4:
      v13 = (float *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104))
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)v13 = 0u;
        *(_DWORD *)(a2 + 104) = 0;
      }
      v14 = *(_QWORD *)(a1 + 48);
      sub_20B518CC0(v14, v13);
      sub_20B518CC0(v14, (float *)(a2 + 12));
      sub_20B518CC0(v14, (float *)(a2 + 16));
      sub_20B518CC0(v14, (float *)(a2 + 20));
      v15 = *(_QWORD *)(a1 + 48);
      sub_20B518CC0(v15, (float *)(a2 + 24));
      sub_20B518CC0(v15, (float *)(a2 + 28));
      sub_20B518CC0(v15, (float *)(a2 + 32));
      sub_20B518CC0(v15, (float *)(a2 + 36));
      v7 = *(_QWORD *)(a1 + 48);
      sub_20B518CC0(v7, (float *)(a2 + 40));
      sub_20B518CC0(v7, (float *)(a2 + 44));
      sub_20B518CC0(v7, (float *)(a2 + 48));
      v8 = (float *)(a2 + 52);
LABEL_11:
      sub_20B518CC0(v7, v8);
      return;
    case 5:
      v16 = (double *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 1)
      {
        *(_OWORD *)(a2 + 72) = 0u;
        *(_OWORD *)(a2 + 88) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)v16 = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_DWORD *)(a2 + 104) = 1;
      }
      v17 = *(_QWORD *)(a1 + 48);
      sub_20B518DF0(v17, v16);
      sub_20B518DF0(v17, (double *)(a2 + 16));
      sub_20B518DF0(v17, (double *)(a2 + 24));
      sub_20B518DF0(v17, (double *)(a2 + 32));
      v18 = *(_QWORD *)(a1 + 48);
      sub_20B518DF0(v18, (double *)(a2 + 40));
      sub_20B518DF0(v18, (double *)(a2 + 48));
      sub_20B518DF0(v18, (double *)(a2 + 56));
      sub_20B518DF0(v18, (double *)(a2 + 64));
      v11 = *(_QWORD *)(a1 + 48);
      sub_20B518DF0(v11, (double *)(a2 + 72));
      sub_20B518DF0(v11, (double *)(a2 + 80));
      sub_20B518DF0(v11, (double *)(a2 + 88));
      v12 = (double *)(a2 + 96);
LABEL_15:
      sub_20B518DF0(v11, v12);
      break;
    default:
      return;
  }
}

void sub_20B1B4158(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *exception;
  char v31;
  uint64_t v32[27];
  _BYTE v33[8];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v32);
    sub_20B0D0A00((uint64_t)v33, v32);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v33);
        if (!v48)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v8 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v8;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v39;
    v10 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v11 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v11;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v12 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v12;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v15 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v46;
LABEL_45:
    *((_QWORD *)&v46 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v32);
  sub_20B0D0A00((uint64_t)v33, v32);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v17 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v17;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v39;
    v19 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v20 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v20;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v21 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v21;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v33);
  if (v48)
  {
LABEL_38:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v23 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v45 && SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  sub_20AF4EA3C((uint64_t)v32);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0DE788(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50A7A4(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v32[0] = 0;
  sub_20B454B2C(v27, v32);
  if (HIDWORD(v32[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  sub_20B1B46AC(a2, v3 + 200);
  v28 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v28 - 8);
  v29 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(a2 + 48) = v28 - 8;
  *(_QWORD *)(a2 + 72) = v29 - 8;
}

void sub_20B1B4664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1B46AC(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *exception;
  unint64_t v11;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "src_to_dst";
  *(_QWORD *)(a1 + 96) = 10;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B50A7A4(a1);
  v5 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a1 + 104) = 1;
  v6 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v11 = 0;
  sub_20B454B2C(v6, &v11);
  if (HIDWORD(v11))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  sub_20B1B47FC(a1, a2 + 8);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  LODWORD(v7) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "src";
  *(_QWORD *)(a1 + 96) = 3;
  if (!(_DWORD)v7)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B0DF07C((uint64_t *)a1, a2 + 120);
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "dst";
  *(_QWORD *)(a1 + 96) = 3;
  if (!v9)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B0DF07C((uint64_t *)a1, a2 + 152);
}

void sub_20B1B47FC(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unint64_t v6;
  float *v7;
  int v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  double *v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "se3_type";
  *(_QWORD *)(a1 + 96) = 8;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v25 = (_BYTE *)a2;
  sub_20B1B4B58((uint64_t *)a1, &v25);
  switch(*(_BYTE *)a2)
  {
    case 1:
      if (*(_DWORD *)(a2 + 104) != 2)
      {
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 104) = 2;
      }
      v5 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "algebra_r";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v5)
        *(_BYTE *)(a1 + 104) = 1;
      v6 = sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50B8AC(v6, (float *)(a2 + 8));
      v7 = (float *)(a2 + 20);
      v8 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "algebra_t";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v8)
        *(_BYTE *)(a1 + 104) = 1;
      v9 = sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50B8AC(v9, v7);
      break;
    case 2:
      if (*(_DWORD *)(a2 + 104) != 3)
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_DWORD *)(a2 + 104) = 3;
      }
      v10 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "algebra_r";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v10)
        *(_BYTE *)(a1 + 104) = 1;
      v11 = sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50B9DC(v11, (double *)(a2 + 8));
      v12 = (double *)(a2 + 32);
      v13 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "algebra_t";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v13)
        *(_BYTE *)(a1 + 104) = 1;
      v14 = sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50B9DC(v14, v12);
      break;
    case 4:
      if (*(_DWORD *)(a2 + 104))
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_DWORD *)(a2 + 104) = 0;
      }
      v15 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "affine3x4";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v15)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50A7A4(a1);
      v16 = sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50B8AC(v16, (float *)(a2 + 8));
      v17 = sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50B8AC(v17, (float *)(a2 + 24));
      v18 = sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50B8AC(v18, (float *)(a2 + 40));
      goto LABEL_28;
    case 5:
      if (*(_DWORD *)(a2 + 104) != 1)
      {
        *(_OWORD *)(a2 + 72) = 0u;
        *(_OWORD *)(a2 + 88) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_DWORD *)(a2 + 104) = 1;
      }
      v19 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "affine3x4";
      *(_QWORD *)(a1 + 96) = 9;
      if (!v19)
        *(_BYTE *)(a1 + 104) = 1;
      sub_20B50A7A4(a1);
      v20 = sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50B9DC(v20, (double *)(a2 + 8));
      v21 = sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50B9DC(v21, (double *)(a2 + 40));
      v22 = sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_20B50B9DC(v22, (double *)(a2 + 72));
LABEL_28:
      v23 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v23 - 8);
      v24 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(v24 - 8);
      *(_QWORD *)(a1 + 48) = v23 - 8;
      *(_QWORD *)(a1 + 72) = v24 - 8;
      break;
    default:
      return;
  }
}

void sub_20B1B4B58(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_20B50AA5C(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_20B45502C(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20B24965C((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20B1B4CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B1B4D48(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  void *__p;
  uint64_t v32;
  char v33;
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)&__p);
    sub_20B0D0A00((uint64_t)v34, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v30, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)&__p);
  sub_20B0D0A00((uint64_t)v34, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v30, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20AF4EA3C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20B514490(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20B0E0A94((uint64_t)&__p, a2, v4, v25);
  else
    sub_20B0E0C84(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (v33 < 0)
      {
        if (v32 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_92:
          v29 = 0;
          if (v33 < 0)
            goto LABEL_95;
          goto LABEL_81;
        }
      }
      else if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_92;
      }
      v29 = 1;
      if (v33 < 0)
LABEL_95:
        operator delete(__p);
LABEL_81:
      if (*(_BYTE *)(a2 + 131))
        v28 = 0;
      else
        v28 = v29;
    }
    while ((v28 & 1) != 0);
  }
  LODWORD(__p) = 1;
  sub_20B514490(a2, &__p);
  sub_20B1B5364(a2, v3 + 200);
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (v33 < 0)
      {
        if (v32 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_77:
          v27 = 0;
          if (v33 < 0)
            goto LABEL_80;
          goto LABEL_66;
        }
      }
      else if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_77;
      }
      v27 = 1;
      if (v33 < 0)
LABEL_80:
        operator delete(__p);
LABEL_66:
      if (*(_BYTE *)(a2 + 131))
        v26 = 0;
      else
        v26 = v27;
    }
    while ((v26 & 1) != 0);
  }
}

void sub_20B1B531C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_20B1B5364(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  char v6;
  char v7;
  void **v8;
  double result;
  char v10;
  void *__p[2];
  uint64_t v12;

  v4 = a2 + 8;
  LODWORD(__p[0]) = 1;
  sub_20B514490(a1, __p);
  sub_20B1B5614(a1, v4);
  if (!*(_BYTE *)(a1 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20B51680C(a1, (uint64_t)__p);
      if (SHIBYTE(v12) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_17:
          v7 = 0;
          if (SHIBYTE(v12) < 0)
            goto LABEL_20;
          goto LABEL_6;
        }
      }
      else if (SHIBYTE(v12) == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_17;
      }
      v7 = 1;
      if (SHIBYTE(v12) < 0)
LABEL_20:
        operator delete(__p[0]);
LABEL_6:
      if (*(_BYTE *)(a1 + 131))
        v6 = 0;
      else
        v6 = v7;
    }
    while ((v6 & 1) != 0);
  }
  v5 = (void **)(a2 + 120);
  v10 = 0;
  sub_20B513B4C(a1, &v10);
  if (v10)
  {
    if (*(_BYTE *)(a2 + 144))
    {
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128))
        goto LABEL_28;
    }
    else
    {
      *v5 = 0;
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      *(_BYTE *)(a2 + 144) = 1;
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128))
      {
LABEL_28:
        sub_20B51680C(a1, (uint64_t)__p);
        if (*(char *)(a2 + 143) < 0)
          operator delete(*v5);
        *(_OWORD *)v5 = *(_OWORD *)__p;
        *(_QWORD *)(a2 + 136) = v12;
        ++*(_QWORD *)(a1 + 104);
        goto LABEL_31;
      }
    }
    if (*(_BYTE *)(a1 + 131))
    {
      *(_BYTE *)(a1 + 132) = 1;
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  if (*(_BYTE *)(a2 + 144))
  {
    if (*(char *)(a2 + 143) < 0)
      operator delete(*v5);
    *(_BYTE *)(a2 + 144) = 0;
  }
LABEL_31:
  v8 = (void **)(a2 + 152);
  v10 = 0;
  sub_20B513B4C(a1, &v10);
  if (v10)
  {
    if (*(_BYTE *)(a2 + 176))
    {
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128))
        goto LABEL_43;
    }
    else
    {
      *v8 = 0;
      *(_QWORD *)(a2 + 160) = 0;
      *(_QWORD *)(a2 + 168) = 0;
      *(_BYTE *)(a2 + 176) = 1;
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128))
      {
LABEL_43:
        sub_20B51680C(a1, (uint64_t)__p);
        if (*(char *)(a2 + 175) < 0)
          operator delete(*v8);
        result = *(double *)__p;
        *(_OWORD *)v8 = *(_OWORD *)__p;
        *(_QWORD *)(a2 + 168) = v12;
        ++*(_QWORD *)(a1 + 104);
        return result;
      }
    }
    if (*(_BYTE *)(a1 + 131))
    {
      *(_BYTE *)(a1 + 132) = 1;
      return result;
    }
    goto LABEL_43;
  }
  if (*(_BYTE *)(a2 + 176))
  {
    if (*(char *)(a2 + 175) < 0)
      operator delete(*v8);
    *(_BYTE *)(a2 + 176) = 0;
  }
  return result;
}

void sub_20B1B5614(uint64_t a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  _DWORD *v6;
  _QWORD *v7;
  _DWORD *v8;
  _QWORD *v9;
  unsigned __int8 v10;

  v10 = 0;
  sub_20B513B4C(a1, &v10);
  v4 = v10;
  *(_BYTE *)a2 = v10;
  switch(v4)
  {
    case 1:
      v5 = (_DWORD *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 2)
      {
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 104) = 2;
      }
      sub_20B5152B0(a1, v5);
      sub_20B5152B0(a1, (_DWORD *)(a2 + 12));
      sub_20B5152B0(a1, (_DWORD *)(a2 + 16));
      sub_20B5152B0(a1, (_DWORD *)(a2 + 20));
      sub_20B5152B0(a1, (_DWORD *)(a2 + 24));
      v6 = (_DWORD *)(a2 + 28);
      goto LABEL_11;
    case 2:
      v7 = (_QWORD *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 3)
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)v7 = 0u;
        *(_DWORD *)(a2 + 104) = 3;
      }
      sub_20B515504(a1, v7);
      sub_20B515504(a1, (_QWORD *)(a2 + 16));
      sub_20B515504(a1, (_QWORD *)(a2 + 24));
      sub_20B515504(a1, (_QWORD *)(a2 + 32));
      sub_20B515504(a1, (_QWORD *)(a2 + 40));
      sub_20B515504(a1, (_QWORD *)(a2 + 48));
      break;
    case 4:
      v8 = (_DWORD *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104))
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)v8 = 0u;
        *(_DWORD *)(a2 + 104) = 0;
      }
      sub_20B5152B0(a1, v8);
      sub_20B5152B0(a1, (_DWORD *)(a2 + 12));
      sub_20B5152B0(a1, (_DWORD *)(a2 + 16));
      sub_20B5152B0(a1, (_DWORD *)(a2 + 20));
      sub_20B5152B0(a1, (_DWORD *)(a2 + 24));
      sub_20B5152B0(a1, (_DWORD *)(a2 + 28));
      sub_20B5152B0(a1, (_DWORD *)(a2 + 32));
      sub_20B5152B0(a1, (_DWORD *)(a2 + 36));
      sub_20B5152B0(a1, (_DWORD *)(a2 + 40));
      sub_20B5152B0(a1, (_DWORD *)(a2 + 44));
      sub_20B5152B0(a1, (_DWORD *)(a2 + 48));
      v6 = (_DWORD *)(a2 + 52);
LABEL_11:
      sub_20B5152B0(a1, v6);
      break;
    case 5:
      v9 = (_QWORD *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 1)
      {
        *(_OWORD *)(a2 + 72) = 0u;
        *(_OWORD *)(a2 + 88) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)v9 = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_DWORD *)(a2 + 104) = 1;
      }
      sub_20B515504(a1, v9);
      sub_20B515504(a1, (_QWORD *)(a2 + 16));
      sub_20B515504(a1, (_QWORD *)(a2 + 24));
      sub_20B515504(a1, (_QWORD *)(a2 + 32));
      sub_20B515504(a1, (_QWORD *)(a2 + 40));
      sub_20B515504(a1, (_QWORD *)(a2 + 48));
      sub_20B515504(a1, (_QWORD *)(a2 + 56));
      sub_20B515504(a1, (_QWORD *)(a2 + 64));
      sub_20B515504(a1, (_QWORD *)(a2 + 72));
      sub_20B515504(a1, (_QWORD *)(a2 + 80));
      sub_20B515504(a1, (_QWORD *)(a2 + 88));
      sub_20B515504(a1, (_QWORD *)(a2 + 96));
      break;
    default:
      return;
  }
}

void sub_20B1B58B8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v25);
    sub_20B0D0A00((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v25);
  sub_20B0D0A00((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20AF4EA3C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0E2418((uint64_t)v25, a2, v4);
  sub_20B1B5D2C((uint64_t)v25, a2, v3 + 200);
}

void sub_20B1B5CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1B5D2C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  std::logic_error *exception;
  char v12;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_20B42BA30(a2);
  sub_20B1B5E08((uint64_t)&v12, a2, a3 + 8);
  sub_20B0E2AA4(a2, a3 + 120);
  sub_20B0E2AA4(a2, a3 + 152);
  v9 = a2[12];
  v10 = a2[9];
  a2[6] = *(_QWORD *)(v9 - 8) + *(_QWORD *)(v10 - 8) + 8;
  a2[9] = v10 - 8;
  a2[12] = v9 - 8;
}

void sub_20B1B5DF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1B5E08(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_20B42BA30(a2);
  sub_20B1B5ED8(a2, a3);
  v9 = a2[12];
  v10 = a2[9];
  a2[6] = *(_QWORD *)(v9 - 8) + *(_QWORD *)(v10 - 8) + 8;
  a2[9] = v10 - 8;
  a2[12] = v9 - 8;
}

void sub_20B1B5EC4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_20B1B5ED8(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  double result;
  std::logic_error *exception;
  _OWORD *v6;

  v2 = a1[6];
  if (a1[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v3 = *(unsigned __int8 *)(a1[3] + v2);
  a1[6] = v2 + 1;
  *(_BYTE *)a2 = v3;
  switch(v3)
  {
    case 1:
      sub_20B1B600C(a1, a2);
      break;
    case 2:
      *(_QWORD *)&result = sub_20B1B6124(a1, a2).n128_u64[0];
      break;
    case 4:
      if (*(_DWORD *)(a2 + 104))
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_DWORD *)(a2 + 104) = 0;
      }
      v6 = (_OWORD *)(a2 + 8);
      *(_QWORD *)&result = sub_20B1B6240(a1, &v6).n128_u64[0];
      break;
    case 5:
      if (*(_DWORD *)(a2 + 104) != 1)
      {
        *(_OWORD *)(a2 + 72) = 0u;
        *(_OWORD *)(a2 + 88) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_DWORD *)(a2 + 104) = 1;
      }
      v6 = (_OWORD *)(a2 + 8);
      *(_QWORD *)&result = sub_20B1B631C(a1, &v6).n128_u64[0];
      break;
    default:
      return result;
  }
  return result;
}

void sub_20B1B5FF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1B600C(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::logic_error *exception;

  v2 = (_QWORD *)(a2 + 8);
  if (*(_DWORD *)(a2 + 104) != 2)
  {
    *v2 = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 104) = 2;
  }
  v3 = result[6];
  v4 = result[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 0xB)
    goto LABEL_10;
  v7 = (uint64_t *)(result[3] + v3);
  v8 = *v7;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)v7 + 2);
  *v2 = v8;
  v9 = result[7];
  v10 = result[6] + 12;
  result[6] = v10;
  v5 = v9 >= v10;
  v11 = v9 - v10;
  if (!v5)
    v11 = 0;
  if (v11 <= 0xB)
  {
LABEL_10:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v12 = result[3] + v10;
  v13 = *(_QWORD *)v12;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(v12 + 8);
  *(_QWORD *)(a2 + 20) = v13;
  result[6] += 12;
  return result;
}

void sub_20B1B60FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1B6110(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20B1B6124(_QWORD *a1, uint64_t a2)
{
  _OWORD *v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  __int128 *v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __n128 result;
  std::logic_error *exception;

  v2 = (_OWORD *)(a2 + 8);
  if (*(_DWORD *)(a2 + 104) != 3)
  {
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *v2 = 0u;
    *(_DWORD *)(a2 + 104) = 3;
  }
  v3 = a1[6];
  v4 = a1[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 0x17)
    goto LABEL_10;
  v7 = (__int128 *)(a1[3] + v3);
  v8 = *v7;
  *(_QWORD *)(a2 + 24) = *((_QWORD *)v7 + 2);
  *v2 = v8;
  v9 = a1[7];
  v10 = a1[6] + 24;
  a1[6] = v10;
  v5 = v9 >= v10;
  v11 = v9 - v10;
  if (!v5)
    v11 = 0;
  if (v11 <= 0x17)
  {
LABEL_10:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v12 = (__n128 *)(a1[3] + v10);
  result = *v12;
  *(_QWORD *)(a2 + 48) = v12[1].n128_u64[0];
  *(__n128 *)(a2 + 32) = result;
  a1[6] += 24;
  return result;
}

void sub_20B1B6218(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1B622C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20B1B6240(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  _OWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 result;
  std::logic_error *exception;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_11;
  v6 = (_OWORD *)*a2;
  *(_OWORD *)*a2 = *(_OWORD *)(a1[3] + v3);
  v7 = a1[7];
  v8 = a1[6] + 16;
  a1[6] = v8;
  v4 = v7 >= v8;
  v9 = v7 - v8;
  if (!v4)
    v9 = 0;
  if (v9 < 0x10)
    goto LABEL_11;
  v6[1] = *(_OWORD *)(a1[3] + v8);
  v10 = a1[7];
  v11 = a1[6] + 16;
  a1[6] = v11;
  v4 = v10 >= v11;
  v12 = v10 - v11;
  if (!v4)
    v12 = 0;
  if (v12 < 0x10)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  result = *(__n128 *)(a1[3] + v11);
  v6[2] = result;
  a1[6] += 16;
  return result;
}

void sub_20B1B6308(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20B1B631C(_QWORD *a1, _OWORD **a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 result;
  __int128 v19;
  std::logic_error *exception;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (!v4)
    v5 = 0;
  if (v5 <= 0x1F)
    goto LABEL_11;
  v6 = *a2;
  v7 = (_OWORD *)(a1[3] + v3);
  v8 = v7[1];
  *v6 = *v7;
  v6[1] = v8;
  v9 = a1[7];
  v10 = a1[6] + 32;
  a1[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 < 0x20)
    goto LABEL_11;
  v12 = (_OWORD *)(a1[3] + v10);
  v13 = v12[1];
  v6[2] = *v12;
  v6[3] = v13;
  v14 = a1[7];
  v15 = a1[6] + 32;
  a1[6] = v15;
  v4 = v14 >= v15;
  v16 = v14 - v15;
  if (!v4)
    v16 = 0;
  if (v16 < 0x20)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v17 = a1[3] + v15;
  result = *(__n128 *)v17;
  v19 = *(_OWORD *)(v17 + 16);
  v6[4] = *(_OWORD *)v17;
  v6[5] = v19;
  a1[6] += 32;
  return result;
}

void sub_20B1B63F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1B6404(int *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  unsigned int v7;
  __int128 *v8;
  unsigned int v9;

  v5 = *a1;
  if (*a1 == 2)
  {
    v9 = 1;
    (*(void (**)(uint64_t *, unsigned int *))(*a2 + 104))(a2, &v9);
    if (v9 >= 2)
    {
      v7 = v9;
      v8 = sub_20B1B64F0();
      sub_20B520518((std::string *)v8, v7, 1u);
    }
    v5 = *a1;
  }
  if (v5 <= 0)
  {
    sub_20B1B66EC(a2, a3);
  }
  else
  {
    (*(void (**)(uint64_t *))(*a2 + 16))(a2);
    sub_20B1B66EC(a2, a3);
    (*(void (**)(uint64_t *))(*a2 + 24))(a2);
  }
}

__int128 *sub_20B1B64F0()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546363B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546363B8))
    return &xmmword_2546363A0;
  v2 = (char *)sub_20B1B65CC();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_2546363A0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_2546363B0 = *((_QWORD *)v2 + 2);
    xmmword_2546363A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546363A0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546363B8);
  return &xmmword_2546363A0;
}

void sub_20B1B65B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546363B8);
  _Unwind_Resume(a1);
}

void *sub_20B1B65CC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2546363D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546363D8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::Transform3Sample]", qword_2546363C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546363C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546363D8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546363F8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_2546363F8))
    return &unk_2546363E0;
  sub_20B531658((uint64_t)qword_2546363C0, (uint64_t)&unk_2546363E0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_2546363E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546363F8);
  return &unk_2546363E0;
}

void sub_20B1B66BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546363F8);
  _Unwind_Resume(a1);
}

void sub_20B1B66D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546363D8);
  _Unwind_Resume(a1);
}

void sub_20B1B66EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  int v9;
  char v10;
  char v11;

  v4 = a2 + 8;
  v5 = *a1;
  v8 = a1[1];
  v9 = 1;
  (*(void (**)(uint64_t *, int *))(v5 + 104))(a1, &v9);
  if ((int)v8 < 1)
    sub_20B1B6B54(a1, v4);
  else
    sub_20B1B686C((int *)&v8, a1, v4);
  v6 = (void **)(a2 + 120);
  v10 = 0;
  (*(void (**)(uint64_t *, char *))(*a1 + 80))(a1, &v10);
  if (v10)
  {
    if (!*(_BYTE *)(a2 + 144))
    {
      *v6 = 0;
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      *(_BYTE *)(a2 + 144) = 1;
    }
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2 + 120);
  }
  else if (*(_BYTE *)(a2 + 144))
  {
    if (*(char *)(a2 + 143) < 0)
      operator delete(*v6);
    *(_BYTE *)(a2 + 144) = 0;
  }
  v7 = (void **)(a2 + 152);
  v11 = 0;
  (*(void (**)(uint64_t *, char *))(*a1 + 80))(a1, &v11);
  if (v11)
  {
    if (!*(_BYTE *)(a2 + 176))
    {
      *v7 = 0;
      *(_QWORD *)(a2 + 160) = 0;
      *(_QWORD *)(a2 + 168) = 0;
      *(_BYTE *)(a2 + 176) = 1;
    }
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2 + 152);
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    if (*(char *)(a2 + 175) < 0)
      operator delete(*v7);
    *(_BYTE *)(a2 + 176) = 0;
  }
}

void sub_20B1B686C(int *a1, _BYTE *a2, uint64_t a3)
{
  int v5;
  unsigned int v7;
  __int128 *v8;
  unsigned int v9;

  v5 = *a1;
  if (*a1 == 2)
  {
    v9 = 1;
    (*(void (**)(_BYTE *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
    if (v9 >= 2)
    {
      v7 = v9;
      v8 = sub_20B1B6958();
      sub_20B520518((std::string *)v8, v7, 1u);
    }
    v5 = *a1;
  }
  if (v5 <= 0)
  {
    sub_20B1B6B54(a2, a3);
  }
  else
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B1B6B54(a2, a3);
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
  }
}

__int128 *sub_20B1B6958()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254636418);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254636418))
    return &xmmword_254636400;
  v2 = (char *)sub_20B1B6A34();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254636400, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254636410 = *((_QWORD *)v2 + 2);
    xmmword_254636400 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254636400, &dword_20AEBB000);
  __cxa_guard_release(&qword_254636418);
  return &xmmword_254636400;
}

void sub_20B1B6A1C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636418);
  _Unwind_Resume(a1);
}

void *sub_20B1B6A34()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254636438);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254636438))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::SE3Sample]", qword_254636420);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254636420, &dword_20AEBB000);
    __cxa_guard_release(&qword_254636438);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254636458);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254636458))
    return &unk_254636440;
  sub_20B531658((uint64_t)qword_254636420, (uint64_t)&unk_254636440);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254636440, &dword_20AEBB000);
  __cxa_guard_release(&qword_254636458);
  return &unk_254636440;
}

void sub_20B1B6B24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636458);
  _Unwind_Resume(a1);
}

void sub_20B1B6B3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254636438);
  _Unwind_Resume(a1);
}

void sub_20B1B6B54(_BYTE *a1, uint64_t a2)
{
  _QWORD *v4;
  _OWORD *v5;
  _BYTE *v6;

  v6 = (_BYTE *)a2;
  sub_20B1B6F80(a1, &v6);
  switch(*(_BYTE *)a2)
  {
    case 1:
      v4 = (_QWORD *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 2)
      {
        *v4 = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 104) = 2;
      }
      (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)a1 + 128))(a1, v4);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 12);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 16);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 20);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 24);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 28);
      break;
    case 2:
      v5 = (_OWORD *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 3)
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *v5 = 0u;
        *(_DWORD *)(a2 + 104) = 3;
      }
      (*(void (**)(_BYTE *, _OWORD *))(*(_QWORD *)a1 + 136))(a1, v5);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 16);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 24);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 32);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 40);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 48);
      break;
    case 4:
      sub_20B1B6D2C((uint64_t)a1, a2);
      break;
    case 5:
      sub_20B1B6E50((uint64_t)a1, a2);
      break;
    default:
      return;
  }
}

uint64_t sub_20B1B6D2C(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;

  v4 = (_OWORD *)(a2 + 8);
  if (*(_DWORD *)(a2 + 104))
  {
    v4[1] = 0u;
    v4[2] = 0u;
    *v4 = 0u;
    *(_DWORD *)(a2 + 104) = 0;
  }
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 128))(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 36);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 44);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 48);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 52);
}

uint64_t sub_20B1B6E50(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;

  v4 = (_OWORD *)(a2 + 8);
  if (*(_DWORD *)(a2 + 104) != 1)
  {
    v4[4] = 0u;
    v4[5] = 0u;
    v4[2] = 0u;
    v4[3] = 0u;
    *v4 = 0u;
    v4[1] = 0u;
    *(_DWORD *)(a2 + 104) = 1;
  }
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 136))(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 56);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 64);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 88);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 96);
}

void sub_20B1B6F80(_BYTE *a1, _BYTE **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  char v14;
  uint64_t v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_20B52CF30(v5, v7);
    v15 = v6;
    v14 = 0;
    sub_20B24965C((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v6 + 128);
    MEMORY[0x20BD3583C](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 80))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_20B1B70E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_20B52CE84(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1B7134@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24C40D4B8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 112) = 0;
  *(_BYTE *)(v4 + 136) = 0;
  if (*(_BYTE *)(a1 + 136))
  {
    *(_OWORD *)(v4 + 112) = *(_OWORD *)(a1 + 112);
    *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_BYTE *)(v4 + 136) = 1;
  }
  *(_BYTE *)(v4 + 176) = 0;
  *(_OWORD *)(v4 + 144) = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
  *(_BYTE *)(v4 + 224) = 0;
  if (*(_BYTE *)(a1 + 224))
  {
    *(_OWORD *)(v4 + 176) = *(_OWORD *)(a1 + 176);
    *(_QWORD *)(v4 + 192) = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    v6 = (unsigned __int128 *)(a1 + 208);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 208) = v7;
    *(_BYTE *)(v4 + 224) = 1;
  }
  *(_BYTE *)(v4 + 240) = 0;
  *(_BYTE *)(v4 + 264) = 0;
  if (*(_BYTE *)(a1 + 264))
  {
    *(_OWORD *)(v4 + 240) = *(_OWORD *)(a1 + 240);
    *(_QWORD *)(v4 + 256) = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    *(_BYTE *)(v4 + 264) = 1;
  }
  *(_QWORD *)v4 = &off_24C40D438;
  *a2 = &off_24C411E78;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24C411F70;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20B1B72E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1B72FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  _QWORD v17[5];
  uint64_t *v18;
  _QWORD v19[5];
  _QWORD *v20;
  char v21;
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[6];

  v33[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v28);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v28);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v28);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20B0C0D90(v6, (uint64_t)v22);
  }
  else if (v7 == 1)
  {
    sub_20B0F9F8C(v6, (uint64_t)v22);
  }
  else
  {
    if (v7)
      sub_20AECFAB8();
    sub_20B0C6034(v6, (uint64_t)v22);
  }
  v19[0] = v28;
  v19[1] = &v29;
  v19[2] = &v30;
  v19[3] = &v31;
  v19[4] = &v32;
  v20 = v33;
  v17[0] = v22;
  v17[1] = &v23;
  v17[2] = &v24;
  v17[3] = &v25;
  v17[4] = &v26;
  v18 = &v27;
  if (!sub_20B2178A8((uint64_t)&v21, v19, v17))
    goto LABEL_34;
  if (!*((_BYTE *)v20 + 24) || !*((_BYTE *)v18 + 24))
  {
    if ((*((_BYTE *)v20 + 24) != 0) == (*((_BYTE *)v18 + 24) != 0))
      goto LABEL_22;
LABEL_34:
    v11 = 0;
    goto LABEL_35;
  }
  v8 = (unsigned __int8 *)*v20;
  v9 = (unsigned __int8 *)v20[1];
  v10 = (unsigned __int8 *)*v18;
  if (&v9[-*v20] != (unsigned __int8 *)(v18[1] - *v18))
    goto LABEL_34;
  if (v8 != v9)
  {
    while (sub_20B2167B8(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9)
        goto LABEL_22;
    }
    goto LABEL_34;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
    goto LABEL_34;
  v11 = (*(_BYTE *)(a1 + 256) != 0) == (*(_BYTE *)(a2 + 256) != 0);
  if (*(_BYTE *)(a1 + 256) && *(_BYTE *)(a2 + 256))
  {
    v12 = *(unsigned int *)(a1 + 248);
    v13 = *(_DWORD *)(a2 + 248);
    v14 = v13 == -1;
    v15 = v13 != -1 && v13 == v12;
    if ((_DWORD)v12 == -1)
      v11 = v14;
    else
      v11 = v15;
    if ((_DWORD)v12 != -1 && v15)
    {
      v19[0] = v17;
      v11 = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))off_24C40DE08[v12])(v19, a1 + 208, a2 + 208);
    }
  }
LABEL_35:
  sub_20AF4EA3C((uint64_t)v22);
  sub_20AF4EA3C((uint64_t)v28);
  return v11;
}

void sub_20B1B7560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a23);
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B1B757C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

BOOL sub_20B1B7590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  _BOOL8 result;

  if (*(_QWORD *)a2 != *(_QWORD *)a3)
    return 0;
  v3 = *(unsigned __int8 *)(a3 + 16);
  if (*(_BYTE *)(a2 + 16))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
  {
    if ((*(_BYTE *)(a2 + 16) != 0) == (v3 != 0))
      goto LABEL_10;
    return 0;
  }
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a3 + 8))
    return 0;
LABEL_10:
  result = (*(_BYTE *)(a2 + 32) != 0) == (*(_BYTE *)(a3 + 32) != 0);
  if (*(_BYTE *)(a2 + 32))
  {
    if (*(_BYTE *)(a3 + 32))
      return *(_QWORD *)(a2 + 24) == *(_QWORD *)(a3 + 24);
  }
  return result;
}

BOOL sub_20B1B7620(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  BOOL v3;

  if (*a2 != *a3 || *((_QWORD *)a2 + 1) != *((_QWORD *)a3 + 1))
    return 0;
  if (a2[24])
    v3 = a3[24] == 0;
  else
    v3 = 1;
  if (v3)
    return (a2[24] != 0) == (a3[24] != 0);
  else
    return *((_QWORD *)a2 + 2) == *((_QWORD *)a3 + 2);
}

void sub_20B1B768C(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EB80, 0);
  if (v4)
  {
    sub_20B1B7A04(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EBC8, 0);
    if (v5)
    {
      sub_20B1B8700(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC50, 0);
      if (v6)
      {
        sub_20B1B8FF4(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC98, 0);
        if (v7)
        {
          sub_20B1B9CF0(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C2C8)
            sub_20B1BA324(&v9, (uint64_t)a1);
          else
            sub_20B1B77F0(&v8, a1);
        }
      }
    }
  }
}

uint64_t sub_20B1B77F0(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v13;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    LODWORD(v13) = 4;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    v9 = v13;
    if (v8 < 1)
    {
      sub_20B0FF5BC((uint64_t)a2, v4, v13);
      goto LABEL_17;
    }
    if (v8 == 2)
    {
      LODWORD(v13) = 3;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B0FF5BC((uint64_t)a2, v4, v9);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    LODWORD(v13) = 5;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    v11 = v13;
    if (v10 < 1)
    {
      sub_20B0FEF34((uint64_t)a2, v4, v13);
      goto LABEL_17;
    }
    if (v10 == 2)
    {
      LODWORD(v13) = 3;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B0FEF34((uint64_t)a2, v4, v11);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[2];
    LODWORD(v13) = 6;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    v7 = v13;
    if (v6 < 1)
    {
      sub_20B0D8514((uint64_t)a2, v4, v13);
      goto LABEL_17;
    }
    if (v6 == 2)
    {
      LODWORD(v13) = 3;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B0D8514((uint64_t)a2, v4, v7);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
LABEL_17:
  v13 = *((_QWORD *)a2 + 1);
  return sub_20B1BA8BC((int *)&v13, a2, (__int128 *)(v3 + 200));
}

void sub_20B1B7A04(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  _OWORD v22[3];

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    *(_QWORD *)&v21 = "version";
    *((_QWORD *)&v21 + 1) = 7;
    LODWORD(v22[0]) = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, v22);
    sub_20B0FADD8(a2, v4, v22[0]);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B50671C(a2);
      *(_QWORD *)&v21 = "version";
      *((_QWORD *)&v21 + 1) = 7;
      LODWORD(v22[0]) = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5086B4(a2, v22);
      sub_20B0D1154(a2, v4, v22[0]);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    *(_QWORD *)&v21 = "version";
    *((_QWORD *)&v21 + 1) = 7;
    LODWORD(v22[0]) = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, v22);
    sub_20B0FA468(a2, v4, v22[0]);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B50671C(a2);
  *(_QWORD *)&v21 = "version";
  *((_QWORD *)&v21 + 1) = 7;
  LODWORD(v22[0]) = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5086B4(a2, v22);
  v17 = v22[0];
  v18 = *(_OWORD *)(v3 + 216);
  v21 = *(_OWORD *)(v3 + 200);
  v22[0] = v18;
  v19 = *(_OWORD *)(v3 + 248);
  v22[1] = *(_OWORD *)(v3 + 232);
  v22[2] = v19;
  sub_20B1B7D14(a2, (unsigned __int8 *)&v21, v17);
  v20 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(a2 + 56) = v20 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B1B7D14(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  _BYTE *v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  void **v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  std::runtime_error *exception;
  const char *v23;
  unint64_t v24;
  int v25;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "sync_type";
    v6 = a1 + 72;
    v8 = (_BYTE *)(a1 + 88);
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 9;
    v9 = (_QWORD *)(a1 + 80);
    if (!v7)
      *v8 = 1;
    v10 = *a2;
    goto LABEL_14;
  }
  v9 = (_QWORD *)(a1 + 80);
  v6 = a1 + 72;
  v8 = (_BYTE *)(a1 + 88);
  v10 = *a2;
  if (*(_BYTE *)(a1 + 88))
    v11 = *(_QWORD *)(a1 + 80) == 7;
  else
    v11 = 0;
  if (!v11
    || (**(_DWORD **)v6 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v6 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_14:
    LOBYTE(v23) = 6;
    v24 = v10;
    v13 = (unsigned __int8 *)sub_20B506370(a1);
    v14 = *v13;
    *v13 = 6;
    LOBYTE(v23) = v14;
    v15 = (void **)*((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v24;
    v24 = (unint64_t)v15;
    sub_20B4181DC((void ***)&v24, v14);
  }
  if (a3 < 2)
    return;
  v16 = *a2;
  if (!*a2)
    return;
  if (v16 != 2)
  {
    if (v16 != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "invalid sync type");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    if (!*((_DWORD *)a2 + 12))
    {
      v17 = (uint64_t)(a2 + 8);
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v18 = *v8;
        *(_QWORD *)v6 = "value";
        *v9 = 5;
        if (!v18)
          *v8 = 1;
      }
      sub_20B50671C(a1);
      v23 = "version";
      v24 = 7;
      v25 = 1;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v19 = *v8;
        *(_QWORD *)v6 = "version";
        *v9 = 7;
        if (!v19)
          *v8 = 1;
      }
      sub_20B5086B4(a1, &v25);
      sub_20B1B7FD0(a1, v17);
      v20 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v20 - 8);
      *(_QWORD *)(a1 + 56) = v20 - 8;
      if (*(_BYTE *)(a1 + 88))
        *v8 = 0;
      return;
    }
LABEL_34:
    sub_20AECFAB8();
  }
  if (*((_DWORD *)a2 + 12) != 1)
    goto LABEL_34;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v21 = *v8;
    *(_QWORD *)v6 = "value";
    *v9 = 5;
    if (!v21)
      *v8 = 1;
  }
  sub_20B1B8340((uint64_t)&v23, a1, a2 + 8);
}

void sub_20B1B7FA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1B7FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B1B7FD0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  _BYTE *v7;
  _QWORD *v8;
  BOOL v9;
  BOOL v10;
  unsigned __int8 *v11;
  int v12;
  void **v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  int v17;
  void **v18;
  int v19;
  BOOL v20;
  unsigned __int8 *v21;
  int v22;
  void **v23;
  unsigned __int8 *v24;
  void **v25;
  char v26;
  void **v27;

  v4 = *(unsigned __int8 **)(a1 + 40);
  if (*v4 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "sync_command_id";
    v5 = a1 + 72;
    v7 = (_BYTE *)(a1 + 88);
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 15;
    v8 = (_QWORD *)(a1 + 80);
    if (!v6)
      *v7 = 1;
    goto LABEL_13;
  }
  v8 = (_QWORD *)(a1 + 80);
  v5 = a1 + 72;
  v7 = (_BYTE *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
    v9 = *(_QWORD *)(a1 + 80) == 7;
  else
    v9 = 0;
  if (!v9
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v10 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v10 = 0),
        !v10))
  {
LABEL_13:
    v27 = *(void ***)a2;
    v11 = (unsigned __int8 *)sub_20B506370(a1);
    v12 = *v11;
    *v11 = 6;
    v13 = (void **)*((_QWORD *)v11 + 1);
    *((_QWORD *)v11 + 1) = v27;
    v27 = v13;
    sub_20B4181DC(&v27, v12);
    v4 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v4 > 1u || (v14 = *v7, *(_QWORD *)v5 = "proceed_n", *v8 = 9, v14))
  {
    if (*(_BYTE *)(a2 + 16))
      goto LABEL_17;
LABEL_25:
    v26 = 0;
    v27 = 0;
    v16 = (unsigned __int8 *)sub_20B506370(a1);
    goto LABEL_26;
  }
  *v7 = 1;
  if (!*(_BYTE *)(a2 + 16))
    goto LABEL_25;
LABEL_17:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v15 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v15 = 0),
        !v15))
  {
    v26 = 6;
    v27 = *(void ***)(a2 + 8);
    v16 = (unsigned __int8 *)sub_20B506370(a1);
LABEL_26:
    v17 = *v16;
    *v16 = v26;
    v18 = (void **)*((_QWORD *)v16 + 1);
    *((_QWORD *)v16 + 1) = v27;
    v27 = v18;
    sub_20B4181DC(&v27, v17);
  }
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v19 = *v7, *(_QWORD *)v5 = "proceed_until", *v8 = 13, v19))
  {
    if (*(_BYTE *)(a2 + 32))
      goto LABEL_30;
LABEL_38:
    v27 = 0;
    v24 = (unsigned __int8 *)sub_20B506370(a1);
    v22 = *v24;
    *v24 = 0;
    v25 = (void **)*((_QWORD *)v24 + 1);
    *((_QWORD *)v24 + 1) = v27;
    v27 = v25;
    goto LABEL_39;
  }
  *v7 = 1;
  if (!*(_BYTE *)(a2 + 32))
    goto LABEL_38;
LABEL_30:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v20 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v20 = 0),
        !v20))
  {
    v27 = *(void ***)(a2 + 24);
    v21 = (unsigned __int8 *)sub_20B506370(a1);
    v22 = *v21;
    *v21 = 6;
    v23 = (void **)*((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v27;
    v27 = v23;
LABEL_39:
    sub_20B4181DC(&v27, v22);
  }
}

void sub_20B1B82C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1B82E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1B82F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1B8310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1B8328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1B8340(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  unsigned __int8 *v6;
  const char **v7;
  int v8;
  _BYTE *v9;
  _QWORD *v10;
  BOOL v11;
  unsigned __int8 *v12;
  int v13;
  void **v14;
  int v15;
  const char *v16;
  int v17;
  int v18;
  unsigned __int8 *v20;
  int v21;
  void **v22;
  int v23;
  BOOL v24;
  unsigned __int8 *v25;
  int v26;
  void **v27;
  unsigned __int8 *v28;
  void **v29;
  uint64_t v30;
  unint64_t v31;
  int v32;

  sub_20B50671C(a2);
  v31 = 7;
  v32 = 1;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_20B5086B4(a2, &v32);
    v6 = *(unsigned __int8 **)(a2 + 40);
    if (*v6 <= 1u)
      goto LABEL_4;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_20B5086B4(a2, &v32);
    v6 = *(unsigned __int8 **)(a2 + 40);
    if (*v6 <= 1u)
    {
LABEL_4:
      *(_QWORD *)(a2 + 72) = "status";
      v7 = (const char **)(a2 + 72);
      v9 = (_BYTE *)(a2 + 88);
      v8 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 80) = 6;
      v10 = (_QWORD *)(a2 + 80);
      if (!v8)
        *v9 = 1;
      goto LABEL_13;
    }
  }
  v10 = (_QWORD *)(a2 + 80);
  v7 = (const char **)(a2 + 72);
  v9 = (_BYTE *)(a2 + 88);
  if (!*(_BYTE *)(a2 + 88)
    || *(_QWORD *)(a2 + 80) != 7
    || (*(_DWORD *)*v7 == *(_DWORD *)"version" ? (v11 = *(_DWORD *)(*v7 + 3) == *(_DWORD *)"sion") : (v11 = 0), !v11))
  {
LABEL_13:
    v31 = *a3;
    v12 = (unsigned __int8 *)sub_20B506370(a2);
    v13 = *v12;
    *v12 = 6;
    v14 = (void **)*((_QWORD *)v12 + 1);
    *((_QWORD *)v12 + 1) = v31;
    v31 = (unint64_t)v14;
    sub_20B4181DC((void ***)&v31, v13);
    v6 = *(unsigned __int8 **)(a2 + 40);
  }
  v15 = *v9;
  if (*v6 > 1u)
  {
    if (!*v9 || *v10 != 7)
    {
LABEL_25:
      v31 = *((_QWORD *)a3 + 1);
      v20 = (unsigned __int8 *)sub_20B506370(a2);
      v21 = *v20;
      *v20 = 6;
      v22 = (void **)*((_QWORD *)v20 + 1);
      *((_QWORD *)v20 + 1) = v31;
      v31 = (unint64_t)v22;
      sub_20B4181DC((void ***)&v31, v21);
      v6 = *(unsigned __int8 **)(a2 + 40);
      goto LABEL_26;
    }
    v16 = *v7;
  }
  else
  {
    *v7 = "sync_id";
    *v10 = 7;
    if (!v15)
      *v9 = 1;
    v16 = "sync_id";
  }
  v17 = *(_DWORD *)v16;
  v18 = *(_DWORD *)(v16 + 3);
  if (v17 != *(_DWORD *)"version" || v18 != *(_DWORD *)"sion")
    goto LABEL_25;
LABEL_26:
  if (*v6 > 1u || (v23 = *v9, *v7 = "acknowledge_until", *v10 = 17, v23))
  {
    if (a3[24])
      goto LABEL_29;
LABEL_37:
    v31 = 0;
    v28 = (unsigned __int8 *)sub_20B506370(a2);
    v26 = *v28;
    *v28 = 0;
    v29 = (void **)*((_QWORD *)v28 + 1);
    *((_QWORD *)v28 + 1) = v31;
    v31 = (unint64_t)v29;
    goto LABEL_38;
  }
  *v9 = 1;
  if (!a3[24])
    goto LABEL_37;
LABEL_29:
  if (!*v9
    || *v10 != 7
    || (*(_DWORD *)*v7 == *(_DWORD *)"version" ? (v24 = *(_DWORD *)(*v7 + 3) == *(_DWORD *)"sion") : (v24 = 0), !v24))
  {
    v31 = *((_QWORD *)a3 + 2);
    v25 = (unsigned __int8 *)sub_20B506370(a2);
    v26 = *v25;
    *v25 = 6;
    v27 = (void **)*((_QWORD *)v25 + 1);
    *((_QWORD *)v25 + 1) = v31;
    v31 = (unint64_t)v27;
LABEL_38:
    sub_20B4181DC((void ***)&v31, v26);
  }
  v30 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 56) = v30 - 8;
  if (*(_BYTE *)(a2 + 88))
    *v9 = 0;
}

void sub_20B1B86A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B1B86B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B1B86D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B1B86E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B1B8700(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[4];

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      *(_QWORD *)&v22[0] = v7 + 16;
      sub_20B51E95C((uint64_t **)v22, 4u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)v22, v7 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBED4(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      *(_QWORD *)&v22[0] = v8 + 16;
      sub_20B51E95C((uint64_t **)v22, 5u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)v22, v8 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBDB8(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      *(_QWORD *)&v22[0] = v6 + 16;
      sub_20B51E95C((uint64_t **)v22, 6u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)v22, v6 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0D3CE4(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    *(_QWORD *)&v22[0] = v14 + 16;
    sub_20B51E95C((uint64_t **)v22, 2u);
  }
  else
  {
    sub_20B51EBD0((uint64_t)v22, v14 + 8);
  }
  sub_20B51956C(*(_QWORD *)(a2 + 24));
  v15 = *(_OWORD *)(v3 + 216);
  v22[0] = *(_OWORD *)(v3 + 200);
  v22[1] = v15;
  v16 = *(_OWORD *)(v3 + 248);
  v22[2] = *(_OWORD *)(v3 + 232);
  v22[3] = v16;
  sub_20B1B8990(a2, (char *)v22, 2u);
  v17 = *(_QWORD *)(a2 + 24);
  v18 = *(_QWORD *)(*(_QWORD *)(v17 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v17 + 48), *(_QWORD *)(v17 + 16) - v18 - 9);
  v19 = *(_QWORD *)(v17 + 48);
  if (v19)
    memmove((void *)(*(_QWORD *)(v17 + 24) + v18), *(const void **)(v17 + 56), v19);
  *(_QWORD *)(v17 + 48) = 0;
  v20 = *(_QWORD *)(v17 + 80);
  v21 = *(_QWORD *)(v17 + 88) - 8;
  *(_QWORD *)(v17 + 88) = v21;
  if (v20 == v21)
  {
    std::ostream::write();
    if (*(_BYTE *)(v17 + 40))
    {
      free(*(void **)(v17 + 24));
      *(_BYTE *)(v17 + 40) = 0;
    }
  }
}

void sub_20B1B8990(uint64_t a1, char *a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  std::runtime_error *exception;
  uint64_t *v19;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v19 = (uint64_t *)(v7 + 16);
    sub_20B51DD74(&v19, v6);
    if (a3 < 2)
      return;
  }
  else if (v6 < 0)
  {
    LOBYTE(v19) = -52;
    BYTE1(v19) = v6;
    std::ostream::write();
    if (a3 < 2)
      return;
  }
  else
  {
    LOBYTE(v19) = *a2;
    std::ostream::write();
    if (a3 < 2)
      return;
  }
  v8 = *a2;
  if (*a2)
  {
    if (v8 == 2)
    {
      if (*((_DWORD *)a2 + 12) == 1)
      {
        v11 = a2 + 8;
        v12 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v12 + 40))
        {
          v19 = (uint64_t *)(v12 + 16);
          sub_20B51E95C(&v19, 1u);
        }
        else
        {
          sub_20B51EBD0((uint64_t)&v19, v12 + 8);
        }
        sub_20B1B8DE4((uint64_t)&v19, a1, v11);
        return;
      }
    }
    else
    {
      if (v8 != 1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "invalid sync type");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      if (!*((_DWORD *)a2 + 12))
      {
        v9 = (uint64_t)(a2 + 8);
        v10 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v10 + 40))
        {
          v19 = (uint64_t *)(v10 + 16);
          sub_20B51E95C(&v19, 1u);
        }
        else
        {
          sub_20B51EBD0((uint64_t)&v19, v10 + 8);
        }
        sub_20B51956C(*(_QWORD *)(a1 + 24));
        sub_20B1B8BE0(a1, v9);
        v13 = *(_QWORD *)(a1 + 24);
        v14 = *(_QWORD *)(*(_QWORD *)(v13 + 88) - 8);
        sub_20B5190E0((uint64_t *)(v13 + 48), *(_QWORD *)(v13 + 16) - v14 - 9);
        v15 = *(_QWORD *)(v13 + 48);
        if (v15)
          memmove((void *)(*(_QWORD *)(v13 + 24) + v14), *(const void **)(v13 + 56), v15);
        *(_QWORD *)(v13 + 48) = 0;
        v16 = *(_QWORD *)(v13 + 80);
        v17 = *(_QWORD *)(v13 + 88) - 8;
        *(_QWORD *)(v13 + 88) = v17;
        if (v16 == v17)
        {
          std::ostream::write();
          if (*(_BYTE *)(v13 + 40))
          {
            free(*(void **)(v13 + 24));
            *(_BYTE *)(v13 + 40) = 0;
          }
        }
        return;
      }
    }
    sub_20AECFAB8();
  }
}

void sub_20B1B8BCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_20B1B8BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;

  v4 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v12 = (uint64_t *)(v4 + 16);
    sub_20B51F33C(&v12, *(_QWORD *)a2);
    if (*(_BYTE *)(a2 + 16))
      goto LABEL_3;
  }
  else
  {
    sub_20B51F644();
    if (*(_BYTE *)(a2 + 16))
    {
LABEL_3:
      v5 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v5 + 40))
      {
        v12 = (uint64_t *)(v5 + 16);
        sub_20B51DD74(&v12, 1);
        v6 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v6 + 40))
          goto LABEL_5;
      }
      else
      {
        LOBYTE(v12) = 1;
        std::ostream::write();
        v6 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v6 + 40))
        {
LABEL_5:
          v12 = (uint64_t *)(v6 + 16);
          sub_20B51F33C(&v12, *(_QWORD *)(a2 + 8));
          if (!*(_BYTE *)(a2 + 32))
            goto LABEL_19;
LABEL_13:
          v8 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v8 + 40))
          {
            v12 = (uint64_t *)(v8 + 16);
            sub_20B51DD74(&v12, 1);
            v9 = *(_QWORD *)(a1 + 24);
            if (*(_BYTE *)(v9 + 40))
            {
LABEL_15:
              v12 = (uint64_t *)(v9 + 16);
              return sub_20B51F33C(&v12, *(_QWORD *)(a2 + 24));
            }
          }
          else
          {
            LOBYTE(v12) = 1;
            std::ostream::write();
            v9 = *(_QWORD *)(a1 + 24);
            if (*(_BYTE *)(v9 + 40))
              goto LABEL_15;
          }
          return (char *)sub_20B51F644();
        }
      }
      sub_20B51F644();
      if (!*(_BYTE *)(a2 + 32))
        goto LABEL_19;
      goto LABEL_13;
    }
  }
  v7 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v7 + 40))
  {
    LOBYTE(v12) = 0;
    std::ostream::write();
    if (!*(_BYTE *)(a2 + 32))
      goto LABEL_19;
    goto LABEL_13;
  }
  v12 = (uint64_t *)(v7 + 16);
  sub_20B51DD74(&v12, 0);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_13;
LABEL_19:
  v11 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v11 + 40))
  {
    v12 = (uint64_t *)(v11 + 16);
    return sub_20B51DD74(&v12, 0);
  }
  else
  {
    LOBYTE(v12) = 0;
    return (char *)std::ostream::write();
  }
}

void sub_20B1B8DE4(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  sub_20B51956C(*(_QWORD *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v16 = (uint64_t *)(v5 + 16);
    sub_20B51DD74(&v16, *a3);
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
      goto LABEL_3;
LABEL_13:
    sub_20B51F644();
    if (a3[24])
      goto LABEL_4;
LABEL_14:
    v10 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v10 + 40))
    {
      v16 = (uint64_t *)(v10 + 16);
      sub_20B51DD74(&v16, 0);
    }
    else
    {
      LOBYTE(v16) = 0;
      std::ostream::write();
    }
    goto LABEL_17;
  }
  v9 = *a3;
  if (v9 < 0)
  {
    LOBYTE(v16) = -52;
    BYTE1(v16) = v9;
    std::ostream::write();
    v6 = *(_QWORD *)(a2 + 24);
    if (!*(_BYTE *)(v6 + 40))
      goto LABEL_13;
  }
  else
  {
    LOBYTE(v16) = *a3;
    std::ostream::write();
    v6 = *(_QWORD *)(a2 + 24);
    if (!*(_BYTE *)(v6 + 40))
      goto LABEL_13;
  }
LABEL_3:
  v16 = (uint64_t *)(v6 + 16);
  sub_20B51F33C(&v16, *((_QWORD *)a3 + 1));
  if (!a3[24])
    goto LABEL_14;
LABEL_4:
  v7 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v16 = (uint64_t *)(v7 + 16);
    sub_20B51DD74(&v16, 1);
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
LABEL_6:
      v16 = (uint64_t *)(v8 + 16);
      sub_20B51F33C(&v16, *((_QWORD *)a3 + 2));
      goto LABEL_17;
    }
  }
  else
  {
    LOBYTE(v16) = 1;
    std::ostream::write();
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
      goto LABEL_6;
  }
  sub_20B51F644();
LABEL_17:
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v11 + 48), *(_QWORD *)(v11 + 16) - v12 - 9);
  v13 = *(_QWORD *)(v11 + 48);
  if (v13)
    memmove((void *)(*(_QWORD *)(v11 + 24) + v12), *(const void **)(v11 + 56), v13);
  *(_QWORD *)(v11 + 48) = 0;
  v14 = *(_QWORD *)(v11 + 80);
  v15 = *(_QWORD *)(v11 + 88) - 8;
  *(_QWORD *)(v11 + 88) = v15;
  if (v14 == v15)
  {
    std::ostream::write();
    if (*(_BYTE *)(v11 + 40))
    {
      free(*(void **)(v11 + 24));
      *(_BYTE *)(v11 + 40) = 0;
    }
  }
}

void sub_20B1B8FF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  _OWORD v22[3];

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    *(_QWORD *)&v21 = "version";
    *((_QWORD *)&v21 + 1) = 7;
    LODWORD(v22[0]) = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, v22);
    sub_20B0FCF30(a2, v4, v22[0]);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B505FB0(a2);
      *(_QWORD *)&v21 = "version";
      *((_QWORD *)&v21 + 1) = 7;
      LODWORD(v22[0]) = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5069D0(a2, v22);
      sub_20B0D4F88(a2, v4, v22[0]);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    *(_QWORD *)&v21 = "version";
    *((_QWORD *)&v21 + 1) = 7;
    LODWORD(v22[0]) = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, v22);
    sub_20B0FC7EC(a2, v4, v22[0]);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B505FB0(a2);
  *(_QWORD *)&v21 = "version";
  *((_QWORD *)&v21 + 1) = 7;
  LODWORD(v22[0]) = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5069D0(a2, v22);
  v17 = v22[0];
  v18 = *(_OWORD *)(v3 + 216);
  v21 = *(_OWORD *)(v3 + 200);
  v22[0] = v18;
  v19 = *(_OWORD *)(v3 + 248);
  v22[1] = *(_OWORD *)(v3 + 232);
  v22[2] = v19;
  sub_20B1B9304(a2, (unsigned __int8 *)&v21, v17);
  v20 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(a2 + 56) = v20 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B1B9304(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  _BYTE *v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  std::runtime_error *exception;
  const char *v23;
  uint64_t v24;
  int v25;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "sync_type";
    v6 = a1 + 72;
    v8 = (_BYTE *)(a1 + 88);
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 9;
    v9 = (_QWORD *)(a1 + 80);
    if (!v7)
      *v8 = 1;
    v10 = *a2;
    goto LABEL_14;
  }
  v9 = (_QWORD *)(a1 + 80);
  v6 = a1 + 72;
  v8 = (_BYTE *)(a1 + 88);
  v10 = *a2;
  if (*(_BYTE *)(a1 + 88))
    v11 = *(_QWORD *)(a1 + 80) == 7;
  else
    v11 = 0;
  if (!v11
    || (**(_DWORD **)v6 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v6 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_14:
    LOBYTE(v23) = 6;
    v24 = v10;
    v13 = (unsigned __int8 *)sub_20B505B08(a1);
    v14 = *v13;
    *v13 = 6;
    LOBYTE(v23) = v14;
    v15 = *((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v24;
    v24 = v15;
    sub_20B416E08(&v24, v14);
  }
  if (a3 < 2)
    return;
  v16 = *a2;
  if (!*a2)
    return;
  if (v16 != 2)
  {
    if (v16 != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "invalid sync type");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    if (!*((_DWORD *)a2 + 12))
    {
      v17 = (uint64_t)(a2 + 8);
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v18 = *v8;
        *(_QWORD *)v6 = "value";
        *v9 = 5;
        if (!v18)
          *v8 = 1;
      }
      sub_20B505FB0(a1);
      v23 = "version";
      v24 = 7;
      v25 = 1;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v19 = *v8;
        *(_QWORD *)v6 = "version";
        *v9 = 7;
        if (!v19)
          *v8 = 1;
      }
      sub_20B5069D0(a1, &v25);
      sub_20B1B95C0(a1, v17);
      v20 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v20 - 8);
      *(_QWORD *)(a1 + 56) = v20 - 8;
      if (*(_BYTE *)(a1 + 88))
        *v8 = 0;
      return;
    }
LABEL_34:
    sub_20AECFAB8();
  }
  if (*((_DWORD *)a2 + 12) != 1)
    goto LABEL_34;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v21 = *v8;
    *(_QWORD *)v6 = "value";
    *v9 = 5;
    if (!v21)
      *v8 = 1;
  }
  sub_20B1B9930((uint64_t)&v23, a1, a2 + 8);
}

void sub_20B1B9594(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1B95A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B1B95C0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  _BYTE *v7;
  _QWORD *v8;
  BOOL v9;
  BOOL v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v4 = *(unsigned __int8 **)(a1 + 40);
  if (*v4 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "sync_command_id";
    v5 = a1 + 72;
    v7 = (_BYTE *)(a1 + 88);
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 15;
    v8 = (_QWORD *)(a1 + 80);
    if (!v6)
      *v7 = 1;
    goto LABEL_13;
  }
  v8 = (_QWORD *)(a1 + 80);
  v5 = a1 + 72;
  v7 = (_BYTE *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
    v9 = *(_QWORD *)(a1 + 80) == 7;
  else
    v9 = 0;
  if (!v9
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v10 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v10 = 0),
        !v10))
  {
LABEL_13:
    v27 = *(_QWORD *)a2;
    v11 = (unsigned __int8 *)sub_20B505B08(a1);
    v12 = *v11;
    *v11 = 6;
    v13 = *((_QWORD *)v11 + 1);
    *((_QWORD *)v11 + 1) = v27;
    v27 = v13;
    sub_20B416E08(&v27, v12);
    v4 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v4 > 1u || (v14 = *v7, *(_QWORD *)v5 = "proceed_n", *v8 = 9, v14))
  {
    if (*(_BYTE *)(a2 + 16))
      goto LABEL_17;
LABEL_25:
    v26 = 0;
    v27 = 0;
    v16 = (unsigned __int8 *)sub_20B505B08(a1);
    goto LABEL_26;
  }
  *v7 = 1;
  if (!*(_BYTE *)(a2 + 16))
    goto LABEL_25;
LABEL_17:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v15 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v15 = 0),
        !v15))
  {
    v26 = 6;
    v27 = *(_QWORD *)(a2 + 8);
    v16 = (unsigned __int8 *)sub_20B505B08(a1);
LABEL_26:
    v17 = *v16;
    *v16 = v26;
    v18 = *((_QWORD *)v16 + 1);
    *((_QWORD *)v16 + 1) = v27;
    v27 = v18;
    sub_20B416E08(&v27, v17);
  }
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v19 = *v7, *(_QWORD *)v5 = "proceed_until", *v8 = 13, v19))
  {
    if (*(_BYTE *)(a2 + 32))
      goto LABEL_30;
LABEL_38:
    v27 = 0;
    v24 = (unsigned __int8 *)sub_20B505B08(a1);
    v22 = *v24;
    *v24 = 0;
    v25 = *((_QWORD *)v24 + 1);
    *((_QWORD *)v24 + 1) = v27;
    v27 = v25;
    goto LABEL_39;
  }
  *v7 = 1;
  if (!*(_BYTE *)(a2 + 32))
    goto LABEL_38;
LABEL_30:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v20 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v20 = 0),
        !v20))
  {
    v27 = *(_QWORD *)(a2 + 24);
    v21 = (unsigned __int8 *)sub_20B505B08(a1);
    v22 = *v21;
    *v21 = 6;
    v23 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v27;
    v27 = v23;
LABEL_39:
    sub_20B416E08(&v27, v22);
  }
}

void sub_20B1B98B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1B98D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1B98E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1B9900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1B9918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1B9930(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  unsigned __int8 *v6;
  const char **v7;
  int v8;
  _BYTE *v9;
  _QWORD *v10;
  BOOL v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  int v15;
  const char *v16;
  int v17;
  int v18;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  sub_20B505FB0(a2);
  v31 = 7;
  v32 = 1;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_20B5069D0(a2, &v32);
    v6 = *(unsigned __int8 **)(a2 + 40);
    if (*v6 <= 1u)
      goto LABEL_4;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_20B5069D0(a2, &v32);
    v6 = *(unsigned __int8 **)(a2 + 40);
    if (*v6 <= 1u)
    {
LABEL_4:
      *(_QWORD *)(a2 + 72) = "status";
      v7 = (const char **)(a2 + 72);
      v9 = (_BYTE *)(a2 + 88);
      v8 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 80) = 6;
      v10 = (_QWORD *)(a2 + 80);
      if (!v8)
        *v9 = 1;
      goto LABEL_13;
    }
  }
  v10 = (_QWORD *)(a2 + 80);
  v7 = (const char **)(a2 + 72);
  v9 = (_BYTE *)(a2 + 88);
  if (!*(_BYTE *)(a2 + 88)
    || *(_QWORD *)(a2 + 80) != 7
    || (*(_DWORD *)*v7 == *(_DWORD *)"version" ? (v11 = *(_DWORD *)(*v7 + 3) == *(_DWORD *)"sion") : (v11 = 0), !v11))
  {
LABEL_13:
    v31 = *a3;
    v12 = (unsigned __int8 *)sub_20B505B08(a2);
    v13 = *v12;
    *v12 = 6;
    v14 = *((_QWORD *)v12 + 1);
    *((_QWORD *)v12 + 1) = v31;
    v31 = v14;
    sub_20B416E08(&v31, v13);
    v6 = *(unsigned __int8 **)(a2 + 40);
  }
  v15 = *v9;
  if (*v6 > 1u)
  {
    if (!*v9 || *v10 != 7)
    {
LABEL_25:
      v31 = *((_QWORD *)a3 + 1);
      v20 = (unsigned __int8 *)sub_20B505B08(a2);
      v21 = *v20;
      *v20 = 6;
      v22 = *((_QWORD *)v20 + 1);
      *((_QWORD *)v20 + 1) = v31;
      v31 = v22;
      sub_20B416E08(&v31, v21);
      v6 = *(unsigned __int8 **)(a2 + 40);
      goto LABEL_26;
    }
    v16 = *v7;
  }
  else
  {
    *v7 = "sync_id";
    *v10 = 7;
    if (!v15)
      *v9 = 1;
    v16 = "sync_id";
  }
  v17 = *(_DWORD *)v16;
  v18 = *(_DWORD *)(v16 + 3);
  if (v17 != *(_DWORD *)"version" || v18 != *(_DWORD *)"sion")
    goto LABEL_25;
LABEL_26:
  if (*v6 > 1u || (v23 = *v9, *v7 = "acknowledge_until", *v10 = 17, v23))
  {
    if (a3[24])
      goto LABEL_29;
LABEL_37:
    v31 = 0;
    v28 = (unsigned __int8 *)sub_20B505B08(a2);
    v26 = *v28;
    *v28 = 0;
    v29 = *((_QWORD *)v28 + 1);
    *((_QWORD *)v28 + 1) = v31;
    v31 = v29;
    goto LABEL_38;
  }
  *v9 = 1;
  if (!a3[24])
    goto LABEL_37;
LABEL_29:
  if (!*v9
    || *v10 != 7
    || (*(_DWORD *)*v7 == *(_DWORD *)"version" ? (v24 = *(_DWORD *)(*v7 + 3) == *(_DWORD *)"sion") : (v24 = 0), !v24))
  {
    v31 = *((_QWORD *)a3 + 2);
    v25 = (unsigned __int8 *)sub_20B505B08(a2);
    v26 = *v25;
    *v25 = 6;
    v27 = *((_QWORD *)v25 + 1);
    *((_QWORD *)v25 + 1) = v31;
    v31 = v27;
LABEL_38:
    sub_20B416E08(&v31, v26);
  }
  v30 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 56) = v30 - 8;
  if (*(_BYTE *)(a2 + 88))
    *v9 = 0;
}

void sub_20B1B9C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B1B9CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B1B9CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B1B9CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1B9CF0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *result;
  _OWORD v20[4];

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      LOBYTE(v20[0]) = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v8, (uint64_t)v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FE288(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        LOBYTE(v20[0]) = *(_BYTE *)(a2 + 32);
        sub_20AEC01D0(v6, (uint64_t)v20, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20B0D66C4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      LOBYTE(v20[0]) = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v10, (uint64_t)v20, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      LOBYTE(v20[0]) = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v9, (uint64_t)v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FDCE4(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  LOBYTE(v20[0]) = v7;
  sub_20AEC01D0(v11, (uint64_t)v20, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    LOBYTE(v20[0]) = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v13, (uint64_t)v20, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  v14 = *(_OWORD *)(v3 + 216);
  v20[0] = *(_OWORD *)(v3 + 200);
  v20[1] = v14;
  v15 = *(_OWORD *)(v3 + 248);
  v20[2] = *(_OWORD *)(v3 + 232);
  v20[3] = v15;
  sub_20B1B9F18(a2, (unsigned __int8 *)v20, 2u);
  v16 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v17 = *(_QWORD **)(a2 + 24);
    LOBYTE(v20[0]) = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v17, (uint64_t)v20, 1);
  }
  v18 = *(_QWORD **)(a2 + 24);
  LOBYTE(v20[0]) = v16;
  result = sub_20AEC01D0(v18, (uint64_t)v20, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20B1B9F18(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  std::runtime_error *exception;
  unsigned __int8 v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v13 = *a2;
  sub_20B512EB0(a1, &v13);
  if (a3 < 2)
    return;
  v6 = *a2;
  if (!*a2)
    return;
  if (v6 == 2)
  {
    if (*((_DWORD *)a2 + 12) == 1)
    {
      sub_20B1BA1CC((uint64_t)&v14, a1, a2 + 8);
      return;
    }
LABEL_14:
    sub_20AECFAB8();
  }
  if (v6 != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "invalid sync type");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (*((_DWORD *)a2 + 12))
    goto LABEL_14;
  v7 = (uint64_t)(a2 + 8);
  if (*(_QWORD *)(a1 + 40))
  {
    v8 = *(_QWORD **)(a1 + 24);
    v15 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v8, (uint64_t)&v15, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20B1BA08C(a1, v7);
  v9 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = *(_QWORD **)(a1 + 24);
    v16 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v10, (uint64_t)&v16, 1);
  }
  v11 = *(_QWORD **)(a1 + 24);
  v17 = v9;
  sub_20AEC01D0(v11, (uint64_t)&v17, 1);
  ++*(_QWORD *)(a1 + 40);
}

void sub_20B1BA078(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1BA08C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  char v11;
  char v12;
  char v13;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    v11 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v4, (uint64_t)&v11, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a2 + 16))
  {
    v8 = 1;
    sub_20B512EB0(a1, &v8);
    if (*(_QWORD *)(a1 + 40))
    {
      v5 = *(_QWORD **)(a1 + 24);
      v12 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v5, (uint64_t)&v12, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a1 + 40);
    if (*(_BYTE *)(a2 + 32))
      goto LABEL_7;
LABEL_11:
    v9 = 0;
    sub_20B512EB0(a1, &v9);
    return;
  }
  v7 = 0;
  sub_20B512EB0(a1, &v7);
  if (!*(_BYTE *)(a2 + 32))
    goto LABEL_11;
LABEL_7:
  v10 = 1;
  sub_20B512EB0(a1, &v10);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    v13 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v6, (uint64_t)&v13, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
}

_QWORD *sub_20B1BA1CC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *result;
  unsigned __int8 v13;
  unsigned __int8 v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  if (*(_QWORD *)(a2 + 40))
  {
    v5 = *(_QWORD **)(a2 + 24);
    v15 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v5, (uint64_t)&v15, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20B512EB0(a2, a3);
  if (*(_QWORD *)(a2 + 40))
  {
    v6 = *(_QWORD **)(a2 + 24);
    v16 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v6, (uint64_t)&v16, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  if (!a3[24])
  {
    v13 = 0;
    sub_20B512EB0(a2, &v13);
    v9 = *(_BYTE *)(a2 + 34);
    if (!*(_QWORD *)(a2 + 40))
      goto LABEL_10;
    goto LABEL_9;
  }
  v14 = 1;
  sub_20B512EB0(a2, &v14);
  if (*(_QWORD *)(a2 + 40))
  {
    v7 = *(_QWORD **)(a2 + 24);
    v17 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v7, (uint64_t)&v17, 1);
  }
  std::ostream::operator<<();
  v8 = *(_QWORD *)(a2 + 40) + 1;
  *(_QWORD *)(a2 + 40) = v8;
  v9 = *(_BYTE *)(a2 + 34);
  if (v8)
  {
LABEL_9:
    v10 = *(_QWORD **)(a2 + 24);
    v18 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v10, (uint64_t)&v18, 1);
  }
LABEL_10:
  v11 = *(_QWORD **)(a2 + 24);
  v19 = v9;
  result = sub_20AEC01D0(v11, (uint64_t)&v19, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

char *sub_20B1BA324(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  char *result;
  uint64_t v14;
  _OWORD v15[4];

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    LODWORD(v15[0]) = 4;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)v15, (char *)v15 + 4, 4);
    v7 = v15[0];
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE9C0(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    LODWORD(v15[0]) = 5;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)v15, (char *)v15 + 4, 4);
    v8 = v15[0];
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE8A4(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    LODWORD(v15[0]) = 6;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)v15, (char *)v15 + 4, 4);
    v6 = v15[0];
    sub_20B42B554((_QWORD *)a2);
    sub_20B0D757C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  LODWORD(v15[0]) = 2;
  sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)v15, (char *)v15 + 4, 4);
  v10 = v15[0];
  sub_20B42B554((_QWORD *)a2);
  v11 = *(_OWORD *)(v3 + 216);
  v15[0] = *(_OWORD *)(v3 + 200);
  v15[1] = v11;
  v12 = *(_OWORD *)(v3 + 248);
  v15[2] = *(_OWORD *)(v3 + 232);
  v15[3] = v12;
  result = sub_20B1BA4F0(a2, (char *)v15, v10);
  v14 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v14 + 10) = *(_QWORD *)(a2 + 32) - v14 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  return result;
}

char *sub_20B1BA4F0(uint64_t a1, char *a2, unsigned int a3)
{
  uint64_t v6;
  char *result;
  int v8;
  uint64_t v9;
  std::runtime_error *exception;
  char __src;
  int v12;
  char v13[3];
  char v14;
  int v15;
  uint64_t v16;

  __src = *a2;
  v6 = a1 + 24;
  result = sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v12, 1);
  if (a3 >= 2)
  {
    v8 = *a2;
    if (*a2)
    {
      if (v8 == 2)
      {
        if (*((_DWORD *)a2 + 12) == 1)
        {
          v15 = 1;
          sub_20B42DB24(v6, *(char **)(a1 + 32), (char *)&v15, (char *)&v16, 4);
          return sub_20B1BA7B8((uint64_t)&v14, a1, a2 + 8);
        }
      }
      else
      {
        if (v8 != 1)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "invalid sync type");
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        if (!*((_DWORD *)a2 + 12))
        {
          v12 = 1;
          sub_20B42DB24(v6, *(char **)(a1 + 32), (char *)&v12, v13, 4);
          sub_20B42B554((_QWORD *)a1);
          result = sub_20B1BA680(a1, a2 + 8);
          v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
          *(_QWORD *)(v9 + 10) = *(_QWORD *)(a1 + 32) - v9 - 18;
          *(_QWORD *)(a1 + 56) -= 8;
          return result;
        }
      }
      sub_20AECFAB8();
    }
  }
  return result;
}

void sub_20B1BA66C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_20B1BA680(uint64_t a1, char *__src)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int64_t v10;
  char v12;
  char __srca;
  char v14;
  char v15;
  uint64_t v16;

  v4 = a1 + 24;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), __src, __src + 8, 8);
  if (!__src[16])
  {
    v12 = 0;
    sub_20B42DB24(v4, *(char **)(a1 + 32), &v12, &__srca, 1);
    v5 = __src + 32;
    if (__src[32])
      goto LABEL_3;
LABEL_5:
    v14 = 0;
    v6 = *(char **)(a1 + 32);
    v9 = &v15;
    v8 = &v14;
    v7 = v4;
    v10 = 1;
    return sub_20B42DB24(v7, v6, v8, v9, v10);
  }
  __srca = 1;
  sub_20B42DB24(v4, *(char **)(a1 + 32), &__srca, &v14, 1);
  sub_20B42DB24(v4, *(char **)(a1 + 32), __src + 8, __src + 16, 8);
  v5 = __src + 32;
  if (!__src[32])
    goto LABEL_5;
LABEL_3:
  v15 = 1;
  sub_20B42DB24(v4, *(char **)(a1 + 32), &v15, (char *)&v16, 1);
  v6 = *(char **)(a1 + 32);
  v7 = v4;
  v8 = __src + 24;
  v9 = v5;
  v10 = 8;
  return sub_20B42DB24(v7, v6, v8, v9, v10);
}

char *sub_20B1BA7B8(uint64_t a1, uint64_t a2, char *a3)
{
  char *v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *p_src;
  int64_t v12;
  char *result;
  uint64_t v14;
  char v15;
  char __src;
  uint64_t v17;

  sub_20B42B554((_QWORD *)a2);
  sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), a3, a3 + 1, 1);
  v5 = a3 + 16;
  sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), a3 + 8, a3 + 16, 8);
  v7 = a3[24];
  v6 = a3 + 24;
  if (v7)
  {
    __src = 1;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), &__src, (char *)&v17, 1);
    v8 = *(char **)(a2 + 32);
    v9 = a2 + 24;
    v10 = v5;
    p_src = v6;
    v12 = 8;
  }
  else
  {
    v15 = 0;
    v8 = *(char **)(a2 + 32);
    p_src = &__src;
    v10 = &v15;
    v9 = a2 + 24;
    v12 = 1;
  }
  result = sub_20B42DB24(v9, v8, v10, p_src, v12);
  v14 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v14 + 10) = *(_QWORD *)(a2 + 32) - v14 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  return result;
}

uint64_t sub_20B1BA8BC(int *a1, _QWORD *a2, __int128 *a3)
{
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  LODWORD(v12) = 2;
  (*(void (**)(_QWORD *, __int128 *))(*a2 + 104))(a2, &v12);
  v6 = v12;
  if (*a1 < 1
    || *a1 == 2 && (LODWORD(v12) = 1, (*(void (**)(_QWORD *, __int128 *))(*a2 + 104))(a2, &v12), *a1 <= 0))
  {
    v10 = a3[1];
    v12 = *a3;
    v13 = v10;
    v11 = a3[3];
    v14 = a3[2];
    v15 = v11;
    return sub_20B1BA9C0(a2, (unsigned __int8 *)&v12, v6);
  }
  else
  {
    (*(void (**)(_QWORD *))(*a2 + 16))(a2);
    v7 = a3[1];
    v12 = *a3;
    v13 = v7;
    v8 = a3[3];
    v14 = a3[2];
    v15 = v8;
    sub_20B1BA9C0(a2, (unsigned __int8 *)&v12, v6);
    return (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
  }
}

uint64_t sub_20B1BA9C0(_QWORD *a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t result;
  int v7;
  std::runtime_error *exception;
  uint64_t v9;

  LOBYTE(v9) = *a2;
  result = (*(uint64_t (**)(_QWORD *, uint64_t *))(*a1 + 80))(a1, &v9);
  if (a3 >= 2)
  {
    v7 = *a2;
    if (*a2)
    {
      if (v7 == 2)
      {
        if (*((_DWORD *)a2 + 12) == 1)
        {
          v9 = a1[1];
          return sub_20B1BAD88((int *)&v9, (uint64_t)a1, (uint64_t)(a2 + 8));
        }
      }
      else
      {
        if (v7 != 1)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "invalid sync type");
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        if (!*((_DWORD *)a2 + 12))
        {
          v9 = a1[1];
          return sub_20B1BAACC((int *)&v9, (uint64_t)a1, (uint64_t)(a2 + 8));
        }
      }
      sub_20AECFAB8();
    }
  }
  return result;
}

void sub_20B1BAAB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1BAACC(int *a1, uint64_t a2, uint64_t a3)
{
  int v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v7 = 1;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 >= 1)
    return sub_20B1BAC28(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3);
  if (*(_BYTE *)(a3 + 16))
  {
    v9 = 1;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v9);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
    if (*(_BYTE *)(a3 + 32))
    {
LABEL_5:
      v11 = 1;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v11);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 24);
    }
  }
  else
  {
    v8 = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v8);
    if (*(_BYTE *)(a3 + 32))
      goto LABEL_5;
  }
  v10 = 0;
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v10);
}

uint64_t sub_20B1BAC28(int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  int v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v5 = *a1;
  if (*a1 == 2)
  {
    v8 = 1;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3);
  if (*(_BYTE *)(a3 + 16))
  {
    v10 = 1;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v10);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
    if (*(_BYTE *)(a3 + 32))
      goto LABEL_7;
  }
  else
  {
    v9 = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v9);
    if (*(_BYTE *)(a3 + 32))
    {
LABEL_7:
      v12 = 1;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v12);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 24);
      if (v5 < 1)
        return result;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    }
  }
  v11 = 0;
  result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v11);
  if (v5 < 1)
    return result;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t sub_20B1BAD88(int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t result;
  int v8;
  int v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = 1;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
  if (*a1 < 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
    if (*(_BYTE *)(a3 + 24))
    {
      v13 = 1;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v13);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 16);
    }
    else
    {
      v12 = 0;
      return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v12);
    }
  }
  else
  {
    if (*a1 == 2 && (v9 = 1, (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v9), *a1 < 1))
    {
      v6 = 0;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v6 = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
    if (*(_BYTE *)(a3 + 24))
    {
      v11 = 1;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v11);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 16);
      if (v6)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    }
    else
    {
      v10 = 0;
      result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v10);
      if (v6)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    }
  }
  return result;
}

void sub_20B1BAF58(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED20, 0);
  if (v4)
  {
    sub_20B1BB58C(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED58, 0);
    if (v5)
    {
      sub_20B1BC104(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EDE0, 0);
      if (v6)
      {
        sub_20B1BC988(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EE18, 0);
        if (v7)
        {
          sub_20B1BD500(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C508)
            sub_20B1BDF50(&v9, a1);
          else
            sub_20B1BB0BC(&v8, (uint64_t)a1);
        }
      }
    }
  }
}

uint64_t sub_20B1BB0BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v27;
  uint64_t v28[27];
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v28);
    sub_20B0D0A00((uint64_t)&v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)&v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v28);
  sub_20B0D0A00((uint64_t)&v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)&v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20AF4EA3C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(_QWORD *)a2;
  v28[0] = *(_QWORD *)(a2 + 8);
  v25 = v28[0];
  v29 = 6;
  (*(void (**)(uint64_t, unsigned int *))(v24 + 104))(a2, &v29);
  if (v25 < 1)
  {
    if (v29 < 3)
      sub_20B0E41CC((uint64_t)&v29, a2, v4, v29);
    else
      sub_20B0E4440(a2, v4, v29);
  }
  else
  {
    sub_20B0E3BD4((int *)v28, a2, v4, v29);
  }
  return sub_20B1BEA5C((uint64_t)v28, (_DWORD *)a2, v3 + 200);
}

void sub_20B1BB544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1BB58C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *exception;
  char v32;
  uint64_t v33[27];
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v33);
    sub_20B0D0A00((uint64_t)v34, v33);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v33);
  sub_20B0D0A00((uint64_t)v34, v33);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20AF4EA3C((uint64_t)v33);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0D978C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50AC94(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v33[0] = 0;
  sub_20B4552C4(v27, v33);
  if (HIDWORD(v33[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (LODWORD(v33[0]) >= 2)
    v28 = 2;
  else
    v28 = v33[0];
  sub_20B1BBAE4(a2, v3 + 200, v28);
  v29 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v29 - 8);
  v30 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 48) = v29 - 8;
  *(_QWORD *)(a2 + 72) = v30 - 8;
}

void sub_20B1BBA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1BBAE4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  char *v7;
  char v8;
  int v9;
  int v10;
  int v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::runtime_error *exception;
  unint64_t v23;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "sync_type";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  v7 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v23 = 0;
  sub_20B4552C4(v7, &v23);
  v8 = v23;
  if (v23 >= 0x100)
    goto LABEL_30;
  *(_BYTE *)a2 = v23;
  if (a3 >= 2 && v8)
  {
    if (v8 != 2)
    {
      if (v8 != 1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "invalid sync type");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      if (*(_BYTE *)(a2 + 56))
      {
        v9 = *(_DWORD *)(a2 + 48);
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        if (v9)
          *(_DWORD *)(a2 + 48) = 0;
        v10 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "value";
        *(_QWORD *)(a1 + 96) = 5;
        if (v10)
        {
LABEL_12:
          sub_20B50AC94(a1);
          v11 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v11)
            *(_BYTE *)(a1 + 104) = 1;
          v12 = (char *)sub_20B50AF4C((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v23 = 0;
          sub_20B4552C4(v12, &v23);
          if (!HIDWORD(v23))
          {
            sub_20B1BBDF0(a1, a2 + 8);
LABEL_24:
            v17 = *(_QWORD *)(a1 + 48);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v17 - 8);
            v18 = *(_QWORD *)(a1 + 72);
            *(_QWORD *)(a1 + 112) = *(_QWORD *)(v18 - 8);
            *(_QWORD *)(a1 + 48) = v17 - 8;
            *(_QWORD *)(a1 + 72) = v18 - 8;
            return;
          }
          goto LABEL_30;
        }
      }
      else
      {
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 48) = 0;
        *(_BYTE *)(a2 + 56) = 1;
        v19 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "value";
        *(_QWORD *)(a1 + 96) = 5;
        if (v19)
          goto LABEL_12;
      }
      *(_BYTE *)(a1 + 104) = 1;
      goto LABEL_12;
    }
    if (*(_BYTE *)(a2 + 56))
    {
      v13 = *(_DWORD *)(a2 + 48);
      *(_BYTE *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      if (v13 != 1)
        *(_DWORD *)(a2 + 48) = 1;
      v14 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "value";
      *(_QWORD *)(a1 + 96) = 5;
      if (v14)
      {
LABEL_20:
        sub_20B50AC94(a1);
        v15 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "version";
        *(_QWORD *)(a1 + 96) = 7;
        if (!v15)
          *(_BYTE *)(a1 + 104) = 1;
        v16 = (char *)sub_20B50AF4C((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        v23 = 0;
        sub_20B4552C4(v16, &v23);
        if (!HIDWORD(v23))
        {
          sub_20B1BBF84(a1, a2 + 8);
          goto LABEL_24;
        }
LABEL_30:
        v21 = __cxa_allocate_exception(8uLL);
        *v21 = &off_24C41FEF0;
        __cxa_throw(v21, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
    }
    else
    {
      *(_BYTE *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 48) = 1;
      *(_BYTE *)(a2 + 56) = 1;
      v20 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "value";
      *(_QWORD *)(a1 + 96) = 5;
      if (v20)
        goto LABEL_20;
    }
    *(_BYTE *)(a1 + 104) = 1;
    goto LABEL_20;
  }
}

void sub_20B1BBDDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1BBDF0(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  int v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "sync_command_id";
  *(_QWORD *)(a1 + 96) = 15;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v10 = 0;
  sub_20B4552C4(v5, &v10);
  *(_QWORD *)a2 = v10;
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "proceed_n";
  *(_QWORD *)(a1 + 96) = 9;
  if (v6)
  {
    if (*(_BYTE *)sub_20B50AF4C((uint64_t *)a1))
    {
LABEL_5:
      v7 = (char *)sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v10 = 0;
      sub_20B4552C4(v7, &v10);
      *(_QWORD *)(a2 + 8) = v10;
      *(_BYTE *)(a2 + 16) = 1;
      goto LABEL_9;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_20B50AF4C((uint64_t *)a1))
      goto LABEL_5;
  }
  ++*(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 16))
    *(_BYTE *)(a2 + 16) = 0;
LABEL_9:
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "proceed_until";
  *(_QWORD *)(a1 + 96) = 13;
  if (v8)
  {
    if (*(_BYTE *)sub_20B50AF4C((uint64_t *)a1))
    {
LABEL_11:
      v9 = (char *)sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v10 = 0;
      sub_20B4552C4(v9, &v10);
      *(_QWORD *)(a2 + 24) = v10;
      *(_BYTE *)(a2 + 32) = 1;
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_20B50AF4C((uint64_t *)a1))
      goto LABEL_11;
  }
  ++*(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 32))
    *(_BYTE *)(a2 + 32) = 0;
}

void sub_20B1BBF84(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  int v6;
  char *v7;
  int v8;
  char *v9;
  _QWORD *exception;
  unint64_t v11;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "status";
  *(_QWORD *)(a1 + 96) = 6;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v11 = 0;
  sub_20B4552C4(v5, &v11);
  if (v11 >= 0x100)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  *(_BYTE *)a2 = v11;
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "sync_id";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  v7 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v11 = 0;
  sub_20B4552C4(v7, &v11);
  *(_QWORD *)(a2 + 8) = v11;
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "acknowledge_until";
  *(_QWORD *)(a1 + 96) = 17;
  if (v8)
  {
    if (*(_BYTE *)sub_20B50AF4C((uint64_t *)a1))
    {
LABEL_8:
      v9 = (char *)sub_20B50AF4C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v11 = 0;
      sub_20B4552C4(v9, &v11);
      *(_QWORD *)(a2 + 16) = v11;
      *(_BYTE *)(a2 + 24) = 1;
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_20B50AF4C((uint64_t *)a1))
      goto LABEL_8;
  }
  ++*(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 24))
    *(_BYTE *)(a2 + 24) = 0;
}

uint64_t sub_20B1BC104(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  char v30;
  uint64_t v31[27];
  _BYTE v32[8];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v31);
    sub_20B0D0A00((uint64_t)v32, v31);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v32);
        if (!v47)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v30, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v33;
    *(_BYTE *)(v3 + 64) = 0;
    if (v36)
    {
      v8 = v35;
      *(_OWORD *)(v3 + 40) = v34;
      *(_QWORD *)(v3 + 56) = v8;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v38;
    v10 = v37;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v41)
    {
      v11 = v40;
      *(_OWORD *)(v3 + 96) = v39;
      *(_QWORD *)(v3 + 112) = v11;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v44)
    {
      v12 = v43;
      *(_OWORD *)(v3 + 128) = v42;
      *(_QWORD *)(v3 + 144) = v12;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v47;
    if (v47)
    {
      *(_OWORD *)(v3 + 160) = v45;
      *(_QWORD *)(v3 + 176) = v46;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v45;
    if (!(_QWORD)v45)
      goto LABEL_46;
    v15 = *((_QWORD *)&v45 + 1);
    v16 = (void *)v45;
    if (*((_QWORD *)&v45 + 1) == (_QWORD)v45)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v45;
LABEL_45:
    *((_QWORD *)&v45 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v31);
  sub_20B0D0A00((uint64_t)v32, v31);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v30, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v33;
    *(_BYTE *)(v3 + 64) = 0;
    if (v36)
    {
      v17 = v35;
      *(_OWORD *)(v3 + 40) = v34;
      *(_QWORD *)(v3 + 56) = v17;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v38;
    v19 = v37;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v41)
    {
      v20 = v40;
      *(_OWORD *)(v3 + 96) = v39;
      *(_QWORD *)(v3 + 112) = v20;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v44)
    {
      v21 = v43;
      *(_OWORD *)(v3 + 128) = v42;
      *(_QWORD *)(v3 + 144) = v21;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v47;
    if (v47)
    {
      *(_OWORD *)(v3 + 160) = v45;
      *(_QWORD *)(v3 + 176) = v46;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v32);
  if (v47)
  {
LABEL_38:
    v14 = v45;
    if (!(_QWORD)v45)
      goto LABEL_46;
    v23 = *((_QWORD *)&v45 + 1);
    v16 = (void *)v45;
    if (*((_QWORD *)&v45 + 1) == (_QWORD)v45)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v44 && SHIBYTE(v43) < 0)
    operator delete((void *)v42);
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  sub_20AF4EA3C((uint64_t)v31);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0DD1A0((uint64_t)v31, a2, v4);
  LODWORD(v31[0]) = 2;
  sub_20B518854(a2[6], v31);
  v24 = v31[0];
  v25 = a2 + 2;
  sub_20B0DD290(a2 + 2);
  if (v24 >= 2)
    v26 = 2;
  else
    v26 = v24;
  sub_20B1BC5EC(a2, v3 + 200, v26);
  v27 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(*v25 + 32))(a2 + 2);
  v29 = *(_QWORD *)(v27 - 16) - result + *(_QWORD *)(v27 - 8);
  if (v29)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v25 + 40))(a2 + 2, v29);
  a2[4] -= 16;
  return result;
}

void sub_20B1BC5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

