void sub_20B1BC5EC(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::runtime_error *exception;
  unsigned __int8 v12;
  int v13;
  char v14;
  int v15;

  v12 = 0;
  sub_20B51852C(a1[6], &v12);
  v6 = v12;
  *(_BYTE *)a2 = v12;
  if (a3 >= 2 && v6)
  {
    if (v6 == 2)
    {
      if (*(_BYTE *)(a2 + 56))
      {
        v8 = *(_DWORD *)(a2 + 48);
        *(_BYTE *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        if (v8 != 1)
          *(_DWORD *)(a2 + 48) = 1;
      }
      else
      {
        *(_BYTE *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_DWORD *)(a2 + 48) = 1;
        *(_BYTE *)(a2 + 56) = 1;
      }
      v15 = 1;
      sub_20B518854(a1[6], &v15);
      sub_20B1BC8B0((uint64_t)&v14, a1, a2 + 8);
    }
    else
    {
      if (v6 != 1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "invalid sync type");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      if (*(_BYTE *)(a2 + 56))
      {
        v7 = *(_DWORD *)(a2 + 48);
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        if (v7)
          *(_DWORD *)(a2 + 48) = 0;
      }
      else
      {
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 48) = 0;
        *(_BYTE *)(a2 + 56) = 1;
      }
      v13 = 1;
      sub_20B518854(a1[6], &v13);
      sub_20B0DD290(a1 + 2);
      sub_20B1BC7EC((uint64_t)a1, a2 + 8);
      v9 = a1[4];
      v10 = *(_QWORD *)(v9 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v9 - 8);
      if (v10)
        (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v10);
      a1[4] -= 16;
    }
  }
}

void sub_20B1BC7D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1BC7EC(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  sub_20B518BE4(*(_QWORD *)(a1 + 48), (_QWORD *)a2);
  v4 = 0;
  sub_20B51852C(*(_QWORD *)(a1 + 48), &v4);
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
    }
    sub_20B518BE4(*(_QWORD *)(a1 + 48), (_QWORD *)(a2 + 8));
  }
  else if (*(_BYTE *)(a2 + 16))
  {
    *(_BYTE *)(a2 + 16) = 0;
  }
  v5 = 0;
  sub_20B51852C(*(_QWORD *)(a1 + 48), &v5);
  if (v5)
  {
    if (!*(_BYTE *)(a2 + 32))
    {
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 1;
    }
    sub_20B518BE4(*(_QWORD *)(a1 + 48), (_QWORD *)(a2 + 24));
  }
  else if (*(_BYTE *)(a2 + 32))
  {
    *(_BYTE *)(a2 + 32) = 0;
  }
}

uint64_t sub_20B1BC8B0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;

  v5 = a2 + 2;
  sub_20B0DD290(a2 + 2);
  sub_20B51852C(a2[6], (_BYTE *)a3);
  sub_20B518BE4(a2[6], (_QWORD *)(a3 + 8));
  v9 = 0;
  sub_20B51852C(a2[6], &v9);
  if (v9)
  {
    if (!*(_BYTE *)(a3 + 24))
    {
      *(_QWORD *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 24) = 1;
    }
    sub_20B518BE4(a2[6], (_QWORD *)(a3 + 16));
  }
  else if (*(_BYTE *)(a3 + 24))
  {
    *(_BYTE *)(a3 + 24) = 0;
  }
  v6 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(v5);
  v8 = *(_QWORD *)(v6 - 16) - result + *(_QWORD *)(v6 - 8);
  if (v8)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v5 + 40))(v5, v8);
  a2[4] -= 16;
  return result;
}

void sub_20B1BC988(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *exception;
  char v32;
  uint64_t v33[27];
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v33);
    sub_20B0D0A00((uint64_t)v34, v33);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v33);
  sub_20B0D0A00((uint64_t)v34, v33);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20AF4EA3C((uint64_t)v33);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0DE788(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50A7A4(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v33[0] = 0;
  sub_20B454B2C(v27, v33);
  if (HIDWORD(v33[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (LODWORD(v33[0]) >= 2)
    v28 = 2;
  else
    v28 = v33[0];
  sub_20B1BCEE0(a2, v3 + 200, v28);
  v29 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v29 - 8);
  v30 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 48) = v29 - 8;
  *(_QWORD *)(a2 + 72) = v30 - 8;
}

void sub_20B1BCE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1BCEE0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  char *v7;
  char v8;
  int v9;
  int v10;
  int v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::runtime_error *exception;
  unint64_t v23;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "sync_type";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  v7 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v23 = 0;
  sub_20B454B2C(v7, &v23);
  v8 = v23;
  if (v23 >= 0x100)
    goto LABEL_30;
  *(_BYTE *)a2 = v23;
  if (a3 >= 2 && v8)
  {
    if (v8 != 2)
    {
      if (v8 != 1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "invalid sync type");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      if (*(_BYTE *)(a2 + 56))
      {
        v9 = *(_DWORD *)(a2 + 48);
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        if (v9)
          *(_DWORD *)(a2 + 48) = 0;
        v10 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "value";
        *(_QWORD *)(a1 + 96) = 5;
        if (v10)
        {
LABEL_12:
          sub_20B50A7A4(a1);
          v11 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v11)
            *(_BYTE *)(a1 + 104) = 1;
          v12 = (char *)sub_20B50AA5C((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v23 = 0;
          sub_20B454B2C(v12, &v23);
          if (!HIDWORD(v23))
          {
            sub_20B1BD1EC(a1, a2 + 8);
LABEL_24:
            v17 = *(_QWORD *)(a1 + 48);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v17 - 8);
            v18 = *(_QWORD *)(a1 + 72);
            *(_QWORD *)(a1 + 112) = *(_QWORD *)(v18 - 8);
            *(_QWORD *)(a1 + 48) = v17 - 8;
            *(_QWORD *)(a1 + 72) = v18 - 8;
            return;
          }
          goto LABEL_30;
        }
      }
      else
      {
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 48) = 0;
        *(_BYTE *)(a2 + 56) = 1;
        v19 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "value";
        *(_QWORD *)(a1 + 96) = 5;
        if (v19)
          goto LABEL_12;
      }
      *(_BYTE *)(a1 + 104) = 1;
      goto LABEL_12;
    }
    if (*(_BYTE *)(a2 + 56))
    {
      v13 = *(_DWORD *)(a2 + 48);
      *(_BYTE *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      if (v13 != 1)
        *(_DWORD *)(a2 + 48) = 1;
      v14 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "value";
      *(_QWORD *)(a1 + 96) = 5;
      if (v14)
      {
LABEL_20:
        sub_20B50A7A4(a1);
        v15 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "version";
        *(_QWORD *)(a1 + 96) = 7;
        if (!v15)
          *(_BYTE *)(a1 + 104) = 1;
        v16 = (char *)sub_20B50AA5C((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        v23 = 0;
        sub_20B454B2C(v16, &v23);
        if (!HIDWORD(v23))
        {
          sub_20B1BD380(a1, a2 + 8);
          goto LABEL_24;
        }
LABEL_30:
        v21 = __cxa_allocate_exception(8uLL);
        *v21 = &off_24C41FEF0;
        __cxa_throw(v21, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
      }
    }
    else
    {
      *(_BYTE *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 48) = 1;
      *(_BYTE *)(a2 + 56) = 1;
      v20 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "value";
      *(_QWORD *)(a1 + 96) = 5;
      if (v20)
        goto LABEL_20;
    }
    *(_BYTE *)(a1 + 104) = 1;
    goto LABEL_20;
  }
}

void sub_20B1BD1D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1BD1EC(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  int v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "sync_command_id";
  *(_QWORD *)(a1 + 96) = 15;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v10 = 0;
  sub_20B454B2C(v5, &v10);
  *(_QWORD *)a2 = v10;
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "proceed_n";
  *(_QWORD *)(a1 + 96) = 9;
  if (v6)
  {
    if (*(_BYTE *)sub_20B50AA5C((uint64_t *)a1))
    {
LABEL_5:
      v7 = (char *)sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v10 = 0;
      sub_20B454B2C(v7, &v10);
      *(_QWORD *)(a2 + 8) = v10;
      *(_BYTE *)(a2 + 16) = 1;
      goto LABEL_9;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_20B50AA5C((uint64_t *)a1))
      goto LABEL_5;
  }
  ++*(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 16))
    *(_BYTE *)(a2 + 16) = 0;
LABEL_9:
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "proceed_until";
  *(_QWORD *)(a1 + 96) = 13;
  if (v8)
  {
    if (*(_BYTE *)sub_20B50AA5C((uint64_t *)a1))
    {
LABEL_11:
      v9 = (char *)sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v10 = 0;
      sub_20B454B2C(v9, &v10);
      *(_QWORD *)(a2 + 24) = v10;
      *(_BYTE *)(a2 + 32) = 1;
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_20B50AA5C((uint64_t *)a1))
      goto LABEL_11;
  }
  ++*(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 32))
    *(_BYTE *)(a2 + 32) = 0;
}

void sub_20B1BD380(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  int v6;
  char *v7;
  int v8;
  char *v9;
  _QWORD *exception;
  unint64_t v11;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "status";
  *(_QWORD *)(a1 + 96) = 6;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v11 = 0;
  sub_20B454B2C(v5, &v11);
  if (v11 >= 0x100)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  *(_BYTE *)a2 = v11;
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "sync_id";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  v7 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v11 = 0;
  sub_20B454B2C(v7, &v11);
  *(_QWORD *)(a2 + 8) = v11;
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "acknowledge_until";
  *(_QWORD *)(a1 + 96) = 17;
  if (v8)
  {
    if (*(_BYTE *)sub_20B50AA5C((uint64_t *)a1))
    {
LABEL_8:
      v9 = (char *)sub_20B50AA5C((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v11 = 0;
      sub_20B454B2C(v9, &v11);
      *(_QWORD *)(a2 + 16) = v11;
      *(_BYTE *)(a2 + 24) = 1;
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_20B50AA5C((uint64_t *)a1))
      goto LABEL_8;
  }
  ++*(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 24))
    *(_BYTE *)(a2 + 24) = 0;
}

void sub_20B1BD500(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  void *__p;
  uint64_t v33;
  char v34;
  _BYTE v35[8];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)&__p);
    sub_20B0D0A00((uint64_t)v35, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v35);
        if (!v50)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v36;
    *(_BYTE *)(v3 + 64) = 0;
    if (v39)
    {
      v8 = v38;
      *(_OWORD *)(v3 + 40) = v37;
      *(_QWORD *)(v3 + 56) = v8;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v41;
    v10 = v40;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v44)
    {
      v11 = v43;
      *(_OWORD *)(v3 + 96) = v42;
      *(_QWORD *)(v3 + 112) = v11;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v47)
    {
      v12 = v46;
      *(_OWORD *)(v3 + 128) = v45;
      *(_QWORD *)(v3 + 144) = v12;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v50;
    if (v50)
    {
      *(_OWORD *)(v3 + 160) = v48;
      *(_QWORD *)(v3 + 176) = v49;
      v48 = 0uLL;
      v49 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v48;
    if (!(_QWORD)v48)
      goto LABEL_46;
    v15 = *((_QWORD *)&v48 + 1);
    v16 = (void *)v48;
    if (*((_QWORD *)&v48 + 1) == (_QWORD)v48)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v48;
LABEL_45:
    *((_QWORD *)&v48 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)&__p);
  sub_20B0D0A00((uint64_t)v35, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v36;
    *(_BYTE *)(v3 + 64) = 0;
    if (v39)
    {
      v17 = v38;
      *(_OWORD *)(v3 + 40) = v37;
      *(_QWORD *)(v3 + 56) = v17;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v41;
    v19 = v40;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v44)
    {
      v20 = v43;
      *(_OWORD *)(v3 + 96) = v42;
      *(_QWORD *)(v3 + 112) = v20;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v47)
    {
      v21 = v46;
      *(_OWORD *)(v3 + 128) = v45;
      *(_QWORD *)(v3 + 144) = v21;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v50;
    if (v50)
    {
      *(_OWORD *)(v3 + 160) = v48;
      *(_QWORD *)(v3 + 176) = v49;
      v48 = 0uLL;
      v49 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v35);
  if (v50)
  {
LABEL_38:
    v14 = v48;
    if (!(_QWORD)v48)
      goto LABEL_46;
    v23 = *((_QWORD *)&v48 + 1);
    v16 = (void *)v48;
    if (*((_QWORD *)&v48 + 1) == (_QWORD)v48)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v47 && SHIBYTE(v46) < 0)
    operator delete((void *)v45);
  if (v44 && SHIBYTE(v43) < 0)
    operator delete((void *)v42);
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  sub_20AF4EA3C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20B514490(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20B0E0A94((uint64_t)&__p, a2, v4, v25);
  else
    sub_20B0E0C84(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (v34 < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_95:
          v30 = 0;
          if (v34 < 0)
            goto LABEL_98;
          goto LABEL_84;
        }
      }
      else if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_95;
      }
      v30 = 1;
      if (v34 < 0)
LABEL_98:
        operator delete(__p);
LABEL_84:
      if (*(_BYTE *)(a2 + 131))
        v29 = 0;
      else
        v29 = v30;
    }
    while ((v29 & 1) != 0);
  }
  LODWORD(__p) = 2;
  sub_20B514490(a2, &__p);
  if (__p >= 2)
    v26 = 2;
  else
    v26 = __p;
  sub_20B1BDB1C(a2, v3 + 200, v26);
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (v34 < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_80:
          v28 = 0;
          if (v34 < 0)
            goto LABEL_83;
          goto LABEL_69;
        }
      }
      else if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_80;
      }
      v28 = 1;
      if (v34 < 0)
LABEL_83:
        operator delete(__p);
LABEL_69:
      if (*(_BYTE *)(a2 + 131))
        v27 = 0;
      else
        v27 = v28;
    }
    while ((v27 & 1) != 0);
  }
}

void sub_20B1BDAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1BDB1C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  char v9;
  char v10;
  std::runtime_error *exception;
  void *__p[2];
  char v13;

  LOBYTE(__p[0]) = 0;
  sub_20B513B4C(a1, __p);
  v6 = LOBYTE(__p[0]);
  *(_BYTE *)a2 = __p[0];
  if (a3 < 2 || !v6)
    return;
  if (v6 != 2)
  {
    if (v6 != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "invalid sync type");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    if (*(_BYTE *)(a2 + 56))
    {
      v7 = *(_DWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      *(_BYTE *)(a2 + 40) = 0;
      if (v7)
        *(_DWORD *)(a2 + 48) = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      *(_BYTE *)(a2 + 40) = 0;
      *(_DWORD *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 56) = 1;
    }
    LODWORD(__p[0]) = 1;
    sub_20B514490(a1, __p);
    sub_20B1BDD54(a1, a2 + 8);
    if (*(_BYTE *)(a1 + 131))
      return;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a1, (uint64_t)__p);
      if (v13 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_25:
          v10 = 0;
          if (v13 < 0)
            goto LABEL_28;
          goto LABEL_14;
        }
      }
      else if (v13 == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_25;
      }
      v10 = 1;
      if (v13 < 0)
LABEL_28:
        operator delete(__p[0]);
LABEL_14:
      if (*(_BYTE *)(a1 + 131))
        v9 = 0;
      else
        v9 = v10;
      if ((v9 & 1) == 0)
        return;
    }
  }
  if (*(_BYTE *)(a2 + 56))
  {
    v8 = *(_DWORD *)(a2 + 48);
    *(_BYTE *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = 0;
    if (v8 != 1)
      *(_DWORD *)(a2 + 48) = 1;
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 48) = 1;
    *(_BYTE *)(a2 + 56) = 1;
  }
  sub_20B1BDE14((uint64_t)__p, a1, a2 + 8);
}

void sub_20B1BDD40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1BDD54(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  sub_20B514DE0(a1, (_QWORD *)a2);
  v4 = 0;
  sub_20B513B4C(a1, &v4);
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
    }
    sub_20B514DE0(a1, (_QWORD *)(a2 + 8));
  }
  else if (*(_BYTE *)(a2 + 16))
  {
    *(_BYTE *)(a2 + 16) = 0;
  }
  v5 = 0;
  sub_20B513B4C(a1, &v5);
  if (v5)
  {
    if (!*(_BYTE *)(a2 + 32))
    {
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 1;
    }
    sub_20B514DE0(a1, (_QWORD *)(a2 + 24));
  }
  else if (*(_BYTE *)(a2 + 32))
  {
    *(_BYTE *)(a2 + 32) = 0;
  }
}

void sub_20B1BDE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  char v6;
  void *__p[2];
  char v8;

  LODWORD(__p[0]) = 1;
  sub_20B514490(a2, __p);
  sub_20B513B4C(a2, (_BYTE *)a3);
  sub_20B514DE0(a2, (_QWORD *)(a3 + 8));
  LOBYTE(__p[0]) = 0;
  sub_20B513B4C(a2, __p);
  if (LOBYTE(__p[0]))
  {
    if (!*(_BYTE *)(a3 + 24))
    {
      *(_QWORD *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 24) = 1;
    }
    sub_20B514DE0(a2, (_QWORD *)(a3 + 16));
  }
  else if (*(_BYTE *)(a3 + 24))
  {
    *(_BYTE *)(a3 + 24) = 0;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)__p);
      if (v8 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_20:
          v6 = 0;
          if (v8 < 0)
            goto LABEL_23;
          goto LABEL_9;
        }
      }
      else if (v8 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_20;
      }
      v6 = 1;
      if (v8 < 0)
LABEL_23:
        operator delete(__p[0]);
LABEL_9:
      if (*(_BYTE *)(a2 + 131))
        v5 = 0;
      else
        v5 = v6;
    }
    while ((v5 & 1) != 0);
  }
}

_QWORD *sub_20B1BDF50(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v25;
  uint64_t v26[27];
  _BYTE v27[8];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v26);
    sub_20B0D0A00((uint64_t)v27, v26);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v27);
        if (!v42)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v25, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v8;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v33;
    v10 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v11;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v12;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v15 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v40;
LABEL_45:
    *((_QWORD *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v26);
  sub_20B0D0A00((uint64_t)v27, v26);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v25, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v17;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v33;
    v19 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v20;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v21;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v23 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  sub_20AF4EA3C((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0E2418((uint64_t)v26, a2, v4);
  return sub_20B1BE3C4((uint64_t)v26, a2, v3 + 200);
}

void sub_20B1BE37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B1BE3C4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  unsigned int v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  sub_20B42BA30(a2);
  if (v9 >= 2)
    v10 = 2;
  else
    v10 = v9;
  result = sub_20B1BE498(a2, a3, v10);
  v12 = a2[12];
  v13 = a2[9];
  a2[6] = *(_QWORD *)(v12 - 8) + *(_QWORD *)(v13 - 8) + 8;
  a2[9] = v13 - 8;
  a2[12] = v12 - 8;
  return result;
}

void sub_20B1BE484(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1BE498(_QWORD *result, uint64_t a2, unsigned int a3)
{
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  std::logic_error *exception;
  std::runtime_error *v8;
  char v9;
  char v10;

  v3 = result[6];
  if (result[7] <= v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v4 = *(unsigned __int8 *)(result[3] + v3);
  result[6] = v3 + 1;
  *(_BYTE *)a2 = v4;
  if (a3 >= 2 && v4)
  {
    if (v4 == 2)
    {
      if (*(_BYTE *)(a2 + 56))
      {
        v6 = *(_DWORD *)(a2 + 48);
        *(_BYTE *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        if (v6 != 1)
          *(_DWORD *)(a2 + 48) = 1;
      }
      else
      {
        *(_BYTE *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_DWORD *)(a2 + 48) = 1;
        *(_BYTE *)(a2 + 56) = 1;
      }
      return sub_20B1BE8B0((uint64_t)&v10, result, a2 + 8);
    }
    else
    {
      if (v4 != 1)
      {
        v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v8, "invalid sync type");
        __cxa_throw(v8, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      if (*(_BYTE *)(a2 + 56))
      {
        v5 = *(_DWORD *)(a2 + 48);
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        if (v5)
          *(_DWORD *)(a2 + 48) = 0;
      }
      else
      {
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 48) = 0;
        *(_BYTE *)(a2 + 56) = 1;
      }
      return sub_20B1BE648((uint64_t)&v9, result, (_QWORD *)(a2 + 8));
    }
  }
  return result;
}

void sub_20B1BE620(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1BE634(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1BE648(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_20B42BA30(a2);
  result = sub_20B1BE718(a2, a3);
  v10 = a2[12];
  v11 = a2[9];
  a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
  a2[9] = v11 - 8;
  a2[12] = v10 - 8;
  return result;
}

void sub_20B1BE704(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1BE718(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *a2 = *(_QWORD *)(a1[3] + v2);
  a1[6] += 8;
  sub_20B1BE7B8(a1, (uint64_t)(a2 + 1));
  return sub_20B1BE7B8(a1, (uint64_t)(a2 + 3));
}

void sub_20B1BE7A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1BE7B8(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;

  v3 = result[6];
  v2 = result[7];
  if (v2 <= v3)
    goto LABEL_12;
  v4 = result[3];
  v5 = *(unsigned __int8 *)(v4 + v3);
  v6 = v3 + 1;
  result[6] = v6;
  if (v5)
  {
    if (!*(_BYTE *)(a2 + 8))
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 1;
    }
    v7 = v2 >= v6;
    v8 = v2 - v6;
    if (!v7)
      v8 = 0;
    if (v8 > 7)
    {
      *(_QWORD *)a2 = *(_QWORD *)(v4 + v6);
      result[6] += 8;
      return result;
    }
LABEL_12:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  if (*(_BYTE *)(a2 + 8))
    *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_20B1BE888(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1BE89C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1BE8B0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_20B42BA30(a2);
  result = sub_20B1BE980(a2, a3);
  v10 = a2[12];
  v11 = a2[9];
  a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
  a2[9] = v11 - 8;
  a2[12] = v10 - 8;
  return result;
}

void sub_20B1BE96C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1BE980(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  std::logic_error *exception;

  v2 = a1[6];
  if (a1[7] <= v2)
    goto LABEL_6;
  *(_BYTE *)a2 = *(_BYTE *)(a1[3] + v2);
  v3 = a1[7];
  v4 = a1[6] + 1;
  a1[6] = v4;
  v5 = v3 >= v4;
  v6 = v3 - v4;
  if (!v5)
    v6 = 0;
  if (v6 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1[3] + v4);
  a1[6] += 8;
  return sub_20B1BE7B8(a1, a2 + 16);
}

void sub_20B1BEA34(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1BEA48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1BEA5C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;
  __int128 *v10;
  unsigned int v11;
  unsigned int v12;

  v5 = a2[2];
  v11 = 2;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v11);
  v6 = v11;
  if (v5 < 1)
    return sub_20B1BED58(a2, a3, v11);
  if (v5 == 2)
  {
    v12 = 1;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v9 = v12;
      v10 = sub_20B1BEB5C();
      sub_20B520518((std::string *)v10, v9, 2u);
    }
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
  if (v6 >= 2)
    v7 = 2;
  else
    v7 = v6;
  sub_20B1BED58(a2, a3, v7);
  return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20B1BEB5C()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546350D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546350D8))
    return &xmmword_2546350C0;
  v2 = (char *)sub_20B1BEC38();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_2546350C0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_2546350D0 = *((_QWORD *)v2 + 2);
    xmmword_2546350C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546350C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546350D8);
  return &xmmword_2546350C0;
}

void sub_20B1BEC20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546350D8);
  _Unwind_Resume(a1);
}

void *sub_20B1BEC38()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2546350F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546350F8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::SyncSample]", qword_2546350E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546350E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546350F8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254635118);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254635118))
    return &unk_254635100;
  sub_20B531658((uint64_t)qword_2546350E0, (uint64_t)&unk_254635100);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254635100, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635118);
  return &unk_254635100;
}

void sub_20B1BED28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635118);
  _Unwind_Resume(a1);
}

void sub_20B1BED40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546350F8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1BED58(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  std::runtime_error *exception;
  int v13[3];
  int v14;

  LOBYTE(v13[0]) = 0;
  result = (*(uint64_t (**)(_QWORD *, int *))(*a1 + 80))(a1, v13);
  v7 = LOBYTE(v13[0]);
  *(_BYTE *)a2 = v13[0];
  if (a3 >= 2 && v7)
  {
    if (v7 == 2)
    {
      if (*(_BYTE *)(a2 + 56))
      {
        v9 = *(_DWORD *)(a2 + 48);
        *(_BYTE *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        if (v9 != 1)
          *(_DWORD *)(a2 + 48) = 1;
      }
      else
      {
        *(_BYTE *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_DWORD *)(a2 + 48) = 1;
        *(_BYTE *)(a2 + 56) = 1;
      }
      v10 = *a1;
      *(_QWORD *)v13 = a1[1];
      v11 = v13[0];
      v14 = 1;
      (*(void (**)(_QWORD *, int *))(v10 + 104))(a1, &v14);
      if (v11 < 1)
      {
        (*(void (**)(_QWORD *, uint64_t))(*a1 + 80))(a1, a2 + 8);
        (*(void (**)(_QWORD *, uint64_t))(*a1 + 120))(a1, a2 + 16);
        LOBYTE(v14) = 0;
        result = (*(uint64_t (**)(_QWORD *, int *))(*a1 + 80))(a1, &v14);
        if ((_BYTE)v14)
        {
          if (!*(_BYTE *)(a2 + 32))
          {
            *(_QWORD *)(a2 + 24) = 0;
            *(_BYTE *)(a2 + 32) = 1;
          }
          return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 120))(a1, a2 + 24);
        }
        else if (*(_BYTE *)(a2 + 32))
        {
          *(_BYTE *)(a2 + 32) = 0;
        }
      }
      else
      {
        return sub_20B1BF468(v13, (uint64_t)a1, a2 + 8);
      }
    }
    else
    {
      if (v7 != 1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "invalid sync type");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      if (*(_BYTE *)(a2 + 56))
      {
        v8 = *(_DWORD *)(a2 + 48);
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        if (v8)
          *(_DWORD *)(a2 + 48) = 0;
      }
      else
      {
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 48) = 0;
        *(_BYTE *)(a2 + 56) = 1;
      }
      *(_QWORD *)v13 = a1[1];
      return sub_20B1BEFAC(v13, (uint64_t)a1, a2 + 8);
    }
  }
  return result;
}

void sub_20B1BEF98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1BEFAC(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  char v8;
  char v9;

  v7 = 1;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 >= 1)
    return sub_20B1BF0FC(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3);
  v8 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v8);
  if (v8)
  {
    if (!*(_BYTE *)(a3 + 16))
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
  }
  else if (*(_BYTE *)(a3 + 16))
  {
    *(_BYTE *)(a3 + 16) = 0;
  }
  v9 = 0;
  result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v9);
  if (v9)
  {
    if (!*(_BYTE *)(a3 + 32))
    {
      *(_QWORD *)(a3 + 24) = 0;
      *(_BYTE *)(a3 + 32) = 1;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 24);
  }
  else if (*(_BYTE *)(a3 + 32))
  {
    *(_BYTE *)(a3 + 32) = 0;
  }
  return result;
}

uint64_t sub_20B1BF0FC(int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  unsigned int v8;
  __int128 *v9;
  unsigned int v10;
  char v11;
  char v12;

  v5 = *a1;
  if (*a1 == 2)
  {
    v10 = 1;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v10);
    if (v10 >= 2)
    {
      v8 = v10;
      v9 = sub_20B1BF26C();
      sub_20B520518((std::string *)v9, v8, 1u);
    }
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3);
  v11 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v11);
  if (v11)
  {
    if (!*(_BYTE *)(a3 + 16))
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
  }
  else if (*(_BYTE *)(a3 + 16))
  {
    *(_BYTE *)(a3 + 16) = 0;
  }
  v12 = 0;
  result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v12);
  if (v12)
  {
    if (!*(_BYTE *)(a3 + 32))
    {
      *(_QWORD *)(a3 + 24) = 0;
      *(_BYTE *)(a3 + 32) = 1;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 24);
  }
  else if (*(_BYTE *)(a3 + 32))
  {
    *(_BYTE *)(a3 + 32) = 0;
  }
  if (v5 >= 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  return result;
}

__int128 *sub_20B1BF26C()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635138);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635138))
    return &xmmword_254635120;
  v2 = (char *)sub_20B1BF348();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254635120, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254635130 = *((_QWORD *)v2 + 2);
    xmmword_254635120 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635120, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635138);
  return &xmmword_254635120;
}

void sub_20B1BF330(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635138);
  _Unwind_Resume(a1);
}

void *sub_20B1BF348()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254635158);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254635158))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::SyncCommandSample]", qword_254635140);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635140, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635158);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254635178);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254635178))
    return &unk_254635160;
  sub_20B531658((uint64_t)qword_254635140, (uint64_t)&unk_254635160);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254635160, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635178);
  return &unk_254635160;
}

void sub_20B1BF438(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635178);
  _Unwind_Resume(a1);
}

void sub_20B1BF450(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635158);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1BF468(int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  unsigned int v8;
  __int128 *v9;
  unsigned int v10;
  char v11;

  v5 = *a1;
  if (*a1 == 2)
  {
    v10 = 1;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v10);
    if (v10 >= 2)
    {
      v8 = v10;
      v9 = sub_20B1BF598();
      sub_20B520518((std::string *)v9, v8, 1u);
    }
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
  v11 = 0;
  result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v11);
  if (v11)
  {
    if (!*(_BYTE *)(a3 + 24))
    {
      *(_QWORD *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 24) = 1;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3 + 16);
  }
  else if (*(_BYTE *)(a3 + 24))
  {
    *(_BYTE *)(a3 + 24) = 0;
  }
  if (v5 >= 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  return result;
}

__int128 *sub_20B1BF598()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635198);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635198))
    return &xmmword_254635180;
  v2 = (char *)sub_20B1BF674();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254635180, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254635190 = *((_QWORD *)v2 + 2);
    xmmword_254635180 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635180, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635198);
  return &xmmword_254635180;
}

void sub_20B1BF65C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635198);
  _Unwind_Resume(a1);
}

void *sub_20B1BF674()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2546351B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546351B8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ClientSyncUpdateSample]", qword_2546351A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546351A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546351B8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546351D8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_2546351D8))
    return &unk_2546351C0;
  sub_20B531658((uint64_t)qword_2546351A0, (uint64_t)&unk_2546351C0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_2546351C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546351D8);
  return &unk_2546351C0;
}

void sub_20B1BF764(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546351D8);
  _Unwind_Resume(a1);
}

void sub_20B1BF77C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546351B8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1BF794(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C40E278;
  sub_20AF4EA3C(a1 + 240);
  sub_20AF3F978(a1 + 64);
  if (!*(_BYTE *)(a1 + 56) || (*(char *)(a1 + 55) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 32));
  return a1;
}

uint64_t sub_20B1BF7F4(uint64_t a1)
{
  sub_20AF3F978(a1 + 56);
  if (!*(_BYTE *)(a1 + 48) || (*(char *)(a1 + 47) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 24));
  return a1;
}

__n128 sub_20B1BF844(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  unsigned __int128 *v14;
  unsigned __int128 v15;

  *(_QWORD *)a1 = off_24C40E278;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v2;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    v3 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v3;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  if (*(_BYTE *)(a2 + 208))
  {
    v4 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v4;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v5 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v5;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    v6 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = v6;
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    v7 = *(_OWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = v7;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 152) = 0;
    v8 = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = v8;
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    v9 = *(_OWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = v9;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 200) = 0;
    *(_BYTE *)(a1 + 208) = 1;
  }
  v10 = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v10;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  if (*(_BYTE *)(a2 + 280))
  {
    v11 = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = v11;
    *(_QWORD *)(a2 + 264) = 0;
    *(_QWORD *)(a2 + 272) = 0;
    *(_QWORD *)(a2 + 256) = 0;
    *(_BYTE *)(a1 + 280) = 1;
  }
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  if (*(_BYTE *)(a2 + 312))
  {
    v12 = *(_OWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = v12;
    *(_QWORD *)(a2 + 296) = 0;
    *(_QWORD *)(a2 + 304) = 0;
    *(_QWORD *)(a2 + 288) = 0;
    *(_BYTE *)(a1 + 312) = 1;
  }
  result = *(__n128 *)(a2 + 320);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(__n128 *)(a1 + 320) = result;
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  if (*(_BYTE *)(a2 + 400))
  {
    result = *(__n128 *)(a2 + 352);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    *(__n128 *)(a1 + 352) = result;
    *(_QWORD *)(a2 + 360) = 0;
    *(_QWORD *)(a2 + 368) = 0;
    *(_QWORD *)(a2 + 352) = 0;
    v14 = (unsigned __int128 *)(a2 + 384);
    do
      v15 = __ldaxp(v14);
    while (__stlxp(v15, v14));
    *(_OWORD *)(a1 + 384) = v15;
    *(_BYTE *)(a1 + 400) = 1;
  }
  *(_BYTE *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  if (*(_BYTE *)(a2 + 440))
  {
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 432) = 0;
    result = *(__n128 *)(a2 + 416);
    *(__n128 *)(a1 + 416) = result;
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a2 + 416) = 0;
    *(_QWORD *)(a2 + 424) = 0;
    *(_QWORD *)(a2 + 432) = 0;
    *(_BYTE *)(a1 + 440) = 1;
  }
  return result;
}

void sub_20B1BFA58(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C40E278;
  sub_20AF4EA3C(a1 + 240);
  sub_20AF3F978(a1 + 64);
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B1BFAB8(uint64_t a1)
{
  return a1 + 240;
}

uint64_t sub_20B1BFAC0(void *a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v5[4];
  uint64_t v6[4];
  char v7;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40E238, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v6[0] = (uint64_t)a1 + 8;
      v6[1] = (uint64_t)a1 + 24;
      v6[2] = (uint64_t)a1 + 64;
      v6[3] = (uint64_t)a1 + 216;
      v5[0] = result + 8;
      v5[1] = result + 24;
      v5[2] = result + 64;
      v5[3] = result + 216;
      return sub_20B21412C((uint64_t)&v7, v6, v5);
    }
  }
  return result;
}

void sub_20B1BFB64(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20B1C0A08();
  sub_20B1BFC18(a1);
  sub_20AF4DD70(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 240, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20B1BFBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1BFC18(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_2546352B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546352B8))
  {
    v4 = sub_20AF40240();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20AF4E53C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20AEC60F4(&xmmword_2546352A0, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_2546352B0 = *(_QWORD *)(v9 - 8);
      xmmword_2546352A0 = v7;
    }
    sub_20AEC2E90(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546352A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546352B8);
  }
  return sub_20B1C0CF0(&xmmword_2546352A0, (uint64_t)"{", a1 + 8, (uint64_t)"}");
}

void sub_20B1BFD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20AEC2E90(&a9);
  __cxa_guard_abort(&qword_2546352B8);
  _Unwind_Resume(a1);
}

void sub_20B1BFD48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546352B8);
  _Unwind_Resume(a1);
}

void sub_20B1BFD60(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.net");
  *(_DWORD *)(a1 + 24) = 1;
}

double sub_20B1BFD8C@<D0>(const void *a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  sub_20B2309D8(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_20B1BFDC0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C40E278;
  sub_20AF4EA3C(a1 + 240);
  sub_20AF3F978(a1 + 64);
  if (!*(_BYTE *)(a1 + 56) || (*(char *)(a1 + 55) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_20B1BFE20(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C40E278;
  sub_20AF4EA3C(a1 + 240);
  sub_20AF3F978(a1 + 64);
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B1BFE80(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20B1C04A4();
  return sub_20B1BFFD4(v2, (uint64_t)"{", a1 + 8, (uint64_t)",", a1 + 240, (uint64_t)"}");
}

uint64_t sub_20B1BFED8(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20B1C0200((uint64_t)v5, (uint64_t)v2, a1 + 8);
  if (v3 == -1)
    sub_20AECFAB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C40DC60[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C40DC48[v3])(v5, v2);
  return result;
}

void sub_20B1BFF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C40DC48[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20B1BFFA8(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20B1BFFD4(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20AED5C4C((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20B1C0200((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C40DCC0[v16])(&p_p_dst, &__dst);
  sub_20AF4D170((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C40DCC0[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20AECFAB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C40DC60[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C40DC48[v16])(&p_dst, &__dst);
  return result;
}

void sub_20B1C0170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C0188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C019C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C01B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C01C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C01D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C01EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C0200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v21[0] = v5;
  sub_20B212684((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 128);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20AECFAB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C40DC30[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20B1C0450(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B1C0474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1C0490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20B1C04A4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546351F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546351F8))
    return &xmmword_2546351E0;
  v2 = sub_20B1C0580();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546351E0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546351F0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546351E0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546351E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546351F8);
  return &xmmword_2546351E0;
}

void sub_20B1C0568(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546351F8);
  _Unwind_Resume(a1);
}

std::string *sub_20B1C0580()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635218);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635218))
    return &stru_254635200;
  sub_20B1C0824((uint64_t)__p);
  sub_20B1C0670((char *)__p, &stru_254635200);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254635200, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635218);
  return &stru_254635200;
}

void sub_20B1C0630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254635218);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254635218);
  _Unwind_Resume(a1);
}

void sub_20B1C0670(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AF40240();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20AF4DB74();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 2uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20B1C07D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20AEC2E90((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B1C0824(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254635238);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254635238))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::PeerInfo>]", qword_254635220);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635220, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635238);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254635258);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254635258))
  {
    v5 = sub_20AED4780(qword_254635220, "<", 0);
    sub_20AED467C(qword_254635220, 0, v5, qword_254635240);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635240, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635258);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254635278);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254635278))
  {
    sub_20B531658((uint64_t)qword_254635240, (uint64_t)&xmmword_254635260);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635260, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635278);
  }
  if (byte_254635277 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254635260, *((unint64_t *)&xmmword_254635260 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254635260;
    *(_QWORD *)(a1 + 16) = unk_254635270;
  }
}

void sub_20B1C09C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635278);
  _Unwind_Resume(a1);
}

void sub_20B1C09D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635258);
  _Unwind_Resume(a1);
}

void sub_20B1C09F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635238);
  _Unwind_Resume(a1);
}

std::string *sub_20B1C0A08()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  __int128 *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void *v10[3];
  void *v11[2];
  char v12;
  void *__dst[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254635298);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254635298))
  {
    sub_20AEC0D64(v11, "viz::PackageData");
    v2 = sub_20AF40240();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v14 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v4 = sub_20B0BCB64();
    if (*((char *)v4 + 23) < 0)
    {
      sub_20AEC60F4(&v15, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      v16 = *((_QWORD *)v4 + 2);
      v15 = v5;
    }
    v6 = sub_20B0C5EE4();
    if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20AEC60F4(&v17, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
    }
    else
    {
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v18 = v6->__r_.__value_.__r.__words[2];
      v17 = v7;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v20 = 0x400000000000000;
    sub_20AEC7620(v10, (uint64_t)__dst, 4uLL);
    sub_20B53170C((char *)v11, (uint64_t *)v10, &stru_254635280, v8, v9);
    sub_20AEC2E90(v10);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v16) & 0x80000000) == 0)
          goto LABEL_16;
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete((void *)v17);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_22;
    }
LABEL_21:
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v12 & 0x80000000) == 0)
      {
LABEL_18:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254635280, &dword_20AEBB000);
        __cxa_guard_release(&qword_254635298);
        return &stru_254635280;
      }
LABEL_23:
      operator delete(v11[0]);
      goto LABEL_18;
    }
LABEL_22:
    operator delete(__dst[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_23;
  }
  return &stru_254635280;
}

void sub_20B1C0C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20AEC2E90(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
    {
LABEL_10:
      if (a18 < 0)
        operator delete(a13);
      __cxa_guard_abort(&qword_254635298);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_20B1C0CC8()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20B1C0CA4);
  }
}

uint64_t sub_20B1C0CF0(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20AED5C4C((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20B1C0200((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C40DCC0[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20AECFAB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C40DC60[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C40DC48[v11])(&p_dst, &__dst);
  return result;
}

void sub_20B1C0E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C0E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C0E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C0E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C0E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20B1C0E98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  _BOOL8 v11;
  _QWORD v13[5];
  unsigned __int8 **v14;
  _QWORD v15[5];
  unsigned __int8 **v16;
  char v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[6];

  v29[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v24);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v24);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v24);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20B0C0D90(v6, (uint64_t)v18);
  }
  else if (v7 == 1)
  {
    sub_20B0F9F8C(v6, (uint64_t)v18);
  }
  else
  {
    if (v7)
      sub_20AECFAB8();
    sub_20B0C6034(v6, (uint64_t)v18);
  }
  v15[0] = v24;
  v15[1] = &v25;
  v15[2] = &v26;
  v15[3] = &v27;
  v15[4] = &v28;
  v16 = (unsigned __int8 **)v29;
  v13[0] = v18;
  v13[1] = &v19;
  v13[2] = &v20;
  v13[3] = &v21;
  v13[4] = &v22;
  v14 = (unsigned __int8 **)&v23;
  if (sub_20B2178A8((uint64_t)&v17, v15, v13))
  {
    if (*((_BYTE *)v16 + 24) && *((_BYTE *)v14 + 24))
    {
      v8 = *v16;
      v9 = v16[1];
      v10 = *v14;
      if (v9 - *v16 == v14[1] - *v14)
      {
        if (v8 != v9)
        {
          while (sub_20B2167B8(v8, v10))
          {
            v8 += 96;
            v10 += 96;
            if (v8 == v9)
              goto LABEL_23;
          }
          goto LABEL_22;
        }
LABEL_23:
        v11 = sub_20B0C8384((unsigned __int8 *)(a1 + 200), (unsigned __int8 *)(a2 + 200));
        goto LABEL_24;
      }
    }
    else if ((*((_BYTE *)v16 + 24) != 0) == (*((_BYTE *)v14 + 24) != 0))
    {
      goto LABEL_23;
    }
  }
LABEL_22:
  v11 = 0;
LABEL_24:
  sub_20AF4EA3C((uint64_t)v18);
  sub_20AF4EA3C((uint64_t)v24);
  return v11;
}

void sub_20B1C1080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a23);
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B1C109C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B1C10B0(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EB80, 0);
  if (v4)
  {
    sub_20B1C14BC(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EBC8, 0);
    if (v5)
    {
      sub_20B1C24D8(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC50, 0);
      if (v6)
      {
        sub_20B1C31E0(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC98, 0);
        if (v7)
        {
          sub_20B1C3CCC(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C2C8)
            sub_20B1C4358(&v9, (uint64_t)a1);
          else
            sub_20B1C1214(&v8, a1);
        }
      }
    }
  }
}

void sub_20B1C1214(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  __int128 *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v15 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v15);
    v9 = v15;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v15 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v15);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FF5BC((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20B0FF5BC((uint64_t)a2, v4, v15);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v15 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v15);
    v11 = v15;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v15 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v15);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FEF34((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20B0FEF34((uint64_t)a2, v4, v15);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[2];
    v15 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v15);
    v7 = v15;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v15 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v15);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0D8514((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20B0D8514((uint64_t)a2, v4, v15);
  }
LABEL_17:
  v12 = (__int128 *)(v3 + 200);
  v13 = a2[2];
  v15 = 2;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v15);
  v14 = v15;
  if (v13 < 1)
  {
    sub_20B1C4C30((uint64_t)a2, v12, v15);
  }
  else
  {
    if (v13 == 2)
    {
      v15 = 1;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v15);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B1C4C30((uint64_t)a2, v12, v14);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20B1C14BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FADD8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B50671C(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5086B4(a2, &v18);
      sub_20B0D1154(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FA468(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B50671C(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5086B4(a2, &v18);
  sub_20B1C17BC(a2, (__int128 *)(v3 + 200), v18);
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B1C17BC(uint64_t a1, __int128 *a2, unsigned int a3)
{
  void *v5[2];
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20B1C1D98((char *)v5, a2);
  sub_20B1C1900(a1, (uint64_t)v5, a3);
  if (v18 < 0)
  {
    operator delete(__p);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v13);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v9);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v5[0]);
    return;
  }
LABEL_14:
  operator delete(v7);
  if (v6 < 0)
    goto LABEL_15;
}

void sub_20B1C18E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0D0484((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1C1900(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  void **v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  int v32;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "user_given_name";
    *(_QWORD *)(a1 + 80) = 15;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B508B7C(a1, a2);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "product_name";
    *(_QWORD *)(a1 + 80) = 12;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B508B7C(a1, a2 + 24);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "type";
    *(_QWORD *)(a1 + 80) = 4;
    if (!v8)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B508B7C(a1, a2 + 48);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "serial_number";
    *(_QWORD *)(a1 + 80) = 13;
    if (!v9)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B508B7C(a1, a2 + 72);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v10 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "os_build_version";
    *(_QWORD *)(a1 + 80) = 16;
    if (!v10)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B508B7C(a1, a2 + 96);
  v11 = a2 + 120;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v12 = *(unsigned __int8 *)(a1 + 88),
        *(_QWORD *)(a1 + 72) = "os_product_version",
        *(_QWORD *)(a1 + 80) = 18,
        v12))
  {
    sub_20B508B7C(a1, v11);
    v13 = *(unsigned __int8 **)(a1 + 40);
    if (*v13 <= 1u)
      goto LABEL_19;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_20B508B7C(a1, v11);
    v13 = *(unsigned __int8 **)(a1 + 40);
    if (*v13 <= 1u)
    {
LABEL_19:
      *(_QWORD *)(a1 + 72) = "process_id";
      v14 = a1 + 72;
      v16 = (_BYTE *)(a1 + 88);
      v15 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 10;
      v17 = (_QWORD *)(a1 + 80);
      if (!v15)
        *v16 = 1;
      goto LABEL_28;
    }
  }
  v17 = (_QWORD *)(a1 + 80);
  v14 = a1 + 72;
  v16 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v14 == *(_DWORD *)"version"
      ? (v18 = *(_DWORD *)(*(_QWORD *)v14 + 3) == *(_DWORD *)"sion")
      : (v18 = 0),
        !v18))
  {
LABEL_28:
    v19 = *(int *)(a2 + 144);
    LOBYTE(v30) = 5;
    v31 = v19;
    v20 = (unsigned __int8 *)sub_20B506370(a1);
    v21 = *v20;
    *v20 = 5;
    LOBYTE(v30) = v21;
    v22 = (void **)*((_QWORD *)v20 + 1);
    *((_QWORD *)v20 + 1) = v31;
    v31 = (uint64_t)v22;
    sub_20B4181DC((void ***)&v31, v21);
    v13 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v13 <= 1u)
  {
    v23 = *v16;
    *(_QWORD *)v14 = "process_name";
    *v17 = 12;
    if (!v23)
      *v16 = 1;
  }
  sub_20B508B7C(a1, a2 + 152);
  if (**(unsigned __int8 **)(a1 + 40) > 1u || (v24 = *v16, *(_QWORD *)v14 = "uuid", *v17 = 4, v24))
  {
    v30 = (const char *)(a2 + 176);
    sub_20B1C2024(a1, (unsigned __int8 **)&v30);
    if (a3 < 2)
      return;
  }
  else
  {
    *v16 = 1;
    v30 = (const char *)(a2 + 176);
    sub_20B1C2024(a1, (unsigned __int8 **)&v30);
    if (a3 < 2)
      return;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v25 = *v16;
    *(_QWORD *)v14 = "protocol_info";
    *v17 = 13;
    if (!v25)
      *v16 = 1;
  }
  sub_20B50671C(a1);
  v30 = "version";
  v31 = 7;
  v32 = 1;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v26 = *v16;
    *(_QWORD *)v14 = "version";
    *v17 = 7;
    if (!v26)
      *v16 = 1;
  }
  sub_20B5086B4(a1, &v32);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v27 = *v16;
    *(_QWORD *)v14 = "current";
    *v17 = 7;
    if (!v27)
      *v16 = 1;
  }
  v30 = (const char *)(a2 + 192);
  sub_20B1C212C(a1, (uint64_t **)&v30);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v28 = *v16;
    *(_QWORD *)v14 = "min";
    *v17 = 3;
    if (!v28)
      *v16 = 1;
  }
  v30 = (const char *)(a2 + 204);
  sub_20B1C212C(a1, (uint64_t **)&v30);
  v29 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(a1 + 56) = v29 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v16 = 0;
}

void sub_20B1C1D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

char *sub_20B1C1D98(char *__dst, __int128 *a2)
{
  __int128 v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(__int128 *)((char *)a2 + 24);
      *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 5);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_20AEC60F4(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    sub_20AEC60F4(__dst + 48, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)__dst + 3) = v7;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_20AEC60F4(__dst + 72, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 72);
    *((_QWORD *)__dst + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v8;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_20AEC60F4(__dst + 96, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v9 = a2[6];
    *((_QWORD *)__dst + 14) = *((_QWORD *)a2 + 14);
    *((_OWORD *)__dst + 6) = v9;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_20AEC60F4(__dst + 120, *((void **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v10 = *(__int128 *)((char *)a2 + 120);
    *((_QWORD *)__dst + 17) = *((_QWORD *)a2 + 17);
    *(_OWORD *)(__dst + 120) = v10;
  }
  *((_DWORD *)__dst + 36) = *((_DWORD *)a2 + 36);
  v11 = __dst + 152;
  if (*((char *)a2 + 175) < 0)
  {
    sub_20AEC60F4(v11, *((void **)a2 + 19), *((_QWORD *)a2 + 20));
  }
  else
  {
    v12 = *(__int128 *)((char *)a2 + 152);
    *((_QWORD *)__dst + 21) = *((_QWORD *)a2 + 21);
    *(_OWORD *)v11 = v12;
  }
  v13 = a2[11];
  v14 = a2[12];
  *((_QWORD *)__dst + 26) = *((_QWORD *)a2 + 26);
  *((_OWORD *)__dst + 11) = v13;
  *((_OWORD *)__dst + 12) = v14;
  return __dst;
}

void sub_20B1C1F38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (*(char *)(v1 + 143) < 0)
  {
    operator delete(*v6);
    if ((*(char *)(v1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 95) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v5);
  if ((*(char *)(v1 + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*v4);
  if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20B1C2024(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20B09AB08((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
  sub_20B508B7C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20B1C20E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1C2104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C2118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C212C(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20B1C2234((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
  sub_20B508B7C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20B1C21F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1C220C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C2220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C2234(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v21[0] = v5;
  sub_20B511704((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 128);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20AECFAB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C40DC30[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20B1C2484(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B1C24A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1C24C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B1C24D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20B51E95C(&v20, 4u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v7 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBED4(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20B51E95C(&v20, 5u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v8 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBDB8(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20B51E95C(&v20, 6u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v6 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0D3CE4(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20B51E95C(&v20, 2u);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v20, v14 + 8);
  }
  sub_20B51956C(*(_QWORD *)(a2 + 24));
  sub_20B1C2758(a2, (__int128 *)(v3 + 200), 2u);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20B1C2758(uint64_t a1, __int128 *a2, unsigned int a3)
{
  void *v5[2];
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20B1C1D98((char *)v5, a2);
  sub_20B1C289C(a1, (uint64_t)v5, a3);
  if (v18 < 0)
  {
    operator delete(__p);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v13);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v9);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v5[0]);
    return;
  }
LABEL_14:
  operator delete(v7);
  if (v6 < 0)
    goto LABEL_15;
}

void sub_20B1C2884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0D0484((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1C289C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  const void **v7;
  uint64_t v8;
  const void **v9;
  uint64_t v10;
  const void **v11;
  uint64_t v12;
  const void **v13;
  uint64_t v14;
  const void **v15;
  uint64_t v16;
  uint64_t v17;
  const void **v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t *v50;

  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    v50 = (uint64_t *)(v6 + 16);
    sub_20B51FA2C((uint64_t)&v49, &v50, (const void **)a2);
    v7 = (const void **)(a2 + 24);
    v8 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v8 + 40))
      goto LABEL_3;
  }
  else
  {
    sub_20B51FE64((uint64_t)&v50, v6 + 8, a2);
    v7 = (const void **)(a2 + 24);
    v8 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
LABEL_3:
      v50 = (uint64_t *)(v8 + 16);
      sub_20B51FA2C((uint64_t)&v49, &v50, v7);
      v9 = (const void **)(a2 + 48);
      v10 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v10 + 40))
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  sub_20B51FE64((uint64_t)&v50, v8 + 8, (uint64_t)v7);
  v9 = (const void **)(a2 + 48);
  v10 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v10 + 40))
  {
LABEL_4:
    v50 = (uint64_t *)(v10 + 16);
    sub_20B51FA2C((uint64_t)&v49, &v50, v9);
    v11 = (const void **)(a2 + 72);
    v12 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v12 + 40))
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  sub_20B51FE64((uint64_t)&v50, v10 + 8, (uint64_t)v9);
  v11 = (const void **)(a2 + 72);
  v12 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v12 + 40))
  {
LABEL_5:
    v50 = (uint64_t *)(v12 + 16);
    sub_20B51FA2C((uint64_t)&v49, &v50, v11);
    v13 = (const void **)(a2 + 96);
    v14 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v14 + 40))
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  sub_20B51FE64((uint64_t)&v50, v12 + 8, (uint64_t)v11);
  v13 = (const void **)(a2 + 96);
  v14 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
LABEL_6:
    v50 = (uint64_t *)(v14 + 16);
    sub_20B51FA2C((uint64_t)&v49, &v50, v13);
    v15 = (const void **)(a2 + 120);
    v16 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v16 + 40))
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  sub_20B51FE64((uint64_t)&v50, v14 + 8, (uint64_t)v13);
  v15 = (const void **)(a2 + 120);
  v16 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v16 + 40))
  {
LABEL_7:
    v50 = (uint64_t *)(v16 + 16);
    sub_20B51FA2C((uint64_t)&v49, &v50, v15);
    v17 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v17 + 40))
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  sub_20B51FE64((uint64_t)&v50, v16 + 8, (uint64_t)v15);
  v17 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v17 + 40))
  {
LABEL_8:
    v50 = (uint64_t *)(v17 + 16);
    sub_20B51E444(&v50, *(_DWORD *)(a2 + 144));
    v18 = (const void **)(a2 + 152);
    v19 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v19 + 40))
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  sub_20B51E860();
  v18 = (const void **)(a2 + 152);
  v19 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v19 + 40))
  {
LABEL_9:
    v50 = (uint64_t *)(v19 + 16);
    sub_20B51FA2C((uint64_t)&v49, &v50, v18);
    v20 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v20 + 40))
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  sub_20B51FE64((uint64_t)&v50, v19 + 8, (uint64_t)v18);
  v20 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v20 + 40))
  {
LABEL_10:
    v50 = (uint64_t *)(v20 + 16);
    sub_20B51DD74(&v50, *(_BYTE *)(a2 + 176));
    sub_20B51DD74(&v50, *(_BYTE *)(a2 + 177));
    sub_20B51DD74(&v50, *(_BYTE *)(a2 + 178));
    sub_20B51DD74(&v50, *(_BYTE *)(a2 + 179));
    sub_20B51DD74(&v50, *(_BYTE *)(a2 + 180));
    sub_20B51DD74(&v50, *(_BYTE *)(a2 + 181));
    sub_20B51DD74(&v50, *(_BYTE *)(a2 + 182));
    sub_20B51DD74(&v50, *(_BYTE *)(a2 + 183));
    sub_20B51DD74(&v50, *(_BYTE *)(a2 + 184));
    sub_20B51DD74(&v50, *(_BYTE *)(a2 + 185));
    sub_20B51DD74(&v50, *(_BYTE *)(a2 + 186));
    sub_20B51DD74(&v50, *(_BYTE *)(a2 + 187));
    sub_20B51DD74(&v50, *(_BYTE *)(a2 + 188));
    sub_20B51DD74(&v50, *(_BYTE *)(a2 + 189));
    sub_20B51DD74(&v50, *(_BYTE *)(a2 + 190));
    sub_20B51DD74(&v50, *(_BYTE *)(a2 + 191));
    if (a3 < 2)
      return;
    goto LABEL_54;
  }
LABEL_20:
  v21 = *(char *)(a2 + 176);
  if (v21 < 0)
  {
    LOBYTE(v50) = -52;
    BYTE1(v50) = v21;
    std::ostream::write();
    v22 = *(char *)(a2 + 177);
    if ((v22 & 0x80000000) == 0)
    {
LABEL_22:
      LOBYTE(v50) = v22;
      std::ostream::write();
      v23 = *(char *)(a2 + 178);
      if ((v23 & 0x80000000) == 0)
        goto LABEL_23;
      goto LABEL_40;
    }
  }
  else
  {
    LOBYTE(v50) = *(_BYTE *)(a2 + 176);
    std::ostream::write();
    v22 = *(char *)(a2 + 177);
    if ((v22 & 0x80000000) == 0)
      goto LABEL_22;
  }
  LOBYTE(v50) = -52;
  BYTE1(v50) = v22;
  std::ostream::write();
  v23 = *(char *)(a2 + 178);
  if ((v23 & 0x80000000) == 0)
  {
LABEL_23:
    LOBYTE(v50) = v23;
    std::ostream::write();
    v24 = *(char *)(a2 + 179);
    if ((v24 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_41;
  }
LABEL_40:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v23;
  std::ostream::write();
  v24 = *(char *)(a2 + 179);
  if ((v24 & 0x80000000) == 0)
  {
LABEL_24:
    LOBYTE(v50) = v24;
    std::ostream::write();
    v25 = *(char *)(a2 + 180);
    if ((v25 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_42;
  }
LABEL_41:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v24;
  std::ostream::write();
  v25 = *(char *)(a2 + 180);
  if ((v25 & 0x80000000) == 0)
  {
LABEL_25:
    LOBYTE(v50) = v25;
    std::ostream::write();
    v26 = *(char *)(a2 + 181);
    if ((v26 & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_43;
  }
LABEL_42:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v25;
  std::ostream::write();
  v26 = *(char *)(a2 + 181);
  if ((v26 & 0x80000000) == 0)
  {
LABEL_26:
    LOBYTE(v50) = v26;
    std::ostream::write();
    v27 = *(char *)(a2 + 182);
    if ((v27 & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_44;
  }
LABEL_43:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v26;
  std::ostream::write();
  v27 = *(char *)(a2 + 182);
  if ((v27 & 0x80000000) == 0)
  {
LABEL_27:
    LOBYTE(v50) = v27;
    std::ostream::write();
    v28 = *(char *)(a2 + 183);
    if ((v28 & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_45;
  }
LABEL_44:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v27;
  std::ostream::write();
  v28 = *(char *)(a2 + 183);
  if ((v28 & 0x80000000) == 0)
  {
LABEL_28:
    LOBYTE(v50) = v28;
    std::ostream::write();
    v29 = *(char *)(a2 + 184);
    if ((v29 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_46;
  }
LABEL_45:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v28;
  std::ostream::write();
  v29 = *(char *)(a2 + 184);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_29:
    LOBYTE(v50) = v29;
    std::ostream::write();
    v30 = *(char *)(a2 + 185);
    if ((v30 & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_47;
  }
LABEL_46:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v29;
  std::ostream::write();
  v30 = *(char *)(a2 + 185);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_30:
    LOBYTE(v50) = v30;
    std::ostream::write();
    v31 = *(char *)(a2 + 186);
    if ((v31 & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_48;
  }
LABEL_47:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v30;
  std::ostream::write();
  v31 = *(char *)(a2 + 186);
  if ((v31 & 0x80000000) == 0)
  {
LABEL_31:
    LOBYTE(v50) = v31;
    std::ostream::write();
    v32 = *(char *)(a2 + 187);
    if ((v32 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_49;
  }
LABEL_48:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v31;
  std::ostream::write();
  v32 = *(char *)(a2 + 187);
  if ((v32 & 0x80000000) == 0)
  {
LABEL_32:
    LOBYTE(v50) = v32;
    std::ostream::write();
    v33 = *(char *)(a2 + 188);
    if ((v33 & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_50;
  }
LABEL_49:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v32;
  std::ostream::write();
  v33 = *(char *)(a2 + 188);
  if ((v33 & 0x80000000) == 0)
  {
LABEL_33:
    LOBYTE(v50) = v33;
    std::ostream::write();
    v34 = *(char *)(a2 + 189);
    if ((v34 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_51;
  }
LABEL_50:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v33;
  std::ostream::write();
  v34 = *(char *)(a2 + 189);
  if ((v34 & 0x80000000) == 0)
  {
LABEL_34:
    LOBYTE(v50) = v34;
    std::ostream::write();
    v35 = *(char *)(a2 + 190);
    if ((v35 & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_52;
  }
LABEL_51:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v34;
  std::ostream::write();
  v35 = *(char *)(a2 + 190);
  if ((v35 & 0x80000000) == 0)
  {
LABEL_35:
    LOBYTE(v50) = v35;
    std::ostream::write();
    v36 = *(char *)(a2 + 191);
    if ((v36 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_53;
  }
LABEL_52:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v35;
  std::ostream::write();
  v36 = *(char *)(a2 + 191);
  if ((v36 & 0x80000000) == 0)
  {
LABEL_36:
    LOBYTE(v50) = v36;
    std::ostream::write();
    if (a3 < 2)
      return;
    goto LABEL_54;
  }
LABEL_53:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v36;
  std::ostream::write();
  if (a3 < 2)
    return;
LABEL_54:
  v37 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v37 + 40))
  {
    v50 = (uint64_t *)(v37 + 16);
    sub_20B51E95C(&v50, 1u);
    sub_20B51956C(*(_QWORD *)(a1 + 24));
    v38 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v38 + 40))
      goto LABEL_56;
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v50, v37 + 8);
    sub_20B51956C(*(_QWORD *)(a1 + 24));
    v38 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v38 + 40))
    {
LABEL_56:
      v50 = (uint64_t *)(v38 + 16);
      sub_20B51E95C(&v50, *(_DWORD *)(a2 + 192));
      v39 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v39 + 40))
        goto LABEL_57;
      goto LABEL_64;
    }
  }
  sub_20B51EBD0((uint64_t)&v50, v38 + 8);
  v39 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v39 + 40))
  {
LABEL_57:
    v50 = (uint64_t *)(v39 + 16);
    sub_20B51E95C(&v50, *(_DWORD *)(a2 + 196));
    v40 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v40 + 40))
      goto LABEL_58;
    goto LABEL_65;
  }
LABEL_64:
  sub_20B51EBD0((uint64_t)&v50, v39 + 8);
  v40 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v40 + 40))
  {
LABEL_58:
    v50 = (uint64_t *)(v40 + 16);
    sub_20B51E95C(&v50, *(_DWORD *)(a2 + 200));
    v41 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v41 + 40))
      goto LABEL_59;
    goto LABEL_66;
  }
LABEL_65:
  sub_20B51EBD0((uint64_t)&v50, v40 + 8);
  v41 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v41 + 40))
  {
LABEL_59:
    v50 = (uint64_t *)(v41 + 16);
    sub_20B51E95C(&v50, *(_DWORD *)(a2 + 204));
    v42 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v42 + 40))
      goto LABEL_60;
LABEL_67:
    sub_20B51EBD0((uint64_t)&v50, v42 + 8);
    v43 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v43 + 40))
      goto LABEL_61;
LABEL_68:
    sub_20B51EBD0((uint64_t)&v50, v43 + 8);
    goto LABEL_69;
  }
LABEL_66:
  sub_20B51EBD0((uint64_t)&v50, v41 + 8);
  v42 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v42 + 40))
    goto LABEL_67;
LABEL_60:
  v50 = (uint64_t *)(v42 + 16);
  sub_20B51E95C(&v50, *(_DWORD *)(a2 + 208));
  v43 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v43 + 40))
    goto LABEL_68;
LABEL_61:
  v50 = (uint64_t *)(v43 + 16);
  sub_20B51E95C(&v50, *(_DWORD *)(a2 + 212));
LABEL_69:
  v44 = *(_QWORD *)(a1 + 24);
  v45 = *(_QWORD *)(*(_QWORD *)(v44 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v44 + 48), *(_QWORD *)(v44 + 16) - v45 - 9);
  v46 = *(_QWORD *)(v44 + 48);
  if (v46)
    memmove((void *)(*(_QWORD *)(v44 + 24) + v45), *(const void **)(v44 + 56), v46);
  *(_QWORD *)(v44 + 48) = 0;
  v47 = *(_QWORD *)(v44 + 80);
  v48 = *(_QWORD *)(v44 + 88) - 8;
  *(_QWORD *)(v44 + 88) = v48;
  if (v47 == v48)
  {
    std::ostream::write();
    if (*(_BYTE *)(v44 + 40))
    {
      free(*(void **)(v44 + 24));
      *(_BYTE *)(v44 + 40) = 0;
    }
  }
}

void sub_20B1C31E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FCF30(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B505FB0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5069D0(a2, &v18);
      sub_20B0D4F88(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FC7EC(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B505FB0(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5069D0(a2, &v18);
  sub_20B1C34E0(a2, (__int128 *)(v3 + 200), v18);
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B1C34E0(uint64_t a1, __int128 *a2, unsigned int a3)
{
  void *v5[2];
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20B1C1D98((char *)v5, a2);
  sub_20B1C3624(a1, (uint64_t)v5, a3);
  if (v18 < 0)
  {
    operator delete(__p);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v13);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v9);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v5[0]);
    return;
  }
LABEL_14:
  operator delete(v7);
  if (v6 < 0)
    goto LABEL_15;
}

void sub_20B1C360C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0D0484((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1C3624(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  int v32;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "user_given_name";
    *(_QWORD *)(a1 + 80) = 15;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B506E98(a1, a2);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "product_name";
    *(_QWORD *)(a1 + 80) = 12;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B506E98(a1, a2 + 24);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "type";
    *(_QWORD *)(a1 + 80) = 4;
    if (!v8)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B506E98(a1, a2 + 48);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "serial_number";
    *(_QWORD *)(a1 + 80) = 13;
    if (!v9)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B506E98(a1, a2 + 72);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v10 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "os_build_version";
    *(_QWORD *)(a1 + 80) = 16;
    if (!v10)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B506E98(a1, a2 + 96);
  v11 = a2 + 120;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v12 = *(unsigned __int8 *)(a1 + 88),
        *(_QWORD *)(a1 + 72) = "os_product_version",
        *(_QWORD *)(a1 + 80) = 18,
        v12))
  {
    sub_20B506E98(a1, v11);
    v13 = *(unsigned __int8 **)(a1 + 40);
    if (*v13 <= 1u)
      goto LABEL_19;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_20B506E98(a1, v11);
    v13 = *(unsigned __int8 **)(a1 + 40);
    if (*v13 <= 1u)
    {
LABEL_19:
      *(_QWORD *)(a1 + 72) = "process_id";
      v14 = a1 + 72;
      v16 = (_BYTE *)(a1 + 88);
      v15 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 10;
      v17 = (_QWORD *)(a1 + 80);
      if (!v15)
        *v16 = 1;
      goto LABEL_28;
    }
  }
  v17 = (_QWORD *)(a1 + 80);
  v14 = a1 + 72;
  v16 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v14 == *(_DWORD *)"version"
      ? (v18 = *(_DWORD *)(*(_QWORD *)v14 + 3) == *(_DWORD *)"sion")
      : (v18 = 0),
        !v18))
  {
LABEL_28:
    v19 = *(int *)(a2 + 144);
    LOBYTE(v30) = 5;
    v31 = v19;
    v20 = (unsigned __int8 *)sub_20B505B08(a1);
    v21 = *v20;
    *v20 = 5;
    LOBYTE(v30) = v21;
    v22 = *((_QWORD *)v20 + 1);
    *((_QWORD *)v20 + 1) = v31;
    v31 = v22;
    sub_20B416E08(&v31, v21);
    v13 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v13 <= 1u)
  {
    v23 = *v16;
    *(_QWORD *)v14 = "process_name";
    *v17 = 12;
    if (!v23)
      *v16 = 1;
  }
  sub_20B506E98(a1, a2 + 152);
  if (**(unsigned __int8 **)(a1 + 40) > 1u || (v24 = *v16, *(_QWORD *)v14 = "uuid", *v17 = 4, v24))
  {
    v30 = (const char *)(a2 + 176);
    sub_20B1C3ABC(a1, (unsigned __int8 **)&v30);
    if (a3 < 2)
      return;
  }
  else
  {
    *v16 = 1;
    v30 = (const char *)(a2 + 176);
    sub_20B1C3ABC(a1, (unsigned __int8 **)&v30);
    if (a3 < 2)
      return;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v25 = *v16;
    *(_QWORD *)v14 = "protocol_info";
    *v17 = 13;
    if (!v25)
      *v16 = 1;
  }
  sub_20B505FB0(a1);
  v30 = "version";
  v31 = 7;
  v32 = 1;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v26 = *v16;
    *(_QWORD *)v14 = "version";
    *v17 = 7;
    if (!v26)
      *v16 = 1;
  }
  sub_20B5069D0(a1, &v32);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v27 = *v16;
    *(_QWORD *)v14 = "current";
    *v17 = 7;
    if (!v27)
      *v16 = 1;
  }
  v30 = (const char *)(a2 + 192);
  sub_20B1C3BC4(a1, (uint64_t **)&v30);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v28 = *v16;
    *(_QWORD *)v14 = "min";
    *v17 = 3;
    if (!v28)
      *v16 = 1;
  }
  v30 = (const char *)(a2 + 204);
  sub_20B1C3BC4(a1, (uint64_t **)&v30);
  v29 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(a1 + 56) = v29 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v16 = 0;
}

void sub_20B1C3AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B1C3ABC(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20B09AB08((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
  sub_20B506E98(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20B1C3B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1C3B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C3BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C3BC4(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20B1C2234((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
  sub_20B506E98(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20B1C3C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1C3CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C3CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1C3CCC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FE288(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20AEC01D0(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20B0D66C4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FDCE4(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20AEC01D0(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20B1C3EE4(a2, (__int128 *)(v3 + 200), 2u);
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20AEC01D0(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20B1C3EE4(uint64_t a1, __int128 *a2, unsigned int a3)
{
  void *v5[2];
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20B1C1D98((char *)v5, a2);
  sub_20B1C4028(a1, (unsigned __int8 *)v5, a3);
  if (v18 < 0)
  {
    operator delete(__p);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v13);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v9);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v5[0]);
    return;
  }
LABEL_14:
  operator delete(v7);
  if (v6 < 0)
    goto LABEL_15;
}

void sub_20B1C4010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0D0484((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1C4028(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  _QWORD *v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;

  sub_20B512F6C(a1, (uint64_t)a2);
  sub_20B512F6C(a1, (uint64_t)(a2 + 24));
  sub_20B512F6C(a1, (uint64_t)(a2 + 48));
  sub_20B512F6C(a1, (uint64_t)(a2 + 72));
  sub_20B512F6C(a1, (uint64_t)(a2 + 96));
  sub_20B512F6C(a1, (uint64_t)(a2 + 120));
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    v24 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v6, (uint64_t)&v24, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20B512F6C(a1, (uint64_t)(a2 + 152));
  sub_20B512EB0(a1, a2 + 176);
  sub_20B512EB0(a1, a2 + 177);
  sub_20B512EB0(a1, a2 + 178);
  sub_20B512EB0(a1, a2 + 179);
  sub_20B512EB0(a1, a2 + 180);
  sub_20B512EB0(a1, a2 + 181);
  sub_20B512EB0(a1, a2 + 182);
  sub_20B512EB0(a1, a2 + 183);
  sub_20B512EB0(a1, a2 + 184);
  sub_20B512EB0(a1, a2 + 185);
  sub_20B512EB0(a1, a2 + 186);
  sub_20B512EB0(a1, a2 + 187);
  sub_20B512EB0(a1, a2 + 188);
  sub_20B512EB0(a1, a2 + 189);
  sub_20B512EB0(a1, a2 + 190);
  sub_20B512EB0(a1, a2 + 191);
  if (a3 >= 2)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      v7 = *(_QWORD **)(a1 + 24);
      v25 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v7, (uint64_t)&v25, 1);
    }
    std::ostream::operator<<();
    v8 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v8 + 1;
    if (v8 != -1)
    {
      v9 = *(_QWORD **)(a1 + 24);
      v26 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v9, (uint64_t)&v26, 1);
    }
    std::ostream::operator<<();
    v10 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10 + 1;
    if (v10 != -1)
    {
      v11 = *(_QWORD **)(a1 + 24);
      v27 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v11, (uint64_t)&v27, 1);
    }
    std::ostream::operator<<();
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v12 + 1;
    if (v12 != -1)
    {
      v13 = *(_QWORD **)(a1 + 24);
      v28 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v13, (uint64_t)&v28, 1);
    }
    std::ostream::operator<<();
    v14 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v14 + 1;
    if (v14 != -1)
    {
      v15 = *(_QWORD **)(a1 + 24);
      v29 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v15, (uint64_t)&v29, 1);
    }
    std::ostream::operator<<();
    v16 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v16 + 1;
    if (v16 != -1)
    {
      v17 = *(_QWORD **)(a1 + 24);
      v30 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v17, (uint64_t)&v30, 1);
    }
    std::ostream::operator<<();
    v18 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v18 + 1;
    if (v18 != -1)
    {
      v19 = *(_QWORD **)(a1 + 24);
      v31 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v19, (uint64_t)&v31, 1);
    }
    std::ostream::operator<<();
    v20 = *(_QWORD *)(a1 + 40);
    v21 = *(_BYTE *)(a1 + 34);
    *(_QWORD *)(a1 + 40) = v20 + 1;
    if (v20 != -1)
    {
      v22 = *(_QWORD **)(a1 + 24);
      v32 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v22, (uint64_t)&v32, 1);
    }
    v23 = *(_QWORD **)(a1 + 24);
    v33 = v21;
    sub_20AEC01D0(v23, (uint64_t)&v33, 1);
    ++*(_QWORD *)(a1 + 40);
  }
}

void sub_20B1C4358(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  __int128 *v10;
  unsigned int v11;
  uint64_t v12;
  int __src;
  uint64_t v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v14, 4);
    v7 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE9C0(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v14, 4);
    v8 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE8A4(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    __src = 6;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v14, 4);
    v6 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0D757C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  v10 = (__int128 *)(v3 + 200);
  __src = 2;
  sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v14, 4);
  v11 = __src;
  sub_20B42B554((_QWORD *)a2);
  sub_20B1C4510(a2, v10, v11);
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v12 + 10) = *(_QWORD *)(a2 + 32) - v12 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20B1C4510(uint64_t a1, __int128 *a2, unsigned int a3)
{
  void *v5[2];
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20B1C1D98((char *)v5, a2);
  sub_20B1C4654(a1, (uint64_t)v5, a3);
  if (v18 < 0)
  {
    operator delete(__p);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v13);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v9);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v5[0]);
    return;
  }
LABEL_14:
  operator delete(v7);
  if (v6 < 0)
    goto LABEL_15;
}

void sub_20B1C463C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0D0484((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20B1C4654(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  char *v9;
  BOOL v10;
  _BOOL4 v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  char *v29;
  int64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  char *v33;
  int64_t v34;
  _BOOL4 v35;
  char *result;
  uint64_t v37;
  uint64_t __src;
  uint64_t v39;

  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  __src = v6;
  v7 = a1 + 24;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v39, 8);
  if (*(char *)(a2 + 23) < 0)
  {
    v9 = *(char **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2)
      v10 = 1;
    else
      v10 = v8 == 0;
    if (!v10)
    {
      v11 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360);
      v9 = 0;
      if (v11)
        goto LABEL_55;
    }
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
    v9 = (char *)a2;
  }
  sub_20B42DB24(v7, *(char **)(a1 + 32), v9, &v9[v8], v8);
  v12 = *(unsigned __int8 *)(a2 + 47);
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a2 + 32);
  __src = v12;
  sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v39, 8);
  if (*(char *)(a2 + 47) < 0)
  {
    v13 = *(char **)(a2 + 24);
    v14 = *(_QWORD *)(a2 + 32);
    if (!v13)
    {
      if (v14)
      {
        v15 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360);
        v13 = 0;
        if (v15)
          goto LABEL_55;
      }
    }
  }
  else
  {
    v13 = (char *)(a2 + 24);
    v14 = *(unsigned __int8 *)(a2 + 47);
  }
  sub_20B42DB24(v7, *(char **)(a1 + 32), v13, &v13[v14], v14);
  v16 = *(unsigned __int8 *)(a2 + 71);
  if ((v16 & 0x80u) != 0)
    v16 = *(_QWORD *)(a2 + 56);
  __src = v16;
  sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v39, 8);
  if (*(char *)(a2 + 71) < 0)
  {
    v17 = *(char **)(a2 + 48);
    v18 = *(_QWORD *)(a2 + 56);
    if (!v17)
    {
      if (v18)
      {
        v19 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360);
        v17 = 0;
        if (v19)
          goto LABEL_55;
      }
    }
  }
  else
  {
    v17 = (char *)(a2 + 48);
    v18 = *(unsigned __int8 *)(a2 + 71);
  }
  sub_20B42DB24(v7, *(char **)(a1 + 32), v17, &v17[v18], v18);
  v20 = *(unsigned __int8 *)(a2 + 95);
  if ((v20 & 0x80u) != 0)
    v20 = *(_QWORD *)(a2 + 80);
  __src = v20;
  sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v39, 8);
  if (*(char *)(a2 + 95) < 0)
  {
    v21 = *(char **)(a2 + 72);
    v22 = *(_QWORD *)(a2 + 80);
    if (!v21)
    {
      if (v22)
      {
        v23 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360);
        v21 = 0;
        if (v23)
          goto LABEL_55;
      }
    }
  }
  else
  {
    v21 = (char *)(a2 + 72);
    v22 = *(unsigned __int8 *)(a2 + 95);
  }
  sub_20B42DB24(v7, *(char **)(a1 + 32), v21, &v21[v22], v22);
  v24 = *(unsigned __int8 *)(a2 + 119);
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a2 + 104);
  __src = v24;
  sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v39, 8);
  if (*(char *)(a2 + 119) < 0)
  {
    v25 = *(char **)(a2 + 96);
    v26 = *(_QWORD *)(a2 + 104);
    if (!v25)
    {
      if (v26)
      {
        v27 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360);
        v25 = 0;
        if (v27)
          goto LABEL_55;
      }
    }
  }
  else
  {
    v25 = (char *)(a2 + 96);
    v26 = *(unsigned __int8 *)(a2 + 119);
  }
  sub_20B42DB24(v7, *(char **)(a1 + 32), v25, &v25[v26], v26);
  v28 = *(unsigned __int8 *)(a2 + 143);
  if ((v28 & 0x80u) != 0)
    v28 = *(_QWORD *)(a2 + 128);
  __src = v28;
  sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v39, 8);
  if (*(char *)(a2 + 143) < 0)
  {
    v29 = *(char **)(a2 + 120);
    v30 = *(_QWORD *)(a2 + 128);
    if (!v29)
    {
      if (v30)
      {
        v31 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360);
        v29 = 0;
        if (v31)
          goto LABEL_55;
      }
    }
  }
  else
  {
    v29 = (char *)(a2 + 120);
    v30 = *(unsigned __int8 *)(a2 + 143);
  }
  sub_20B42DB24(v7, *(char **)(a1 + 32), v29, &v29[v30], v30);
  sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)(a2 + 144), (char *)(a2 + 148), 4);
  v32 = *(unsigned __int8 *)(a2 + 175);
  if ((v32 & 0x80u) != 0)
    v32 = *(_QWORD *)(a2 + 160);
  __src = v32;
  sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v39, 8);
  if (*(char *)(a2 + 175) < 0)
  {
    v33 = *(char **)(a2 + 152);
    v34 = *(_QWORD *)(a2 + 160);
    if (v33)
      goto LABEL_52;
    if (!v34)
      goto LABEL_52;
    v35 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360);
    v33 = 0;
    if (!v35)
      goto LABEL_52;
LABEL_55:
    abort();
  }
  v33 = (char *)(a2 + 152);
  v34 = *(unsigned __int8 *)(a2 + 175);
LABEL_52:
  sub_20B42DB24(v7, *(char **)(a1 + 32), v33, &v33[v34], v34);
  result = sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)(a2 + 176), (char *)(a2 + 192), 16);
  if (a3 >= 2)
  {
    LODWORD(__src) = 1;
    sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
    sub_20B42B554((_QWORD *)a1);
    sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)(a2 + 192), (char *)(a2 + 196), 4);
    sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)(a2 + 196), (char *)(a2 + 200), 4);
    sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)(a2 + 200), (char *)(a2 + 204), 4);
    sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)(a2 + 204), (char *)(a2 + 208), 4);
    sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)(a2 + 208), (char *)(a2 + 212), 4);
    result = sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)(a2 + 212), (char *)(a2 + 216), 4);
    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v37 + 10) = *(_QWORD *)(a1 + 32) - v37 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
  }
  return result;
}

void sub_20B1C4C30(uint64_t a1, __int128 *a2, unsigned int a3)
{
  void *v5[2];
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20B1C1D98((char *)v5, a2);
  sub_20B1C4D74(a1, (uint64_t)v5, a3);
  if (v18 < 0)
  {
    operator delete(__p);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v13);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v9);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v5[0]);
    return;
  }
LABEL_14:
  operator delete(v7);
  if (v6 < 0)
    goto LABEL_15;
}

void sub_20B1C4D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0D0484((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1C4D74(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 96);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 120);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2 + 144);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 152);
  sub_20B1C4E6C((_BYTE *)a1, (unsigned __int8 *)(a2 + 176));
  if (a3 >= 2)
  {
    v6 = *(_QWORD *)(a1 + 8);
    sub_20B1C5108((int *)&v6, (_BYTE *)a1, (uint64_t *)(a2 + 192));
  }
}

void sub_20B1C4E6C(_BYTE *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;

  if ((a1[12] & 2) != 0)
  {
    v4 = a2;
    sub_20B1C4FF8((uint64_t)a1, &v4);
  }
  else
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 1);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 2);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 3);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 4);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 5);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 6);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 7);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 8);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 9);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 10);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 11);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 12);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 13);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 14);
    (*(void (**)(_BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1, a2 + 15);
  }
}

void sub_20B1C4FF8(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20B09AB08((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20B1C50C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1C50E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C50F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C5108(int *a1, _BYTE *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t *v7;

  LODWORD(v7) = 1;
  (*(void (**)(_BYTE *, uint64_t **))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 >= 1)
  {
    sub_20B1C5264(a1, a2, a3);
    return;
  }
  if ((a2[12] & 2) != 0)
  {
    v7 = a3;
    sub_20B1C53CC((uint64_t)a2, &v7);
    v6 = (uint64_t *)((char *)a3 + 12);
    if ((a2[12] & 2) != 0)
      goto LABEL_5;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, a3);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 4);
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, a3 + 1);
    v6 = (uint64_t *)((char *)a3 + 12);
    if ((a2[12] & 2) != 0)
    {
LABEL_5:
      v7 = v6;
      sub_20B1C53CC((uint64_t)a2, &v7);
      return;
    }
  }
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, v6);
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, a3 + 2);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 20);
}

void sub_20B1C5264(int *a1, _BYTE *a2, uint64_t *a3)
{
  int v5;
  uint64_t *v7;
  uint64_t *v8;

  v5 = *a1;
  if (*a1 == 2)
  {
    LODWORD(v8) = 1;
    (*(void (**)(_BYTE *, uint64_t **))(*(_QWORD *)a2 + 104))(a2, &v8);
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
  if ((a2[12] & 2) == 0)
  {
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, a3);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 4);
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, a3 + 1);
    v7 = (uint64_t *)((char *)a3 + 12);
    if ((a2[12] & 2) != 0)
      goto LABEL_7;
LABEL_10:
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, v7);
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, a3 + 2);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 20);
    if (v5 < 1)
      return;
    goto LABEL_11;
  }
  v8 = a3;
  sub_20B1C53CC((uint64_t)a2, &v8);
  v7 = (uint64_t *)((char *)a3 + 12);
  if ((a2[12] & 2) == 0)
    goto LABEL_10;
LABEL_7:
  v8 = v7;
  sub_20B1C53CC((uint64_t)a2, &v8);
  if (v5 >= 1)
LABEL_11:
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

void sub_20B1C53CC(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20B1C2234((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20B1C5498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1C54B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C54C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1C54DC(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED20, 0);
  if (v4)
  {
    sub_20B1C5B10(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED58, 0);
    if (v5)
    {
      sub_20B1C6DF4(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EDE0, 0);
      if (v6)
      {
        sub_20B1C7538(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EE18, 0);
        if (v7)
        {
          sub_20B1C8398(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C508)
            sub_20B1C8EA4(&v9, a1);
          else
            sub_20B1C5640(&v8, (uint64_t)a1);
        }
      }
    }
  }
}

void sub_20B1C5640(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27[27];
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v27);
    sub_20B0D0A00((uint64_t)&v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)&v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v27);
  sub_20B0D0A00((uint64_t)&v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)&v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20AF4EA3C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(_QWORD *)a2;
  v27[0] = *(_QWORD *)(a2 + 8);
  v25 = v27[0];
  v28 = 6;
  (*(void (**)(uint64_t, unsigned int *))(v24 + 104))(a2, &v28);
  if (v25 < 1)
  {
    if (v28 < 3)
      sub_20B0E41CC((uint64_t)&v28, a2, v4, v28);
    else
      sub_20B0E4440(a2, v4, v28);
  }
  else
  {
    sub_20B0E3BD4((int *)v27, a2, v4, v28);
  }
  sub_20B1C9798((uint64_t)v27, (_DWORD *)a2, v3 + 200);
}

void sub_20B1C5AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1C5B10(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *exception;
  char v32;
  uint64_t v33[27];
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v33);
    sub_20B0D0A00((uint64_t)v34, v33);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v33);
  sub_20B0D0A00((uint64_t)v34, v33);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20AF4EA3C((uint64_t)v33);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0D978C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50AC94(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v33[0] = 0;
  sub_20B4552C4(v27, v33);
  if (HIDWORD(v33[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (LODWORD(v33[0]) >= 2)
    v28 = 2;
  else
    v28 = v33[0];
  sub_20B1C6068(a2, v3 + 200, v28);
  v29 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v29 - 8);
  v30 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 48) = v29 - 8;
  *(_QWORD *)(a2 + 72) = v30 - 8;
}

void sub_20B1C6020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1C6068(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  void **v7;
  int v8;
  void **v9;
  void **v10;
  int v11;
  void **v12;
  void **v13;
  int v14;
  void **v15;
  void **v16;
  int v17;
  void **v18;
  void **v19;
  int v20;
  void **v21;
  void **v22;
  int v23;
  char *v24;
  int v25;
  void **v26;
  void **v27;
  int v28;
  int v29;
  int v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *exception;
  __int128 v37;
  uint64_t v38;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "user_given_name";
  *(_QWORD *)(a1 + 96) = 15;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  v7 = (void **)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_20B4557C4(v7, (uint64_t)&v37);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v37;
  *(_QWORD *)(a2 + 16) = v38;
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "product_name";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v8)
    *(_BYTE *)(a1 + 104) = 1;
  v9 = (void **)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_20B4557C4(v9, (uint64_t)&v37);
  v10 = (void **)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = v37;
  *(_QWORD *)(a2 + 40) = v38;
  v11 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "type";
  *(_QWORD *)(a1 + 96) = 4;
  if (!v11)
    *(_BYTE *)(a1 + 104) = 1;
  v12 = (void **)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_20B4557C4(v12, (uint64_t)&v37);
  v13 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = v37;
  *(_QWORD *)(a2 + 64) = v38;
  v14 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "serial_number";
  *(_QWORD *)(a1 + 96) = 13;
  if (!v14)
    *(_BYTE *)(a1 + 104) = 1;
  v15 = (void **)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_20B4557C4(v15, (uint64_t)&v37);
  v16 = (void **)(a2 + 72);
  if (*(char *)(a2 + 95) < 0)
    operator delete(*v16);
  *(_OWORD *)v16 = v37;
  *(_QWORD *)(a2 + 88) = v38;
  v17 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "os_build_version";
  *(_QWORD *)(a1 + 96) = 16;
  if (!v17)
    *(_BYTE *)(a1 + 104) = 1;
  v18 = (void **)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_20B4557C4(v18, (uint64_t)&v37);
  v19 = (void **)(a2 + 96);
  if (*(char *)(a2 + 119) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = v37;
  *(_QWORD *)(a2 + 112) = v38;
  v20 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "os_product_version";
  *(_QWORD *)(a1 + 96) = 18;
  if (!v20)
    *(_BYTE *)(a1 + 104) = 1;
  v21 = (void **)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_20B4557C4(v21, (uint64_t)&v37);
  v22 = (void **)(a2 + 120);
  if (*(char *)(a2 + 143) < 0)
    operator delete(*v22);
  *(_OWORD *)v22 = v37;
  *(_QWORD *)(a2 + 136) = v38;
  v23 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "process_id";
  *(_QWORD *)(a1 + 96) = 10;
  if (!v23)
    *(_BYTE *)(a1 + 104) = 1;
  v24 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v37 = 0;
  sub_20B45540C(v24, &v37);
  if ((_QWORD)v37 != (int)v37)
    goto LABEL_46;
  *(_DWORD *)(a2 + 144) = v37;
  v25 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "process_name";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v25)
    *(_BYTE *)(a1 + 104) = 1;
  v26 = (void **)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_20B4557C4(v26, (uint64_t)&v37);
  v27 = (void **)(a2 + 152);
  if (*(char *)(a2 + 175) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v37;
  *(_QWORD *)(a2 + 168) = v38;
  v28 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "uuid";
  *(_QWORD *)(a1 + 96) = 4;
  if (v28)
  {
    *(_QWORD *)&v37 = a2 + 176;
    sub_20B1C6580((uint64_t *)a1, (_OWORD **)&v37);
    if (a3 < 2)
      return;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)&v37 = a2 + 176;
    sub_20B1C6580((uint64_t *)a1, (_OWORD **)&v37);
    if (a3 < 2)
      return;
  }
  v29 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "protocol_info";
  *(_QWORD *)(a1 + 96) = 13;
  if (!v29)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B50AC94(a1);
  v30 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v30)
    *(_BYTE *)(a1 + 104) = 1;
  v31 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v37 = 0;
  sub_20B4552C4(v31, &v37);
  if (DWORD1(v37))
  {
LABEL_46:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  v32 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "current";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v32)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v37 = a2 + 192;
  sub_20B1C6C04((uint64_t *)a1, (uint64_t *)&v37);
  v33 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "min";
  *(_QWORD *)(a1 + 96) = 3;
  if (!v33)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v37 = a2 + 204;
  sub_20B1C6C04((uint64_t *)a1, (uint64_t *)&v37);
  v34 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v34 - 8);
  v35 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v35 - 8);
  *(_QWORD *)(a1 + 48) = v34 - 8;
  *(_QWORD *)(a1 + 72) = v35 - 8;
}

void sub_20B1C6548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20B1C6580(uint64_t *a1, _OWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  __p[0] = 0;
  __p[1] = 0;
  v14 = 0;
  v4 = (void **)sub_20B50AF4C(a1);
  ++a1[14];
  v17 = 0;
  v16 = 0uLL;
  sub_20B4557C4(v4, (uint64_t)&v16);
  v14 = v17;
  *(_OWORD *)__p = v16;
  v5 = SHIBYTE(v17);
  v6 = (char *)v16;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  v15 = v8;
  v16 = 0uLL;
  sub_20B1C6780((uint64_t *)v8, &v16);
  v10 = MEMORY[0x24BEDB7F0];
  v11 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v12 = *(_QWORD *)(v10 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v11 - 24)) = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v12;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v16;
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
}

void sub_20B1C66F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_20B52CE84(&a15);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B1C6780(uint64_t *a1, _OWORD *a2)
{
  std::runtime_error *exception;
  std::string v6;
  void *__p[2];
  uint64_t v8;
  __int128 v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  sub_20B1C68C0(a1, (uint64_t)__p);
  sub_20B52138C((unint64_t)__p, (uint64_t)&v9);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v6);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *a2 = v9;
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20B1C686C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      if (a20 < 0)
        operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t *sub_20B1C68C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  int v13;
  int v14;
  _BYTE *v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned __int8 *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  const std::locale::facet *v29;
  std::locale v30;
  char v31;

  MEMORY[0x20BD3511C](&v31, a1, 0);
  if (!v31)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  v29 = std::locale::use_facet(&v30, MEMORY[0x24BEDB350]);
  std::locale::~locale(&v30);
  v7 = 0;
  v8 = a1 + 5;
  if (v5 >= 1)
    v9 = v6;
  else
    v9 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v10 = *(_QWORD **)((char *)v8 + *(_QWORD *)(*a1 - 24));
    v11 = (unsigned __int8 *)v10[3];
    if (v11 == (unsigned __int8 *)v10[4])
      break;
    v12 = *v11;
LABEL_16:
    if ((v12 & 0x80) == 0 && (*((_DWORD *)&v29[1].~facet + v12) & 0x4000) != 0)
    {
      v26 = 0;
      goto LABEL_44;
    }
    v14 = *(char *)(a2 + 23);
    if (v14 < 0)
    {
      v17 = *(_QWORD *)(a2 + 16) & 0x7FFFFFFFFFFFFFFFLL;
      v16 = v17 - 1;
      if (*(_QWORD *)(a2 + 8) == v17 - 1)
      {
        if (v17 == 0x7FFFFFFFFFFFFFF8)
          sub_20AEC0138();
        v15 = *(_BYTE **)a2;
        v18 = 0x7FFFFFFFFFFFFFF7;
        if (v16 <= 0x3FFFFFFFFFFFFFF2)
        {
LABEL_24:
          if (v16 + 1 > 2 * v16)
            v19 = v16 + 1;
          else
            v19 = 2 * v16;
          v20 = (v19 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v20 = v19 | 7;
          if (v19 >= 0x17)
            v18 = v20 + 1;
          else
            v18 = 23;
        }
        v21 = operator new(v18);
        v22 = v21;
        if (!v16 || (memmove(v21, v15, v16), v16 != 22))
          operator delete(v15);
        *(_QWORD *)a2 = v22;
        *(_QWORD *)(a2 + 16) = v18 | 0x8000000000000000;
      }
      else
      {
        v22 = *(_BYTE **)a2;
        v16 = *(_QWORD *)(a2 + 8);
      }
      *(_QWORD *)(a2 + 8) = v16 + 1;
      goto LABEL_39;
    }
    if (*(_BYTE *)(a2 + 23) == 22)
    {
      v15 = (_BYTE *)a2;
      v16 = 22;
      goto LABEL_24;
    }
    v16 = *(unsigned __int8 *)(a2 + 23);
    *(_BYTE *)(a2 + 23) = (v14 + 1) & 0x7F;
    v22 = (_BYTE *)a2;
LABEL_39:
    v23 = &v22[v16];
    *v23 = v12;
    v23[1] = 0;
    v24 = *(_QWORD **)((char *)v8 + *(_QWORD *)(*a1 - 24));
    v25 = v24[3];
    if (v25 == v24[4])
      (*(void (**)(_QWORD *))(*v24 + 80))(v24);
    else
      v24[3] = v25 + 1;
    if (v9 == ++v7)
    {
      v26 = 0;
      v27 = *a1;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
      goto LABEL_46;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v10 + 72))(v10);
  v12 = v13;
  if (v13 != -1)
    goto LABEL_16;
  v26 = 2;
LABEL_44:
  v27 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  if (!v7)
    v26 |= 4u;
LABEL_46:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v27 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v27 - 24) + 32) | v26);
  return a1;
}

void sub_20B1C6B84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  __break(1u);
}

void sub_20B1C6BF0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B1C6C04(uint64_t *a1, uint64_t *a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  __p[0] = 0;
  __p[1] = 0;
  v16 = 0;
  v4 = (void **)sub_20B50AF4C(a1);
  ++a1[14];
  v19 = 0;
  v18 = 0uLL;
  sub_20B4557C4(v4, (uint64_t)&v18);
  v16 = v19;
  *(_OWORD *)__p = v18;
  v5 = SHIBYTE(v19);
  v6 = (char *)v18;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  v17 = v8;
  *(_QWORD *)&v18 = 0;
  DWORD2(v18) = 0;
  sub_20B5117C4((uint64_t *)v8, (uint64_t)&v18);
  v10 = MEMORY[0x24BEDB7F0];
  v11 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v12 = *(_QWORD *)(v10 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v11 - 24)) = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v12;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  v13 = DWORD2(v18);
  v14 = *a2;
  *(_QWORD *)v14 = v18;
  *(_DWORD *)(v14 + 8) = v13;
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
}

void sub_20B1C6D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84(&a16);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1C6DF4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  char v30;
  uint64_t v31[27];
  _BYTE v32[8];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v31);
    sub_20B0D0A00((uint64_t)v32, v31);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v32);
        if (!v47)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v30, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v33;
    *(_BYTE *)(v3 + 64) = 0;
    if (v36)
    {
      v8 = v35;
      *(_OWORD *)(v3 + 40) = v34;
      *(_QWORD *)(v3 + 56) = v8;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v38;
    v10 = v37;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v41)
    {
      v11 = v40;
      *(_OWORD *)(v3 + 96) = v39;
      *(_QWORD *)(v3 + 112) = v11;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v44)
    {
      v12 = v43;
      *(_OWORD *)(v3 + 128) = v42;
      *(_QWORD *)(v3 + 144) = v12;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v47;
    if (v47)
    {
      *(_OWORD *)(v3 + 160) = v45;
      *(_QWORD *)(v3 + 176) = v46;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v45;
    if (!(_QWORD)v45)
      goto LABEL_46;
    v15 = *((_QWORD *)&v45 + 1);
    v16 = (void *)v45;
    if (*((_QWORD *)&v45 + 1) == (_QWORD)v45)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v45;
LABEL_45:
    *((_QWORD *)&v45 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v31);
  sub_20B0D0A00((uint64_t)v32, v31);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v30, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v33;
    *(_BYTE *)(v3 + 64) = 0;
    if (v36)
    {
      v17 = v35;
      *(_OWORD *)(v3 + 40) = v34;
      *(_QWORD *)(v3 + 56) = v17;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v38;
    v19 = v37;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v41)
    {
      v20 = v40;
      *(_OWORD *)(v3 + 96) = v39;
      *(_QWORD *)(v3 + 112) = v20;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v44)
    {
      v21 = v43;
      *(_OWORD *)(v3 + 128) = v42;
      *(_QWORD *)(v3 + 144) = v21;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v47;
    if (v47)
    {
      *(_OWORD *)(v3 + 160) = v45;
      *(_QWORD *)(v3 + 176) = v46;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v32);
  if (v47)
  {
LABEL_38:
    v14 = v45;
    if (!(_QWORD)v45)
      goto LABEL_46;
    v23 = *((_QWORD *)&v45 + 1);
    v16 = (void *)v45;
    if (*((_QWORD *)&v45 + 1) == (_QWORD)v45)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v44 && SHIBYTE(v43) < 0)
    operator delete((void *)v42);
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  sub_20AF4EA3C((uint64_t)v31);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0DD1A0((uint64_t)v31, a2, v4);
  LODWORD(v31[0]) = 2;
  sub_20B518854(a2[6], v31);
  v24 = v31[0];
  v25 = a2 + 2;
  sub_20B0DD290(a2 + 2);
  if (v24 >= 2)
    v26 = 2;
  else
    v26 = v24;
  sub_20B1C72DC(a2, v3 + 200, v26);
  v27 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(*v25 + 32))(a2 + 2);
  v29 = *(_QWORD *)(v27 - 16) - result + *(_QWORD *)(v27 - 8);
  if (v29)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v25 + 40))(a2 + 2, v29);
  a2[4] -= 16;
  return result;
}

void sub_20B1C7294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1C72DC(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  char v7;
  int v8;

  sub_20B518FF8(a1[6], (void **)a2);
  sub_20B518FF8(a1[6], (void **)(a2 + 24));
  sub_20B518FF8(a1[6], (void **)(a2 + 48));
  sub_20B518FF8(a1[6], (void **)(a2 + 72));
  sub_20B518FF8(a1[6], (void **)(a2 + 96));
  sub_20B518FF8(a1[6], (void **)(a2 + 120));
  sub_20B5187A4(a1[6], (_DWORD *)(a2 + 144));
  sub_20B518FF8(a1[6], (void **)(a2 + 152));
  v6 = a1[6];
  sub_20B51852C(v6, (_BYTE *)(a2 + 176));
  sub_20B51852C(v6, (_BYTE *)(a2 + 177));
  sub_20B51852C(v6, (_BYTE *)(a2 + 178));
  sub_20B51852C(v6, (_BYTE *)(a2 + 179));
  sub_20B51852C(v6, (_BYTE *)(a2 + 180));
  sub_20B51852C(v6, (_BYTE *)(a2 + 181));
  sub_20B51852C(v6, (_BYTE *)(a2 + 182));
  sub_20B51852C(v6, (_BYTE *)(a2 + 183));
  sub_20B51852C(v6, (_BYTE *)(a2 + 184));
  sub_20B51852C(v6, (_BYTE *)(a2 + 185));
  sub_20B51852C(v6, (_BYTE *)(a2 + 186));
  sub_20B51852C(v6, (_BYTE *)(a2 + 187));
  sub_20B51852C(v6, (_BYTE *)(a2 + 188));
  sub_20B51852C(v6, (_BYTE *)(a2 + 189));
  sub_20B51852C(v6, (_BYTE *)(a2 + 190));
  sub_20B51852C(v6, (_BYTE *)(a2 + 191));
  if (a3 >= 2)
  {
    v8 = 1;
    sub_20B518854(a1[6], &v8);
    sub_20B1C7464((uint64_t)&v7, a1, (_DWORD *)(a2 + 192));
  }
}

uint64_t sub_20B1C7464(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = a2 + 2;
  sub_20B0DD290(a2 + 2);
  sub_20B518854(a2[6], a3);
  sub_20B518854(a2[6], a3 + 1);
  sub_20B518854(a2[6], a3 + 2);
  sub_20B518854(a2[6], a3 + 3);
  sub_20B518854(a2[6], a3 + 4);
  sub_20B518854(a2[6], a3 + 5);
  v6 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(v5);
  v8 = *(_QWORD *)(v6 - 16) - result + *(_QWORD *)(v6 - 8);
  if (v8)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v5 + 40))(v5, v8);
  a2[4] -= 16;
  return result;
}

void sub_20B1C7538(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *exception;
  char v32;
  uint64_t v33[27];
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v33);
    sub_20B0D0A00((uint64_t)v34, v33);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v33);
  sub_20B0D0A00((uint64_t)v34, v33);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20AF4EA3C((uint64_t)v33);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0DE788(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50A7A4(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v33[0] = 0;
  sub_20B454B2C(v27, v33);
  if (HIDWORD(v33[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (LODWORD(v33[0]) >= 2)
    v28 = 2;
  else
    v28 = v33[0];
  sub_20B1C7A90(a2, v3 + 200, v28);
  v29 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v29 - 8);
  v30 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 48) = v29 - 8;
  *(_QWORD *)(a2 + 72) = v30 - 8;
}

void sub_20B1C7A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1C7A90(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  void **v7;
  int v8;
  void **v9;
  void **v10;
  int v11;
  void **v12;
  void **v13;
  int v14;
  void **v15;
  void **v16;
  int v17;
  void **v18;
  void **v19;
  int v20;
  void **v21;
  void **v22;
  int v23;
  char *v24;
  int v25;
  void **v26;
  void **v27;
  int v28;
  int v29;
  int v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *exception;
  __int128 v37;
  uint64_t v38;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "user_given_name";
  *(_QWORD *)(a1 + 96) = 15;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  v7 = (void **)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_20B45502C(v7, (uint64_t)&v37);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v37;
  *(_QWORD *)(a2 + 16) = v38;
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "product_name";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v8)
    *(_BYTE *)(a1 + 104) = 1;
  v9 = (void **)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_20B45502C(v9, (uint64_t)&v37);
  v10 = (void **)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = v37;
  *(_QWORD *)(a2 + 40) = v38;
  v11 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "type";
  *(_QWORD *)(a1 + 96) = 4;
  if (!v11)
    *(_BYTE *)(a1 + 104) = 1;
  v12 = (void **)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_20B45502C(v12, (uint64_t)&v37);
  v13 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = v37;
  *(_QWORD *)(a2 + 64) = v38;
  v14 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "serial_number";
  *(_QWORD *)(a1 + 96) = 13;
  if (!v14)
    *(_BYTE *)(a1 + 104) = 1;
  v15 = (void **)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_20B45502C(v15, (uint64_t)&v37);
  v16 = (void **)(a2 + 72);
  if (*(char *)(a2 + 95) < 0)
    operator delete(*v16);
  *(_OWORD *)v16 = v37;
  *(_QWORD *)(a2 + 88) = v38;
  v17 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "os_build_version";
  *(_QWORD *)(a1 + 96) = 16;
  if (!v17)
    *(_BYTE *)(a1 + 104) = 1;
  v18 = (void **)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_20B45502C(v18, (uint64_t)&v37);
  v19 = (void **)(a2 + 96);
  if (*(char *)(a2 + 119) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = v37;
  *(_QWORD *)(a2 + 112) = v38;
  v20 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "os_product_version";
  *(_QWORD *)(a1 + 96) = 18;
  if (!v20)
    *(_BYTE *)(a1 + 104) = 1;
  v21 = (void **)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_20B45502C(v21, (uint64_t)&v37);
  v22 = (void **)(a2 + 120);
  if (*(char *)(a2 + 143) < 0)
    operator delete(*v22);
  *(_OWORD *)v22 = v37;
  *(_QWORD *)(a2 + 136) = v38;
  v23 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "process_id";
  *(_QWORD *)(a1 + 96) = 10;
  if (!v23)
    *(_BYTE *)(a1 + 104) = 1;
  v24 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v37 = 0;
  sub_20B454C74(v24, &v37);
  if ((_QWORD)v37 != (int)v37)
    goto LABEL_46;
  *(_DWORD *)(a2 + 144) = v37;
  v25 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "process_name";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v25)
    *(_BYTE *)(a1 + 104) = 1;
  v26 = (void **)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v38 = 0;
  v37 = 0uLL;
  sub_20B45502C(v26, (uint64_t)&v37);
  v27 = (void **)(a2 + 152);
  if (*(char *)(a2 + 175) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v37;
  *(_QWORD *)(a2 + 168) = v38;
  v28 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "uuid";
  *(_QWORD *)(a1 + 96) = 4;
  if (v28)
  {
    *(_QWORD *)&v37 = a2 + 176;
    sub_20B1C7FA8((uint64_t *)a1, (_OWORD **)&v37);
    if (a3 < 2)
      return;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)&v37 = a2 + 176;
    sub_20B1C7FA8((uint64_t *)a1, (_OWORD **)&v37);
    if (a3 < 2)
      return;
  }
  v29 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "protocol_info";
  *(_QWORD *)(a1 + 96) = 13;
  if (!v29)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B50A7A4(a1);
  v30 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v30)
    *(_BYTE *)(a1 + 104) = 1;
  v31 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v37 = 0;
  sub_20B454B2C(v31, &v37);
  if (DWORD1(v37))
  {
LABEL_46:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  v32 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "current";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v32)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v37 = a2 + 192;
  sub_20B1C81A8((uint64_t *)a1, (uint64_t *)&v37);
  v33 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "min";
  *(_QWORD *)(a1 + 96) = 3;
  if (!v33)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v37 = a2 + 204;
  sub_20B1C81A8((uint64_t *)a1, (uint64_t *)&v37);
  v34 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v34 - 8);
  v35 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v35 - 8);
  *(_QWORD *)(a1 + 48) = v34 - 8;
  *(_QWORD *)(a1 + 72) = v35 - 8;
}

void sub_20B1C7F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20B1C7FA8(uint64_t *a1, _OWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  __p[0] = 0;
  __p[1] = 0;
  v14 = 0;
  v4 = (void **)sub_20B50AA5C(a1);
  ++a1[14];
  v17 = 0;
  v16 = 0uLL;
  sub_20B45502C(v4, (uint64_t)&v16);
  v14 = v17;
  *(_OWORD *)__p = v16;
  v5 = SHIBYTE(v17);
  v6 = (char *)v16;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  v15 = v8;
  v16 = 0uLL;
  sub_20B1C6780((uint64_t *)v8, &v16);
  v10 = MEMORY[0x24BEDB7F0];
  v11 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v12 = *(_QWORD *)(v10 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v11 - 24)) = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v12;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v16;
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
}

void sub_20B1C8118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_20B52CE84(&a15);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B1C81A8(uint64_t *a1, uint64_t *a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  __p[0] = 0;
  __p[1] = 0;
  v16 = 0;
  v4 = (void **)sub_20B50AA5C(a1);
  ++a1[14];
  v19 = 0;
  v18 = 0uLL;
  sub_20B45502C(v4, (uint64_t)&v18);
  v16 = v19;
  *(_OWORD *)__p = v18;
  v5 = SHIBYTE(v19);
  v6 = (char *)v18;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  v17 = v8;
  *(_QWORD *)&v18 = 0;
  DWORD2(v18) = 0;
  sub_20B5117C4((uint64_t *)v8, (uint64_t)&v18);
  v10 = MEMORY[0x24BEDB7F0];
  v11 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v12 = *(_QWORD *)(v10 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v11 - 24)) = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v12;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  v13 = DWORD2(v18);
  v14 = *a2;
  *(_QWORD *)v14 = v18;
  *(_DWORD *)(v14 + 8) = v13;
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
}

void sub_20B1C8308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84(&a16);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B1C8398(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  void *__p;
  uint64_t v33;
  char v34;
  _BYTE v35[8];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)&__p);
    sub_20B0D0A00((uint64_t)v35, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v35);
        if (!v50)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v36;
    *(_BYTE *)(v3 + 64) = 0;
    if (v39)
    {
      v8 = v38;
      *(_OWORD *)(v3 + 40) = v37;
      *(_QWORD *)(v3 + 56) = v8;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v41;
    v10 = v40;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v44)
    {
      v11 = v43;
      *(_OWORD *)(v3 + 96) = v42;
      *(_QWORD *)(v3 + 112) = v11;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v47)
    {
      v12 = v46;
      *(_OWORD *)(v3 + 128) = v45;
      *(_QWORD *)(v3 + 144) = v12;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v50;
    if (v50)
    {
      *(_OWORD *)(v3 + 160) = v48;
      *(_QWORD *)(v3 + 176) = v49;
      v48 = 0uLL;
      v49 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v48;
    if (!(_QWORD)v48)
      goto LABEL_46;
    v15 = *((_QWORD *)&v48 + 1);
    v16 = (void *)v48;
    if (*((_QWORD *)&v48 + 1) == (_QWORD)v48)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v48;
LABEL_45:
    *((_QWORD *)&v48 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)&__p);
  sub_20B0D0A00((uint64_t)v35, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v36;
    *(_BYTE *)(v3 + 64) = 0;
    if (v39)
    {
      v17 = v38;
      *(_OWORD *)(v3 + 40) = v37;
      *(_QWORD *)(v3 + 56) = v17;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v41;
    v19 = v40;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v44)
    {
      v20 = v43;
      *(_OWORD *)(v3 + 96) = v42;
      *(_QWORD *)(v3 + 112) = v20;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v47)
    {
      v21 = v46;
      *(_OWORD *)(v3 + 128) = v45;
      *(_QWORD *)(v3 + 144) = v21;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v50;
    if (v50)
    {
      *(_OWORD *)(v3 + 160) = v48;
      *(_QWORD *)(v3 + 176) = v49;
      v48 = 0uLL;
      v49 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v35);
  if (v50)
  {
LABEL_38:
    v14 = v48;
    if (!(_QWORD)v48)
      goto LABEL_46;
    v23 = *((_QWORD *)&v48 + 1);
    v16 = (void *)v48;
    if (*((_QWORD *)&v48 + 1) == (_QWORD)v48)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v47 && SHIBYTE(v46) < 0)
    operator delete((void *)v45);
  if (v44 && SHIBYTE(v43) < 0)
    operator delete((void *)v42);
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  sub_20AF4EA3C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20B514490(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20B0E0A94((uint64_t)&__p, a2, v4, v25);
  else
    sub_20B0E0C84(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (v34 < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_95:
          v30 = 0;
          if (v34 < 0)
            goto LABEL_98;
          goto LABEL_84;
        }
      }
      else if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_95;
      }
      v30 = 1;
      if (v34 < 0)
LABEL_98:
        operator delete(__p);
LABEL_84:
      if (*(_BYTE *)(a2 + 131))
        v29 = 0;
      else
        v29 = v30;
    }
    while ((v29 & 1) != 0);
  }
  LODWORD(__p) = 2;
  sub_20B514490(a2, &__p);
  if (__p >= 2)
    v26 = 2;
  else
    v26 = __p;
  sub_20B1C89B4(a2, v3 + 200, v26);
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (v34 < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_80:
          v28 = 0;
          if (v34 < 0)
            goto LABEL_83;
          goto LABEL_69;
        }
      }
      else if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_80;
      }
      v28 = 1;
      if (v34 < 0)
LABEL_83:
        operator delete(__p);
LABEL_69:
      if (*(_BYTE *)(a2 + 131))
        v27 = 0;
      else
        v27 = v28;
    }
    while ((v27 & 1) != 0);
  }
}

void sub_20B1C896C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1C89B4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  char v9;
  uint64_t v10;
  void **v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  char v17;
  char v18;
  char v19;
  void **v20;
  int v21;
  int v22;
  void **v23;
  int v24;
  int v25;
  void **v26;
  int v27;
  int v28;
  void **v29;
  void *__p[2];
  uint64_t v31;

  v6 = *(_QWORD *)(a1 + 80) + 1;
  *(_QWORD *)(a1 + 80) = v6;
  if (*(_BYTE *)(a1 + 128))
    v7 = *(_BYTE *)(a1 + 131) == 0;
  else
    v7 = 1;
  if (!v7)
  {
    *(_BYTE *)(a1 + 132) = 1;
    *(_QWORD *)(a1 + 80) = v6 + 1;
LABEL_15:
    v10 = v6 + 2;
LABEL_20:
    *(_BYTE *)(a1 + 132) = 1;
    v14 = v10 + 1;
LABEL_21:
    v15 = v14 + 1;
LABEL_22:
    *(_QWORD *)(a1 + 80) = v15 + 1;
LABEL_23:
    *(_BYTE *)(a1 + 132) = 1;
    goto LABEL_24;
  }
  sub_20B51680C(a1, (uint64_t)__p);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 16) = v31;
  ++*(_QWORD *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128))
    v8 = *(_BYTE *)(a1 + 131) == 0;
  else
    v8 = 1;
  v9 = v8;
  *(_QWORD *)(a1 + 80) = v6 + 1;
  if ((v9 & 1) == 0)
    goto LABEL_15;
  v11 = (void **)(a2 + 24);
  sub_20B51680C(a1, (uint64_t)__p);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 40) = v31;
  ++*(_QWORD *)(a1 + 104);
  v12 = *(unsigned __int8 *)(a1 + 128);
  v13 = *(unsigned __int8 *)(a1 + 131);
  v10 = *(_QWORD *)(a1 + 80) + 1;
  *(_QWORD *)(a1 + 80) = v10;
  if (v12 && v13)
    goto LABEL_20;
  v20 = (void **)(a2 + 48);
  sub_20B51680C(a1, (uint64_t)__p);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*v20);
  *(_OWORD *)v20 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 64) = v31;
  ++*(_QWORD *)(a1 + 104);
  v21 = *(unsigned __int8 *)(a1 + 128);
  v22 = *(unsigned __int8 *)(a1 + 131);
  v14 = *(_QWORD *)(a1 + 80) + 1;
  *(_QWORD *)(a1 + 80) = v14;
  if (v21 && v22)
    goto LABEL_21;
  v23 = (void **)(a2 + 72);
  sub_20B51680C(a1, (uint64_t)__p);
  if (*(char *)(a2 + 95) < 0)
    operator delete(*v23);
  *(_OWORD *)v23 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 88) = v31;
  ++*(_QWORD *)(a1 + 104);
  v24 = *(unsigned __int8 *)(a1 + 128);
  v25 = *(unsigned __int8 *)(a1 + 131);
  v15 = *(_QWORD *)(a1 + 80) + 1;
  *(_QWORD *)(a1 + 80) = v15;
  if (v24 && v25)
    goto LABEL_22;
  v26 = (void **)(a2 + 96);
  sub_20B51680C(a1, (uint64_t)__p);
  if (*(char *)(a2 + 119) < 0)
    operator delete(*v26);
  *(_OWORD *)v26 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 112) = v31;
  ++*(_QWORD *)(a1 + 104);
  v27 = *(unsigned __int8 *)(a1 + 128);
  v28 = *(unsigned __int8 *)(a1 + 131);
  ++*(_QWORD *)(a1 + 80);
  if (v27 && v28)
    goto LABEL_23;
  v29 = (void **)(a2 + 120);
  sub_20B51680C(a1, (uint64_t)__p);
  if (*(char *)(a2 + 143) < 0)
    operator delete(*v29);
  *(_OWORD *)v29 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 136) = v31;
  ++*(_QWORD *)(a1 + 104);
LABEL_24:
  sub_20B51423C(a1, (_DWORD *)(a2 + 144));
  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
  }
  else
  {
    v16 = (void **)(a2 + 152);
    sub_20B51680C(a1, (uint64_t)__p);
    if (*(char *)(a2 + 175) < 0)
      operator delete(*v16);
    *(_OWORD *)v16 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 168) = v31;
    ++*(_QWORD *)(a1 + 104);
  }
  sub_20B513B4C(a1, (_BYTE *)(a2 + 176));
  sub_20B513B4C(a1, (_BYTE *)(a2 + 177));
  sub_20B513B4C(a1, (_BYTE *)(a2 + 178));
  sub_20B513B4C(a1, (_BYTE *)(a2 + 179));
  sub_20B513B4C(a1, (_BYTE *)(a2 + 180));
  sub_20B513B4C(a1, (_BYTE *)(a2 + 181));
  sub_20B513B4C(a1, (_BYTE *)(a2 + 182));
  sub_20B513B4C(a1, (_BYTE *)(a2 + 183));
  sub_20B513B4C(a1, (_BYTE *)(a2 + 184));
  sub_20B513B4C(a1, (_BYTE *)(a2 + 185));
  sub_20B513B4C(a1, (_BYTE *)(a2 + 186));
  sub_20B513B4C(a1, (_BYTE *)(a2 + 187));
  sub_20B513B4C(a1, (_BYTE *)(a2 + 188));
  sub_20B513B4C(a1, (_BYTE *)(a2 + 189));
  sub_20B513B4C(a1, (_BYTE *)(a2 + 190));
  sub_20B513B4C(a1, (_BYTE *)(a2 + 191));
  if (a3 >= 2)
  {
    LODWORD(__p[0]) = 1;
    sub_20B514490(a1, __p);
    sub_20B514490(a1, (_DWORD *)(a2 + 192));
    sub_20B514490(a1, (_DWORD *)(a2 + 196));
    sub_20B514490(a1, (_DWORD *)(a2 + 200));
    sub_20B514490(a1, (_DWORD *)(a2 + 204));
    sub_20B514490(a1, (_DWORD *)(a2 + 208));
    sub_20B514490(a1, (_DWORD *)(a2 + 212));
    if (!*(_BYTE *)(a1 + 131))
    {
      while (1)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
          return;
        sub_20B51680C(a1, (uint64_t)__p);
        if (SHIBYTE(v31) < 0)
        {
          if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
            goto LABEL_45;
LABEL_33:
          v17 = 1;
          if (SHIBYTE(v31) < 0)
            goto LABEL_46;
LABEL_34:
          if (*(_BYTE *)(a1 + 131))
            v18 = 0;
          else
            v18 = v17;
          if ((v18 & 1) == 0)
            return;
        }
        else
        {
          if (SHIBYTE(v31) != 1 || *(unsigned __int8 *)(a1 + 72) != LOBYTE(__p[0]))
            goto LABEL_33;
LABEL_45:
          v17 = 0;
          if ((SHIBYTE(v31) & 0x80000000) == 0)
            goto LABEL_34;
LABEL_46:
          operator delete(__p[0]);
          if (*(_BYTE *)(a1 + 131))
            v19 = 0;
          else
            v19 = v17;
          if ((v19 & 1) == 0)
            return;
        }
      }
    }
  }
}

void sub_20B1C8EA4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v25);
    sub_20B0D0A00((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v25);
  sub_20B0D0A00((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20AF4EA3C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0E2418((uint64_t)v25, a2, v4);
  sub_20B1C9318((uint64_t)v25, a2, v3 + 200);
}

void sub_20B1C92D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1C9318(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  sub_20B42BA30(a2);
  if (v9 >= 2)
    v10 = 2;
  else
    v10 = v9;
  sub_20B1C93EC(a2, a3, v10);
  v11 = a2[12];
  v12 = a2[9];
  a2[6] = *(_QWORD *)(v11 - 8) + *(_QWORD *)(v12 - 8) + 8;
  a2[9] = v12 - 8;
  a2[12] = v11 - 8;
}

void sub_20B1C93D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1C93EC(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::logic_error *exception;
  char v14;

  sub_20B42BD80(a1, a2);
  sub_20B42BD80(a1, a2 + 24);
  sub_20B42BD80(a1, a2 + 48);
  sub_20B42BD80(a1, a2 + 72);
  sub_20B42BD80(a1, a2 + 96);
  sub_20B42BD80(a1, a2 + 120);
  v6 = a1[6];
  v7 = a1[7];
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (!v8)
    v9 = 0;
  if (v9 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    goto LABEL_12;
  }
  *(_DWORD *)(a2 + 144) = *(_DWORD *)(a1[3] + v6);
  a1[6] += 4;
  sub_20B42BD80(a1, a2 + 152);
  v10 = a1[6];
  v11 = a1[7];
  v8 = v11 >= v10;
  v12 = v11 - v10;
  if (!v8)
    v12 = 0;
  if (v12 <= 0xF)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
LABEL_12:
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1[3] + v10);
  a1[6] += 16;
  if (a3 >= 2)
    sub_20B1C9550((uint64_t)&v14, a1, (_DWORD *)(a2 + 192));
}

void sub_20B1C9528(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1C953C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD **sub_20B1C9550(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  _DWORD **result;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _QWORD *v16;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_20B42BA30(a2);
  v13 = a3;
  v14 = a3 + 1;
  v15 = a3 + 2;
  v16 = a2;
  sub_20B1C9640(&v13, (uint64_t *)&v16);
  v13 = a3 + 3;
  v14 = a3 + 4;
  v15 = a3 + 5;
  v16 = a2;
  result = sub_20B1C9640(&v13, (uint64_t *)&v16);
  v10 = a2[12];
  v11 = a2[9];
  a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
  a2[9] = v11 - 8;
  a2[12] = v10 - 8;
  return result;
}

void sub_20B1C962C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD **sub_20B1C9640(_DWORD **result, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::logic_error *exception;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 48);
  v4 = *(_QWORD *)(*a2 + 56);
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
    goto LABEL_11;
  **result = *(_DWORD *)(*(_QWORD *)(v2 + 24) + v3);
  *(_QWORD *)(v2 + 48) += 4;
  v7 = *a2;
  v8 = *(_QWORD *)(*a2 + 48);
  v9 = *(_QWORD *)(*a2 + 56);
  v5 = v9 >= v8;
  v10 = v9 - v8;
  if (!v5)
    v10 = 0;
  if (v10 <= 3)
    goto LABEL_11;
  *result[1] = *(_DWORD *)(*(_QWORD *)(v7 + 24) + v8);
  *(_QWORD *)(v7 + 48) += 4;
  v11 = *a2;
  v12 = *(_QWORD *)(*a2 + 48);
  v13 = *(_QWORD *)(*a2 + 56);
  v5 = v13 >= v12;
  v14 = v13 - v12;
  if (!v5)
    v14 = 0;
  if (v14 <= 3)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  *result[2] = *(_DWORD *)(*(_QWORD *)(v11 + 24) + v12);
  *(_QWORD *)(v11 + 48) += 4;
  return result;
}

void sub_20B1C975C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1C9770(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1C9784(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1C9798(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  __int128 *v9;
  unsigned int v10;
  unsigned int v11;

  v5 = a2[2];
  v10 = 2;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v10);
  v6 = v10;
  if (v5 < 1)
  {
    sub_20B1C9C48((uint64_t)a2, a3, v10);
  }
  else
  {
    if (v5 == 2)
    {
      v11 = 1;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v11);
      if (v11 >= 3)
      {
        v8 = v11;
        v9 = sub_20B1C9898();
        sub_20B520518((std::string *)v9, v8, 2u);
      }
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    if (v6 >= 2)
      v7 = 2;
    else
      v7 = v6;
    sub_20B1C9C48((uint64_t)a2, a3, v7);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

__int128 *sub_20B1C9898()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546352D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546352D8))
    return &xmmword_2546352C0;
  v2 = sub_20B1C9974();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546352C0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546352D0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546352C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546352C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546352D8);
  return &xmmword_2546352C0;
}

void sub_20B1C995C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546352D8);
  _Unwind_Resume(a1);
}

std::string *sub_20B1C9974()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546352F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546352F8))
    return &stru_2546352E0;
  sub_20B1C9A64((uint64_t)__p);
  sub_20AF6D7B0((char *)__p, &stru_2546352E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546352E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546352F8);
  return &stru_2546352E0;
}

void sub_20B1C9A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546352F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546352F8);
  _Unwind_Resume(a1);
}

void sub_20B1C9A64(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254635318);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254635318))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::PeerInfoSample<2U>]", qword_254635300);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635300, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635318);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254635338);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254635338))
  {
    v5 = sub_20AED4780(qword_254635300, "<", 0);
    sub_20AED467C(qword_254635300, 0, v5, qword_254635320);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635320, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635338);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254635358);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254635358))
  {
    sub_20B531658((uint64_t)qword_254635320, (uint64_t)&xmmword_254635340);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635340, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635358);
  }
  if (byte_254635357 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254635340, *((unint64_t *)&xmmword_254635340 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254635340;
    *(_QWORD *)(a1 + 16) = unk_254635350;
  }
}

void sub_20B1C9C00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635358);
  _Unwind_Resume(a1);
}

void sub_20B1C9C18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635338);
  _Unwind_Resume(a1);
}

void sub_20B1C9C30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635318);
  _Unwind_Resume(a1);
}

void sub_20B1C9C48(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 96);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 120);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2 + 144);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 152);
  sub_20B1C9D40((_BYTE *)a1, (_OWORD *)(a2 + 176));
  if (a3 >= 2)
  {
    v6 = *(_QWORD *)(a1 + 8);
    sub_20B1CA068((int *)&v6, (_BYTE *)a1, a2 + 192);
  }
}

void sub_20B1C9D40(_BYTE *a1, _OWORD *a2)
{
  _OWORD *v4;

  if ((a1[12] & 2) != 0)
  {
    v4 = a2;
    sub_20B1C9ECC((uint64_t)a1, &v4);
  }
  else
  {
    (*(void (**)(_BYTE *, _OWORD *))(*(_QWORD *)a1 + 80))(a1, a2);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 1);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 2);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 3);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 4);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 5);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 6);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 7);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 8);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 9);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 10);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 11);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 12);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 13);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 14);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, (uint64_t)a2 + 15);
  }
}

void sub_20B1C9ECC(uint64_t a1, _OWORD **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  __p[0] = 0;
  __p[1] = 0;
  v12 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, __p);
  v3 = SHIBYTE(v12);
  v4 = (char *)__p[0];
  v5 = operator new();
  v6 = v5;
  if (v3 >= 0)
    v7 = (char *)__p;
  else
    v7 = v4;
  sub_20B52CF30(v5, v7);
  v13 = v6;
  v14 = 0uLL;
  sub_20B1C6780((uint64_t *)v6, &v14);
  v8 = MEMORY[0x24BEDB7F0];
  v9 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(v8 + 72);
  *(_QWORD *)(v6 + *(_QWORD *)(v9 - 24)) = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v6 + 16) = v10;
  if (*(char *)(v6 + 111) < 0)
    operator delete(*(void **)(v6 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v6 + 128);
  MEMORY[0x20BD3583C](v6, 0x10B2C40EED050F3);
  **a2 = v14;
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
}

void sub_20B1CA018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  sub_20B52CE84(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B1CA068(int *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  LODWORD(v7) = 1;
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 >= 1)
  {
    sub_20B1CA1C4(a1, a2, a3);
    return;
  }
  if ((a2[12] & 2) != 0)
  {
    v7 = a3;
    sub_20B1CA54C((uint64_t)a2, &v7);
    v6 = a3 + 12;
    if ((a2[12] & 2) != 0)
      goto LABEL_5;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 4);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 8);
    v6 = a3 + 12;
    if ((a2[12] & 2) != 0)
    {
LABEL_5:
      v7 = v6;
      sub_20B1CA54C((uint64_t)a2, &v7);
      return;
    }
  }
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, v6);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
}

void sub_20B1CA1C4(int *a1, _BYTE *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unsigned int v8;
  __int128 *v9;
  uint64_t v10;

  v5 = *a1;
  if (*a1 == 2)
  {
    LODWORD(v10) = 1;
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v10);
    if (v10 >= 2)
    {
      v8 = v10;
      v9 = sub_20B1CA350();
      sub_20B520518((std::string *)v9, v8, 1u);
    }
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
  if ((a2[12] & 2) == 0)
  {
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 4);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 8);
    v7 = a3 + 12;
    if ((a2[12] & 2) != 0)
      goto LABEL_8;
LABEL_11:
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, v7);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
    if (v5 < 1)
      return;
    goto LABEL_12;
  }
  v10 = a3;
  sub_20B1CA54C((uint64_t)a2, &v10);
  v7 = a3 + 12;
  if ((a2[12] & 2) == 0)
    goto LABEL_11;
LABEL_8:
  v10 = v7;
  sub_20B1CA54C((uint64_t)a2, &v10);
  if (v5 < 1)
    return;
LABEL_12:
  (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20B1CA350()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635378);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635378))
    return &xmmword_254635360;
  v2 = (char *)sub_20B1CA42C();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254635360, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254635370 = *((_QWORD *)v2 + 2);
    xmmword_254635360 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635360, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635378);
  return &xmmword_254635360;
}

void sub_20B1CA414(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635378);
  _Unwind_Resume(a1);
}

void *sub_20B1CA42C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254635398);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254635398))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::kio::ProtocolInfoSample]", qword_254635380);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635380, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635398);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546353B8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_2546353B8))
    return &unk_2546353A0;
  sub_20B531658((uint64_t)qword_254635380, (uint64_t)&unk_2546353A0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_2546353A0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546353B8);
  return &unk_2546353A0;
}

void sub_20B1CA51C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546353B8);
  _Unwind_Resume(a1);
}

void sub_20B1CA534(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635398);
  _Unwind_Resume(a1);
}

void sub_20B1CA54C(uint64_t a1, uint64_t *a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  __p[0] = 0;
  __p[1] = 0;
  v14 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, __p);
  v3 = SHIBYTE(v14);
  v4 = (char *)__p[0];
  v5 = operator new();
  v6 = v5;
  if (v3 >= 0)
    v7 = (char *)__p;
  else
    v7 = v4;
  sub_20B52CF30(v5, v7);
  v15 = v6;
  v16 = 0;
  v17 = 0;
  sub_20B5117C4((uint64_t *)v6, (uint64_t)&v16);
  v8 = MEMORY[0x24BEDB7F0];
  v9 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(v8 + 72);
  *(_QWORD *)(v6 + *(_QWORD *)(v9 - 24)) = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v6 + 16) = v10;
  if (*(char *)(v6 + 111) < 0)
    operator delete(*(void **)(v6 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v6 + 128);
  MEMORY[0x20BD3583C](v6, 0x10B2C40EED050F3);
  v11 = v17;
  v12 = *a2;
  *(_QWORD *)v12 = v16;
  *(_DWORD *)(v12 + 8) = v11;
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
}

void sub_20B1CA688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  sub_20B52CE84(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1CA6D8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  unsigned __int128 *v13;
  unsigned __int128 v14;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = &off_24C40D588;
  *(_QWORD *)(result + 8) = v2;
  v3 = (_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 16) = v4;
  v5 = result + 16;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 24) = v6;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    *(_QWORD *)(a2 + 8) = v3;
    *v3 = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    *(_QWORD *)(result + 8) = v5;
  }
  v7 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(result + 48) = 0;
  *(_OWORD *)(result + 32) = v7;
  *(_BYTE *)(result + 72) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    v8 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(result + 48) = v8;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_BYTE *)(result + 72) = 1;
  }
  *(_BYTE *)(result + 80) = 0;
  *(_BYTE *)(result + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    v9 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(result + 80) = v9;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_BYTE *)(result + 104) = 1;
  }
  v10 = *(_OWORD *)(a2 + 112);
  v11 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(result + 144) = 0;
  *(_QWORD *)(result + 128) = v11;
  *(_OWORD *)(result + 112) = v10;
  *(_BYTE *)(result + 192) = 0;
  if (*(_BYTE *)(a2 + 192))
  {
    v12 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(result + 160) = *(_QWORD *)(a2 + 160);
    *(_OWORD *)(result + 144) = v12;
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    v13 = (unsigned __int128 *)(a2 + 176);
    do
      v14 = __ldaxp(v13);
    while (__stlxp(v14, v13));
    *(_OWORD *)(result + 176) = v14;
    *(_BYTE *)(result + 192) = 1;
  }
  *(_BYTE *)(result + 208) = 0;
  *(_BYTE *)(result + 232) = 0;
  if (*(_BYTE *)(a2 + 232))
  {
    *(_QWORD *)(result + 208) = 0;
    *(_QWORD *)(result + 216) = 0;
    *(_QWORD *)(result + 224) = 0;
    *(_OWORD *)(result + 208) = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(result + 224) = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a2 + 208) = 0;
    *(_QWORD *)(a2 + 216) = 0;
    *(_QWORD *)(a2 + 224) = 0;
    *(_BYTE *)(result + 232) = 1;
  }
  *(_QWORD *)result = &off_24C40D508;
  return result;
}

uint64_t sub_20B1CA82C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _QWORD *v13[5];
  unsigned __int8 **v14;
  _QWORD v15[5];
  unsigned __int8 **v16;
  char v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[6];

  v29[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v24);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v24);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v24);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20B0C0D90(v6, (uint64_t)v18);
  }
  else if (v7 == 1)
  {
    sub_20B0F9F8C(v6, (uint64_t)v18);
  }
  else
  {
    if (v7)
      sub_20AECFAB8();
    sub_20B0C6034(v6, (uint64_t)v18);
  }
  v15[0] = v24;
  v15[1] = &v25;
  v15[2] = &v26;
  v15[3] = &v27;
  v15[4] = &v28;
  v16 = (unsigned __int8 **)v29;
  v13[0] = v18;
  v13[1] = &v19;
  v13[2] = &v20;
  v13[3] = &v21;
  v13[4] = &v22;
  v14 = (unsigned __int8 **)&v23;
  if (sub_20B2178A8((uint64_t)&v17, v15, v13))
  {
    if (*((_BYTE *)v16 + 24) && *((_BYTE *)v14 + 24))
    {
      v8 = *v16;
      v9 = v16[1];
      v10 = *v14;
      if (v9 - *v16 == v14[1] - *v14)
      {
        if (v8 != v9)
        {
          while (sub_20B2167B8(v8, v10))
          {
            v8 += 96;
            v10 += 96;
            if (v8 == v9)
              goto LABEL_23;
          }
          goto LABEL_22;
        }
LABEL_23:
        v15[0] = a1 + 200;
        v13[0] = (_QWORD *)(a2 + 200);
        v11 = sub_20AF45D6C((uint64_t)v15, v13);
        goto LABEL_24;
      }
    }
    else if ((*((_BYTE *)v16 + 24) != 0) == (*((_BYTE *)v14 + 24) != 0))
    {
      goto LABEL_23;
    }
  }
LABEL_22:
  v11 = 0;
LABEL_24:
  sub_20AF4EA3C((uint64_t)v18);
  sub_20AF4EA3C((uint64_t)v24);
  return v11;
}

void sub_20B1CAA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a23);
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B1CAA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B1CAA5C(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EB80, 0);
  if (v4)
  {
    sub_20B1CAE68(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EBC8, 0);
    if (v5)
    {
      sub_20B1CBDC8(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC50, 0);
      if (v6)
      {
        sub_20B1CC254(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC98, 0);
        if (v7)
        {
          sub_20B1CCA14(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C2C8)
            sub_20B1CCDD0(&v9, (uint64_t)a1);
          else
            sub_20B1CABC0(&v8, a1);
        }
      }
    }
  }
}

void sub_20B1CABC0(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  const void ***v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FF5BC((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20B0FF5BC((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FEF34((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20B0FEF34((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0D8514((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20B0D8514((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = (const void ***)(v3 + 200);
  v13 = a2[2];
  v14 = 1;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20B1CD204((uint64_t)a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 1;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B1CD204((uint64_t)a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20B1CAE68(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FADD8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B50671C(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5086B4(a2, &v18);
      sub_20B0D1154(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FA468(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B50671C(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5086B4(a2, &v18);
  sub_20B1CB168(a2, (const void ***)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B1CB168(uint64_t a1, const void ***a2)
{
  const void ***v3;
  const void **v4;
  const void **v5;
  const void ***v6;
  BOOL v7;
  char **v8;
  char *v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  v3 = a2 + 1;
  v4 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      sub_20AF4043C((uint64_t **)&v8, (uint64_t *)v9, v4 + 4, (uint64_t)(v4 + 4));
      v5 = (const void **)v4[1];
      if (v5)
      {
        do
        {
          v6 = (const void ***)v5;
          v5 = (const void **)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (const void ***)v4[2];
          v7 = *v6 == v4;
          v4 = (const void **)v6;
        }
        while (!v7);
      }
      v4 = (const void **)v6;
    }
    while (v6 != v3);
  }
  sub_20B1CB25C(a1, (uint64_t)&v8);
  sub_20AEC833C((uint64_t)&v8, v9[0]);
}

void sub_20B1CB22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20AEC833C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20B1CB244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20AEC833C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20B1CB25C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  void **v13;
  __int128 v14;
  void **v15;

  v4 = *(_QWORD *)(a2 + 16);
  v15 = 0;
  v14 = 0uLL;
  sub_20B1CB3FC((uint64_t)&v14, v4);
  v5 = a2 + 8;
  sub_20B1CB4EC(*(_QWORD **)a2, (_QWORD *)(a2 + 8), (uint64_t)&v14);
  *(_OWORD *)__p = v14;
  v13 = v15;
  *(_QWORD *)&v14 = "context_enable_state_changes";
  *((_QWORD *)&v14 + 1) = 28;
  v15 = __p;
  sub_20B1CB768(a1, (uint64_t)&v14);
  v15 = 0;
  v14 = (unint64_t)&v14 + 8;
  sub_20B1CBC7C((_QWORD **)&v14, (__int128 *)__p[0], v6, (__int128 *)__p[1]);
  sub_20AEC833C(a2, *(char **)(a2 + 8));
  v7 = *((_QWORD *)&v14 + 1);
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v7;
  v8 = v15;
  *(_QWORD *)(a2 + 16) = v15;
  if (v8)
  {
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)&v14 = (char *)&v14 + 8;
    *((_QWORD *)&v14 + 1) = 0;
    v15 = 0;
    sub_20AEC833C((uint64_t)&v14, 0);
    v9 = (void **)__p[0];
    if (!__p[0])
      return;
  }
  else
  {
    *(_QWORD *)a2 = v5;
    sub_20AEC833C((uint64_t)&v14, (char *)v7);
    v9 = (void **)__p[0];
    if (!__p[0])
      return;
  }
  v10 = (void **)__p[1];
  v11 = v9;
  if (__p[1] != v9)
  {
    do
    {
      if (*((char *)v10 - 9) < 0)
        operator delete(*(v10 - 4));
      v10 -= 4;
    }
    while (v10 != v9);
    v11 = (void **)__p[0];
  }
  __p[1] = v9;
  operator delete(v11);
}

void sub_20B1CB3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
  sub_20AEC833C((uint64_t)&a13, a14);
  sub_20AF4BA50(&a9);
  _Unwind_Resume(a1);
}

void sub_20B1CB3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AF4BA50((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B1CB3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AF4BA50((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B1CB3FC(uint64_t a1, unint64_t a2)
{
  void **v2;
  void **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  void **v11;

  v2 = *(void ***)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    if (a2 >> 59)
      sub_20AEC60B8();
    v4 = *(void ***)(a1 + 8);
    v5 = 32 * a2;
    v6 = (char *)operator new(32 * a2);
    v7 = &v6[v5];
    v8 = &v6[(char *)v4 - (char *)v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[(char *)v4 - (char *)v2];
      do
      {
        v10 = *((_OWORD *)v4 - 2);
        *((_QWORD *)v9 - 2) = *(v4 - 2);
        *((_OWORD *)v9 - 2) = v10;
        *(v4 - 3) = 0;
        *(v4 - 2) = 0;
        *(v4 - 4) = 0;
        *(v9 - 8) = *((_BYTE *)v4 - 8);
        v9 -= 32;
        v4 -= 4;
      }
      while (v4 != v2);
      v2 = *(void ***)a1;
      v11 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v11 != v2)
      {
        if (*((char *)v11 - 9) < 0)
          operator delete(*(v11 - 4));
        v11 -= 4;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_20B1CB4EC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  char v6;
  unint64_t v7;
  __int128 v8;
  _QWORD *v9;
  char *v10;
  int v11;
  _QWORD *v12;
  BOOL v13;
  void *__p[2];
  uint64_t v16;
  char v17;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *((_BYTE *)v5 + 56);
      if (*((char *)v5 + 55) < 0)
      {
        sub_20AEC60F4(__p, (void *)v5[4], v5[5]);
        v17 = v6;
        v7 = *(_QWORD *)(a3 + 8);
        if (v7 < *(_QWORD *)(a3 + 16))
        {
LABEL_6:
          v8 = *(_OWORD *)__p;
          *(_QWORD *)(v7 + 16) = v16;
          *(_OWORD *)v7 = v8;
          __p[1] = 0;
          v16 = 0;
          __p[0] = 0;
          *(_BYTE *)(v7 + 24) = v17;
          *(_QWORD *)(a3 + 8) = v7 + 32;
          v9 = (_QWORD *)v5[1];
          if (v9)
            goto LABEL_11;
          goto LABEL_14;
        }
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v5 + 2);
        v16 = v5[6];
        v17 = v6;
        v7 = *(_QWORD *)(a3 + 8);
        if (v7 < *(_QWORD *)(a3 + 16))
          goto LABEL_6;
      }
      v10 = sub_20B1CB630((void **)a3, (uint64_t)__p);
      v11 = SHIBYTE(v16);
      *(_QWORD *)(a3 + 8) = v10;
      if (v11 < 0)
      {
        operator delete(__p[0]);
        v9 = (_QWORD *)v5[1];
        if (v9)
        {
          do
          {
LABEL_11:
            v12 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      else
      {
        v9 = (_QWORD *)v5[1];
        if (v9)
          goto LABEL_11;
      }
      do
      {
LABEL_14:
        v12 = (_QWORD *)v5[2];
        v13 = *v12 == (_QWORD)v5;
        v5 = v12;
      }
      while (!v13);
LABEL_3:
      v5 = v12;
    }
    while (v12 != a2);
  }
  return a3;
}

void sub_20B1CB614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20B1CB630(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void **v14;
  void **v15;
  __int128 v16;
  void **v17;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_20AEC60B8();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v4)
    v4 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 59)
    sub_20AEC60CC();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v3];
  v12 = &v10[v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11[24] = *(_BYTE *)(a2 + 24);
  v13 = v11 + 32;
  v14 = (void **)*a1;
  v15 = (void **)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 2);
      *((_QWORD *)v11 - 2) = *(v15 - 2);
      *((_OWORD *)v11 - 2) = v16;
      *(v15 - 3) = 0;
      *(v15 - 2) = 0;
      *(v15 - 4) = 0;
      *(v11 - 8) = *((_BYTE *)v15 - 8);
      v11 -= 32;
      v15 -= 4;
    }
    while (v15 != v14);
    v15 = (void **)*a1;
    v17 = (void **)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    while (v17 != v15)
    {
      if (*((char *)v17 - 9) < 0)
        operator delete(*(v17 - 4));
      v17 -= 4;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_20B1CB768(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  char v11;
  char *v12;

  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v3 = *(unsigned __int8 *)(a1 + 88), *(_OWORD *)(a1 + 72) = *(_OWORD *)a2, v3))
  {
    v4 = *(uint64_t **)(a2 + 16);
    sub_20B50671C(a1);
    v5 = *v4;
    v6 = v4[1];
    if (v5 != v6)
    {
      do
      {
LABEL_6:
        sub_20B50671C(a1);
        sub_20B508B7C(a1, v5);
        v11 = *(_BYTE *)(v5 + 24);
        v12 = &v11;
        sub_20B1CB88C(a1, (unsigned __int8 **)&v12);
        v7 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 - 8);
        *(_QWORD *)(a1 + 56) = v7 - 8;
        if (*(_BYTE *)(a1 + 88))
          *(_BYTE *)(a1 + 88) = 0;
        v5 += 32;
      }
      while (v5 != v6);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 - 16);
      *(_QWORD *)(a1 + 56) = v7 - 16;
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    v8 = *(uint64_t **)(a2 + 16);
    sub_20B50671C(a1);
    v5 = *v8;
    v6 = v8[1];
    if (v5 != v6)
      goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (v10)
    *(_BYTE *)(a1 + 88) = 0;
}

void sub_20B1CB88C(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20B1CB994((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
  sub_20B508B7C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20B1CB950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1CB96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1CB980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1CB994(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  int v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__dst[2];
  unint64_t v23;
  _QWORD v24[5];
  _QWORD *v25;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v24[0] = v5;
  v6 = (_QWORD *)(v5 + 16);
  v7 = *a3;
  if (v7 > 2)
  {
    sub_20AEC01D0(v6, (uint64_t)"Invalid(", 8);
    v8 = (_QWORD *)std::ostream::operator<<();
    sub_20AEC01D0(v8, (uint64_t)")", 1);
  }
  else
  {
    sub_20AEC01D0(v6, (uint64_t)(&off_24C411D90)[2 * v7], (uint64_t)(&off_24C411D90)[2 * v7 + 1]);
  }
  v9 = *(_DWORD *)(v5 + 120);
  if ((v9 & 0x10) != 0)
  {
    v12 = *(_QWORD *)(v5 + 112);
    v13 = *(_QWORD *)(v5 + 72);
    if (v12 < v13)
    {
      *(_QWORD *)(v5 + 112) = v13;
      v12 = v13;
    }
    v14 = *(const void **)(v5 + 64);
    v10 = v12 - (_QWORD)v14;
    if (v12 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_25;
  }
  else
  {
    if ((v9 & 8) == 0)
    {
      v10 = 0;
      HIBYTE(v23) = 0;
      v11 = __dst;
      goto LABEL_17;
    }
    v14 = *(const void **)(v5 + 40);
    v10 = *(_QWORD *)(v5 + 56) - (_QWORD)v14;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_25:
      sub_20AEC0138();
  }
  if (v10 >= 0x17)
  {
    v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v15 = v10 | 7;
    v16 = v15 + 1;
    v11 = (void **)operator new(v15 + 1);
    __dst[1] = (void *)v10;
    v23 = v16 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_16;
  }
  HIBYTE(v23) = v10;
  v11 = __dst;
  if (v10)
LABEL_16:
    memmove(v11, v14, v10);
LABEL_17:
  *((_BYTE *)v11 + v10) = 0;
  v17 = v24[0];
  if (v24[0])
  {
    v18 = MEMORY[0x24BEDB7F0];
    v19 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v24[0] = *MEMORY[0x24BEDB7F0];
    v20 = *(_QWORD *)(v18 + 72);
    *(_QWORD *)(v17 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(v18 + 64);
    *(_QWORD *)(v17 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v17 + 16) = v20;
    if (*(char *)(v17 + 111) < 0)
      operator delete(*(void **)(v17 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v17 + 128);
    MEMORY[0x20BD3583C](v17, 0x10B2C40EED050F3);
  }
  v24[0] = a2;
  v24[1] = __dst;
  v24[2] = a2;
  v24[3] = __dst;
  v24[4] = __dst;
  v21 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v21 == -1)
    sub_20AECFAB8();
  v25 = v24;
  ((void (*)(_QWORD **, uint64_t))off_24C40DC30[v21])(&v25, a2);
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
}

void sub_20B1CBC28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B1CBC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1CBC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B1CBC7C(_QWORD **a1, __int128 *a2, uint64_t a3, __int128 *a4)
{
  __int128 *v5;
  uint64_t *v7;
  char v8;
  __int128 v9;
  uint64_t *v10;
  _OWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;

  if (a2 != a4)
  {
    v5 = a2;
    v7 = (uint64_t *)(a1 + 1);
    while (1)
    {
      v8 = *((_BYTE *)v5 + 24);
      if (*((char *)v5 + 23) < 0)
      {
        sub_20AEC60F4(__p, *(void **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v9 = *v5;
        v15 = *((_QWORD *)v5 + 2);
        *(_OWORD *)__p = v9;
      }
      v16 = v8;
      v10 = sub_20AF40538(a1, v7, &v18, &v17, (const void **)__p);
      if (!*v10)
        break;
      if (SHIBYTE(v15) < 0)
        goto LABEL_13;
LABEL_3:
      v5 += 2;
      if (v5 == a4)
        return;
    }
    v11 = operator new(0x40uLL);
    v11[2] = *(_OWORD *)__p;
    *((_QWORD *)v11 + 6) = v15;
    __p[1] = 0;
    v15 = 0;
    __p[0] = 0;
    *((_BYTE *)v11 + 56) = v16;
    v12 = v18;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v12;
    *v10 = (uint64_t)v11;
    v13 = (_QWORD *)**a1;
    if (v13)
    {
      *a1 = v13;
      v11 = (_OWORD *)*v10;
    }
    sub_20AEC84C8(a1[1], (uint64_t *)v11);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_13:
    operator delete(__p[0]);
    goto LABEL_3;
  }
}

void sub_20B1CBDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1CBDC8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20B51E95C(&v20, 4u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v7 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBED4(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20B51E95C(&v20, 5u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v8 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBDB8(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20B51E95C(&v20, 6u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v6 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0D3CE4(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20B51E95C(&v20, 1u);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v20, v14 + 8);
  }
  sub_20B51956C(*(_QWORD *)(a2 + 24));
  sub_20B1CC048(a2, (const void ***)(v3 + 200));
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20B1CC048(uint64_t a1, const void ***a2)
{
  const void ***v3;
  const void **v4;
  unint64_t v5;
  uint64_t v6;
  const void **v7;
  const void ***v8;
  BOOL v9;
  uint64_t *v10;
  const void **v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  char **v16;
  char **v17;
  char *v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;

  v18 = 0;
  v19 = 0;
  v17 = &v18;
  v3 = a2 + 1;
  v4 = *a2;
  if (*a2 == (const void **)(a2 + 1))
  {
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 24);
    if (!*(_BYTE *)(v6 + 40))
    {
LABEL_3:
      sub_20B51F644();
      goto LABEL_13;
    }
  }
  else
  {
    do
    {
      sub_20AF4043C((uint64_t **)&v17, (uint64_t *)&v18, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != v3);
    v5 = v19;
    v6 = *(_QWORD *)(a1 + 24);
    if (!*(_BYTE *)(v6 + 40))
      goto LABEL_3;
  }
  v21 = (uint64_t *)(v6 + 16);
  sub_20B51F33C(&v21, v5);
LABEL_13:
  v10 = (uint64_t *)v17;
  if (v17 != &v18)
  {
    do
    {
      v11 = (const void **)(v10 + 4);
      v12 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v12 + 40))
      {
        v21 = (uint64_t *)(v12 + 16);
        sub_20B51FA2C((uint64_t)&v20, &v21, v11);
      }
      else
      {
        sub_20B51FE64((uint64_t)&v21, v12 + 8, (uint64_t)v11);
      }
      v13 = *((char *)v10 + 56);
      v14 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v14 + 40))
      {
        v21 = (uint64_t *)(v14 + 16);
        sub_20B51DD74(&v21, v13);
      }
      else
      {
        if (v13 < 0)
        {
          LOBYTE(v21) = -52;
          BYTE1(v21) = v13;
        }
        else
        {
          LOBYTE(v21) = *((_BYTE *)v10 + 56);
        }
        std::ostream::write();
      }
      v15 = (char *)v10[1];
      if (v15)
      {
        do
        {
          v16 = (char **)v15;
          v15 = *(char **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (char **)v10[2];
          v9 = *v16 == (char *)v10;
          v10 = (uint64_t *)v16;
        }
        while (!v9);
      }
      v10 = (uint64_t *)v16;
    }
    while (v16 != &v18);
  }
  sub_20AEC833C((uint64_t)&v17, v18);
}

void sub_20B1CC20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20AEC833C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20B1CC224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20AEC833C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20B1CC23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20AEC833C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20B1CC254(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FCF30(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B505FB0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5069D0(a2, &v18);
      sub_20B0D4F88(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FC7EC(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B505FB0(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5069D0(a2, &v18);
  sub_20B1CC554(a2, (const void ***)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B1CC554(uint64_t a1, const void ***a2)
{
  const void ***v3;
  const void **v4;
  const void **v5;
  const void ***v6;
  BOOL v7;
  char **v8;
  char *v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  v3 = a2 + 1;
  v4 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      sub_20AF4043C((uint64_t **)&v8, (uint64_t *)v9, v4 + 4, (uint64_t)(v4 + 4));
      v5 = (const void **)v4[1];
      if (v5)
      {
        do
        {
          v6 = (const void ***)v5;
          v5 = (const void **)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (const void ***)v4[2];
          v7 = *v6 == v4;
          v4 = (const void **)v6;
        }
        while (!v7);
      }
      v4 = (const void **)v6;
    }
    while (v6 != v3);
  }
  sub_20B1CC648(a1, (uint64_t)&v8);
  sub_20AEC833C((uint64_t)&v8, v9[0]);
}

void sub_20B1CC618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20AEC833C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20B1CC630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20AEC833C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20B1CC648(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  void **v13;
  __int128 v14;
  void **v15;

  v4 = *(_QWORD *)(a2 + 16);
  v15 = 0;
  v14 = 0uLL;
  sub_20B1CB3FC((uint64_t)&v14, v4);
  v5 = a2 + 8;
  sub_20B1CB4EC(*(_QWORD **)a2, (_QWORD *)(a2 + 8), (uint64_t)&v14);
  *(_OWORD *)__p = v14;
  v13 = v15;
  *(_QWORD *)&v14 = "context_enable_state_changes";
  *((_QWORD *)&v14 + 1) = 28;
  v15 = __p;
  sub_20B1CC7E8(a1, (uint64_t)&v14);
  v15 = 0;
  v14 = (unint64_t)&v14 + 8;
  sub_20B1CBC7C((_QWORD **)&v14, (__int128 *)__p[0], v6, (__int128 *)__p[1]);
  sub_20AEC833C(a2, *(char **)(a2 + 8));
  v7 = *((_QWORD *)&v14 + 1);
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v7;
  v8 = v15;
  *(_QWORD *)(a2 + 16) = v15;
  if (v8)
  {
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)&v14 = (char *)&v14 + 8;
    *((_QWORD *)&v14 + 1) = 0;
    v15 = 0;
    sub_20AEC833C((uint64_t)&v14, 0);
    v9 = (void **)__p[0];
    if (!__p[0])
      return;
  }
  else
  {
    *(_QWORD *)a2 = v5;
    sub_20AEC833C((uint64_t)&v14, (char *)v7);
    v9 = (void **)__p[0];
    if (!__p[0])
      return;
  }
  v10 = (void **)__p[1];
  v11 = v9;
  if (__p[1] != v9)
  {
    do
    {
      if (*((char *)v10 - 9) < 0)
        operator delete(*(v10 - 4));
      v10 -= 4;
    }
    while (v10 != v9);
    v11 = (void **)__p[0];
  }
  __p[1] = v9;
  operator delete(v11);
}

void sub_20B1CC798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
  sub_20AEC833C((uint64_t)&a13, a14);
  sub_20AF4BA50(&a9);
  _Unwind_Resume(a1);
}

void sub_20B1CC7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AF4BA50((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B1CC7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AF4BA50((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B1CC7E8(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  char v11;
  char *v12;

  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v3 = *(unsigned __int8 *)(a1 + 88), *(_OWORD *)(a1 + 72) = *(_OWORD *)a2, v3))
  {
    v4 = *(uint64_t **)(a2 + 16);
    sub_20B505FB0(a1);
    v5 = *v4;
    v6 = v4[1];
    if (v5 != v6)
    {
      do
      {
LABEL_6:
        sub_20B505FB0(a1);
        sub_20B506E98(a1, v5);
        v11 = *(_BYTE *)(v5 + 24);
        v12 = &v11;
        sub_20B1CC90C(a1, (unsigned __int8 **)&v12);
        v7 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 - 8);
        *(_QWORD *)(a1 + 56) = v7 - 8;
        if (*(_BYTE *)(a1 + 88))
          *(_BYTE *)(a1 + 88) = 0;
        v5 += 32;
      }
      while (v5 != v6);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 - 16);
      *(_QWORD *)(a1 + 56) = v7 - 16;
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    v8 = *(uint64_t **)(a2 + 16);
    sub_20B505FB0(a1);
    v5 = *v8;
    v6 = v8[1];
    if (v5 != v6)
      goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (v10)
    *(_BYTE *)(a1 + 88) = 0;
}

void sub_20B1CC90C(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20B1CB994((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
  sub_20B506E98(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20B1CC9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1CC9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1CCA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1CCA14(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FE288(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20AEC01D0(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20B0D66C4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FDCE4(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20AEC01D0(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20B1CCC2C(a2, (const void ***)(v3 + 200));
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20AEC01D0(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20B1CCC2C(uint64_t a1, const void ***a2)
{
  const void ***v3;
  const void **v4;
  const void **v5;
  const void ***v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t *v9;
  char *v10;
  char **v11;
  char **v12;
  char *v13[2];
  unsigned __int8 v14;

  v13[0] = 0;
  v13[1] = 0;
  v12 = v13;
  v3 = a2 + 1;
  v4 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      sub_20AF4043C((uint64_t **)&v12, (uint64_t *)v13, v4 + 4, (uint64_t)(v4 + 4));
      v5 = (const void **)v4[1];
      if (v5)
      {
        do
        {
          v6 = (const void ***)v5;
          v5 = (const void **)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (const void ***)v4[2];
          v7 = *v6 == v4;
          v4 = (const void **)v6;
        }
        while (!v7);
      }
      v4 = (const void **)v6;
    }
    while (v6 != v3);
    if (!*(_QWORD *)(a1 + 40))
      goto LABEL_13;
    goto LABEL_12;
  }
  if (*(_QWORD *)(a1 + 40))
  {
LABEL_12:
    v8 = *(_QWORD **)(a1 + 24);
    v14 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v8, (uint64_t)&v14, 1);
  }
LABEL_13:
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v9 = (uint64_t *)v12;
  if (v12 != v13)
  {
    do
    {
      sub_20B512F6C(a1, (uint64_t)(v9 + 4));
      v14 = *((_BYTE *)v9 + 56);
      sub_20B512EB0(a1, &v14);
      v10 = (char *)v9[1];
      if (v10)
      {
        do
        {
          v11 = (char **)v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char **)v9[2];
          v7 = *v11 == (char *)v9;
          v9 = (uint64_t *)v11;
        }
        while (!v7);
      }
      v9 = (uint64_t *)v11;
    }
    while (v11 != v13);
  }
  sub_20AEC833C((uint64_t)&v12, v13[0]);
}

void sub_20B1CCD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20AEC833C((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20B1CCDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20AEC833C((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20B1CCDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20AEC833C((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20B1CCDD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE9C0(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE8A4(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    __src = 6;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0D757C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 1;
  sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_20B42B554((_QWORD *)a2);
  sub_20B1CCF88(a2, (const void ***)(v3 + 200));
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20B1CCF88(uint64_t a1, const void ***a2)
{
  const void ***v3;
  const void **v4;
  uint64_t v5;
  const void **v6;
  const void ***v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  BOOL v12;
  char *v13;
  char **v14;
  char **v15;
  char *v16;
  uint64_t v17;
  uint64_t __src;
  uint64_t v19;

  v16 = 0;
  v17 = 0;
  v15 = &v16;
  v3 = a2 + 1;
  v4 = *a2;
  if (*a2 == (const void **)(a2 + 1))
  {
    v5 = 0;
  }
  else
  {
    do
    {
      sub_20AF4043C((uint64_t **)&v15, (uint64_t *)&v16, v4 + 4, (uint64_t)(v4 + 4));
      v6 = (const void **)v4[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v4[2];
          v12 = *v7 == v4;
          v4 = (const void **)v7;
        }
        while (!v12);
      }
      v4 = (const void **)v7;
    }
    while (v7 != v3);
    v5 = v17;
  }
  __src = v5;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v19, 8);
  v8 = (uint64_t *)v15;
  if (v15 != &v16)
  {
    do
    {
      v9 = *((unsigned __int8 *)v8 + 55);
      if ((v9 & 0x80u) != 0)
        v9 = v8[5];
      __src = v9;
      sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v19, 8);
      if (*((char *)v8 + 55) < 0)
      {
        v10 = (char *)v8[4];
        v11 = v8[5];
        if (v10)
          v12 = 1;
        else
          v12 = v11 == 0;
        if (!v12)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360))
          {
            abort();
          }
          v10 = 0;
        }
      }
      else
      {
        v10 = (char *)(v8 + 4);
        v11 = *((unsigned __int8 *)v8 + 55);
      }
      sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), v10, &v10[v11], v11);
      LOBYTE(__src) = *((_BYTE *)v8 + 56);
      sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
      v13 = (char *)v8[1];
      if (v13)
      {
        do
        {
          v14 = (char **)v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char **)v8[2];
          v12 = *v14 == (char *)v8;
          v8 = (uint64_t *)v14;
        }
        while (!v12);
      }
      v8 = (uint64_t *)v14;
    }
    while (v14 != &v16);
  }
  sub_20AEC833C((uint64_t)&v15, v16);
}

void sub_20B1CD1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20AEC833C((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20B1CD1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20AEC833C((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20B1CD1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20AEC833C((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20B1CD1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20AEC833C((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20B1CD204(uint64_t a1, const void ***a2)
{
  const void ***v3;
  const void **v4;
  uint64_t v5;
  const void **v6;
  const void ***v7;
  BOOL v8;
  uint64_t *v9;
  char *v10;
  char **v11;
  char **v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v13 = 0;
  v14 = 0;
  v12 = &v13;
  v3 = a2 + 1;
  v4 = *a2;
  if (*a2 == (const void **)(a2 + 1))
  {
    v5 = 0;
  }
  else
  {
    do
    {
      sub_20AF4043C((uint64_t **)&v12, (uint64_t *)&v13, v4 + 4, (uint64_t)(v4 + 4));
      v6 = (const void **)v4[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v4[2];
          v8 = *v7 == v4;
          v4 = (const void **)v7;
        }
        while (!v8);
      }
      v4 = (const void **)v7;
    }
    while (v7 != v3);
    v5 = v14;
  }
  v15 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v15);
  v9 = (uint64_t *)v12;
  if (v12 != &v13)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 144))(a1, v9 + 4);
      LOBYTE(v15) = *((_BYTE *)v9 + 56);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v15);
      v10 = (char *)v9[1];
      if (v10)
      {
        do
        {
          v11 = (char **)v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char **)v9[2];
          v8 = *v11 == (char *)v9;
          v9 = (uint64_t *)v11;
        }
        while (!v8);
      }
      v9 = (uint64_t *)v11;
    }
    while (v11 != &v13);
  }
  sub_20AEC833C((uint64_t)&v12, v13);
}

void sub_20B1CD348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20AEC833C((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20B1CD360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20AEC833C((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20B1CD378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_20AEC833C((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20B1CD390(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED20, 0);
  if (v4)
  {
    sub_20B1CD9CC(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED58, 0);
    if (v5)
    {
      sub_20B1CE658(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EDE0, 0);
      if (v6)
      {
        sub_20B1CEC0C(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EE18, 0);
        if (v7)
        {
          sub_20B1CF6F4(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C508)
            sub_20B1CFE38(&v9, a1);
          else
            sub_20B1CD4F4(&v8, (uint64_t *)a1);
        }
      }
    }
  }
}

void sub_20B1CD4F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27[27];
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v27);
    sub_20B0D0A00((uint64_t)&v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)&v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v27);
  sub_20B0D0A00((uint64_t)&v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)&v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20AF4EA3C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *a2;
  v27[0] = a2[1];
  v25 = v27[0];
  v28 = 6;
  (*(void (**)(uint64_t *, unsigned int *))(v24 + 104))(a2, &v28);
  if (v25 < 1)
  {
    if (v28 < 3)
      sub_20B0E41CC((uint64_t)&v28, (uint64_t)a2, v4, v28);
    else
      sub_20B0E4440((uint64_t)a2, v4, v28);
  }
  else
  {
    sub_20B0E3BD4((int *)v27, (uint64_t)a2, v4, v28);
  }
  v27[0] = a2[1];
  sub_20B1D04F4((int *)v27, (uint64_t)a2, v3 + 200);
}

void sub_20B1CD984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1CD9CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *exception;
  char v31;
  uint64_t v32[27];
  _BYTE v33[8];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v32);
    sub_20B0D0A00((uint64_t)v33, v32);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v33);
        if (!v48)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v8 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v8;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v39;
    v10 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v11 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v11;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v12 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v12;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v15 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v46;
LABEL_45:
    *((_QWORD *)&v46 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v32);
  sub_20B0D0A00((uint64_t)v33, v32);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v17 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v17;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v39;
    v19 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v20 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v20;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v21 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v21;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v33);
  if (v48)
  {
LABEL_38:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v23 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v45 && SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  sub_20AF4EA3C((uint64_t)v32);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0D978C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50AC94(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v32[0] = 0;
  sub_20B4552C4(v27, v32);
  if (HIDWORD(v32[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  sub_20B1CDF20(a2, v3 + 200);
  v28 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v28 - 8);
  v29 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(a2 + 48) = v28 - 8;
  *(_QWORD *)(a2 + 72) = v29 - 8;
}

void sub_20B1CDED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1CDF20(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void **v11;
  void **v12;
  void *__p[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 16);
  v16 = 0;
  v15 = 0uLL;
  sub_20B1CB3FC((uint64_t)&v15, v4);
  v5 = a2 + 8;
  sub_20B1CB4EC(*(_QWORD **)a2, (_QWORD *)(a2 + 8), (uint64_t)&v15);
  *(_OWORD *)__p = v15;
  v14 = v16;
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "context_enable_state_changes";
  *(_QWORD *)(a1 + 96) = 28;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B1CE0C8((uint64_t *)a1, (char **)__p);
  *((_QWORD *)&v15 + 1) = 0;
  v16 = 0;
  *(_QWORD *)&v15 = (char *)&v15 + 8;
  sub_20B1CBC7C((_QWORD **)&v15, (__int128 *)__p[0], v7, (__int128 *)__p[1]);
  sub_20AEC833C(a2, *(char **)(a2 + 8));
  v8 = *((_QWORD *)&v15 + 1);
  *(_QWORD *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v8;
  v9 = v16;
  *(_QWORD *)(a2 + 16) = v16;
  if (v9)
  {
    *(_QWORD *)(v8 + 16) = v5;
    *(_QWORD *)&v15 = (char *)&v15 + 8;
    *((_QWORD *)&v15 + 1) = 0;
    v16 = 0;
    sub_20AEC833C((uint64_t)&v15, 0);
    v10 = (void **)__p[0];
    if (!__p[0])
      return;
  }
  else
  {
    *(_QWORD *)a2 = v5;
    sub_20AEC833C((uint64_t)&v15, (char *)v8);
    v10 = (void **)__p[0];
    if (!__p[0])
      return;
  }
  v11 = (void **)__p[1];
  v12 = v10;
  if (__p[1] != v10)
  {
    do
    {
      if (*((char *)v11 - 9) < 0)
        operator delete(*(v11 - 4));
      v11 -= 4;
    }
    while (v11 != v10);
    v12 = (void **)__p[0];
  }
  __p[1] = v10;
  operator delete(v12);
}

void sub_20B1CE078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
  sub_20AEC833C((uint64_t)&a13, a14);
  sub_20AF4BA50(&a9);
  _Unwind_Resume(a1);
}

void sub_20B1CE0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AF4BA50((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B1CE0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AF4BA50((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B1CE0C8(uint64_t *a1, char **a2)
{
  unsigned __int8 *v4;
  int v5;
  unint64_t v6;
  void ***v7;
  void **v8;
  char *v9;
  unint64_t v10;
  void **v11;
  void **v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  __int128 v21;
  void *v22;

  sub_20B50AC94((uint64_t)a1);
  v4 = (unsigned __int8 *)a1[4];
  v5 = *v4;
  if (v5 == 2)
  {
    v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 8) - **((_QWORD **)v4 + 1)) >> 4;
  }
  else if (v5 == 1)
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 8) - **((_QWORD **)v4 + 1)) >> 3);
  }
  else
  {
    if (!*v4)
    {
      v6 = 0;
      v7 = (void ***)(a2 + 1);
      v8 = (void **)a2[1];
      v9 = *a2;
      v10 = ((char *)v8 - *a2) >> 5;
      goto LABEL_11;
    }
    v6 = 1;
  }
  v7 = (void ***)(a2 + 1);
  v8 = (void **)a2[1];
  v9 = *a2;
  v10 = ((char *)v8 - *a2) >> 5;
  if (v6 > v10)
  {
    sub_20B1CE2D8((void **)a2, v6 - v10);
    v13 = a2;
    v11 = (void **)*a2;
    v12 = (void **)v13[1];
    if (v11 != v12)
      goto LABEL_22;
LABEL_20:
    v14 = a1[6];
    v15 = a1[9];
    goto LABEL_25;
  }
LABEL_11:
  if (v10 <= v6)
  {
    v12 = v8;
    v11 = (void **)*a2;
    if (v11 != v8)
      goto LABEL_22;
    goto LABEL_20;
  }
  v12 = (void **)&v9[32 * v6];
  while (v8 != v12)
  {
    if (*((char *)v8 - 9) < 0)
      operator delete(*(v8 - 4));
    v8 -= 4;
  }
  *v7 = v12;
  v11 = (void **)*a2;
  if (v11 == v12)
    goto LABEL_20;
  do
  {
LABEL_22:
    sub_20B50AC94((uint64_t)a1);
    v20 = (void **)sub_20B50AF4C(a1);
    ++a1[14];
    v22 = 0;
    v21 = 0uLL;
    sub_20B4557C4(v20, (uint64_t)&v21);
    if (*((char *)v11 + 23) < 0)
      operator delete(*v11);
    v16 = (char *)(v11 + 3);
    v17 = v21;
    v11[2] = v22;
    *(_OWORD *)v11 = v17;
    v11 += 4;
    *(_QWORD *)&v21 = v16;
    sub_20B1CE468(a1, (_BYTE **)&v21);
    v18 = a1[6];
    a1[4] = *(_QWORD *)(v18 - 8);
    v19 = a1[9];
    a1[14] = *(_QWORD *)(v19 - 8);
    a1[6] = v18 - 8;
    a1[9] = v19 - 8;
  }
  while (v11 != v12);
  v14 = v18 - 8;
  v15 = v19 - 8;
LABEL_25:
  a1[4] = *(_QWORD *)(v14 - 8);
  a1[14] = *(_QWORD *)(v15 - 8);
  a1[6] = v14 - 8;
  a1[9] = v15 - 8;
}

void sub_20B1CE2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1CE2D8(void **a1, unint64_t a2)
{
  _BYTE *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void **v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  void **v18;
  __int128 v19;
  void **v20;

  v5 = (void **)a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - (_BYTE *)v5) >> 5)
  {
    if (a2)
    {
      v11 = 32 * a2;
      v12 = &v5[4 * a2];
      do
      {
        *v5 = 0;
        v5[1] = 0;
        *((_BYTE *)v5 + 24) = 0;
        v5[2] = 0;
        v5 += 4;
        v11 -= 32;
      }
      while (v11);
      v5 = v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = ((char *)v5 - (_BYTE *)*a1) >> 5;
    if ((v6 + a2) >> 59)
      sub_20AEC60B8();
    v7 = v4 - (_BYTE *)*a1;
    v8 = v7 >> 4;
    if (v7 >> 4 <= v6 + a2)
      v8 = v6 + a2;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
      v9 = 0x7FFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v9)
    {
      if (v9 >> 59)
        sub_20AEC60CC();
      v10 = (char *)operator new(32 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = &v10[32 * v6];
    v14 = 32 * a2;
    v15 = &v13[32 * a2];
    v16 = v13;
    do
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      v16[24] = 0;
      *((_QWORD *)v16 + 2) = 0;
      v16 += 32;
      v14 -= 32;
    }
    while (v14);
    v17 = &v10[32 * v9];
    v18 = (void **)*a1;
    if (v5 == *a1)
    {
      *a1 = v13;
      a1[1] = v15;
      a1[2] = v17;
    }
    else
    {
      do
      {
        v19 = *((_OWORD *)v5 - 2);
        *((_QWORD *)v13 - 2) = *(v5 - 2);
        *((_OWORD *)v13 - 2) = v19;
        *(v5 - 3) = 0;
        *(v5 - 2) = 0;
        *(v5 - 4) = 0;
        *(v13 - 8) = *((_BYTE *)v5 - 8);
        v13 -= 32;
        v5 -= 4;
      }
      while (v5 != v18);
      v5 = (void **)*a1;
      v20 = (void **)a1[1];
      *a1 = v13;
      a1[1] = v15;
      a1[2] = v17;
      while (v20 != v5)
      {
        if (*((char *)v20 - 9) < 0)
          operator delete(*(v20 - 4));
        v20 -= 4;
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20B1CE468(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_20B50AF4C(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_20B4557C4(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20B214864((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20B1CE5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1CE658(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char v27;
  uint64_t v28[27];
  _BYTE v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v28);
    sub_20B0D0A00((uint64_t)v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v28);
  sub_20B0D0A00((uint64_t)v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20AF4EA3C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0DD1A0((uint64_t)v28, a2, v4);
  LODWORD(v28[0]) = 1;
  sub_20B518854(a2[6], v28);
  sub_20B0DD290(a2 + 2);
  sub_20B1CEB30((uint64_t)a2, v3 + 200);
  v24 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2);
  v26 = *(_QWORD *)(v24 - 16) - result + *(_QWORD *)(v24 - 8);
  if (v26)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v26);
  a2[4] -= 16;
  return result;
}

void sub_20B1CEAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1CEB30(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *__p[2];
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  v8 = 0;
  sub_20B518BE4(*(_QWORD *)(a1 + 48), &v8);
  sub_20AEC833C(a2, *(char **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  for (i = v8; i; --i)
  {
    __p[0] = 0;
    __p[1] = 0;
    v7 = 0;
    v6 = 0;
    sub_20B518FF8(*(_QWORD *)(a1 + 48), __p);
    v9 = 0;
    sub_20B51852C(*(_QWORD *)(a1 + 48), &v9);
    v7 = v9;
    sub_20AFB1E60((uint64_t **)a2, (const void **)__p, (uint64_t)__p);
    if (SHIBYTE(v6) < 0)
      operator delete(__p[0]);
  }
}

void sub_20B1CEBF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1CEC0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *exception;
  char v31;
  uint64_t v32[27];
  _BYTE v33[8];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v32);
    sub_20B0D0A00((uint64_t)v33, v32);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v33);
        if (!v48)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v8 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v8;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v39;
    v10 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v11 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v11;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v12 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v12;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v15 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v46;
LABEL_45:
    *((_QWORD *)&v46 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v32);
  sub_20B0D0A00((uint64_t)v33, v32);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v17 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v17;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v39;
    v19 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v20 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v20;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v21 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v21;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v33);
  if (v48)
  {
LABEL_38:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v23 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v45 && SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  sub_20AF4EA3C((uint64_t)v32);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0DE788(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50A7A4(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v32[0] = 0;
  sub_20B454B2C(v27, v32);
  if (HIDWORD(v32[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  sub_20B1CF160(a2, v3 + 200);
  v28 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v28 - 8);
  v29 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(a2 + 48) = v28 - 8;
  *(_QWORD *)(a2 + 72) = v29 - 8;
}

void sub_20B1CF118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1CF160(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void **v11;
  void **v12;
  void *__p[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 16);
  v16 = 0;
  v15 = 0uLL;
  sub_20B1CB3FC((uint64_t)&v15, v4);
  v5 = a2 + 8;
  sub_20B1CB4EC(*(_QWORD **)a2, (_QWORD *)(a2 + 8), (uint64_t)&v15);
  *(_OWORD *)__p = v15;
  v14 = v16;
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "context_enable_state_changes";
  *(_QWORD *)(a1 + 96) = 28;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B1CF308((uint64_t *)a1, (char **)__p);
  *((_QWORD *)&v15 + 1) = 0;
  v16 = 0;
  *(_QWORD *)&v15 = (char *)&v15 + 8;
  sub_20B1CBC7C((_QWORD **)&v15, (__int128 *)__p[0], v7, (__int128 *)__p[1]);
  sub_20AEC833C(a2, *(char **)(a2 + 8));
  v8 = *((_QWORD *)&v15 + 1);
  *(_QWORD *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v8;
  v9 = v16;
  *(_QWORD *)(a2 + 16) = v16;
  if (v9)
  {
    *(_QWORD *)(v8 + 16) = v5;
    *(_QWORD *)&v15 = (char *)&v15 + 8;
    *((_QWORD *)&v15 + 1) = 0;
    v16 = 0;
    sub_20AEC833C((uint64_t)&v15, 0);
    v10 = (void **)__p[0];
    if (!__p[0])
      return;
  }
  else
  {
    *(_QWORD *)a2 = v5;
    sub_20AEC833C((uint64_t)&v15, (char *)v8);
    v10 = (void **)__p[0];
    if (!__p[0])
      return;
  }
  v11 = (void **)__p[1];
  v12 = v10;
  if (__p[1] != v10)
  {
    do
    {
      if (*((char *)v11 - 9) < 0)
        operator delete(*(v11 - 4));
      v11 -= 4;
    }
    while (v11 != v10);
    v12 = (void **)__p[0];
  }
  __p[1] = v10;
  operator delete(v12);
}

void sub_20B1CF2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
  sub_20AEC833C((uint64_t)&a13, a14);
  sub_20AF4BA50(&a9);
  _Unwind_Resume(a1);
}

void sub_20B1CF2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AF4BA50((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B1CF2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AF4BA50((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B1CF308(uint64_t *a1, char **a2)
{
  unsigned __int8 *v4;
  int v5;
  unint64_t v6;
  void ***v7;
  void **v8;
  char *v9;
  unint64_t v10;
  void **v11;
  void **v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  __int128 v21;
  void *v22;

  sub_20B50A7A4((uint64_t)a1);
  v4 = (unsigned __int8 *)a1[4];
  v5 = *v4;
  if (v5 == 2)
  {
    v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 8) - **((_QWORD **)v4 + 1)) >> 4;
  }
  else if (v5 == 1)
  {
    v6 = *(_QWORD *)(*((_QWORD *)v4 + 1) + 16);
  }
  else
  {
    if (!*v4)
    {
      v6 = 0;
      v7 = (void ***)(a2 + 1);
      v8 = (void **)a2[1];
      v9 = *a2;
      v10 = ((char *)v8 - *a2) >> 5;
      goto LABEL_11;
    }
    v6 = 1;
  }
  v7 = (void ***)(a2 + 1);
  v8 = (void **)a2[1];
  v9 = *a2;
  v10 = ((char *)v8 - *a2) >> 5;
  if (v6 > v10)
  {
    sub_20B1CE2D8((void **)a2, v6 - v10);
    v13 = a2;
    v11 = (void **)*a2;
    v12 = (void **)v13[1];
    if (v11 != v12)
      goto LABEL_22;
LABEL_20:
    v14 = a1[6];
    v15 = a1[9];
    goto LABEL_25;
  }
LABEL_11:
  if (v10 <= v6)
  {
    v12 = v8;
    v11 = (void **)*a2;
    if (v11 != v8)
      goto LABEL_22;
    goto LABEL_20;
  }
  v12 = (void **)&v9[32 * v6];
  while (v8 != v12)
  {
    if (*((char *)v8 - 9) < 0)
      operator delete(*(v8 - 4));
    v8 -= 4;
  }
  *v7 = v12;
  v11 = (void **)*a2;
  if (v11 == v12)
    goto LABEL_20;
  do
  {
LABEL_22:
    sub_20B50A7A4((uint64_t)a1);
    v20 = (void **)sub_20B50AA5C(a1);
    ++a1[14];
    v22 = 0;
    v21 = 0uLL;
    sub_20B45502C(v20, (uint64_t)&v21);
    if (*((char *)v11 + 23) < 0)
      operator delete(*v11);
    v16 = (char *)(v11 + 3);
    v17 = v21;
    v11[2] = v22;
    *(_OWORD *)v11 = v17;
    v11 += 4;
    *(_QWORD *)&v21 = v16;
    sub_20B1CF504(a1, (_BYTE **)&v21);
    v18 = a1[6];
    a1[4] = *(_QWORD *)(v18 - 8);
    v19 = a1[9];
    a1[14] = *(_QWORD *)(v19 - 8);
    a1[6] = v18 - 8;
    a1[9] = v19 - 8;
  }
  while (v11 != v12);
  v14 = v18 - 8;
  v15 = v19 - 8;
LABEL_25:
  a1[4] = *(_QWORD *)(v14 - 8);
  a1[14] = *(_QWORD *)(v15 - 8);
  a1[6] = v14 - 8;
  a1[9] = v15 - 8;
}

void sub_20B1CF4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1CF504(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_20B50AA5C(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_20B45502C(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20B214864((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20B1CF668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B1CF6F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  void *__p;
  uint64_t v32;
  char v33;
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)&__p);
    sub_20B0D0A00((uint64_t)v34, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v30, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)&__p);
  sub_20B0D0A00((uint64_t)v34, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v30, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20AF4EA3C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20B514490(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20B0E0A94((uint64_t)&__p, a2, v4, v25);
  else
    sub_20B0E0C84(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (v33 < 0)
      {
        if (v32 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_92:
          v29 = 0;
          if (v33 < 0)
            goto LABEL_95;
          goto LABEL_81;
        }
      }
      else if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_92;
      }
      v29 = 1;
      if (v33 < 0)
LABEL_95:
        operator delete(__p);
LABEL_81:
      if (*(_BYTE *)(a2 + 131))
        v28 = 0;
      else
        v28 = v29;
    }
    while ((v28 & 1) != 0);
  }
  LODWORD(__p) = 1;
  sub_20B514490(a2, &__p);
  sub_20B1CFD04(a2, v3 + 200);
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (v33 < 0)
      {
        if (v32 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_77:
          v27 = 0;
          if (v33 < 0)
            goto LABEL_80;
          goto LABEL_66;
        }
      }
      else if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_77;
      }
      v27 = 1;
      if (v33 < 0)
LABEL_80:
        operator delete(__p);
LABEL_66:
      if (*(_BYTE *)(a2 + 131))
        v26 = 0;
      else
        v26 = v27;
    }
    while ((v26 & 1) != 0);
  }
}

void sub_20B1CFCBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1CFD04(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  BOOL v5;
  void *__p[2];
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v9 = 0;
  sub_20B514DE0(a1, &v9);
  sub_20AEC833C(a2, *(char **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  for (i = v9; i; --i)
  {
    __p[0] = 0;
    __p[1] = 0;
    v8 = 0;
    v7 = 0;
    ++*(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(a1 + 128))
      v5 = *(_BYTE *)(a1 + 131) == 0;
    else
      v5 = 1;
    if (v5)
    {
      sub_20B51680C(a1, (uint64_t)&v10);
      if (SHIBYTE(v7) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v10;
      v7 = v11;
      ++*(_QWORD *)(a1 + 104);
    }
    else
    {
      *(_BYTE *)(a1 + 132) = 1;
    }
    LOBYTE(v10) = 0;
    sub_20B513B4C(a1, &v10);
    v8 = v10;
    sub_20AFB1E60((uint64_t **)a2, (const void **)__p, (uint64_t)__p);
    if (SHIBYTE(v7) < 0)
      operator delete(__p[0]);
  }
}

void sub_20B1CFE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1CFE38(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v25);
    sub_20B0D0A00((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v25);
  sub_20B0D0A00((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20AF4EA3C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0E2418((uint64_t)v25, a2, v4);
  sub_20B1D02AC((uint64_t)v25, a2, v3 + 200);
}

void sub_20B1D0264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1D02AC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_20B42BA30(a2);
  sub_20B1D0364(a2, a3);
  v9 = a2[12];
  v10 = a2[9];
  a2[6] = *(_QWORD *)(v9 - 8) + *(_QWORD *)(v10 - 8) + 8;
  a2[9] = v10 - 8;
  a2[12] = v9 - 8;
}

void sub_20B1D0350(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1D0364(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  std::logic_error *v12;
  std::logic_error *exception;
  void *__p[2];
  uint64_t v15;
  char v16;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  a1[6] = v2 + 8;
  v9 = (_QWORD *)(a2 + 8);
  sub_20AEC833C(a2, *(char **)(a2 + 8));
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 16) = 0;
  for (*v9 = 0; v8; --v8)
  {
    __p[0] = 0;
    __p[1] = 0;
    v16 = 0;
    v15 = 0;
    sub_20B42BD80(a1, (uint64_t)__p);
    v10 = a1[6];
    if (a1[7] <= v10)
    {
      v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v12, "Not enough data to read");
      v12->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
      __cxa_throw(v12, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
    }
    v11 = *(_BYTE *)(a1[3] + v10);
    a1[6] = v10 + 1;
    v16 = v11;
    sub_20AFB1E60((uint64_t **)a2, (const void **)__p, (uint64_t)__p);
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
  }
}

void sub_20B1D04B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1D04C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1D04F4(int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  __int128 *v7;
  int v8;
  unsigned int v9;

  v8 = 1;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
  if (*a1 < 1)
    goto LABEL_6;
  if (*a1 != 2)
    goto LABEL_5;
  v9 = 1;
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
  if (v9 >= 2)
  {
    v6 = v9;
    v7 = sub_20B1D05F0();
    sub_20B520518((std::string *)v7, v6, 1u);
  }
  if (*a1 <= 0)
  {
LABEL_6:
    sub_20B1D07EC(a2, a3);
  }
  else
  {
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_20B1D07EC(a2, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  }
}

__int128 *sub_20B1D05F0()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546353D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546353D8))
    return &xmmword_2546353C0;
  v2 = (char *)sub_20B1D06CC();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_2546353C0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_2546353D0 = *((_QWORD *)v2 + 2);
    xmmword_2546353C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546353C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546353D8);
  return &xmmword_2546353C0;
}

void sub_20B1D06B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546353D8);
  _Unwind_Resume(a1);
}

void *sub_20B1D06CC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2546353F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546353F8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::UpdateEnabledContextsSample]", qword_2546353E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546353E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546353F8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254635418);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254635418))
    return &unk_254635400;
  sub_20B531658((uint64_t)qword_2546353E0, (uint64_t)&unk_254635400);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254635400, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635418);
  return &unk_254635400;
}

void sub_20B1D07BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635418);
  _Unwind_Resume(a1);
}

void sub_20B1D07D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546353F8);
  _Unwind_Resume(a1);
}

void sub_20B1D07EC(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *__p[2];
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  v8 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v8);
  sub_20AEC833C(a2, *(char **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  for (i = v8; i; --i)
  {
    __p[0] = 0;
    __p[1] = 0;
    v7 = 0;
    v6 = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v9 = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 80))(a1, &v9);
    v7 = v9;
    sub_20AFB1E60((uint64_t **)a2, (const void **)__p, (uint64_t)__p);
    if (SHIBYTE(v6) < 0)
      operator delete(__p[0]);
  }
}

void sub_20B1D08C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_20B1D08DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = sub_20B1D2A3C((char *)a2, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5);
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      result = sub_20AEC60F4((_BYTE *)(a2 + 24), *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
      *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    }
    *(_BYTE *)(a2 + 48) = 1;
  }
  return result;
}

void sub_20B1D0968(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 48))
  {
    if (*(char *)(v1 + 47) < 0)
      operator delete(*v2);
  }
  sub_20AF4BA50((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1D0994(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  *(_QWORD *)a1 = off_24C40E658;
  sub_20AF4EA3C(a1 + 64);
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      return a1;
  }
  else
  {
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      return a1;
  }
  v3 = *(void ***)(a1 + 16);
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      if (*((char *)v3 - 9) < 0)
        operator delete(*(v3 - 4));
      v3 -= 4;
    }
    while (v3 != v2);
    v4 = *(void ***)(a1 + 8);
  }
  *(_QWORD *)(a1 + 16) = v2;
  operator delete(v4);
  return a1;
}

__n128 sub_20B1D0A38(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  uint64_t v7;
  unsigned __int128 *v8;
  unsigned __int128 v9;

  *(_QWORD *)a1 = off_24C40E658;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    v2 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v2;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  v3 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = v3;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    v4 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v4;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*(_BYTE *)(a2 + 136))
  {
    v5 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = v5;
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_BYTE *)(a1 + 136) = 1;
  }
  result = *(__n128 *)(a2 + 144);
  v7 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = v7;
  *(__n128 *)(a1 + 144) = result;
  *(_BYTE *)(a1 + 224) = 0;
  if (*(_BYTE *)(a2 + 224))
  {
    result = *(__n128 *)(a2 + 176);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(__n128 *)(a1 + 176) = result;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    v8 = (unsigned __int128 *)(a2 + 208);
    do
      v9 = __ldaxp(v8);
    while (__stlxp(v9, v8));
    *(_OWORD *)(a1 + 208) = v9;
    *(_BYTE *)(a1 + 224) = 1;
  }
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  if (*(_BYTE *)(a2 + 264))
  {
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    result = *(__n128 *)(a2 + 240);
    *(__n128 *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(a2 + 248) = 0;
    *(_QWORD *)(a2 + 256) = 0;
    *(_BYTE *)(a1 + 264) = 1;
  }
  return result;
}

void sub_20B1D0B9C(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  *(_QWORD *)a1 = off_24C40E658;
  sub_20AF4EA3C(a1 + 64);
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      goto LABEL_13;
  }
  else
  {
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      goto LABEL_13;
  }
  v3 = *(void ***)(a1 + 16);
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      if (*((char *)v3 - 9) < 0)
        operator delete(*(v3 - 4));
      v3 -= 4;
    }
    while (v3 != v2);
    v4 = *(void ***)(a1 + 8);
  }
  *(_QWORD *)(a1 + 16) = v2;
  operator delete(v4);
LABEL_13:
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B1D0C50(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20B1D0C58(uint64_t *a1, uint64_t *lpsrc)
{
  uint64_t result;
  unsigned __int8 ***v5[2];
  uint64_t *v6[2];

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40D5C8, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v6[0] = a1 + 1;
      v6[1] = a1 + 4;
      v5[0] = (unsigned __int8 ***)(result + 8);
      v5[1] = (unsigned __int8 ***)(result + 32);
      return sub_20B1D23AC(v6, v5);
    }
  }
  return result;
}

void sub_20B1D0CE8(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20B1D25A4();
  sub_20B1D0D9C(a1);
  sub_20AF4DD70(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 64, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20B1D0D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1D0D9C(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254635558);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254635558))
  {
    v4 = sub_20B1D21B0();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20AF4E53C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20AEC60F4(&xmmword_254635540, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254635550 = *(_QWORD *)(v9 - 8);
      xmmword_254635540 = v7;
    }
    sub_20AEC2E90(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635540, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635558);
  }
  return sub_20B1D288C(&xmmword_254635540, (_QWORD **)"{", (_QWORD **)(a1 + 8), (_QWORD **)"}");
}

void sub_20B1D0EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20AEC2E90(&a9);
  __cxa_guard_abort(&qword_254635558);
  _Unwind_Resume(a1);
}

void sub_20B1D0ECC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635558);
  _Unwind_Resume(a1);
}

void sub_20B1D0EE4(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.net");
  *(_DWORD *)(a1 + 24) = 4;
}

double sub_20B1D0F10@<D0>(const void *a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  sub_20B230B98(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_20B1D0F44(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  *(_QWORD *)a1 = off_24C40E658;
  sub_20AF4EA3C(a1 + 64);
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      return a1;
  }
  else
  {
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      return a1;
  }
  v3 = *(void ***)(a1 + 16);
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      if (*((char *)v3 - 9) < 0)
        operator delete(*(v3 - 4));
      v3 -= 4;
    }
    while (v3 != v2);
    v4 = *(void ***)(a1 + 8);
  }
  *(_QWORD *)(a1 + 16) = v2;
  operator delete(v4);
  return a1;
}

void sub_20B1D0FE8(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  *(_QWORD *)a1 = off_24C40E658;
  sub_20AF4EA3C(a1 + 64);
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      goto LABEL_13;
  }
  else
  {
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      goto LABEL_13;
  }
  v3 = *(void ***)(a1 + 16);
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      if (*((char *)v3 - 9) < 0)
        operator delete(*(v3 - 4));
      v3 -= 4;
    }
    while (v3 != v2);
    v4 = *(void ***)(a1 + 8);
  }
  *(_QWORD *)(a1 + 16) = v2;
  operator delete(v4);
LABEL_13:
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B1D109C(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20B1D1C4C();
  return sub_20B1D12A0(v2, (_QWORD **)"{", (_QWORD **)(a1 + 8), (_QWORD **)",", a1 + 64, (_QWORD **)"}");
}

uint64_t sub_20B1D10F4(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  _QWORD v4[2];
  _BYTE v5[2];

  v3 = 0;
  v4[0] = a1 + 8;
  v4[1] = a1 + 32;
  sub_20B1D14D4((uint64_t)v5, (uint64_t)v2, (uint64_t)v4);
  if (v3 == -1)
    sub_20AECFAB8();
  v4[0] = v5;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C40DC60[v3])(v4, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C40DC48[v3])(v4, v2);
  return result;
}

void sub_20B1D1198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C40DC48[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20B1D11D0(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20B1D11FC(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  *(_QWORD *)a1 = off_24C40E658;
  sub_20AF4EA3C(a1 + 64);
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      return a1;
  }
  else
  {
    v2 = *(void ***)(a1 + 8);
    if (!v2)
      return a1;
  }
  v3 = *(void ***)(a1 + 16);
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      if (*((char *)v3 - 9) < 0)
        operator delete(*(v3 - 4));
      v3 -= 4;
    }
    while (v3 != v2);
    v4 = *(void ***)(a1 + 8);
  }
  *(_QWORD *)(a1 + 16) = v2;
  operator delete(v4);
  return a1;
}

uint64_t sub_20B1D12A0(__int128 *a1, _QWORD **a2, _QWORD **a3, _QWORD **a4, uint64_t a5, _QWORD **a6)
{
  uint64_t result;
  char v12;
  __int128 __dst;
  uint64_t v14;
  int v15;
  __int128 *p_dst;
  _QWORD **v17;
  __int128 *v18;
  _QWORD **v19;
  _QWORD **v20;
  __int128 **p_p_dst;

  v15 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v14 = *((_QWORD *)a1 + 2);
  }
  v15 = 1;
  p_dst = &__dst;
  v17 = a2;
  v18 = &__dst;
  v19 = a2;
  v20 = a2;
  sub_20AED5C4C((uint64_t *)&v18, (uint64_t)&__dst);
  p_dst = (__int128 *)a3;
  v17 = a3 + 3;
  sub_20B1D14D4((uint64_t)&p_p_dst, (uint64_t)&__dst, (uint64_t)&p_dst);
  p_dst = &__dst;
  v17 = a4;
  v18 = &__dst;
  v19 = a4;
  v20 = a4;
  if (v15 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C40DCC0[v15])(&p_p_dst, &__dst);
  sub_20AF4D170((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v17 = a6;
  v18 = &__dst;
  v19 = a6;
  v20 = a6;
  if (v15 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C40DCC0[v15])(&p_p_dst, &__dst);
  if (v15 == -1)
    sub_20AECFAB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C40DC60[v15])(&p_dst, &__dst);
  if (v15 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C40DC48[v15])(&p_dst, &__dst);
  return result;
}

void sub_20B1D1444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1D145C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1D1470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1D1484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1D1498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1D14AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1D14C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1D14D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)();
  uint64_t v10;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = "{";
  v14 = a2;
  v15 = "{";
  v16 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_10;
  v17 = &v12;
  ((void (*)(uint64_t **))off_24C40DCC0[v3])(&v17);
  sub_20B1D163C((uint64_t)&v12, a2, *(uint64_t **)a3);
  v6 = *(_QWORD *)(a3 + 8);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_10;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C40DCC0[v7])(&v17, a2);
  if (*(_BYTE *)(v6 + 24))
  {
    v12 = a2;
    v13 = (const char *)v6;
    v14 = a2;
    v15 = (const char *)v6;
    v16 = (const char *)v6;
    v8 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v8 == -1)
      goto LABEL_10;
    v17 = &v12;
    v9 = off_24C40DCA8;
  }
  else
  {
    v12 = a2;
    v13 = "nullopt";
    v14 = a2;
    v15 = "nullopt";
    v16 = "nullopt";
    v8 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v8 == -1)
      goto LABEL_10;
    v17 = &v12;
    v9 = off_24C40DCD8;
  }
  ((void (*)(uint64_t **, uint64_t))v9[v8])(&v17, a2);
  v12 = a2;
  v13 = "}";
  v14 = a2;
  v15 = "}";
  v16 = "}";
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
LABEL_10:
    sub_20AECFAB8();
  v17 = &v12;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C40DCC0[v10])(&v17, a2);
}

uint64_t sub_20B1D163C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  const char *v21;
  const char *v22;
  uint64_t *v23;

  if (a3[1] - *a3 <= 31)
  {
    v18 = a2;
    v19 = "{}";
    v20 = (char *)a2;
    v21 = "{}";
    v22 = "{}";
    v4 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v4 != -1)
    {
      v23 = &v18;
      return ((uint64_t (*)(uint64_t **, uint64_t))off_24C40DDB0[v4])(&v23, a2);
    }
LABEL_15:
    sub_20AECFAB8();
  }
  v18 = a2;
  v19 = "{";
  v20 = (char *)a2;
  v21 = "{";
  v22 = "{";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_15;
  v23 = &v18;
  ((void (*)(uint64_t **, uint64_t))off_24C40DCC0[v6])(&v23, a2);
  v8 = *a3;
  v18 = a2;
  v19 = "{";
  v20 = (char *)a2;
  v21 = "{";
  v22 = "{";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    goto LABEL_15;
  v23 = &v18;
  ((void (*)(uint64_t **, uint64_t))off_24C40DCC0[v9])(&v23, a2);
  LOBYTE(v18) = 1;
  v19 = (const char *)a2;
  v20 = &v17;
  sub_20B1D188C(v8, (uint64_t)&v18);
  v18 = a2;
  v19 = "}";
  v20 = (char *)a2;
  v21 = "}";
  v22 = "}";
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
    goto LABEL_15;
  v23 = &v18;
  ((void (*)(uint64_t **, uint64_t))off_24C40DCC0[v10])(&v23, a2);
  v11 = a3[1];
  for (i = v8 + 32; i != v11; i += 32)
  {
    v18 = a2;
    v19 = ",";
    v20 = (char *)a2;
    v21 = ",";
    v22 = ",";
    v13 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v13 == -1)
      goto LABEL_15;
    v23 = &v18;
    ((void (*)(uint64_t **, uint64_t))off_24C40DCC0[v13])(&v23, a2);
    v18 = a2;
    v19 = "{";
    v20 = (char *)a2;
    v21 = "{";
    v22 = "{";
    v14 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v14 == -1)
      goto LABEL_15;
    v23 = &v18;
    ((void (*)(uint64_t **, uint64_t))off_24C40DCC0[v14])(&v23, a2);
    LOBYTE(v18) = 1;
    v19 = (const char *)a2;
    v20 = &v17;
    sub_20B1D188C(i, (uint64_t)&v18);
    v18 = a2;
    v19 = "}";
    v20 = (char *)a2;
    v21 = "}";
    v22 = "}";
    v15 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v15 == -1)
      goto LABEL_15;
    v23 = &v18;
    ((void (*)(uint64_t **, uint64_t))off_24C40DCC0[v15])(&v23, a2);
  }
  v18 = a2;
  v19 = "}";
  v20 = (char *)a2;
  v21 = "}";
  v22 = "}";
  v16 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v16 == -1)
    goto LABEL_15;
  v23 = &v18;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C40DCC0[v16])(&v23, a2);
}

void sub_20B1D188C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t *v12;

  if (!*(_BYTE *)a2)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v8 = ",";
    v9 = v7;
    v10 = ",";
    v11 = ",";
    v4 = *(unsigned int *)(v7 + 24);
    if ((_DWORD)v4 == -1)
      goto LABEL_9;
    v12 = &v7;
    ((void (*)(uint64_t **))off_24C40DCC0[v4])(&v12);
  }
  *(_BYTE *)a2 = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = (const char *)a1;
  v9 = v7;
  v10 = (const char *)a1;
  v11 = (const char *)a1;
  v5 = *(unsigned int *)(v7 + 24);
  if ((_DWORD)v5 == -1)
LABEL_9:
    sub_20AECFAB8();
  v12 = &v7;
  ((void (*)(uint64_t **))off_24C40DCA8[v5])(&v12);
  if (!*(_BYTE *)a2)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v8 = ",";
    v9 = v7;
    v10 = ",";
    v11 = ",";
    v6 = *(unsigned int *)(v7 + 24);
    if ((_DWORD)v6 != -1)
    {
      v12 = &v7;
      ((void (*)(uint64_t **))off_24C40DCC0[v6])(&v12);
      goto LABEL_8;
    }
    goto LABEL_9;
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  sub_20B1D1998((uint64_t)&v7, *(_QWORD *)(a2 + 8), (int *)(a1 + 24));
}

void sub_20B1D1998(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v21[0] = v5;
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)(&off_24C413220)[2 * *a3], (uint64_t)(&off_24C413220)[2 * *a3 + 1]);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 128);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20AECFAB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C40DC30[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20B1D1BF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B1D1C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1D1C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20B1D1C4C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635438);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635438))
    return &xmmword_254635420;
  v2 = sub_20B1D1D28();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254635420, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254635430 = v2->__r_.__value_.__r.__words[2];
    xmmword_254635420 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635420, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635438);
  return &xmmword_254635420;
}

void sub_20B1D1D10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635438);
  _Unwind_Resume(a1);
}

std::string *sub_20B1D1D28()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635458);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635458))
    return &stru_254635440;
  sub_20B1D1FCC((uint64_t)__p);
  sub_20B1D1E18((char *)__p, &stru_254635440);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254635440, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635458);
  return &stru_254635440;
}

void sub_20B1D1DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254635458);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254635458);
  _Unwind_Resume(a1);
}

void sub_20B1D1E18(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B1D21B0();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20AF4DB74();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 2uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20B1D1F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20AEC2E90((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B1D1FCC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546354D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546354D8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::UpdateEnabledLoggers>]", qword_2546354C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546354C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546354D8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2546354F8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2546354F8))
  {
    v5 = sub_20AED4780(qword_2546354C0, "<", 0);
    sub_20AED467C(qword_2546354C0, 0, v5, qword_2546354E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546354E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546354F8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254635518);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254635518))
  {
    sub_20B531658((uint64_t)qword_2546354E0, (uint64_t)&xmmword_254635500);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635500, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635518);
  }
  if (byte_254635517 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254635500, *((unint64_t *)&xmmword_254635500 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254635500;
    *(_QWORD *)(a1 + 16) = unk_254635510;
  }
}

void sub_20B1D2168(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635518);
  _Unwind_Resume(a1);
}

void sub_20B1D2180(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546354F8);
  _Unwind_Resume(a1);
}

void sub_20B1D2198(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546354D8);
  _Unwind_Resume(a1);
}

__int128 *sub_20B1D21B0()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635478);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635478))
    return &xmmword_254635460;
  v2 = (char *)sub_20B1D228C();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254635460, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254635470 = *((_QWORD *)v2 + 2);
    xmmword_254635460 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635460, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635478);
  return &xmmword_254635460;
}

void sub_20B1D2274(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635478);
  _Unwind_Resume(a1);
}

void *sub_20B1D228C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254635498);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254635498))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::UpdateEnabledLoggers]", qword_254635480);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635480, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635498);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546354B8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_2546354B8))
    return &unk_2546354A0;
  sub_20B531658((uint64_t)qword_254635480, (uint64_t)&unk_2546354A0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_2546354A0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546354B8);
  return &unk_2546354A0;
}

void sub_20B1D237C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546354B8);
  _Unwind_Resume(a1);
}

void sub_20B1D2394(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635498);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1D23AC(uint64_t **a1, unsigned __int8 ****a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 **v4;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t result;
  _BOOL4 v14;
  unsigned __int8 *v15;
  unsigned __int8 ***v16;
  BOOL v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 ***v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v29;

  v3 = **a1;
  v2 = (*a1)[1];
  v4 = **a2;
  if (v2 - v3 != (char *)(*a2)[1] - (char *)v4)
    return 0;
  for (; v3 != v2; v4 += 4)
  {
    v7 = *(unsigned __int8 *)(v3 + 23);
    if ((v7 & 0x80u) == 0)
      v8 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
    else
      v8 = *(unsigned __int8 **)(v3 + 8);
    v9 = (unsigned __int8 *)*((unsigned __int8 *)v4 + 23);
    v10 = (char)v9;
    if ((char)v9 < 0)
      v9 = v4[1];
    if (v8 != v9)
      return 0;
    if (v10 >= 0)
      v11 = (unsigned __int8 *)v4;
    else
      v11 = *v4;
    if ((v7 & 0x80) != 0)
    {
      v14 = memcmp(*(const void **)v3, v11, *(_QWORD *)(v3 + 8)) == 0;
      result = 0;
      if (!v14)
        return result;
    }
    else
    {
      if (*(_BYTE *)(v3 + 23))
      {
        v12 = 0;
        while (*(unsigned __int8 *)(v3 + v12) == v11[v12])
        {
          if (v7 == ++v12)
            goto LABEL_17;
        }
        return 0;
      }
LABEL_17:
      result = 0;
    }
    if (*(_DWORD *)(v3 + 24) != *((_DWORD *)v4 + 6))
      return result;
    v3 += 32;
  }
  v15 = (unsigned __int8 *)a1[1];
  v16 = a2[1];
  if (v15[24])
    v17 = *((_BYTE *)v16 + 24) == 0;
  else
    v17 = 1;
  if (v17)
    return (v15[24] != 0) == (*((_BYTE *)v16 + 24) != 0);
  v18 = v15[23];
  if ((v18 & 0x80u) == 0)
    v19 = (unsigned __int8 *)v15[23];
  else
    v19 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
  v20 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 23);
  v21 = (char)v20;
  if ((char)v20 < 0)
    v20 = (unsigned __int8 *)v16[1];
  if (v19 != v20)
    return 0;
  if (v21 >= 0)
    v22 = a2[1];
  else
    v22 = (unsigned __int8 ***)*v16;
  if ((v18 & 0x80) != 0)
    return memcmp(*(const void **)v15, v22, *((_QWORD *)v15 + 1)) == 0;
  if (!v15[23])
    return 1;
  v23 = v18 - 1;
  do
  {
    v25 = *v15++;
    v24 = v25;
    v27 = *(unsigned __int8 *)v22;
    v22 = (unsigned __int8 ***)((char *)v22 + 1);
    v26 = v27;
    v29 = v23-- != 0;
    result = v24 == v26;
  }
  while (v24 == v26 && v29);
  return result;
}

std::string *sub_20B1D25A4()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  __int128 *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void *v10[3];
  void *v11[2];
  char v12;
  void *__dst[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254635538);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254635538))
  {
    sub_20AEC0D64(v11, "viz::PackageData");
    v2 = sub_20B1D21B0();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v14 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v4 = sub_20B0BCB64();
    if (*((char *)v4 + 23) < 0)
    {
      sub_20AEC60F4(&v15, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      v16 = *((_QWORD *)v4 + 2);
      v15 = v5;
    }
    v6 = sub_20AF7063C();
    if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20AEC60F4(&v17, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
    }
    else
    {
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v18 = v6->__r_.__value_.__r.__words[2];
      v17 = v7;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v20 = 0x400000000000000;
    sub_20AEC7620(v10, (uint64_t)__dst, 4uLL);
    sub_20B53170C((char *)v11, (uint64_t *)v10, &stru_254635520, v8, v9);
    sub_20AEC2E90(v10);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v16) & 0x80000000) == 0)
          goto LABEL_16;
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete((void *)v17);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_22;
    }
LABEL_21:
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v12 & 0x80000000) == 0)
      {
LABEL_18:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254635520, &dword_20AEBB000);
        __cxa_guard_release(&qword_254635538);
        return &stru_254635520;
      }
LABEL_23:
      operator delete(v11[0]);
      goto LABEL_18;
    }
LABEL_22:
    operator delete(__dst[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_23;
  }
  return &stru_254635520;
}

void sub_20B1D27B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20AEC2E90(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
    {
LABEL_10:
      if (a18 < 0)
        operator delete(a13);
      __cxa_guard_abort(&qword_254635538);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_20B1D2864()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20B1D2840);
  }
}

uint64_t sub_20B1D288C(__int128 *a1, _QWORD **a2, _QWORD **a3, _QWORD **a4)
{
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 *v11;
  _QWORD **v12;
  __int128 *v13;
  _QWORD **v14;
  _QWORD **v15;
  __int128 **v16;

  v10 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20AEC60F4(&v8, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    v8 = *a1;
    v9 = *((_QWORD *)a1 + 2);
  }
  v10 = 1;
  v11 = &v8;
  v12 = a2;
  v13 = &v8;
  v14 = a2;
  v15 = a2;
  sub_20AED5C4C((uint64_t *)&v13, (uint64_t)&v8);
  v11 = (__int128 *)a3;
  v12 = a3 + 3;
  sub_20B1D14D4((uint64_t)&v16, (uint64_t)&v8, (uint64_t)&v11);
  v11 = &v8;
  v12 = a4;
  v13 = &v8;
  v14 = a4;
  v15 = a4;
  if (v10 == -1)
    sub_20AECFAB8();
  v16 = &v11;
  ((void (*)(__int128 ***, __int128 *))off_24C40DCC0[v10])(&v16, &v8);
  if (v10 == -1)
    sub_20AECFAB8();
  v11 = (__int128 *)&v16;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C40DC60[v10])(&v11, &v8);
  if (v10 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C40DC48[v10])(&v11, &v8);
  return result;
}

void sub_20B1D29D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1D29EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1D2A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1D2A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1D2A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20B1D2A3C(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    v5 = result;
    if (a4 >> 59)
      sub_20AEC60B8();
    result = (char *)operator new(32 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[32 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = &v8[v9];
        v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = (char *)sub_20AEC60F4(result, *(void **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v10;
          *((_QWORD *)result + 2) = *(_QWORD *)(v10 + 16);
        }
        *(_DWORD *)&v8[v9 + 24] = *(_DWORD *)(a2 + v9 + 24);
        v9 += 32;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20B1D2B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20AF4BD34(&a9);
  _Unwind_Resume(a1);
}

void sub_20B1D2B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 32)
  {
    if (*(char *)(v10 + v11 - 9) < 0)
      operator delete(*(void **)(v10 + v11 - 32));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_20AF4BD34(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1D2B68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;

  *(_QWORD *)a1 = off_24C40E658;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 32) = v4;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  sub_20AF4CAF4(a1 + 64, a3);
  *(_QWORD *)a1 = off_24C40E608;
  return a1;
}

void sub_20B1D2C14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v5;
  void **v6;
  void *v7;

  if (*(_BYTE *)(v1 + 56) && *(char *)(v1 + 55) < 0)
    operator delete(*v3);
  v5 = (void **)*v2;
  if (*v2)
  {
    v6 = *(void ***)(v1 + 16);
    v7 = *v2;
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v6 - 9) < 0)
          operator delete(*(v6 - 4));
        v6 -= 4;
      }
      while (v6 != v5);
      v7 = *v2;
    }
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1D2C80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 ***v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned __int8 **v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  unsigned __int8 **v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[6];

  v37[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v32);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v32);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v32);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20B0C0D90(v6, (uint64_t)v26);
  }
  else if (v7 == 1)
  {
    sub_20B0F9F8C(v6, (uint64_t)v26);
  }
  else
  {
    if (v7)
      sub_20AECFAB8();
    sub_20B0C6034(v6, (uint64_t)v26);
  }
  v19 = (uint64_t *)v32;
  v20 = &v33;
  v21 = &v34;
  v22 = &v35;
  v23 = &v36;
  v24 = (unsigned __int8 **)v37;
  v13 = (unsigned __int8 ***)v26;
  v14 = &v27;
  v15 = &v28;
  v16 = &v29;
  v17 = &v30;
  v18 = (unsigned __int8 **)&v31;
  if (sub_20B2178A8((uint64_t)&v25, &v19, &v13))
  {
    if (*((_BYTE *)v24 + 24) && *((_BYTE *)v18 + 24))
    {
      v8 = *v24;
      v9 = v24[1];
      v10 = *v18;
      if (v9 - *v24 == v18[1] - *v18)
      {
        if (v8 != v9)
        {
          while (sub_20B2167B8(v8, v10))
          {
            v8 += 96;
            v10 += 96;
            if (v8 == v9)
              goto LABEL_23;
          }
          goto LABEL_22;
        }
LABEL_23:
        v19 = (uint64_t *)(a1 + 200);
        v20 = (uint64_t *)(a1 + 224);
        v13 = (unsigned __int8 ***)(a2 + 200);
        v14 = (uint64_t *)(a2 + 224);
        v11 = sub_20B1D23AC(&v19, &v13);
        goto LABEL_24;
      }
    }
    else if ((*((_BYTE *)v24 + 24) != 0) == (*((_BYTE *)v18 + 24) != 0))
    {
      goto LABEL_23;
    }
  }
LABEL_22:
  v11 = 0;
LABEL_24:
  sub_20AF4EA3C((uint64_t)v26);
  sub_20AF4EA3C((uint64_t)v32);
  return v11;
}

void sub_20B1D2E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a23);
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B1D2EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B1D2EB8(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EB80, 0);
  if (v4)
  {
    sub_20B1D32C4(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EBC8, 0);
    if (v5)
    {
      sub_20B1D4060(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC50, 0);
      if (v6)
      {
        sub_20B1D4598(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC98, 0);
        if (v7)
        {
          sub_20B1D4D68(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C2C8)
            sub_20B1D5168(&v9, (uint64_t)a1);
          else
            sub_20B1D301C(&v8, a1);
        }
      }
    }
  }
}

void sub_20B1D301C(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FF5BC((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20B0FF5BC((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0FEF34((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20B0FEF34((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20B0D8514((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20B0D8514((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = v3 + 200;
  v13 = a2[2];
  v14 = 1;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20B1D562C((uint64_t)a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 1;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B1D562C((uint64_t)a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20B1D32C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FADD8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B50671C(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5086B4(a2, &v18);
      sub_20B0D1154(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FA468(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B50671C(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5086B4(a2, &v18);
  sub_20B1D35C4(a2, v3 + 200);
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B1D35C4(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  void *v5;
  void *v6;
  void **v7;
  void *__p;
  char v9;
  char v10;

  sub_20B1D3678((uint64_t)&v6, a2);
  sub_20B1D3774(a1, (uint64_t)&v6);
  if (v10 && v9 < 0)
    operator delete(__p);
  v3 = (void **)v6;
  if (v6)
  {
    v4 = v7;
    v5 = v6;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v3);
      v5 = v6;
    }
    v7 = v3;
    operator delete(v5);
  }
}

void sub_20B1D3664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0D0744((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1D3678(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_20B1D2A3C((char *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      v4 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v4;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_20B1D3708(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v4;
  void **v5;
  void **v6;

  if (*(_BYTE *)(v1 + 48) && *(char *)(v1 + 47) < 0)
    operator delete(*v2);
  v4 = *(void ***)v1;
  if (*(_QWORD *)v1)
  {
    v5 = *(void ***)(v1 + 8);
    v6 = *(void ***)v1;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 9) < 0)
          operator delete(*(v5 - 4));
        v5 -= 4;
      }
      while (v5 != v4);
      v6 = *(void ***)v1;
    }
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B1D3774(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  void **v7;
  void **v8;
  void *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  void **v13;
  __int128 v14;
  void **p_p;
  void *__p;
  void **v17;

  sub_20B1D3964((__int128 **)a2, (uint64_t)&__p);
  *(_QWORD *)&v14 = "logger_enable_state_changes";
  *((_QWORD *)&v14 + 1) = 27;
  p_p = &__p;
  sub_20B1D3E34(a1, (uint64_t)&v14);
  sub_20B1D3AB8((__int128 **)&__p, (uint64_t)&v14);
  v4 = *(__int128 **)a2;
  if (*(_QWORD *)a2)
  {
    v5 = *(__int128 **)(a2 + 8);
    v6 = *(__int128 **)a2;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 9) < 0)
          operator delete(*((void **)v5 - 4));
        v5 -= 2;
      }
      while (v5 != v4);
      v6 = *(__int128 **)a2;
    }
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v6);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = v14;
  v7 = (void **)__p;
  *(_QWORD *)(a2 + 16) = p_p;
  if (v7)
  {
    v8 = v17;
    v9 = v7;
    if (v17 != v7)
    {
      do
      {
        if (*((char *)v8 - 9) < 0)
          operator delete(*(v8 - 4));
        v8 -= 4;
      }
      while (v8 != v7);
      v9 = __p;
    }
    v17 = v7;
    operator delete(v9);
  }
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v10 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "target_context", *(_QWORD *)(a1 + 80) = 14, v10))
  {
    if (*(_BYTE *)(a2 + 48))
    {
LABEL_20:
      sub_20B508B7C(a1, a2 + 24);
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    if (*(_BYTE *)(a2 + 48))
      goto LABEL_20;
  }
  LOBYTE(__p) = 0;
  v17 = 0;
  v11 = (unsigned __int8 *)sub_20B506370(a1);
  v12 = *v11;
  *v11 = __p;
  LOBYTE(__p) = v12;
  v13 = (void **)*((_QWORD *)v11 + 1);
  *((_QWORD *)v11 + 1) = v17;
  v17 = v13;
  sub_20B4181DC(&v17, v12);
}

void sub_20B1D3924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  void ***v12;

  sub_20B4181DC(v12, a12);
  _Unwind_Resume(a1);
}

void sub_20B1D393C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AF4BA50((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B1D3950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AF4BA50((void **)va);
  _Unwind_Resume(a1);
}

double sub_20B1D3964@<D0>(__int128 **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  __int128 *i;
  __int128 *v6;
  __int128 v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  double result;
  __int128 v12;
  unint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;

  v4 = ((char *)a1[1] - (char *)*a1) >> 5;
  v13 = 0;
  v12 = 0uLL;
  sub_20B1D3C0C((uint64_t)&v12, v4);
  v6 = *a1;
  for (i = a1[1]; v6 != i; v6 += 2)
  {
    while (1)
    {
      while (1)
      {
        v8 = *((_DWORD *)v6 + 6);
        if (*((char *)v6 + 23) < 0)
        {
          sub_20AEC60F4(__p, *(void **)v6, *((_QWORD *)v6 + 1));
        }
        else
        {
          v9 = *v6;
          v15 = *((_QWORD *)v6 + 2);
          *(_OWORD *)__p = v9;
        }
        v16 = v8;
        v10 = *((_QWORD *)&v12 + 1);
        if (*((_QWORD *)&v12 + 1) >= v13)
          break;
        v7 = *(_OWORD *)__p;
        *(_QWORD *)(*((_QWORD *)&v12 + 1) + 16) = v15;
        *(_OWORD *)v10 = v7;
        __p[1] = 0;
        v15 = 0;
        __p[0] = 0;
        *(_DWORD *)(v10 + 24) = v16;
        *((_QWORD *)&v12 + 1) = v10 + 32;
        v6 += 2;
        if (v6 == i)
          goto LABEL_12;
      }
      *((_QWORD *)&v12 + 1) = sub_20B1D3CFC((void **)&v12, (uint64_t)__p);
      if (SHIBYTE(v15) < 0)
        break;
      v6 += 2;
      if (v6 == i)
        goto LABEL_12;
    }
    operator delete(__p[0]);
  }
LABEL_12:
  result = *(double *)&v12;
  *(_OWORD *)a2 = v12;
  *(_QWORD *)(a2 + 16) = v13;
  return result;
}

void sub_20B1D3A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20AF4BA50(&a9);
  _Unwind_Resume(a1);
}

void sub_20B1D3A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  sub_20AF4BA50((void **)&a9);
  _Unwind_Resume(a1);
}

double sub_20B1D3AB8@<D0>(__int128 **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  __int128 *i;
  __int128 *v6;
  __int128 v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  double result;
  __int128 v12;
  unint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;

  v4 = ((char *)a1[1] - (char *)*a1) >> 5;
  v13 = 0;
  v12 = 0uLL;
  sub_20B1D3C0C((uint64_t)&v12, v4);
  v6 = *a1;
  for (i = a1[1]; v6 != i; v6 += 2)
  {
    while (1)
    {
      while (1)
      {
        v8 = *((_DWORD *)v6 + 6);
        if (*((char *)v6 + 23) < 0)
        {
          sub_20AEC60F4(__p, *(void **)v6, *((_QWORD *)v6 + 1));
        }
        else
        {
          v9 = *v6;
          v15 = *((_QWORD *)v6 + 2);
          *(_OWORD *)__p = v9;
        }
        v16 = v8;
        v10 = *((_QWORD *)&v12 + 1);
        if (*((_QWORD *)&v12 + 1) >= v13)
          break;
        v7 = *(_OWORD *)__p;
        *(_QWORD *)(*((_QWORD *)&v12 + 1) + 16) = v15;
        *(_OWORD *)v10 = v7;
        __p[1] = 0;
        v15 = 0;
        __p[0] = 0;
        *(_DWORD *)(v10 + 24) = v16;
        *((_QWORD *)&v12 + 1) = v10 + 32;
        v6 += 2;
        if (v6 == i)
          goto LABEL_12;
      }
      *((_QWORD *)&v12 + 1) = sub_20B1D3CFC((void **)&v12, (uint64_t)__p);
      if (SHIBYTE(v15) < 0)
        break;
      v6 += 2;
      if (v6 == i)
        goto LABEL_12;
    }
    operator delete(__p[0]);
  }
LABEL_12:
  result = *(double *)&v12;
  *(_OWORD *)a2 = v12;
  *(_QWORD *)(a2 + 16) = v13;
  return result;
}

void sub_20B1D3BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20AF4BA50(&a9);
  _Unwind_Resume(a1);
}

void sub_20B1D3BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  sub_20AF4BA50((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1D3C0C(uint64_t a1, unint64_t a2)
{
  void **v2;
  void **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  void **v11;

  v2 = *(void ***)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    if (a2 >> 59)
      sub_20AEC60B8();
    v4 = *(void ***)(a1 + 8);
    v5 = 32 * a2;
    v6 = (char *)operator new(32 * a2);
    v7 = &v6[v5];
    v8 = &v6[(char *)v4 - (char *)v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[(char *)v4 - (char *)v2];
      do
      {
        v10 = *((_OWORD *)v4 - 2);
        *((_QWORD *)v9 - 2) = *(v4 - 2);
        *((_OWORD *)v9 - 2) = v10;
        *(v4 - 3) = 0;
        *(v4 - 2) = 0;
        *(v4 - 4) = 0;
        *((_DWORD *)v9 - 2) = *((_DWORD *)v4 - 2);
        v9 -= 32;
        v4 -= 4;
      }
      while (v4 != v2);
      v2 = *(void ***)a1;
      v11 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v11 != v2)
      {
        if (*((char *)v11 - 9) < 0)
          operator delete(*(v11 - 4));
        v11 -= 4;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

char *sub_20B1D3CFC(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void **v14;
  void **v15;
  __int128 v16;
  void **v17;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_20AEC60B8();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v4)
    v4 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 59)
    sub_20AEC60CC();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v3];
  v12 = &v10[v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
  v13 = v11 + 32;
  v14 = (void **)*a1;
  v15 = (void **)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 2);
      *((_QWORD *)v11 - 2) = *(v15 - 2);
      *((_OWORD *)v11 - 2) = v16;
      *(v15 - 3) = 0;
      *(v15 - 2) = 0;
      *(v15 - 4) = 0;
      *((_DWORD *)v11 - 2) = *((_DWORD *)v15 - 2);
      v11 -= 32;
      v15 -= 4;
    }
    while (v15 != v14);
    v15 = (void **)*a1;
    v17 = (void **)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    while (v17 != v15)
    {
      if (*((char *)v17 - 9) < 0)
        operator delete(*(v17 - 4));
      v17 -= 4;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_20B1D3E34(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  int *v12;

  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v3 = *(unsigned __int8 *)(a1 + 88), *(_OWORD *)(a1 + 72) = *(_OWORD *)a2, v3))
  {
    v4 = *(uint64_t **)(a2 + 16);
    sub_20B50671C(a1);
    v5 = *v4;
    v6 = v4[1];
    if (v5 != v6)
    {
      do
      {
LABEL_6:
        sub_20B50671C(a1);
        sub_20B508B7C(a1, v5);
        v11 = *(_DWORD *)(v5 + 24);
        v12 = &v11;
        sub_20B1D3F58(a1, &v12);
        v7 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 - 8);
        *(_QWORD *)(a1 + 56) = v7 - 8;
        if (*(_BYTE *)(a1 + 88))
          *(_BYTE *)(a1 + 88) = 0;
        v5 += 32;
      }
      while (v5 != v6);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 - 16);
      *(_QWORD *)(a1 + 56) = v7 - 16;
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    v8 = *(uint64_t **)(a2 + 16);
    sub_20B50671C(a1);
    v5 = *v8;
    v6 = v8[1];
    if (v5 != v6)
      goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (v10)
    *(_BYTE *)(a1 + 88) = 0;
}

void sub_20B1D3F58(uint64_t a1, int **a2)
{
  int *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20B1D1998((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
  sub_20B508B7C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20B1D401C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1D4038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1D404C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1D4060(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20B51E95C(&v20, 4u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v7 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBED4(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20B51E95C(&v20, 5u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v8 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBDB8(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20B51E95C(&v20, 6u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v6 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0D3CE4(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20B51E95C(&v20, 1u);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v20, v14 + 8);
  }
  sub_20B51956C(*(_QWORD *)(a2 + 24));
  sub_20B1D42E0(a2, v3 + 200);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20B1D42E0(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  void *v5;
  void *v6;
  void **v7;
  void *__p;
  char v9;
  char v10;

  sub_20B1D3678((uint64_t)&v6, a2);
  sub_20B1D4394(a1, (uint64_t)&v6);
  if (v10 && v9 < 0)
    operator delete(__p);
  v3 = (void **)v6;
  if (v6)
  {
    v4 = v7;
    v5 = v6;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v3);
      v5 = v6;
    }
    v7 = v3;
    operator delete(v5);
  }
}

void sub_20B1D4380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0D0744((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20B1D4394(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t *v18;

  v4 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5;
  v5 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v5 + 40))
  {
    sub_20B51F644();
    v6 = *(_QWORD *)a2;
    v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    if (!v7)
      goto LABEL_12;
    goto LABEL_5;
  }
  v18 = (uint64_t *)(v5 + 16);
  sub_20B51F33C(&v18, v4);
  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
LABEL_5:
    v8 = 32 * (v7 >> 5);
    while (1)
    {
      v9 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v9 + 40))
      {
        v18 = (uint64_t *)(v9 + 16);
        sub_20B51FA2C((uint64_t)&v17, &v18, (const void **)v6);
        v10 = *(_DWORD *)(v6 + 24);
        v11 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v11 + 40))
          goto LABEL_11;
LABEL_6:
        v18 = (uint64_t *)(v11 + 16);
        sub_20B51E444(&v18, v10);
        v6 += 32;
        v8 -= 32;
        if (!v8)
          break;
      }
      else
      {
        sub_20B51FE64((uint64_t)&v18, v9 + 8, v6);
        v10 = *(_DWORD *)(v6 + 24);
        v11 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v11 + 40))
          goto LABEL_6;
LABEL_11:
        sub_20B51E860();
        v6 += 32;
        v8 -= 32;
        if (!v8)
          break;
      }
    }
  }
LABEL_12:
  if (*(_BYTE *)(a2 + 48))
  {
    v12 = (const void **)(a2 + 24);
    v13 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v13 + 40))
    {
      v18 = (uint64_t *)(v13 + 16);
      sub_20B51DD74(&v18, 1);
      v14 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v14 + 40))
      {
LABEL_15:
        v18 = (uint64_t *)(v14 + 16);
        return (char *)sub_20B51FA2C((uint64_t)&v17, &v18, v12);
      }
    }
    else
    {
      LOBYTE(v18) = 1;
      std::ostream::write();
      v14 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v14 + 40))
        goto LABEL_15;
    }
    return (char *)sub_20B51FE64((uint64_t)&v18, v14 + 8, (uint64_t)v12);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v16 + 40))
    {
      v18 = (uint64_t *)(v16 + 16);
      return sub_20B51DD74(&v18, 0);
    }
    else
    {
      LOBYTE(v18) = 0;
      return (char *)std::ostream::write();
    }
  }
}

void sub_20B1D4598(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FCF30(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B505FB0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5069D0(a2, &v18);
      sub_20B0D4F88(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FC7EC(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B505FB0(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5069D0(a2, &v18);
  sub_20B1D4898(a2, v3 + 200);
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B1D4898(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  void *v5;
  void *v6;
  void **v7;
  void *__p;
  char v9;
  char v10;

  sub_20B1D3678((uint64_t)&v6, a2);
  sub_20B1D494C(a1, (uint64_t)&v6);
  if (v10 && v9 < 0)
    operator delete(__p);
  v3 = (void **)v6;
  if (v6)
  {
    v4 = v7;
    v5 = v6;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v3);
      v5 = v6;
    }
    v7 = v3;
    operator delete(v5);
  }
}

void sub_20B1D4938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0D0744((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1D494C(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  void **p_p;
  void *__p;
  void *v17;

  sub_20B1D3964((__int128 **)a2, (uint64_t)&__p);
  *(_QWORD *)&v14 = "logger_enable_state_changes";
  *((_QWORD *)&v14 + 1) = 27;
  p_p = &__p;
  sub_20B1D4B3C(a1, (uint64_t)&v14);
  sub_20B1D3AB8((__int128 **)&__p, (uint64_t)&v14);
  v4 = *(__int128 **)a2;
  if (*(_QWORD *)a2)
  {
    v5 = *(__int128 **)(a2 + 8);
    v6 = *(__int128 **)a2;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 9) < 0)
          operator delete(*((void **)v5 - 4));
        v5 -= 2;
      }
      while (v5 != v4);
      v6 = *(__int128 **)a2;
    }
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v6);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = v14;
  v7 = __p;
  *(_QWORD *)(a2 + 16) = p_p;
  if (v7)
  {
    v8 = (uint64_t)v17;
    v9 = v7;
    if (v17 != v7)
    {
      do
      {
        if (*(char *)(v8 - 9) < 0)
          operator delete(*(void **)(v8 - 32));
        v8 -= 32;
      }
      while ((void *)v8 != v7);
      v9 = __p;
    }
    v17 = v7;
    operator delete(v9);
  }
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v10 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "target_context", *(_QWORD *)(a1 + 80) = 14, v10))
  {
    if (*(_BYTE *)(a2 + 48))
    {
LABEL_20:
      sub_20B506E98(a1, a2 + 24);
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    if (*(_BYTE *)(a2 + 48))
      goto LABEL_20;
  }
  LOBYTE(__p) = 0;
  v17 = 0;
  v11 = (unsigned __int8 *)sub_20B505B08(a1);
  v12 = *v11;
  *v11 = __p;
  LOBYTE(__p) = v12;
  v13 = *((_QWORD *)v11 + 1);
  *((_QWORD *)v11 + 1) = v17;
  v17 = (void *)v13;
  sub_20B416E08((uint64_t *)&v17, v12);
}

void sub_20B1D4AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t *v12;

  sub_20B416E08(v12, a12);
  _Unwind_Resume(a1);
}

void sub_20B1D4B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AF4BA50((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B1D4B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AF4BA50((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B1D4B3C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  int *v12;

  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v3 = *(unsigned __int8 *)(a1 + 88), *(_OWORD *)(a1 + 72) = *(_OWORD *)a2, v3))
  {
    v4 = *(uint64_t **)(a2 + 16);
    sub_20B505FB0(a1);
    v5 = *v4;
    v6 = v4[1];
    if (v5 != v6)
    {
      do
      {
LABEL_6:
        sub_20B505FB0(a1);
        sub_20B506E98(a1, v5);
        v11 = *(_DWORD *)(v5 + 24);
        v12 = &v11;
        sub_20B1D4C60(a1, &v12);
        v7 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 - 8);
        *(_QWORD *)(a1 + 56) = v7 - 8;
        if (*(_BYTE *)(a1 + 88))
          *(_BYTE *)(a1 + 88) = 0;
        v5 += 32;
      }
      while (v5 != v6);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 - 16);
      *(_QWORD *)(a1 + 56) = v7 - 16;
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    v8 = *(uint64_t **)(a2 + 16);
    sub_20B505FB0(a1);
    v5 = *v8;
    v6 = v8[1];
    if (v5 != v6)
      goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (v10)
    *(_BYTE *)(a1 + 88) = 0;
}

void sub_20B1D4C60(uint64_t a1, int **a2)
{
  int *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20B1D1998((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
  sub_20B506E98(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20B1D4D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1D4D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1D4D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1D4D68(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FE288(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20AEC01D0(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20B0D66C4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FDCE4(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20AEC01D0(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20B1D4F80(a2, v3 + 200);
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20AEC01D0(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20B1D4F80(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  void *v5;
  void *v6;
  void **v7;
  void *__p;
  char v9;
  char v10;

  sub_20B1D3678((uint64_t)&v6, a2);
  sub_20B1D5034(a1, (uint64_t)&v6);
  if (v10 && v9 < 0)
    operator delete(__p);
  v3 = (void **)v6;
  if (v6)
  {
    v4 = v7;
    v5 = v6;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v3);
      v5 = v6;
    }
    v7 = v3;
    operator delete(v5);
  }
}

void sub_20B1D5020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0D0744((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1D5034(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  char v10;
  char v11;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    v10 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v4, (uint64_t)&v10, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 != *(_QWORD *)a2)
  {
    do
    {
      sub_20B512F6C(a1, v5);
      if (*(_QWORD *)(a1 + 40))
      {
        v7 = *(_QWORD **)(a1 + 24);
        v11 = *(_BYTE *)(a1 + 32);
        sub_20AEC01D0(v7, (uint64_t)&v11, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a1 + 40);
      v5 += 32;
    }
    while (v5 != v6);
  }
  if (*(_BYTE *)(a2 + 48))
  {
    v9 = 1;
    sub_20B512EB0(a1, &v9);
    sub_20B512F6C(a1, a2 + 24);
  }
  else
  {
    v8 = 0;
    sub_20B512EB0(a1, &v8);
  }
}

void sub_20B1D5168(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE9C0(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE8A4(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    __src = 6;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_20B42B554((_QWORD *)a2);
    sub_20B0D757C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 1;
  sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_20B42B554((_QWORD *)a2);
  sub_20B1D5320(a2, v3 + 200);
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20B1D5320(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  void *v5;
  void *v6;
  void **v7;
  void *__p;
  char v9;
  char v10;

  sub_20B1D3678((uint64_t)&v6, a2);
  sub_20B1D53D4(a1, (uint64_t *)&v6);
  if (v10 && v9 < 0)
    operator delete(__p);
  v3 = (void **)v6;
  if (v6)
  {
    v4 = v7;
    v5 = v6;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v3);
      v5 = v6;
    }
    v7 = v3;
    operator delete(v5);
  }
}

void sub_20B1D53C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0D0744((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20B1D53D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  int64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;
  uint64_t v13;
  char *p_src;
  int64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int64_t v19;
  _BOOL4 v20;
  uint64_t v22;
  uint64_t __src;
  uint64_t v24;

  v22 = (a2[1] - *a2) >> 5;
  v4 = a1 + 24;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&v22, (char *)&__src, 8);
  v5 = *a2;
  v6 = a2[1] - *a2;
  if (v6)
  {
    for (i = 32 * (v6 >> 5); i; i -= 32)
    {
      v10 = *(unsigned __int8 *)(v5 + 23);
      if ((v10 & 0x80u) != 0)
        v10 = *(_QWORD *)(v5 + 8);
      __src = v10;
      sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v24, 8);
      if (*(char *)(v5 + 23) < 0)
      {
        v9 = *(char **)v5;
        v8 = *(_QWORD *)(v5 + 8);
        if (*(_QWORD *)v5)
          v11 = 1;
        else
          v11 = v8 == 0;
        if (!v11)
        {
          v12 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360);
          v9 = 0;
          if (v12)
            goto LABEL_13;
        }
      }
      else
      {
        v8 = *(unsigned __int8 *)(v5 + 23);
        v9 = (char *)v5;
      }
      sub_20B42DB24(v4, *(char **)(a1 + 32), v9, &v9[v8], v8);
      LODWORD(__src) = *(_DWORD *)(v5 + 24);
      sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
      v5 += 32;
    }
  }
  if (*((_BYTE *)a2 + 48))
  {
    LOBYTE(__src) = 1;
    sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    v13 = *((unsigned __int8 *)a2 + 47);
    if ((v13 & 0x80u) != 0)
      v13 = a2[4];
    __src = v13;
    sub_20B42DB24(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v24, 8);
    if (*((char *)a2 + 47) < 0)
    {
      p_src = (char *)a2[3];
      v15 = a2[4];
      if (!p_src)
      {
        if (v15)
        {
          v20 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360);
          p_src = 0;
          if (v20)
LABEL_13:
            abort();
        }
      }
    }
    else
    {
      p_src = (char *)(a2 + 3);
      v15 = *((unsigned __int8 *)a2 + 47);
    }
    v16 = *(char **)(a1 + 32);
    v17 = &p_src[v15];
    v18 = v4;
    v19 = v15;
  }
  else
  {
    LOBYTE(__src) = 0;
    v16 = *(char **)(a1 + 32);
    v17 = (char *)&__src + 1;
    p_src = (char *)&__src;
    v18 = v4;
    v19 = 1;
  }
  return sub_20B42DB24(v18, v16, p_src, v17, v19);
}

void sub_20B1D562C(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void *v7;
  void *v8;
  void **v9;
  void *__p;
  char v11;
  char v12;
  uint64_t v13;
  int v14;

  sub_20B1D3678((uint64_t)&v8, a2);
  v13 = ((char *)v9 - (_BYTE *)v8) >> 5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v13);
  v3 = (void **)v8;
  v4 = v9;
  if (v9 != v8)
  {
    do
    {
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, v3);
      v14 = *((_DWORD *)v3 + 6);
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 56))(a1, &v14);
      v3 += 4;
    }
    while (v3 != v4);
  }
  if (v12)
  {
    LOBYTE(v13) = 1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v13);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, &__p);
  }
  else
  {
    LOBYTE(v13) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v13);
  }
  if (v12 && v11 < 0)
    operator delete(__p);
  v5 = (void **)v8;
  if (v8)
  {
    v6 = v9;
    v7 = v8;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v6 - 9) < 0)
          operator delete(*(v6 - 4));
        v6 -= 4;
      }
      while (v6 != v5);
      v7 = v8;
    }
    v9 = v5;
    operator delete(v7);
  }
}

void sub_20B1D5784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0D0744((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1D5798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0D0744((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1D57AC(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED20, 0);
  if (v4)
  {
    sub_20B1D5DE8(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED58, 0);
    if (v5)
    {
      sub_20B1D6A38(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EDE0, 0);
      if (v6)
      {
        sub_20B1D70A4(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EE18, 0);
        if (v7)
        {
          sub_20B1D7B50(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C508)
            sub_20B1D83D4(&v9, a1);
          else
            sub_20B1D5910(&v8, (uint64_t *)a1);
        }
      }
    }
  }
}

void sub_20B1D5910(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27[27];
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v27);
    sub_20B0D0A00((uint64_t)&v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)&v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v27);
  sub_20B0D0A00((uint64_t)&v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)&v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20AF4EA3C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *a2;
  v27[0] = a2[1];
  v25 = v27[0];
  v28 = 6;
  (*(void (**)(uint64_t *, unsigned int *))(v24 + 104))(a2, &v28);
  if (v25 < 1)
  {
    if (v28 < 3)
      sub_20B0E41CC((uint64_t)&v28, (uint64_t)a2, v4, v28);
    else
      sub_20B0E4440((uint64_t)a2, v4, v28);
  }
  else
  {
    sub_20B0E3BD4((int *)v27, (uint64_t)a2, v4, v28);
  }
  v27[0] = a2[1];
  sub_20B1D8A88((int *)v27, (uint64_t)a2, v3 + 200);
}

void sub_20B1D5DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1D5DE8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *exception;
  char v31;
  uint64_t v32[27];
  _BYTE v33[8];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v32);
    sub_20B0D0A00((uint64_t)v33, v32);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v33);
        if (!v48)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v8 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v8;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v39;
    v10 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v11 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v11;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v12 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v12;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v15 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v46;
LABEL_45:
    *((_QWORD *)&v46 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v32);
  sub_20B0D0A00((uint64_t)v33, v32);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v17 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v17;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v39;
    v19 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v20 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v20;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v21 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v21;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v33);
  if (v48)
  {
LABEL_38:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v23 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v45 && SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  sub_20AF4EA3C((uint64_t)v32);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0D978C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50AC94(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v32[0] = 0;
  sub_20B4552C4(v27, v32);
  if (HIDWORD(v32[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  sub_20B1D633C(a2, v3 + 200);
  v28 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v28 - 8);
  v29 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(a2 + 48) = v28 - 8;
  *(_QWORD *)(a2 + 72) = v29 - 8;
}

void sub_20B1D62F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1D633C(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  void **v8;
  void **v9;
  void *v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  void *__p;
  void **v15;

  sub_20B1D3964((__int128 **)a2, (uint64_t)&__p);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "logger_enable_state_changes";
  *(_QWORD *)(a1 + 96) = 27;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B1D64A8((uint64_t *)a1, (char **)&__p);
  sub_20B1D3AB8((__int128 **)&__p, (uint64_t)&v12);
  v5 = *(__int128 **)a2;
  if (*(_QWORD *)a2)
  {
    v6 = *(__int128 **)(a2 + 8);
    v7 = *(__int128 **)a2;
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v6 - 9) < 0)
          operator delete(*((void **)v6 - 4));
        v6 -= 2;
      }
      while (v6 != v5);
      v7 = *(__int128 **)a2;
    }
    *(_QWORD *)(a2 + 8) = v5;
    operator delete(v7);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = v12;
  v8 = (void **)__p;
  *(_QWORD *)(a2 + 16) = v13;
  if (v8)
  {
    v9 = v15;
    v10 = v8;
    if (v15 != v8)
    {
      do
      {
        if (*((char *)v9 - 9) < 0)
          operator delete(*(v9 - 4));
        v9 -= 4;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v15 = v8;
    operator delete(v10);
  }
  v11 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "target_context";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v11)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B0DA2A0((uint64_t *)a1, a2 + 24);
}

void sub_20B1D6480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AF4BA50((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B1D6494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AF4BA50((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B1D64A8(uint64_t *a1, char **a2)
{
  unsigned __int8 *v4;
  int v5;
  unint64_t v6;
  void ***v7;
  void **v8;
  char *v9;
  unint64_t v10;
  void **v11;
  void **v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  __int128 v21;
  void *v22;

  sub_20B50AC94((uint64_t)a1);
  v4 = (unsigned __int8 *)a1[4];
  v5 = *v4;
  if (v5 == 2)
  {
    v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 8) - **((_QWORD **)v4 + 1)) >> 4;
  }
  else if (v5 == 1)
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 8) - **((_QWORD **)v4 + 1)) >> 3);
  }
  else
  {
    if (!*v4)
    {
      v6 = 0;
      v7 = (void ***)(a2 + 1);
      v8 = (void **)a2[1];
      v9 = *a2;
      v10 = ((char *)v8 - *a2) >> 5;
      goto LABEL_11;
    }
    v6 = 1;
  }
  v7 = (void ***)(a2 + 1);
  v8 = (void **)a2[1];
  v9 = *a2;
  v10 = ((char *)v8 - *a2) >> 5;
  if (v6 > v10)
  {
    sub_20B1D66B8((void **)a2, v6 - v10);
    v13 = a2;
    v11 = (void **)*a2;
    v12 = (void **)v13[1];
    if (v11 != v12)
      goto LABEL_22;
LABEL_20:
    v14 = a1[6];
    v15 = a1[9];
    goto LABEL_25;
  }
LABEL_11:
  if (v10 <= v6)
  {
    v12 = v8;
    v11 = (void **)*a2;
    if (v11 != v8)
      goto LABEL_22;
    goto LABEL_20;
  }
  v12 = (void **)&v9[32 * v6];
  while (v8 != v12)
  {
    if (*((char *)v8 - 9) < 0)
      operator delete(*(v8 - 4));
    v8 -= 4;
  }
  *v7 = v12;
  v11 = (void **)*a2;
  if (v11 == v12)
    goto LABEL_20;
  do
  {
LABEL_22:
    sub_20B50AC94((uint64_t)a1);
    v20 = (void **)sub_20B50AF4C(a1);
    ++a1[14];
    v22 = 0;
    v21 = 0uLL;
    sub_20B4557C4(v20, (uint64_t)&v21);
    if (*((char *)v11 + 23) < 0)
      operator delete(*v11);
    v16 = (char *)(v11 + 3);
    v17 = v21;
    v11[2] = v22;
    *(_OWORD *)v11 = v17;
    v11 += 4;
    *(_QWORD *)&v21 = v16;
    sub_20B1D6848(a1, (_DWORD **)&v21);
    v18 = a1[6];
    a1[4] = *(_QWORD *)(v18 - 8);
    v19 = a1[9];
    a1[14] = *(_QWORD *)(v19 - 8);
    a1[6] = v18 - 8;
    a1[9] = v19 - 8;
  }
  while (v11 != v12);
  v14 = v18 - 8;
  v15 = v19 - 8;
LABEL_25:
  a1[4] = *(_QWORD *)(v14 - 8);
  a1[14] = *(_QWORD *)(v15 - 8);
  a1[6] = v14 - 8;
  a1[9] = v15 - 8;
}

void sub_20B1D669C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1D66B8(void **a1, unint64_t a2)
{
  _BYTE *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void **v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  void **v18;
  __int128 v19;
  void **v20;

  v5 = (void **)a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - (_BYTE *)v5) >> 5)
  {
    if (a2)
    {
      v11 = 32 * a2;
      v12 = &v5[4 * a2];
      do
      {
        *v5 = 0;
        v5[1] = 0;
        *((_DWORD *)v5 + 6) = 0;
        v5[2] = 0;
        v5 += 4;
        v11 -= 32;
      }
      while (v11);
      v5 = v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = ((char *)v5 - (_BYTE *)*a1) >> 5;
    if ((v6 + a2) >> 59)
      sub_20AEC60B8();
    v7 = v4 - (_BYTE *)*a1;
    v8 = v7 >> 4;
    if (v7 >> 4 <= v6 + a2)
      v8 = v6 + a2;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
      v9 = 0x7FFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v9)
    {
      if (v9 >> 59)
        sub_20AEC60CC();
      v10 = (char *)operator new(32 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = &v10[32 * v6];
    v14 = 32 * a2;
    v15 = &v13[32 * a2];
    v16 = v13;
    do
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_DWORD *)v16 + 6) = 0;
      *((_QWORD *)v16 + 2) = 0;
      v16 += 32;
      v14 -= 32;
    }
    while (v14);
    v17 = &v10[32 * v9];
    v18 = (void **)*a1;
    if (v5 == *a1)
    {
      *a1 = v13;
      a1[1] = v15;
      a1[2] = v17;
    }
    else
    {
      do
      {
        v19 = *((_OWORD *)v5 - 2);
        *((_QWORD *)v13 - 2) = *(v5 - 2);
        *((_OWORD *)v13 - 2) = v19;
        *(v5 - 3) = 0;
        *(v5 - 2) = 0;
        *(v5 - 4) = 0;
        *((_DWORD *)v13 - 2) = *((_DWORD *)v5 - 2);
        v13 -= 32;
        v5 -= 4;
      }
      while (v5 != v18);
      v5 = (void **)*a1;
      v20 = (void **)a1[1];
      *a1 = v13;
      a1[1] = v15;
      a1[2] = v17;
      while (v20 != v5)
      {
        if (*((char *)v20 - 9) < 0)
          operator delete(*(v20 - 4));
        v20 -= 4;
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20B1D6848(uint64_t *a1, _DWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_20B50AF4C(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_20B4557C4(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20B231044((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20B1D69AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1D6A38(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v25;
  uint64_t v26[27];
  _BYTE v27[8];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v26);
    sub_20B0D0A00((uint64_t)v27, v26);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v27);
        if (!v42)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v25, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v8;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v33;
    v10 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v11;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v12;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v15 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v40;
LABEL_45:
    *((_QWORD *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v26);
  sub_20B0D0A00((uint64_t)v27, v26);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v25, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v17;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v33;
    v19 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v20;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v21;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v23 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  sub_20AF4EA3C((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0DD1A0((uint64_t)v26, a2, v4);
  LODWORD(v26[0]) = 1;
  sub_20B518854(a2[6], v26);
  return sub_20B1D6EC4((uint64_t)v26, a2, v3 + 200);
}

void sub_20B1D6E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1D6EC4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;

  v5 = a2 + 2;
  sub_20B0DD290(a2 + 2);
  sub_20B1D6FA8((uint64_t)a2, a3);
  v6 = (void **)(a3 + 24);
  v10 = 0;
  sub_20B51852C(a2[6], &v10);
  if (v10)
  {
    if (!*(_BYTE *)(a3 + 48))
    {
      *v6 = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 48) = 1;
    }
    sub_20B518FF8(a2[6], (void **)(a3 + 24));
  }
  else if (*(_BYTE *)(a3 + 48))
  {
    if (*(char *)(a3 + 47) < 0)
      operator delete(*v6);
    *(_BYTE *)(a3 + 48) = 0;
  }
  v7 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(v5);
  v9 = *(_QWORD *)(v7 - 16) - result + *(_QWORD *)(v7 - 8);
  if (v9)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v5 + 40))(v5, v9);
  a2[4] -= 16;
  return result;
}

void sub_20B1D6FA8(uint64_t a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v9 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5;
  sub_20B518BE4(*(_QWORD *)(a1 + 48), &v9);
  v4 = *(void ***)(a2 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a2) >> 5;
  if (v9 > v5)
  {
    sub_20B1D66B8((void **)a2, v9 - v5);
    v8 = a2;
    v6 = *(void ***)a2;
    v7 = *(_QWORD *)(v8 + 8);
    if ((void **)v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v9 >= v5)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v6 = *(void ***)a2;
    if (v4 == v6)
      return;
    goto LABEL_13;
  }
  v7 = *(_QWORD *)a2 + 32 * v9;
  while (v4 != (void **)v7)
  {
    if (*((char *)v4 - 9) < 0)
      operator delete(*(v4 - 4));
    v4 -= 4;
  }
  *(_QWORD *)(a2 + 8) = v7;
  v6 = *(void ***)a2;
  if ((void **)v7 != v6)
  {
    do
    {
LABEL_13:
      sub_20B518FF8(*(_QWORD *)(a1 + 48), v6);
      v10 = 0;
      sub_20B5187A4(*(_QWORD *)(a1 + 48), &v10);
      *((_DWORD *)v6 + 6) = v10;
      v6 += 4;
    }
    while (v6 != (void **)v7);
  }
}

void sub_20B1D70A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *exception;
  char v31;
  uint64_t v32[27];
  _BYTE v33[8];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v32);
    sub_20B0D0A00((uint64_t)v33, v32);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v33);
        if (!v48)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v8 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v8;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v39;
    v10 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v11 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v11;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v12 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v12;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v15 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v46;
LABEL_45:
    *((_QWORD *)&v46 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v32);
  sub_20B0D0A00((uint64_t)v33, v32);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v34;
    *(_BYTE *)(v3 + 64) = 0;
    if (v37)
    {
      v17 = v36;
      *(_OWORD *)(v3 + 40) = v35;
      *(_QWORD *)(v3 + 56) = v17;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v39;
    v19 = v38;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v42)
    {
      v20 = v41;
      *(_OWORD *)(v3 + 96) = v40;
      *(_QWORD *)(v3 + 112) = v20;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v45)
    {
      v21 = v44;
      *(_OWORD *)(v3 + 128) = v43;
      *(_QWORD *)(v3 + 144) = v21;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v48;
    if (v48)
    {
      *(_OWORD *)(v3 + 160) = v46;
      *(_QWORD *)(v3 + 176) = v47;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v33);
  if (v48)
  {
LABEL_38:
    v14 = v46;
    if (!(_QWORD)v46)
      goto LABEL_46;
    v23 = *((_QWORD *)&v46 + 1);
    v16 = (void *)v46;
    if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v45 && SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  sub_20AF4EA3C((uint64_t)v32);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0DE788(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B50A7A4(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v32[0] = 0;
  sub_20B454B2C(v27, v32);
  if (HIDWORD(v32[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  sub_20B1D75F8(a2, v3 + 200);
  v28 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v28 - 8);
  v29 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(a2 + 48) = v28 - 8;
  *(_QWORD *)(a2 + 72) = v29 - 8;
}

void sub_20B1D75B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1D75F8(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  void **v8;
  void **v9;
  void *v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  void *__p;
  void **v15;

  sub_20B1D3964((__int128 **)a2, (uint64_t)&__p);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "logger_enable_state_changes";
  *(_QWORD *)(a1 + 96) = 27;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B1D7764((uint64_t *)a1, (char **)&__p);
  sub_20B1D3AB8((__int128 **)&__p, (uint64_t)&v12);
  v5 = *(__int128 **)a2;
  if (*(_QWORD *)a2)
  {
    v6 = *(__int128 **)(a2 + 8);
    v7 = *(__int128 **)a2;
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v6 - 9) < 0)
          operator delete(*((void **)v6 - 4));
        v6 -= 2;
      }
      while (v6 != v5);
      v7 = *(__int128 **)a2;
    }
    *(_QWORD *)(a2 + 8) = v5;
    operator delete(v7);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = v12;
  v8 = (void **)__p;
  *(_QWORD *)(a2 + 16) = v13;
  if (v8)
  {
    v9 = v15;
    v10 = v8;
    if (v15 != v8)
    {
      do
      {
        if (*((char *)v9 - 9) < 0)
          operator delete(*(v9 - 4));
        v9 -= 4;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v15 = v8;
    operator delete(v10);
  }
  v11 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "target_context";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v11)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B0DF07C((uint64_t *)a1, a2 + 24);
}

void sub_20B1D773C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AF4BA50((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B1D7750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AF4BA50((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B1D7764(uint64_t *a1, char **a2)
{
  unsigned __int8 *v4;
  int v5;
  unint64_t v6;
  void ***v7;
  void **v8;
  char *v9;
  unint64_t v10;
  void **v11;
  void **v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  __int128 v21;
  void *v22;

  sub_20B50A7A4((uint64_t)a1);
  v4 = (unsigned __int8 *)a1[4];
  v5 = *v4;
  if (v5 == 2)
  {
    v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 8) - **((_QWORD **)v4 + 1)) >> 4;
  }
  else if (v5 == 1)
  {
    v6 = *(_QWORD *)(*((_QWORD *)v4 + 1) + 16);
  }
  else
  {
    if (!*v4)
    {
      v6 = 0;
      v7 = (void ***)(a2 + 1);
      v8 = (void **)a2[1];
      v9 = *a2;
      v10 = ((char *)v8 - *a2) >> 5;
      goto LABEL_11;
    }
    v6 = 1;
  }
  v7 = (void ***)(a2 + 1);
  v8 = (void **)a2[1];
  v9 = *a2;
  v10 = ((char *)v8 - *a2) >> 5;
  if (v6 > v10)
  {
    sub_20B1D66B8((void **)a2, v6 - v10);
    v13 = a2;
    v11 = (void **)*a2;
    v12 = (void **)v13[1];
    if (v11 != v12)
      goto LABEL_22;
LABEL_20:
    v14 = a1[6];
    v15 = a1[9];
    goto LABEL_25;
  }
LABEL_11:
  if (v10 <= v6)
  {
    v12 = v8;
    v11 = (void **)*a2;
    if (v11 != v8)
      goto LABEL_22;
    goto LABEL_20;
  }
  v12 = (void **)&v9[32 * v6];
  while (v8 != v12)
  {
    if (*((char *)v8 - 9) < 0)
      operator delete(*(v8 - 4));
    v8 -= 4;
  }
  *v7 = v12;
  v11 = (void **)*a2;
  if (v11 == v12)
    goto LABEL_20;
  do
  {
LABEL_22:
    sub_20B50A7A4((uint64_t)a1);
    v20 = (void **)sub_20B50AA5C(a1);
    ++a1[14];
    v22 = 0;
    v21 = 0uLL;
    sub_20B45502C(v20, (uint64_t)&v21);
    if (*((char *)v11 + 23) < 0)
      operator delete(*v11);
    v16 = (char *)(v11 + 3);
    v17 = v21;
    v11[2] = v22;
    *(_OWORD *)v11 = v17;
    v11 += 4;
    *(_QWORD *)&v21 = v16;
    sub_20B1D7960(a1, (_DWORD **)&v21);
    v18 = a1[6];
    a1[4] = *(_QWORD *)(v18 - 8);
    v19 = a1[9];
    a1[14] = *(_QWORD *)(v19 - 8);
    a1[6] = v18 - 8;
    a1[9] = v19 - 8;
  }
  while (v11 != v12);
  v14 = v18 - 8;
  v15 = v19 - 8;
LABEL_25:
  a1[4] = *(_QWORD *)(v14 - 8);
  a1[14] = *(_QWORD *)(v15 - 8);
  a1[6] = v14 - 8;
  a1[9] = v15 - 8;
}

void sub_20B1D7944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1D7960(uint64_t *a1, _DWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_20B50AA5C(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_20B45502C(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20B231044((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20B1D7AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B1D7B50(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  char v28;
  void *__p[2];
  char v30;
  _BYTE v31[8];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)__p);
    sub_20B0D0A00((uint64_t)v31, (uint64_t *)__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v31);
        if (!v46)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v28, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v8;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v37;
    v10 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v11;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v12;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v15 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v44;
LABEL_45:
    *((_QWORD *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)__p);
  sub_20B0D0A00((uint64_t)v31, (uint64_t *)__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v28, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v17;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v37;
    v19 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v20;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v21;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v31);
  if (v46)
  {
LABEL_38:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v23 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  sub_20AF4EA3C((uint64_t)__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  LODWORD(__p[0]) = 6;
  sub_20B514490(a2, __p);
  v24 = __p[0];
  if (LODWORD(__p[0]) >= 6)
    v25 = 6;
  else
    v25 = __p[0];
  if (v25 < 3)
    sub_20B0E0A94((uint64_t)__p, a2, v4, v25);
  else
    sub_20B0E0C84(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20B51680C(a2, (uint64_t)__p);
      if (v30 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_76:
          v27 = 0;
          if (v30 < 0)
            goto LABEL_79;
          goto LABEL_65;
        }
      }
      else if (v30 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_76;
      }
      v27 = 1;
      if (v30 < 0)
LABEL_79:
        operator delete(__p[0]);
LABEL_65:
      if (*(_BYTE *)(a2 + 131))
        v26 = 0;
      else
        v26 = v27;
    }
    while ((v26 & 1) != 0);
  }
  sub_20B1D80AC((uint64_t)__p, a2, v3 + 200);
}

void sub_20B1D8064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1D80AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  char v6;
  char v7;
  char v8;
  void *__p[2];
  uint64_t v10;

  LODWORD(__p[0]) = 1;
  sub_20B514490(a2, __p);
  sub_20B1D8278(a2, a3);
  v5 = (void **)(a3 + 24);
  v8 = 0;
  sub_20B513B4C(a2, &v8);
  if (!v8)
  {
    if (!*(_BYTE *)(a3 + 48))
      goto LABEL_13;
    if (*(char *)(a3 + 47) < 0)
      operator delete(*v5);
    *(_BYTE *)(a3 + 48) = 0;
    if (*(_BYTE *)(a2 + 131))
      return;
    while (1)
    {
LABEL_23:
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)__p);
      if (SHIBYTE(v10) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_30:
          v7 = 0;
          if (SHIBYTE(v10) < 0)
            goto LABEL_33;
          goto LABEL_19;
        }
      }
      else if (SHIBYTE(v10) == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_30;
      }
      v7 = 1;
      if (SHIBYTE(v10) < 0)
LABEL_33:
        operator delete(__p[0]);
LABEL_19:
      if (*(_BYTE *)(a2 + 131))
        v6 = 0;
      else
        v6 = v7;
      if ((v6 & 1) == 0)
        return;
    }
  }
  if (!*(_BYTE *)(a3 + 48))
  {
    *v5 = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_BYTE *)(a3 + 48) = 1;
    ++*(_QWORD *)(a2 + 80);
    if (!*(_BYTE *)(a2 + 128))
      goto LABEL_15;
    goto LABEL_11;
  }
  ++*(_QWORD *)(a2 + 80);
  if (*(_BYTE *)(a2 + 128))
  {
LABEL_11:
    if (!*(_BYTE *)(a2 + 131))
      goto LABEL_15;
    *(_BYTE *)(a2 + 132) = 1;
LABEL_13:
    if (!*(_BYTE *)(a2 + 131))
      goto LABEL_23;
    return;
  }
LABEL_15:
  sub_20B51680C(a2, (uint64_t)__p);
  if (*(char *)(a3 + 47) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = *(_OWORD *)__p;
  *(_QWORD *)(a3 + 40) = v10;
  ++*(_QWORD *)(a2 + 104);
  if (!*(_BYTE *)(a2 + 131))
    goto LABEL_23;
}

void sub_20B1D8278(uint64_t a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  __int128 v13;
  unint64_t v14;
  __int128 v15;
  void *v16;

  v14 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5;
  sub_20B514DE0(a1, &v14);
  v4 = *(void ***)(a2 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a2) >> 5;
  if (v14 > v5)
  {
    sub_20B1D66B8((void **)a2, v14 - v5);
    v8 = a2;
    v6 = *(void ***)a2;
    v7 = *(void ***)(v8 + 8);
    v9 = (char *)v7 - (char *)v6;
    if (v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v14 >= v5)
  {
    v6 = *(void ***)a2;
    v9 = (char *)v4 - (char *)v6;
    if (v4 == v6)
      return;
    goto LABEL_13;
  }
  v10 = *(_QWORD *)a2 + 32 * v14;
  while (v4 != (void **)v10)
  {
    if (*((char *)v4 - 9) < 0)
      operator delete(*(v4 - 4));
    v4 -= 4;
  }
  *(_QWORD *)(a2 + 8) = v10;
  v6 = *(void ***)a2;
  v9 = v10 - (_QWORD)v6;
  if ((void **)v10 != v6)
  {
LABEL_13:
    v11 = 32 * (v9 >> 5);
    do
    {
      ++*(_QWORD *)(a1 + 80);
      if (*(_BYTE *)(a1 + 128))
        v12 = *(_BYTE *)(a1 + 131) == 0;
      else
        v12 = 1;
      if (v12)
      {
        sub_20B51680C(a1, (uint64_t)&v15);
        if (*((char *)v6 + 23) < 0)
          operator delete(*v6);
        v13 = v15;
        v6[2] = v16;
        *(_OWORD *)v6 = v13;
        ++*(_QWORD *)(a1 + 104);
      }
      else
      {
        *(_BYTE *)(a1 + 132) = 1;
      }
      LODWORD(v15) = 0;
      sub_20B51423C(a1, &v15);
      *((_DWORD *)v6 + 6) = v15;
      v6 += 4;
      v11 -= 32;
    }
    while (v11);
  }
}

void sub_20B1D83D4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v25);
    sub_20B0D0A00((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v25);
  sub_20B0D0A00((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20AF4EA3C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0E2418((uint64_t)v25, a2, v4);
  sub_20B1D8848((uint64_t)v25, a2, v3 + 200);
}

void sub_20B1D8800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1D8848(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_20B42BA30(a2);
  sub_20B1D890C(a2, a3);
  sub_20B0E2AA4(a2, a3 + 24);
  v9 = a2[12];
  v10 = a2[9];
  a2[6] = *(_QWORD *)(v9 - 8) + *(_QWORD *)(v10 - 8) + 8;
  a2[9] = v10 - 8;
  a2[12] = v9 - 8;
}

void sub_20B1D88F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1D890C(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  std::logic_error *exception;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_21;
  v8 = *(_QWORD *)(a1[3] + v3);
  a1[6] = v3 + 8;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = (v9 - *(_QWORD *)a2) >> 5;
  if (v8 > v10)
  {
    sub_20B1D66B8((void **)a2, v8 - v10);
    v13 = a2;
    v11 = *(_DWORD **)a2;
    v12 = *(_QWORD *)(v13 + 8);
    if ((_DWORD *)v12 != v11)
      goto LABEL_16;
    return;
  }
  if (v8 < v10)
  {
    v12 = *(_QWORD *)a2 + 32 * v8;
    while (v9 != v12)
    {
      if (*(char *)(v9 - 9) < 0)
        operator delete(*(void **)(v9 - 32));
      v9 -= 32;
    }
    *(_QWORD *)(a2 + 8) = v12;
    v11 = *(_DWORD **)a2;
    if ((_DWORD *)v12 == v11)
      return;
    while (1)
    {
LABEL_16:
      sub_20B42BD80(a1, (uint64_t)v11);
      v14 = a1[6];
      v15 = a1[7];
      v4 = v15 >= v14;
      v16 = v15 - v14;
      if (!v4)
        v16 = 0;
      if (v16 <= 3)
        break;
      v17 = *(_DWORD *)(a1[3] + v14);
      a1[6] = v14 + 4;
      v11[6] = v17;
      v11 += 8;
      if (v11 == (_DWORD *)v12)
        return;
    }
LABEL_21:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v12 = *(_QWORD *)(a2 + 8);
  v11 = *(_DWORD **)a2;
  if (v9 != *(_QWORD *)a2)
    goto LABEL_16;
}

void sub_20B1D8A60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1D8A74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B1D8A88(int *a1, uint64_t a2, uint64_t a3)
{
  void **v6;
  int v7;
  char v8;

  v7 = 1;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 < 1)
  {
    sub_20B1D8ED4(a2, a3);
    v6 = (void **)(a3 + 24);
    v8 = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v8);
    if (v8)
    {
      if (!*(_BYTE *)(a3 + 48))
      {
        *v6 = 0;
        *(_QWORD *)(a3 + 32) = 0;
        *(_QWORD *)(a3 + 40) = 0;
        *(_BYTE *)(a3 + 48) = 1;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, a3 + 24);
    }
    else if (*(_BYTE *)(a3 + 48))
    {
      if (*(char *)(a3 + 47) < 0)
        operator delete(*v6);
      *(_BYTE *)(a3 + 48) = 0;
    }
  }
  else
  {
    sub_20B1D8BAC(a1, a2, a3);
  }
}

void sub_20B1D8BAC(int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  void **v7;
  unsigned int v8;
  __int128 *v9;
  unsigned int v10;
  char v11;

  v5 = *a1;
  if (*a1 == 2)
  {
    v10 = 1;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v10);
    if (v10 >= 2)
    {
      v8 = v10;
      v9 = sub_20B1D8CD8();
      sub_20B520518((std::string *)v9, v8, 1u);
    }
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_20B1D8ED4(a2, a3);
  v7 = (void **)(a3 + 24);
  v11 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 80))(a2, &v11);
  if (v11)
  {
    if (!*(_BYTE *)(a3 + 48))
    {
      *v7 = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 48) = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, a3 + 24);
  }
  else if (*(_BYTE *)(a3 + 48))
  {
    if (*(char *)(a3 + 47) < 0)
      operator delete(*v7);
    *(_BYTE *)(a3 + 48) = 0;
  }
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20B1D8CD8()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635578);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635578))
    return &xmmword_254635560;
  v2 = (char *)sub_20B1D8DB4();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254635560, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254635570 = *((_QWORD *)v2 + 2);
    xmmword_254635560 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635560, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635578);
  return &xmmword_254635560;
}

void sub_20B1D8D9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635578);
  _Unwind_Resume(a1);
}

void *sub_20B1D8DB4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254635598);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254635598))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::UpdateEnabledLoggersSample]", qword_254635580);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635580, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635598);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546355B8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_2546355B8))
    return &unk_2546355A0;
  sub_20B531658((uint64_t)qword_254635580, (uint64_t)&unk_2546355A0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_2546355A0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546355B8);
  return &unk_2546355A0;
}

void sub_20B1D8EA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546355B8);
  _Unwind_Resume(a1);
}

void sub_20B1D8EBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635598);
  _Unwind_Resume(a1);
}

void sub_20B1D8ED4(uint64_t a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v9 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v9);
  v4 = *(void ***)(a2 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a2) >> 5;
  if (v9 > v5)
  {
    sub_20B1D66B8((void **)a2, v9 - v5);
    v8 = a2;
    v6 = *(void ***)a2;
    v7 = *(_QWORD *)(v8 + 8);
    if ((void **)v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v9 >= v5)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v6 = *(void ***)a2;
    if (v4 == v6)
      return;
    goto LABEL_13;
  }
  v7 = *(_QWORD *)a2 + 32 * v9;
  while (v4 != (void **)v7)
  {
    if (*((char *)v4 - 9) < 0)
      operator delete(*(v4 - 4));
    v4 -= 4;
  }
  *(_QWORD *)(a2 + 8) = v7;
  v6 = *(void ***)a2;
  if ((void **)v7 != v6)
  {
    do
    {
LABEL_13:
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, v6);
      v10 = 0;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 56))(a1, &v10);
      *((_DWORD *)v6 + 6) = v10;
      v6 += 4;
    }
    while (v6 != (void **)v7);
  }
}

_QWORD *sub_20B1D8FE4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24C40E898;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 112) = 0;
  *(_BYTE *)(v4 + 136) = 0;
  if (*(_BYTE *)(a1 + 136))
  {
    *(_OWORD *)(v4 + 112) = *(_OWORD *)(a1 + 112);
    *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_BYTE *)(v4 + 136) = 1;
  }
  *(_BYTE *)(v4 + 176) = 0;
  *(_OWORD *)(v4 + 144) = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
  *(_BYTE *)(v4 + 224) = 0;
  if (*(_BYTE *)(a1 + 224))
  {
    *(_OWORD *)(v4 + 176) = *(_OWORD *)(a1 + 176);
    *(_QWORD *)(v4 + 192) = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    v6 = (unsigned __int128 *)(a1 + 208);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 208) = v7;
    *(_BYTE *)(v4 + 224) = 1;
  }
  *(_BYTE *)(v4 + 240) = 0;
  *(_BYTE *)(v4 + 264) = 0;
  if (*(_BYTE *)(a1 + 264))
  {
    *(_OWORD *)(v4 + 240) = *(_OWORD *)(a1 + 240);
    *(_QWORD *)(v4 + 256) = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    *(_BYTE *)(v4 + 264) = 1;
  }
  *(_QWORD *)v4 = &off_24C40E848;
  *a2 = &off_24C411E78;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24C411F70;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20B1D9188(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1D91A4(_QWORD *a1)
{
  *a1 = &off_24C40E898;
  sub_20AF4EA3C((uint64_t)(a1 + 8));
  return a1;
}

void sub_20B1D91D4(_QWORD *a1)
{
  *a1 = &off_24C40E898;
  sub_20AF4EA3C((uint64_t)(a1 + 8));
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B1D9214(uint64_t a1)
{
  return a1 + 64;
}

BOOL sub_20B1D921C(uint64_t a1, void *lpsrc)
{
  _BYTE *v4;
  _BOOL8 v5;

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40D5F8, 0);
  if (!v4)
    return 0;
  if ((void *)a1 == lpsrc)
    return 1;
  v5 = (*(_BYTE *)(a1 + 48) != 0) == (v4[48] != 0);
  if (!*(_BYTE *)(a1 + 48) || !v4[48])
    return v5;
  if (*(_QWORD *)(a1 + 8) != *((_QWORD *)v4 + 1))
    return 0;
  if (!*(_BYTE *)(a1 + 24) || !v4[24])
  {
    if ((*(_BYTE *)(a1 + 24) != 0) == (v4[24] != 0))
      goto LABEL_13;
    return 0;
  }
  if (*(_QWORD *)(a1 + 16) != *((_QWORD *)v4 + 2))
    return 0;
LABEL_13:
  v5 = (*(_BYTE *)(a1 + 40) != 0) == (v4[40] != 0);
  if (*(_BYTE *)(a1 + 40) && v4[40])
    return *(_QWORD *)(a1 + 32) == *((_QWORD *)v4 + 4);
  return v5;
}

void sub_20B1D9350(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20B1DA5F0();
  sub_20B1D9404(a1);
  sub_20AF4DD70(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 64, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20B1D93E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1D9404(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_2546356F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546356F8))
  {
    v4 = sub_20B1DA2C4();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20AF4E53C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20AEC60F4(&xmmword_2546356E0, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_2546356F0 = *(_QWORD *)(v9 - 8);
      xmmword_2546356E0 = v7;
    }
    sub_20AEC2E90(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546356E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546356F8);
  }
  return sub_20B1DA8D8(&xmmword_2546356E0, "{", a1 + 8, "}");
}

void sub_20B1D9514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20AEC2E90(&a9);
  __cxa_guard_abort(&qword_2546356F8);
  _Unwind_Resume(a1);
}

void sub_20B1D9534(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546356F8);
  _Unwind_Resume(a1);
}

void sub_20B1D954C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.net");
  *(_DWORD *)(a1 + 24) = 5;
}

void sub_20B1D9578(void *lpsrc@<X0>, uint64_t a2@<X8>)
{
  sub_20B230628(lpsrc, 5, a2);
}

_QWORD *sub_20B1D95A0(_QWORD *a1)
{
  *a1 = &off_24C40E898;
  sub_20AF4EA3C((uint64_t)(a1 + 8));
  return a1;
}

void sub_20B1D95D0(_QWORD *a1)
{
  *a1 = &off_24C40E898;
  sub_20AF4EA3C((uint64_t)(a1 + 8));
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B1D9610(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20B1D9D60();
  return sub_20B1D969C(v2, "{", a1 + 8, ",", a1 + 64, "}");
}

uint64_t sub_20B1D9668(uint64_t a1)
{
  return sub_20B1DA4C0(a1 + 8);
}

void sub_20B1D9670(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20B1D969C(__int128 *a1, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const char *a6)
{
  uint64_t result;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  __int128 *v17;
  const char *v18;
  __int128 *v19;
  const char *v20;
  const char *v21;
  __int128 **v22;

  v14 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20AEC60F4(&v12, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    v12 = *a1;
    v13 = *((_QWORD *)a1 + 2);
  }
  v14 = 1;
  v17 = &v12;
  v18 = a2;
  v19 = &v12;
  v20 = a2;
  v21 = a2;
  sub_20AED5C4C((uint64_t *)&v19, (uint64_t)&v12);
  v15 = a3;
  v17 = &v12;
  v18 = "{";
  v19 = &v12;
  v20 = "{";
  v21 = "{";
  if (v14 == -1)
    goto LABEL_12;
  v22 = &v17;
  ((void (*)(__int128 ***, __int128 *))off_24C40DCC0[v14])(&v22, &v12);
  LOBYTE(v17) = 1;
  v18 = (const char *)&v12;
  v19 = (__int128 *)&v16;
  sub_20B1D9960(&v15, (uint64_t)&v17);
  v17 = &v12;
  v18 = "}";
  v19 = &v12;
  v20 = "}";
  v21 = "}";
  if (v14 == -1)
LABEL_12:
    sub_20AECFAB8();
  v22 = &v17;
  ((void (*)(__int128 ***, __int128 *))off_24C40DCC0[v14])(&v22, &v12);
  v17 = &v12;
  v18 = a4;
  v19 = &v12;
  v20 = a4;
  v21 = a4;
  if (v14 == -1)
    sub_20AECFAB8();
  v22 = &v17;
  ((void (*)(__int128 ***, __int128 *))off_24C40DCC0[v14])(&v22, &v12);
  sub_20AF4D170((uint64_t)&v15, (uint64_t)&v12, a5);
  v17 = &v12;
  v18 = a6;
  v19 = &v12;
  v20 = a6;
  v21 = a6;
  if (v14 == -1)
    sub_20AECFAB8();
  v22 = &v17;
  ((void (*)(__int128 ***, __int128 *))off_24C40DCC0[v14])(&v22, &v12);
  if (v14 == -1)
    sub_20AECFAB8();
  v17 = (__int128 *)&v22;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C40DC60[v14])(&v17, &v12);
  if (v14 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C40DC48[v14])(&v17, &v12);
  return result;
}

void sub_20B1D98D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1D98E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1D98FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1D9910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1D9924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1D9938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1D994C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1D9960(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  const char *v8;
  unsigned int *v9;
  const char *v10;
  const char *v11;
  unsigned int **v12;

  v3 = *a1;
  if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
    v4 = *(unsigned int **)(a2 + 8);
    if (*(_BYTE *)(v3 + 40))
    {
LABEL_3:
      sub_20B1D9A4C((uint64_t)&v7, v4, v3);
      return;
    }
  }
  else
  {
    v7 = *(unsigned int **)(a2 + 8);
    v8 = ",";
    v9 = v7;
    v10 = ",";
    v11 = ",";
    v5 = v7[6];
    if ((_DWORD)v5 == -1)
      goto LABEL_8;
    v12 = &v7;
    ((void (*)(unsigned int ***))off_24C40DCC0[v5])(&v12);
    *(_BYTE *)a2 = 0;
    v4 = *(unsigned int **)(a2 + 8);
    if (*(_BYTE *)(v3 + 40))
      goto LABEL_3;
  }
  v7 = v4;
  v8 = "nullopt";
  v9 = v4;
  v10 = "nullopt";
  v11 = "nullopt";
  v6 = v4[6];
  if ((_DWORD)v6 == -1)
LABEL_8:
    sub_20AECFAB8();
  v12 = &v7;
  ((void (*)(unsigned int ***))off_24C40DCD8[v6])(&v12);
}

void sub_20B1D9A4C(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5;
  void *p_p;
  uint64_t v7;
  int v8;
  size_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21[2];
  unint64_t v22;
  _QWORD *v23;
  void *__p;
  void **v25;
  unsigned int *v26;
  void **v27;
  void **v28;
  _QWORD v29[3];

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v23 = (_QWORD *)v5;
  v29[0] = a3;
  v29[1] = a3 + 8;
  v29[2] = a3 + 24;
  sub_20B213A40((uint64_t)v29);
  if (SHIBYTE(v26) >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (SHIBYTE(v26) >= 0)
    v7 = HIBYTE(v26);
  else
    v7 = (uint64_t)v25;
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)p_p, v7);
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
    v8 = *(_DWORD *)(v5 + 120);
    if ((v8 & 0x10) == 0)
      goto LABEL_9;
LABEL_12:
    v11 = *(_QWORD *)(v5 + 112);
    v12 = *(_QWORD *)(v5 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v5 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v5 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
    goto LABEL_15;
  }
  operator delete(__p);
  v8 = *(_DWORD *)(v5 + 120);
  if ((v8 & 0x10) != 0)
    goto LABEL_12;
LABEL_9:
  if ((v8 & 8) == 0)
  {
    v9 = 0;
    HIBYTE(v22) = 0;
    v10 = v21;
    goto LABEL_22;
  }
  v13 = *(const void **)(v5 + 40);
  v9 = *(_QWORD *)(v5 + 56) - (_QWORD)v13;
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
    sub_20AEC0138();
LABEL_15:
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = operator new(v14 + 1);
    v21[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    v21[0] = v10;
    goto LABEL_21;
  }
  HIBYTE(v22) = v9;
  v10 = v21;
  if (v9)
LABEL_21:
    memmove(v10, v13, v9);
LABEL_22:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v23;
  if (v23)
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    *v23 = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    v16[3] = MEMORY[0x24BEDB848] + 16;
    v16[2] = v19;
    if (*((char *)v16 + 111) < 0)
      operator delete((void *)v16[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v16 + 16);
    MEMORY[0x20BD3583C](v16, 0x10B2C40EED050F3);
  }
  __p = a2;
  v25 = v21;
  v26 = a2;
  v27 = v21;
  v28 = v21;
  v20 = a2[6];
  if ((_DWORD)v20 == -1)
    sub_20AECFAB8();
  v29[0] = &__p;
  ((void (*)(_QWORD *, unsigned int *))off_24C40DC30[v20])(v29, a2);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B1D9CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_20B52CE84(&a15);
    _Unwind_Resume(a1);
  }
  sub_20B52CE84(&a15);
  _Unwind_Resume(a1);
}

__int128 *sub_20B1D9D60()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546355D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546355D8))
    return &xmmword_2546355C0;
  v2 = sub_20B1D9E3C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546355C0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546355D0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546355C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546355C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546355D8);
  return &xmmword_2546355C0;
}

void sub_20B1D9E24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546355D8);
  _Unwind_Resume(a1);
}

std::string *sub_20B1D9E3C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546355F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546355F8))
    return &stru_2546355E0;
  sub_20B1DA0E0((uint64_t)__p);
  sub_20B1D9F2C((char *)__p, &stru_2546355E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546355E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546355F8);
  return &stru_2546355E0;
}

void sub_20B1D9EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546355F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546355F8);
  _Unwind_Resume(a1);
}

void sub_20B1D9F2C(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B1DA2C4();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20AF4DB74();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 2uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20B1DA090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20AEC2E90((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B1DA0E0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254635678);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254635678))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::UpdateSyncConfiguration>]", qword_254635660);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635660, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635678);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254635698);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254635698))
  {
    v5 = sub_20AED4780(qword_254635660, "<", 0);
    sub_20AED467C(qword_254635660, 0, v5, qword_254635680);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635680, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635698);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546356B8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546356B8))
  {
    sub_20B531658((uint64_t)qword_254635680, (uint64_t)&xmmword_2546356A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546356A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546356B8);
  }
  if (byte_2546356B7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546356A0, *((unint64_t *)&xmmword_2546356A0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546356A0;
    *(_QWORD *)(a1 + 16) = unk_2546356B0;
  }
}

void sub_20B1DA27C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546356B8);
  _Unwind_Resume(a1);
}

void sub_20B1DA294(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635698);
  _Unwind_Resume(a1);
}

void sub_20B1DA2AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635678);
  _Unwind_Resume(a1);
}

__int128 *sub_20B1DA2C4()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635618);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635618))
    return &xmmword_254635600;
  v2 = (char *)sub_20B1DA3A0();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254635600, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254635610 = *((_QWORD *)v2 + 2);
    xmmword_254635600 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635600, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635618);
  return &xmmword_254635600;
}

void sub_20B1DA388(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635618);
  _Unwind_Resume(a1);
}

void *sub_20B1DA3A0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254635638);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254635638))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::UpdateSyncConfiguration]", qword_254635620);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635620, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635638);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254635658);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254635658))
    return &unk_254635640;
  sub_20B531658((uint64_t)qword_254635620, (uint64_t)&unk_254635640);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254635640, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635658);
  return &unk_254635640;
}

void sub_20B1DA490(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635658);
  _Unwind_Resume(a1);
}

void sub_20B1DA4A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635638);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1DA4C0(uint64_t a1)
{
  uint64_t result;
  _DWORD v2[6];
  int v3;
  uint64_t v4;
  char v5;
  _QWORD **v6;
  const char *v7;
  char *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v3 = 0;
  v4 = a1;
  sub_20AED5B5C(v2, "{");
  LOBYTE(v6) = 1;
  v7 = (const char *)v2;
  v8 = &v5;
  sub_20B1D9960(&v4, (uint64_t)&v6);
  v6 = (_QWORD **)v2;
  v7 = "}";
  v8 = (char *)v2;
  v9 = "}";
  v10 = "}";
  if (v3 == -1)
    sub_20AECFAB8();
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C40DCC0[v3])(&v11, v2);
  if (v3 == -1)
    sub_20AECFAB8();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C40DC60[v3])(&v6, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C40DC48[v3])(&v6, v2);
  return result;
}

void sub_20B1DA5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1DA5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *sub_20B1DA5F0()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  __int128 *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void *v10[3];
  void *v11[2];
  char v12;
  void *__dst[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_2546356D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546356D8))
  {
    sub_20AEC0D64(v11, "viz::PackageData");
    v2 = sub_20B1DA2C4();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v14 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v4 = sub_20B0BCB64();
    if (*((char *)v4 + 23) < 0)
    {
      sub_20AEC60F4(&v15, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      v16 = *((_QWORD *)v4 + 2);
      v15 = v5;
    }
    v6 = sub_20AF5DA94();
    if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20AEC60F4(&v17, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
    }
    else
    {
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v18 = v6->__r_.__value_.__r.__words[2];
      v17 = v7;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v20 = 0x400000000000000;
    sub_20AEC7620(v10, (uint64_t)__dst, 4uLL);
    sub_20B53170C((char *)v11, (uint64_t *)v10, &stru_2546356C0, v8, v9);
    sub_20AEC2E90(v10);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v16) & 0x80000000) == 0)
          goto LABEL_16;
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete((void *)v17);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_22;
    }
LABEL_21:
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v12 & 0x80000000) == 0)
      {
LABEL_18:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546356C0, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546356D8);
        return &stru_2546356C0;
      }
LABEL_23:
      operator delete(v11[0]);
      goto LABEL_18;
    }
LABEL_22:
    operator delete(__dst[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_23;
  }
  return &stru_2546356C0;
}

void sub_20B1DA7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20AEC2E90(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
    {
LABEL_10:
      if (a18 < 0)
        operator delete(a13);
      __cxa_guard_abort(&qword_2546356D8);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_20B1DA8B0()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20B1DA88CLL);
  }
}

uint64_t sub_20B1DA8D8(__int128 *a1, const char *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  __int128 *v13;
  const char *v14;
  __int128 *v15;
  const char *v16;
  const char *v17;
  __int128 **v18;

  v10 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20AEC60F4(&v8, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    v8 = *a1;
    v9 = *((_QWORD *)a1 + 2);
  }
  v10 = 1;
  v13 = &v8;
  v14 = a2;
  v15 = &v8;
  v16 = a2;
  v17 = a2;
  sub_20AED5C4C((uint64_t *)&v15, (uint64_t)&v8);
  v11 = a3;
  v13 = &v8;
  v14 = "{";
  v15 = &v8;
  v16 = "{";
  v17 = "{";
  if (v10 == -1)
    goto LABEL_11;
  v18 = &v13;
  ((void (*)(__int128 ***, __int128 *))off_24C40DCC0[v10])(&v18, &v8);
  LOBYTE(v13) = 1;
  v14 = (const char *)&v8;
  v15 = (__int128 *)&v12;
  sub_20B1D9960(&v11, (uint64_t)&v13);
  v13 = &v8;
  v14 = "}";
  v15 = &v8;
  v16 = "}";
  v17 = "}";
  if (v10 == -1)
LABEL_11:
    sub_20AECFAB8();
  v18 = &v13;
  ((void (*)(__int128 ***, __int128 *))off_24C40DCC0[v10])(&v18, &v8);
  v13 = &v8;
  v14 = a4;
  v15 = &v8;
  v16 = a4;
  v17 = a4;
  if (v10 == -1)
    sub_20AECFAB8();
  v18 = &v13;
  ((void (*)(__int128 ***, __int128 *))off_24C40DCC0[v10])(&v18, &v8);
  if (v10 == -1)
    sub_20AECFAB8();
  v13 = (__int128 *)&v18;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C40DC60[v10])(&v13, &v8);
  if (v10 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C40DC48[v10])(&v13, &v8);
  return result;
}

void sub_20B1DAAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1DAAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1DAADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1DAAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1DAB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20B1DAB18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  _BOOL8 v11;
  _QWORD v13[5];
  unsigned __int8 **v14;
  _QWORD v15[5];
  unsigned __int8 **v16;
  char v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[6];

  v29[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v24);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v24);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v24);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20B0C0D90(v6, (uint64_t)v18);
  }
  else if (v7 == 1)
  {
    sub_20B0F9F8C(v6, (uint64_t)v18);
  }
  else
  {
    if (v7)
      sub_20AECFAB8();
    sub_20B0C6034(v6, (uint64_t)v18);
  }
  v15[0] = v24;
  v15[1] = &v25;
  v15[2] = &v26;
  v15[3] = &v27;
  v15[4] = &v28;
  v16 = (unsigned __int8 **)v29;
  v13[0] = v18;
  v13[1] = &v19;
  v13[2] = &v20;
  v13[3] = &v21;
  v13[4] = &v22;
  v14 = (unsigned __int8 **)&v23;
  if (!sub_20B2178A8((uint64_t)&v17, v15, v13))
    goto LABEL_28;
  if (*((_BYTE *)v16 + 24) && *((_BYTE *)v14 + 24))
  {
    v8 = *v16;
    v9 = v16[1];
    v10 = *v14;
    if (v9 - *v16 != v14[1] - *v14)
      goto LABEL_28;
    if (v8 != v9)
    {
      while (sub_20B2167B8(v8, v10))
      {
        v8 += 96;
        v10 += 96;
        if (v8 == v9)
          goto LABEL_22;
      }
      goto LABEL_28;
    }
  }
  else if ((*((_BYTE *)v16 + 24) != 0) != (*((_BYTE *)v14 + 24) != 0))
  {
    goto LABEL_28;
  }
LABEL_22:
  v11 = (*(_BYTE *)(a1 + 248) != 0) == (*(_BYTE *)(a2 + 248) != 0);
  if (!*(_BYTE *)(a1 + 248) || !*(_BYTE *)(a2 + 248))
    goto LABEL_29;
  if (*(_QWORD *)(a1 + 208) != *(_QWORD *)(a2 + 208))
  {
LABEL_28:
    v11 = 0;
    goto LABEL_29;
  }
  if (*(_BYTE *)(a1 + 224) && *(_BYTE *)(a2 + 224))
  {
    if (*(_QWORD *)(a1 + 216) != *(_QWORD *)(a2 + 216))
      goto LABEL_28;
  }
  else if ((*(_BYTE *)(a1 + 224) != 0) != (*(_BYTE *)(a2 + 224) != 0))
  {
    goto LABEL_28;
  }
  v11 = (*(_BYTE *)(a1 + 240) != 0) == (*(_BYTE *)(a2 + 240) != 0);
  if (*(_BYTE *)(a1 + 240) && *(_BYTE *)(a2 + 240))
    v11 = *(_QWORD *)(a1 + 232) == *(_QWORD *)(a2 + 232);
LABEL_29:
  sub_20AF4EA3C((uint64_t)v18);
  sub_20AF4EA3C((uint64_t)v24);
  return v11;
}

void sub_20B1DAD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a23);
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B1DADB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20AF4EA3C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20B1DADC8(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EB80, 0);
  if (v4)
  {
    sub_20B1DB140(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EBC8, 0);
    if (v5)
    {
      sub_20B1DBA34(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC50, 0);
      if (v6)
      {
        sub_20B1DBE70(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC98, 0);
        if (v7)
        {
          sub_20B1DC764(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C2C8)
            sub_20B1DCAC0(&v9, (uint64_t)a1);
          else
            sub_20B1DAF2C(&v8, a1);
        }
      }
    }
  }
}

uint64_t sub_20B1DAF2C(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v13;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    LODWORD(v13) = 4;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    v9 = v13;
    if (v8 < 1)
    {
      sub_20B0FF5BC((uint64_t)a2, v4, v13);
      goto LABEL_17;
    }
    if (v8 == 2)
    {
      LODWORD(v13) = 3;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B0FF5BC((uint64_t)a2, v4, v9);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    LODWORD(v13) = 5;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    v11 = v13;
    if (v10 < 1)
    {
      sub_20B0FEF34((uint64_t)a2, v4, v13);
      goto LABEL_17;
    }
    if (v10 == 2)
    {
      LODWORD(v13) = 3;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B0FEF34((uint64_t)a2, v4, v11);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = a2[2];
    LODWORD(v13) = 6;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    v7 = v13;
    if (v6 < 1)
    {
      sub_20B0D8514((uint64_t)a2, v4, v13);
      goto LABEL_17;
    }
    if (v6 == 2)
    {
      LODWORD(v13) = 3;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B0D8514((uint64_t)a2, v4, v7);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
LABEL_17:
  v13 = *((_QWORD *)a2 + 1);
  return sub_20B1DCDC4((int *)&v13, a2, (__int128 *)(v3 + 200));
}

void sub_20B1DB140(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v16 = "version";
    v17 = 7;
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FADD8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B50671C(a2);
      v16 = "version";
      v17 = 7;
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5086B4(a2, &v18);
      sub_20B0D1154(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B50671C(a2);
    v16 = "version";
    v17 = 7;
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v18);
    sub_20B0FA468(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B1DB3E0((uint64_t)&v16, a2, (__int128 *)(v3 + 200));
}

void sub_20B1DB3E0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  sub_20B50671C(a2);
  *(_QWORD *)&v15 = "version";
  *((_QWORD *)&v15 + 1) = 7;
  LODWORD(v16[0]) = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5086B4(a2, v16);
  v6 = a3[1];
  v15 = *a3;
  v16[0] = v6;
  v16[1] = a3[2];
  v17 = *((_QWORD *)a3 + 6);
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a2 + 88),
        *(_QWORD *)(a2 + 72) = "initial_sync_command",
        *(_QWORD *)(a2 + 80) = 20,
        v7))
  {
    if ((_BYTE)v17)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    if ((_BYTE)v17)
    {
LABEL_7:
      v13 = *(_QWORD *)(a2 + 8);
      sub_20B1DB594(&v13, a2, (__int128 *)((char *)&v15 + 8));
      v8 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a2 + 40) = *(_QWORD *)(v8 - 8);
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        return;
      goto LABEL_8;
    }
  }
  LOBYTE(v13) = 0;
  v14 = 0;
  v9 = (unsigned __int8 *)sub_20B506370(a2);
  v10 = *v9;
  *v9 = 0;
  LOBYTE(v13) = v10;
  v11 = (void **)*((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = v14;
  v14 = v11;
  sub_20B4181DC(&v14, v10);
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 56) = v12 - 8;
  if (!*(_BYTE *)(a2 + 88))
    return;
LABEL_8:
  *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B1DB578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1DB594(_DWORD *a1, uint64_t a2, __int128 *a3)
{
  int v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  sub_20B50671C(a2);
  *(_QWORD *)&v10 = "version";
  *((_QWORD *)&v10 + 1) = 7;
  LODWORD(v11) = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v6)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5086B4(a2, &v11);
  if (*a1 == 2)
  {
    *(_QWORD *)&v10 = "min_version";
    *((_QWORD *)&v10 + 1) = 11;
    LODWORD(v11) = 1;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v7 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "min_version";
      *(_QWORD *)(a2 + 80) = 11;
      if (!v7)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v11);
  }
  v8 = a3[1];
  v10 = *a3;
  v11 = v8;
  v12 = *((_QWORD *)a3 + 4);
  sub_20B1DB6C4(a2, (uint64_t)&v10);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B1DB6C4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  _BYTE *v7;
  _QWORD *v8;
  BOOL v9;
  BOOL v10;
  unsigned __int8 *v11;
  int v12;
  void **v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  int v17;
  void **v18;
  int v19;
  BOOL v20;
  unsigned __int8 *v21;
  int v22;
  void **v23;
  unsigned __int8 *v24;
  void **v25;
  char v26;
  void **v27;

  v4 = *(unsigned __int8 **)(a1 + 40);
  if (*v4 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "sync_command_id";
    v5 = a1 + 72;
    v7 = (_BYTE *)(a1 + 88);
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 15;
    v8 = (_QWORD *)(a1 + 80);
    if (!v6)
      *v7 = 1;
    goto LABEL_13;
  }
  v8 = (_QWORD *)(a1 + 80);
  v5 = a1 + 72;
  v7 = (_BYTE *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
    v9 = *(_QWORD *)(a1 + 80) == 7;
  else
    v9 = 0;
  if (!v9
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v10 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v10 = 0),
        !v10))
  {
LABEL_13:
    v27 = *(void ***)a2;
    v11 = (unsigned __int8 *)sub_20B506370(a1);
    v12 = *v11;
    *v11 = 6;
    v13 = (void **)*((_QWORD *)v11 + 1);
    *((_QWORD *)v11 + 1) = v27;
    v27 = v13;
    sub_20B4181DC(&v27, v12);
    v4 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v4 > 1u || (v14 = *v7, *(_QWORD *)v5 = "proceed_n", *v8 = 9, v14))
  {
    if (*(_BYTE *)(a2 + 16))
      goto LABEL_17;
LABEL_25:
    v26 = 0;
    v27 = 0;
    v16 = (unsigned __int8 *)sub_20B506370(a1);
    goto LABEL_26;
  }
  *v7 = 1;
  if (!*(_BYTE *)(a2 + 16))
    goto LABEL_25;
LABEL_17:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v15 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v15 = 0),
        !v15))
  {
    v26 = 6;
    v27 = *(void ***)(a2 + 8);
    v16 = (unsigned __int8 *)sub_20B506370(a1);
LABEL_26:
    v17 = *v16;
    *v16 = v26;
    v18 = (void **)*((_QWORD *)v16 + 1);
    *((_QWORD *)v16 + 1) = v27;
    v27 = v18;
    sub_20B4181DC(&v27, v17);
  }
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v19 = *v7, *(_QWORD *)v5 = "proceed_until", *v8 = 13, v19))
  {
    if (*(_BYTE *)(a2 + 32))
      goto LABEL_30;
LABEL_38:
    v27 = 0;
    v24 = (unsigned __int8 *)sub_20B506370(a1);
    v22 = *v24;
    *v24 = 0;
    v25 = (void **)*((_QWORD *)v24 + 1);
    *((_QWORD *)v24 + 1) = v27;
    v27 = v25;
    goto LABEL_39;
  }
  *v7 = 1;
  if (!*(_BYTE *)(a2 + 32))
    goto LABEL_38;
LABEL_30:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v20 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v20 = 0),
        !v20))
  {
    v27 = *(void ***)(a2 + 24);
    v21 = (unsigned __int8 *)sub_20B506370(a1);
    v22 = *v21;
    *v21 = 6;
    v23 = (void **)*((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v27;
    v27 = v23;
LABEL_39:
    sub_20B4181DC(&v27, v22);
  }
}

void sub_20B1DB9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1DB9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1DB9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1DBA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1DBA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1DBA34(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20B51E95C(&v20, 4u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v7 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBED4(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20B51E95C(&v20, 5u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v8 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0FBDB8(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20B51E95C(&v20, 6u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v20, v6 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a2 + 24));
    sub_20B0D3CE4(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20B51E95C(&v20, 1u);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v20, v14 + 8);
  }
  sub_20B51956C(*(_QWORD *)(a2 + 24));
  sub_20B1DBCB4(a2, v3 + 200);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20B1DBCB4(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _OWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v3;
  v13[2] = *(_OWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 48);
  if ((_BYTE)v14)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v4 + 40))
    {
      v12 = (uint64_t *)(v4 + 16);
      sub_20B51DD74(&v12, 1);
    }
    else
    {
      LOBYTE(v12) = 1;
      std::ostream::write();
    }
    v6 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v12 = (uint64_t *)(v6 + 16);
      sub_20B51E95C(&v12, 1u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v12, v6 + 8);
    }
    sub_20B51956C(*(_QWORD *)(a1 + 24));
    sub_20B1B8BE0(a1, (uint64_t)v13 + 8);
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 88) - 8);
    sub_20B5190E0((uint64_t *)(v7 + 48), *(_QWORD *)(v7 + 16) - v8 - 9);
    v9 = *(_QWORD *)(v7 + 48);
    if (v9)
      memmove((void *)(*(_QWORD *)(v7 + 24) + v8), *(const void **)(v7 + 56), v9);
    *(_QWORD *)(v7 + 48) = 0;
    v10 = *(_QWORD *)(v7 + 80);
    v11 = *(_QWORD *)(v7 + 88) - 8;
    *(_QWORD *)(v7 + 88) = v11;
    if (v10 == v11)
    {
      std::ostream::write();
      if (*(_BYTE *)(v7 + 40))
      {
        free(*(void **)(v7 + 24));
        *(_BYTE *)(v7 + 40) = 0;
      }
    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v5 + 40))
    {
      v12 = (uint64_t *)(v5 + 16);
      sub_20B51DD74(&v12, 0);
    }
    else
    {
      std::ostream::write();
    }
  }
}

void sub_20B1DBE70(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v16 = "version";
    v17 = 7;
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FCF30(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B505FB0(a2);
      v16 = "version";
      v17 = 7;
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_20B5069D0(a2, &v18);
      sub_20B0D4F88(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B505FB0(a2);
    v16 = "version";
    v17 = 7;
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v18);
    sub_20B0FC7EC(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B1DC110((uint64_t)&v16, a2, (__int128 *)(v3 + 200));
}

void sub_20B1DC110(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  sub_20B505FB0(a2);
  *(_QWORD *)&v15 = "version";
  *((_QWORD *)&v15 + 1) = 7;
  LODWORD(v16[0]) = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5069D0(a2, v16);
  v6 = a3[1];
  v15 = *a3;
  v16[0] = v6;
  v16[1] = a3[2];
  v17 = *((_QWORD *)a3 + 6);
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a2 + 88),
        *(_QWORD *)(a2 + 72) = "initial_sync_command",
        *(_QWORD *)(a2 + 80) = 20,
        v7))
  {
    if ((_BYTE)v17)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    if ((_BYTE)v17)
    {
LABEL_7:
      v13 = *(_QWORD *)(a2 + 8);
      sub_20B1DC2C4(&v13, a2, (__int128 *)((char *)&v15 + 8));
      v8 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a2 + 40) = *(_QWORD *)(v8 - 8);
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        return;
      goto LABEL_8;
    }
  }
  LOBYTE(v13) = 0;
  v14 = 0;
  v9 = (unsigned __int8 *)sub_20B505B08(a2);
  v10 = *v9;
  *v9 = 0;
  LOBYTE(v13) = v10;
  v11 = *((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = v14;
  v14 = v11;
  sub_20B416E08(&v14, v10);
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 56) = v12 - 8;
  if (!*(_BYTE *)(a2 + 88))
    return;
LABEL_8:
  *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B1DC2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1DC2C4(_DWORD *a1, uint64_t a2, __int128 *a3)
{
  int v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  sub_20B505FB0(a2);
  *(_QWORD *)&v10 = "version";
  *((_QWORD *)&v10 + 1) = 7;
  LODWORD(v11) = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v6)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5069D0(a2, &v11);
  if (*a1 == 2)
  {
    *(_QWORD *)&v10 = "min_version";
    *((_QWORD *)&v10 + 1) = 11;
    LODWORD(v11) = 1;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v7 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "min_version";
      *(_QWORD *)(a2 + 80) = 11;
      if (!v7)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v11);
  }
  v8 = a3[1];
  v10 = *a3;
  v11 = v8;
  v12 = *((_QWORD *)a3 + 4);
  sub_20B1DC3F4(a2, (uint64_t)&v10);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B1DC3F4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  _BYTE *v7;
  _QWORD *v8;
  BOOL v9;
  BOOL v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v4 = *(unsigned __int8 **)(a1 + 40);
  if (*v4 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "sync_command_id";
    v5 = a1 + 72;
    v7 = (_BYTE *)(a1 + 88);
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 15;
    v8 = (_QWORD *)(a1 + 80);
    if (!v6)
      *v7 = 1;
    goto LABEL_13;
  }
  v8 = (_QWORD *)(a1 + 80);
  v5 = a1 + 72;
  v7 = (_BYTE *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
    v9 = *(_QWORD *)(a1 + 80) == 7;
  else
    v9 = 0;
  if (!v9
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v10 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v10 = 0),
        !v10))
  {
LABEL_13:
    v27 = *(_QWORD *)a2;
    v11 = (unsigned __int8 *)sub_20B505B08(a1);
    v12 = *v11;
    *v11 = 6;
    v13 = *((_QWORD *)v11 + 1);
    *((_QWORD *)v11 + 1) = v27;
    v27 = v13;
    sub_20B416E08(&v27, v12);
    v4 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v4 > 1u || (v14 = *v7, *(_QWORD *)v5 = "proceed_n", *v8 = 9, v14))
  {
    if (*(_BYTE *)(a2 + 16))
      goto LABEL_17;
LABEL_25:
    v26 = 0;
    v27 = 0;
    v16 = (unsigned __int8 *)sub_20B505B08(a1);
    goto LABEL_26;
  }
  *v7 = 1;
  if (!*(_BYTE *)(a2 + 16))
    goto LABEL_25;
LABEL_17:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v15 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v15 = 0),
        !v15))
  {
    v26 = 6;
    v27 = *(_QWORD *)(a2 + 8);
    v16 = (unsigned __int8 *)sub_20B505B08(a1);
LABEL_26:
    v17 = *v16;
    *v16 = v26;
    v18 = *((_QWORD *)v16 + 1);
    *((_QWORD *)v16 + 1) = v27;
    v27 = v18;
    sub_20B416E08(&v27, v17);
  }
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v19 = *v7, *(_QWORD *)v5 = "proceed_until", *v8 = 13, v19))
  {
    if (*(_BYTE *)(a2 + 32))
      goto LABEL_30;
LABEL_38:
    v27 = 0;
    v24 = (unsigned __int8 *)sub_20B505B08(a1);
    v22 = *v24;
    *v24 = 0;
    v25 = *((_QWORD *)v24 + 1);
    *((_QWORD *)v24 + 1) = v27;
    v27 = v25;
    goto LABEL_39;
  }
  *v7 = 1;
  if (!*(_BYTE *)(a2 + 32))
    goto LABEL_38;
LABEL_30:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (v20 = *(_DWORD *)(*(_QWORD *)v5 + 3) == *(_DWORD *)"sion")
      : (v20 = 0),
        !v20))
  {
    v27 = *(_QWORD *)(a2 + 24);
    v21 = (unsigned __int8 *)sub_20B505B08(a1);
    v22 = *v21;
    *v21 = 6;
    v23 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v27;
    v27 = v23;
LABEL_39:
    sub_20B416E08(&v27, v22);
  }
}

void sub_20B1DC6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1DC704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1DC71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1DC734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B1DC74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20B416E08(v9, a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1DC764(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v16 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v8, (uint64_t)&v16, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FE288(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20AECFAB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v14 = *(_BYTE *)(a2 + 32);
        sub_20AEC01D0(v6, (uint64_t)&v14, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20B0D66C4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v17 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v10, (uint64_t)&v17, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v15 = *(_BYTE *)(a2 + 32);
      sub_20AEC01D0(v9, (uint64_t)&v15, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20B0FDCE4(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v18 = v7;
  sub_20AEC01D0(v11, (uint64_t)&v18, 1);
  ++*(_QWORD *)(a2 + 40);
  return sub_20B1DC900((uint64_t)&v13, a2, v3 + 200);
}

_QWORD *sub_20B1DC900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  _QWORD *v7;
  unsigned __int8 v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *result;
  unsigned __int8 v16;
  _OWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 40))
  {
    v5 = *(_QWORD **)(a2 + 24);
    LOBYTE(v17[0]) = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v5, (uint64_t)v17, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a3 + 16);
  v17[0] = *(_OWORD *)a3;
  v17[1] = v6;
  v17[2] = *(_OWORD *)(a3 + 32);
  v18 = *(_QWORD *)(a3 + 48);
  if (!(_BYTE)v18)
  {
    v16 = 0;
    sub_20B512EB0(a2, &v16);
    v12 = *(_BYTE *)(a2 + 34);
    if (!*(_QWORD *)(a2 + 40))
      goto LABEL_12;
LABEL_11:
    v13 = *(_QWORD **)(a2 + 24);
    LOBYTE(v17[0]) = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v13, (uint64_t)v17, 1);
    goto LABEL_12;
  }
  v16 = 1;
  sub_20B512EB0(a2, &v16);
  if (*(_QWORD *)(a2 + 40))
  {
    v7 = *(_QWORD **)(a2 + 24);
    v16 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v7, (uint64_t)&v16, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20B1BA08C(a2, (uint64_t)v17 + 8);
  v8 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v9 = *(_QWORD **)(a2 + 24);
    v16 = *(_BYTE *)(a2 + 32);
    sub_20AEC01D0(v9, (uint64_t)&v16, 1);
  }
  v10 = *(_QWORD **)(a2 + 24);
  v16 = v8;
  sub_20AEC01D0(v10, (uint64_t)&v16, 1);
  v11 = *(_QWORD *)(a2 + 40) + 1;
  *(_QWORD *)(a2 + 40) = v11;
  v12 = *(_BYTE *)(a2 + 34);
  if (v11)
    goto LABEL_11;
LABEL_12:
  v14 = *(_QWORD **)(a2 + 24);
  LOBYTE(v17[0]) = v12;
  result = sub_20AEC01D0(v14, (uint64_t)v17, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

char *sub_20B1DCAC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v10;
  char *result;
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    LODWORD(v12[0]) = 4;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)v12, (char *)v12 + 4, 4);
    v7 = v12[0];
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE9C0(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    LODWORD(v12[0]) = 5;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)v12, (char *)v12 + 4, 4);
    v8 = v12[0];
    sub_20B42B554((_QWORD *)a2);
    sub_20B0FE8A4(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    LODWORD(v12[0]) = 6;
    sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)v12, (char *)v12 + 4, 4);
    v6 = v12[0];
    sub_20B42B554((_QWORD *)a2);
    sub_20B0D757C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  LODWORD(v12[0]) = 1;
  sub_20B42DB24(a2 + 24, *(char **)(a2 + 32), (char *)v12, (char *)v12 + 4, 4);
  sub_20B42B554((_QWORD *)a2);
  v10 = *(_OWORD *)(v3 + 216);
  v12[0] = *(_OWORD *)(v3 + 200);
  v12[1] = v10;
  v12[2] = *(_OWORD *)(v3 + 232);
  v13 = *(_QWORD *)(v3 + 248);
  result = sub_20B1DCCCC(a2, (char *)v12 + 8);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24) + 10) = *(_QWORD *)(a2 + 32)
                                                                                     - (*(_QWORD *)(*(_QWORD *)(a2 + 56)
                                                                                                  - 8)
                                                                                      + *(_QWORD *)(a2 + 24))
                                                                                     - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  return result;
}

char *sub_20B1DCCCC(uint64_t a1, char *a2)
{
  uint64_t v3;
  char *result;
  uint64_t v6;
  char v7;
  char __src;
  int v9;
  uint64_t v10;

  v3 = a1 + 24;
  if (a2[40])
  {
    __src = 1;
    sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v9, 1);
    v9 = 1;
    sub_20B42DB24(v3, *(char **)(a1 + 32), (char *)&v9, (char *)&v10, 4);
    sub_20B42B554((_QWORD *)a1);
    result = sub_20B1BA680(a1, a2);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v6 + 10) = *(_QWORD *)(a1 + 32) - v6 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
  }
  else
  {
    v7 = 0;
    return sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), &v7, &__src, 1);
  }
  return result;
}

uint64_t sub_20B1DCDC4(int *a1, _QWORD *a2, __int128 *a3)
{
  int v6;
  __int128 v7;
  uint64_t result;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  LODWORD(v11) = 1;
  (*(void (**)(_QWORD *, __int128 *))(*a2 + 104))(a2, &v11);
  if (*a1 < 1)
  {
    v9 = a3[1];
    v11 = *a3;
    v12 = v9;
    v13 = a3[2];
    v14 = *((_QWORD *)a3 + 6);
    if ((_BYTE)v14)
    {
      LOBYTE(v10) = 1;
      (*(void (**)(_QWORD *, uint64_t *))(*a2 + 80))(a2, &v10);
      v10 = a2[1];
      return sub_20B1BAACC((int *)&v10, (uint64_t)a2, (uint64_t)&v11 + 8);
    }
    else
    {
      LOBYTE(v10) = 0;
      return (*(uint64_t (**)(_QWORD *, uint64_t *))(*a2 + 80))(a2, &v10);
    }
  }
  else
  {
    if (*a1 == 2 && (LODWORD(v11) = 1, (*(void (**)(_QWORD *, __int128 *))(*a2 + 104))(a2, &v11), *a1 < 1))
    {
      v6 = 0;
    }
    else
    {
      (*(void (**)(_QWORD *))(*a2 + 16))(a2);
      v6 = 1;
    }
    v7 = a3[1];
    v11 = *a3;
    v12 = v7;
    v13 = a3[2];
    v14 = *((_QWORD *)a3 + 6);
    if ((_BYTE)v14)
    {
      LOBYTE(v10) = 1;
      (*(void (**)(_QWORD *, uint64_t *))(*a2 + 80))(a2, &v10);
      v10 = a2[1];
      result = sub_20B1BAACC((int *)&v10, (uint64_t)a2, (uint64_t)&v11 + 8);
    }
    else
    {
      LOBYTE(v10) = 0;
      result = (*(uint64_t (**)(_QWORD *, uint64_t *))(*a2 + 80))(a2, &v10);
    }
    if (v6)
      return (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
  }
  return result;
}

void sub_20B1DCF9C(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED20, 0);
  if (v4)
  {
    sub_20B1DD668(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED58, 0);
    if (v5)
    {
      sub_20B1DDDE0(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EDE0, 0);
      if (v6)
      {
        sub_20B1DE3B8(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EE18, 0);
        if (v7)
        {
          sub_20B1DEB30(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24C41C508)
            sub_20B1DF294(&v9, a1);
          else
            sub_20B1DD100(&v8, a1);
        }
      }
    }
  }
}

uint64_t sub_20B1DD100(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t result;
  char v29;
  uint64_t v30[27];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v30);
    sub_20B0D0A00((uint64_t)&v31, v30);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)&v31);
        if (!v46)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v29, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v8;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v37;
    v10 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v11;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v12;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v15 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v44;
LABEL_45:
    *((_QWORD *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v30);
  sub_20B0D0A00((uint64_t)&v31, v30);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v29, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v17;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v37;
    v19 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v20;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v21;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)&v31);
  if (v46)
  {
LABEL_38:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v23 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  sub_20AF4EA3C((uint64_t)v30);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *a2;
  v30[0] = a2[1];
  v25 = v30[0];
  LODWORD(v31) = 6;
  (*(void (**)(_QWORD *, uint64_t *))(v24 + 104))(a2, &v31);
  if (v25 < 1)
  {
    if (v31 < 3)
      sub_20B0E41CC((uint64_t)&v31, (uint64_t)a2, v4, v31);
    else
      sub_20B0E4440((uint64_t)a2, v4, v31);
  }
  else
  {
    sub_20B0E3BD4((int *)v30, (uint64_t)a2, v4, v31);
  }
  v26 = *a2;
  v31 = a2[1];
  v27 = v31;
  LODWORD(v30[0]) = 1;
  (*(void (**)(_QWORD *, uint64_t *))(v26 + 104))(a2, v30);
  if (v27 >= 1)
    return sub_20B1DF890((int *)&v31, a2, v3 + 200);
  v29 = 0;
  result = (*(uint64_t (**)(_QWORD *, char *))(*a2 + 80))(a2, &v29);
  if (v29)
  {
    if (!*(_BYTE *)(v3 + 248))
    {
      *(_QWORD *)(v3 + 208) = 0;
      *(_BYTE *)(v3 + 216) = 0;
      *(_BYTE *)(v3 + 224) = 0;
      *(_BYTE *)(v3 + 232) = 0;
      *(_BYTE *)(v3 + 240) = 0;
      *(_BYTE *)(v3 + 248) = 1;
    }
    v30[0] = a2[1];
    return sub_20B1BEFAC((int *)v30, (uint64_t)a2, v3 + 208);
  }
  else if (*(_BYTE *)(v3 + 248))
  {
    *(_BYTE *)(v3 + 248) = 0;
  }
  return result;
}

void sub_20B1DD620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1DD668(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v27);
    sub_20B0D0A00((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v27);
  sub_20B0D0A00((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20AF4EA3C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0D978C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B1DDB18((uint64_t)v27, a2, v3 + 200);
}

void sub_20B1DDAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1DDB18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *exception;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  sub_20B50AC94(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  *(_QWORD *)&v12 = 0;
  sub_20B4552C4(v6, &v12);
  if (DWORD1(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "initial_sync_command";
  *(_QWORD *)(a2 + 96) = 20;
  if (v7)
  {
    if (*(_BYTE *)sub_20B50AF4C((uint64_t *)a2))
    {
LABEL_6:
      *(_QWORD *)&v12 = 0;
      BYTE8(v12) = 0;
      LOBYTE(v13) = 0;
      BYTE8(v13) = 0;
      LOBYTE(v14) = 0;
      v15 = *(_QWORD *)(a2 + 8);
      sub_20B1DDC7C(&v15, a2, (uint64_t)&v12);
      v8 = v13;
      *(_OWORD *)(a3 + 8) = v12;
      *(_OWORD *)(a3 + 24) = v8;
      *(_QWORD *)(a3 + 40) = v14;
      *(_BYTE *)(a3 + 48) = 1;
      goto LABEL_10;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 104) = 1;
    if (*(_BYTE *)sub_20B50AF4C((uint64_t *)a2))
      goto LABEL_6;
  }
  ++*(_QWORD *)(a2 + 112);
  if (*(_BYTE *)(a3 + 48))
    *(_BYTE *)(a3 + 48) = 0;
LABEL_10:
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
}

void sub_20B1DDC7C(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char *v7;
  int v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  __int128 *v14;
  unint64_t v15;

  sub_20B50AC94(a2);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v15 = 0;
  sub_20B4552C4(v7, &v15);
  if (HIDWORD(v15))
    goto LABEL_10;
  if (*a1 != 2)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "min_version";
  *(_QWORD *)(a2 + 96) = 11;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  v9 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v15 = 0;
  sub_20B4552C4(v9, &v15);
  v10 = v15;
  if (HIDWORD(v15))
  {
LABEL_10:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v15 >= 2)
  {
    v14 = sub_20B1BF26C();
    sub_20B520518((std::string *)v14, v10, 1u);
  }
LABEL_9:
  sub_20B1BBDF0(a2, a3);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
}

uint64_t sub_20B1DDDE0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char v27;
  uint64_t v28[27];
  _BYTE v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v28);
    sub_20B0D0A00((uint64_t)v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v28);
  sub_20B0D0A00((uint64_t)v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20AF4EA3C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0DD1A0((uint64_t)v28, a2, v4);
  LODWORD(v28[0]) = 1;
  sub_20B518854(a2[6], v28);
  sub_20B0DD290(a2 + 2);
  sub_20B1DE2B8(a2, v3 + 208);
  v24 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2);
  v26 = *(_QWORD *)(v24 - 16) - result + *(_QWORD *)(v24 - 8);
  if (v26)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v26);
  a2[4] -= 16;
  return result;
}

void sub_20B1DE270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1DE2B8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;

  v6 = 0;
  sub_20B51852C(a1[6], &v6);
  if (v6)
  {
    if (!*(_BYTE *)(a2 + 40))
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      *(_BYTE *)(a2 + 40) = 1;
    }
    v7 = 1;
    sub_20B518854(a1[6], &v7);
    sub_20B0DD290(a1 + 2);
    sub_20B1BC7EC((uint64_t)a1, a2);
    v4 = a1[4];
    v5 = *(_QWORD *)(v4 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v4 - 8);
    if (v5)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v5);
    a1[4] -= 16;
  }
  else if (*(_BYTE *)(a2 + 40))
  {
    *(_BYTE *)(a2 + 40) = 0;
  }
}

void sub_20B1DE3B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v27);
    sub_20B0D0A00((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v27);
  sub_20B0D0A00((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20AF4EA3C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B0DE788(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20B1DE868((uint64_t)v27, a2, v3 + 200);
}

void sub_20B1DE820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1DE868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *exception;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  sub_20B50A7A4(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  *(_QWORD *)&v12 = 0;
  sub_20B454B2C(v6, &v12);
  if (DWORD1(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "initial_sync_command";
  *(_QWORD *)(a2 + 96) = 20;
  if (v7)
  {
    if (*(_BYTE *)sub_20B50AA5C((uint64_t *)a2))
    {
LABEL_6:
      *(_QWORD *)&v12 = 0;
      BYTE8(v12) = 0;
      LOBYTE(v13) = 0;
      BYTE8(v13) = 0;
      LOBYTE(v14) = 0;
      v15 = *(_QWORD *)(a2 + 8);
      sub_20B1DE9CC(&v15, a2, (uint64_t)&v12);
      v8 = v13;
      *(_OWORD *)(a3 + 8) = v12;
      *(_OWORD *)(a3 + 24) = v8;
      *(_QWORD *)(a3 + 40) = v14;
      *(_BYTE *)(a3 + 48) = 1;
      goto LABEL_10;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 104) = 1;
    if (*(_BYTE *)sub_20B50AA5C((uint64_t *)a2))
      goto LABEL_6;
  }
  ++*(_QWORD *)(a2 + 112);
  if (*(_BYTE *)(a3 + 48))
    *(_BYTE *)(a3 + 48) = 0;
LABEL_10:
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
}

void sub_20B1DE9CC(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char *v7;
  int v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  __int128 *v14;
  unint64_t v15;

  sub_20B50A7A4(a2);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v15 = 0;
  sub_20B454B2C(v7, &v15);
  if (HIDWORD(v15))
    goto LABEL_10;
  if (*a1 != 2)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "min_version";
  *(_QWORD *)(a2 + 96) = 11;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  v9 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v15 = 0;
  sub_20B454B2C(v9, &v15);
  v10 = v15;
  if (HIDWORD(v15))
  {
LABEL_10:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v15 >= 2)
  {
    v14 = sub_20B1BF26C();
    sub_20B520518((std::string *)v14, v10, 1u);
  }
LABEL_9:
  sub_20B1BD1EC(a2, a3);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
}

void sub_20B1DEB30(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  char v28;
  void *__p[2];
  char v30;
  _BYTE v31[8];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)__p);
    sub_20B0D0A00((uint64_t)v31, (uint64_t *)__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v31);
        if (!v46)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v28, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v8;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v37;
    v10 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v11;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v12;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v15 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v44;
LABEL_45:
    *((_QWORD *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)__p);
  sub_20B0D0A00((uint64_t)v31, (uint64_t *)__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v28, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v17;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v37;
    v19 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v20;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v21;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v31);
  if (v46)
  {
LABEL_38:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v23 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  sub_20AF4EA3C((uint64_t)__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  LODWORD(__p[0]) = 6;
  sub_20B514490(a2, __p);
  v24 = __p[0];
  if (LODWORD(__p[0]) >= 6)
    v25 = 6;
  else
    v25 = __p[0];
  if (v25 < 3)
    sub_20B0E0A94((uint64_t)__p, a2, v4, v25);
  else
    sub_20B0E0C84(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20B51680C(a2, (uint64_t)__p);
      if (v30 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_76:
          v27 = 0;
          if (v30 < 0)
            goto LABEL_79;
          goto LABEL_65;
        }
      }
      else if (v30 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_76;
      }
      v27 = 1;
      if (v30 < 0)
LABEL_79:
        operator delete(__p[0]);
LABEL_65:
      if (*(_BYTE *)(a2 + 131))
        v26 = 0;
      else
        v26 = v27;
    }
    while ((v26 & 1) != 0);
  }
  LODWORD(__p[0]) = 1;
  sub_20B514490(a2, __p);
  sub_20B1DF0A4((uint64_t)__p, a2, v3 + 200);
}

void sub_20B1DF05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1DF0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  void *__p;
  uint64_t v11;
  char v12;

  v9 = 0;
  sub_20B513B4C(a2, &v9);
  if (v9)
  {
    if (!*(_BYTE *)(a3 + 48))
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 24) = 0;
      *(_BYTE *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 48) = 1;
    }
    LODWORD(__p) = 1;
    sub_20B514490(a2, &__p);
    sub_20B1BDD54(a2, a3 + 8);
    if (!*(_BYTE *)(a2 + 131))
    {
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
          break;
        sub_20B51680C(a2, (uint64_t)&__p);
        if (v12 < 0)
        {
          if (v11 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
          {
LABEL_17:
            v6 = 0;
            if (v12 < 0)
              goto LABEL_20;
            goto LABEL_6;
          }
        }
        else if (v12 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
        {
          goto LABEL_17;
        }
        v6 = 1;
        if (v12 < 0)
LABEL_20:
          operator delete(__p);
LABEL_6:
        if (*(_BYTE *)(a2 + 131))
          v5 = 0;
        else
          v5 = v6;
      }
      while ((v5 & 1) != 0);
    }
  }
  else if (*(_BYTE *)(a3 + 48))
  {
    *(_BYTE *)(a3 + 48) = 0;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20B51680C(a2, (uint64_t)&__p);
      if (v12 < 0)
      {
        if (v11 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_36:
          v8 = 0;
          if (v12 < 0)
            goto LABEL_39;
          goto LABEL_25;
        }
      }
      else if (v12 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_36;
      }
      v8 = 1;
      if (v12 < 0)
LABEL_39:
        operator delete(__p);
LABEL_25:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

_QWORD *sub_20B1DF294(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v25;
  uint64_t v26[27];
  _BYTE v27[8];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20B0F9F8C(*a1 + 16, (uint64_t)v26);
    sub_20B0D0A00((uint64_t)v27, v26);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20B0DAD74(v4, (uint64_t)v27);
        if (!v42)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v25, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v8;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v33;
    v10 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v11;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v12;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v15 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v40;
LABEL_45:
    *((_QWORD *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20AECFAB8();
  sub_20B0C0D90(*a1 + 16, (uint64_t)v26);
  sub_20B0D0A00((uint64_t)v27, v26);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v7))(&v25, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v17;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v33;
    v19 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v20;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v21;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20B0DAD74(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v23 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  sub_20AF4EA3C((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192))
    sub_20AECFAB8();
LABEL_56:
  sub_20B0E2418((uint64_t)v26, a2, v4);
  return sub_20B1DF708((uint64_t)v26, a2, v3 + 200);
}

void sub_20B1DF6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B1DF708(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_20B42BA30(a2);
  result = sub_20B1DF7C0(a2, a3 + 8);
  v10 = a2[12];
  v11 = a2[9];
  a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
  a2[9] = v11 - 8;
  a2[12] = v10 - 8;
  return result;
}

void sub_20B1DF7AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1DF7C0(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  int v3;
  std::logic_error *exception;
  char v5;

  v2 = result[6];
  if (result[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v3 = *(unsigned __int8 *)(result[3] + v2);
  result[6] = v2 + 1;
  if (v3)
  {
    if (!*(_BYTE *)(a2 + 40))
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      *(_BYTE *)(a2 + 40) = 1;
    }
    return sub_20B1BE648((uint64_t)&v5, result, (_QWORD *)a2);
  }
  else if (*(_BYTE *)(a2 + 40))
  {
    *(_BYTE *)(a2 + 40) = 0;
  }
  return result;
}

void sub_20B1DF87C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1DF890(int *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  unsigned int v8;
  __int128 *v9;
  unsigned int v10;
  char v11;
  uint64_t v12;

  v5 = *a1;
  if (*a1 == 2)
  {
    v10 = 1;
    (*(void (**)(_QWORD *, unsigned int *))(*a2 + 104))(a2, &v10);
    if (v10 >= 2)
    {
      v8 = v10;
      v9 = sub_20B1DF9AC();
      sub_20B520518((std::string *)v9, v8, 1u);
    }
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(_QWORD *))(*a2 + 16))(a2);
  v11 = 0;
  result = (*(uint64_t (**)(_QWORD *, char *))(*a2 + 80))(a2, &v11);
  if (v11)
  {
    if (!*(_BYTE *)(a3 + 48))
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 24) = 0;
      *(_BYTE *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 48) = 1;
    }
    v12 = a2[1];
    result = sub_20B1BEFAC((int *)&v12, (uint64_t)a2, a3 + 8);
  }
  else if (*(_BYTE *)(a3 + 48))
  {
    *(_BYTE *)(a3 + 48) = 0;
  }
  if (v5 >= 1)
    return (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
  return result;
}

__int128 *sub_20B1DF9AC()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635718);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635718))
    return &xmmword_254635700;
  v2 = (char *)sub_20B1DFA88();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254635700, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254635710 = *((_QWORD *)v2 + 2);
    xmmword_254635700 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635700, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635718);
  return &xmmword_254635700;
}

void sub_20B1DFA70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635718);
  _Unwind_Resume(a1);
}

void *sub_20B1DFA88()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254635738);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254635738))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::UpdateSyncConfigurationSample]", qword_254635720);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635720, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635738);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254635758);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254635758))
    return &unk_254635740;
  sub_20B531658((uint64_t)qword_254635720, (uint64_t)&unk_254635740);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254635740, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635758);
  return &unk_254635740;
}

void sub_20B1DFB78(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635758);
  _Unwind_Resume(a1);
}

void sub_20B1DFB90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635738);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1DFBA8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  void **v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v16 = (void **)&v19 + 1;
    do
    {
      if (*((char *)v16 - 1) < 0)
        operator delete(*(v16 - 3));
      ++v1;
      strcpy((char *)v16 - 24, "cv3d.viz");
      *((_BYTE *)v16 - 1) = 8;
      *(_DWORD *)v16 = v1;
      v16 += 4;
    }
    while (v2 != v1);
    v15 = DWORD2(v19);
    v14 = DWORD2(v21);
    v13 = DWORD2(v23);
    v12 = DWORD2(v25);
    v11 = DWORD2(v27);
    v10 = DWORD2(v29);
    v9 = DWORD2(v31);
    v8 = DWORD2(v33);
    v7 = DWORD2(v35);
    v6 = DWORD2(v37);
    v5 = DWORD2(v39);
    v4 = DWORD2(v41);
    v3 = DWORD2(v43);
  }
  xmmword_25463CDA8 = v18;
  unk_25463CDB8 = v19;
  v18 = 0uLL;
  dword_25463CDC0 = v15;
  xmmword_25463CDC8 = v20;
  unk_25463CDD8 = v21;
  *(_QWORD *)&v19 = 0;
  v20 = 0uLL;
  *(_QWORD *)&v21 = 0;
  dword_25463CDE0 = v14;
  unk_25463CDF8 = v23;
  xmmword_25463CDE8 = v22;
  v22 = 0uLL;
  dword_25463CE00 = v13;
  unk_25463CE18 = v25;
  xmmword_25463CE08 = v24;
  *(_QWORD *)&v23 = 0;
  v24 = 0uLL;
  *(_QWORD *)&v25 = 0;
  dword_25463CE20 = v12;
  unk_25463CE38 = v27;
  xmmword_25463CE28 = v26;
  v26 = 0uLL;
  dword_25463CE40 = v11;
  unk_25463CE58 = v29;
  xmmword_25463CE48 = v28;
  *(_QWORD *)&v27 = 0;
  v28 = 0uLL;
  *(_QWORD *)&v29 = 0;
  dword_25463CE60 = v10;
  unk_25463CE78 = v31;
  xmmword_25463CE68 = v30;
  v30 = 0uLL;
  dword_25463CE80 = v9;
  unk_25463CE98 = v33;
  xmmword_25463CE88 = v32;
  *(_QWORD *)&v31 = 0;
  v32 = 0uLL;
  *(_QWORD *)&v33 = 0;
  dword_25463CEA0 = v8;
  unk_25463CEB8 = v35;
  xmmword_25463CEA8 = v34;
  v34 = 0uLL;
  dword_25463CEC0 = v7;
  qword_25463CED8 = v37;
  xmmword_25463CEC8 = v36;
  *(_QWORD *)&v35 = 0;
  v36 = 0uLL;
  *(_QWORD *)&v37 = 0;
  dword_25463CEE0 = v6;
  unk_25463CEF8 = v39;
  xmmword_25463CEE8 = v38;
  v38 = 0uLL;
  dword_25463CF00 = v5;
  unk_25463CF18 = v41;
  xmmword_25463CF08 = v40;
  *(_QWORD *)&v39 = 0;
  v40 = 0uLL;
  *(_QWORD *)&v41 = 0;
  dword_25463CF20 = v4;
  unk_25463CF38 = v43;
  xmmword_25463CF28 = v42;
  v42 = 0uLL;
  *(_QWORD *)&v43 = 0;
  dword_25463CF40 = v3;
  return sub_20B1DFE58((uint64_t)&v18);
}

uint64_t sub_20B1DFE58(uint64_t a1)
{
  if (*(char *)(a1 + 407) < 0)
  {
    operator delete(*(void **)(a1 + 384));
    if ((*(char *)(a1 + 375) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 343) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(char *)(a1 + 375) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 352));
  if ((*(char *)(a1 + 343) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 311) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(a1 + 320));
  if ((*(char *)(a1 + 311) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 279) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(a1 + 288));
  if ((*(char *)(a1 + 279) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 247) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(*(void **)(a1 + 256));
  if ((*(char *)(a1 + 247) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(a1 + 215) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*(void **)(a1 + 224));
  if ((*(char *)(a1 + 215) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 183) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(*(void **)(a1 + 192));
  if ((*(char *)(a1 + 183) & 0x80000000) == 0)
  {
LABEL_9:
    if ((*(char *)(a1 + 151) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(*(void **)(a1 + 160));
  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(*(void **)(a1 + 128));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_11:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_12:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_13;
LABEL_26:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
    goto LABEL_27;
  }
LABEL_25:
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_26;
LABEL_13:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_27:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20B1DFFB8(uint64_t a1, _QWORD *a2, _QWORD *a3, __int128 *a4, _QWORD *a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v22;

  v10 = (_QWORD *)sub_20AEC0644(a1, 1);
  *v10 = &off_24C410710;
  v11 = a2[1];
  v10[2] = *a2;
  v10[3] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = a3[1];
  *(_QWORD *)(a1 + 32) = *a3;
  *(_QWORD *)(a1 + 40) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 16);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (*((_BYTE *)a4 + 24))
  {
    if (*((char *)a4 + 23) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 48), *(void **)a4, *((_QWORD *)a4 + 1));
    }
    else
    {
      v17 = *a4;
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a4 + 2);
      *(_OWORD *)(a1 + 48) = v17;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 71) = 4;
    strcpy((char *)(a1 + 48), "logs");
  }
  if (*a5)
  {
    v18 = a5[1];
    *(_QWORD *)(a1 + 72) = *a5;
    *(_QWORD *)(a1 + 80) = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    return a1;
  }
  else
  {
    v22 = operator new(0x20uLL);
    v22[1] = 0;
    v22[2] = 0;
    *v22 = &off_24C410758;
    v22[3] = &off_24C41C820;
    *(_QWORD *)(a1 + 72) = v22 + 3;
    *(_QWORD *)(a1 + 80) = v22;
    return a1;
  }
}

void sub_20B1E0110(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  v4 = *(std::__shared_weak_count **)(v1 + 40);
  if (!v4)
  {
    sub_20AEC147C(v2);
    nullsub_1(v1);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v4);
  sub_20AEC147C(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1E0178(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = &off_24C410710;
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_14:
    operator delete(*(void **)(a1 + 48));
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      goto LABEL_8;
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_14;
LABEL_6:
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
LABEL_7:
    std::__shared_weak_count::__release_weak(v5);
LABEL_8:
  v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v6)
    return nullsub_1(a1);
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return nullsub_1(a1);
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return nullsub_1(a1);
}

void sub_20B1E0258(uint64_t a1)
{
  sub_20B1E0178(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B1E027C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  __int128 *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  size_t v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  size_t v26;
  __int128 *v27;
  uint64_t v28;
  int v29;
  size_t v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  const void *v36;
  __int128 *v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  __int128 __dst;
  unint64_t v60;
  int v61;
  __int128 v62;
  unint64_t v63;
  int v64;
  __int128 v65;
  unint64_t v66;
  __int128 v67;
  unint64_t v68;
  uint64_t (**v69)();
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  __int128 v74;
  std::__shared_weak_count *v75;
  int v76;
  __int128 v77;
  unint64_t v78;
  int v79;
  __int128 v80;
  unint64_t v81;
  __int128 __p;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  char v86;
  std::__shared_weak_count *v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v73 = v5;
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 32);
      v72 = v6;
      if (!v6)
      {
        v9 = v5;
LABEL_82:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v58 = __ldaxr(p_shared_owners);
        while (__stlxr(v58 - 1, p_shared_owners));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (*(char *)(a1 + 71) < 0)
      {
        v7 = *(_QWORD *)(a1 + 48);
        v8 = *(_QWORD *)(a1 + 56);
      }
      else
      {
        v7 = a1 + 48;
        v8 = *(unsigned __int8 *)(a1 + 71);
      }
      v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), v7, v8);
      v11 = *(__int128 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
      v12 = *(const char **)a2;
      v13 = strlen(*(const char **)a2);
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        sub_20AEC0138();
      v14 = v13;
      if (v13 >= 0x17)
      {
        v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v16 = v13 | 7;
        v17 = v16 + 1;
        p_dst = (__int128 *)operator new(v16 + 1);
        *((_QWORD *)&__dst + 1) = v14;
        v60 = v17 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v60) = v13;
        p_dst = &__dst;
        if (!v13)
        {
LABEL_16:
          *((_BYTE *)p_dst + v14) = 0;
          v61 = *(_DWORD *)(a2 + 24);
          v18 = *(const char **)(a2 + 32);
          v19 = strlen(v18);
          if (v19 > 0x7FFFFFFFFFFFFFF7)
            sub_20AEC0138();
          v20 = v19;
          if (v19 >= 0x17)
          {
            v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v19 | 7) != 0x17)
              v22 = v19 | 7;
            v23 = v22 + 1;
            v21 = (__int128 *)operator new(v22 + 1);
            *((_QWORD *)&v62 + 1) = v20;
            v63 = v23 | 0x8000000000000000;
            *(_QWORD *)&v62 = v21;
          }
          else
          {
            HIBYTE(v63) = v19;
            v21 = &v62;
            if (!v19)
            {
LABEL_24:
              *((_BYTE *)v21 + v20) = 0;
              v64 = *(_DWORD *)(a2 + 40) & ~(*(int *)(a2 + 40) >> 31);
              v24 = *(const char **)(a2 + 48);
              v25 = strlen(v24);
              if (v25 > 0x7FFFFFFFFFFFFFF7)
                sub_20AEC0138();
              v26 = v25;
              if (v25 >= 0x17)
              {
                v31 = v11;
                v32 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v25 | 7) != 0x17)
                  v32 = v25 | 7;
                v33 = v32 + 1;
                v27 = (__int128 *)operator new(v32 + 1);
                *((_QWORD *)&v65 + 1) = v26;
                v66 = v33 | 0x8000000000000000;
                *(_QWORD *)&v65 = v27;
                v11 = v31;
              }
              else
              {
                HIBYTE(v66) = v25;
                v27 = &v65;
                if (!v25)
                {
                  LOBYTE(v65) = 0;
                  v28 = *(_QWORD *)(a2 + 56);
                  v29 = *(_DWORD *)(v28 + 120);
                  if ((v29 & 0x10) == 0)
                    goto LABEL_28;
                  goto LABEL_34;
                }
              }
              memmove(v27, v24, v26);
              *((_BYTE *)v27 + v26) = 0;
              v28 = *(_QWORD *)(a2 + 56);
              v29 = *(_DWORD *)(v28 + 120);
              if ((v29 & 0x10) == 0)
              {
LABEL_28:
                if ((v29 & 8) == 0)
                {
                  v30 = 0;
                  HIBYTE(v68) = 0;
LABEL_39:
                  v37 = &v67;
                  goto LABEL_44;
                }
                v36 = *(const void **)(v28 + 40);
                v30 = *(_QWORD *)(v28 + 56) - (_QWORD)v36;
                if (v30 > 0x7FFFFFFFFFFFFFF7)
LABEL_88:
                  sub_20AEC0138();
LABEL_37:
                if (v30 >= 0x17)
                {
                  v38 = v11;
                  v39 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v30 | 7) != 0x17)
                    v39 = v30 | 7;
                  v40 = v39 + 1;
                  v37 = (__int128 *)operator new(v39 + 1);
                  *((_QWORD *)&v67 + 1) = v30;
                  v68 = v40 | 0x8000000000000000;
                  *(_QWORD *)&v67 = v37;
                  v11 = v38;
                }
                else
                {
                  HIBYTE(v68) = v30;
                  v37 = &v67;
                  if (!v30)
                    goto LABEL_39;
                }
                memmove(v37, v36, v30);
LABEL_44:
                *((_BYTE *)v37 + v30) = 0;
                v84 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72));
                v85 = v41;
                v86 = 0;
                v88 = 0;
                v89 = 0;
                v90 = 0;
                v91 = 0;
                v92 = 0;
                v93 = 0;
                v94 = 0;
                v95 = 0;
                v96 = 0;
                v74 = __dst;
                v75 = (std::__shared_weak_count *)v60;
                __dst = 0uLL;
                v60 = 0;
                v76 = v61;
                v77 = v62;
                v78 = v63;
                v62 = 0uLL;
                v63 = 0;
                v79 = v64;
                v42 = v66;
                v80 = v65;
                v65 = 0uLL;
                v66 = 0;
                v81 = v42;
                v83 = v68;
                __p = v67;
                v67 = 0uLL;
                v68 = 0;
                v43 = operator new();
                sub_20B1A8D94(v43, &v74, (uint64_t)&v84);
                v69 = &off_24C411E78;
                v70 = v43;
                v44 = (std::__shared_weak_count *)operator new();
                v44->__vftable = (std::__shared_weak_count_vtbl *)&off_24C411F70;
                v44->__shared_owners_ = 0;
                v44->__shared_weak_owners_ = 0;
                v44[1].__vftable = (std::__shared_weak_count_vtbl *)v43;
                if (SHIBYTE(v83) < 0)
                {
                  operator delete((void *)__p);
                  if ((SHIBYTE(v81) & 0x80000000) == 0)
                  {
LABEL_46:
                    if ((SHIBYTE(v78) & 0x80000000) == 0)
                      goto LABEL_47;
                    goto LABEL_76;
                  }
                }
                else if ((SHIBYTE(v81) & 0x80000000) == 0)
                {
                  goto LABEL_46;
                }
                operator delete((void *)v80);
                if ((SHIBYTE(v78) & 0x80000000) == 0)
                {
LABEL_47:
                  if ((SHIBYTE(v75) & 0x80000000) == 0)
                  {
LABEL_48:
                    sub_20AF4EA3C((uint64_t)&v84);
                    *(_QWORD *)&v74 = &off_24C411E78;
                    *((_QWORD *)&v74 + 1) = v43;
                    v75 = v44;
                    v70 = 0;
                    v71 = 0;
                    sub_20AF17488(&v84, v11, (uint64_t)&v74);
                    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, &v84);
                    v45 = v87;
                    if (v87)
                    {
                      v46 = (unint64_t *)&v87->__shared_owners_;
                      do
                        v47 = __ldaxr(v46);
                      while (__stlxr(v47 - 1, v46));
                      if (!v47)
                      {
                        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                        std::__shared_weak_count::__release_weak(v45);
                      }
                    }
                    v48 = v85;
                    if (v85)
                    {
                      v49 = (unint64_t *)&v85->__shared_owners_;
                      do
                        v50 = __ldaxr(v49);
                      while (__stlxr(v50 - 1, v49));
                      if (!v50)
                      {
                        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                        std::__shared_weak_count::__release_weak(v48);
                      }
                    }
                    v51 = v75;
                    if (v75)
                    {
                      v52 = (unint64_t *)&v75->__shared_owners_;
                      do
                        v53 = __ldaxr(v52);
                      while (__stlxr(v53 - 1, v52));
                      if (!v53)
                      {
                        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                        std::__shared_weak_count::__release_weak(v51);
                      }
                    }
                    v54 = v71;
                    if (v71)
                    {
                      v55 = (unint64_t *)&v71->__shared_owners_;
                      do
                        v56 = __ldaxr(v55);
                      while (__stlxr(v56 - 1, v55));
                      if (!v56)
                      {
                        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                        std::__shared_weak_count::__release_weak(v54);
                      }
                    }
                    if (SHIBYTE(v68) < 0)
                    {
                      operator delete((void *)v67);
                      if ((SHIBYTE(v66) & 0x80000000) == 0)
                      {
LABEL_70:
                        if ((SHIBYTE(v63) & 0x80000000) == 0)
                          goto LABEL_71;
                        goto LABEL_80;
                      }
                    }
                    else if ((SHIBYTE(v66) & 0x80000000) == 0)
                    {
                      goto LABEL_70;
                    }
                    operator delete((void *)v65);
                    if ((SHIBYTE(v63) & 0x80000000) == 0)
                    {
LABEL_71:
                      if ((SHIBYTE(v60) & 0x80000000) == 0)
                        goto LABEL_72;
                      goto LABEL_81;
                    }
LABEL_80:
                    operator delete((void *)v62);
                    if ((SHIBYTE(v60) & 0x80000000) == 0)
                    {
LABEL_72:
                      v9 = v73;
                      if (!v73)
                        return;
                      goto LABEL_82;
                    }
LABEL_81:
                    operator delete((void *)__dst);
                    v9 = v73;
                    if (!v73)
                      return;
                    goto LABEL_82;
                  }
LABEL_77:
                  operator delete((void *)v74);
                  goto LABEL_48;
                }
LABEL_76:
                operator delete((void *)v77);
                if ((SHIBYTE(v75) & 0x80000000) == 0)
                  goto LABEL_48;
                goto LABEL_77;
              }
LABEL_34:
              v34 = *(_QWORD *)(v28 + 112);
              v35 = *(_QWORD *)(v28 + 72);
              if (v34 < v35)
              {
                *(_QWORD *)(v28 + 112) = v35;
                v34 = v35;
              }
              v36 = *(const void **)(v28 + 64);
              v30 = v34 - (_QWORD)v36;
              if (v34 - (unint64_t)v36 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_88;
              goto LABEL_37;
            }
          }
          memmove(v21, v18, v20);
          goto LABEL_24;
        }
      }
      memmove(p_dst, v12, v14);
      goto LABEL_16;
    }
  }
}

void sub_20B1E092C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_20B07E4F4((uint64_t)&a43);
  sub_20B216B00((uint64_t)&a29);
  sub_20B216B00((uint64_t)&a24);
  sub_20B0CFD2C((uint64_t)&a10);
  sub_20AEC147C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B1E09C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a29 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  if ((a15 & 0x80000000) == 0)
  {
LABEL_4:
    sub_20AEC147C((uint64_t)&a36);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a10);
  sub_20AEC147C((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_20B1E0A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20AEC147C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B1E0A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20AEC147C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B1E0A6C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C410758;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B1E0A7C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C410758;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B1E0AB4(uint64_t a1)
{
  char *v2;
  char *v3;
  std::__shared_weak_count *v4;
  char *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;

  while (1)
  {
    v3 = *(char **)(a1 + 96);
    v2 = *(char **)(a1 + 104);
    if (v3 == v2)
      break;
    sub_20B1E0B8C(a1, *((_QWORD *)v2 - 2));
  }
  v4 = *(std::__shared_weak_count **)(a1 + 128);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    v3 = *(char **)(a1 + 96);
  }
  if (v3)
  {
    v5 = *(char **)(a1 + 104);
    v6 = v3;
    if (v5 != v3)
    {
      do
      {
        v7 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v3);
      v6 = *(char **)(a1 + 96);
    }
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v6);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  v10 = *(std::__shared_weak_count **)(a1 + 24);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  return a1;
}

uint64_t sub_20B1E0B8C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v4 = *(_QWORD **)(a1 + 96);
  v3 = *(_QWORD **)(a1 + 104);
  if (v4 != v3)
  {
    while (*v4 != a2)
    {
      v4 += 2;
      if (v4 == v3)
        return 0;
    }
  }
  if (v4 == v3)
    return 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1);
  v5 = v4 + 2;
  v6 = *(_QWORD **)(a1 + 104);
  if (v4 + 2 != v6)
  {
    do
    {
      v7 = *(_OWORD *)v5;
      *v5 = 0;
      v5[1] = 0;
      v8 = (std::__shared_weak_count *)v4[1];
      *(_OWORD *)v4 = v7;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v5 += 2;
      v4 += 2;
    }
    while (v5 != v6);
    v5 = *(_QWORD **)(a1 + 104);
  }
  while (v5 != v4)
  {
    v12 = (std::__shared_weak_count *)*(v5 - 1);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v5 -= 2;
  }
  *(_QWORD *)(a1 + 104) = v4;
  return 1;
}

uint64_t sub_20B1E0CDC(uint64_t a1)
{
  return sub_20B1E0AB4(a1 - 8);
}

void sub_20B1E0CE4(uint64_t a1)
{
  sub_20B1E0AB4(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B1E0D08(uint64_t a1)
{
  sub_20B1E0AB4(a1 - 8);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B1E0D30(uint64_t **a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  char *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;

  v6 = operator new(0xA0uLL);
  v8 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C410918;
  v9 = (char *)(v6 + 3);
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v6[3] = &off_24C4107A8;
  v6[4] = &unk_24C4107E8;
  v6[5] = 0;
  v6[6] = 0;
  v6[7] = 850045863;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v6[18] = v8;
    v6[19] = v7;
    std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    v6[18] = v8;
    v6[19] = 0;
  }
  *a3 = v9;
  a3[1] = v6;
  v14 = v6 + 2;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v6[5] = v9;
  v6[6] = v6;
  v16 = *a1;
  v17 = a1[1];
  while (v16 != v17)
  {
    v18 = *v16;
    v19 = (std::__shared_weak_count *)v16[1];
    v37 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
      v22 = (_QWORD *)*a3;
      v36 = v19;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
      v35 = v18;
      v26 = (uint64_t *)v22[12];
      v25 = (uint64_t *)v22[13];
      v24 = (uint64_t)(v22 + 12);
      if (v26 != v25)
      {
LABEL_22:
        while (*v26 != v18)
        {
          v26 += 2;
          if (v26 == v25)
          {
            v26 = v25;
            break;
          }
        }
      }
    }
    else
    {
      v22 = (_QWORD *)*a3;
      v35 = *v16;
      v36 = 0;
      v26 = *(uint64_t **)(*a3 + 96);
      v25 = *(uint64_t **)(*a3 + 104);
      v24 = *a3 + 96;
      if (v26 != v25)
        goto LABEL_22;
    }
    if (v26 == v25)
    {
      if ((unint64_t)v25 >= v22[14])
      {
        v29 = sub_20B1E17A0(v24, v18, (uint64_t)v19);
        v18 = v35;
      }
      else
      {
        *v25 = v18;
        v25[1] = (uint64_t)v19;
        if (v19)
        {
          v27 = (unint64_t *)&v19->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = v25 + 2;
      }
      v22[13] = v29;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v18 + 24))(v18, v22);
      v19 = v36;
      if (!v36)
        goto LABEL_38;
    }
    else if (!v19)
    {
      goto LABEL_38;
    }
    v30 = (unint64_t *)&v19->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      v32 = v37;
      if (!v37)
        goto LABEL_12;
      goto LABEL_39;
    }
LABEL_38:
    v32 = v37;
    if (!v37)
      goto LABEL_12;
LABEL_39:
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
LABEL_12:
    v16 += 2;
  }
}

void sub_20B1E0F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  sub_20AEC147C(v11);
  _Unwind_Resume(a1);
}

BOOL sub_20B1E0FBC(uint64_t a1, uint64_t *a2)
{
  std::mutex *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(uint64_t **)(a1 + 96);
  v10 = *(uint64_t **)(a1 + 104);
  if (v9 != v10)
  {
    while (*v9 != v6)
    {
      v9 += 2;
      if (v9 == v10)
      {
        v9 = *(uint64_t **)(a1 + 104);
        break;
      }
    }
  }
  if (v9 == v10)
  {
    if ((unint64_t)v10 >= *(_QWORD *)(a1 + 112))
    {
      v13 = sub_20B1E17A0(a1 + 96, v6, (uint64_t)v5);
    }
    else
    {
      *v10 = v6;
      v10[1] = (uint64_t)v5;
      if (v5)
      {
        v11 = (unint64_t *)&v5->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = v10 + 2;
    }
    *(_QWORD *)(a1 + 104) = v13;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, a1);
  }
  if (v5)
  {
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::mutex::unlock(v4);
  return v9 == v10;
}

void sub_20B1E10F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_20AEC147C((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *sub_20B1E110C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;

  result = *(std::__shared_weak_count **)(a1 + 128);
  if (result && (result = std::__shared_weak_count::lock(result)) != 0)
  {
    *a2 = *(_QWORD *)(a1 + 120);
    a2[1] = result;
  }
  else
  {
    *a2 = 0;
    a2[1] = result;
  }
  return result;
}

std::__shared_weak_count *sub_20B1E1158@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;

  *a2 = 0;
  a2[1] = 0;
  result = *(std::__shared_weak_count **)(a1 + 128);
  if (result)
  {
    result = std::__shared_weak_count::lock(result);
    a2[1] = result;
    if (result)
      *a2 = *(_QWORD *)(a1 + 120);
  }
  return result;
}

std::__shared_weak_count *sub_20B1E1198@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;

  result = *(std::__shared_weak_count **)(a1 + 24);
  if (result && (result = std::__shared_weak_count::lock(result)) != 0)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    a2[1] = result;
  }
  else
  {
    *a2 = 0;
    a2[1] = result;
  }
  return result;
}

uint64_t sub_20B1E11E4(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  _QWORD *i;

  v4 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  v5 = *(_QWORD **)(a1 + 96);
  for (i = *(_QWORD **)(a1 + 104); v5 != i; v5 += 2)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, a2);
  std::mutex::unlock(v4);
  return a1 + 8;
}

void sub_20B1E125C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1E1270(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  _QWORD *i;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = *(_QWORD **)(a1 + 88);
  for (i = *(_QWORD **)(a1 + 96); v5 != i; v5 += 2)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, a2);
  std::mutex::unlock(v4);
  return a1;
}

void sub_20B1E12E4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1E12F8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B1E1360(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20B1E13BC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B1E1424(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B1E148C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::mutex *v5;
  _QWORD *v6;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = (std::mutex *)(v4 + 32);
  std::mutex::lock((std::mutex *)(v4 + 32));
  v6 = *(_QWORD **)(v4 + 96);
  for (i = *(_QWORD **)(v4 + 104); v6 != i; v6 += 2)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, a2);
  std::mutex::unlock(v5);
  return a1 + 8;
}

void sub_20B1E1504(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1E1518(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::mutex *v5;
  _QWORD *v6;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = (std::mutex *)(v4 + 32);
  std::mutex::lock((std::mutex *)(v4 + 32));
  v6 = *(_QWORD **)(v4 + 96);
  for (i = *(_QWORD **)(v4 + 104); v6 != i; v6 += 2)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, a2);
  std::mutex::unlock(v5);
  return a1;
}

void sub_20B1E1590(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *sub_20B1E15A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *result;

  v3 = *(_QWORD *)(a1 + 16);
  result = *(std::__shared_weak_count **)(v3 + 128);
  if (result && (result = std::__shared_weak_count::lock(result)) != 0)
  {
    *a2 = *(_QWORD *)(v3 + 120);
    a2[1] = result;
  }
  else
  {
    *a2 = 0;
    a2[1] = result;
  }
  return result;
}

std::__shared_weak_count *sub_20B1E15F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *result;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = 0;
  a2[1] = 0;
  result = *(std::__shared_weak_count **)(v2 + 128);
  if (result)
  {
    result = std::__shared_weak_count::lock(result);
    a2[1] = result;
    if (result)
      *a2 = *(_QWORD *)(v2 + 120);
  }
  return result;
}

std::__shared_weak_count *sub_20B1E1630@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *result;

  v3 = *(_QWORD *)(a1 + 16);
  result = *(std::__shared_weak_count **)(v3 + 24);
  if (result && (result = std::__shared_weak_count::lock(result)) != 0)
  {
    *a2 = *(_QWORD *)(v3 + 16);
    a2[1] = result;
  }
  else
  {
    *a2 = 0;
    a2[1] = result;
  }
  return result;
}

_QWORD *sub_20B1E167C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      sub_20AEC60B8();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_20B1E1724(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B1E17A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  __int128 v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  v4 = *(_QWORD **)a1;
  v5 = *(_QWORD **)(a1 + 8);
  v6 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 60)
    sub_20AEC60B8();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v4;
  if (v8 >> 3 > v7)
    v7 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  if (v7 >> 60)
    sub_20AEC60CC();
  v11 = 16 * v7;
  v12 = (char *)operator new(16 * v7);
  v13 = &v12[16 * v6];
  *(_QWORD *)v13 = a2;
  *((_QWORD *)v13 + 1) = a3;
  if (a3)
  {
    v14 = (unint64_t *)(a3 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v4 = *(_QWORD **)a1;
    v5 = *(_QWORD **)(a1 + 8);
  }
  v16 = &v12[v11];
  v17 = v13 + 16;
  if (v5 == v4)
  {
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
  }
  else
  {
    do
    {
      v18 = *((_OWORD *)v5 - 1);
      v5 -= 2;
      *((_OWORD *)v13 - 1) = v18;
      v13 -= 16;
      *v5 = 0;
      v5[1] = 0;
    }
    while (v5 != v4);
    v4 = *(_QWORD **)a1;
    v19 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    while (v19 != v4)
    {
      v20 = (std::__shared_weak_count *)*(v19 - 1);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v19 -= 2;
    }
  }
  if (v4)
    operator delete(v4);
  return v17;
}

void sub_20B1E18F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C410918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B1E1900(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C410918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B1E1930(uint64_t a1)
{
  return sub_20B1E0AB4(a1 + 24);
}

_UNKNOWN **sub_20B1E193C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF50);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CF50))
    return &off_253EC3190;
  __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253EC3190, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463CF50);
  return &off_253EC3190;
}

double sub_20B1E19B0@<D0>(char a1@<W1>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  char *v4;
  _QWORD *v5;
  __int128 v6;
  __n128 *v7;
  char *v8;
  __int128 v9;
  const char *v10;
  char *v11;
  char *v12;
  char *v13;

  switch(a1)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "no error");
      return a3.n128_f64[0];
    case 1:
      *(_BYTE *)(a2 + 23) = 13;
      strcpy((char *)a2, "unknown error");
      return a3.n128_f64[0];
    case 2:
      v4 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v4;
      *(_OWORD *)(a2 + 8) = xmmword_20B5E3590;
      strcpy(v4, "filesystem operation failed");
      a3.n128_u64[0] = *(_QWORD *)"operation failed";
      return a3.n128_f64[0];
    case 3:
      v5 = operator new(0x20uLL);
      *(_QWORD *)a2 = v5;
      v6 = xmmword_20B5E35C0;
      v7 = (__n128 *)"caught runtime exception";
      goto LABEL_11;
    case 4:
      *(_BYTE *)(a2 + 23) = 15;
      strcpy((char *)a2, "data is invalid");
      return a3.n128_f64[0];
    case 5:
      *(_BYTE *)(a2 + 23) = 20;
      a3.n128_u64[0] = *(_QWORD *)"timestamp is invalid";
      strcpy((char *)a2, "timestamp is invalid");
      return a3.n128_f64[0];
    case 6:
      v8 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v8;
      v9 = xmmword_20B5B35F0;
      v10 = "timestamping is inconsistent";
      goto LABEL_15;
    case 7:
      v5 = operator new(0x20uLL);
      *(_QWORD *)a2 = v5;
      v6 = xmmword_20B5E35C0;
      v7 = (__n128 *)"processing queue is full";
LABEL_11:
      *(_OWORD *)(a2 + 8) = v6;
      a3 = *v7;
      *(__n128 *)v5 = *v7;
      v5[2] = v7[1].n128_u64[0];
      *((_BYTE *)v5 + 24) = 0;
      return a3.n128_f64[0];
    case 8:
      v11 = (char *)operator new(0x40uLL);
      *(_QWORD *)a2 = v11;
      *(_OWORD *)(a2 + 8) = xmmword_20B5E9D70;
      strcpy(v11, "chosen common I/O format is not supported for the data type");
      a3.n128_u64[0] = *(_QWORD *)"or the data type";
      return a3.n128_f64[0];
    case 9:
      v12 = (char *)operator new(0x28uLL);
      *(_QWORD *)a2 = v12;
      *(_OWORD *)(a2 + 8) = xmmword_20B5B4860;
      a3.n128_u64[0] = *(_QWORD *)"data package unknown to serializer";
      strcpy(v12, "data package unknown to serializer");
      return a3.n128_f64[0];
    case 10:
      v8 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v8;
      v9 = xmmword_20B5B35F0;
      v10 = "data type unknown to package";
LABEL_15:
      *(_OWORD *)(a2 + 8) = v9;
      *(_OWORD *)v8 = *(_OWORD *)v10;
      a3 = *(__n128 *)(v10 + 12);
      *(__n128 *)(v8 + 12) = a3;
      v8[28] = 0;
      break;
    case 11:
      *(_BYTE *)(a2 + 23) = 19;
      a3.n128_u64[0] = *(_QWORD *)"failed to load data";
      strcpy((char *)a2, "failed to load data");
      break;
    case 12:
      *(_BYTE *)(a2 + 23) = 20;
      a3.n128_u64[0] = *(_QWORD *)"sequence i/o failure";
      strcpy((char *)a2, "sequence i/o failure");
      break;
    case 13:
      v13 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v13;
      *(_OWORD *)(a2 + 8) = xmmword_20B5C7C80;
      strcpy(v13, "unsupported or invalid sequence");
      a3.n128_u64[0] = *(_QWORD *)"invalid sequence";
      break;
    default:
      *(_BYTE *)(a2 + 23) = 18;
      a3.n128_u64[0] = *(_QWORD *)"unknown error code";
      strcpy((char *)a2, "unknown error code");
      break;
  }
  return a3.n128_f64[0];
}

__n128 sub_20B1E1D0C@<Q0>(int a1@<W1>, uint64_t a2@<X8>, __n128 result@<Q0>)
{
  _OWORD *v4;
  __int128 v5;
  const char *v6;
  char *v7;
  __int128 v8;
  const char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;

  switch(a1)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "no error");
      return result;
    case 1:
      *(_BYTE *)(a2 + 23) = 13;
      strcpy((char *)a2, "unknown error");
      return result;
    case 2:
      v4 = operator new(0x28uLL);
      *(_QWORD *)a2 = v4;
      v5 = xmmword_20B5E9D90;
      v6 = "server Receive() threw exception";
      goto LABEL_19;
    case 3:
      *(_BYTE *)(a2 + 23) = 19;
      result.n128_u64[0] = *(_QWORD *)"server send failure";
      strcpy((char *)a2, "server send failure");
      return result;
    case 4:
      v7 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v7;
      v8 = xmmword_20B5E35D0;
      v9 = "server can't reach client";
      goto LABEL_12;
    case 5:
      v10 = (char *)operator new(0x30uLL);
      *(_QWORD *)a2 = v10;
      *(_OWORD *)(a2 + 8) = xmmword_20B5E35B0;
      strcpy(v10, "server cannot serialize data of unknown package");
      result.n128_u64[0] = *(_QWORD *)" unknown package";
      return result;
    case 6:
      v11 = (char *)operator new(0x40uLL);
      *(_QWORD *)a2 = v11;
      *(_OWORD *)(a2 + 8) = xmmword_20B5E9DA0;
      strcpy(v11, "server cannot serialize package data of unknown data type");
      result.n128_u64[0] = *(_QWORD *)"nknown data type";
      return result;
    case 7:
      v12 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v12;
      *(_OWORD *)(a2 + 8) = xmmword_20B5E3590;
      strcpy(v12, "server serialization failed");
      result.n128_u64[0] = *(_QWORD *)"alization failed";
      return result;
    case 8:
      v4 = operator new(0x28uLL);
      *(_QWORD *)a2 = v4;
      v5 = xmmword_20B5E9D90;
      v6 = "client Receive() threw exception";
LABEL_19:
      *(_OWORD *)(a2 + 8) = v5;
      result = *(__n128 *)v6;
      v14 = *((_OWORD *)v6 + 1);
      *v4 = *(_OWORD *)v6;
      v4[1] = v14;
      *((_BYTE *)v4 + 32) = 0;
      return result;
    case 9:
      *(_BYTE *)(a2 + 23) = 19;
      result.n128_u64[0] = *(_QWORD *)"client send failure";
      strcpy((char *)a2, "client send failure");
      return result;
    case 10:
      v7 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v7;
      v8 = xmmword_20B5E35D0;
      v9 = "client can't reach server";
LABEL_12:
      *(_OWORD *)(a2 + 8) = v8;
      *(_OWORD *)v7 = *(_OWORD *)v9;
      result = *(__n128 *)(v9 + 9);
      *(__n128 *)(v7 + 9) = result;
      v7[25] = 0;
      break;
    case 11:
      v13 = (char *)operator new(0x28uLL);
      *(_QWORD *)a2 = v13;
      *(_OWORD *)(a2 + 8) = xmmword_20B5E9D80;
      result.n128_u64[0] = *(_QWORD *)"client does not have syncing enabled";
      strcpy(v13, "client does not have syncing enabled");
      break;
    case 12:
      *(_BYTE *)(a2 + 23) = 7;
      strcpy((char *)a2, "timeout");
      break;
    case 13:
      *(_BYTE *)(a2 + 23) = 15;
      strcpy((char *)a2, "invalid peer ID");
      break;
    case 15:
      *(_BYTE *)(a2 + 23) = 19;
      result.n128_u64[0] = *(_QWORD *)"configuration issue";
      strcpy((char *)a2, "configuration issue");
      break;
    default:
      *(_BYTE *)(a2 + 23) = 18;
      result.n128_u64[0] = *(_QWORD *)"unknown error code";
      strcpy((char *)a2, "unknown error code");
      break;
  }
  return result;
}

void sub_20B1E208C(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4[2];
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;

  sub_20B1E21CC("ignoring data of timestamp ", a1, (uint64_t)"; exporter is exporting only the first encountered timestamp, which was '",
    a2,
    (uint64_t)"'");
  if (SHIBYTE(v5) < 0)
  {
    sub_20AEC60F4(__p, v4[0], (unint64_t)v4[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v4;
    v7 = v5;
  }
  v8 = 1;
  LOBYTE(v9) = 0;
  v13 = 0;
  v14 = 1;
  sub_20B0C5BC0(5u, (__int128 *)__p, a3);
  if (!v14)
    goto LABEL_11;
  if (v13)
  {
    if ((v12 & 0x80000000) == 0)
    {
      if ((v10 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_14:
      operator delete(v9);
      if (!v8)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v11);
    if (v10 < 0)
      goto LABEL_14;
  }
LABEL_8:
  if (!v8)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
LABEL_11:
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
}

void sub_20B1E21A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1E21CC(char *__s, uint64_t *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t result;
  char v10;
  char v11;
  _DWORD v12[6];
  int v13;
  _QWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v13 = 0;
  sub_20B07E63C(v12, __s);
  sub_20B1E4030((uint64_t)&v11, (uint64_t)v12, a2);
  v14 = (_QWORD **)v12;
  v15 = a3;
  v16 = v12;
  v17 = a3;
  v18 = a3;
  if (v13 == -1)
    sub_20AECFAB8();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C410A60[v13])(&v19, v12);
  sub_20B0D1CFC((uint64_t)&v10, (uint64_t)v12, a4);
  v14 = (_QWORD **)v12;
  v15 = a5;
  v16 = v12;
  v17 = a5;
  v18 = a5;
  if (v13 == -1)
    sub_20AECFAB8();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C410A78[v13])(&v19, v12);
  if (v13 == -1)
    sub_20AECFAB8();
  v14 = &v19;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C410A90[v13])(&v14, v12);
  if (v13 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C410A18[v13])(&v14, v12);
  return result;
}

void sub_20B1E2328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E233C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E2350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E2364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E2378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E238C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E23A0(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  void *v5[2];
  uint64_t v6;
  void *__p[2];
  uint64_t v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;

  v4 = -*a2;
  sub_20B1E24F0("received data of timestamp ", a1, (std::string::size_type)" ", &v4, (std::string::size_type)" before newest timestamp");
  if (SHIBYTE(v6) < 0)
  {
    sub_20AEC60F4(__p, v5[0], (unint64_t)v5[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v5;
    v8 = v6;
  }
  v9 = 1;
  LOBYTE(v10) = 0;
  v14 = 0;
  v15 = 1;
  sub_20B0C5BC0(6u, (__int128 *)__p, a3);
  if (!v15)
    goto LABEL_11;
  if (v14)
  {
    if ((v13 & 0x80000000) == 0)
    {
      if ((v11 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_14:
      operator delete(v10);
      if (!v9)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v12);
    if (v11 < 0)
      goto LABEL_14;
  }
LABEL_8:
  if (!v9)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
LABEL_11:
  if (SHIBYTE(v6) < 0)
    operator delete(v5[0]);
}

void sub_20B1E24C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1E24F0(char *__s, uint64_t *a2, std::string::size_type a3, uint64_t *a4, std::string::size_type a5)
{
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  uint64_t result;
  char v14;
  _DWORD v15[6];
  int v16;
  void *__p[2];
  std::string::size_type v18;
  std::string v19;
  void **v20;
  void **v21;
  void *v22[2];
  unsigned __int8 v23;
  uint64_t v24;
  std::string v25;

  v16 = 0;
  sub_20B07E63C(v15, __s);
  sub_20B1E4030((uint64_t)&v14, (uint64_t)v15, a2);
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  v19.__r_.__value_.__l.__size_ = a3;
  v19.__r_.__value_.__r.__words[2] = (std::string::size_type)v15;
  v20 = (void **)a3;
  v21 = (void **)a3;
  if (v16 == -1)
    sub_20AECFAB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  ((void (*)(std::string *, _DWORD *))off_24C410A78[v16])(&v25, v15);
  v24 = *a4;
  sub_20B1E487C(&v24);
  std::string::push_back(&v25, 32);
  v19 = v25;
  memset(&v25, 0, sizeof(v25));
  sub_20B52C584(1, 1000, v22);
  if ((v23 & 0x80u) == 0)
    v9 = (const std::string::value_type *)v22;
  else
    v9 = (const std::string::value_type *)v22[0];
  if ((v23 & 0x80u) == 0)
    v10 = v23;
  else
    v10 = (std::string::size_type)v22[1];
  v11 = std::string::append(&v19, v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v18 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (((char)v23 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_20:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
  operator delete(v22[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_10:
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_11;
LABEL_21:
  operator delete(v25.__r_.__value_.__l.__data_);
LABEL_11:
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  v19.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
  v19.__r_.__value_.__r.__words[2] = (std::string::size_type)v15;
  v20 = __p;
  v21 = __p;
  if (v16 == -1)
    sub_20AECFAB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  ((void (*)(std::string *, _DWORD *))off_24C410A48[v16])(&v25, v15);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  v19.__r_.__value_.__l.__size_ = a5;
  v19.__r_.__value_.__r.__words[2] = (std::string::size_type)v15;
  v20 = (void **)a5;
  v21 = (void **)a5;
  if (v16 == -1)
    sub_20AECFAB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  ((void (*)(std::string *, _DWORD *))off_24C410AA8[v16])(&v25, v15);
  if (v16 == -1)
    sub_20AECFAB8();
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  result = ((uint64_t (*)(std::string *, _DWORD *))off_24C410A90[v16])(&v19, v15);
  if (v16 != -1)
    return ((uint64_t (*)(std::string *, _DWORD *))off_24C410A18[v16])(&v19, v15);
  return result;
}

void sub_20B1E2760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  if (*(char *)(v28 - 81) < 0)
  {
    operator delete(*(void **)(v28 - 104));
    if ((a27 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 - 49) & 0x80000000) == 0)
      {
LABEL_8:
        sub_20AECFA60((uint64_t)&a11);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(*(void **)(v27 + 8));
      sub_20AECFA60((uint64_t)&a11);
      _Unwind_Resume(a1);
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v28 - 49) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20B1E2824(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  _DWORD *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  void *v12;
  std::string *v13;
  uint64_t v14;
  std::string v15;
  std::string __p;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  char v23;
  _DWORD v24[6];
  int v25;
  std::string v26;
  std::string **v27;
  std::string *v28;
  std::string *v29;
  _DWORD *v30;
  std::string *v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v25 = 0;
    sub_20B02E204(v24, ", max queue size ");
    std::to_string(&v26, a2);
    v28 = (std::string *)v24;
    v29 = &v26;
    v30 = v24;
    v31 = &v26;
    v32[0] = &v26;
    if (v25 == -1)
      sub_20AECFAB8();
    v27 = &v28;
    ((void (*)(std::string ***, _DWORD *))off_24C410A48[v25])(&v27, v24);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (v25 == -1)
      sub_20AECFAB8();
    v28 = &v26;
    ((void (*)(void **__return_ptr, std::string **, _DWORD *))off_24C410A90[v25])(&v12, &v28, v24);
    if (v25 != -1)
      ((void (*)(std::string **, _DWORD *))off_24C410A18[v25])(&v28, v24);
    v7 = HIBYTE(v14);
    v8 = v12;
    v9 = v13;
  }
  else
  {
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
  v10 = (std::string *)*(unsigned __int8 *)(a1 + 23);
  if ((char)v10 >= 0)
    v11 = (std::string *)a1;
  else
    v11 = *(std::string **)a1;
  if ((char)v10 < 0)
    v10 = *(std::string **)(a1 + 8);
  v28 = v11;
  v29 = v10;
  if ((v7 & 0x80u) == 0)
  {
    v8 = &v12;
    v9 = (std::string *)v7;
  }
  v30 = v8;
  v31 = v9;
  sub_20AECFDF8((uint64_t)&v28, (uint64_t)v32, 0, 0, &v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    __p = v15;
  v17 = 1;
  LOBYTE(v18) = 0;
  v22 = 0;
  v23 = 1;
  sub_20B0C5BC0(7u, (__int128 *)&__p, a4);
  if (v23)
  {
    if (!v22)
      goto LABEL_24;
    if (v21 < 0)
    {
      operator delete(v20);
      if ((v19 & 0x80000000) == 0)
      {
LABEL_24:
        if (!v17)
          goto LABEL_27;
LABEL_25:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_27;
      }
    }
    else if ((v19 & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v18);
    if (!v17)
      goto LABEL_27;
    goto LABEL_25;
  }
LABEL_27:
  if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      return;
LABEL_31:
    operator delete(v12);
    return;
  }
  operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14) < 0)
    goto LABEL_31;
}

void sub_20B1E2AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_20B1E2B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (*(char *)(v29 - 105) < 0)
  {
    operator delete(*(void **)(v29 - 128));
    sub_20AECFA60((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20B1E2B24);
}

void sub_20B1E2B58(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  std::string v8;
  std::string __p;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  char v15;
  char v16;
  _QWORD v17[8];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v17[0] = "Cannot save data as '";
  v17[1] = 21;
  v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  if ((v4 & 0x80u) != 0)
    v4 = a1[1];
  v17[2] = v5;
  v17[3] = v4;
  v17[4] = "'. Reason: ";
  v17[5] = 11;
  v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  if ((v6 & 0x80u) != 0)
    v6 = a2[1];
  v17[6] = v7;
  v17[7] = v6;
  sub_20AECFDF8((uint64_t)v17, (uint64_t)&v18, 0, 0, &v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&__p, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  else
    __p = v8;
  v10 = 1;
  LOBYTE(v11) = 0;
  v15 = 0;
  v16 = 1;
  sub_20B0C5BC0(8u, (__int128 *)&__p, a3);
  if (v16)
  {
    if (!v15)
      goto LABEL_18;
    if (v14 < 0)
    {
      operator delete(v13);
      if ((v12 & 0x80000000) == 0)
      {
LABEL_18:
        if (!v10)
          goto LABEL_21;
LABEL_19:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_21;
      }
    }
    else if ((v12 & 0x80000000) == 0)
    {
      goto LABEL_18;
    }
    operator delete(v11);
    if (!v10)
      goto LABEL_21;
    goto LABEL_19;
  }
LABEL_21:
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_20B1E2CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B1E2D0C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  std::string v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;
  std::string v14;
  std::string __dst;
  char v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  char v21;
  char v22;
  const char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  if (*((char *)a1 + 23) < 0)
  {
    v4 = (uint64_t *)*a1;
  }
  else
  {
    v3 = *((unsigned __int8 *)a1 + 23);
    v4 = a1;
  }
  if (v3)
  {
    v23 = "Package id '";
    v24 = 12;
    v25 = v4;
    v26 = v3;
    v28 = 222;
    sub_20AECFDF8((uint64_t)&v23, (uint64_t)&v29, 0, 0, &v14);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      sub_20AEC60F4(&v6, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    else
      v6 = v14;
    v7 = 1;
    LOBYTE(v8) = 0;
    v12 = 0;
    v13 = 1;
    sub_20B0C5BC0(9u, (__int128 *)&v6, a2);
    if (v13)
    {
      if (!v12)
        goto LABEL_14;
      if (v11 < 0)
      {
        operator delete(v10);
        if ((v9 & 0x80000000) == 0)
        {
LABEL_14:
          if (!v7)
            goto LABEL_28;
          goto LABEL_15;
        }
      }
      else if ((v9 & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(v8);
      if (v7)
      {
LABEL_15:
        if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_28;
        v5 = (void *)v6.__r_.__value_.__r.__words[0];
        goto LABEL_27;
      }
    }
  }
  else
  {
    v23 = "Package id '";
    v24 = 12;
    v25 = v4;
    v26 = 0;
    v27 = "' encountered during loading is unrecognized. An empty package name indicates a serialization error (e.g. inva"
          "lid data in the stream)";
    v28 = 133;
    sub_20AECFDF8((uint64_t)&v23, (uint64_t)&v29, 0, 0, &v14);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      sub_20AEC60F4(&__dst, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    else
      __dst = v14;
    v16 = 1;
    LOBYTE(v17) = 0;
    v21 = 0;
    v22 = 1;
    sub_20B0C5BC0(9u, (__int128 *)&__dst, a2);
    if (v22)
    {
      if (v21)
      {
        if (v20 < 0)
          operator delete(__p);
        if (v18 < 0)
          operator delete(v17);
      }
      if (v16 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        v5 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_27:
        operator delete(v5);
      }
    }
  }
LABEL_28:
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_20B1E2F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B1E2F90(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;
  void *v14[2];
  uint64_t v15;
  void *__dst[2];
  uint64_t v17;
  char v18;
  void *v19;
  char v20;
  void *__p;
  char v22;
  char v23;
  char v24;
  _DWORD v25[6];
  int v26;
  std::string v27;
  std::string **v28;
  std::string *v29;
  std::string *v30;
  _DWORD *v31;
  std::string *v32;
  std::string *v33;

  if (*(_DWORD *)(a1 + 24))
  {
    v26 = 0;
    sub_20AF6BC08(v25, "Package '");
    v29 = (std::string *)v25;
    v30 = (std::string *)a1;
    v31 = v25;
    v32 = (std::string *)a1;
    v33 = (std::string *)a1;
    if (v26 == -1)
      sub_20AECFAB8();
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    ((void (*)(std::string *, _DWORD *))off_24C410AC0[v26])(&v27, v25);
    v29 = (std::string *)v25;
    v30 = (std::string *)"' data type id ";
    v31 = v25;
    v32 = (std::string *)"' data type id ";
    v33 = (std::string *)"' data type id ";
    if (v26 == -1)
      sub_20AECFAB8();
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    ((void (*)(std::string *, _DWORD *))off_24C410AD8[v26])(&v27, v25);
    std::to_string(&v27, *(_DWORD *)(a1 + 24));
    v29 = (std::string *)v25;
    v30 = &v27;
    v31 = v25;
    v32 = &v27;
    v33 = &v27;
    if (v26 == -1)
      sub_20AECFAB8();
    v28 = &v29;
    ((void (*)(std::string ***, _DWORD *))off_24C410A48[v26])(&v28, v25);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    v29 = (std::string *)v25;
    v30 = (std::string *)" encountered during loading is unrecognized. The loader's package version may be too old.";
    v31 = v25;
    v32 = (std::string *)" encountered during loading is unrecognized. The loader's package version may be too old.";
    v33 = (std::string *)" encountered during loading is unrecognized. The loader's package version may be too old.";
    if (v26 == -1)
      sub_20AECFAB8();
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    ((void (*)(std::string *, _DWORD *))off_24C410B08[v26])(&v27, v25);
    if (v26 == -1)
      sub_20AECFAB8();
    v29 = &v27;
    ((void (*)(void **__return_ptr, std::string **, _DWORD *))off_24C410A90[v26])(v14, &v29, v25);
    if (v26 != -1)
      ((void (*)(std::string **, _DWORD *))off_24C410A18[v26])(&v29, v25);
    if (SHIBYTE(v15) < 0)
    {
      sub_20AEC60F4(&v5, v14[0], (unint64_t)v14[1]);
    }
    else
    {
      v5 = *(_OWORD *)v14;
      v6 = v15;
    }
    v7 = 1;
    LOBYTE(v8) = 0;
    v12 = 0;
    v13 = 1;
    sub_20B0C5BC0(0xAu, &v5, a2);
    if (v13)
    {
      if (!v12)
        goto LABEL_29;
      if (v11 < 0)
      {
        operator delete(v10);
        if ((v9 & 0x80000000) == 0)
        {
LABEL_29:
          if (!v7)
            goto LABEL_43;
          goto LABEL_30;
        }
      }
      else if ((v9 & 0x80000000) == 0)
      {
        goto LABEL_29;
      }
      operator delete(v8);
      if (v7)
      {
LABEL_30:
        if ((SHIBYTE(v6) & 0x80000000) == 0)
          goto LABEL_43;
        v4 = (void *)v5;
        goto LABEL_42;
      }
    }
  }
  else
  {
    v26 = 0;
    sub_20AF6BC08(v25, "Package '");
    v29 = (std::string *)v25;
    v30 = (std::string *)a1;
    v31 = v25;
    v32 = (std::string *)a1;
    v33 = (std::string *)a1;
    if (v26 == -1)
      sub_20AECFAB8();
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    ((void (*)(std::string *, _DWORD *))off_24C410AC0[v26])(&v27, v25);
    v29 = (std::string *)v25;
    v30 = (std::string *)"' data type id ";
    v31 = v25;
    v32 = (std::string *)"' data type id ";
    v33 = (std::string *)"' data type id ";
    if (v26 == -1)
      sub_20AECFAB8();
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    ((void (*)(std::string *, _DWORD *))off_24C410AD8[v26])(&v27, v25);
    std::to_string(&v27, *(_DWORD *)(a1 + 24));
    v29 = (std::string *)v25;
    v30 = &v27;
    v31 = v25;
    v32 = &v27;
    v33 = &v27;
    if (v26 == -1)
      sub_20AECFAB8();
    v28 = &v29;
    ((void (*)(std::string ***, _DWORD *))off_24C410A48[v26])(&v28, v25);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    v29 = (std::string *)v25;
    v30 = (std::string *)" encountered during loading is unrecognized. A data type ID of 0 indicates a serialization erro"
                         "r (e.g. invalid data in the stream)";
    v31 = v25;
    v32 = (std::string *)" encountered during loading is unrecognized. A data type ID of 0 indicates a serialization erro"
                         "r (e.g. invalid data in the stream)";
    v33 = (std::string *)" encountered during loading is unrecognized. A data type ID of 0 indicates a serialization erro"
                         "r (e.g. invalid data in the stream)";
    if (v26 == -1)
      sub_20AECFAB8();
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    ((void (*)(std::string *, _DWORD *))off_24C410AF0[v26])(&v27, v25);
    if (v26 == -1)
      sub_20AECFAB8();
    v29 = &v27;
    ((void (*)(void **__return_ptr, std::string **, _DWORD *))off_24C410A90[v26])(v14, &v29, v25);
    if (v26 != -1)
      ((void (*)(std::string **, _DWORD *))off_24C410A18[v26])(&v29, v25);
    if (SHIBYTE(v15) < 0)
    {
      sub_20AEC60F4(__dst, v14[0], (unint64_t)v14[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v14;
      v17 = v15;
    }
    v18 = 1;
    LOBYTE(v19) = 0;
    v23 = 0;
    v24 = 1;
    sub_20B0C5BC0(0xAu, (__int128 *)__dst, a2);
    if (v24)
    {
      if (v23)
      {
        if (v22 < 0)
          operator delete(__p);
        if (v20 < 0)
          operator delete(v19);
      }
      if (v18 && SHIBYTE(v17) < 0)
      {
        v4 = __dst[0];
LABEL_42:
        operator delete(v4);
      }
    }
  }
LABEL_43:
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void sub_20B1E3480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1E34E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 81) < 0)
  {
    operator delete(*(void **)(v1 - 104));
    sub_20AECFA60(v1 - 136);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20B1E3520);
}

void sub_20B1E351C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AECFA60(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_20B1E3530(unsigned __int8 *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v7;
  char v8;
  void *v9[2];
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;

  v20 = a3;
  if (a3)
  {
    sub_20B1E3898(", reason: ", (const char *)&v20);
  }
  else
  {
    v8 = 0;
    LOBYTE(v7) = 0;
  }
  sub_20B1E36EC("Failed to send command(s) to client ", a1, (uint64_t)&v7, (uint64_t)".");
  if (SHIBYTE(v10) < 0)
  {
    sub_20AEC60F4(__p, v9[0], (unint64_t)v9[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v9;
    v12 = v10;
  }
  v13 = 1;
  LOBYTE(v14) = 0;
  v18 = 0;
  v19 = 1;
  sub_20B0B4C58(a2, (__int128 *)__p, a4);
  if (v19)
  {
    if (!v18)
      goto LABEL_11;
    if (v17 < 0)
    {
      operator delete(v16);
      if ((v15 & 0x80000000) == 0)
      {
LABEL_11:
        if (!v13)
          goto LABEL_14;
LABEL_12:
        if (SHIBYTE(v12) < 0)
          operator delete(__p[0]);
        goto LABEL_14;
      }
    }
    else if ((v15 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v14);
    if (!v13)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_14:
  if ((SHIBYTE(v10) & 0x80000000) == 0)
  {
    if ((v8 & 0x80000000) == 0)
      return;
LABEL_18:
    operator delete(v7);
    return;
  }
  operator delete(v9[0]);
  if (v8 < 0)
    goto LABEL_18;
}

void sub_20B1E3690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1E36EC(char *__s, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  _DWORD v9[6];
  int v10;
  _QWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v10 = 0;
  sub_20B007E38(v9, __s);
  sub_20B09AB08((uint64_t)&v8, (uint64_t)v9, a2);
  v11 = (_QWORD **)v9;
  v12 = a3;
  v13 = v9;
  v14 = a3;
  v15 = a3;
  if (v10 == -1)
    sub_20AECFAB8();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24C410AC0[v10])(&v16, v9);
  v11 = (_QWORD **)v9;
  v12 = a4;
  v13 = v9;
  v14 = a4;
  v15 = a4;
  if (v10 == -1)
    sub_20AECFAB8();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24C410A78[v10])(&v16, v9);
  if (v10 == -1)
    sub_20AECFAB8();
  v11 = &v16;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C410A90[v10])(&v11, v9);
  if (v10 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C410A18[v10])(&v11, v9);
  return result;
}

void sub_20B1E3834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E3848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E385C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E3870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E3884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1E3898(char *__s, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_20B002838(v4, __s);
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24C410B20[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_10:
    sub_20AECFAB8();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_10;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C410A30[v5])(&v11, v4);
LABEL_6:
  if (v5 == -1)
    sub_20AECFAB8();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C410A90[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C410A18[v5])(&v6, v4);
  return result;
}

void sub_20B1E39C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1E39D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1E39EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1E3A00(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  void *v3[2];
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;

  if (SHIBYTE(v4) < 0)
  {
    sub_20AEC60F4(__p, v3[0], (unint64_t)v3[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v3;
    v6 = v4;
  }
  v7 = 1;
  LOBYTE(v8) = 0;
  v12 = 0;
  v13 = 1;
  sub_20B0B4C58(0xFu, (__int128 *)__p, a2);
  if (!v13)
    goto LABEL_11;
  if (v12)
  {
    if ((v11 & 0x80000000) == 0)
    {
      if ((v9 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_14:
      operator delete(v8);
      if (!v7)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v10);
    if (v9 < 0)
      goto LABEL_14;
  }
LABEL_8:
  if (!v7)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
LABEL_11:
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
}

void sub_20B1E3B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1E3B3C(char *__s, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  _DWORD v9[6];
  int v10;
  _QWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v10 = 0;
  sub_20AF810D0(v9, __s);
  sub_20B09AB08((uint64_t)&v8, (uint64_t)v9, a2);
  v11 = (_QWORD **)v9;
  v12 = a3;
  v13 = v9;
  v14 = a3;
  v15 = a3;
  if (v10 == -1)
    sub_20AECFAB8();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24C410B38[v10])(&v16, v9);
  v11 = (_QWORD **)v9;
  v12 = a4;
  v13 = v9;
  v14 = a4;
  v15 = a4;
  if (v10 == -1)
    sub_20AECFAB8();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24C410B50[v10])(&v16, v9);
  if (v10 == -1)
    sub_20AECFAB8();
  v11 = &v16;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C410A90[v10])(&v11, v9);
  if (v10 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C410A18[v10])(&v11, v9);
  return result;
}

void sub_20B1E3C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E3C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E3CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E3CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E3CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E3CE8(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  void *v3[2];
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;

  if (SHIBYTE(v4) < 0)
  {
    sub_20AEC60F4(__p, v3[0], (unint64_t)v3[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v3;
    v6 = v4;
  }
  v7 = 1;
  LOBYTE(v8) = 0;
  v12 = 0;
  v13 = 1;
  sub_20B0B4C58(0xFu, (__int128 *)__p, a2);
  if (!v13)
    goto LABEL_11;
  if (v12)
  {
    if ((v11 & 0x80000000) == 0)
    {
      if ((v9 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_14:
      operator delete(v8);
      if (!v7)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v10);
    if (v9 < 0)
      goto LABEL_14;
  }
LABEL_8:
  if (!v7)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
LABEL_11:
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
}

void sub_20B1E3DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1E3E24(char *__s, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  _DWORD v9[6];
  unsigned int v10;
  _QWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v10 = 0;
  sub_20AF810D0(v9, __s);
  sub_20B09AB08((uint64_t)&v8, (uint64_t)v9, a2);
  v11 = (_QWORD **)v9;
  v12 = a3;
  v13 = v9;
  v14 = a3;
  v15 = a3;
  if (v10 == -1)
    sub_20AECFAB8();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))*(&off_24C410B68 + v10))(&v16, v9);
  v11 = (_QWORD **)v9;
  v12 = a4;
  v13 = v9;
  v14 = a4;
  v15 = a4;
  if (v10 == -1)
    sub_20AECFAB8();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))*(&off_24C410B80 + v10))(&v16, v9);
  if (v10 == -1)
    sub_20AECFAB8();
  v11 = &v16;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C410A90[v10])(&v11, v9);
  if (v10 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C410A18[v10])(&v11, v9);
  return result;
}

void sub_20B1E3F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E3F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E3F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E3FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E3FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E3FD0(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x20BD3583CLL);
}

const char *sub_20B1E3FF4()
{
  return "cv3d.kit.viz I/O";
}

void sub_20B1E4000(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x20BD3583CLL);
}

const char *sub_20B1E4024()
{
  return "cv3d.kit.viz client/server";
}

void sub_20B1E4030(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v21[0] = v5;
  sub_20B430618((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 128);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20AECFAB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C410A48[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20B1E4280(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B1E42A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1E42C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20B1E42D4(_DWORD ***a1)
{
  return sub_20B1E478C(**a1, (char *)(*a1)[1]);
}

void sub_20B1E42E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C410A18[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20AEC7620((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20B1E4498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1E44DC(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20B1E476C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B1E4784(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_DWORD *sub_20B1E478C(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C410A18[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t sub_20B1E487C(uint64_t *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_20AED65E8)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_20AECFAB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C410A90[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C410A18[v3])(v5, v2);
  return result;
}

void sub_20B1E4968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E4980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_20AECFA60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_DWORD *sub_20B1E49A4(_DWORD ***a1)
{
  return sub_20AFB1764(**a1, (char *)(*a1)[1]);
}

void sub_20B1E49B0(uint64_t a1, uint64_t a2)
{
  sub_20B1E49C0((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20B1E49C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C410A18[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20B1E4B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20B1E4BB8(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20B1E4CB0((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20B1E4CA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20B1E4CB0(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20B1E4EAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t sub_20B1E4EC0(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24C410A18[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_20B1E4FAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C410A18[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20AEC7620((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20B1E5164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1E51A8(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20B1E5438(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B1E5450(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

size_t sub_20B1E5458(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24C410A18[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_20B1E5544(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C410A18[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20AEC7620((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20B1E56FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1E5740(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20B1E59D0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B1E59E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

size_t sub_20B1E59F0(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24C410A18[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_20B1E5ADC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C410A18[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20AEC7620((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20B1E5C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1E5CD8(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20B1E5F68(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B1E5F80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

size_t sub_20B1E5F88(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24C410A18[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_20B1E6074(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C410A18[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20AEC7620((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20B1E622C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1E6270(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20B1E6500(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B1E6518(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1E6520(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _OWORD *v7;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t (**v11)();
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  __int128 *v26;
  _QWORD *v27;
  __int128 *v28;
  _QWORD *v29;
  __int128 *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::string::size_type v72;
  uint64_t v73;
  uint64_t v75;
  char v77;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  char v95;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  std::string *v106;
  std::string::size_type size;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v115;
  std::string v116;
  _OWORD v117[9];
  _OWORD v118[4];
  uint64_t v119;
  uint64_t v120;
  _QWORD v121[2];
  __int128 v122;
  _QWORD v123[3];
  _QWORD *v124;
  __int128 v125;
  __int128 v126;
  _QWORD v127[3];
  _QWORD *v128;
  __int128 v129;
  __int128 v130;
  _QWORD v131[3];
  _QWORD *v132;
  __int128 v133;
  __int128 v134;
  _QWORD v135[3];
  _QWORD *v136;
  __int128 v137;
  __int128 v138;
  _QWORD v139[3];
  _QWORD *v140;
  __int128 v141;
  _BYTE v142[24];
  _QWORD v143[2];
  _BYTE *v144;
  _OWORD v145[2];
  __int128 v146;
  _QWORD v147[3];
  _QWORD *v148;
  __int128 v149;
  __int128 v150;
  _QWORD v151[3];
  _QWORD *v152;
  __int128 v153;
  __int128 v154;
  _QWORD v155[3];
  _QWORD *v156;
  __int128 v157;
  __int128 v158;
  _QWORD v159[3];
  _QWORD *v160;
  __int128 v161;
  __int128 v162;
  _QWORD v163[3];
  _QWORD *v164;
  __int128 v165;
  __int128 v166;
  _QWORD v167[3];
  _QWORD *v168;
  __int128 v169;
  __int128 v170;
  _QWORD v171[3];
  _QWORD *v172;
  __int128 v173;
  __int128 v174;
  _QWORD v175[3];
  _QWORD *v176;
  __int128 v177;
  uint64_t v178;

  v178 = *MEMORY[0x24BDAC8D0];
  v118[0] = xmmword_20B5E9E28;
  v118[1] = unk_20B5E9E38;
  v118[2] = xmmword_20B5E9E48;
  v118[3] = unk_20B5E9E58;
  v119 = 2;
  v117[7] = *(_OWORD *)&off_24C410C08;
  v117[8] = xmmword_24C410C18;
  v117[2] = xmmword_24C410BB8;
  v117[3] = *(_OWORD *)&off_24C410BC8;
  v117[5] = *(_OWORD *)&off_24C410BE8;
  v117[6] = xmmword_24C410BF8;
  v117[4] = xmmword_24C410BD8;
  v117[0] = xmmword_24C410B98;
  v117[1] = *(_OWORD *)&off_24C410BA8;
  v4 = v118;
  *(_QWORD *)&v122 = v118;
  *((_QWORD *)&v122 + 1) = v117;
  v5 = v123;
  v6 = &v124;
  v123[0] = &off_24C410D08;
  v123[1] = a2;
  v124 = v123;
  *(_QWORD *)&v125 = &v120;
  v7 = v117;
  *((_QWORD *)&v125 + 1) = v118;
  do
  {
    *(_QWORD *)&v138 = v4;
    *((_QWORD *)&v138 + 1) = v7;
    if (!v124)
      sub_20AECABA4();
    if (((*(uint64_t (**)(_QWORD *, __int128 *))(*v124 + 48))(v124, &v138) & 1) != 0)
      break;
    v4 = (_OWORD *)(v122 + 8);
    v7 = (_OWORD *)(*((_QWORD *)&v122 + 1) + 16);
    *(_QWORD *)&v122 = v4;
    *((_QWORD *)&v122 + 1) += 16;
  }
  while (v4 != (_OWORD *)v125 || v7 != *((_OWORD **)&v125 + 1));
  v115 = a1;
  *(_QWORD *)&v174 = &v120;
  *((_QWORD *)&v174 + 1) = v118;
  v9 = v175;
  v175[0] = &off_24C410D08;
  v175[1] = a2;
  v176 = v175;
  *(_QWORD *)&v177 = &v120;
  *((_QWORD *)&v177 + 1) = v118;
  v138 = v122;
  v10 = v139;
  if (!v124)
  {
    v6 = &v140;
    goto LABEL_13;
  }
  if (v124 != v123)
  {
    v140 = v124;
LABEL_13:
    *v6 = 0;
    v141 = v125;
    *(_OWORD *)v142 = v174;
    v11 = &off_24C410D08;
    goto LABEL_14;
  }
  v140 = v139;
  (*(void (**)(_QWORD *, _QWORD *))(v123[0] + 24))(v123, v139);
  v141 = v125;
  *(_OWORD *)v142 = v174;
  if (!v176)
  {
    v14 = &v144;
LABEL_21:
    *v14 = 0;
    v145[0] = v177;
    v12 = v176;
    if (v176 != v175)
      goto LABEL_15;
LABEL_22:
    v13 = 4;
    goto LABEL_23;
  }
  if (v176 != v175)
  {
    v14 = &v176;
    v144 = v176;
    goto LABEL_21;
  }
  v11 = (uint64_t (**)())v175[0];
LABEL_14:
  v144 = &v142[16];
  ((void (*)(_QWORD *))v11[3])(v175);
  v145[0] = v177;
  v12 = v176;
  if (v176 == v175)
    goto LABEL_22;
LABEL_15:
  if (!v12)
    goto LABEL_24;
  v13 = 5;
  v9 = v12;
LABEL_23:
  (*(void (**)(_QWORD *))(*v9 + 8 * v13))(v9);
LABEL_24:
  if (v124 == v123)
  {
    v15 = 4;
  }
  else
  {
    if (!v124)
      goto LABEL_29;
    v15 = 5;
    v5 = v124;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v15))(v5);
LABEL_29:
  v130 = v138;
  v16 = &v130;
  if (!v140)
  {
LABEL_32:
    *((_QWORD *)v16 + 5) = 0;
    goto LABEL_34;
  }
  if (v140 != v139)
  {
    v16 = &v138;
    v132 = v140;
    goto LABEL_32;
  }
  v132 = v131;
  (*(void (**)(_QWORD *, _QWORD *))(v139[0] + 24))(v139, v131);
LABEL_34:
  v133 = v141;
  v134 = *(_OWORD *)v142;
  if (v144)
  {
    if (v144 == &v142[16])
    {
      v136 = v135;
      (*(void (**)(void))(*(_QWORD *)&v142[16] + 24))();
    }
    else
    {
      v136 = v144;
      v144 = 0;
    }
  }
  else
  {
    v136 = 0;
  }
  v137 = v145[0];
  v17 = v144;
  if (v144 == &v142[16])
  {
    v18 = 4;
    v17 = &v142[16];
  }
  else
  {
    if (!v144)
      goto LABEL_44;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_44:
  if (v140 == v139)
  {
    v19 = 4;
  }
  else
  {
    if (!v140)
      goto LABEL_49;
    v19 = 5;
    v10 = v140;
  }
  (*(void (**)(_QWORD *))(*v10 + 8 * v19))(v10);
LABEL_49:
  v158 = v130;
  v20 = v159;
  v21 = v132;
  if (!v132)
  {
    v160 = 0;
    v161 = v133;
    v166 = v130;
    v22 = v167;
LABEL_57:
    v168 = v21;
    goto LABEL_58;
  }
  if (v132 == v131)
  {
    v160 = v159;
    (*(void (**)(_QWORD *, _QWORD *))(v131[0] + 24))(v131, v159);
    v21 = v160;
  }
  else
  {
    v21 = (_QWORD *)(*(uint64_t (**)(void))(*v132 + 16))();
    v160 = v21;
  }
  v161 = v133;
  v166 = v158;
  v22 = v167;
  if (!v21)
    goto LABEL_57;
  if (v21 != v159)
  {
    v21 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v21 + 16))(v21);
    goto LABEL_57;
  }
  v168 = v167;
  (*(void (**)(_QWORD *, _QWORD *))(v159[0] + 24))(v159, v167);
LABEL_58:
  v169 = v161;
  v154 = v134;
  v23 = v155;
  v24 = v136;
  if (!v136)
  {
    v156 = 0;
    v157 = v137;
    v162 = v134;
    v25 = v163;
LABEL_66:
    v164 = v24;
    goto LABEL_67;
  }
  if (v136 == v135)
  {
    v156 = v155;
    (*(void (**)(_QWORD *, _QWORD *))(v135[0] + 24))(v135, v155);
    v24 = v156;
  }
  else
  {
    v24 = (_QWORD *)(*(uint64_t (**)(void))(*v136 + 16))();
    v156 = v24;
  }
  v157 = v137;
  v162 = v154;
  v25 = v163;
  if (!v24)
    goto LABEL_66;
  if (v24 != v155)
  {
    v24 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v24 + 16))(v24);
    goto LABEL_66;
  }
  v164 = v163;
  (*(void (**)(_QWORD *, _QWORD *))(v155[0] + 24))(v155, v163);
LABEL_67:
  v165 = v157;
  v174 = v166;
  v26 = &v174;
  v27 = v175;
  if (!v168)
  {
LABEL_70:
    *((_QWORD *)v26 + 5) = 0;
    goto LABEL_72;
  }
  if (v168 != v167)
  {
    v26 = &v166;
    v176 = v168;
    goto LABEL_70;
  }
  v176 = v175;
  (*(void (**)(_QWORD *, _QWORD *))(v167[0] + 24))(v167, v175);
LABEL_72:
  v177 = v169;
  v170 = v162;
  v28 = &v170;
  v29 = v171;
  if (!v164)
  {
LABEL_75:
    *((_QWORD *)v28 + 5) = 0;
    goto LABEL_77;
  }
  if (v164 != v163)
  {
    v28 = &v162;
    v172 = v164;
    goto LABEL_75;
  }
  v172 = v171;
  (*(void (**)(_QWORD *, _QWORD *))(v163[0] + 24))(v163, v171);
LABEL_77:
  v173 = v165;
  v138 = v174;
  v30 = &v138;
  v31 = v139;
  if (!v176)
  {
LABEL_80:
    *((_QWORD *)v30 + 5) = 0;
    goto LABEL_82;
  }
  if (v176 != v175)
  {
    v30 = &v174;
    v140 = v176;
    goto LABEL_80;
  }
  v140 = v139;
  (*(void (**)(_QWORD *, _QWORD *))(v175[0] + 24))(v175, v139);
LABEL_82:
  v141 = v177;
  *(_OWORD *)&v142[8] = v170;
  v32 = v143;
  if (v172)
  {
    if (v172 == v171)
    {
      *(_QWORD *)&v145[0] = v143;
      (*(void (**)(_QWORD *, _QWORD *))(v171[0] + 24))(v171, v143);
    }
    else
    {
      *(_QWORD *)&v145[0] = v172;
      v172 = 0;
    }
  }
  else
  {
    *(_QWORD *)&v145[0] = 0;
  }
  *(_OWORD *)((char *)v145 + 8) = v173;
  if (v172 == v171)
  {
    v33 = 4;
  }
  else
  {
    if (!v172)
      goto LABEL_92;
    v33 = 5;
    v29 = v172;
  }
  (*(void (**)(_QWORD *))(*v29 + 8 * v33))(v29);
LABEL_92:
  if (v176 == v175)
  {
    v34 = 4;
  }
  else
  {
    if (!v176)
      goto LABEL_97;
    v34 = 5;
    v27 = v176;
  }
  (*(void (**)(_QWORD *))(*v27 + 8 * v34))(v27);
LABEL_97:
  if (v164 == v163)
  {
    v35 = 4;
  }
  else
  {
    if (!v164)
      goto LABEL_102;
    v35 = 5;
    v25 = v164;
  }
  (*(void (**)(_QWORD *))(*v25 + 8 * v35))(v25);
LABEL_102:
  if (v156 == v155)
  {
    v36 = 4;
  }
  else
  {
    if (!v156)
      goto LABEL_107;
    v36 = 5;
    v23 = v156;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v36))(v23);
LABEL_107:
  if (v168 == v167)
  {
    v37 = 4;
  }
  else
  {
    if (!v168)
      goto LABEL_112;
    v37 = 5;
    v22 = v168;
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v37))(v22);
LABEL_112:
  if (v160 == v159)
  {
    v38 = 4;
  }
  else
  {
    if (!v160)
      goto LABEL_117;
    v38 = 5;
    v20 = v160;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v38))(v20);
LABEL_117:
  v122 = v138;
  v39 = &v122;
  if (!v140)
  {
LABEL_120:
    *((_QWORD *)v39 + 5) = 0;
    goto LABEL_122;
  }
  if (v140 != v139)
  {
    v39 = &v138;
    v124 = v140;
    goto LABEL_120;
  }
  v124 = v123;
  (*(void (**)(_QWORD *, _QWORD *))(v139[0] + 24))(v139, v123);
LABEL_122:
  v125 = v141;
  v126 = *(_OWORD *)&v142[8];
  if (*(_QWORD *)&v145[0])
  {
    if (*(_QWORD **)&v145[0] == v143)
    {
      v128 = v127;
      (*(void (**)(_QWORD *, _QWORD *))(v143[0] + 24))(v143, v127);
    }
    else
    {
      v128 = *(_QWORD **)&v145[0];
      *(_QWORD *)&v145[0] = 0;
    }
  }
  else
  {
    v128 = 0;
  }
  v129 = *(_OWORD *)((char *)v145 + 8);
  if (*(_QWORD **)&v145[0] == v143)
  {
    v40 = 4;
  }
  else
  {
    if (!*(_QWORD *)&v145[0])
      goto LABEL_132;
    v40 = 5;
    v32 = *(_QWORD **)&v145[0];
  }
  (*(void (**)(_QWORD *))(*v32 + 8 * v40))(v32);
LABEL_132:
  if (v140 == v139)
  {
    v41 = 4;
  }
  else
  {
    if (!v140)
      goto LABEL_137;
    v41 = 5;
    v31 = v140;
  }
  (*(void (**)(_QWORD *))(*v31 + 8 * v41))(v31);
LABEL_137:
  v150 = v122;
  v42 = v151;
  v43 = (uint64_t)v124;
  if (!v124)
  {
LABEL_140:
    v152 = (_QWORD *)v43;
    goto LABEL_142;
  }
  if (v124 != v123)
  {
    v43 = (*(uint64_t (**)(void))(*v124 + 16))();
    goto LABEL_140;
  }
  v152 = v151;
  (*(void (**)(_QWORD *, _QWORD *))(v123[0] + 24))(v123, v151);
LABEL_142:
  v153 = v125;
  v146 = v126;
  v44 = (uint64_t)v128;
  if (!v128)
  {
LABEL_145:
    v148 = (_QWORD *)v44;
    goto LABEL_147;
  }
  if (v128 != v127)
  {
    v44 = (*(uint64_t (**)(void))(*v128 + 16))();
    goto LABEL_145;
  }
  v148 = v147;
  (*(void (**)(_QWORD *, _QWORD *))(v127[0] + 24))(v127, v147);
LABEL_147:
  v149 = v129;
  v170 = v150;
  v45 = v171;
  v46 = (uint64_t)v152;
  if (!v152)
  {
LABEL_150:
    v172 = (_QWORD *)v46;
    goto LABEL_152;
  }
  if (v152 != v151)
  {
    v46 = (*(uint64_t (**)(void))(*v152 + 16))();
    goto LABEL_150;
  }
  v172 = v171;
  (*(void (**)(_QWORD *, _QWORD *))(v151[0] + 24))(v151, v171);
LABEL_152:
  v173 = v153;
  v166 = v146;
  v47 = v167;
  v48 = (uint64_t)v148;
  if (!v148)
  {
LABEL_155:
    v168 = (_QWORD *)v48;
    goto LABEL_157;
  }
  if (v148 != v147)
  {
    v48 = (*(uint64_t (**)(void))(*v148 + 16))();
    goto LABEL_155;
  }
  v168 = v167;
  (*(void (**)(_QWORD *, _QWORD *))(v147[0] + 24))(v147, v167);
LABEL_157:
  v169 = v149;
  v138 = v170;
  v49 = v139;
  v50 = (uint64_t)v172;
  if (!v172)
  {
LABEL_160:
    v140 = (_QWORD *)v50;
    goto LABEL_162;
  }
  if (v172 != v171)
  {
    v50 = (*(uint64_t (**)(_QWORD *))(*v172 + 16))(v172);
    goto LABEL_160;
  }
  v140 = v139;
  (*(void (**)(_QWORD *, _QWORD *))(v171[0] + 24))(v171, v139);
LABEL_162:
  v141 = v173;
  v174 = v166;
  v51 = v175;
  v52 = (uint64_t)v168;
  if (!v168)
  {
LABEL_165:
    v176 = (_QWORD *)v52;
    goto LABEL_167;
  }
  if (v168 != v167)
  {
    v52 = (*(uint64_t (**)(void))(*v168 + 16))();
    goto LABEL_165;
  }
  v176 = v175;
  (*(void (**)(_QWORD *, _QWORD *))(v167[0] + 24))(v167, v175);
LABEL_167:
  v177 = v169;
  v54 = *((_QWORD *)&v138 + 1);
  v53 = v138;
  if (v138 == v174)
  {
    v55 = 0;
  }
  else
  {
    v55 = 0;
    do
    {
      v53 += 8;
      v54 += 16;
      *(_QWORD *)&v138 = v53;
      *((_QWORD *)&v138 + 1) = v54;
      if (v53 != (_QWORD)v141 || v54 != *((_QWORD *)&v141 + 1))
      {
        while (1)
        {
          *(_QWORD *)&v162 = v53;
          *((_QWORD *)&v162 + 1) = v54;
          if (!v140)
            sub_20AECABA4();
          v59 = (*(uint64_t (**)(_QWORD *, __int128 *))(*v140 + 48))(v140, &v162);
          v53 = v138;
          if ((v59 & 1) != 0)
            break;
          v53 = v138 + 8;
          v54 = *((_QWORD *)&v138 + 1) + 16;
          *(_QWORD *)&v138 = v53;
          *((_QWORD *)&v138 + 1) += 16;
          if (v53 == (_QWORD)v141 && v54 == *((_QWORD *)&v141 + 1))
            goto LABEL_174;
        }
        v54 = *((_QWORD *)&v138 + 1);
      }
LABEL_174:
      ++v55;
    }
    while (v53 != (_QWORD)v174 || v54 != *((_QWORD *)&v174 + 1));
  }
  if (v176 == v175)
  {
    v56 = 4;
  }
  else
  {
    if (!v176)
      goto LABEL_192;
    v56 = 5;
    v51 = v176;
  }
  (*(void (**)(_QWORD *))(*v51 + 8 * v56))(v51);
LABEL_192:
  if (v140 == v139)
  {
    v61 = 4;
  }
  else
  {
    if (!v140)
      goto LABEL_197;
    v61 = 5;
    v49 = v140;
  }
  (*(void (**)(_QWORD *))(*v49 + 8 * v61))(v49);
LABEL_197:
  if (v168 == v167)
  {
    v62 = 4;
  }
  else
  {
    if (!v168)
      goto LABEL_202;
    v62 = 5;
    v47 = v168;
  }
  (*(void (**)(_QWORD *))(*v47 + 8 * v62))(v47);
LABEL_202:
  if (v172 == v171)
  {
    v63 = 4;
  }
  else
  {
    if (!v172)
      goto LABEL_207;
    v63 = 5;
    v45 = v172;
  }
  (*(void (**)(_QWORD *))(*v45 + 8 * v63))(v45);
LABEL_207:
  if (v55 <= 1)
    v64 = 1;
  else
    v64 = v55;
  v138 = v150;
  v65 = v139;
  v66 = (uint64_t)v152;
  if (!v152)
    goto LABEL_213;
  if (v152 != v151)
  {
    v66 = (*(uint64_t (**)(void))(*v152 + 16))();
LABEL_213:
    v140 = (_QWORD *)v66;
    goto LABEL_215;
  }
  v140 = v139;
  (*(void (**)(_QWORD *, _QWORD *))(v151[0] + 24))(v151, v139);
LABEL_215:
  v141 = v153;
  v174 = v146;
  v67 = v175;
  v68 = (uint64_t)v148;
  if (!v148)
  {
LABEL_218:
    v176 = (_QWORD *)v68;
    goto LABEL_220;
  }
  if (v148 != v147)
  {
    v68 = (*(uint64_t (**)(void))(*v148 + 16))();
    goto LABEL_218;
  }
  v176 = v175;
  (*(void (**)(_QWORD *, _QWORD *))(v147[0] + 24))(v147, v175);
LABEL_220:
  v177 = v149;
  v70 = *((_QWORD *)&v138 + 1);
  v69 = v138;
  if (v138 == v174)
  {
    v71 = 0;
  }
  else
  {
    v71 = 0;
    do
    {
      v75 = *(_QWORD *)(v70 + 8);
      v69 += 8;
      v70 += 16;
      *(_QWORD *)&v138 = v69;
      *((_QWORD *)&v138 + 1) = v70;
      if (v69 != (_QWORD)v141 || v70 != *((_QWORD *)&v141 + 1))
      {
        while (1)
        {
          *(_QWORD *)&v162 = v69;
          *((_QWORD *)&v162 + 1) = v70;
          if (!v140)
            sub_20AECABA4();
          v77 = (*(uint64_t (**)(_QWORD *, __int128 *))(*v140 + 48))(v140, &v162);
          v69 = v138;
          if ((v77 & 1) != 0)
            break;
          v69 = v138 + 8;
          v70 = *((_QWORD *)&v138 + 1) + 16;
          *(_QWORD *)&v138 = v69;
          *((_QWORD *)&v138 + 1) += 16;
          if (v69 == (_QWORD)v141 && v70 == *((_QWORD *)&v141 + 1))
            goto LABEL_227;
        }
        v70 = *((_QWORD *)&v138 + 1);
      }
LABEL_227:
      v71 += v75;
    }
    while (v69 != (_QWORD)v174 || v70 != *((_QWORD *)&v174 + 1));
  }
  v72 = 3 * v64 - 3 + v71;
  if (v176 == v175)
  {
    v73 = 4;
  }
  else
  {
    if (!v176)
      goto LABEL_245;
    v73 = 5;
    v67 = v176;
  }
  (*(void (**)(_QWORD *))(*v67 + 8 * v73))(v67);
LABEL_245:
  if (v140 == v139)
  {
    v80 = 4;
    v79 = v135;
  }
  else
  {
    v79 = v135;
    if (!v140)
      goto LABEL_250;
    v80 = 5;
    v65 = v140;
  }
  (*(void (**)(_QWORD *))(*v65 + 8 * v80))(v65);
LABEL_250:
  memset(&v116, 0, sizeof(v116));
  std::string::reserve(&v116, v72);
  v162 = v150;
  v81 = v163;
  v82 = (uint64_t)v152;
  if (v152)
  {
    if (v152 == v151)
    {
      v164 = v163;
      (*(void (**)(_QWORD *, _QWORD *))(v151[0] + 24))(v151, v163);
      goto LABEL_255;
    }
    v82 = (*(uint64_t (**)(void))(*v152 + 16))();
  }
  v164 = (_QWORD *)v82;
LABEL_255:
  v165 = v153;
  if (v55 >= 1)
  {
    std::string::append(&v116, **((const std::string::value_type ***)&v162 + 1), *(_QWORD *)(*((_QWORD *)&v162 + 1) + 8));
    if ((unint64_t)v55 >= 2)
    {
      *(_QWORD *)&v162 = v162 + 8;
      v83 = v162;
      *((_QWORD *)&v162 + 1) += 16;
      v84 = *((_QWORD *)&v162 + 1);
      if (v162 != v165)
      {
        do
        {
          *(_QWORD *)&v158 = v83;
          *((_QWORD *)&v158 + 1) = v84;
          if (!v164)
            sub_20AECABA4();
          if (((*(uint64_t (**)(_QWORD *, __int128 *))(*v164 + 48))(v164, &v158) & 1) != 0)
            break;
          v83 = v162 + 8;
          v84 = *((_QWORD *)&v162 + 1) + 16;
          *(_QWORD *)&v162 = v83;
          *((_QWORD *)&v162 + 1) += 16;
        }
        while (v83 != (_QWORD)v165 || v84 != *((_QWORD *)&v165 + 1));
      }
      v158 = v162;
      v86 = v159;
      v87 = (uint64_t)v164;
      if (v164)
      {
        if (v164 == v163)
        {
          v160 = v159;
          (*(void (**)(_QWORD *, _QWORD *))(v163[0] + 24))(v163, v159);
LABEL_272:
          v161 = v165;
          v154 = v146;
          v88 = v155;
          v89 = (uint64_t)v148;
          if (v148)
          {
            if (v148 == v147)
            {
              v156 = v155;
              (*(void (**)(_QWORD *, _QWORD *))(v147[0] + 24))(v147, v155);
LABEL_277:
              v157 = v149;
              if (v158 != v154)
              {
                do
                {
                  std::string::append(&v116, " | ", 3uLL);
                  std::string::append(&v116, **((const std::string::value_type ***)&v158 + 1), *(_QWORD *)(*((_QWORD *)&v158 + 1) + 8));
                  v93 = v158 + 8;
                  v91 = *((_QWORD *)&v158 + 1) + 16;
                  *(_QWORD *)&v158 = v93;
                  *((_QWORD *)&v158 + 1) += 16;
                  if (v93 != (_QWORD)v161 || v91 != *((_QWORD *)&v161 + 1))
                  {
                    while (1)
                    {
                      v121[0] = v93;
                      v121[1] = v91;
                      if (!v160)
                        sub_20AECABA4();
                      v95 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v160 + 48))(v160, v121);
                      v93 = v158;
                      if ((v95 & 1) != 0)
                        break;
                      v93 = v158 + 8;
                      v91 = *((_QWORD *)&v158 + 1) + 16;
                      *(_QWORD *)&v158 = v93;
                      *((_QWORD *)&v158 + 1) += 16;
                      if (v93 == (_QWORD)v161 && v91 == *((_QWORD *)&v161 + 1))
                        goto LABEL_282;
                    }
                    v91 = *((_QWORD *)&v158 + 1);
                  }
LABEL_282:
                  ;
                }
                while (v93 != (_QWORD)v154 || v91 != *((_QWORD *)&v154 + 1));
              }
              if (v156 == v155)
              {
                v90 = 4;
              }
              else
              {
                if (!v156)
                  goto LABEL_300;
                v90 = 5;
                v88 = v156;
              }
              (*(void (**)(_QWORD *))(*v88 + 8 * v90))(v88);
LABEL_300:
              if (v160 == v159)
              {
                v97 = 4;
              }
              else
              {
                if (!v160)
                {
LABEL_305:
                  v79 = v135;
                  goto LABEL_306;
                }
                v97 = 5;
                v86 = v160;
              }
              (*(void (**)(_QWORD *))(*v86 + 8 * v97))(v86);
              goto LABEL_305;
            }
            v89 = (*(uint64_t (**)(void))(*v148 + 16))();
          }
          v156 = (_QWORD *)v89;
          goto LABEL_277;
        }
        v87 = (*(uint64_t (**)(void))(*v164 + 16))();
      }
      v160 = (_QWORD *)v87;
      goto LABEL_272;
    }
  }
LABEL_306:
  if (v164 == v163)
  {
    v101 = 4;
    v98 = v115;
    v100 = v127;
    v99 = v123;
  }
  else
  {
    v98 = v115;
    v100 = v127;
    v99 = v123;
    if (!v164)
      goto LABEL_311;
    v101 = 5;
    v81 = v164;
  }
  (*(void (**)(_QWORD *))(*v81 + 8 * v101))(v81);
LABEL_311:
  if (v148 == v147)
  {
    v103 = 4;
    v104 = v147;
    v102 = v131;
  }
  else
  {
    v102 = v131;
    if (!v148)
      goto LABEL_316;
    v103 = 5;
    v104 = v148;
  }
  (*(void (**)(void))(*v104 + 8 * v103))();
LABEL_316:
  if (v152 == v151)
  {
    v105 = 4;
  }
  else
  {
    if (!v152)
      goto LABEL_321;
    v105 = 5;
    v42 = v152;
  }
  (*(void (**)(_QWORD *))(*v42 + 8 * v105))(v42);
LABEL_321:
  if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v106 = &v116;
  else
    v106 = (std::string *)v116.__r_.__value_.__r.__words[0];
  if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v116.__r_.__value_.__r.__words[2]);
  else
    size = v116.__r_.__value_.__l.__size_;
  v108 = sub_20AEC01D0(v98, (uint64_t)v106, size);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v116.__r_.__value_.__l.__data_);
    v109 = v128;
    if (v128 != v127)
      goto LABEL_329;
LABEL_332:
    v110 = 4;
    goto LABEL_333;
  }
  v109 = v128;
  if (v128 == v127)
    goto LABEL_332;
LABEL_329:
  if (!v109)
    goto LABEL_334;
  v110 = 5;
  v100 = v109;
LABEL_333:
  (*(void (**)(_QWORD *))(*v100 + 8 * v110))(v100);
LABEL_334:
  if (v124 == v123)
  {
    v111 = 4;
  }
  else
  {
    if (!v124)
      goto LABEL_339;
    v111 = 5;
    v99 = v124;
  }
  (*(void (**)(_QWORD *))(*v99 + 8 * v111))(v99);
LABEL_339:
  if (v136 == v135)
  {
    v112 = 4;
  }
  else
  {
    if (!v136)
      goto LABEL_344;
    v112 = 5;
    v79 = v136;
  }
  (*(void (**)(_QWORD *))(*v79 + 8 * v112))(v79);
LABEL_344:
  if (v132 == v131)
  {
    v113 = 4;
    goto LABEL_348;
  }
  if (v132)
  {
    v113 = 5;
    v102 = v132;
LABEL_348:
    (*(void (**)(_QWORD *))(*v102 + 8 * v113))(v102);
  }
  return v108;
}

void sub_20B1E7894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a70;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;

  if ((_QWORD *)STACK[0x3F8] == v72)
  {
    v74 = 4;
  }
  else
  {
    if (!STACK[0x3F8])
      goto LABEL_6;
    v74 = 5;
    v72 = (_QWORD *)STACK[0x3F8];
  }
  (*(void (**)(_QWORD *))(*v72 + 8 * v74))(v72);
LABEL_6:
  if ((_QWORD *)STACK[0x448] == v71)
  {
    v75 = 4;
  }
  else
  {
    if (!STACK[0x448])
      goto LABEL_11;
    v75 = 5;
    v71 = (_QWORD *)STACK[0x448];
  }
  (*(void (**)(_QWORD *))(*v71 + 8 * v75))(v71);
LABEL_11:
  if (a21 < 0)
    operator delete(__p);
  v76 = (_QWORD *)a14;
  if (STACK[0x308] == a14)
  {
    v77 = 4;
  }
  else
  {
    if (!STACK[0x308])
      goto LABEL_18;
    v77 = 5;
    v76 = (_QWORD *)STACK[0x308];
  }
  (*(void (**)(_QWORD *))(*v76 + 8 * v77))(v76);
LABEL_18:
  if ((_QWORD *)STACK[0x358] == v70)
  {
    v78 = 4;
  }
  else
  {
    if (!STACK[0x358])
      goto LABEL_23;
    v78 = 5;
    v70 = (_QWORD *)STACK[0x358];
  }
  (*(void (**)(_QWORD *))(*v70 + 8 * v78))(v70);
LABEL_23:
  sub_20B1E7C94(&a52);
  sub_20B1E7D14(&a70);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1E7C94(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 11;
  v3 = (_QWORD *)a1[14];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[5];
  if (v5 == a1 + 2)
  {
    v6 = 4;
    v5 = a1 + 2;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

_QWORD *sub_20B1E7D14(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 10;
  v3 = (_QWORD *)a1[13];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[5];
  if (v5 == a1 + 2)
  {
    v6 = 4;
    v5 = a1 + 2;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t sub_20B1E7D94(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v5;

  if (!*(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_12;
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_12:
        if (!*(_BYTE *)(a1 + 40))
          return a1;
        goto LABEL_13;
      }
    }
    else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
LABEL_13:
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
    operator delete(*(void **)(a1 + 16));
    return a1;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void **)a1;
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_6:
    v5 = (void **)a1;
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*v5);
  return a1;
}

uint64_t sub_20B1E7E94(uint64_t a1)
{
  void **v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(void ***)(a1 + 16);
    if (v2)
    {
      do
      {
        while (1)
        {
          v3 = (void **)*v2;
          v4 = (std::__shared_weak_count *)v2[6];
          if (v4)
          {
            p_shared_owners = (unint64_t *)&v4->__shared_owners_;
            do
              v6 = __ldaxr(p_shared_owners);
            while (__stlxr(v6 - 1, p_shared_owners));
            if (!v6)
            {
              ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
              std::__shared_weak_count::__release_weak(v4);
            }
          }
          if (*((char *)v2 + 39) < 0)
            break;
          operator delete(v2);
          v2 = v3;
          if (!v3)
            goto LABEL_12;
        }
        operator delete(v2[2]);
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
LABEL_12:
    v7 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
      operator delete(v7);
  }
  return a1;
}

uint64_t *sub_20B1E7F50(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v4 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    MEMORY[0x20BD3583C](v2, 0xA1C40BD48D6D6);
  }
  return a1;
}

uint64_t sub_20B1E7FC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  char v27;

  if (*(_BYTE *)(a1 + 112))
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 288) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8));
  if (*(_BYTE *)(a1 + 456))
    sub_20B1F7338(a1 + 416, 0, 0);
  v2 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v4 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    MEMORY[0x20BD3583C](v2, 0xA1C40BD48D6D6);
  }
  if (*(_BYTE *)(a1 + 456))
  {
    v5 = *(void ***)(a1 + 432);
    if (v5)
    {
      do
      {
        while (1)
        {
          v6 = (void **)*v5;
          v7 = (std::__shared_weak_count *)v5[6];
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          if (*((char *)v5 + 39) < 0)
            break;
          operator delete(v5);
          v5 = v6;
          if (!v6)
            goto LABEL_21;
        }
        operator delete(v5[2]);
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
LABEL_21:
    v10 = *(void **)(a1 + 416);
    *(_QWORD *)(a1 + 416) = 0;
    if (v10)
      operator delete(v10);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 352));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 304));
  v11 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v11 + 8) = 0;
    if (v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v13 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
    MEMORY[0x20BD3583C](v11, 0xA1C40BD48D6D6);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 224));
  v14 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v14)
    MEMORY[0x20BD3583C](v14, 0x10A1C40756C35FELL);
  v15 = *(std::__shared_weak_count **)(a1 + 208);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*(_BYTE *)(a1 + 160))
  {
    v18 = *(_QWORD **)(a1 + 152);
    if (v18 == (_QWORD *)(a1 + 128))
    {
      v19 = 4;
      v18 = (_QWORD *)(a1 + 128);
      goto LABEL_40;
    }
    if (v18)
    {
      v19 = 5;
LABEL_40:
      (*(void (**)(void))(*v18 + 8 * v19))();
    }
  }
  if (*(_BYTE *)(a1 + 88))
  {
    v20 = *(_QWORD *)(a1 + 64);
    if (v20)
    {
      v21 = *(_QWORD *)(a1 + 72);
      v22 = *(void **)(a1 + 64);
      if (v21 != v20)
      {
        do
        {
          if (*(_BYTE *)(v21 - 8))
          {
            v23 = *(unsigned int *)(v21 - 16);
            if ((_DWORD)v23 != -1)
              ((void (*)(char *, uint64_t))off_24C410D88[v23])(&v27, v21 - 48);
            *(_DWORD *)(v21 - 16) = -1;
          }
          *(_QWORD *)(v21 - 816) = &off_24C411BF8;
          sub_20B07AE6C(v21 - 800);
          v21 -= 816;
        }
        while (v21 != v20);
        v22 = *(void **)(a1 + 64);
      }
      *(_QWORD *)(a1 + 72) = v20;
      operator delete(v22);
    }
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v24 = *(std::__shared_weak_count **)(a1 + 24);
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  v25 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  return a1;
}

void sub_20B1E82E8(uint64_t a1)
{
  sub_20B1E7FC4(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B1E830C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD v25[13];
  void *v26[2];
  __int128 v27;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 __p;
  uint64_t v34;
  char v35;
  char v36;
  _QWORD *v37;

  v8 = a3 + 2;
  v9 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD *))(a3[2] + 16))(a3 + 2) + 96);
  v10 = (*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
  v12 = v10;
  v13 = 80;
  if (v9)
    v10 += 80;
  else
    v13 = 0;
  v14 = (_OWORD *)(a2 + 168);
  if (*(_BYTE *)(a2 + 184))
  {
    v11 = (unsigned __int8 *)(a2 + 176);
    if (*(unsigned __int8 *)(a2 + 176) != *(unsigned __int8 *)(v10 + 8))
    {
      sub_20B1E208C((uint64_t *)v10, v11, (uint64_t)v26);
      *(_OWORD *)a1 = *(_OWORD *)v26;
      *(_BYTE *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a1 + 40) = 0;
        v15 = v29;
        if (v29)
        {
          *(_OWORD *)(a1 + 16) = v27;
          *(_QWORD *)(a1 + 32) = v28;
          v28 = 0;
          v27 = 0uLL;
          *(_BYTE *)(a1 + 40) = 1;
        }
        *(_BYTE *)(a1 + 48) = 0;
        *(_BYTE *)(a1 + 104) = 0;
        if (v35)
        {
          v16 = v32;
          *(_QWORD *)(a1 + 64) = v31;
          *(_OWORD *)(a1 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a1 + 72) = v16;
          *(_OWORD *)(a1 + 80) = __p;
          *(_QWORD *)(a1 + 96) = v34;
          v31 = 0;
          __p = 0uLL;
          v34 = 0;
          *(_BYTE *)(a1 + 104) = 1;
        }
        *(_BYTE *)(a1 + 112) = 1;
        *(_BYTE *)(a1 + 120) = 0;
        if (v15 && SHIBYTE(v28) < 0)
        {
          v17 = (void *)v27;
LABEL_38:
          operator delete(v17);
          return;
        }
      }
      else
      {
        *(_BYTE *)(a1 + 120) = 0;
      }
      return;
    }
  }
  else
  {
    *v14 = *(_OWORD *)v10;
    *(_BYTE *)(a2 + 184) = 1;
  }
  v18 = *(_QWORD *)(v12 + v13) - *(_QWORD *)v14;
  if (!v18 || v18 < 0)
  {
    if (v18 <= -1000000001)
    {
      v25[0] = -(uint64_t)(-v18 / 0xF4240uLL);
      sub_20B1E23A0((uint64_t *)v10, v25, (uint64_t)v26);
      if (*(_BYTE *)(a2 + 160))
      {
        v22 = *(_QWORD *)(a2 + 152);
        if (!v22)
          sub_20AECABA4();
        (*(void (**)(uint64_t, uint64_t, _QWORD *, void **))(*(_QWORD *)v22 + 48))(v22, a2 + 32, v8, v26);
      }
      if (v36)
      {
        if (v35)
        {
          if (SHIBYTE(v34) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v31) < 0)
            operator delete((void *)v30);
        }
        if (v29 && SHIBYTE(v28) < 0)
          operator delete((void *)v27);
      }
    }
  }
  else
  {
    v19 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD *, unsigned __int8 *))(*v8 + 16))(v8, v11) + 96);
    v20 = (*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    v21 = (_QWORD *)(v20 + 80);
    if (!v19)
      v21 = (_QWORD *)v20;
    *(_QWORD *)v14 = *v21;
  }
  LOBYTE(v26[0]) = 0;
  LOBYTE(v28) = 0;
  v25[0] = a2;
  v25[1] = v26;
  v25[2] = a3;
  v23 = *(unsigned int *)(a4 + 32);
  if ((_DWORD)v23 == -1)
    sub_20AECFAB8();
  v37 = v25;
  ((void (*)(_QWORD **, uint64_t))off_24C410E08[v23])(&v37, a4);
  if ((_BYTE)v28)
  {
    sub_20B201B80(*(_QWORD *)(a2 + 216), a2 + 192, (std::mutex *)(a2 + 224), (const std::__fs::filesystem::path *)(a2 + 32), a3, (const std::__fs::filesystem::path *)v26, *(unsigned __int8 *)(a2 + 464));
    v24 = v28;
    *(_BYTE *)(a1 + 120) = 1;
    if (v24 && SBYTE7(v27) < 0)
    {
      v17 = v26[0];
      goto LABEL_38;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 1;
  }
}

void sub_20B1E8638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20AECCE40((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1E864C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int128 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,__int128 __p,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;
  _OWORD *v31;
  void *v32;
  char *v33;
  void *v34;
  char *v35;

  if (a28 && a26 < 0)
    operator delete((void *)__p);
  if (a2 == 4)
  {
    v31 = __cxa_begin_catch(a1);
    __p = v31[1];
    sub_20AECEBD0(&a23, v31 + 2);
    sub_20AFEDBD0(v28, (uint64_t)&__p);
    sub_20AECCE40((uint64_t)&__p);
    __cxa_end_catch();
  }
  else
  {
    if (a2 == 3)
    {
      v32 = __cxa_begin_catch(a1);
      v33 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v32 + 16))(v32);
      sub_20AF55B94((uint64_t)&a10, v33);
      a21 = 1;
      sub_20B0C5BC0(2u, &a10, (uint64_t)&__p);
    }
    else
    {
      v34 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v35 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v34 + 16))(v34);
        sub_20AF55B94((uint64_t)&a10, v35);
        a21 = 1;
        sub_20B0C5BC0(3u, &a10, (uint64_t)&__p);
      }
      else
      {
        LOBYTE(a10) = 0;
        a21 = 0;
        sub_20B0C5BC0(1u, &a10, (uint64_t)&__p);
      }
    }
    sub_20AFEDBD0(v28, (uint64_t)&__p);
    sub_20AECCE40((uint64_t)&__p);
    sub_20AECCDB4((uint64_t)&a10);
    __cxa_end_catch();
  }
  JUMPOUT(0x20B1E860CLL);
}

void sub_20B1E8774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECCDB4((uint64_t)va);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B1E87D4(std::future<void> *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  uint64_t v11[2];
  char v12;
  _QWORD v13[4];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v11[0] = a2;
  v11[1] = a3;
  if (*(_BYTE *)(a2 + 88))
  {
    v6 = *(_QWORD *)(a3 + 24);
    if (!v6)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v6 = *(_QWORD *)(a3 + 24);
    }
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v6 + 48))(__p);
    v7 = *(_QWORD *)(a2 + 64);
    v8 = *(_QWORD *)(a2 + 72);
    if (v7 == v8)
      goto LABEL_12;
    while ((sub_20B20F718(v7, a3) & 1) == 0)
    {
      v7 += 816;
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
    if (v7 == *(_QWORD *)(a2 + 72))
    {
LABEL_12:
      v13[0] = 6;
      v14 = 0;
      sub_20B1E8A2C(a1, v11, (uint64_t)v13);
      if (v14 == -1)
        goto LABEL_14;
    }
    else
    {
      if (*(_BYTE *)(v7 + 808))
      {
        sub_20B1E8A2C(a1, v11, v7 + 768);
        goto LABEL_14;
      }
      v13[0] = 6;
      v14 = 0;
      sub_20B1E8A2C(a1, v11, (uint64_t)v13);
      if (v14 == -1)
      {
LABEL_14:
        if (v10 < 0)
          operator delete(__p[0]);
        return;
      }
    }
    ((void (*)(char *, _QWORD *))off_24C410D88[v14])(&v12, v13);
    goto LABEL_14;
  }
  v13[0] = 6;
  v14 = 0;
  sub_20B1E8A2C(a1, v11, (uint64_t)v13);
  if (v14 != -1)
    ((void (*)(void **, _QWORD *))off_24C410D88[v14])(__p, v13);
}

void sub_20B1E89C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1E8A2C(std::future<void> *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  signed int v8;
  std::chrono::steady_clock::time_point v9;
  signed int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  std::promise<void> *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  void **v46;
  void *v47;
  std::__shared_weak_count *v48;
  uint64_t (***v49)();
  char *v50;
  char *v51;
  void **v52;
  std::future<void> *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  uint64_t (***v58)();
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  void **v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v82;
  std::chrono::steady_clock::time_point v83;
  std::chrono::system_clock::time_point v84;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v85;
  signed int v86;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v87;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v88;
  uint64_t v89;
  std::chrono::system_clock::time_point v90;
  uint64_t v91;
  std::future<void> v93;
  std::unique_lock<std::mutex> __lk;
  void *v95;
  std::__shared_weak_count *v96;
  std::promise<void> *v97;
  std::__shared_weak_count *v98;
  char v99;
  char v100;
  std::__shared_weak_count *v101[2];
  void *v102[2];
  uint64_t (**v103)();
  void *v104[2];
  std::__shared_weak_count *v105;
  char v106;
  void *__p;
  int v108;
  char v109;
  char v110;
  char v111;
  unsigned __int8 v112;
  _QWORD v113[3];
  _QWORD *v114;
  __int128 v115;
  uint64_t (**v116)();
  __int128 v117;
  uint64_t (***v118)();
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void **v123;
  int v124;
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  if (*(_BYTE *)(*a2 + 112))
  {
    v7 = a2[1];
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v6 + 352);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v6 + 352));
    if (!*(_BYTE *)(v6 + 104)
      || (v8 = atomic_load((unsigned int *)(v6 + 296)), *(_QWORD *)(v6 + 96) > (unint64_t)v8))
    {
LABEL_6:
      v11 = (unsigned int *)(v6 + 296);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = *(_QWORD *)(v6 + 288);
      v113[0] = &off_24C411168;
      v114 = v113;
      v14 = (std::promise<void> *)operator new(0x20uLL);
      v14[1].__state_ = 0;
      v14[2].__state_ = 0;
      v14->__state_ = (std::__assoc_sub_state *)&off_24C410E58;
      v97 = std::promise<void>::promise(v14 + 3);
      v98 = (std::__shared_weak_count *)v14;
      std::promise<void>::get_future(v97);
      v16 = *(std::__shared_weak_count **)(v6 + 16);
      v15 = *(std::__shared_weak_count **)(v6 + 24);
      if (v15)
      {
        p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
        do
          v18 = __ldxr(p_shared_weak_owners);
        while (__stxr(v18 + 1, p_shared_weak_owners));
      }
      v19 = *(void **)v7;
      v20 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)&v115 = *(_QWORD *)v7;
      *((_QWORD *)&v115 + 1) = v20;
      if (v20)
      {
        v21 = (unint64_t *)(v20 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v24 = *(_QWORD *)(v7 + 24);
      v23 = *(_QWORD *)(v7 + 32);
      v116 = &off_24C411E78;
      *(_QWORD *)&v117 = v24;
      *((_QWORD *)&v117 + 1) = v23;
      if (v23)
      {
        v25 = (unint64_t *)(v23 + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      LOBYTE(v121[0]) = 0;
      v124 = -1;
      v27 = *(unsigned int *)(a3 + 32);
      if ((_DWORD)v27 != -1)
      {
        ((void (*)(char *, void **, uint64_t))off_24C410D98[v27])(&v99, v121, a3);
        v124 = v27;
        v19 = (void *)v115;
      }
      v101[0] = v16;
      v101[1] = v15;
      v102[0] = v19;
      v102[1] = *((void **)&v115 + 1);
      v115 = 0uLL;
      v103 = &off_24C411E78;
      *(_OWORD *)v104 = v117;
      v117 = 0uLL;
      LOBYTE(v105) = 0;
      v108 = -1;
      if ((_DWORD)v27 != -1)
      {
        ((void (*)(char *, std::__shared_weak_count **, void **))off_24C410EE8[v27])(&v100, &v105, v121);
        v108 = v27;
      }
      v28 = (char *)operator new(0x78uLL);
      v29 = v28;
      v30 = *(_OWORD *)v102;
      *(_OWORD *)(v28 + 24) = *(_OWORD *)v101;
      v31 = v28 + 24;
      *(_QWORD *)v28 = &off_24C410EA8;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = 0;
      v101[0] = 0;
      v101[1] = 0;
      *(_OWORD *)(v28 + 40) = v30;
      v102[0] = 0;
      v102[1] = 0;
      *((_QWORD *)v28 + 7) = &off_24C411E78;
      *((_OWORD *)v28 + 4) = *(_OWORD *)v104;
      v104[0] = 0;
      v104[1] = 0;
      v28[80] = 0;
      *((_DWORD *)v28 + 28) = -1;
      if ((_DWORD)v27 == -1)
      {
        v95 = v28 + 24;
        v96 = (std::__shared_weak_count *)v28;
        v108 = -1;
        v32 = (std::__shared_weak_count *)v104[1];
        if (!v104[1])
          goto LABEL_33;
      }
      else
      {
        ((void (*)(char *, char *, std::__shared_weak_count **))off_24C410EE8[v27])(&v100, v28 + 80, &v105);
        *((_DWORD *)v29 + 28) = v27;
        v95 = v31;
        v96 = (std::__shared_weak_count *)v29;
        if (v108 != -1)
          ((void (*)(char *, std::__shared_weak_count **))off_24C410D88[v108])(&v100, &v105);
        v108 = -1;
        v32 = (std::__shared_weak_count *)v104[1];
        if (!v104[1])
        {
LABEL_33:
          v35 = (std::__shared_weak_count *)v102[1];
          if (v102[1])
          {
            v36 = (unint64_t *)((char *)v102[1] + 8);
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          if (v101[1])
            std::__shared_weak_count::__release_weak(v101[1]);
          if (v124 != -1)
            ((void (*)(char *, void **))off_24C410D88[v124])(&v100, v121);
          v38 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
          if (*((_QWORD *)&v117 + 1))
          {
            v39 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          v41 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
          if (*((_QWORD *)&v115 + 1))
          {
            v42 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = (std::__shared_weak_count *)v97;
          v45 = v98;
          v101[0] = (std::__shared_weak_count *)v97;
          v101[1] = v98;
          v97 = 0;
          v98 = 0;
          v46 = v102;
          if (v114)
          {
            if (v114 == v113)
            {
              v104[0] = v102;
              (*(void (**)(uint64_t, _QWORD *))(v113[0] + 24))((uint64_t)v113, v102);
              v44 = v101[0];
              v45 = v101[1];
            }
            else
            {
              v104[0] = v114;
              v114 = 0;
            }
          }
          else
          {
            v104[0] = 0;
          }
          v47 = v95;
          v48 = v96;
          v104[1] = v95;
          v105 = v96;
          v95 = 0;
          v96 = 0;
          *(_QWORD *)&v115 = v44;
          *((_QWORD *)&v115 + 1) = v45;
          v101[0] = 0;
          v101[1] = 0;
          v49 = &v116;
          if (v104[0])
          {
            if (v104[0] == v102)
            {
              v118 = &v116;
              (*((void (**)(void **, uint64_t (***)()))v102[0] + 3))(v102, &v116);
              v47 = v104[1];
              v48 = v105;
            }
            else
            {
              v118 = (uint64_t (***)())v104[0];
              v104[0] = 0;
            }
          }
          else
          {
            v118 = 0;
          }
          v119 = v47;
          v120 = v48;
          v104[1] = 0;
          v105 = 0;
          v123 = 0;
          v50 = (char *)operator new(0x48uLL);
          v51 = v50;
          *(_QWORD *)v50 = &off_24C410F08;
          *(_OWORD *)(v50 + 8) = v115;
          v115 = 0uLL;
          if (v118)
          {
            if (v118 == &v116)
            {
              *((_QWORD *)v50 + 6) = v50 + 24;
              ((void (*)(uint64_t (***)()))v116[3])(&v116);
              v47 = v119;
              v48 = v120;
            }
            else
            {
              *((_QWORD *)v50 + 6) = v118;
              v118 = 0;
            }
          }
          else
          {
            *((_QWORD *)v50 + 6) = 0;
          }
          *((_QWORD *)v51 + 7) = v47;
          *((_QWORD *)v51 + 8) = v48;
          v119 = 0;
          v120 = 0;
          v123 = (void **)v51;
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 40))(v13, v121);
          v52 = v123;
          if (v123 == v121)
          {
            v54 = 4;
            v52 = v121;
            v53 = a1;
          }
          else
          {
            v53 = a1;
            if (!v123)
            {
LABEL_72:
              v55 = v120;
              if (!v120)
                goto LABEL_76;
              p_shared_owners = (unint64_t *)&v120->__shared_owners_;
              do
                v57 = __ldaxr(p_shared_owners);
              while (__stlxr(v57 - 1, p_shared_owners));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
                v58 = v118;
                if (v118 != &v116)
                  goto LABEL_77;
              }
              else
              {
LABEL_76:
                v58 = v118;
                if (v118 != &v116)
                {
LABEL_77:
                  if (!v58)
                  {
LABEL_82:
                    v60 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
                    if (!*((_QWORD *)&v115 + 1))
                      goto LABEL_86;
                    v61 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
                    do
                      v62 = __ldaxr(v61);
                    while (__stlxr(v62 - 1, v61));
                    if (!v62)
                    {
                      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                      std::__shared_weak_count::__release_weak(v60);
                      v63 = v105;
                      if (!v105)
                        goto LABEL_90;
                    }
                    else
                    {
LABEL_86:
                      v63 = v105;
                      if (!v105)
                        goto LABEL_90;
                    }
                    v64 = (unint64_t *)&v63->__shared_owners_;
                    do
                      v65 = __ldaxr(v64);
                    while (__stlxr(v65 - 1, v64));
                    if (!v65)
                    {
                      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                      std::__shared_weak_count::__release_weak(v63);
                      v66 = (void **)v104[0];
                      if (v104[0] != v102)
                        goto LABEL_91;
                      goto LABEL_96;
                    }
LABEL_90:
                    v66 = (void **)v104[0];
                    if (v104[0] != v102)
                    {
LABEL_91:
                      if (!v66)
                      {
LABEL_98:
                        v68 = v101[1];
                        if (v101[1])
                        {
                          v69 = &v101[1]->__shared_owners_;
                          do
                            v70 = __ldaxr((unint64_t *)v69);
                          while (__stlxr(v70 - 1, (unint64_t *)v69));
                          if (!v70)
                          {
                            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                            std::__shared_weak_count::__release_weak(v68);
                          }
                        }
                        v71 = v96;
                        if (!v96)
                          goto LABEL_107;
                        v72 = (unint64_t *)&v96->__shared_owners_;
                        do
                          v73 = __ldaxr(v72);
                        while (__stlxr(v73 - 1, v72));
                        if (!v73)
                        {
                          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                          std::__shared_weak_count::__release_weak(v71);
                          v74 = v98;
                          if (!v98)
                            goto LABEL_111;
                        }
                        else
                        {
LABEL_107:
                          v74 = v98;
                          if (!v98)
                            goto LABEL_111;
                        }
                        v75 = (unint64_t *)&v74->__shared_owners_;
                        do
                          v76 = __ldaxr(v75);
                        while (__stlxr(v76 - 1, v75));
                        if (!v76)
                        {
                          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                          std::__shared_weak_count::__release_weak(v74);
                          v77 = v114;
                          if (v114 != v113)
                            goto LABEL_112;
                          goto LABEL_117;
                        }
LABEL_111:
                        v77 = v114;
                        if (v114 != v113)
                        {
LABEL_112:
                          if (!v77)
                          {
LABEL_119:
                            if (__lk.__owns_)
                              std::mutex::unlock(__lk.__m_);
                            v53->__state_ = v93.__state_;
                            v93.__state_ = 0;
                            LOBYTE(v53[1].__state_) = 1;
                            std::future<void>::~future(&v93);
                            return;
                          }
                          v78 = 5;
LABEL_118:
                          (*(void (**)(void))(*v77 + 8 * v78))();
                          goto LABEL_119;
                        }
LABEL_117:
                        v78 = 4;
                        v77 = v113;
                        goto LABEL_118;
                      }
                      v67 = 5;
                      v46 = v66;
LABEL_97:
                      (*((void (**)(void **))*v46 + v67))(v46);
                      goto LABEL_98;
                    }
LABEL_96:
                    v67 = 4;
                    goto LABEL_97;
                  }
                  v59 = 5;
                  v49 = v58;
LABEL_81:
                  ((void (*)(uint64_t (***)()))(*v49)[v59])(v49);
                  goto LABEL_82;
                }
              }
              v59 = 4;
              goto LABEL_81;
            }
            v54 = 5;
          }
          (*((void (**)(void))*v52 + v54))();
          goto LABEL_72;
        }
      }
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      goto LABEL_33;
    }
    v9.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v10 = atomic_load((unsigned int *)(v6 + 296));
    if (!*(_BYTE *)(v6 + 104))
      goto LABEL_192;
    if (*(_QWORD *)(v6 + 96) > (unint64_t)v10)
      goto LABEL_6;
    rep = v9.__d_.__rep_;
    LODWORD(v117) = 0;
    sub_20B0133B8(&v115, "blocking caller while waiting for space in queue");
    if ((_DWORD)v117 == -1)
LABEL_193:
      sub_20AECFAB8();
    v113[0] = &v97;
    ((void (*)(void **__return_ptr, _QWORD *, __int128 *))off_24C410E30[v117])(v121, v113, &v115);
    if ((_DWORD)v117 != -1)
      ((void (*)(_QWORD *, __int128 *))off_24C410E18[v117])(v113, &v115);
    sub_20B1E2824((uint64_t)v121, *(_QWORD *)(v6 + 96), *(_QWORD *)(v6 + 104), (uint64_t)v101);
    v91 = v7 + 16;
    if (*(_BYTE *)(v6 + 160))
    {
      v82 = *(_QWORD *)(v6 + 152);
      if (!v82)
LABEL_194:
        sub_20AECABA4();
      (*(void (**)(uint64_t, uint64_t, uint64_t, std::__shared_weak_count **))(*(_QWORD *)v82 + 48))(v82, v6 + 32, v91, v101);
    }
    if (v111)
    {
      if (v110)
      {
        if (v109 < 0)
          operator delete(__p);
        if (v106 < 0)
          operator delete(v104[1]);
      }
      if (LOBYTE(v104[0]) && SHIBYTE(v103) < 0)
        operator delete(v102[0]);
    }
    if (v122 < 0)
      operator delete(v121[0]);
    v83.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    std::chrono::steady_clock::now();
    v84.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    v85.__d_.__rep_ = 1000000000;
    if (v84.__d_.__rep_)
    {
      if (v84.__d_.__rep_ <= 0)
      {
        v85.__d_.__rep_ = 0x800000003B9ACA00;
        if ((unint64_t)v84.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          goto LABEL_160;
      }
      else if ((unint64_t)v84.__d_.__rep_ >= 0x20C49BA5D411B8)
      {
        v85.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_160;
      }
      v85.__d_.__rep_ = 1000 * v84.__d_.__rep_ + 1000000000;
    }
LABEL_160:
    std::condition_variable::__do_timed_wait((std::condition_variable *)(v6 + 304), &__lk, v85);
    std::chrono::steady_clock::now();
    v86 = atomic_load((unsigned int *)(v6 + 296));
    if (*(_BYTE *)(v6 + 104))
    {
      v87 = v83.__d_.__rep_ - rep;
      while (1)
      {
        if (*(_QWORD *)(v6 + 96) > (unint64_t)v86)
          goto LABEL_6;
        if (std::chrono::steady_clock::now().__d_.__rep_ - (v87 + rep) >= 500000000)
          break;
LABEL_182:
        std::chrono::steady_clock::now();
        v90.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        v88.__d_.__rep_ = 1000000000;
        if (v90.__d_.__rep_)
        {
          if (v90.__d_.__rep_ < 1)
          {
            if ((unint64_t)v90.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
              v88.__d_.__rep_ = 1000 * v90.__d_.__rep_ + 1000000000;
            else
              v88.__d_.__rep_ = 0x800000003B9ACA00;
          }
          else if ((unint64_t)v90.__d_.__rep_ >= 0x20C49BA5D411B8)
          {
            v88.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v88.__d_.__rep_ = 1000 * v90.__d_.__rep_ + 1000000000;
          }
        }
        std::condition_variable::__do_timed_wait((std::condition_variable *)(v6 + 304), &__lk, v88);
        std::chrono::steady_clock::now();
        v86 = atomic_load((unsigned int *)(v6 + 296));
        if (!*(_BYTE *)(v6 + 104))
          goto LABEL_192;
      }
      LODWORD(v117) = 0;
      sub_20B0133B8(&v115, "blocking caller while waiting for space in queue");
      if ((_DWORD)v117 == -1)
        goto LABEL_193;
      v113[0] = &v97;
      ((void (*)(void **__return_ptr, _QWORD *, __int128 *))off_24C410E30[v117])(v121, v113, &v115);
      if ((_DWORD)v117 != -1)
        ((void (*)(_QWORD *, __int128 *))off_24C410E18[v117])(v113, &v115);
      sub_20B1E2824((uint64_t)v121, *(_QWORD *)(v6 + 96), *(_QWORD *)(v6 + 104), (uint64_t)v101);
      if (*(_BYTE *)(v6 + 160))
      {
        v89 = *(_QWORD *)(v6 + 152);
        if (!v89)
          goto LABEL_194;
        (*(void (**)(uint64_t, uint64_t, uint64_t, std::__shared_weak_count **))(*(_QWORD *)v89 + 48))(v89, v6 + 32, v91, v101);
      }
      if (!v111)
        goto LABEL_179;
      if (!v110)
        goto LABEL_176;
      if (v109 < 0)
      {
        operator delete(__p);
        if ((v106 & 0x80000000) == 0)
        {
LABEL_176:
          if (LOBYTE(v104[0]))
            goto LABEL_177;
          goto LABEL_179;
        }
      }
      else if ((v106 & 0x80000000) == 0)
      {
        goto LABEL_176;
      }
      operator delete(v104[1]);
      if (LOBYTE(v104[0]))
      {
LABEL_177:
        if (SHIBYTE(v103) < 0)
          operator delete(v102[0]);
      }
LABEL_179:
      if (v122 < 0)
        operator delete(v121[0]);
      v87 = std::chrono::steady_clock::now().__d_.__rep_ - rep;
      goto LABEL_182;
    }
LABEL_192:
    sub_20AF3FE2C();
  }
  sub_20B1E830C((uint64_t)v101, *a2, (_QWORD *)a2[1], a3);
  if (v112)
  {
    LOBYTE(a1->__state_) = 0;
    LOBYTE(a1[1].__state_) = 0;
    return;
  }
  if (!*(_BYTE *)(v6 + 160))
  {
    LOBYTE(a1->__state_) = 0;
    LOBYTE(a1[1].__state_) = 0;
LABEL_149:
    if (v111)
    {
      if (v110)
      {
        if (v109 < 0)
          operator delete(__p);
        if (v106 < 0)
          operator delete(v104[1]);
      }
      if (LOBYTE(v104[0]) && SHIBYTE(v103) < 0)
        operator delete(v102[0]);
    }
    return;
  }
  v79 = *(_QWORD *)(v6 + 152);
  if (!v79)
    sub_20AECABA4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, std::__shared_weak_count **))(*(_QWORD *)v79 + 48))(v79, v6 + 32, a2[1] + 16, v101);
  v80 = v112;
  LOBYTE(a1->__state_) = 0;
  LOBYTE(a1[1].__state_) = 0;
  if (!v80)
    goto LABEL_149;
}

void sub_20B1E96CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::future<void> a11, std::mutex *a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v44;

  sub_20AECCE40((uint64_t)&a25);
  if (*(char *)(v44 - 113) < 0)
    operator delete(*(void **)(v44 - 136));
  if (!a13)
    _Unwind_Resume(a1);
  std::mutex::unlock(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1E98AC(uint64_t a1, uint64_t a2)
{
  std::future<void> v4;
  char v5;

  sub_20B1E87D4(&v4, a1, a2);
  if (v5)
    std::future<void>::~future(&v4);
  return a1;
}

uint64_t sub_20B1E98F4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20B1E9904(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  uint64_t *v14;
  __int128 v15;
  _OWORD *v16;
  uint64_t v17;
  BOOL v18;
  __int128 *v19;
  size_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void **v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t *v44;
  uint64_t v45;
  void **__dst;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  void *v56;
  char v57;
  void *__p;
  char v59;
  char v60;
  char v61;
  char v62;
  uint64_t v63;
  _QWORD v64[3];
  uint64_t *v65;
  char v66;
  uint64_t v67[3];
  uint64_t *v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  *a1 = &off_24C410C70;
  LOBYTE(v64[0]) = 0;
  v66 = 0;
  if (*(_BYTE *)(a4 + 32))
  {
    v9 = *(_QWORD *)(a4 + 24);
    if (v9)
    {
      if (v9 == a4)
      {
        v65 = v64;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a4 + 24))(a4, v64);
      }
      else
      {
        v65 = *(uint64_t **)(a4 + 24);
        *(_QWORD *)(a4 + 24) = 0;
      }
    }
    else
    {
      v65 = 0;
    }
    v66 = 1;
  }
  if (*(_BYTE *)(a3 + 48))
  {
    sub_20B431C0C("VDataExporter", 0, 2u, 0, 0, 0, v67);
    v10 = v67[0];
    *(_QWORD *)&v52 = &off_24C41C9F8;
    *((_QWORD *)&v52 + 1) = v67[0];
    v11 = (_QWORD *)operator new();
    *v11 = &off_24C410DB8;
    v12 = (_QWORD *)operator new();
    *v12 = &off_24C41C9F8;
    v12[1] = v10;
    v11[1] = v12;
  }
  else
  {
    v11 = 0;
  }
  v13 = (char *)operator new(0x1F0uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_24C411118;
  LOBYTE(v67[0]) = 0;
  v69 = 0;
  if (v66)
  {
    if (v65)
    {
      if (v65 == v64)
      {
        v68 = v67;
        (*(void (**)(_QWORD *, uint64_t *))(v64[0] + 24))(v64, v67);
      }
      else
      {
        v68 = v65;
        v65 = 0;
      }
    }
    else
    {
      v68 = 0;
    }
    v69 = 1;
  }
  *((_OWORD *)v13 + 2) = 0u;
  v14 = (uint64_t *)(v13 + 32);
  *((_QWORD *)v13 + 3) = &off_24C410C38;
  __dst = (void **)(v13 + 56);
  *((_OWORD *)v13 + 3) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  *((_QWORD *)v13 + 10) = a5;
  sub_20AF05070((uint64_t)(v13 + 88), a3);
  v13[152] = 0;
  v15 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v13 + 120) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v13 + 136) = v15;
  v13[184] = 0;
  if (v69)
  {
    if (v68)
    {
      if (v68 == v67)
      {
        *((_QWORD *)v13 + 22) = v13 + 152;
        (*(void (**)(uint64_t *, char *))(v67[0] + 24))(v67, v13 + 152);
      }
      else
      {
        *((_QWORD *)v13 + 22) = v68;
        v68 = 0;
      }
    }
    else
    {
      *((_QWORD *)v13 + 22) = 0;
    }
    v13[184] = 1;
  }
  *((_QWORD *)v13 + 31) = 850045863;
  v13[192] = 0;
  *((_QWORD *)v13 + 27) = &off_24C41B880;
  v13[208] = 0;
  *((_QWORD *)v13 + 28) = 0;
  *((_QWORD *)v13 + 29) = 0;
  *((_QWORD *)v13 + 30) = 0;
  *((_OWORD *)v13 + 16) = 0u;
  *((_OWORD *)v13 + 17) = 0u;
  *((_OWORD *)v13 + 18) = 0u;
  *((_QWORD *)v13 + 38) = 0;
  *((_QWORD *)v13 + 39) = v11;
  *((_DWORD *)v13 + 80) = 0;
  *((_QWORD *)v13 + 41) = 1018212795;
  *((_OWORD *)v13 + 21) = 0u;
  *((_OWORD *)v13 + 22) = 0u;
  *((_QWORD *)v13 + 46) = 0;
  *((_QWORD *)v13 + 47) = 850045863;
  v16 = v13 + 440;
  v13[480] = 0;
  *((_OWORD *)v13 + 24) = 0u;
  *((_OWORD *)v13 + 26) = 0u;
  *(_OWORD *)(v13 + 425) = 0u;
  v17 = *((_QWORD *)v13 + 18);
  *((_OWORD *)v13 + 25) = 0u;
  if ((unint64_t)(v17 - 1) < 2)
  {
    *v16 = 0uLL;
    *(_OWORD *)(v13 + 456) = 0uLL;
    *((_DWORD *)v13 + 118) = 1065353216;
    v13[480] = 1;
LABEL_30:
    v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 2;
    goto LABEL_31;
  }
  if (v17)
    goto LABEL_30;
  if (*(_BYTE *)(a3 + 48))
  {
    *v16 = 0uLL;
    *(_OWORD *)(v13 + 456) = 0uLL;
    *((_DWORD *)v13 + 118) = 1065353216;
    v13[480] = 1;
    v13[488] = 0;
    goto LABEL_32;
  }
  v18 = 1;
LABEL_31:
  v13[488] = v18;
LABEL_32:
  v48 = 0x500000001;
  v49 = 0;
  v50 = 1;
  v51 = 0;
  sub_20B1FCD2C(a2, a5, (uint64_t)&v48, (uint64_t)&v52);
  if (!v62)
  {
    sub_20B0B52D8((uint64_t)&v52);
    sub_20B0BFB50((uint64_t)&v52);
  }
  if (v13[79] < 0)
  {
    if (v53 >= 0)
      v19 = &v52;
    else
      v19 = (__int128 *)v52;
    if (v53 >= 0)
      v20 = HIBYTE(v53);
    else
      v20 = *((_QWORD *)&v52 + 1);
    sub_20AEC8090(__dst, v19, v20);
  }
  else if (v53 < 0)
  {
    sub_20AEC7FCC(__dst, (void *)v52, *((size_t *)&v52 + 1));
  }
  else
  {
    *(_OWORD *)__dst = v52;
    *((_QWORD *)v13 + 9) = v53;
  }
  v22 = v54;
  v21 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)v13 + 29);
  *((_QWORD *)v13 + 28) = v22;
  *((_QWORD *)v13 + 29) = v21;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v13 + 28) + 16))(*((_QWORD *)v13 + 28));
  v29 = (_QWORD *)operator new();
  v63 = 0x400000001;
  sub_20B515AB4((uint64_t)v29, &v63, v28, 0, 0, 0);
  *v29 = &off_24C411588;
  v29[2] = &unk_24C4116D8;
  v30 = *((_QWORD *)v13 + 30);
  *((_QWORD *)v13 + 30) = v29;
  if (v30)
    MEMORY[0x20BD3583C](v30, 0x10A1C40756C35FELL);
  if (v62)
  {
    v31 = v55;
    if (!v55)
      goto LABEL_59;
    v32 = (unint64_t *)&v55->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (v33)
    {
LABEL_59:
      if ((SHIBYTE(v53) & 0x80000000) == 0)
        goto LABEL_72;
      goto LABEL_60;
    }
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    if (SHIBYTE(v53) < 0)
    {
LABEL_60:
      v34 = (void **)&v52;
LABEL_70:
      operator delete(*v34);
    }
  }
  else if (v61)
  {
    if (v60)
    {
      if (v59 < 0)
        operator delete(__p);
      if (v57 < 0)
        operator delete(v56);
    }
    if ((_BYTE)v55 && SHIBYTE(v54) < 0)
    {
      v34 = (void **)&v53;
      goto LABEL_70;
    }
  }
LABEL_72:
  v35 = v13 + 24;
  if (v69)
  {
    v36 = v68;
    if (v68 == v67)
    {
      v37 = 4;
      v36 = v67;
      goto LABEL_77;
    }
    if (v68)
    {
      v37 = 5;
LABEL_77:
      (*(void (**)(void))(*v36 + 8 * v37))();
    }
  }
  a1[1] = v35;
  a1[2] = v13;
  sub_20B0B2428(&v52);
  v38 = v52;
  *(_QWORD *)&v52 = 0;
  v39 = *v14;
  *v14 = v38;
  if (v39)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v52;
    *(_QWORD *)&v52 = 0;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  v41 = (unint64_t *)(v13 + 16);
  do
    v42 = __ldxr(v41);
  while (__stxr(v42 + 1, v41));
  v43 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  *((_QWORD *)v13 + 5) = v35;
  *((_QWORD *)v13 + 6) = v13;
  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  if (v66)
  {
    v44 = v65;
    if (v65 == v64)
    {
      v45 = 4;
      v44 = v64;
      goto LABEL_90;
    }
    if (v65)
    {
      v45 = 5;
LABEL_90:
      (*(void (**)(void))(*v44 + 8 * v45))();
    }
  }
  return a1;
}

void sub_20B1EA048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1EA284(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 112))
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 288) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 288) + 8));
    if (*(_BYTE *)(v2 + 456))
      sub_20B1F7338(v2 + 416, 0, 0);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20B1EA32C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 112))
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 288) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 288) + 8));
    if (*(_BYTE *)(v2 + 456))
      sub_20B1F7338(v2 + 416, 0, 0);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B1EA3D4(uint64_t a1, uint64_t a2)
{
  std::future<void> v4;
  char v5;

  sub_20B1E87D4(&v4, *(_QWORD *)(a1 + 8), a2);
  if (v5)
    std::future<void>::~future(&v4);
  return a1;
}

uint64_t *sub_20B1EA41C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C41EF88;
    if (*(char *)(v2 + 159) < 0)
    {
      operator delete(*(void **)(v2 + 136));
      if ((*(char *)(v2 + 71) & 0x80000000) == 0)
      {
LABEL_4:
        if ((*(char *)(v2 + 47) & 0x80000000) == 0)
        {
LABEL_5:
          MEMORY[0x20BD3583C](v2, 0x10B3C40F5E21753);
          return a1;
        }
LABEL_9:
        operator delete(*(void **)(v2 + 24));
        goto LABEL_5;
      }
    }
    else if ((*(char *)(v2 + 71) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(v2 + 48));
    if ((*(char *)(v2 + 47) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
  return a1;
}

void sub_20B1EA4B0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  char v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  void *v55;
  __int128 __p;
  void *v57;
  int v58;
  __int128 v59;
  void *v60;
  __int128 v61;
  void *v62;
  uint64_t v63;
  __int128 v64;
  void *v65;
  __int128 v66;
  void *v67;
  void *v68[4];
  int v69;
  __int128 v70;
  void *v71;
  __int128 v72;
  void *v73;
  uint64_t v74;
  void *v75[2];
  _OWORD v76[2];
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  void *v80;
  int v81;
  __int128 v82;
  void *v83;
  __int128 v84;
  void *v85;
  uint64_t v86;

  v2 = a1[32];
  if (!v2)
    return;
  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v69 = 0;
  memset(v68, 0, sizeof(v68));
  LOBYTE(v74) = 0;
  *(_OWORD *)v75 = 0u;
  memset(v76, 0, sizeof(v76));
  v77 = 0;
  v71 = 0;
  v70 = 0uLL;
  LOBYTE(v72) = 0;
  sub_20B1FC108((uint64_t)&v55, (uint64_t)v68);
  if (a1[35] < 0x86BCA1AF286BCA1BLL * ((uint64_t)(a1[37] - a1[36]) >> 3))
    goto LABEL_152;
  v4 = 0;
  v5 = v3 + 4;
  while (1)
  {
    v6 = a1[34];
    *(_BYTE *)(v6 + 128) = 1;
    *(_QWORD *)(v6 + 80) = 0;
    *(_QWORD *)(v6 + 104) = 0;
    *(_WORD *)(v6 + 130) = 0;
    *(_BYTE *)(v6 + 132) = 0;
    LODWORD(v68[0]) = 3;
    sub_20B514490(v6, v68);
    v7 = v68[0];
    if (LODWORD(v68[0]) >= 3)
      v8 = 3;
    else
      v8 = v68[0];
    if (v8 >= 2)
    {
      sub_20B514B8C(v6, &v55);
      ++*(_QWORD *)(v6 + 80);
      if (*(_BYTE *)(v6 + 128))
        v9 = *(_BYTE *)(v6 + 131) == 0;
      else
        v9 = 1;
      if (v9)
      {
        sub_20B51680C(v6, (uint64_t)v68);
        if (SHIBYTE(v57) < 0)
          operator delete((void *)__p);
        __p = *(_OWORD *)v68;
        v57 = v68[2];
        ++*(_QWORD *)(v6 + 104);
      }
      else
      {
        *(_BYTE *)(v6 + 132) = 1;
      }
      sub_20B514490(v6, &v58);
      v10 = *(_QWORD *)(v6 + 80);
      *(_QWORD *)(v6 + 80) = v10 + 1;
      if (*(_BYTE *)(v6 + 128) && *(_BYTE *)(v6 + 131))
      {
        *(_QWORD *)(v6 + 80) = v10 + 2;
      }
      else
      {
        sub_20B51680C(v6, (uint64_t)v68);
        if (SHIBYTE(v60) < 0)
          operator delete((void *)v59);
        v59 = *(_OWORD *)v68;
        v60 = v68[2];
        ++*(_QWORD *)(v6 + 104);
        v13 = *(unsigned __int8 *)(v6 + 128);
        v14 = *(unsigned __int8 *)(v6 + 131);
        ++*(_QWORD *)(v6 + 80);
        if (!v13 || !v14)
        {
          sub_20B51680C(v6, (uint64_t)v68);
          if (SHIBYTE(v62) < 0)
            operator delete((void *)v61);
          v61 = *(_OWORD *)v68;
          v62 = v68[2];
          ++*(_QWORD *)(v6 + 104);
LABEL_63:
          sub_20B514938(v6, &v63);
          if (v7 >= 3)
          {
            v16 = *(_QWORD *)(v6 + 80);
            *(_QWORD *)(v6 + 80) = v16 + 1;
            if (*(_BYTE *)(v6 + 128) && *(_BYTE *)(v6 + 131))
            {
              *(_QWORD *)(v6 + 80) = v16 + 2;
LABEL_71:
              *(_BYTE *)(v6 + 132) = 1;
              goto LABEL_135;
            }
            sub_20B51680C(v6, (uint64_t)v68);
            if (SHIBYTE(v65) < 0)
              operator delete((void *)v64);
            v64 = *(_OWORD *)v68;
            v65 = v68[2];
            ++*(_QWORD *)(v6 + 104);
            v17 = *(unsigned __int8 *)(v6 + 128);
            v18 = *(unsigned __int8 *)(v6 + 131);
            ++*(_QWORD *)(v6 + 80);
            if (v17 && v18)
              goto LABEL_71;
            sub_20B51680C(v6, (uint64_t)v68);
            if (SHIBYTE(v67) < 0)
              operator delete((void *)v66);
            v66 = *(_OWORD *)v68;
            v67 = v68[2];
            ++*(_QWORD *)(v6 + 104);
            while (1)
            {
LABEL_135:
              if (*(_BYTE *)(v6 + 131)
                || (*(_BYTE *)(*(_QWORD *)(v6 + 16) + *(_QWORD *)(**(_QWORD **)(v6 + 16) - 24) + 32) & 2) != 0)
              {
                goto LABEL_79;
              }
              sub_20B51680C(v6, (uint64_t)v68);
              if (SHIBYTE(v68[2]) < 0)
              {
                if (v68[1] == (void *)1 && *(unsigned __int8 *)(v6 + 72) == *(unsigned __int8 *)v68[0])
                {
LABEL_143:
                  v51 = 0;
                  if (SHIBYTE(v68[2]) < 0)
                    goto LABEL_146;
                  goto LABEL_134;
                }
              }
              else if (SHIBYTE(v68[2]) == 1 && *(unsigned __int8 *)(v6 + 72) == LOBYTE(v68[0]))
              {
                goto LABEL_143;
              }
              v51 = 1;
              if (SHIBYTE(v68[2]) < 0)
LABEL_146:
                operator delete(v68[0]);
LABEL_134:
              if ((v51 & 1) == 0)
                goto LABEL_79;
            }
          }
          goto LABEL_78;
        }
      }
      *(_BYTE *)(v6 + 132) = 1;
      goto LABEL_63;
    }
    v69 = 0;
    memset(v68, 0, sizeof(v68));
    LOBYTE(v74) = 0;
    *(_OWORD *)v75 = 0u;
    memset(v76, 0, sizeof(v76));
    v77 = 0;
    v71 = 0;
    v70 = 0uLL;
    LOBYTE(v72) = 0;
    sub_20B1FBFDC((uint64_t)&v78, (uint64_t)v68);
    sub_20B514B8C(v6, &v78);
    ++*(_QWORD *)(v6 + 80);
    if (!*(_BYTE *)(v6 + 128))
      goto LABEL_22;
    if (*(_BYTE *)(v6 + 131))
    {
      *(_BYTE *)(v6 + 132) = 1;
    }
    else
    {
LABEL_22:
      sub_20B51680C(v6, (uint64_t)v68);
      if (SHIBYTE(v80) < 0)
        operator delete((void *)v79);
      v79 = *(_OWORD *)v68;
      v80 = v68[2];
      ++*(_QWORD *)(v6 + 104);
    }
    sub_20B514490(v6, &v81);
    v11 = *(_QWORD *)(v6 + 80) + 1;
    *(_QWORD *)(v6 + 80) = v11;
    if (*(_BYTE *)(v6 + 128) && *(_BYTE *)(v6 + 131))
    {
      v12 = 1;
      *(_BYTE *)(v6 + 132) = 1;
      *(_QWORD *)(v6 + 80) = v11 + 1;
    }
    else
    {
      sub_20B51680C(v6, (uint64_t)v68);
      if (SHIBYTE(v83) < 0)
        operator delete((void *)v82);
      v82 = *(_OWORD *)v68;
      v83 = v68[2];
      ++*(_QWORD *)(v6 + 104);
      v15 = *(unsigned __int8 *)(v6 + 128);
      v12 = *(unsigned __int8 *)(v6 + 131);
      ++*(_QWORD *)(v6 + 80);
      if (!v15)
        goto LABEL_38;
    }
    if (v12)
    {
      *(_BYTE *)(v6 + 132) = 1;
      goto LABEL_41;
    }
LABEL_38:
    sub_20B51680C(v6, (uint64_t)v68);
    if (SHIBYTE(v85) < 0)
      operator delete((void *)v84);
    v84 = *(_OWORD *)v68;
    v85 = v68[2];
    ++*(_QWORD *)(v6 + 104);
LABEL_41:
    sub_20B514938(v6, &v86);
    sub_20B1FC328((uint64_t)v68, (uint64_t)&v78);
    v55 = v68[0];
    if (SHIBYTE(v57) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v68[1];
    v57 = v68[3];
    HIBYTE(v68[3]) = 0;
    LOBYTE(v68[1]) = 0;
    v58 = v69;
    if (SHIBYTE(v60) < 0)
      operator delete((void *)v59);
    v59 = v70;
    v60 = v71;
    HIBYTE(v71) = 0;
    LOBYTE(v70) = 0;
    if (SHIBYTE(v62) < 0)
      operator delete((void *)v61);
    v61 = v72;
    v62 = v73;
    HIBYTE(v73) = 0;
    LOBYTE(v72) = 0;
    v63 = v74;
    if (SHIBYTE(v65) < 0)
      operator delete((void *)v64);
    v64 = *(_OWORD *)v75;
    v65 = *(void **)&v76[0];
    BYTE7(v76[0]) = 0;
    LOBYTE(v75[0]) = 0;
    if (SHIBYTE(v67) < 0)
    {
      operator delete((void *)v66);
      v66 = *(_OWORD *)((char *)v76 + 8);
      v67 = (void *)*((_QWORD *)&v76[1] + 1);
      HIBYTE(v76[1]) = 0;
      BYTE8(v76[0]) = 0;
      if (SBYTE7(v76[0]) < 0)
      {
        operator delete(v75[0]);
        if ((SHIBYTE(v73) & 0x80000000) == 0)
        {
LABEL_54:
          if ((SHIBYTE(v71) & 0x80000000) == 0)
            goto LABEL_55;
          goto LABEL_74;
        }
      }
      else if ((SHIBYTE(v73) & 0x80000000) == 0)
      {
        goto LABEL_54;
      }
    }
    else
    {
      v66 = *(_OWORD *)((char *)v76 + 8);
      v67 = (void *)*((_QWORD *)&v76[1] + 1);
      HIBYTE(v76[1]) = 0;
      BYTE8(v76[0]) = 0;
      if ((SHIBYTE(v73) & 0x80000000) == 0)
        goto LABEL_54;
    }
    operator delete((void *)v72);
    if ((SHIBYTE(v71) & 0x80000000) == 0)
    {
LABEL_55:
      if ((SHIBYTE(v68[3]) & 0x80000000) == 0)
        goto LABEL_56;
      goto LABEL_75;
    }
LABEL_74:
    operator delete((void *)v70);
    if ((SHIBYTE(v68[3]) & 0x80000000) == 0)
    {
LABEL_56:
      if ((SHIBYTE(v85) & 0x80000000) == 0)
        goto LABEL_57;
      goto LABEL_76;
    }
LABEL_75:
    operator delete(v68[1]);
    if ((SHIBYTE(v85) & 0x80000000) == 0)
    {
LABEL_57:
      if ((SHIBYTE(v83) & 0x80000000) == 0)
        goto LABEL_58;
      goto LABEL_77;
    }
LABEL_76:
    operator delete((void *)v84);
    if ((SHIBYTE(v83) & 0x80000000) == 0)
    {
LABEL_58:
      if (SHIBYTE(v80) < 0)
        goto LABEL_94;
      goto LABEL_78;
    }
LABEL_77:
    operator delete((void *)v82);
    if (SHIBYTE(v80) < 0)
    {
LABEL_94:
      operator delete((void *)v79);
      if (v7 >= 2)
        goto LABEL_135;
      goto LABEL_79;
    }
LABEL_78:
    if (v7 >= 2)
      goto LABEL_135;
LABEL_79:
    if (!sub_20B516B94(v6))
      break;
    sub_20B1FC460((uint64_t)&v55, (uint64_t)v68);
    v20 = (char *)a1[37];
    v19 = a1[38];
    if ((unint64_t)v20 < v19)
    {
      *(void **)v20 = v68[0];
      v21 = *(_OWORD *)&v68[1];
      *((void **)v20 + 3) = v68[3];
      *(_OWORD *)(v20 + 8) = v21;
      memset(&v68[1], 0, 24);
      *((_DWORD *)v20 + 8) = v69;
      v22 = v70;
      *((_QWORD *)v20 + 7) = v71;
      *(_OWORD *)(v20 + 40) = v22;
      v71 = 0;
      v70 = 0uLL;
      v20[64] = 0;
      v20[88] = 0;
      if ((_BYTE)v74)
      {
        v23 = v72;
        *((_QWORD *)v20 + 10) = v73;
        *((_OWORD *)v20 + 4) = v23;
        v73 = 0;
        v72 = 0uLL;
        v20[88] = 1;
      }
      v24 = *(_OWORD *)v75;
      *((_QWORD *)v20 + 14) = *(_QWORD *)&v76[0];
      *((_OWORD *)v20 + 6) = v24;
      v75[1] = 0;
      *(_QWORD *)&v76[0] = 0;
      v75[0] = 0;
      *((_QWORD *)v20 + 15) = *((_QWORD *)&v76[0] + 1);
      v25 = v76[1];
      *((_QWORD *)v20 + 18) = v77;
      *((_OWORD *)v20 + 8) = v25;
      v77 = 0;
      v76[1] = 0uLL;
      a1[37] = v20 + 152;
      if ((SBYTE7(v76[0]) & 0x80000000) == 0)
      {
LABEL_113:
        if (!(_BYTE)v74)
          goto LABEL_119;
        goto LABEL_117;
      }
      goto LABEL_116;
    }
    v26 = (char *)a1[36];
    v27 = 0x86BCA1AF286BCA1BLL * ((v20 - v26) >> 3) + 1;
    if (v27 > 0x1AF286BCA1AF286)
      sub_20AEC60B8();
    v28 = v5;
    v29 = v4;
    v30 = v3;
    v31 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v19 - (_QWORD)v26) >> 3);
    if (2 * v31 > v27)
      v27 = 2 * v31;
    if (v31 >= 0xD79435E50D7943)
      v32 = 0x1AF286BCA1AF286;
    else
      v32 = v27;
    if (v32)
    {
      if (v32 > 0x1AF286BCA1AF286)
        sub_20AEC60CC();
      v33 = (char *)operator new(152 * v32);
    }
    else
    {
      v33 = 0;
    }
    v34 = &v33[8 * ((v20 - v26) >> 3)];
    *(void **)v34 = v68[0];
    *(_OWORD *)(v34 + 8) = *(_OWORD *)&v68[1];
    *((void **)v34 + 3) = v68[3];
    memset(&v68[1], 0, 24);
    *((_DWORD *)v34 + 8) = v69;
    *(_OWORD *)(v34 + 40) = v70;
    *((_QWORD *)v34 + 7) = v71;
    v71 = 0;
    v70 = 0uLL;
    v34[64] = 0;
    v34[88] = 0;
    if ((_BYTE)v74)
    {
      *((_OWORD *)v34 + 4) = v72;
      *((_QWORD *)v34 + 10) = v73;
      v73 = 0;
      v72 = 0uLL;
      v34[88] = 1;
    }
    v35 = &v33[8 * ((v20 - v26) >> 3)];
    *((_OWORD *)v35 + 6) = *(_OWORD *)v75;
    v36 = *(_QWORD *)&v76[0];
    v75[1] = 0;
    *(_QWORD *)&v76[0] = 0;
    v37 = &v33[152 * v32];
    v75[0] = 0;
    v38 = *((_QWORD *)&v76[0] + 1);
    *((_QWORD *)v35 + 14) = v36;
    *((_QWORD *)v35 + 15) = v38;
    *((_OWORD *)v35 + 8) = v76[1];
    *((_QWORD *)v35 + 18) = v77;
    v76[1] = 0uLL;
    v39 = v34 + 152;
    v77 = 0;
    if (v20 == v26)
    {
      a1[36] = v34;
      a1[37] = v39;
      a1[38] = v37;
      v3 = v30;
      v4 = v29;
      goto LABEL_109;
    }
    v40 = 0;
    do
    {
      v43 = &v34[v40];
      v44 = &v20[v40];
      *((_QWORD *)v43 - 19) = *(_QWORD *)&v20[v40 - 152];
      v45 = *(_OWORD *)&v20[v40 - 144];
      *((_QWORD *)v43 - 16) = *(_QWORD *)&v20[v40 - 128];
      *((_OWORD *)v43 - 9) = v45;
      *((_QWORD *)v44 - 17) = 0;
      *((_QWORD *)v44 - 16) = 0;
      *((_QWORD *)v44 - 18) = 0;
      *((_DWORD *)v43 - 30) = *(_DWORD *)&v20[v40 - 120];
      v46 = *(_OWORD *)&v20[v40 - 112];
      *((_QWORD *)v43 - 12) = *(_QWORD *)&v20[v40 - 96];
      *((_OWORD *)v43 - 7) = v46;
      *((_QWORD *)v44 - 13) = 0;
      *((_QWORD *)v44 - 12) = 0;
      *((_QWORD *)v44 - 14) = 0;
      v34[v40 - 88] = 0;
      *(v43 - 64) = 0;
      if (v20[v40 - 64])
      {
        v47 = *(_OWORD *)(v44 - 88);
        *(_QWORD *)&v34[v40 - 72] = *((_QWORD *)v44 - 9);
        *(_OWORD *)&v34[v40 - 88] = v47;
        *((_QWORD *)v44 - 10) = 0;
        *((_QWORD *)v44 - 9) = 0;
        *((_QWORD *)v44 - 11) = 0;
        *(v43 - 64) = 1;
      }
      v41 = *(_OWORD *)(v44 - 56);
      *((_QWORD *)v43 - 5) = *((_QWORD *)v44 - 5);
      *(_OWORD *)(v43 - 56) = v41;
      *((_QWORD *)v44 - 6) = 0;
      *((_QWORD *)v44 - 5) = 0;
      *((_QWORD *)v44 - 7) = 0;
      *((_QWORD *)v43 - 4) = *((_QWORD *)v44 - 4);
      v42 = *(_OWORD *)(v44 - 24);
      *((_QWORD *)v43 - 1) = *((_QWORD *)v44 - 1);
      *(_OWORD *)(v43 - 24) = v42;
      *((_QWORD *)v44 - 2) = 0;
      *((_QWORD *)v44 - 1) = 0;
      *((_QWORD *)v44 - 3) = 0;
      v40 -= 152;
    }
    while (&v20[v40] != v26);
    v20 = (char *)a1[36];
    v48 = a1[37];
    a1[36] = &v34[v40];
    a1[37] = v39;
    a1[38] = v37;
    v3 = v30;
    if ((char *)v48 != v20)
    {
      v4 = v29;
      do
      {
        v48 -= 152;
        sub_20B1F6594(v48);
      }
      while ((char *)v48 != v20);
LABEL_109:
      v5 = v28;
      if (!v20)
        goto LABEL_111;
LABEL_110:
      operator delete(v20);
      goto LABEL_111;
    }
    v4 = v29;
    v5 = v28;
    if (v20)
      goto LABEL_110;
LABEL_111:
    v49 = SHIBYTE(v77);
    a1[37] = v39;
    if (v49 < 0)
    {
      operator delete(*(void **)&v76[1]);
      if ((SBYTE7(v76[0]) & 0x80000000) == 0)
        goto LABEL_113;
    }
    else if ((SBYTE7(v76[0]) & 0x80000000) == 0)
    {
      goto LABEL_113;
    }
LABEL_116:
    operator delete(v75[0]);
    if (!(_BYTE)v74)
      goto LABEL_119;
LABEL_117:
    if (SHIBYTE(v73) < 0)
      operator delete((void *)v72);
LABEL_119:
    if (SHIBYTE(v71) < 0)
    {
      operator delete((void *)v70);
      if ((SHIBYTE(v68[3]) & 0x80000000) == 0)
      {
LABEL_121:
        if ((*((_BYTE *)v5 + *(_QWORD *)(*v3 - 24)) & 2) != 0)
          break;
        goto LABEL_125;
      }
    }
    else if ((SHIBYTE(v68[3]) & 0x80000000) == 0)
    {
      goto LABEL_121;
    }
    operator delete(v68[1]);
    if ((*((_BYTE *)v5 + *(_QWORD *)(*v3 - 24)) & 2) != 0)
      break;
LABEL_125:
    v50 = v4 > 0x1FE;
    v4 += 2;
    if (v50)
    {
      v4 = 0;
      if (a1[35] < 0x86BCA1AF286BCA1BLL * ((uint64_t)(a1[37] - a1[36]) >> 3))
        goto LABEL_152;
    }
  }
  v52 = (std::__shared_weak_count *)a1[33];
  a1[32] = 0;
  a1[33] = 0;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
LABEL_152:
  if (SHIBYTE(v67) < 0)
  {
    operator delete((void *)v66);
    if (SHIBYTE(v65) < 0)
      goto LABEL_159;
LABEL_154:
    if ((SHIBYTE(v62) & 0x80000000) == 0)
      goto LABEL_155;
LABEL_160:
    operator delete((void *)v61);
    if (SHIBYTE(v60) < 0)
      goto LABEL_161;
LABEL_156:
    if (SHIBYTE(v57) < 0)
LABEL_162:
      operator delete((void *)__p);
  }
  else
  {
    if ((SHIBYTE(v65) & 0x80000000) == 0)
      goto LABEL_154;
LABEL_159:
    operator delete((void *)v64);
    if (SHIBYTE(v62) < 0)
      goto LABEL_160;
LABEL_155:
    if ((SHIBYTE(v60) & 0x80000000) == 0)
      goto LABEL_156;
LABEL_161:
    operator delete((void *)v59);
    if (SHIBYTE(v57) < 0)
      goto LABEL_162;
  }
}

void sub_20B1EB1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_20B1F2700((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20B1EB1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_20B1F2700((uint64_t)&a43);
  sub_20B1F27AC((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_20B1EB210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20B1F27AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1EB240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20B1F27AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1EB254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20B1F27AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1EB268(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  size_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  const void *v14;
  size_t v15;
  _QWORD *v16;
  int v17;
  uint64_t *v18;
  size_t v19;
  size_t v20;
  int v21;
  const void *v22;
  _QWORD *v23;
  const void *v24;
  int v25;
  const void *v26;
  size_t v27;
  size_t v28;
  int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  __int128 v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t **v42;
  char v43;
  const void *v44;
  size_t v45;
  _QWORD *v46;
  const void *v47;
  const void *v48;
  int v49;
  const void *v50;
  size_t v51;
  size_t v52;
  int v53;
  int v54;
  char *v55;
  _BYTE *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void **v61;
  size_t *v62;
  size_t v63;
  void *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t **v70;
  uint64_t **v71;
  char *v72;
  unsigned int v73;
  BOOL v74;
  char **v75;
  uint64_t **v76;
  unsigned int v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t *v80;
  __int128 v81;
  uint64_t **v82;
  uint64_t **v83;
  _QWORD *v84;
  _BYTE v85[24];
  unsigned int v86;
  __int128 v87;
  __int128 __p;
  uint64_t v89;
  char v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  char v96;
  char v97;
  __int128 __dst;
  __int128 v99;
  uint64_t v100;
  char v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  char v107;
  char v108;

  v82 = (uint64_t **)(a1 + 344);
  v83 = (uint64_t **)(a1 + 312);
  v84 = (_QWORD *)(a1 + 320);
  while (1)
  {
    v2 = *(_QWORD *)(a1 + 288);
    v3 = *(_QWORD *)(a1 + 280);
    if (v3 >= 0x86BCA1AF286BCA1BLL * ((*(_QWORD *)(a1 + 296) - v2) >> 3) && !*(_QWORD *)(a1 + 256))
      return;
    v4 = *(_QWORD **)(a1 + 136);
    v5 = *(_QWORD **)(a1 + 144);
    if (v4 != v5)
      break;
LABEL_14:
    v11 = v2 + 152 * v3 + 8;
    v12 = (uint64_t *)*v84;
    if (!*v84)
      goto LABEL_57;
    v13 = *(char *)(v11 + 23);
    if (v13 >= 0)
      v14 = (const void *)v11;
    else
      v14 = *(const void **)v11;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = *(_QWORD *)(v11 + 8);
    v16 = v84;
    do
    {
      while (1)
      {
        v17 = *((char *)v12 + 55);
        v18 = v17 >= 0 ? v12 + 4 : (uint64_t *)v12[4];
        v19 = v17 >= 0 ? *((unsigned __int8 *)v12 + 55) : v12[5];
        v20 = v15 >= v19 ? v19 : v15;
        v21 = memcmp(v18, v14, v20);
        if (v21)
          break;
        if (v19 < v15)
          goto LABEL_24;
LABEL_22:
        v16 = v12;
        v12 = (uint64_t *)*v12;
        if (!v12)
          goto LABEL_39;
      }
      if ((v21 & 0x80000000) == 0)
        goto LABEL_22;
LABEL_24:
      v12 = (uint64_t *)v12[1];
    }
    while (v12);
LABEL_39:
    if (v16 == v84)
      goto LABEL_57;
    v24 = (const void *)v16[4];
    v23 = v16 + 4;
    v22 = v24;
    v25 = *((char *)v23 + 23);
    if (v25 >= 0)
      v26 = v23;
    else
      v26 = v22;
    if (v25 >= 0)
      v27 = *((unsigned __int8 *)v23 + 23);
    else
      v27 = v23[1];
    if (v27 >= v15)
      v28 = v15;
    else
      v28 = v27;
    v29 = memcmp(v14, v26, v28);
    if (v29)
    {
      if (v29 < 0)
      {
LABEL_57:
        sub_20AECAA0C(v83, (const void **)v11, v11);
        sub_20B1E2D0C((uint64_t *)v11, (uint64_t)&v87);
        __dst = v87;
        LOBYTE(v99) = 0;
        v108 = 0;
        if (v97)
        {
          v101 = 0;
          if (v90)
          {
            v99 = __p;
            v100 = v89;
            v89 = 0;
            __p = 0uLL;
            v101 = 1;
          }
          LOBYTE(v102) = 0;
          v107 = 0;
          if (v96)
          {
            v102 = v91;
            v103 = v92;
            v92 = 0;
            v91 = 0uLL;
            v104 = v93;
            v105 = v94;
            v106 = v95;
            v94 = 0uLL;
            v95 = 0;
            v107 = 1;
          }
          v108 = 1;
          if (v90 && SHIBYTE(v89) < 0)
            operator delete((void *)__p);
        }
        *(_QWORD *)v85 = operator new(0x40uLL);
        *(_OWORD *)&v85[8] = xmmword_20B5EAC20;
        strcpy(*(char **)v85, "all data of this package will be ignored by the file importer");
        sub_20AFF4064((char *)&__dst, (void **)v85, (uint64_t)&v87);
        if (*(_BYTE *)(a1 + 128))
        {
          v38 = *(_QWORD *)(a1 + 120);
          if (!v38)
            sub_20AECABA4();
          goto LABEL_67;
        }
        goto LABEL_68;
      }
    }
    else if (v15 < v27)
    {
      goto LABEL_57;
    }
LABEL_132:
    v65 = *(_QWORD *)(a1 + 288);
    v66 = *(_QWORD *)(a1 + 280) + 1;
    *(_QWORD *)(a1 + 280) = v66;
    if (v66 >= 0x86BCA1AF286BCA1BLL * ((*(_QWORD *)(a1 + 296) - v65) >> 3))
      sub_20B1EA4B0((_QWORD *)a1);
  }
  v6 = v2 + 152 * v3 + 8;
  while (1)
  {
    if (*v4)
    {
      v7 = (const void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
      if (*(char *)(v2 + 152 * v3 + 31) < 0)
      {
        v10 = *(const void **)v6;
        v9 = *(_QWORD *)(v2 + 152 * v3 + 16);
        if (v8 != v9)
          goto LABEL_7;
      }
      else
      {
        v9 = *(unsigned __int8 *)(v2 + 152 * v3 + 31);
        v10 = (const void *)(v2 + 152 * v3 + 8);
        if (v8 != v9)
          goto LABEL_7;
      }
      if (!memcmp(v7, v10, v9))
        break;
    }
LABEL_7:
    v4 += 2;
    if (v4 == v5)
      goto LABEL_14;
  }
  v30 = v2 + 152 * v3;
  v32 = *(_DWORD *)(v30 + 32);
  v31 = (unsigned int *)(v30 + 32);
  if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v32) & 1) == 0)
  {
    v39 = *v31;
    v40 = v82;
    v41 = *v82;
    v42 = v82;
    v43 = *(_BYTE *)(v6 + 23);
    if (!*v82)
      goto LABEL_118;
    if (v43 >= 0)
      v44 = (const void *)v6;
    else
      v44 = *(const void **)v6;
    if (v43 >= 0)
      v45 = *(unsigned __int8 *)(v6 + 23);
    else
      v45 = *(_QWORD *)(v6 + 8);
    while (1)
    {
      v40 = (uint64_t **)v41;
      v48 = (const void *)v41[4];
      v46 = v41 + 4;
      v47 = v48;
      v49 = *((char *)v46 + 23);
      if (v49 >= 0)
        v50 = v46;
      else
        v50 = v47;
      if (v49 >= 0)
        v51 = *((unsigned __int8 *)v46 + 23);
      else
        v51 = v46[1];
      if (v51 >= v45)
        v52 = v45;
      else
        v52 = v51;
      v53 = memcmp(v44, v50, v52);
      if (v53)
      {
        if (v53 < 0)
          goto LABEL_98;
LABEL_112:
        v54 = memcmp(v50, v44, v52);
        if (v54)
        {
          if ((v54 & 0x80000000) == 0)
            goto LABEL_138;
        }
        else if (v51 >= v45)
        {
LABEL_138:
          v55 = (char *)v40;
          goto LABEL_139;
        }
        v41 = v40[1];
        if (!v41)
        {
          v42 = v40 + 1;
LABEL_118:
          v55 = (char *)operator new(0x50uLL);
          v56 = v55 + 32;
          if (v43 < 0)
          {
            sub_20AEC60F4(v56, *(void **)v6, *(_QWORD *)(v6 + 8));
          }
          else
          {
            v57 = *(_OWORD *)v6;
            *((_QWORD *)v55 + 6) = *(_QWORD *)(v6 + 16);
            *(_OWORD *)v56 = v57;
          }
          *((_QWORD *)v55 + 9) = 0;
          *((_QWORD *)v55 + 8) = 0;
          *((_QWORD *)v55 + 7) = v55 + 64;
          *(_QWORD *)v55 = 0;
          *((_QWORD *)v55 + 1) = 0;
          *((_QWORD *)v55 + 2) = v40;
          *v42 = (uint64_t *)v55;
          v67 = **(_QWORD **)(a1 + 336);
          v68 = (uint64_t *)v55;
          if (v67)
          {
            *(_QWORD *)(a1 + 336) = v67;
            v68 = *v42;
          }
          sub_20AEC84C8(*(uint64_t **)(a1 + 344), v68);
          ++*(_QWORD *)(a1 + 352);
LABEL_139:
          v70 = (uint64_t **)(v55 + 64);
          v69 = (uint64_t *)*((_QWORD *)v55 + 8);
          if (v69)
          {
            v71 = (uint64_t **)(v55 + 64);
            v72 = (char *)*((_QWORD *)v55 + 8);
            do
            {
              v73 = *((_DWORD *)v72 + 7);
              v74 = v73 >= v39;
              if (v73 >= v39)
                v75 = (char **)v72;
              else
                v75 = (char **)(v72 + 8);
              if (v74)
                v71 = (uint64_t **)v72;
              v72 = *v75;
            }
            while (*v75);
            if (v71 != v70 && *((_DWORD *)v71 + 7) <= v39)
              goto LABEL_132;
            do
            {
              while (1)
              {
                v76 = (uint64_t **)v69;
                v77 = *((_DWORD *)v69 + 7);
                if (v77 <= v39)
                  break;
                v69 = *v76;
                v70 = v76;
                if (!*v76)
                  goto LABEL_157;
              }
              if (v77 >= v39)
                goto LABEL_161;
              v69 = v76[1];
            }
            while (v69);
            v70 = v76 + 1;
          }
          else
          {
            v76 = (uint64_t **)(v55 + 64);
          }
LABEL_157:
          v78 = operator new(0x20uLL);
          v78[7] = v39;
          *(_QWORD *)v78 = 0;
          *((_QWORD *)v78 + 1) = 0;
          *((_QWORD *)v78 + 2) = v76;
          *v70 = (uint64_t *)v78;
          v79 = **((_QWORD **)v55 + 7);
          if (v79)
          {
            *((_QWORD *)v55 + 7) = v79;
            v80 = *v70;
          }
          else
          {
            v80 = (uint64_t *)v78;
          }
          sub_20AEC84C8(*((uint64_t **)v55 + 8), v80);
          ++*((_QWORD *)v55 + 9);
LABEL_161:
          if (*(char *)(v6 + 23) < 0)
          {
            sub_20AEC60F4(v85, *(void **)v6, *(_QWORD *)(v6 + 8));
          }
          else
          {
            v81 = *(_OWORD *)v6;
            *(_QWORD *)&v85[16] = *(_QWORD *)(v6 + 16);
            *(_OWORD *)v85 = v81;
          }
          v86 = v39;
          sub_20B1E2F90((uint64_t)v85, (uint64_t)&v87);
          __dst = v87;
          LOBYTE(v99) = 0;
          v108 = 0;
          if (v97)
          {
            v101 = 0;
            if (v90)
            {
              v99 = __p;
              v100 = v89;
              v89 = 0;
              __p = 0uLL;
              v101 = 1;
            }
            LOBYTE(v102) = 0;
            v107 = 0;
            if (v96)
            {
              v102 = v91;
              v103 = v92;
              v92 = 0;
              v91 = 0uLL;
              v104 = v93;
              v105 = v94;
              v106 = v95;
              v94 = 0uLL;
              v95 = 0;
              v107 = 1;
            }
            v108 = 1;
            if (v90 && SHIBYTE(v89) < 0)
              operator delete((void *)__p);
          }
          if ((v85[23] & 0x80000000) != 0)
            operator delete(*(void **)v85);
          *(_QWORD *)v85 = operator new(0x48uLL);
          *(_OWORD *)&v85[8] = xmmword_20B5EAC10;
          strcpy(*(char **)v85, "all entries of this data type will be ignored by the file importer");
          sub_20AFF4064((char *)&__dst, (void **)v85, (uint64_t)&v87);
          if (*(_BYTE *)(a1 + 128))
          {
            v38 = *(_QWORD *)(a1 + 120);
            if (!v38)
              sub_20AECABA4();
LABEL_67:
            (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v38 + 48))(v38, &v87);
          }
LABEL_68:
          if (!v97)
            goto LABEL_75;
          if (!v96)
            goto LABEL_72;
          if ((SHIBYTE(v95) & 0x80000000) == 0)
          {
            if ((SHIBYTE(v92) & 0x80000000) == 0)
              goto LABEL_72;
LABEL_86:
            operator delete((void *)v91);
            if (!v90)
              goto LABEL_75;
LABEL_73:
            if (SHIBYTE(v89) < 0)
              operator delete((void *)__p);
            goto LABEL_75;
          }
          operator delete((void *)v94);
          if (SHIBYTE(v92) < 0)
            goto LABEL_86;
LABEL_72:
          if (v90)
            goto LABEL_73;
LABEL_75:
          if ((v85[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)v85);
            if (!v108)
              goto LABEL_132;
          }
          else if (!v108)
          {
            goto LABEL_132;
          }
          if (v107)
          {
            if (SHIBYTE(v106) < 0)
            {
              operator delete((void *)v105);
              if ((SHIBYTE(v103) & 0x80000000) == 0)
                goto LABEL_82;
            }
            else if ((SHIBYTE(v103) & 0x80000000) == 0)
            {
              goto LABEL_82;
            }
            operator delete((void *)v102);
            if (!v101)
              goto LABEL_132;
          }
          else
          {
LABEL_82:
            if (!v101)
              goto LABEL_132;
          }
          if (SHIBYTE(v100) < 0)
            operator delete((void *)v99);
          goto LABEL_132;
        }
      }
      else
      {
        if (v45 >= v51)
          goto LABEL_112;
LABEL_98:
        v41 = *v40;
        v42 = v40;
        if (!*v40)
          goto LABEL_118;
      }
    }
  }
  if (*(_BYTE *)(a1 + 56))
  {
    v33 = *(_QWORD *)(a1 + 280);
    v34 = *(_QWORD *)(a1 + 288);
    v35 = v34 + 152 * v33;
    v36 = (void **)(v35 + 8);
    if (*(char *)(v35 + 31) < 0)
    {
      sub_20AEC60F4(&__dst, *v36, *(_QWORD *)(v35 + 16));
    }
    else
    {
      v37 = *(_OWORD *)v36;
      *(_QWORD *)&v99 = *(_QWORD *)(v35 + 24);
      __dst = v37;
    }
    DWORD2(v99) = *(_DWORD *)(v34 + 152 * v33 + 32);
    v58 = *(_QWORD *)(a1 + 32);
    v59 = *(_QWORD *)(a1 + 40);
    if (v58 != v59)
    {
      v60 = v34 + 152 * v33;
      v61 = (void **)(v60 + 40);
      v62 = (size_t *)(v60 + 48);
      while (1)
      {
        if (*(char *)(v35 + 63) < 0)
        {
          v64 = *v61;
          v63 = *v62;
        }
        else
        {
          v63 = *(unsigned __int8 *)(v35 + 63);
          v64 = v61;
        }
        if ((sub_20B20F270(v58, (uint64_t)&__dst, v64, v63) & 1) != 0)
          break;
        v58 += 768;
        if (v58 == v59)
        {
          v58 = v59;
          break;
        }
      }
    }
    if (SBYTE7(v99) < 0)
      operator delete((void *)__dst);
    if (v58 == v59)
      goto LABEL_132;
  }
}

void sub_20B1EBB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;

  operator delete(v31);
  _Unwind_Resume(a1);
}

void **sub_20B1EBBF4(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 152;
        sub_20B1F6594(v3);
      }
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20B1EBC54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v10;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 72);
    v4 = *(void **)(a1 + 64);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v4);
  }
  v8 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))off_24C4110C8[v8])(&v10, a1 + 40);
  *(_DWORD *)(a1 + 56) = -1;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20B1EBD4C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  std::__fs::filesystem::path *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD *v22;
  std::__fs::filesystem::path::__string_view v23;
  _BYTE *v24;
  std::basic_string_view<_CharT, _Traits>::size_type v25;
  std::basic_string_view<_CharT, _Traits>::size_type v26;
  int v27;
  std::__fs::filesystem::path::__string_view v28;
  _BYTE *v29;
  std::basic_string_view<_CharT, _Traits>::size_type v30;
  std::basic_string_view<_CharT, _Traits>::size_type v31;
  void *v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  _BOOL4 v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  size_t v43;
  _BYTE *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  uint64_t v50;
  __int128 v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  int v63;
  void **v64;
  char *v65;
  char *v66;
  unsigned int v67;
  uint64_t v68;
  char *v69;
  unsigned int v70;
  uint64_t v71;
  char *v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  unint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  unint64_t v81;
  int8x8_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  char *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  char *v90;
  unint64_t v91;
  unint64_t *p_shared_owners;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  _BYTE *v99;
  unint64_t *v100;
  unint64_t v101;
  std::string *v102;
  unint64_t size;
  void *v104;
  int v105;
  std::string *v106;
  unint64_t v107;
  void *v108;
  int v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count *v111;
  _BYTE *v112;
  int v113;
  _BYTE *v114;
  int v115;
  uint64_t v116;
  char *v117;
  char *v118;
  void *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void **v123;
  char *v124;
  char *v125;
  unsigned int v126;
  uint64_t v127;
  char *v128;
  double v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  void *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  void *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  void ***v151;
  void ***v152;
  unint64_t *v153;
  unint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  _BYTE *v159;
  int v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  __int128 v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  __int128 v169;
  int v170;
  uint64_t v171;
  void *v172;
  void *v173;
  void *v174;
  __int128 v175;
  uint64_t v176;
  _BYTE *v177;
  unint64_t v178;
  _BYTE *v179;
  _BYTE *v180;
  unint64_t v181;
  int8x8_t v182;
  __int128 v183;
  char *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  char *v187;
  unint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  _BYTE *v196;
  unint64_t v197;
  void **v198;
  void **v199;
  void *v200;
  unint64_t v201;
  void **v202;
  void **v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  void ***v212;
  void ***v213;
  unint64_t *v214;
  unint64_t v215;
  std::__fs::filesystem::path::__string_view v216;
  _BYTE *v217;
  _BYTE *v218;
  int v219;
  uint64_t v220;
  std::basic_string_view<_CharT, _Traits>::size_type v221;
  std::basic_string_view<_CharT, _Traits>::size_type v222;
  void *v223;
  unint64_t v224;
  uint64_t v225;
  char *v226;
  int v227;
  std::__fs::filesystem::path::__string_view v228;
  _BYTE *v229;
  std::basic_string_view<_CharT, _Traits>::size_type v230;
  std::basic_string_view<_CharT, _Traits>::size_type v231;
  unint64_t v232;
  int v233;
  unsigned __int8 v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  __int128 *v238;
  __int128 *p_s1;
  void *v240;
  _BYTE *v241;
  size_t v242;
  unsigned __int8 v243;
  unsigned __int8 v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  __int128 *v248;
  __int128 *v249;
  std::string *v250;
  unint64_t v251;
  void *v252;
  int v253;
  uint64_t v254;
  _BYTE *v255;
  size_t v256;
  uint64_t v257;
  __int128 *v258;
  _QWORD *v259;
  uint64_t v260;
  __int128 v261;
  _BYTE *v262;
  void *v263;
  unint64_t v264;
  int v265;
  _BYTE *v266;
  _BYTE *v267;
  _BYTE *v268;
  unint64_t v269;
  int8x8_t v270;
  __int128 v271;
  unint64_t *v272;
  unint64_t v273;
  char *v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  char *v277;
  unint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  _BYTE *v285;
  __int128 *v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  void *v292;
  _QWORD *v293;
  _QWORD *exception;
  _QWORD *v295;
  _QWORD *v296;
  __int128 *v297;
  uint64_t v298;
  void *v299;
  int v300;
  __int128 *v301;
  std::__fs::filesystem::path *__src;
  void *__srca;
  void *v304[2];
  uint64_t v305;
  char v306;
  void *v307[2];
  uint64_t v308;
  void *v309[2];
  uint64_t v310;
  char v311;
  void *v312;
  char v313;
  void *v314;
  char v315;
  char v316;
  char v317;
  uint64_t (**v318)();
  __int128 v319;
  void *v320[3];
  __int128 v321;
  _BYTE v322[7];
  char v323;
  char v324;
  void *v325;
  char v326;
  void *v327;
  char v328;
  char v329;
  char v330;
  __int128 v331;
  uint64_t v332;
  __int128 v333;
  uint64_t v334;
  char v335;
  char v336;
  char v337;
  char v338;
  __int128 v339;
  uint64_t v340;
  char v341;
  char v342;
  char v343;
  char v344;
  __int128 v345;
  uint64_t v346;
  char v347;
  char v348;
  char v349;
  char v350;
  __int128 v351;
  __int128 v352;
  uint64_t v353;
  unsigned __int8 v354;
  __int128 v355;
  void *v356;
  void *v357;
  __int128 v358;
  uint64_t v359;
  char v360;
  char v361;
  char v362;
  _DWORD v363[2];
  std::__fs::filesystem::path v364;
  uint64_t (**v365)();
  uint64_t v366;
  std::__shared_weak_count *v367;
  __int128 v368;
  uint64_t v369;
  char v370;
  __int128 v371;
  uint64_t v372;
  __int128 __s1;
  uint64_t v374;
  int v375;
  _BYTE v376[32];
  uint64_t v377;
  char v378;
  __int128 v379;
  void *v380;
  void *v381;
  __int128 v382;
  uint64_t v383;
  char v384;
  char v385;
  char v386;
  _QWORD v387[3];
  char v388;
  _BYTE *v389;
  uint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t v392;
  _QWORD v393[3];
  char v394;
  _BYTE v395[32];
  uint64_t v396;
  char v397;
  __int128 v398;
  void *v399;
  void *v400;
  __int128 v401;
  uint64_t v402;
  char v403;
  char v404;
  char v405;
  std::string pn;
  char v407;
  char v408;
  unsigned __int8 v409;
  __int128 v410;
  void *v411;
  void *v412;
  __int128 v413;
  uint64_t v414;
  char v415;
  char v416;
  uint64_t (**v417)();
  _BYTE *v418;
  unint64_t *v419;
  unint64_t v420[2];
  __int128 v421;
  __int128 v422;
  void *v423;
  _BYTE v424[56];
  uint64_t v425;
  char v426;
  uint64_t v427;
  char v428;
  _BYTE __dst[135];
  _BYTE v430[32];
  _BYTE v431[233];
  __int128 v432;
  _OWORD v433[12];
  _BYTE __p[40];
  _BYTE v435[24];
  void *v436;
  char *v437;
  __int128 v438;
  uint64_t v439;
  char v440;
  void *v441;
  char v442;
  char v443;
  char v444;
  char v445;
  void *v446;
  char v447;
  char v448;
  void *v449;
  void **v450;
  char v451;
  uint64_t v452;

  v452 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 280);
  v5 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 3);
  if (v4 >= v5 && !*(_QWORD *)(a1 + 256))
  {
    v22 = operator new(0x50uLL);
    v22[1] = 0;
    v22[2] = 0;
    *v22 = &off_24C3F3C88;
    *((_BYTE *)v22 + 72) = 0;
    v22[4] = 0;
    v22[5] = 0;
    *((_BYTE *)v22 + 48) = 0;
    v22[3] = 0;
    *(_QWORD *)a2 = v22 + 3;
    *(_QWORD *)(a2 + 8) = v22;
    *(_QWORD *)(a2 + 16) = &off_24C411E78;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a2 + 120) = 1;
    return;
  }
  *(_QWORD *)(a1 + 280) = v4 + 1;
  if (v4 + 1 >= v5)
    sub_20B1EA4B0((_QWORD *)a1);
  sub_20B1EB268(a1);
  v6 = *(_QWORD *)(a1 + 288);
  v7 = v6 + 152 * v4;
  __src = (std::__fs::filesystem::path *)v7;
  if (*(char *)(v7 + 31) < 0)
  {
    sub_20AEC60F4(&__s1, *(void **)(v7 + 8), *(_QWORD *)(v7 + 16));
  }
  else
  {
    v8 = *(_OWORD *)(v7 + 8);
    v374 = *(_QWORD *)(v7 + 24);
    __s1 = v8;
  }
  v9 = v6 + 152 * v4;
  v375 = *(_DWORD *)(v9 + 32);
  v301 = (__int128 *)(v9 + 40);
  if (*(char *)(v9 + 63) < 0)
  {
    v11 = *(void **)(v9 + 40);
    v10 = *(_QWORD *)(v9 + 48);
    if (!*(_BYTE *)(a1 + 56))
      goto LABEL_17;
  }
  else
  {
    v10 = *(unsigned __int8 *)(v9 + 63);
    v11 = (void *)(v9 + 40);
    if (!*(_BYTE *)(a1 + 56))
      goto LABEL_17;
  }
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  if (v12 != v13)
  {
    while ((sub_20B20F270(v12, (uint64_t)&__s1, v11, v10) & 1) == 0)
    {
      v12 += 768;
      if (v12 == v13)
        goto LABEL_29;
    }
  }
  if (v12 == v13)
  {
LABEL_29:
    v21 = operator new(0x50uLL);
    v21[1] = 0;
    v21[2] = 0;
    *v21 = &off_24C3F3C88;
    *((_BYTE *)v21 + 72) = 0;
    v21[4] = 0;
    v21[5] = 0;
    *((_BYTE *)v21 + 48) = 0;
    v21[3] = 0;
    *(_QWORD *)a2 = v21 + 3;
    *(_QWORD *)(a2 + 8) = v21;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = &off_24C411E78;
    *(_BYTE *)(a2 + 120) = 1;
    if (SHIBYTE(v374) < 0)
      goto LABEL_1147;
    return;
  }
LABEL_17:
  v14 = __src + 4;
  v297 = (__int128 *)(v9 + 64);
  if (*(_BYTE *)(a1 + 88))
  {
    v15 = *(_QWORD *)(a1 + 64);
    v16 = *(_QWORD *)(a1 + 72);
    if (v15 != v16)
    {
      while ((sub_20B20F270(v15, (uint64_t)&__s1, v11, v10) & 1) == 0)
      {
        v15 += 800;
        if (v15 == v16)
        {
          v15 = v16;
          break;
        }
      }
      if (v15 != *(_QWORD *)(a1 + 72))
      {
        v17 = *((char *)v301 + 23);
        if (v17 < 0)
        {
          v50 = *((_QWORD *)v301 + 1);
          v18 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)__dst = *(_QWORD *)v301;
          *(_QWORD *)&__dst[8] = v50;
          v19 = *(_QWORD *)(v15 + 792);
          if (v19)
            goto LABEL_25;
        }
        else
        {
          v18 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)__dst = v301;
          *(_QWORD *)&__dst[8] = v17;
          v19 = *(_QWORD *)(v15 + 792);
          if (v19)
          {
LABEL_25:
            (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, _BYTE *, __int128 *, __int128 *, std::__fs::filesystem::path *, uint64_t, uint64_t))(*(_QWORD *)v19 + 48))(__p, v19, a1, __dst, v297, &__s1, v14, a1 + 224, v18);
            if (*((char *)v301 + 23) < 0)
            {
              sub_20AEC60F4(&v371, *(void **)v301, *((_QWORD *)v301 + 1));
            }
            else
            {
              v20 = *v301;
              v372 = *((_QWORD *)v301 + 2);
              v371 = v20;
            }
            LOBYTE(v368) = 0;
            v370 = 0;
            if (*((_BYTE *)v297 + 24))
            {
              if (*((char *)v297 + 23) < 0)
              {
                sub_20AEC60F4(&v368, *(void **)v297, *((_QWORD *)v297 + 1));
              }
              else
              {
                v51 = *v297;
                v369 = *((_QWORD *)v297 + 2);
                v368 = v51;
              }
              v370 = 1;
              *(_OWORD *)__dst = v371;
              v76 = v372;
              v371 = 0uLL;
              v372 = 0;
              *(_OWORD *)&__dst[24] = v368;
              *(_QWORD *)&__dst[16] = v76;
              *(_QWORD *)&__dst[40] = v369;
              v368 = 0uLL;
              v369 = 0;
              __dst[48] = 1;
            }
            else
            {
              *(_OWORD *)__dst = v371;
              *(_QWORD *)&__dst[16] = v372;
              v372 = 0;
              v371 = 0uLL;
              __dst[24] = 0;
              __dst[48] = 0;
            }
            v77 = __dst;
            if (__dst[23] >= 0)
            {
              v78 = __dst[23];
            }
            else
            {
              v77 = *(_BYTE **)__dst;
              v78 = *(_QWORD *)&__dst[8];
            }
            if (!v78)
              goto LABEL_182;
            v79 = v77;
            if (v78 < 8)
              goto LABEL_214;
            v79 = &v77[v78 & 0xFFFFFFFFFFFFFFF8];
            v80 = v77 + 3;
            v81 = v78 & 0xFFFFFFFFFFFFFFF8;
            while (1)
            {
              v82 = vceq_s8(*(int8x8_t *)(v80 - 3), (int8x8_t)0x3A3A3A3A3A3A3A3ALL);
              if ((v82.i8[0] & 1) != 0)
              {
                *(v80 - 3) = 95;
                if ((v82.i8[1] & 1) == 0)
                  goto LABEL_166;
              }
              else if ((v82.i8[1] & 1) == 0)
              {
LABEL_166:
                if ((v82.i8[2] & 1) != 0)
                  goto LABEL_167;
                goto LABEL_175;
              }
              *(v80 - 2) = 95;
              if ((v82.i8[2] & 1) != 0)
              {
LABEL_167:
                *(v80 - 1) = 95;
                if ((v82.i8[3] & 1) == 0)
                  goto LABEL_168;
                goto LABEL_176;
              }
LABEL_175:
              if ((v82.i8[3] & 1) == 0)
              {
LABEL_168:
                if ((v82.i8[4] & 1) != 0)
                  goto LABEL_169;
                goto LABEL_177;
              }
LABEL_176:
              *v80 = 95;
              if ((v82.i8[4] & 1) != 0)
              {
LABEL_169:
                v80[1] = 95;
                if ((v82.i8[5] & 1) == 0)
                  goto LABEL_170;
                goto LABEL_178;
              }
LABEL_177:
              if ((v82.i8[5] & 1) == 0)
              {
LABEL_170:
                if ((v82.i8[6] & 1) != 0)
                  goto LABEL_171;
                goto LABEL_179;
              }
LABEL_178:
              v80[2] = 95;
              if ((v82.i8[6] & 1) != 0)
              {
LABEL_171:
                v80[3] = 95;
                if ((v82.i8[7] & 1) != 0)
                  goto LABEL_180;
                goto LABEL_163;
              }
LABEL_179:
              if ((v82.i8[7] & 1) != 0)
LABEL_180:
                v80[4] = 95;
LABEL_163:
              v80 += 8;
              v81 -= 8;
              if (!v81)
              {
                if (v78 == (v78 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_182;
LABEL_214:
                v99 = &v77[v78];
                do
                {
                  if (*v79 == 58)
                    *v79 = 95;
                  ++v79;
                }
                while (v79 != v99);
LABEL_182:
                v83 = *(_QWORD *)&__p[8];
                v84 = *(std::__shared_weak_count **)&__p[16];
                v365 = &off_24C411E78;
                v366 = *(_QWORD *)&__p[8];
                v367 = *(std::__shared_weak_count **)&__p[16];
                if (*(_QWORD *)&__p[16])
                {
                  v85 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
                  do
                    v86 = __ldxr(v85);
                  while (__stxr(v86 + 1, v85));
                }
                v87 = (char *)operator new(0x50uLL);
                v88 = (std::__shared_weak_count *)v87;
                *((_QWORD *)v87 + 1) = 0;
                v89 = (unint64_t *)(v87 + 8);
                *((_QWORD *)v87 + 2) = 0;
                *(_QWORD *)v87 = &off_24C3F3C88;
                v90 = v87 + 24;
                *(_OWORD *)(v87 + 24) = *(_OWORD *)__dst;
                *((_QWORD *)v87 + 5) = *(_QWORD *)&__dst[16];
                memset(__dst, 0, 24);
                v87[48] = 0;
                v87[72] = 0;
                if (__dst[48])
                {
                  *((_OWORD *)v87 + 3) = *(_OWORD *)&__dst[24];
                  *((_QWORD *)v87 + 8) = *(_QWORD *)&__dst[40];
                  memset(&__dst[24], 0, 24);
                  v87[72] = 1;
                }
                v366 = 0;
                v367 = 0;
                do
                  v91 = __ldxr(v89);
                while (__stxr(v91 + 1, v89));
                if (v84)
                {
                  p_shared_owners = (unint64_t *)&v84->__shared_owners_;
                  do
                    v93 = __ldxr(p_shared_owners);
                  while (__stxr(v93 + 1, p_shared_owners));
                  do
                    v94 = __ldaxr(p_shared_owners);
                  while (__stlxr(v94 - 1, p_shared_owners));
                  if (!v94)
                  {
                    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                    std::__shared_weak_count::__release_weak(v84);
                  }
                }
                do
                  v95 = __ldaxr(v89);
                while (__stlxr(v95 - 1, v89));
                if (!v95)
                {
                  ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                  std::__shared_weak_count::__release_weak(v88);
                }
                *(_QWORD *)a2 = v90;
                *(_QWORD *)(a2 + 8) = v88;
                *(_QWORD *)(a2 + 16) = &off_24C411E78;
                *(_QWORD *)(a2 + 24) = v83;
                *(_QWORD *)(a2 + 32) = v84;
                *(_BYTE *)(a2 + 120) = 1;
                if (v367)
                {
                  v96 = &v367->__shared_owners_;
                  do
                    v97 = __ldaxr((unint64_t *)v96);
                  while (__stlxr(v97 - 1, (unint64_t *)v96));
                  if (!v97)
                  {
                    ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                    std::__shared_weak_count::__release_weak(v367);
                  }
                }
                if (__dst[48] && (__dst[47] & 0x80000000) != 0)
                  operator delete(*(void **)&__dst[24]);
                if ((__dst[23] & 0x80000000) != 0)
                  operator delete(*(void **)__dst);
                if (v370 && SHIBYTE(v369) < 0)
                  operator delete((void *)v368);
                if (SHIBYTE(v372) < 0)
                {
                  operator delete((void *)v371);
                  v98 = *(std::__shared_weak_count **)&__p[16];
                  if (!*(_QWORD *)&__p[16])
                    goto LABEL_1146;
                }
                else
                {
                  v98 = *(std::__shared_weak_count **)&__p[16];
                  if (!*(_QWORD *)&__p[16])
                    goto LABEL_1146;
                }
                v100 = (unint64_t *)&v98->__shared_owners_;
                do
                  v101 = __ldaxr(v100);
                while (__stlxr(v101 - 1, v100));
                if (v101)
                {
LABEL_1146:
                  if (SHIBYTE(v374) < 0)
                    goto LABEL_1147;
                }
                else
                {
                  ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                  std::__shared_weak_count::__release_weak(v98);
                  if (SHIBYTE(v374) < 0)
                    goto LABEL_1147;
                }
                return;
              }
            }
          }
        }
        sub_20AECABA4();
      }
    }
  }
  if (*(char *)(a1 + 23) < 0)
    sub_20AEC60F4(&v364, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    v364 = *(std::__fs::filesystem::path *)a1;
  sub_20B1F6634((uint64_t)&v364, v14);
  v23 = std::__fs::filesystem::path::__extension(v14);
  if (v23.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v23.__size_ >= 0x17)
  {
    v25 = (v23.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23.__size_ | 7) != 0x17)
      v25 = v23.__size_ | 7;
    v26 = v25 + 1;
    v24 = operator new(v25 + 1);
    *(_QWORD *)&__dst[16] = v26 | 0x8000000000000000;
    *(_QWORD *)__dst = v24;
    *(_QWORD *)&__dst[8] = v23.__size_;
    goto LABEL_40;
  }
  __dst[23] = v23.__size_;
  v24 = __dst;
  if (v23.__size_)
LABEL_40:
    memmove(v24, v23.__data_, v23.__size_);
  v24[v23.__size_] = 0;
  v363[0] = *(_DWORD *)&__dst[16];
  *(_DWORD *)((char *)v363 + 3) = *(_DWORD *)&__dst[19];
  v299 = *(void **)__dst;
  v300 = __dst[23];
  if ((__dst[23] & 0x80000000) != 0)
  {
    sub_20AEC60F4(__dst, *(void **)__dst, *(unint64_t *)&__dst[8]);
  }
  else
  {
    *(_DWORD *)&__dst[16] = v363[0];
    *(_DWORD *)&__dst[19] = *(_DWORD *)((char *)v363 + 3);
  }
  v27 = sub_20B1FC884(__dst);
  v298 = a2;
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v28 = std::__fs::filesystem::path::__stem(&v364);
  if (v28.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v28.__size_ >= 0x17)
  {
    v30 = (v28.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28.__size_ | 7) != 0x17)
      v30 = v28.__size_ | 7;
    v31 = v30 + 1;
    v29 = operator new(v30 + 1);
    *(_QWORD *)&__dst[16] = v31 | 0x8000000000000000;
    *(_QWORD *)__dst = v29;
    *(_QWORD *)&__dst[8] = v28.__size_;
    goto LABEL_53;
  }
  __dst[23] = v28.__size_;
  v29 = __dst;
  if (v28.__size_)
LABEL_53:
    memmove(v29, v28.__data_, v28.__size_);
  v29[v28.__size_] = 0;
  v32 = *(void **)__dst;
  v33 = *(_QWORD *)&__dst[8];
  LODWORD(v432) = *(_DWORD *)&__dst[16];
  *(_DWORD *)((char *)&v432 + 3) = *(_DWORD *)&__dst[19];
  v34 = __dst[23];
  if ((__dst[23] & 0x80000000) != 0)
  {
    sub_20AEC60F4(__p, *(void **)__dst, *(unint64_t *)&__dst[8]);
    LOBYTE(v35) = __p[23];
    v33 = *(_QWORD *)&__p[8];
  }
  else
  {
    *(_QWORD *)__p = *(_QWORD *)__dst;
    *(_QWORD *)&__p[8] = *(_QWORD *)&__dst[8];
    *(_DWORD *)&__p[16] = v432;
    *(_DWORD *)&__p[19] = *(_DWORD *)((char *)&v432 + 3);
    __p[23] = __dst[23];
    LOBYTE(v35) = __dst[23];
  }
  __dst[23] = 5;
  strcpy(__dst, "_info");
  v36 = v35;
  if ((v35 & 0x80u) == 0)
    v35 = v35;
  else
    v35 = v33;
  v37 = v35 >= 5;
  v38 = v35 - 5;
  if (!v37)
  {
    v39 = 0;
    if ((v36 & 0x80) == 0)
      goto LABEL_63;
    goto LABEL_62;
  }
  if ((v36 & 0x80) == 0)
  {
    if (v36 >= v38)
    {
      if (v36 - v38 >= 5)
        v43 = 5;
      else
        v43 = v36 - v38;
      v44 = __p;
      goto LABEL_91;
    }
LABEL_1156:
    sub_20AEC73F8();
  }
  if (v33 < v38)
    goto LABEL_1156;
  if (v33 - v38 >= 5)
    v43 = 5;
  else
    v43 = v33 - v38;
  v44 = *(_BYTE **)__p;
LABEL_91:
  v48 = memcmp(&v44[v38], __dst, v43);
  v39 = v43 == 5 && v48 == 0;
  if ((v36 & 0x80) != 0)
LABEL_62:
    operator delete(*(void **)__p);
LABEL_63:
  if (v34 < 0)
  {
    operator delete(v32);
    if (v39)
    {
LABEL_65:
      LOBYTE(v432) = 0;
      memset((char *)v433 + 7, 0, 144);
      memset((char *)&v433[9] + 7, 0, 41);
      v40 = *(_QWORD *)(v6 + 152 * v4 + 120);
      v41 = *(_QWORD *)(a1 + 24);
      v392 = v40;
      (*(void (**)(_BYTE **__return_ptr, uint64_t, std::__fs::filesystem::path *, uint64_t))(*(_QWORD *)v41 + 368))(&v389, v41, &v364, 8);
      if (v390)
      {
        v42 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v390 + 16))(v390);
        if (v40)
          std::istream::seekg();
        switch(v27)
        {
          case 1:
            *(_QWORD *)__dst = 1;
            sub_20B5198FC(&v421, (uint64_t *)__dst, (uint64_t)v42, 0x2800uLL);
            *(_QWORD *)&v421 = &off_24C4111F8;
            *(_QWORD *)&v422 = &unk_24C411340;
            *(_DWORD *)__dst = 3;
            sub_20B518854(*(uint64_t *)&v424[8], __dst);
            v52 = *(_DWORD *)__dst;
            if (*(_DWORD *)__dst < 3u)
            {
              __dst[0] = 0;
              memset(&__dst[23], 0, 112);
              memset(v430, 0, sizeof(v430));
              memset(v431, 0, 41);
              sub_20B518FF8(*(uint64_t *)&v424[8], (void **)__dst);
              sub_20B518BE4(*(uint64_t *)&v424[8], &__dst[24]);
              if (v52 == 1)
                sub_20B0DD914((uint64_t)__p, &v421, (uint64_t)&__dst[40]);
              else
                sub_20B0DD1A0((uint64_t)__p, &v421, (uint64_t)&__dst[32]);
              if ((__dst[23] & 0x80000000) != 0)
              {
                sub_20AEC60F4(__p, *(void **)__dst, *(unint64_t *)&__dst[8]);
              }
              else
              {
                *(_OWORD *)__p = *(_OWORD *)__dst;
                *(_QWORD *)&__p[16] = *(_QWORD *)&__dst[16];
              }
              *(_QWORD *)&__p[24] = *(_QWORD *)&__dst[24];
              sub_20B0D1898((uint64_t)&__p[32], (uint64_t)&__dst[32]);
              if (SBYTE7(v433[0]) < 0)
                operator delete((void *)v432);
              v432 = *(_OWORD *)__p;
              v197 = *(_QWORD *)&__p[16];
              __p[23] = 0;
              __p[0] = 0;
              v433[0] = __PAIR128__(*(unint64_t *)&__p[24], v197);
              sub_20B0DAD74((uint64_t)&v433[1], (uint64_t)&__p[32]);
              if (v451)
              {
                v198 = (void **)v449;
                if (v449)
                {
                  v199 = v450;
                  v200 = v449;
                  if (v450 != v449)
                  {
                    do
                    {
                      if (*((char *)v199 - 1) < 0)
                        operator delete(*(v199 - 3));
                      v199 -= 3;
                    }
                    while (v199 != v198);
                    v200 = v449;
                  }
                  v450 = v198;
                  operator delete(v200);
                }
              }
              if (v448 && v447 < 0)
                operator delete(v446);
              if (v445 && v444 < 0)
                operator delete(v441);
              if ((_BYTE)v438 && SHIBYTE(v437) < 0)
                operator delete(*(void **)&v435[16]);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              if (v431[33])
              {
                v205 = *(_QWORD *)&v431[9];
                if (*(_QWORD *)&v431[9])
                {
                  v206 = *(_QWORD *)&v431[17];
                  v207 = *(void **)&v431[9];
                  if (*(_QWORD *)&v431[17] != *(_QWORD *)&v431[9])
                  {
                    do
                    {
                      if (*(char *)(v206 - 1) < 0)
                        operator delete(*(void **)(v206 - 24));
                      v206 -= 24;
                    }
                    while (v206 != v205);
                    v207 = *(void **)&v431[9];
                  }
                  *(_QWORD *)&v431[17] = v205;
                  operator delete(v207);
                }
              }
              if (v431[1] && (v431[0] & 0x80000000) != 0)
                operator delete(*(void **)&v430[9]);
              if (v430[1] && (v430[0] & 0x80000000) != 0)
                operator delete(*(void **)&__dst[112]);
              if (__dst[80] && (__dst[79] & 0x80000000) != 0)
                operator delete(*(void **)&__dst[56]);
              if ((__dst[23] & 0x80000000) != 0)
                operator delete(*(void **)__dst);
            }
            else
            {
              sub_20B0DD290(&v422);
              sub_20B518FF8(*(uint64_t *)&v424[8], (void **)&v432);
              sub_20B518BE4(*(uint64_t *)&v424[8], (_QWORD *)v433 + 1);
              sub_20B0DD1A0((uint64_t)__dst, &v421, (uint64_t)&v433[1]);
              v53 = v423;
              v54 = *(v53 - 2) - (*(uint64_t (**)(uint64_t))(v422 + 32))((uint64_t)&v422) + *(v53 - 1);
              if (v54)
                (*(void (**)(uint64_t, unint64_t))(v422 + 40))((uint64_t)&v422, v54);
              v423 = (char *)v423 - 16;
            }
            *(_QWORD *)&v421 = &off_24C41F3B0;
            *(_QWORD *)&v422 = &unk_24C41F4F8;
            v208 = *(_QWORD *)&v424[8];
            *(_QWORD *)&v424[8] = 0;
            if (v208)
            {
              sub_20B51A350((_QWORD *)(v208 + 8));
              MEMORY[0x20BD3583C](v208, 0x10F2C40853B94B7);
            }
            *(_QWORD *)&v422 = off_24C41F618;
            v136 = (void *)*((_QWORD *)&v422 + 1);
            if (!*((_QWORD *)&v422 + 1))
              goto LABEL_857;
            v423 = (void *)*((_QWORD *)&v422 + 1);
            goto LABEL_856;
          case 2:
          case 4:
            LOBYTE(v393[0]) = 0;
            v394 = 0;
            LOBYTE(v387[0]) = 0;
            v388 = 0;
            sub_20B1F5BC8(__dst, (uint64_t)v42, (uint64_t)v393, (uint64_t)v387);
            v420[0] = (unint64_t)__dst;
            v420[1] = (unint64_t)&v432;
            __p[0] = 0;
            v443 = 0;
            v417 = &off_24C411380;
            v418 = __p;
            v419 = v420;
            sub_20B52A3E8((uint64_t)&v417, (uint64_t)&v421);
            if (v428)
            {
              v405 = v442;
              if (v442)
              {
                v395[0] = __p[0];
              }
              else
              {
                *(_OWORD *)v395 = *(_OWORD *)__p;
                v395[16] = 0;
                v404 = 0;
                if ((_BYTE)v441)
                {
                  v397 = 0;
                  if (v435[0])
                  {
                    *(_OWORD *)&v395[16] = *(_OWORD *)&__p[16];
                    v396 = *(_QWORD *)&__p[32];
                    memset(&__p[16], 0, 24);
                    v397 = 1;
                  }
                  LOBYTE(v398) = 0;
                  v403 = 0;
                  if (v440)
                  {
                    v399 = v436;
                    v398 = *(_OWORD *)&v435[8];
                    *(_QWORD *)&v435[8] = 0;
                    *(_QWORD *)&v435[16] = 0;
                    v401 = v438;
                    v400 = v437;
                    v402 = v439;
                    v436 = 0;
                    v438 = 0uLL;
                    v439 = 0;
                    v403 = 1;
                  }
                  v404 = 1;
                }
              }
            }
            else
            {
              *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v421;
              v112 = sub_20AECEBD0(&pn.__r_.__value_.__s.__data_[16], &v422);
              *(_OWORD *)v395 = *(_OWORD *)&pn.__r_.__value_.__l.__data_;
              v395[16] = 0;
              v404 = 0;
              if (v416)
              {
                v397 = 0;
                v113 = v409;
                if (v409)
                {
                  *(_OWORD *)&v395[16] = *(_OWORD *)v112;
                  v396 = *((_QWORD *)v112 + 2);
                  *((_QWORD *)v112 + 1) = 0;
                  *((_QWORD *)v112 + 2) = 0;
                  *(_QWORD *)v112 = 0;
                  v397 = 1;
                }
                LOBYTE(v398) = 0;
                v403 = 0;
                if (v415)
                {
                  v399 = v411;
                  v398 = v410;
                  v410 = 0uLL;
                  v401 = v413;
                  v400 = v412;
                  v402 = v414;
                  v411 = 0;
                  v413 = 0uLL;
                  v414 = 0;
                  v403 = 1;
                }
                v404 = 1;
                v405 = 0;
                if (v113 && v408 < 0)
                  operator delete((void *)pn.__r_.__value_.__r.__words[2]);
              }
              else
              {
                v405 = 0;
              }
              if (!v428 && (_BYTE)v427)
              {
                if (v426)
                {
                  if (SHIBYTE(v425) < 0)
                    operator delete(*(void **)&v424[40]);
                  if ((v424[31] & 0x80000000) != 0)
                    operator delete(*(void **)&v424[8]);
                }
                if (v424[0] && SHIBYTE(v423) < 0)
                  operator delete((void *)v422);
              }
            }
            if (v443 && !v442 && (_BYTE)v441)
            {
              if (v440)
              {
                if (SHIBYTE(v439) < 0)
                  operator delete((void *)v438);
                if (SHIBYTE(v436) < 0)
                  operator delete(*(void **)&v435[8]);
              }
              if (v435[0] && (__p[39] & 0x80000000) != 0)
                operator delete(*(void **)&__p[16]);
            }
            if (v405)
            {
              if (v395[0])
              {
                v386 = 1;
                goto LABEL_385;
              }
              sub_20B516F9C(__dst, (uint64_t)__p);
            }
            else
            {
              sub_20B516DBC((uint64_t)v395, (uint64_t)__p);
            }
            *(_OWORD *)v376 = *(_OWORD *)__p;
            v376[16] = 0;
            v385 = 0;
            if ((_BYTE)v441)
            {
              v378 = 0;
              if (v435[0])
              {
                *(_OWORD *)&v376[16] = *(_OWORD *)&__p[16];
                v377 = *(_QWORD *)&__p[32];
                memset(&__p[16], 0, 24);
                v378 = 1;
              }
              LOBYTE(v379) = 0;
              v384 = 0;
              if (v440)
              {
                v380 = v436;
                v379 = *(_OWORD *)&v435[8];
                *(_QWORD *)&v435[8] = 0;
                *(_QWORD *)&v435[16] = 0;
                v382 = v438;
                v381 = v437;
                v383 = v439;
                v436 = 0;
                v438 = 0uLL;
                v439 = 0;
                v384 = 1;
              }
              v385 = 1;
              v386 = 0;
              if (v435[0] && (__p[39] & 0x80000000) != 0)
                operator delete(*(void **)&__p[16]);
            }
            else
            {
              v386 = 0;
            }
LABEL_385:
            if (!v405 && v404)
            {
              if (v403)
              {
                if (SHIBYTE(v402) < 0)
                  operator delete((void *)v401);
                if (SHIBYTE(v399) < 0)
                  operator delete((void *)v398);
              }
              if (v397 && SHIBYTE(v396) < 0)
                operator delete(*(void **)&v395[16]);
            }
            if (v386)
            {
              *(_QWORD *)__dst = off_24C41EF88;
              if ((v430[24] & 0x80000000) != 0)
              {
                operator delete(*(void **)&v430[1]);
                if ((__dst[71] & 0x80000000) == 0)
                {
LABEL_389:
                  if ((__dst[47] & 0x80000000) == 0)
                    goto LABEL_857;
LABEL_404:
                  v136 = *(void **)&__dst[24];
LABEL_856:
                  operator delete(v136);
LABEL_857:
                  v362 = 1;
                  v110 = v391;
                  if (!v391)
                    goto LABEL_862;
                  goto LABEL_858;
                }
              }
              else if ((__dst[71] & 0x80000000) == 0)
              {
                goto LABEL_389;
              }
              operator delete(*(void **)&__dst[48]);
              if ((__dst[47] & 0x80000000) == 0)
                goto LABEL_857;
              goto LABEL_404;
            }
            sub_20B5287D4((uint64_t)v376, &pn);
            sub_20B1F7E44((uint64_t)v395, (uint64_t)&v364, &v392, &pn);
            if ((v395[23] & 0x80000000) != 0)
            {
              sub_20AEC60F4(&v421, *(void **)v395, *(unint64_t *)&v395[8]);
            }
            else
            {
              v421 = *(_OWORD *)v395;
              *(_QWORD *)&v422 = *(_QWORD *)&v395[16];
            }
            BYTE8(v422) = 1;
            LOBYTE(v423) = 0;
            v424[48] = 0;
            LOBYTE(v425) = 1;
            sub_20B0C5BC0(4u, &v421, (uint64_t)__p);
            v351 = *(_OWORD *)__p;
            LOBYTE(v352) = 0;
            v361 = 0;
            if ((_BYTE)v441)
            {
              v354 = 0;
              if (v435[0])
              {
                v352 = *(_OWORD *)&__p[16];
                v353 = *(_QWORD *)&__p[32];
                memset(&__p[16], 0, 24);
                v354 = 1;
              }
              LOBYTE(v355) = 0;
              v360 = 0;
              if (v440)
              {
                v356 = v436;
                v355 = *(_OWORD *)&v435[8];
                *(_QWORD *)&v435[8] = 0;
                *(_QWORD *)&v435[16] = 0;
                v358 = v438;
                v357 = v437;
                v359 = v439;
                v436 = 0;
                v438 = 0uLL;
                v439 = 0;
                v360 = 1;
              }
              v361 = 1;
              v362 = 0;
              if (v435[0] && (__p[39] & 0x80000000) != 0)
                operator delete(*(void **)&__p[16]);
            }
            else
            {
              v362 = 0;
            }
            if ((_BYTE)v425)
            {
              if (v424[48])
              {
                if ((v424[47] & 0x80000000) != 0)
                  operator delete(*(void **)&v424[24]);
                if ((v424[15] & 0x80000000) != 0)
                  operator delete(v423);
              }
              if (BYTE8(v422) && SBYTE7(v422) < 0)
                operator delete((void *)v421);
            }
            if ((v395[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)v395);
              if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_490:
                if (v386)
                  goto LABEL_517;
LABEL_508:
                if (v385)
                {
                  if (v384)
                  {
                    if (SHIBYTE(v383) < 0)
                      operator delete((void *)v382);
                    if (SHIBYTE(v380) < 0)
                      operator delete((void *)v379);
                  }
                  if (v378 && SHIBYTE(v377) < 0)
                    operator delete(*(void **)&v376[16]);
                }
LABEL_517:
                sub_20B516570((uint64_t)__dst);
                v110 = v391;
                if (v391)
                  goto LABEL_858;
                goto LABEL_862;
              }
            }
            else if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_490;
            }
            operator delete(pn.__r_.__value_.__l.__data_);
            if (v386)
              goto LABEL_517;
            goto LABEL_508;
          case 3:
            sub_20B1F91AC((std::string *)v395, *(_QWORD **)((char *)v42 + *(_QWORD *)(*v42 - 24) + 40), 0);
            sub_20B4F8A14((uint64_t *)v395, (uint64_t *)v376);
            sub_20B4541AC((uint64_t)__dst, *(unsigned __int8 **)v376);
            *((_QWORD *)&v421 + 1) = 0x300000001;
            *(_QWORD *)&v421 = &unk_24C41E890;
            v61 = (_QWORD *)operator new();
            *(_BYTE *)v61 = __dst[0];
            v61[1] = *(_QWORD *)&__dst[8];
            __dst[0] = 0;
            *(_QWORD *)&__dst[8] = 0;
            *(_QWORD *)&v422 = v61;
            *((_QWORD *)&v422 + 1) = sub_20B50F13C;
            v423 = v61;
            v426 = 0;
            v427 = 0;
            memset(v424, 0, 49);
            sub_20B4181DC((void ***)&__dst[8], 0);
            *(_QWORD *)&v421 = &off_24C411450;
            sub_20B50AC94((uint64_t)&v421);
            *(_QWORD *)&v424[48] = "version";
            v425 = 7;
            if (!v426)
              v426 = 1;
            v62 = (char *)sub_20B50AF4C((uint64_t *)&v421);
            ++v427;
            *(_QWORD *)__dst = 0;
            sub_20B4552C4(v62, __dst);
            if (HIDWORD(*(_QWORD *)__dst))
              goto LABEL_1171;
            if (*(_DWORD *)__dst >= 3u)
              v63 = 3;
            else
              v63 = *(_DWORD *)__dst;
            if (*(_DWORD *)__dst >= 3u)
            {
              v64 = (void **)sub_20B50AF4C((uint64_t *)&v421);
              ++v427;
              memset(__dst, 0, 24);
              sub_20B4557C4(v64, (uint64_t)__dst);
              if (SBYTE7(v433[0]) < 0)
                operator delete((void *)v432);
              v432 = *(_OWORD *)__dst;
              *(_QWORD *)&v433[0] = *(_QWORD *)&__dst[16];
              v65 = (char *)sub_20B50AF4C((uint64_t *)&v421);
              ++v427;
              *(_QWORD *)__dst = 0;
              sub_20B4552C4(v65, __dst);
              *((_QWORD *)&v433[0] + 1) = *(_QWORD *)__dst;
              if (v63 == 1)
              {
                sub_20B50AC94((uint64_t)&v421);
                *(_QWORD *)&v424[48] = "version";
                v425 = 7;
                if (!v426)
                  v426 = 1;
                v66 = (char *)sub_20B50AF4C((uint64_t *)&v421);
                ++v427;
                *(_QWORD *)__dst = 0;
                sub_20B4552C4(v66, __dst);
                if (HIDWORD(*(_QWORD *)__dst))
                {
LABEL_1171:
                  exception = __cxa_allocate_exception(8uLL);
                  *exception = &off_24C41FEF0;
                  __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
                }
                if (*(_DWORD *)__dst >= 2u)
                  v67 = 2;
                else
                  v67 = *(_DWORD *)__dst;
                sub_20B0D9F58((uint64_t)&v421, (uint64_t)&v433[1] + 8, v67);
                v423 = *(void **)(*(_QWORD *)&v424[8] - 8);
                v427 = *(_QWORD *)(*(_QWORD *)&v424[32] - 8);
                *(_QWORD *)&v424[8] -= 8;
                *(_QWORD *)&v424[32] -= 8;
              }
              else
              {
                sub_20B0D978C((uint64_t)&v421, (uint64_t)&v433[1]);
              }
            }
            else
            {
              __dst[0] = 0;
              memset(&__dst[23], 0, 112);
              memset(v430, 0, sizeof(v430));
              memset(v431, 0, 41);
              v123 = (void **)sub_20B50AF4C((uint64_t *)&v421);
              ++v427;
              memset(__p, 0, 24);
              sub_20B4557C4(v123, (uint64_t)__p);
              if ((__dst[23] & 0x80000000) != 0)
                operator delete(*(void **)__dst);
              *(_OWORD *)__dst = *(_OWORD *)__p;
              *(_QWORD *)&__dst[16] = *(_QWORD *)&__p[16];
              v124 = (char *)sub_20B50AF4C((uint64_t *)&v421);
              ++v427;
              *(_QWORD *)__p = 0;
              sub_20B4552C4(v124, __p);
              *(_QWORD *)&__dst[24] = *(_QWORD *)__p;
              if (v63 == 1)
              {
                sub_20B50AC94((uint64_t)&v421);
                *(_QWORD *)&v424[48] = "version";
                v425 = 7;
                if (!v426)
                  v426 = 1;
                v125 = (char *)sub_20B50AF4C((uint64_t *)&v421);
                ++v427;
                *(_QWORD *)__p = 0;
                sub_20B4552C4(v125, __p);
                if (HIDWORD(*(_QWORD *)__p))
                {
                  v296 = __cxa_allocate_exception(8uLL);
                  *v296 = &off_24C41FEF0;
                  __cxa_throw(v296, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
                }
                if (*(_DWORD *)__p >= 2u)
                  v126 = 2;
                else
                  v126 = *(_DWORD *)__p;
                sub_20B0D9F58((uint64_t)&v421, (uint64_t)&__dst[40], v126);
                v423 = *(void **)(*(_QWORD *)&v424[8] - 8);
                v427 = *(_QWORD *)(*(_QWORD *)&v424[32] - 8);
                *(_QWORD *)&v424[8] -= 8;
                *(_QWORD *)&v424[32] -= 8;
              }
              else
              {
                sub_20B0D978C((uint64_t)&v421, (uint64_t)&__dst[32]);
              }
              if ((__dst[23] & 0x80000000) != 0)
              {
                sub_20AEC60F4(__p, *(void **)__dst, *(unint64_t *)&__dst[8]);
              }
              else
              {
                *(_OWORD *)__p = *(_OWORD *)__dst;
                *(_QWORD *)&__p[16] = *(_QWORD *)&__dst[16];
              }
              *(_QWORD *)&__p[24] = *(_QWORD *)&__dst[24];
              sub_20B0D1898((uint64_t)&__p[32], (uint64_t)&__dst[32]);
              if (SBYTE7(v433[0]) < 0)
                operator delete((void *)v432);
              v432 = *(_OWORD *)__p;
              v201 = *(_QWORD *)&__p[16];
              __p[23] = 0;
              __p[0] = 0;
              v433[0] = __PAIR128__(*(unint64_t *)&__p[24], v201);
              sub_20B0DAD74((uint64_t)&v433[1], (uint64_t)&__p[32]);
              if (v451)
              {
                v202 = (void **)v449;
                if (v449)
                {
                  v203 = v450;
                  v204 = v449;
                  if (v450 != v449)
                  {
                    do
                    {
                      if (*((char *)v203 - 1) < 0)
                        operator delete(*(v203 - 3));
                      v203 -= 3;
                    }
                    while (v203 != v202);
                    v204 = v449;
                  }
                  v450 = v202;
                  operator delete(v204);
                }
              }
              if (v448 && v447 < 0)
                operator delete(v446);
              if (v445 && v444 < 0)
                operator delete(v441);
              if ((_BYTE)v438 && SHIBYTE(v437) < 0)
                operator delete(*(void **)&v435[16]);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              if (v431[33])
              {
                v209 = *(_QWORD *)&v431[9];
                if (*(_QWORD *)&v431[9])
                {
                  v210 = *(_QWORD *)&v431[17];
                  v211 = *(void **)&v431[9];
                  if (*(_QWORD *)&v431[17] != *(_QWORD *)&v431[9])
                  {
                    do
                    {
                      if (*(char *)(v210 - 1) < 0)
                        operator delete(*(void **)(v210 - 24));
                      v210 -= 24;
                    }
                    while (v210 != v209);
                    v211 = *(void **)&v431[9];
                  }
                  *(_QWORD *)&v431[17] = v209;
                  operator delete(v211);
                }
              }
              if (v431[1] && (v431[0] & 0x80000000) != 0)
                operator delete(*(void **)&v430[9]);
              if (v430[1] && (v430[0] & 0x80000000) != 0)
                operator delete(*(void **)&__dst[112]);
              if (__dst[80] && (__dst[79] & 0x80000000) != 0)
                operator delete(*(void **)&__dst[56]);
              if ((__dst[23] & 0x80000000) != 0)
                operator delete(*(void **)__dst);
            }
            v423 = *(void **)(*(_QWORD *)&v424[8] - 8);
            v427 = *(_QWORD *)(*(_QWORD *)&v424[32] - 8);
            *(_QWORD *)&v424[32] -= 8;
            *(_QWORD *)&v424[8] -= 8;
            *(_QWORD *)&v421 = &unk_24C41E890;
            if (*(_QWORD *)&v424[24])
            {
              *(_QWORD *)&v424[32] = *(_QWORD *)&v424[24];
              operator delete(*(void **)&v424[24]);
            }
            if (*(_QWORD *)v424)
            {
              *(_QWORD *)&v424[8] = *(_QWORD *)v424;
              operator delete(*(void **)v424);
            }
            v212 = (void ***)v422;
            *(_QWORD *)&v422 = 0;
            if (v212)
              (*((void (**)(void ***))&v422 + 1))(v212);
            v213 = *(void ****)v376;
            *(_QWORD *)v376 = 0;
            if (v213)
            {
              sub_20B4181DC(v213 + 1, *(unsigned __int8 *)v213);
              MEMORY[0x20BD3583C](v213, 0x1022C40B06DCE69);
            }
            if ((v395[23] & 0x80000000) == 0)
              goto LABEL_857;
            v136 = *(void **)v395;
            goto LABEL_856;
          default:
            sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/FileIO.cpp", 680, (uint64_t)"", 0, (uint64_t)"Format cannot be loaded", 23, (void (*)(void **))sub_20B532360);
            abort();
        }
      }
      if (SHIBYTE(v364.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_20AEC60F4(&v421, v364.__pn_.__r_.__value_.__l.__data_, v364.__pn_.__r_.__value_.__l.__size_);
      }
      else
      {
        v421 = *(_OWORD *)&v364.__pn_.__r_.__value_.__l.__data_;
        *(_QWORD *)&v422 = *((_QWORD *)&v364.__pn_.__r_.__value_.__l + 2);
      }
      v102 = std::string::insert((std::string *)&v421, 0, "Failed to open file for reading: ", 0x21uLL);
      v104 = (void *)v102->__r_.__value_.__r.__words[0];
      size = v102->__r_.__value_.__l.__size_;
      *(_DWORD *)v395 = v102->__r_.__value_.__r.__words[2];
      *(_DWORD *)&v395[3] = *(_DWORD *)((char *)&v102->__r_.__value_.__r.__words[2] + 3);
      v105 = SHIBYTE(v102->__r_.__value_.__r.__words[2]);
      v102->__r_.__value_.__l.__size_ = 0;
      v102->__r_.__value_.__r.__words[2] = 0;
      v102->__r_.__value_.__r.__words[0] = 0;
      if (v105 < 0)
      {
        sub_20AEC60F4(__p, v104, size);
      }
      else
      {
        *(_QWORD *)__p = v104;
        *(_QWORD *)&__p[8] = size;
        *(_DWORD *)&__p[16] = *(_DWORD *)v395;
        *(_DWORD *)&__p[19] = *(_DWORD *)&v395[3];
        __p[23] = v105;
      }
      __p[24] = 1;
      __p[32] = 0;
      BYTE8(v438) = 0;
      LOBYTE(v439) = 1;
      sub_20B0C5BC0(2u, (__int128 *)__p, (uint64_t)__dst);
      v351 = *(_OWORD *)__dst;
      LOBYTE(v352) = 0;
      v361 = 0;
      if (__dst[112])
      {
        v354 = 0;
        if (__dst[40])
        {
          v352 = *(_OWORD *)&__dst[16];
          v353 = *(_QWORD *)&__dst[32];
          memset(&__dst[16], 0, 24);
          v354 = 1;
        }
        LOBYTE(v355) = 0;
        v360 = 0;
        if (__dst[104])
        {
          v356 = *(void **)&__dst[64];
          v355 = *(_OWORD *)&__dst[48];
          memset(&__dst[48], 0, 24);
          v358 = *(_OWORD *)&__dst[80];
          v357 = *(void **)&__dst[72];
          v359 = *(_QWORD *)&__dst[96];
          memset(&__dst[80], 0, 24);
          v360 = 1;
        }
        v361 = 1;
        v362 = 0;
        if (__dst[40] && (__dst[39] & 0x80000000) != 0)
          operator delete(*(void **)&__dst[16]);
      }
      else
      {
        v362 = 0;
      }
      if ((_BYTE)v439)
      {
        if (BYTE8(v438))
        {
          if (SBYTE7(v438) < 0)
            operator delete(v436);
          if ((v435[15] & 0x80000000) != 0)
            operator delete(*(void **)&__p[32]);
        }
        if (__p[24] && (__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (v105 < 0)
      {
        operator delete(v104);
        if ((SBYTE7(v422) & 0x80000000) == 0)
        {
LABEL_260:
          v110 = v391;
          if (!v391)
          {
LABEL_862:
            if (v362)
            {
              v216 = std::__fs::filesystem::path::__parent_path(&v364);
              if (v216.__size_ > 0x7FFFFFFFFFFFFFF7)
                sub_20AEC0138();
              if (v216.__size_ >= 0x17)
              {
                v221 = (v216.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v216.__size_ | 7) != 0x17)
                  v221 = v216.__size_ | 7;
                v222 = v221 + 1;
                v217 = operator new(v221 + 1);
                *(_QWORD *)&__dst[16] = v222 | 0x8000000000000000;
                *(_QWORD *)__dst = v217;
                *(_QWORD *)&__dst[8] = v216.__size_;
              }
              else
              {
                __dst[23] = v216.__size_;
                v217 = __dst;
                if (!v216.__size_)
                {
LABEL_885:
                  v217[v216.__size_] = 0;
                  v223 = *(void **)__dst;
                  v224 = *(_QWORD *)&__dst[8];
                  *(_DWORD *)__p = *(_DWORD *)&__dst[16];
                  *(_DWORD *)&__p[3] = *(_DWORD *)&__dst[19];
                  v225 = BYTE7(v433[0]);
                  if ((SBYTE7(v433[0]) & 0x80u) == 0)
                    v226 = (char *)&v432;
                  else
                    v226 = (char *)v432;
                  v227 = __dst[23];
                  memset(__dst, 0, 24);
                  if (SBYTE7(v433[0]) < 0)
                    v225 = *((_QWORD *)&v432 + 1);
                  sub_20AF08074((unint64_t)__dst, v226, &v226[v225]);
                  if (v227 < 0)
                  {
                    sub_20AEC60F4(&v421, v223, v224);
                  }
                  else
                  {
                    *(_QWORD *)&v421 = v223;
                    *((_QWORD *)&v421 + 1) = v224;
                    LODWORD(v422) = *(_DWORD *)__p;
                    *(_DWORD *)((char *)&v422 + 3) = *(_DWORD *)&__p[3];
                    BYTE7(v422) = v227;
                  }
                  sub_20B1F6634((uint64_t)&v421, (std::__fs::filesystem::path *)__dst);
                  if ((__dst[23] & 0x80000000) != 0)
                    operator delete(*(void **)__dst);
                  if (v227 < 0)
                    operator delete(v223);
                  v228 = std::__fs::filesystem::path::__extension((const std::__fs::filesystem::path *)&v421);
                  if (v228.__size_ > 0x7FFFFFFFFFFFFFF7)
                    sub_20AEC0138();
                  if (v228.__size_ >= 0x17)
                  {
                    v230 = (v228.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v228.__size_ | 7) != 0x17)
                      v230 = v228.__size_ | 7;
                    v231 = v230 + 1;
                    v229 = operator new(v230 + 1);
                    *(_QWORD *)&__dst[16] = v231 | 0x8000000000000000;
                    *(_QWORD *)__dst = v229;
                    *(_QWORD *)&__dst[8] = v228.__size_;
                  }
                  else
                  {
                    __dst[23] = v228.__size_;
                    v229 = __dst;
                    if (!v228.__size_)
                      goto LABEL_905;
                  }
                  memmove(v229, v228.__data_, v228.__size_);
LABEL_905:
                  v229[v228.__size_] = 0;
                  __srca = *(void **)__dst;
                  v232 = *(_QWORD *)&__dst[8];
                  LODWORD(v393[0]) = *(_DWORD *)&__dst[16];
                  *(_DWORD *)((char *)v393 + 3) = *(_DWORD *)&__dst[19];
                  v233 = __dst[23];
                  *(_QWORD *)v395 = &off_24C411E78;
                  *(_OWORD *)&v395[8] = 0uLL;
                  v234 = atomic_load((unsigned __int8 *)&qword_25463CF48);
                  if ((v234 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
                  {
                    *(_OWORD *)__dst = xmmword_20B5B0AE0;
                    sub_20B1DFBA8((uint64_t *)__dst);
                    __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
                    __cxa_guard_release(&qword_25463CF48);
                  }
                  v235 = HIBYTE(v374);
                  if (v374 >= 0)
                    v236 = HIBYTE(v374);
                  else
                    v236 = *((_QWORD *)&__s1 + 1);
                  v237 = *((_QWORD *)&xmmword_25463CDA8 + 1);
                  if (byte_25463CDBF >= 0)
                    v237 = byte_25463CDBF;
                  if (v236 != v237)
                    goto LABEL_937;
                  if (byte_25463CDBF >= 0)
                    v238 = &xmmword_25463CDA8;
                  else
                    v238 = (__int128 *)xmmword_25463CDA8;
                  if (v374 < 0)
                  {
                    if (memcmp((const void *)__s1, v238, *((size_t *)&__s1 + 1)))
                      goto LABEL_937;
                  }
                  else if (HIBYTE(v374))
                  {
                    p_s1 = &__s1;
                    while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v238)
                    {
                      p_s1 = (__int128 *)((char *)p_s1 + 1);
                      v238 = (__int128 *)((char *)v238 + 1);
                      if (!--v235)
                        goto LABEL_934;
                    }
                    goto LABEL_937;
                  }
LABEL_934:
                  if (v375 == dword_25463CDC0)
                  {
                    if (v233 < 0)
                    {
                      sub_20AEC60F4(__dst, __srca, v232);
                      v243 = __dst[23];
                      v241 = *(_BYTE **)__dst;
                      v242 = *(_QWORD *)&__dst[8];
                    }
                    else
                    {
                      v241 = __srca;
                      *(_QWORD *)__dst = __srca;
                      *(_QWORD *)&__dst[8] = v232;
                      *(_DWORD *)&__dst[16] = v393[0];
                      *(_DWORD *)&__dst[19] = *(_DWORD *)((char *)v393 + 3);
                      __dst[23] = v233;
                      v242 = v232;
                      v243 = v233;
                    }
                    if ((v243 & 0x80u) == 0)
                      v255 = __dst;
                    else
                      v255 = v241;
                    if ((v243 & 0x80u) == 0)
                      v256 = v243;
                    else
                      v256 = v242;
                    v257 = sub_20B2CF5FC(v255, v256);
                    if ((__dst[23] & 0x80000000) != 0)
                      operator delete(*(void **)__dst);
                    if ((v257 & 0xFF00000000) != 0)
                    {
                      (*(void (**)(_BYTE *__return_ptr, _QWORD, __int128 *, uint64_t))(**(_QWORD **)(a1 + 24)
                                                                                               + 368))(v376, *(_QWORD *)(a1 + 24), &v421, 8);
                      v258 = v301;
                      if (!*(_QWORD *)&v376[8])
                      {
                        if (SHIBYTE(v364.__pn_.__r_.__value_.__r.__words[2]) < 0)
                        {
                          v172 = v299;
                          sub_20AEC60F4(&pn, v364.__pn_.__r_.__value_.__l.__data_, v364.__pn_.__r_.__value_.__l.__size_);
                        }
                        else
                        {
                          pn = v364.__pn_;
                          v172 = v299;
                        }
                        sub_20B1F16DC("Failed to open file for reading: ", &pn, (std::string *)__p);
                        if ((__p[23] & 0x80000000) != 0)
                        {
                          sub_20AEC60F4(&v339, *(void **)__p, *(unint64_t *)&__p[8]);
                        }
                        else
                        {
                          v339 = *(_OWORD *)__p;
                          v340 = *(_QWORD *)&__p[16];
                        }
                        v341 = 1;
                        v342 = 0;
                        v343 = 0;
                        v344 = 1;
                        sub_20B0C5BC0(2u, &v339, (uint64_t)__dst);
                        sub_20AFEDBD0(v298, (uint64_t)__dst);
                        sub_20AECCE40((uint64_t)__dst);
                        sub_20AECCDB4((uint64_t)&v339);
                        if ((__p[23] & 0x80000000) != 0)
                          operator delete(*(void **)__p);
                        if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(pn.__r_.__value_.__l.__data_);
                        sub_20B422408((uint64_t)v376);
                        goto LABEL_1105;
                      }
                      v259 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&v376[8] + 16))(*(_QWORD *)&v376[8]);
                      sub_20B0DBFFC(v259, v257, (uint64_t)__p);
                      sub_20B0C6034((uint64_t)&v433[1], (uint64_t)__dst);
                      sub_20B0E66B4((uint64_t)__p, (uint64_t)__dst, &pn);
                      sub_20B1F1738((uint64_t)v395, (uint64_t)&pn);
                      sub_20B216B00((uint64_t)&pn);
                      sub_20AF4EA3C((uint64_t)__dst);
                      sub_20AFFA660((uint64_t)__p);
                      sub_20B422408((uint64_t)v376);
                      goto LABEL_1020;
                    }
                    if (v233 < 0)
                    {
                      v172 = v299;
                      sub_20AEC60F4(v376, __srca, v232);
                    }
                    else
                    {
                      *(_QWORD *)v376 = __srca;
                      *(_QWORD *)&v376[8] = v232;
                      *(_DWORD *)&v376[16] = v393[0];
                      *(_DWORD *)&v376[19] = *(_DWORD *)((char *)v393 + 3);
                      v376[23] = v233;
                      v172 = v299;
                    }
                    sub_20B1F16DC("Unknown image extension: ", (std::string *)v376, (std::string *)__p);
                    if ((__p[23] & 0x80000000) != 0)
                    {
                      sub_20AEC60F4(&v345, *(void **)__p, *(unint64_t *)&__p[8]);
                    }
                    else
                    {
                      v345 = *(_OWORD *)__p;
                      v346 = *(_QWORD *)&__p[16];
                    }
                    v347 = 1;
                    v348 = 0;
                    v349 = 0;
                    v350 = 1;
                    sub_20B0C5BC0(0xDu, &v345, (uint64_t)__dst);
                    sub_20AFEDBD0(v298, (uint64_t)__dst);
                    sub_20AECCE40((uint64_t)__dst);
                    v286 = &v345;
LABEL_1092:
                    sub_20AECCDB4((uint64_t)v286);
                    if ((__p[23] & 0x80000000) != 0)
                      operator delete(*(void **)__p);
                    if ((v376[23] & 0x80000000) != 0)
                      operator delete(*(void **)v376);
                    goto LABEL_1105;
                  }
LABEL_937:
                  v244 = atomic_load((unsigned __int8 *)&qword_25463CF48);
                  if ((v244 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
                  {
                    *(_OWORD *)__dst = xmmword_20B5B0AE0;
                    sub_20B1DFBA8((uint64_t *)__dst);
                    __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
                    __cxa_guard_release(&qword_25463CF48);
                  }
                  v245 = HIBYTE(v374);
                  if (v374 >= 0)
                    v246 = HIBYTE(v374);
                  else
                    v246 = *((_QWORD *)&__s1 + 1);
                  v247 = *((_QWORD *)&xmmword_25463CE68 + 1);
                  if (byte_25463CE7F >= 0)
                    v247 = byte_25463CE7F;
                  if (v246 != v247)
                    goto LABEL_957;
                  if (byte_25463CE7F >= 0)
                    v248 = &xmmword_25463CE68;
                  else
                    v248 = (__int128 *)xmmword_25463CE68;
                  if (v374 < 0)
                  {
                    if (memcmp((const void *)__s1, v248, *((size_t *)&__s1 + 1)))
                      goto LABEL_957;
                  }
                  else if (HIBYTE(v374))
                  {
                    v249 = &__s1;
                    while (*(unsigned __int8 *)v249 == *(unsigned __int8 *)v248)
                    {
                      v249 = (__int128 *)((char *)v249 + 1);
                      v248 = (__int128 *)((char *)v248 + 1);
                      if (!--v245)
                        goto LABEL_954;
                    }
LABEL_957:
                    if (SHIBYTE(v364.__pn_.__r_.__value_.__r.__words[2]) < 0)
                      sub_20AEC60F4(__p, v364.__pn_.__r_.__value_.__l.__data_, v364.__pn_.__r_.__value_.__l.__size_);
                    else
                      *(std::__fs::filesystem::path *)__p = v364;
                    v250 = std::string::insert((std::string *)__p, 0, "Unexpected info file ", 0x15uLL);
                    v252 = (void *)v250->__r_.__value_.__r.__words[0];
                    v251 = v250->__r_.__value_.__l.__size_;
                    *(_DWORD *)v376 = v250->__r_.__value_.__r.__words[2];
                    *(_DWORD *)&v376[3] = *(_DWORD *)((char *)&v250->__r_.__value_.__r.__words[2] + 3);
                    v253 = SHIBYTE(v250->__r_.__value_.__r.__words[2]);
                    v250->__r_.__value_.__l.__size_ = 0;
                    v250->__r_.__value_.__r.__words[2] = 0;
                    v250->__r_.__value_.__r.__words[0] = 0;
                    if (v253 < 0)
                    {
                      sub_20AEC60F4(&v321, v252, v251);
                    }
                    else
                    {
                      *(_QWORD *)&v321 = v252;
                      *((_QWORD *)&v321 + 1) = v251;
                      *(_DWORD *)v322 = *(_DWORD *)v376;
                      *(_DWORD *)&v322[3] = *(_DWORD *)&v376[3];
                      v323 = v253;
                    }
                    v324 = 1;
                    LOBYTE(v325) = 0;
                    v329 = 0;
                    v330 = 1;
                    sub_20B0C5BC0(0xDu, &v321, (uint64_t)__dst);
                    *(_OWORD *)v298 = *(_OWORD *)__dst;
                    *(_BYTE *)(v298 + 16) = 0;
                    *(_BYTE *)(v298 + 112) = 0;
                    if (__dst[112])
                    {
                      *(_BYTE *)(v298 + 40) = 0;
                      if (__dst[40])
                      {
                        *(_OWORD *)(v298 + 16) = *(_OWORD *)&__dst[16];
                        *(_QWORD *)(v298 + 32) = *(_QWORD *)&__dst[32];
                        memset(&__dst[16], 0, 24);
                        *(_BYTE *)(v298 + 40) = 1;
                      }
                      *(_BYTE *)(v298 + 48) = 0;
                      *(_BYTE *)(v298 + 104) = 0;
                      if (!__dst[104])
                      {
                        *(_BYTE *)(v298 + 112) = 1;
                        *(_BYTE *)(v298 + 120) = 0;
                        v172 = v299;
                        if (!__dst[40])
                          goto LABEL_978;
                        goto LABEL_976;
                      }
                      v254 = *(_QWORD *)&__dst[72];
                      *(_QWORD *)(v298 + 64) = *(_QWORD *)&__dst[64];
                      *(_OWORD *)(v298 + 48) = *(_OWORD *)&__dst[48];
                      *(_QWORD *)&__dst[48] = 0;
                      *(_QWORD *)&__dst[56] = 0;
                      *(_QWORD *)(v298 + 72) = v254;
                      *(_OWORD *)(v298 + 80) = *(_OWORD *)&__dst[80];
                      *(_QWORD *)(v298 + 96) = *(_QWORD *)&__dst[96];
                      *(_QWORD *)&__dst[64] = 0;
                      memset(&__dst[80], 0, 24);
                      *(_BYTE *)(v298 + 104) = 1;
                      *(_BYTE *)(v298 + 112) = 1;
                      *(_BYTE *)(v298 + 120) = 0;
                      if ((__dst[103] & 0x80000000) != 0)
                      {
                        operator delete(*(void **)&__dst[80]);
                        v172 = v299;
                        if ((__dst[71] & 0x80000000) == 0)
                        {
LABEL_969:
                          if (!__dst[40])
                            goto LABEL_978;
LABEL_976:
                          if ((__dst[39] & 0x80000000) != 0)
                            operator delete(*(void **)&__dst[16]);
                          goto LABEL_978;
                        }
                      }
                      else
                      {
                        v172 = v299;
                        if ((__dst[71] & 0x80000000) == 0)
                          goto LABEL_969;
                      }
                      operator delete(*(void **)&__dst[48]);
                      if (__dst[40])
                        goto LABEL_976;
                    }
                    else
                    {
                      *(_BYTE *)(v298 + 120) = 0;
                      v172 = v299;
                    }
LABEL_978:
                    if (v330)
                    {
                      if (v329)
                      {
                        if (v328 < 0)
                          operator delete(v327);
                        if (v326 < 0)
                          operator delete(v325);
                      }
                      if (v324 && v323 < 0)
                        operator delete((void *)v321);
                    }
                    if (v253 < 0)
                      operator delete(v252);
                    if ((__p[23] & 0x80000000) != 0)
                      operator delete(*(void **)__p);
                    goto LABEL_1105;
                  }
LABEL_954:
                  if (v375 != dword_25463CE80)
                    goto LABEL_957;
                  if (v233 < 0)
                  {
                    sub_20AEC60F4(__dst, __srca, v232);
                  }
                  else
                  {
                    *(_QWORD *)__dst = __srca;
                    *(_QWORD *)&__dst[8] = v232;
                    *(_DWORD *)&__dst[16] = v393[0];
                    *(_DWORD *)&__dst[19] = *(_DWORD *)((char *)v393 + 3);
                    __dst[23] = v233;
                  }
                  v260 = sub_20B41B3A8(__dst);
                  if ((__dst[23] & 0x80000000) != 0)
                    operator delete(*(void **)__dst);
                  if ((v260 & 0xFF00000000) != 0)
                  {
                    if (SBYTE7(v422) < 0)
                    {
                      sub_20AEC60F4(&v331, (void *)v421, *((unint64_t *)&v421 + 1));
                    }
                    else
                    {
                      v331 = v421;
                      v332 = v422;
                    }
                    v258 = v301;
                    sub_20B41C778((uint64_t)&v331, 0, 1, *(_QWORD *)(a1 + 24), (uint64_t)__dst);
                    if (SHIBYTE(v332) < 0)
                      operator delete((void *)v331);
                    if (!v431[217])
                    {
                      sub_20AEC0D64(v376, "Failed to load mesh ");
                      sub_20B1F17AC((uint64_t)__dst);
                      sub_20B52A138((void **)v376, (__int128 *)__dst, (uint64_t)__p);
                      sub_20B0BFB50((uint64_t)__p);
                    }
                    sub_20B0C6034((uint64_t)&v433[1], (uint64_t)__p);
                    sub_20B1F9F08(v376, (uint64_t)__dst, (uint64_t)__p);
                    sub_20B1F1738((uint64_t)v395, (uint64_t)v376);
                    sub_20B216B00((uint64_t)v376);
                    sub_20AF4EA3C((uint64_t)__p);
                    sub_20B1F17EC((uint64_t)__dst);
LABEL_1020:
                    if (*((char *)v258 + 23) < 0)
                    {
                      sub_20AEC60F4(v320, *(void **)v258, *((_QWORD *)v258 + 1));
                    }
                    else
                    {
                      v261 = *v258;
                      v320[2] = *((void **)v258 + 2);
                      *(_OWORD *)v320 = v261;
                    }
                    *(void **)&__dst[15] = *(void **)((char *)&v320[1] + 7);
                    v262 = v320[0];
                    v263 = v320[1];
                    v264 = HIBYTE(v320[2]);
                    v265 = SHIBYTE(v320[2]);
                    memset(v320, 0, sizeof(v320));
                    *(_QWORD *)&__dst[8] = v263;
                    *(_QWORD *)__dst = v262;
                    __dst[23] = v264;
                    __dst[24] = 0;
                    __dst[48] = 0;
                    if (v265 >= 0)
                      v266 = __dst;
                    else
                      v266 = v262;
                    if (v265 < 0)
                      v264 = *(_QWORD *)&__dst[8];
                    if (!v264)
                      goto LABEL_1050;
                    v267 = v266;
                    if (v264 < 8)
                      goto LABEL_1078;
                    v267 = &v266[v264 & 0xFFFFFFFFFFFFFFF8];
                    v268 = v266 + 3;
                    v269 = v264 & 0xFFFFFFFFFFFFFFF8;
                    while (1)
                    {
                      v270 = vceq_s8(*(int8x8_t *)(v268 - 3), (int8x8_t)0x3A3A3A3A3A3A3A3ALL);
                      if ((v270.i8[0] & 1) != 0)
                      {
                        *(v268 - 3) = 95;
                        if ((v270.i8[1] & 1) == 0)
                          goto LABEL_1034;
                      }
                      else if ((v270.i8[1] & 1) == 0)
                      {
LABEL_1034:
                        if ((v270.i8[2] & 1) != 0)
                          goto LABEL_1035;
                        goto LABEL_1043;
                      }
                      *(v268 - 2) = 95;
                      if ((v270.i8[2] & 1) != 0)
                      {
LABEL_1035:
                        *(v268 - 1) = 95;
                        if ((v270.i8[3] & 1) == 0)
                          goto LABEL_1036;
                        goto LABEL_1044;
                      }
LABEL_1043:
                      if ((v270.i8[3] & 1) == 0)
                      {
LABEL_1036:
                        if ((v270.i8[4] & 1) != 0)
                          goto LABEL_1037;
                        goto LABEL_1045;
                      }
LABEL_1044:
                      *v268 = 95;
                      if ((v270.i8[4] & 1) != 0)
                      {
LABEL_1037:
                        v268[1] = 95;
                        if ((v270.i8[5] & 1) == 0)
                          goto LABEL_1038;
                        goto LABEL_1046;
                      }
LABEL_1045:
                      if ((v270.i8[5] & 1) == 0)
                      {
LABEL_1038:
                        if ((v270.i8[6] & 1) != 0)
                          goto LABEL_1039;
                        goto LABEL_1047;
                      }
LABEL_1046:
                      v268[2] = 95;
                      if ((v270.i8[6] & 1) != 0)
                      {
LABEL_1039:
                        v268[3] = 95;
                        if ((v270.i8[7] & 1) != 0)
                          goto LABEL_1048;
                        goto LABEL_1031;
                      }
LABEL_1047:
                      if ((v270.i8[7] & 1) != 0)
LABEL_1048:
                        v268[4] = 95;
LABEL_1031:
                      v268 += 8;
                      v269 -= 8;
                      if (!v269)
                      {
                        if (v264 == (v264 & 0xFFFFFFFFFFFFFFF8))
                          goto LABEL_1050;
LABEL_1078:
                        v285 = &v266[v264];
                        do
                        {
                          if (*v267 == 58)
                            *v267 = 95;
                          ++v267;
                        }
                        while (v267 != v285);
LABEL_1050:
                        v271 = *(_OWORD *)&v395[8];
                        v318 = &off_24C411E78;
                        v319 = *(_OWORD *)&v395[8];
                        if (*(_QWORD *)&v395[16])
                        {
                          v272 = (unint64_t *)(*(_QWORD *)&v395[16] + 8);
                          do
                            v273 = __ldxr(v272);
                          while (__stxr(v273 + 1, v272));
                        }
                        v274 = (char *)operator new(0x50uLL);
                        v275 = (std::__shared_weak_count *)v274;
                        *((_QWORD *)v274 + 1) = 0;
                        v276 = (unint64_t *)(v274 + 8);
                        *((_QWORD *)v274 + 2) = 0;
                        *(_QWORD *)v274 = &off_24C3F3C88;
                        v277 = v274 + 24;
                        *(_OWORD *)(v274 + 24) = *(_OWORD *)__dst;
                        *((_QWORD *)v274 + 5) = *(_QWORD *)&__dst[16];
                        memset(__dst, 0, 24);
                        v274[48] = 0;
                        v274[72] = 0;
                        if (__dst[48])
                        {
                          *((_OWORD *)v274 + 3) = *(_OWORD *)&__dst[24];
                          *((_QWORD *)v274 + 8) = *(_QWORD *)&__dst[40];
                          memset(&__dst[24], 0, 24);
                          v274[72] = 1;
                        }
                        v319 = 0uLL;
                        v172 = v299;
                        do
                          v278 = __ldxr(v276);
                        while (__stxr(v278 + 1, v276));
                        if (*((_QWORD *)&v271 + 1))
                        {
                          v279 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
                          do
                            v280 = __ldxr(v279);
                          while (__stxr(v280 + 1, v279));
                          do
                            v281 = __ldaxr(v279);
                          while (__stlxr(v281 - 1, v279));
                          if (!v281)
                          {
                            (*(void (**)(_QWORD))(**((_QWORD **)&v271 + 1) + 16))(*((_QWORD *)&v271 + 1));
                            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v271 + 1));
                          }
                        }
                        do
                          v282 = __ldaxr(v276);
                        while (__stlxr(v282 - 1, v276));
                        if (!v282)
                        {
                          ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
                          std::__shared_weak_count::__release_weak(v275);
                        }
                        *(_QWORD *)v298 = v277;
                        *(_QWORD *)(v298 + 8) = v275;
                        *(_QWORD *)(v298 + 16) = &off_24C411E78;
                        *(_OWORD *)(v298 + 24) = v271;
                        *(_BYTE *)(v298 + 120) = 1;
                        if (*((_QWORD *)&v319 + 1))
                        {
                          v283 = (unint64_t *)(*((_QWORD *)&v319 + 1) + 8);
                          do
                            v284 = __ldaxr(v283);
                          while (__stlxr(v284 - 1, v283));
                          if (!v284)
                          {
                            (*(void (**)(_QWORD))(**((_QWORD **)&v319 + 1) + 16))(*((_QWORD *)&v319 + 1));
                            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v319 + 1));
                          }
                        }
                        if (__dst[48] && (__dst[47] & 0x80000000) != 0)
                          operator delete(*(void **)&__dst[24]);
                        if ((__dst[23] & 0x80000000) != 0)
                          operator delete(*(void **)__dst);
                        if (SHIBYTE(v320[2]) < 0)
                          operator delete(v320[0]);
LABEL_1105:
                        v287 = *(std::__shared_weak_count **)&v395[16];
                        if (*(_QWORD *)&v395[16])
                        {
                          v288 = (unint64_t *)(*(_QWORD *)&v395[16] + 8);
                          do
                            v289 = __ldaxr(v288);
                          while (__stlxr(v289 - 1, v288));
                          if (!v289)
                          {
                            ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
                            std::__shared_weak_count::__release_weak(v287);
                          }
                        }
                        if (v233 < 0)
                          operator delete(__srca);
                        if (SBYTE7(v422) < 0)
                        {
                          v240 = (void *)v421;
LABEL_1114:
                          operator delete(v240);
                        }
                        goto LABEL_1115;
                      }
                    }
                  }
                  if (v233 < 0)
                  {
                    v172 = v299;
                    sub_20AEC60F4(v376, __srca, v232);
                  }
                  else
                  {
                    *(_QWORD *)v376 = __srca;
                    *(_QWORD *)&v376[8] = v232;
                    *(_DWORD *)&v376[16] = v393[0];
                    *(_DWORD *)&v376[19] = *(_DWORD *)((char *)v393 + 3);
                    v376[23] = v233;
                    v172 = v299;
                  }
                  sub_20B1F16DC("Unknown mesh extension: ", (std::string *)v376, (std::string *)__p);
                  if ((__p[23] & 0x80000000) != 0)
                  {
                    sub_20AEC60F4(&v333, *(void **)__p, *(unint64_t *)&__p[8]);
                  }
                  else
                  {
                    v333 = *(_OWORD *)__p;
                    v334 = *(_QWORD *)&__p[16];
                  }
                  v335 = 1;
                  v336 = 0;
                  v337 = 0;
                  v338 = 1;
                  sub_20B0C5BC0(0xDu, &v333, (uint64_t)__dst);
                  sub_20AFEDBD0(v298, (uint64_t)__dst);
                  sub_20AECCE40((uint64_t)__dst);
                  v286 = &v333;
                  goto LABEL_1092;
                }
              }
              memmove(v217, v216.__data_, v216.__size_);
              goto LABEL_885;
            }
            *(_DWORD *)&v395[24] = 0;
            sub_20AFAE5CC(v395, "while loading sequence entry ");
            std::to_string((std::string *)v376, *(_QWORD *)(a1 + 280));
            *(_QWORD *)&v421 = v395;
            *((_QWORD *)&v421 + 1) = v376;
            *(_QWORD *)&v422 = v395;
            *((_QWORD *)&v422 + 1) = v376;
            v423 = v376;
            if (*(_DWORD *)&v395[24] == -1)
              sub_20AECFAB8();
            v393[0] = &v421;
            ((void (*)(_QWORD *, _BYTE *))off_24C4110D8[*(unsigned int *)&v395[24]])(v393, v395);
            if ((v376[23] & 0x80000000) != 0)
              operator delete(*(void **)v376);
            if (*(_DWORD *)&v395[24] == -1)
              sub_20AECFAB8();
            *(_QWORD *)&v421 = v376;
            ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24C410E30[*(unsigned int *)&v395[24]])(&pn, &v421, v395);
            if (*(_DWORD *)&v395[24] != -1)
              ((void (*)(__int128 *, _BYTE *))off_24C410E18[*(unsigned int *)&v395[24]])(&v421, v395);
            sub_20AFF4064((char *)&v351, (void **)&pn.__r_.__value_.__l.__data_, (uint64_t)__p);
            *(_OWORD *)__dst = *(_OWORD *)__p;
            v218 = sub_20AECEBD0(&__dst[16], (__int128 *)&__p[16]);
            *(_OWORD *)v298 = *(_OWORD *)__dst;
            *(_BYTE *)(v298 + 16) = 0;
            *(_BYTE *)(v298 + 112) = 0;
            if (__dst[112])
            {
              *(_BYTE *)(v298 + 40) = 0;
              v219 = __dst[40];
              if (__dst[40])
              {
                *(_OWORD *)(v298 + 16) = *(_OWORD *)v218;
                *(_QWORD *)(v298 + 32) = *((_QWORD *)v218 + 2);
                *((_QWORD *)v218 + 1) = 0;
                *((_QWORD *)v218 + 2) = 0;
                *(_QWORD *)v218 = 0;
                *(_BYTE *)(v298 + 40) = 1;
              }
              *(_BYTE *)(v298 + 48) = 0;
              *(_BYTE *)(v298 + 104) = 0;
              if (__dst[104])
              {
                v220 = *(_QWORD *)&__dst[72];
                *(_QWORD *)(v298 + 64) = *(_QWORD *)&__dst[64];
                *(_OWORD *)(v298 + 48) = *(_OWORD *)&__dst[48];
                *(_QWORD *)&__dst[48] = 0;
                *(_QWORD *)&__dst[56] = 0;
                *(_QWORD *)(v298 + 72) = v220;
                *(_OWORD *)(v298 + 80) = *(_OWORD *)&__dst[80];
                *(_QWORD *)(v298 + 96) = *(_QWORD *)&__dst[96];
                *(_QWORD *)&__dst[64] = 0;
                memset(&__dst[80], 0, 24);
                *(_BYTE *)(v298 + 104) = 1;
              }
              *(_BYTE *)(v298 + 112) = 1;
              *(_BYTE *)(v298 + 120) = 0;
              if (v219 && (__dst[39] & 0x80000000) != 0)
                operator delete(*(void **)&__dst[16]);
            }
            else
            {
              *(_BYTE *)(v298 + 120) = 0;
            }
            v172 = v299;
            if ((_BYTE)v441)
            {
              if (v440)
              {
                if (SHIBYTE(v439) < 0)
                  operator delete((void *)v438);
                if (SHIBYTE(v436) < 0)
                  operator delete(*(void **)&v435[8]);
              }
              if (v435[0] && (__p[39] & 0x80000000) != 0)
                operator delete(*(void **)&__p[16]);
            }
            if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
            {
              v240 = (void *)pn.__r_.__value_.__r.__words[0];
              goto LABEL_1114;
            }
LABEL_1115:
            if (!v362 && v361)
            {
              if (v360)
              {
                if (SHIBYTE(v359) < 0)
                  operator delete((void *)v358);
                if (SHIBYTE(v356) < 0)
                  operator delete((void *)v355);
              }
              if (v354 && SHIBYTE(v353) < 0)
                operator delete((void *)v352);
            }
            if (BYTE8(v433[11]))
            {
              v290 = *(_QWORD *)&v433[10];
              if (*(_QWORD *)&v433[10])
              {
                v291 = *((_QWORD *)&v433[10] + 1);
                v292 = *(void **)&v433[10];
                if (*((_QWORD *)&v433[10] + 1) != *(_QWORD *)&v433[10])
                {
                  do
                  {
                    if (*(char *)(v291 - 1) < 0)
                      operator delete(*(void **)(v291 - 24));
                    v291 -= 24;
                  }
                  while (v291 != v290);
                  v292 = *(void **)&v433[10];
                }
                *((_QWORD *)&v433[10] + 1) = v290;
                operator delete(v292);
              }
            }
            if (BYTE8(v433[9]) && SBYTE7(v433[9]) < 0)
              operator delete(*(void **)&v433[8]);
            if (BYTE8(v433[7]) && SBYTE7(v433[7]) < 0)
              operator delete(*(void **)&v433[6]);
            if (LOBYTE(v433[4]) && SHIBYTE(v433[3]) < 0)
              operator delete(*((void **)&v433[2] + 1));
            if ((SBYTE7(v433[0]) & 0x80000000) == 0)
              goto LABEL_1144;
            v174 = (void *)v432;
LABEL_1150:
            operator delete(v174);
            if ((v300 & 0x80000000) == 0)
              goto LABEL_1145;
LABEL_1151:
            operator delete(v172);
            if ((SHIBYTE(v364.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_1146;
            goto LABEL_1152;
          }
LABEL_858:
          v214 = (unint64_t *)&v110->__shared_owners_;
          do
            v215 = __ldaxr(v214);
          while (__stlxr(v215 - 1, v214));
          if (!v215)
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
          }
          goto LABEL_862;
        }
      }
      else if ((SBYTE7(v422) & 0x80000000) == 0)
      {
        goto LABEL_260;
      }
      operator delete((void *)v421);
      v110 = v391;
      if (!v391)
        goto LABEL_862;
      goto LABEL_858;
    }
  }
  else if (v39)
  {
    goto LABEL_65;
  }
  v45 = *(_QWORD *)(v6 + 152 * v4 + 120);
  v46 = *(_QWORD *)(a1 + 24);
  v420[0] = v45;
  (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, std::__fs::filesystem::path *, uint64_t))(*(_QWORD *)v46 + 368))(&v417, v46, &v364, 8);
  if (!v418)
  {
    if (SHIBYTE(v364.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20AEC60F4(&v432, v364.__pn_.__r_.__value_.__l.__data_, v364.__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      v432 = *(_OWORD *)&v364.__pn_.__r_.__value_.__l.__data_;
      *(_QWORD *)&v433[0] = *((_QWORD *)&v364.__pn_.__r_.__value_.__l + 2);
    }
    v106 = std::string::insert((std::string *)&v432, 0, "Failed to open file for reading: ", 0x21uLL);
    v108 = (void *)v106->__r_.__value_.__r.__words[0];
    v107 = v106->__r_.__value_.__l.__size_;
    LODWORD(v421) = v106->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)&v421 + 3) = *(_DWORD *)((char *)&v106->__r_.__value_.__r.__words[2] + 3);
    v109 = SHIBYTE(v106->__r_.__value_.__r.__words[2]);
    v106->__r_.__value_.__l.__size_ = 0;
    v106->__r_.__value_.__r.__words[2] = 0;
    v106->__r_.__value_.__r.__words[0] = 0;
    if (v109 < 0)
    {
      sub_20AEC60F4(__p, v108, v107);
    }
    else
    {
      *(_QWORD *)__p = v108;
      *(_QWORD *)&__p[8] = v107;
      *(_DWORD *)&__p[16] = v421;
      *(_DWORD *)&__p[19] = *(_DWORD *)((char *)&v421 + 3);
      __p[23] = v109;
    }
    __p[24] = 1;
    __p[32] = 0;
    BYTE8(v438) = 0;
    LOBYTE(v439) = 1;
    sub_20B0C5BC0(2u, (__int128 *)__p, (uint64_t)__dst);
    *(_OWORD *)v376 = *(_OWORD *)__dst;
    v376[16] = 0;
    v385 = 0;
    if (__dst[112])
    {
      v378 = 0;
      if (__dst[40])
      {
        *(_OWORD *)&v376[16] = *(_OWORD *)&__dst[16];
        v377 = *(_QWORD *)&__dst[32];
        memset(&__dst[16], 0, 24);
        v378 = 1;
      }
      LOBYTE(v379) = 0;
      v384 = 0;
      if (__dst[104])
      {
        v380 = *(void **)&__dst[64];
        v379 = *(_OWORD *)&__dst[48];
        memset(&__dst[48], 0, 24);
        v382 = *(_OWORD *)&__dst[80];
        v381 = *(void **)&__dst[72];
        v383 = *(_QWORD *)&__dst[96];
        memset(&__dst[80], 0, 24);
        v384 = 1;
      }
      v385 = 1;
      v386 = 0;
      if (__dst[40] && (__dst[39] & 0x80000000) != 0)
        operator delete(*(void **)&__dst[16]);
    }
    else
    {
      v386 = 0;
    }
    if ((_BYTE)v439)
    {
      if (BYTE8(v438))
      {
        if (SBYTE7(v438) < 0)
          operator delete(v436);
        if ((v435[15] & 0x80000000) != 0)
          operator delete(*(void **)&__p[32]);
      }
      if (__p[24] && (__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (v109 < 0)
    {
      operator delete(v108);
      if ((SBYTE7(v433[0]) & 0x80000000) == 0)
      {
LABEL_274:
        v111 = (std::__shared_weak_count *)v419;
        if (!v419)
          goto LABEL_602;
        goto LABEL_598;
      }
    }
    else if ((SBYTE7(v433[0]) & 0x80000000) == 0)
    {
      goto LABEL_274;
    }
    operator delete((void *)v432);
    v111 = (std::__shared_weak_count *)v419;
    if (!v419)
      goto LABEL_602;
    goto LABEL_598;
  }
  v47 = (_QWORD *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v418 + 16))(v418);
  if (v45)
    std::istream::seekg();
  switch(v27)
  {
    case 1:
      *(_QWORD *)__dst = 1;
      sub_20B5198FC(&v432, (uint64_t *)__dst, (uint64_t)v47, 0x2800uLL);
      *(_QWORD *)&v432 = &off_24C4111F8;
      *(_QWORD *)&v433[0] = &unk_24C411340;
      *(_DWORD *)__dst = 2;
      sub_20B518854(*(uint64_t *)&v433[2], __dst);
      if (*(_DWORD *)__dst <= 1u)
      {
        memset(&__dst[8], 0, 52);
        sub_20AF43774(&__dst[64], a1 + 224);
        sub_20B1FA210(&v432, (uint64_t)&__dst[8]);
        sub_20B0C1158((uint64_t)__dst);
        if (*(_DWORD *)&__dst[56])
          sub_20AECFAB8();
        v116 = *(_QWORD *)&__dst[40];
        *(_DWORD *)__p = 1;
        sub_20B518854(*(uint64_t *)&v433[2], __p);
        (*(void (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)v116 + 40))(v116, &v432, *(unsigned int *)__p);
        sub_20B0C53C0((uint64_t)__p, (uint64_t)__dst);
        sub_20B0C5528(a1 + 160, (uint64_t)__p);
        v117 = (char *)v436;
        if (v436)
        {
          v118 = v437;
          v119 = v436;
          if (v437 != v436)
          {
            do
            {
              v120 = (std::__shared_weak_count *)*((_QWORD *)v118 - 1);
              if (v120)
              {
                v121 = (unint64_t *)&v120->__shared_owners_;
                do
                  v122 = __ldaxr(v121);
                while (__stlxr(v122 - 1, v121));
                if (!v122)
                {
                  ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                  std::__shared_weak_count::__release_weak(v120);
                }
              }
              v118 -= 16;
            }
            while (v118 != v117);
            v119 = v436;
          }
          v437 = v117;
          operator delete(v119);
        }
        if (*(_DWORD *)&v435[16] != -1)
          ((void (*)(__int128 *, _BYTE *))off_24C4110C8[*(unsigned int *)&v435[16]])(&v421, v435);
        *(_DWORD *)&v435[16] = -1;
        if ((__p[31] & 0x80000000) != 0)
          operator delete(*(void **)&__p[8]);
        v138 = *(_QWORD *)&__dst[64];
        if (*(_QWORD *)&__dst[64])
        {
          v139 = *(_QWORD *)&__dst[72];
          v140 = *(void **)&__dst[64];
          if (*(_QWORD *)&__dst[72] != *(_QWORD *)&__dst[64])
          {
            do
            {
              v141 = *(std::__shared_weak_count **)(v139 - 8);
              if (v141)
              {
                v142 = (unint64_t *)&v141->__shared_owners_;
                do
                  v143 = __ldaxr(v142);
                while (__stlxr(v143 - 1, v142));
                if (!v143)
                {
                  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                  std::__shared_weak_count::__release_weak(v141);
                }
              }
              v139 -= 16;
            }
            while (v139 != v138);
            v140 = *(void **)&__dst[64];
          }
          *(_QWORD *)&__dst[72] = v138;
          operator delete(v140);
        }
        if (*(_DWORD *)&__dst[56] != -1)
          ((void (*)(_BYTE *, _BYTE *))off_24C4110C8[*(unsigned int *)&__dst[56]])(__p, &__dst[40]);
        *(_DWORD *)&__dst[56] = -1;
        if ((__dst[31] & 0x80000000) != 0)
          operator delete(*(void **)&__dst[8]);
      }
      else
      {
        sub_20B0DD290(v433);
        sub_20B1FA210(&v432, a1 + 168);
        sub_20B0C16D8(a1 + 160);
        if (*(_DWORD *)(a1 + 216))
          sub_20AECFAB8();
        v55 = *(_QWORD *)(a1 + 200);
        *(_DWORD *)__dst = 2;
        sub_20B518854(*(uint64_t *)&v433[2], __dst);
        v56 = *(unsigned int *)__dst;
        sub_20B0DD290(v433);
        (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v55 + 40))(v55, &v432, v56);
        v57 = *(_QWORD *)&v433[1];
        v58 = *(_QWORD *)(v57 - 16)
            - (*(uint64_t (**)(uint64_t))(*(_QWORD *)&v433[0] + 32))((uint64_t)v433)
            + *(_QWORD *)(v57 - 8);
        if (v58)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)&v433[0] + 40))((uint64_t)v433, v58);
        v59 = *(_QWORD *)&v433[1];
        *(_QWORD *)&v433[1] -= 16;
        v60 = *(_QWORD *)(v59 - 32)
            - (*(uint64_t (**)(uint64_t))(*(_QWORD *)&v433[0] + 32))((uint64_t)v433)
            + *(_QWORD *)(v59 - 24);
        if (v60)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)&v433[0] + 40))((uint64_t)v433, v60);
        *(_QWORD *)&v433[1] -= 16;
      }
      *(_QWORD *)&v432 = &off_24C41F3B0;
      *(_QWORD *)&v433[0] = &unk_24C41F4F8;
      v144 = *(_QWORD *)&v433[2];
      *(_QWORD *)&v433[2] = 0;
      if (v144)
      {
        sub_20B51A350((_QWORD *)(v144 + 8));
        MEMORY[0x20BD3583C](v144, 0x10F2C40853B94B7);
      }
      *(_QWORD *)&v433[0] = off_24C41F618;
      v137 = (void *)*((_QWORD *)&v433[0] + 1);
      if (!*((_QWORD *)&v433[0] + 1))
        goto LABEL_597;
      *(_QWORD *)&v433[1] = *((_QWORD *)&v433[0] + 1);
      goto LABEL_596;
    case 2:
    case 4:
      pn.__r_.__value_.__s.__data_[0] = 0;
      v407 = 0;
      LOBYTE(v393[0]) = 0;
      v394 = 0;
      sub_20B1F5BC8(__dst, (uint64_t)v47, (uint64_t)&pn, (uint64_t)v393);
      v389 = __dst;
      v390 = a1 + 160;
      __p[0] = 0;
      v443 = 0;
      v387[0] = &off_24C4113F0;
      v387[1] = __p;
      v387[2] = &v389;
      sub_20B52A3E8((uint64_t)v387, (uint64_t)&v432);
      if (BYTE8(v433[6]))
      {
        v428 = v442;
        if (v442)
        {
          LOBYTE(v421) = __p[0];
        }
        else
        {
          v421 = *(_OWORD *)__p;
          LOBYTE(v422) = 0;
          LOBYTE(v427) = 0;
          if ((_BYTE)v441)
          {
            v424[0] = 0;
            if (v435[0])
            {
              v422 = *(_OWORD *)&__p[16];
              v423 = *(void **)&__p[32];
              memset(&__p[16], 0, 24);
              v424[0] = 1;
            }
            v424[8] = 0;
            v426 = 0;
            if (v440)
            {
              *(_QWORD *)&v424[24] = v436;
              *(_OWORD *)&v424[8] = *(_OWORD *)&v435[8];
              *(_QWORD *)&v435[8] = 0;
              *(_QWORD *)&v435[16] = 0;
              *(_OWORD *)&v424[40] = v438;
              *(_QWORD *)&v424[32] = v437;
              v425 = v439;
              v436 = 0;
              v438 = 0uLL;
              v439 = 0;
              v426 = 1;
            }
            LOBYTE(v427) = 1;
          }
        }
      }
      else
      {
        v351 = v432;
        v114 = sub_20AECEBD0(&v352, v433);
        v421 = v351;
        LOBYTE(v422) = 0;
        LOBYTE(v427) = 0;
        if (v361)
        {
          v424[0] = 0;
          v115 = v354;
          if (v354)
          {
            v422 = *(_OWORD *)v114;
            v423 = (void *)*((_QWORD *)v114 + 2);
            *((_QWORD *)v114 + 1) = 0;
            *((_QWORD *)v114 + 2) = 0;
            *(_QWORD *)v114 = 0;
            v424[0] = 1;
          }
          v424[8] = 0;
          v426 = 0;
          if (v360)
          {
            *(_QWORD *)&v424[24] = v356;
            *(_OWORD *)&v424[8] = v355;
            v355 = 0uLL;
            *(_OWORD *)&v424[40] = v358;
            *(_QWORD *)&v424[32] = v357;
            v425 = v359;
            v356 = 0;
            v358 = 0uLL;
            v359 = 0;
            v426 = 1;
          }
          LOBYTE(v427) = 1;
          v428 = 0;
          if (v115 && SHIBYTE(v353) < 0)
            operator delete((void *)v352);
        }
        else
        {
          v428 = 0;
        }
        if (!BYTE8(v433[6]) && LOBYTE(v433[6]))
        {
          if (BYTE8(v433[5]))
          {
            if (SBYTE7(v433[5]) < 0)
              operator delete(*(void **)&v433[4]);
            if (SBYTE7(v433[3]) < 0)
              operator delete(*(void **)&v433[2]);
          }
          if (BYTE8(v433[1]) && SBYTE7(v433[1]) < 0)
            operator delete(*(void **)&v433[0]);
        }
      }
      if (v443 && !v442 && (_BYTE)v441)
      {
        if (v440)
        {
          if (SHIBYTE(v439) < 0)
            operator delete((void *)v438);
          if (SHIBYTE(v436) < 0)
            operator delete(*(void **)&v435[8]);
        }
        if (v435[0] && (__p[39] & 0x80000000) != 0)
          operator delete(*(void **)&__p[16]);
      }
      if (v428)
      {
        if ((_BYTE)v421)
        {
          v405 = 1;
          goto LABEL_440;
        }
        sub_20B516F9C(__dst, (uint64_t)__p);
        *(_OWORD *)v395 = *(_OWORD *)__p;
        v395[16] = 0;
        v404 = 0;
        if (!(_BYTE)v441)
          goto LABEL_439;
      }
      else
      {
        sub_20B516DBC((uint64_t)&v421, (uint64_t)__p);
        *(_OWORD *)v395 = *(_OWORD *)__p;
        v395[16] = 0;
        v404 = 0;
        if (!(_BYTE)v441)
        {
LABEL_439:
          v405 = 0;
          goto LABEL_440;
        }
      }
      v397 = 0;
      if (v435[0])
      {
        *(_OWORD *)&v395[16] = *(_OWORD *)&__p[16];
        v396 = *(_QWORD *)&__p[32];
        memset(&__p[16], 0, 24);
        v397 = 1;
      }
      LOBYTE(v398) = 0;
      v403 = 0;
      if (v440)
      {
        v399 = v436;
        v398 = *(_OWORD *)&v435[8];
        *(_QWORD *)&v435[8] = 0;
        *(_QWORD *)&v435[16] = 0;
        v401 = v438;
        v400 = v437;
        v402 = v439;
        v436 = 0;
        v438 = 0uLL;
        v439 = 0;
        v403 = 1;
      }
      v404 = 1;
      v405 = 0;
      if (v435[0] && (__p[39] & 0x80000000) != 0)
        operator delete(*(void **)&__p[16]);
LABEL_440:
      if (!v428 && (_BYTE)v427)
      {
        if (v426)
        {
          if (SHIBYTE(v425) < 0)
            operator delete(*(void **)&v424[40]);
          if ((v424[31] & 0x80000000) != 0)
            operator delete(*(void **)&v424[8]);
        }
        if (v424[0] && SHIBYTE(v423) < 0)
          operator delete((void *)v422);
      }
      if (!v405)
      {
        sub_20B5287D4((uint64_t)v395, (std::string *)&v351);
        sub_20B1F7E44((uint64_t)&v421, (uint64_t)&v364, v420, (std::string *)&v351);
        if (SBYTE7(v422) < 0)
        {
          sub_20AEC60F4(&v432, (void *)v421, *((unint64_t *)&v421 + 1));
        }
        else
        {
          v432 = v421;
          *(_QWORD *)&v433[0] = v422;
        }
        BYTE8(v433[0]) = 1;
        LOBYTE(v433[1]) = 0;
        BYTE8(v433[4]) = 0;
        LOBYTE(v433[5]) = 1;
        sub_20B0C5BC0(4u, &v432, (uint64_t)__p);
        *(_OWORD *)v376 = *(_OWORD *)__p;
        v376[16] = 0;
        v385 = 0;
        if ((_BYTE)v441)
        {
          v378 = 0;
          if (v435[0])
          {
            *(_OWORD *)&v376[16] = *(_OWORD *)&__p[16];
            v377 = *(_QWORD *)&__p[32];
            memset(&__p[16], 0, 24);
            v378 = 1;
          }
          LOBYTE(v379) = 0;
          v384 = 0;
          if (v440)
          {
            v380 = v436;
            v379 = *(_OWORD *)&v435[8];
            *(_QWORD *)&v435[8] = 0;
            *(_QWORD *)&v435[16] = 0;
            v382 = v438;
            v381 = v437;
            v383 = v439;
            v436 = 0;
            v438 = 0uLL;
            v439 = 0;
            v384 = 1;
          }
          v385 = 1;
          v386 = 0;
          if (v435[0] && (__p[39] & 0x80000000) != 0)
            operator delete(*(void **)&__p[16]);
        }
        else
        {
          v386 = 0;
        }
        if (LOBYTE(v433[5]))
        {
          if (BYTE8(v433[4]))
          {
            if (SBYTE7(v433[4]) < 0)
              operator delete(*(void **)&v433[3]);
            if (SBYTE7(v433[2]) < 0)
              operator delete(*(void **)&v433[1]);
          }
          if (BYTE8(v433[0]) && SBYTE7(v433[0]) < 0)
            operator delete((void *)v432);
        }
        if (SBYTE7(v422) < 0)
        {
          operator delete((void *)v421);
          if ((SBYTE7(v352) & 0x80000000) == 0)
          {
LABEL_504:
            if (v405)
              goto LABEL_530;
LABEL_521:
            if (v404)
            {
              if (v403)
              {
                if (SHIBYTE(v402) < 0)
                  operator delete((void *)v401);
                if (SHIBYTE(v399) < 0)
                  operator delete((void *)v398);
              }
              if (v397 && SHIBYTE(v396) < 0)
                operator delete(*(void **)&v395[16]);
            }
LABEL_530:
            sub_20B516570((uint64_t)__dst);
            v111 = (std::__shared_weak_count *)v419;
            if (v419)
              goto LABEL_598;
            goto LABEL_602;
          }
        }
        else if ((SBYTE7(v352) & 0x80000000) == 0)
        {
          goto LABEL_504;
        }
        operator delete((void *)v351);
        if (v405)
          goto LABEL_530;
        goto LABEL_521;
      }
      *(_QWORD *)__dst = off_24C41EF88;
      if ((v430[24] & 0x80000000) == 0)
      {
        if ((__dst[71] & 0x80000000) == 0)
          goto LABEL_444;
LABEL_458:
        operator delete(*(void **)&__dst[48]);
        if ((__dst[47] & 0x80000000) == 0)
          goto LABEL_597;
        goto LABEL_459;
      }
      operator delete(*(void **)&v430[1]);
      if ((__dst[71] & 0x80000000) != 0)
        goto LABEL_458;
LABEL_444:
      if ((__dst[47] & 0x80000000) == 0)
        goto LABEL_597;
LABEL_459:
      v137 = *(void **)&__dst[24];
LABEL_596:
      operator delete(v137);
LABEL_597:
      v386 = 1;
      v111 = (std::__shared_weak_count *)v419;
      if (!v419)
        goto LABEL_602;
LABEL_598:
      v153 = (unint64_t *)&v111->__shared_owners_;
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
LABEL_602:
      if (!v386)
      {
        DWORD2(v422) = 0;
        sub_20AFAE5CC(&v421, "while loading sequence entry ");
        sub_20B1FB088(v395, (uint64_t)__src);
        *(_QWORD *)&v432 = &v421;
        *((_QWORD *)&v432 + 1) = v395;
        *(_QWORD *)&v433[0] = &v421;
        *((_QWORD *)&v433[0] + 1) = v395;
        *(_QWORD *)&v433[1] = v395;
        if (DWORD2(v422) == -1)
          sub_20AECFAB8();
        pn.__r_.__value_.__r.__words[0] = (std::string::size_type)&v432;
        ((void (*)(std::string *, __int128 *))off_24C4110D8[DWORD2(v422)])(&pn, &v421);
        if ((v395[23] & 0x80000000) != 0)
          operator delete(*(void **)v395);
        if (DWORD2(v422) == -1)
          sub_20AECFAB8();
        *(_QWORD *)&v432 = v395;
        ((void (*)(__int128 *__return_ptr, __int128 *, __int128 *))off_24C410E30[DWORD2(v422)])(&v351, &v432, &v421);
        if (DWORD2(v422) != -1)
          ((void (*)(__int128 *, __int128 *))off_24C410E18[DWORD2(v422)])(&v432, &v421);
        sub_20AFF4064(v376, (void **)&v351, (uint64_t)__p);
        *(_OWORD *)__dst = *(_OWORD *)__p;
        v159 = sub_20AECEBD0(&__dst[16], (__int128 *)&__p[16]);
        *(_OWORD *)v298 = *(_OWORD *)__dst;
        *(_BYTE *)(v298 + 16) = 0;
        *(_BYTE *)(v298 + 112) = 0;
        if (__dst[112])
        {
          *(_BYTE *)(v298 + 40) = 0;
          v160 = __dst[40];
          if (__dst[40])
          {
            *(_OWORD *)(v298 + 16) = *(_OWORD *)v159;
            *(_QWORD *)(v298 + 32) = *((_QWORD *)v159 + 2);
            *((_QWORD *)v159 + 1) = 0;
            *((_QWORD *)v159 + 2) = 0;
            *(_QWORD *)v159 = 0;
            *(_BYTE *)(v298 + 40) = 1;
          }
          *(_BYTE *)(v298 + 48) = 0;
          *(_BYTE *)(v298 + 104) = 0;
          if (__dst[104])
          {
            v161 = *(_QWORD *)&__dst[72];
            *(_QWORD *)(v298 + 64) = *(_QWORD *)&__dst[64];
            *(_OWORD *)(v298 + 48) = *(_OWORD *)&__dst[48];
            *(_QWORD *)&__dst[48] = 0;
            *(_QWORD *)&__dst[56] = 0;
            *(_QWORD *)(v298 + 72) = v161;
            *(_OWORD *)(v298 + 80) = *(_OWORD *)&__dst[80];
            *(_QWORD *)(v298 + 96) = *(_QWORD *)&__dst[96];
            *(_QWORD *)&__dst[64] = 0;
            memset(&__dst[80], 0, 24);
            *(_BYTE *)(v298 + 104) = 1;
          }
          *(_BYTE *)(v298 + 112) = 1;
          *(_BYTE *)(v298 + 120) = 0;
          if (v160 && (__dst[39] & 0x80000000) != 0)
            operator delete(*(void **)&__dst[16]);
        }
        else
        {
          *(_BYTE *)(v298 + 120) = 0;
        }
        v172 = v299;
        if ((_BYTE)v441)
        {
          if (v440)
          {
            if (SHIBYTE(v439) < 0)
              operator delete((void *)v438);
            if (SHIBYTE(v436) < 0)
              operator delete(*(void **)&v435[8]);
          }
          if (v435[0] && (__p[39] & 0x80000000) != 0)
            operator delete(*(void **)&__p[16]);
        }
        if (SBYTE7(v352) < 0)
          operator delete((void *)v351);
        if (!v386 && v385)
        {
          if (v384)
          {
            if (SHIBYTE(v383) < 0)
              operator delete((void *)v382);
            if (SHIBYTE(v380) < 0)
              operator delete((void *)v379);
          }
          if (v378 && SHIBYTE(v377) < 0)
          {
            v174 = *(void **)&v376[16];
            goto LABEL_1150;
          }
        }
LABEL_1144:
        if ((v300 & 0x80000000) == 0)
          goto LABEL_1145;
        goto LABEL_1151;
      }
      v155 = *(_DWORD *)(a1 + 216);
      if (v155)
      {
        v156 = v298;
        if (v155 != 1)
          goto LABEL_1157;
        v157 = *(_QWORD *)(a1 + 200);
        v158 = *(std::__shared_weak_count **)(a1 + 208);
        if (!v158)
          goto LABEL_606;
LABEL_623:
        v162 = (unint64_t *)&v158->__shared_owners_;
        do
          v163 = __ldxr(v162);
        while (__stxr(v163 + 1, v162));
        do
          v164 = __ldaxr(v162);
        while (__stlxr(v164 - 1, v162));
        if (!v164)
        {
          ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
          std::__shared_weak_count::__release_weak(v158);
        }
        if (!v157)
          goto LABEL_607;
        goto LABEL_629;
      }
      v157 = *(_QWORD *)(a1 + 200);
      v158 = *(std::__shared_weak_count **)(a1 + 208);
      v156 = v298;
      if (v158)
        goto LABEL_623;
LABEL_606:
      if (!v157)
      {
LABEL_607:
        *(_QWORD *)v395 = &off_24C411E78;
        *(_OWORD *)&v395[8] = 0uLL;
        goto LABEL_639;
      }
LABEL_629:
      if (*(_DWORD *)(a1 + 216))
LABEL_1157:
        sub_20AECFAB8();
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 200) + 48))(v395);
      v165 = *(_OWORD *)&v395[8];
      if (*(_QWORD *)&v395[16])
      {
        v166 = (unint64_t *)(*(_QWORD *)&v395[16] + 8);
        do
          v167 = __ldxr(v166);
        while (__stxr(v167 + 1, v166));
        do
          v168 = __ldaxr(v166);
        while (__stlxr(v168 - 1, v166));
        if (!v168)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v165 + 1) + 16))(*((_QWORD *)&v165 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v165 + 1));
        }
      }
      if (!(_QWORD)v165)
      {
LABEL_639:
        DWORD2(v433[0]) = 0;
        sub_20AF810D0(&v432, "Failed to load sequence entry ");
        sub_20B1FB088(&v421, (uint64_t)__src);
        *(_QWORD *)__p = &v432;
        *(_QWORD *)&__p[8] = &v421;
        *(_QWORD *)&__p[16] = &v432;
        *(_QWORD *)&__p[24] = &v421;
        *(_QWORD *)&__p[32] = &v421;
        if (DWORD2(v433[0]) == -1)
          sub_20AECFAB8();
        *(_QWORD *)&v351 = __p;
        ((void (*)(__int128 *, __int128 *))off_24C4110D8[DWORD2(v433[0])])(&v351, &v432);
        if (SBYTE7(v422) < 0)
          operator delete((void *)v421);
        if (DWORD2(v433[0]) == -1)
          sub_20AECFAB8();
        *(_QWORD *)__p = &v421;
        ((void (*)(_BYTE *__return_ptr, _BYTE *, __int128 *))off_24C410E30[DWORD2(v433[0])])(v376, __p, &v432);
        if (DWORD2(v433[0]) != -1)
          ((void (*)(_BYTE *, __int128 *))off_24C410E18[DWORD2(v433[0])])(__p, &v432);
        if ((v376[23] & 0x80000000) != 0)
        {
          sub_20AEC60F4(v309, *(void **)v376, *(unint64_t *)&v376[8]);
        }
        else
        {
          *(_OWORD *)v309 = *(_OWORD *)v376;
          v310 = *(_QWORD *)&v376[16];
        }
        v311 = 1;
        LOBYTE(v312) = 0;
        v316 = 0;
        v317 = 1;
        sub_20B0C5BC0(0xBu, (__int128 *)v309, (uint64_t)__dst);
        *(_OWORD *)v156 = *(_OWORD *)__dst;
        *(_BYTE *)(v156 + 16) = 0;
        *(_BYTE *)(v156 + 112) = 0;
        if (__dst[112])
        {
          *(_BYTE *)(v156 + 40) = 0;
          v170 = __dst[40];
          if (__dst[40])
          {
            *(_OWORD *)(v156 + 16) = *(_OWORD *)&__dst[16];
            *(_QWORD *)(v156 + 32) = *(_QWORD *)&__dst[32];
            memset(&__dst[16], 0, 24);
            *(_BYTE *)(v156 + 40) = 1;
          }
          *(_BYTE *)(v156 + 48) = 0;
          *(_BYTE *)(v156 + 104) = 0;
          if (__dst[104])
          {
            v171 = *(_QWORD *)&__dst[72];
            *(_QWORD *)(v156 + 64) = *(_QWORD *)&__dst[64];
            *(_OWORD *)(v156 + 48) = *(_OWORD *)&__dst[48];
            *(_QWORD *)&__dst[48] = 0;
            *(_QWORD *)&__dst[56] = 0;
            *(_QWORD *)(v156 + 72) = v171;
            *(_OWORD *)(v156 + 80) = *(_OWORD *)&__dst[80];
            *(_QWORD *)(v156 + 96) = *(_QWORD *)&__dst[96];
            *(_QWORD *)&__dst[64] = 0;
            memset(&__dst[80], 0, 24);
            *(_BYTE *)(v156 + 104) = 1;
          }
          *(_BYTE *)(v156 + 112) = 1;
          *(_BYTE *)(v156 + 120) = 0;
          if (v170 && (__dst[39] & 0x80000000) != 0)
            operator delete(*(void **)&__dst[16]);
        }
        else
        {
          *(_BYTE *)(v156 + 120) = 0;
        }
        v172 = v299;
        if (v317)
        {
          if (v316)
          {
            if (v315 < 0)
              operator delete(v314);
            if (v313 < 0)
              operator delete(v312);
          }
          if (v311 && SHIBYTE(v310) < 0)
            operator delete(v309[0]);
        }
        if ((v376[23] & 0x80000000) != 0)
        {
          v173 = *(void **)v376;
          goto LABEL_745;
        }
        goto LABEL_746;
      }
      if (*((char *)v301 + 23) < 0)
      {
        sub_20AEC60F4(v307, *(void **)v301, *((_QWORD *)v301 + 1));
      }
      else
      {
        v169 = *v301;
        v308 = *((_QWORD *)v301 + 2);
        *(_OWORD *)v307 = v169;
      }
      LOBYTE(v304[0]) = 0;
      v306 = 0;
      if (*((_BYTE *)v297 + 24))
      {
        if (*((char *)v297 + 23) < 0)
        {
          sub_20AEC60F4(v304, *(void **)v297, *((_QWORD *)v297 + 1));
        }
        else
        {
          v175 = *v297;
          v305 = *((_QWORD *)v297 + 2);
          *(_OWORD *)v304 = v175;
        }
        v306 = 1;
        *(_OWORD *)__dst = *(_OWORD *)v307;
        v176 = v308;
        v307[0] = 0;
        v307[1] = 0;
        v308 = 0;
        *(_OWORD *)&__dst[24] = *(_OWORD *)v304;
        *(_QWORD *)&__dst[16] = v176;
        *(_QWORD *)&__dst[40] = v305;
        v304[0] = 0;
        v304[1] = 0;
        v305 = 0;
        __dst[48] = 1;
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)v307;
        *(_QWORD *)&__dst[16] = v308;
        v307[1] = 0;
        v308 = 0;
        v307[0] = 0;
        __dst[24] = 0;
        __dst[48] = 0;
      }
      v177 = __dst;
      if (__dst[23] >= 0)
      {
        v178 = __dst[23];
      }
      else
      {
        v177 = *(_BYTE **)__dst;
        v178 = *(_QWORD *)&__dst[8];
      }
      if (!v178)
        goto LABEL_722;
      v179 = v177;
      if (v178 < 8)
        goto LABEL_752;
      v179 = &v177[v178 & 0xFFFFFFFFFFFFFFF8];
      v180 = v177 + 3;
      v181 = v178 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v182 = vceq_s8(*(int8x8_t *)(v180 - 3), (int8x8_t)0x3A3A3A3A3A3A3A3ALL);
        if ((v182.i8[0] & 1) != 0)
        {
          *(v180 - 3) = 95;
          if ((v182.i8[1] & 1) == 0)
            goto LABEL_706;
        }
        else if ((v182.i8[1] & 1) == 0)
        {
LABEL_706:
          if ((v182.i8[2] & 1) != 0)
            goto LABEL_707;
          goto LABEL_715;
        }
        *(v180 - 2) = 95;
        if ((v182.i8[2] & 1) != 0)
        {
LABEL_707:
          *(v180 - 1) = 95;
          if ((v182.i8[3] & 1) == 0)
            goto LABEL_708;
          goto LABEL_716;
        }
LABEL_715:
        if ((v182.i8[3] & 1) == 0)
        {
LABEL_708:
          if ((v182.i8[4] & 1) != 0)
            goto LABEL_709;
          goto LABEL_717;
        }
LABEL_716:
        *v180 = 95;
        if ((v182.i8[4] & 1) != 0)
        {
LABEL_709:
          v180[1] = 95;
          if ((v182.i8[5] & 1) == 0)
            goto LABEL_710;
          goto LABEL_718;
        }
LABEL_717:
        if ((v182.i8[5] & 1) == 0)
        {
LABEL_710:
          if ((v182.i8[6] & 1) == 0)
            goto LABEL_719;
          goto LABEL_711;
        }
LABEL_718:
        v180[2] = 95;
        if ((v182.i8[6] & 1) == 0)
        {
LABEL_719:
          if ((v182.i8[7] & 1) == 0)
            goto LABEL_703;
          goto LABEL_720;
        }
LABEL_711:
        v180[3] = 95;
        if ((v182.i8[7] & 1) == 0)
          goto LABEL_703;
LABEL_720:
        v180[4] = 95;
LABEL_703:
        v180 += 8;
        v181 -= 8;
      }
      while (v181);
      if (v178 == (v178 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_722;
LABEL_752:
      v196 = &v177[v178];
      do
      {
        if (*v179 == 58)
          *v179 = 95;
        ++v179;
      }
      while (v179 != v196);
LABEL_722:
      v183 = *(_OWORD *)&v395[8];
      *(_OWORD *)&v395[8] = 0uLL;
      v184 = (char *)operator new(0x50uLL);
      v185 = (std::__shared_weak_count *)v184;
      *((_QWORD *)v184 + 1) = 0;
      v186 = (unint64_t *)(v184 + 8);
      *((_QWORD *)v184 + 2) = 0;
      *(_QWORD *)v184 = &off_24C3F3C88;
      v187 = v184 + 24;
      *(_OWORD *)(v184 + 24) = *(_OWORD *)__dst;
      *((_QWORD *)v184 + 5) = *(_QWORD *)&__dst[16];
      memset(__dst, 0, 24);
      v184[48] = 0;
      v184[72] = 0;
      if (__dst[48])
      {
        *((_OWORD *)v184 + 3) = *(_OWORD *)&__dst[24];
        *((_QWORD *)v184 + 8) = *(_QWORD *)&__dst[40];
        memset(&__dst[24], 0, 24);
        v184[72] = 1;
      }
      v172 = v299;
      do
        v188 = __ldxr(v186);
      while (__stxr(v188 + 1, v186));
      if (*((_QWORD *)&v183 + 1))
      {
        v189 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
        do
          v190 = __ldxr(v189);
        while (__stxr(v190 + 1, v189));
        do
          v191 = __ldaxr(v189);
        while (__stlxr(v191 - 1, v189));
        if (!v191)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v183 + 1) + 16))(*((_QWORD *)&v183 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v183 + 1));
        }
      }
      do
        v192 = __ldaxr(v186);
      while (__stlxr(v192 - 1, v186));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
      }
      *(_QWORD *)v156 = v187;
      *(_QWORD *)(v156 + 8) = v185;
      *(_QWORD *)(v156 + 16) = &off_24C411E78;
      *(_OWORD *)(v156 + 24) = v183;
      *(_BYTE *)(v156 + 120) = 1;
      if (__dst[48] && (__dst[47] & 0x80000000) != 0)
        operator delete(*(void **)&__dst[24]);
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      if (v306 && SHIBYTE(v305) < 0)
        operator delete(v304[0]);
      if (SHIBYTE(v308) < 0)
      {
        v173 = v307[0];
LABEL_745:
        operator delete(v173);
      }
LABEL_746:
      v193 = *(std::__shared_weak_count **)&v395[16];
      if (!*(_QWORD *)&v395[16])
        goto LABEL_1144;
      v194 = (unint64_t *)(*(_QWORD *)&v395[16] + 8);
      do
        v195 = __ldaxr(v194);
      while (__stlxr(v195 - 1, v194));
      if (v195)
        goto LABEL_1144;
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
      if (v300 < 0)
        goto LABEL_1151;
LABEL_1145:
      if ((SHIBYTE(v364.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_1146;
LABEL_1152:
      operator delete(v364.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(v374) < 0)
LABEL_1147:
        operator delete((void *)__s1);
      return;
    case 3:
      sub_20B1F91AC((std::string *)&v421, *(_QWORD **)((char *)v47 + *(_QWORD *)(*v47 - 24) + 40), 0);
      sub_20B4F8A14((uint64_t *)&v421, (uint64_t *)v395);
      sub_20B4541AC((uint64_t)__p, *(unsigned __int8 **)v395);
      *(_QWORD *)&__dst[8] = 0x300000001;
      *(_QWORD *)__dst = &unk_24C41E890;
      v68 = operator new();
      *(_BYTE *)v68 = __p[0];
      *(_QWORD *)(v68 + 8) = *(_QWORD *)&__p[8];
      __p[0] = 0;
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)&__dst[16] = v68;
      *(_QWORD *)&__dst[24] = sub_20B50F13C;
      *(_QWORD *)&__dst[32] = v68;
      __dst[104] = 0;
      *(_QWORD *)&__dst[112] = 0;
      memset(&__dst[40], 0, 49);
      sub_20B4181DC((void ***)&__p[8], 0);
      *(_QWORD *)__dst = &off_24C411450;
      sub_20B50AC94((uint64_t)__dst);
      *(_QWORD *)&__dst[88] = "version";
      *(_QWORD *)&__dst[96] = 7;
      if (!__dst[104])
        __dst[104] = 1;
      v69 = (char *)sub_20B50AF4C((uint64_t *)__dst);
      ++*(_QWORD *)&__dst[112];
      *(_QWORD *)__p = 0;
      sub_20B4552C4(v69, __p);
      if (HIDWORD(*(_QWORD *)__p))
        goto LABEL_1170;
      if (*(_DWORD *)__p >= 2u)
        v70 = 2;
      else
        v70 = *(_DWORD *)__p;
      if (v70 < 2)
      {
        memset(v435, 0, 20);
        memset(&__p[8], 0, 32);
        sub_20AF43774(&v436, a1 + 224);
        *(_QWORD *)&__dst[88] = "data_id";
        *(_QWORD *)&__dst[96] = 7;
        if (!__dst[104])
          __dst[104] = 1;
        sub_20B1FAD50((uint64_t)__dst, (uint64_t)&__p[8]);
        sub_20B0C1158((uint64_t)__p);
        if (*(_DWORD *)&v435[16])
          sub_20AECFAB8();
        v127 = *(_QWORD *)v435;
        *(_QWORD *)&__dst[88] = "data";
        *(_QWORD *)&__dst[96] = 4;
        if (!__dst[104])
          __dst[104] = 1;
        sub_20B50AC94((uint64_t)__dst);
        *(_QWORD *)&__dst[88] = "version";
        *(_QWORD *)&__dst[96] = 7;
        if (!__dst[104])
          __dst[104] = 1;
        v128 = (char *)sub_20B50AF4C((uint64_t *)__dst);
        ++*(_QWORD *)&__dst[112];
        *(_QWORD *)&v432 = 0;
        v129 = sub_20B4552C4(v128, &v432);
        if (DWORD1(v432))
        {
          v295 = __cxa_allocate_exception(8uLL);
          *v295 = &off_24C41FEF0;
          __cxa_throw(v295, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
        }
        (*(void (**)(uint64_t, _BYTE *, double))(*(_QWORD *)v127 + 40))(v127, __dst, v129);
        *(_QWORD *)&__dst[32] = *(_QWORD *)(*(_QWORD *)&__dst[48] - 8);
        *(_QWORD *)&__dst[112] = *(_QWORD *)(*(_QWORD *)&__dst[72] - 8);
        *(_QWORD *)&__dst[48] -= 8;
        *(_QWORD *)&__dst[72] -= 8;
        sub_20B0C53C0((uint64_t)&v432, (uint64_t)__p);
        sub_20B0C5528(a1 + 160, (uint64_t)&v432);
        v130 = *(_QWORD *)&v433[3];
        if (*(_QWORD *)&v433[3])
        {
          v131 = *((_QWORD *)&v433[3] + 1);
          v132 = *(void **)&v433[3];
          if (*((_QWORD *)&v433[3] + 1) != *(_QWORD *)&v433[3])
          {
            do
            {
              v133 = *(std::__shared_weak_count **)(v131 - 8);
              if (v133)
              {
                v134 = (unint64_t *)&v133->__shared_owners_;
                do
                  v135 = __ldaxr(v134);
                while (__stlxr(v135 - 1, v134));
                if (!v135)
                {
                  ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                  std::__shared_weak_count::__release_weak(v133);
                }
              }
              v131 -= 16;
            }
            while (v131 != v130);
            v132 = *(void **)&v433[3];
          }
          *((_QWORD *)&v433[3] + 1) = v130;
          operator delete(v132);
        }
        if (DWORD2(v433[2]) != -1)
          ((void (*)(__int128 *, char *))off_24C4110C8[DWORD2(v433[2])])(&v351, (char *)&v433[1] + 8);
        DWORD2(v433[2]) = -1;
        if (SHIBYTE(v433[0]) < 0)
          operator delete(*((void **)&v432 + 1));
        v145 = (char *)v436;
        if (v436)
        {
          v146 = v437;
          v147 = v436;
          if (v437 != v436)
          {
            do
            {
              v148 = (std::__shared_weak_count *)*((_QWORD *)v146 - 1);
              if (v148)
              {
                v149 = (unint64_t *)&v148->__shared_owners_;
                do
                  v150 = __ldaxr(v149);
                while (__stlxr(v150 - 1, v149));
                if (!v150)
                {
                  ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                  std::__shared_weak_count::__release_weak(v148);
                }
              }
              v146 -= 16;
            }
            while (v146 != v145);
            v147 = v436;
          }
          v437 = v145;
          operator delete(v147);
        }
        if (*(_DWORD *)&v435[16] != -1)
          ((void (*)(__int128 *, _BYTE *))off_24C4110C8[*(unsigned int *)&v435[16]])(&v432, v435);
        *(_DWORD *)&v435[16] = -1;
        if ((__p[31] & 0x80000000) != 0)
          operator delete(*(void **)&__p[8]);
        v74 = *(_QWORD *)&__dst[48];
        v75 = *(_QWORD *)&__dst[72];
      }
      else
      {
        *(_QWORD *)&__dst[88] = "data_id";
        *(_QWORD *)&__dst[96] = 7;
        if (!__dst[104])
          __dst[104] = 1;
        sub_20B1FAD50((uint64_t)__dst, a1 + 168);
        sub_20B0C16D8(a1 + 160);
        if (*(_DWORD *)(a1 + 216))
          sub_20AECFAB8();
        v71 = *(_QWORD *)(a1 + 200);
        *(_QWORD *)&__dst[88] = "data";
        *(_QWORD *)&__dst[96] = 4;
        if (!__dst[104])
          __dst[104] = 1;
        sub_20B50AC94((uint64_t)__dst);
        *(_QWORD *)&__dst[88] = "version";
        *(_QWORD *)&__dst[96] = 7;
        if (!__dst[104])
          __dst[104] = 1;
        v72 = (char *)sub_20B50AF4C((uint64_t *)__dst);
        ++*(_QWORD *)&__dst[112];
        *(_QWORD *)__p = 0;
        v73 = sub_20B4552C4(v72, __p);
        if (HIDWORD(*(_QWORD *)__p))
        {
LABEL_1170:
          v293 = __cxa_allocate_exception(8uLL);
          *v293 = &off_24C41FEF0;
          __cxa_throw(v293, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
        }
        (*(void (**)(uint64_t, _BYTE *, double))(*(_QWORD *)v71 + 40))(v71, __dst, v73);
        v74 = *(_QWORD *)&__dst[48] - 8;
        *(_QWORD *)&__dst[32] = *(_QWORD *)(*(_QWORD *)&__dst[48] - 8);
        v75 = *(_QWORD *)&__dst[72] - 8;
        *(_QWORD *)&__dst[112] = *(_QWORD *)(*(_QWORD *)&__dst[72] - 8);
        *(_QWORD *)&__dst[48] -= 8;
        *(_QWORD *)&__dst[72] -= 8;
      }
      *(_QWORD *)&__dst[32] = *(_QWORD *)(v74 - 8);
      *(_QWORD *)&__dst[112] = *(_QWORD *)(v75 - 8);
      *(_QWORD *)&__dst[72] = v75 - 8;
      *(_QWORD *)&__dst[48] = v74 - 8;
      *(_QWORD *)__dst = &unk_24C41E890;
      if (*(_QWORD *)&__dst[64])
      {
        *(_QWORD *)&__dst[72] = *(_QWORD *)&__dst[64];
        operator delete(*(void **)&__dst[64]);
      }
      if (*(_QWORD *)&__dst[40])
      {
        *(_QWORD *)&__dst[48] = *(_QWORD *)&__dst[40];
        operator delete(*(void **)&__dst[40]);
      }
      v151 = *(void ****)&__dst[16];
      *(_QWORD *)&__dst[16] = 0;
      if (v151)
        (*(void (**)(void ***))&__dst[24])(v151);
      v152 = *(void ****)v395;
      *(_QWORD *)v395 = 0;
      if (v152)
      {
        sub_20B4181DC(v152 + 1, *(unsigned __int8 *)v152);
        MEMORY[0x20BD3583C](v152, 0x1022C40B06DCE69);
      }
      if ((SBYTE7(v422) & 0x80000000) == 0)
        goto LABEL_597;
      v137 = (void *)v421;
      goto LABEL_596;
    default:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/FileIO.cpp", 680, (uint64_t)"", 0, (uint64_t)"Format cannot be loaded", 23, (void (*)(void **))sub_20B532360);
      abort();
  }
}

void sub_20B1F0B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, int a13, int a14, uint64_t a15, void *__p)
{
  int v16;

  __cxa_guard_abort(&qword_25463CF48);
  sub_20B216B00((uint64_t)&STACK[0x500]);
  if (v16 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x637]) < 0)
    operator delete((void *)STACK[0x620]);
  sub_20AECD704((uint64_t)&STACK[0x300]);
  sub_20B1F1888((uint64_t)&STACK[0x830]);
  if (a14 < 0)
  {
    operator delete(a12);
    if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x417]) < 0)
      goto LABEL_8;
    goto LABEL_11;
  }
  operator delete((void *)STACK[0x390]);
  if (SLOBYTE(STACK[0x417]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x400]);
    _Unwind_Resume(a1);
  }
LABEL_11:
  _Unwind_Resume(a1);
}

__n128 sub_20B1F16DC@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(a1);
  v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_20B1F1738(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = result;
  v3 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *(std::__shared_weak_count **)(result + 16);
  *(_OWORD *)(result + 8) = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      return v2;
    }
  }
  return result;
}

uint64_t sub_20B1F17AC(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 384))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C3F6160;
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22A8, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

uint64_t sub_20B1F17EC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 384))
  {
    sub_20B088C38((uint64_t *)a1);
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_8;
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_12:
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_12;
LABEL_8:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_9:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_20B1F1888(uint64_t a1)
{
  sub_20B0CD92C(a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void **sub_20B1F18D0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_17:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 4);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 4);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 40;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_17;
      }
    }
  }
  return a1;
}

void sub_20B1F19AC(void *__p@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  char *v3;
  char *v4;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  int v29;
  unsigned int v30;
  __int128 *v31;
  int v32;
  int v33;
  int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *exception;
  std::string *v48;
  __int128 v49;
  void *v50;
  __int128 v51;
  char v52;
  uint64_t v53;
  __int128 v54;
  char *v55;
  std::string *v56;
  __int128 v57;
  char v58;
  char v59;
  char v60;
  unsigned __int8 v61;
  __int128 v62;
  std::string v63;
  char v64;
  __int128 v65;
  void *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  char v70;
  char v71;
  unsigned __int8 v72;
  void *v73[2];
  char *v74;
  __int128 __dst;
  std::string v76;
  char v77;
  __int128 v78;
  void *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  char v83;
  char v84;
  std::string __pa;
  char v86;
  __int128 v87;
  void *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  char v92;
  char v93;
  _QWORD v94[2];
  _QWORD v95[2];
  __int128 v96;
  char v97;
  char v98;
  void *v99;
  char v100;
  void *v101;
  char v102;
  char v103;
  char v104;
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  v7 = 0x666666666666666;
  v73[0] = 0;
  v73[1] = 0;
  v8 = &v62;
  v74 = 0;
  v9 = &v51;
  v61 = 12;
  LOBYTE(v62) = 0;
  v72 = 0;
  v48 = &v63;
  while (1)
  {
    v11 = *(_QWORD *)(a2 + 288);
    v12 = *(_QWORD *)(a2 + 280);
    if (v12 >= 0x86BCA1AF286BCA1BLL * ((*(_QWORD *)(a2 + 296) - v11) >> 3) && !*(_QWORD *)(a2 + 256))
      break;
    if (*(_QWORD *)(v11 + 152 * v12) > (uint64_t)__p)
      break;
    sub_20B1EBD4C(a2, (uint64_t)&v49);
    if (v60)
    {
      v3 = (char *)v73[1];
      if (v73[1] < v74)
      {
        *(_OWORD *)v73[1] = v49;
        v49 = 0uLL;
        *((_QWORD *)v3 + 2) = &off_24C411E78;
        *(_OWORD *)(v3 + 24) = v51;
        v51 = 0uLL;
        v10 = v3 + 40;
        goto LABEL_3;
      }
      v4 = (char *)v73[0];
      v13 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v73[1] - (char *)v73[0]) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 > 0x666666666666666)
        sub_20AEC60B8();
      if (0x999999999999999ALL * ((v74 - (char *)v73[0]) >> 3) > v14)
        v14 = 0x999999999999999ALL * ((v74 - (char *)v73[0]) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((v74 - (char *)v73[0]) >> 3) >= 0x333333333333333)
        v15 = 0x666666666666666;
      else
        v15 = v14;
      if (v15 > 0x666666666666666)
        sub_20AEC60CC();
      v16 = (char *)operator new(40 * v15);
      v17 = &v16[40 * v13];
      *(_OWORD *)v17 = v49;
      v49 = 0uLL;
      *((_QWORD *)v17 + 2) = &off_24C411E78;
      *(_OWORD *)(v17 + 24) = v51;
      v51 = 0uLL;
      v10 = v17 + 40;
      if (v3 == v4)
      {
        v73[0] = v17;
        v74 = &v16[40 * v15];
        v7 = 0x666666666666666;
        if (!v3)
          goto LABEL_3;
        goto LABEL_62;
      }
      v18 = v3;
      do
      {
        v19 = *(_OWORD *)(v18 - 40);
        v18 -= 40;
        *(_OWORD *)(v17 - 40) = v19;
        v17 -= 40;
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v18 + 1) = 0;
        *((_QWORD *)v17 + 2) = &off_24C411E78;
        *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
        *((_QWORD *)v18 + 3) = 0;
        *((_QWORD *)v18 + 4) = 0;
      }
      while (v18 != v4);
      v73[0] = v17;
      v73[1] = v10;
      v74 = &v16[40 * v15];
      while (2)
      {
        v20 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (!v20)
          goto LABEL_26;
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
          v23 = (std::__shared_weak_count *)*((_QWORD *)v3 - 4);
          if (v23)
            goto LABEL_27;
        }
        else
        {
LABEL_26:
          v23 = (std::__shared_weak_count *)*((_QWORD *)v3 - 4);
          if (v23)
          {
LABEL_27:
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
        }
        v3 -= 40;
        if (v3 == v4)
        {
          v3 = v4;
          v7 = 0x666666666666666;
          if (!v4)
          {
LABEL_3:
            v73[1] = v10;
            goto LABEL_4;
          }
LABEL_62:
          operator delete(v3);
          goto LABEL_3;
        }
        continue;
      }
    }
    if (*(_BYTE *)(a2 + 128))
    {
      v26 = *(_QWORD *)(a2 + 120);
      if (!v26)
        sub_20AECABA4();
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v26 + 48))(v26, &v49);
      v7 = 0x666666666666666;
      if (v60)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C3F6160;
        __cxa_throw(exception, (struct type_info *)&unk_24C3F22A8, (void (*)(void *))std::exception::~exception);
      }
    }
    if (!v72)
    {
      v27 = v61;
      LOBYTE(v96) = 0;
      v104 = 0;
      v28 = atomic_load((unsigned __int8 *)&qword_25463CF50);
      if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF50))
      {
        __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253EC3190, &dword_20AEBB000);
        __cxa_guard_release(&qword_25463CF50);
      }
      sub_20AECEBD0(&__pa, &v96);
      *(_QWORD *)&__dst = v27;
      *((_QWORD *)&__dst + 1) = &off_253EC3190;
      v76.__r_.__value_.__s.__data_[0] = 0;
      v84 = 0;
      if (v93)
      {
        v77 = 0;
        if (v86)
        {
          v76 = __pa;
          memset(&__pa, 0, sizeof(__pa));
          v77 = 1;
        }
        LOBYTE(v78) = 0;
        v83 = 0;
        if (v92)
        {
          v78 = v87;
          v79 = v88;
          v88 = 0;
          v87 = 0uLL;
          v80 = v89;
          v81 = v90;
          v82 = v91;
          v90 = 0uLL;
          v91 = 0;
          v83 = 1;
        }
        v84 = 1;
        if (v86 && SHIBYTE(__pa.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__pa.__r_.__value_.__l.__data_);
      }
      v62 = __dst;
      if (!v72)
      {
        v63.__r_.__value_.__s.__data_[0] = 0;
        v71 = 0;
        if (v84)
        {
          v64 = 0;
          if (v77)
          {
            v63 = v76;
            memset(&v76, 0, sizeof(v76));
            v64 = 1;
          }
          LOBYTE(v65) = 0;
          v70 = 0;
          if (v83)
          {
            v65 = v78;
            v66 = v79;
            v79 = 0;
            v78 = 0uLL;
            v67 = v80;
            v68 = v81;
            v69 = v82;
            v81 = 0uLL;
            v82 = 0;
            v70 = 1;
          }
          v71 = 1;
        }
        v72 = 1;
        if (v84)
          goto LABEL_85;
        goto LABEL_91;
      }
      sub_20AECE874((uint64_t)&v63, (__int128 *)&v76);
      if (!v84)
        goto LABEL_91;
LABEL_85:
      if (v83)
      {
        if (SHIBYTE(v82) < 0)
        {
          operator delete((void *)v81);
          if ((SHIBYTE(v79) & 0x80000000) == 0)
            goto LABEL_88;
        }
        else if ((SHIBYTE(v79) & 0x80000000) == 0)
        {
          goto LABEL_88;
        }
        operator delete((void *)v78);
        if (!v77)
        {
LABEL_91:
          if (!v104)
            goto LABEL_37;
          if (v103)
          {
            if (v102 < 0)
            {
              operator delete(v101);
              if ((v100 & 0x80000000) == 0)
                goto LABEL_95;
            }
            else if ((v100 & 0x80000000) == 0)
            {
              goto LABEL_95;
            }
            operator delete(v99);
            if (!v98)
              goto LABEL_37;
          }
          else
          {
LABEL_95:
            if (!v98)
              goto LABEL_37;
          }
          if (v97 < 0)
            operator delete((void *)v96);
          goto LABEL_37;
        }
      }
      else
      {
LABEL_88:
        if (!v77)
          goto LABEL_91;
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      goto LABEL_91;
    }
LABEL_37:
    if (*((_QWORD *)&v49 + 1) != *((_QWORD *)&v62 + 1) || (_DWORD)v49 != (_DWORD)v62)
    {
      sub_20B5287D4((uint64_t)&v49, &__pa);
      sub_20B529470((char *)&v62, (void **)&__pa.__r_.__value_.__l.__data_, (uint64_t)&__dst);
      v62 = __dst;
      if (v72)
      {
        sub_20AECE874((uint64_t)&v63, (__int128 *)&v76);
        v7 = 0x666666666666666;
        if (!v84)
          goto LABEL_76;
      }
      else
      {
        v63.__r_.__value_.__s.__data_[0] = 0;
        v71 = 0;
        v7 = 0x666666666666666;
        if (v84)
        {
          v64 = 0;
          if (v77)
          {
            v63 = v76;
            memset(&v76, 0, sizeof(v76));
            v64 = 1;
          }
          LOBYTE(v65) = 0;
          v70 = 0;
          if (v83)
          {
            v65 = v78;
            v66 = v79;
            v79 = 0;
            v78 = 0uLL;
            v67 = v80;
            v68 = v81;
            v69 = v82;
            v81 = 0uLL;
            v82 = 0;
            v70 = 1;
          }
          v71 = 1;
        }
        v72 = 1;
        if (!v84)
          goto LABEL_76;
      }
      if (v83)
      {
        if (SHIBYTE(v82) < 0)
        {
          operator delete((void *)v81);
          if ((SHIBYTE(v79) & 0x80000000) == 0)
            goto LABEL_73;
        }
        else if ((SHIBYTE(v79) & 0x80000000) == 0)
        {
          goto LABEL_73;
        }
        operator delete((void *)v78);
        if (!v77)
        {
LABEL_76:
          if (SHIBYTE(__pa.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__pa.__r_.__value_.__l.__data_);
          goto LABEL_4;
        }
      }
      else
      {
LABEL_73:
        if (!v77)
          goto LABEL_76;
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      goto LABEL_76;
    }
    if (!v59 || !v52)
      goto LABEL_4;
    sub_20B529470((char *)&v62, &v50, (uint64_t)&__dst);
    v62 = __dst;
    if (v72)
    {
      sub_20AECE874((uint64_t)&v63, (__int128 *)&v76);
      v7 = 0x666666666666666;
      if (!v84)
        goto LABEL_4;
LABEL_114:
      if (v83)
      {
        if (SHIBYTE(v82) < 0)
        {
          operator delete((void *)v81);
          if ((SHIBYTE(v79) & 0x80000000) == 0)
            goto LABEL_117;
        }
        else if ((SHIBYTE(v79) & 0x80000000) == 0)
        {
          goto LABEL_117;
        }
        operator delete((void *)v78);
        if (!v77)
          goto LABEL_4;
      }
      else
      {
LABEL_117:
        if (!v77)
          goto LABEL_4;
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      goto LABEL_4;
    }
    v63.__r_.__value_.__s.__data_[0] = 0;
    v71 = 0;
    if (v84)
    {
      v64 = 0;
      if (v77)
      {
        v63 = v76;
        memset(&v76, 0, sizeof(v76));
        v64 = 1;
      }
      LOBYTE(v65) = 0;
      v70 = 0;
      if (v83)
      {
        v65 = v78;
        v66 = v79;
        v79 = 0;
        v78 = 0uLL;
        v67 = v80;
        v68 = v81;
        v69 = v82;
        v81 = 0uLL;
        v82 = 0;
        v70 = 1;
      }
      v71 = 1;
    }
    v72 = 1;
    v7 = 0x666666666666666;
    if (v84)
      goto LABEL_114;
LABEL_4:
    sub_20AFF6F08((uint64_t)&v49);
  }
  v29 = v72;
  if (v72)
  {
    v30 = v61;
    if (v71)
      v31 = (__int128 *)&v63;
    else
      v31 = (__int128 *)&unk_20B610E70;
    sub_20AFB2208(&__dst, v31);
    sub_20B0C5BC0(v30, &__dst, (uint64_t)&v49);
    *(_OWORD *)&__pa.__r_.__value_.__l.__data_ = v49;
    if (v59)
    {
      if (v52)
      {
        __p = v50;
        *(_QWORD *)&v96 = v51;
        *(_QWORD *)((char *)&v96 + 7) = *(_QWORD *)((char *)&v51 + 7);
        LOBYTE(v8) = HIBYTE(v51);
        v51 = 0uLL;
        v50 = 0;
        v32 = 1;
        if (v58)
          goto LABEL_132;
LABEL_137:
        v7 = 0;
        v33 = 0;
        v34 = 1;
        if (v52)
          goto LABEL_138;
      }
      else
      {
        __p = 0;
        v32 = 0;
        if (!v58)
          goto LABEL_137;
LABEL_132:
        v7 = v53;
        v95[0] = v54;
        *(_QWORD *)((char *)v95 + 7) = *(_QWORD *)((char *)&v54 + 7);
        LOBYTE(v4) = HIBYTE(v54);
        v53 = 0;
        v54 = 0uLL;
        v3 = v55;
        v48 = v56;
        v94[0] = v57;
        *(_QWORD *)((char *)v94 + 7) = *(_QWORD *)((char *)&v57 + 7);
        LOBYTE(v9) = HIBYTE(v57);
        v56 = 0;
        v57 = 0uLL;
        v33 = 1;
        v34 = 1;
        if (v52)
        {
LABEL_138:
          if (SHIBYTE(v51) < 0)
            operator delete(v50);
        }
      }
    }
    else
    {
      v34 = 0;
      v33 = 0;
      __p = 0;
      v32 = 0;
    }
    if (!(_BYTE)v82)
      goto LABEL_147;
    if (!BYTE8(v81))
      goto LABEL_144;
    if ((SBYTE7(v81) & 0x80000000) == 0)
    {
      if ((SBYTE7(v78) & 0x80000000) == 0)
        goto LABEL_144;
LABEL_187:
      operator delete((void *)v76.__r_.__value_.__r.__words[2]);
      if (!v76.__r_.__value_.__s.__data_[8])
        goto LABEL_147;
LABEL_145:
      if (v76.__r_.__value_.__s.__data_[7] < 0)
        operator delete((void *)__dst);
      goto LABEL_147;
    }
    operator delete(v79);
    if (SBYTE7(v78) < 0)
      goto LABEL_187;
LABEL_144:
    if (v76.__r_.__value_.__s.__data_[8])
      goto LABEL_145;
LABEL_147:
    v35 = 0;
  }
  else
  {
    v34 = 0;
    v33 = 0;
    v32 = 0;
    v35 = 1;
  }
  *(_OWORD *)a3 = *(_OWORD *)v73;
  *(_QWORD *)(a3 + 16) = v74;
  v73[0] = 0;
  v73[1] = 0;
  v74 = 0;
  *(_BYTE *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 144) = v35;
  if (v29)
  {
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&__pa.__r_.__value_.__l.__data_;
    *(_BYTE *)(a3 + 40) = 0;
    *(_BYTE *)(a3 + 136) = 0;
    if (v34)
    {
      *(_BYTE *)(a3 + 64) = 0;
      if (v32)
      {
        v36 = v96;
        *(_QWORD *)(a3 + 40) = __p;
        *(_QWORD *)(a3 + 48) = v36;
        *(_QWORD *)(a3 + 55) = *(_QWORD *)((char *)&v96 + 7);
        *(_BYTE *)(a3 + 63) = (_BYTE)v8;
        *(_QWORD *)&v96 = 0;
        *(_QWORD *)((char *)&v96 + 7) = 0;
        *(_BYTE *)(a3 + 64) = 1;
        __p = 0;
        LOBYTE(v8) = 0;
      }
      *(_BYTE *)(a3 + 72) = 0;
      *(_BYTE *)(a3 + 128) = 0;
      if (v33)
      {
        v37 = v95[0];
        *(_QWORD *)(a3 + 72) = v7;
        *(_QWORD *)(a3 + 80) = v37;
        *(_QWORD *)(a3 + 87) = *(_QWORD *)((char *)v95 + 7);
        *(_BYTE *)(a3 + 95) = (_BYTE)v4;
        v95[0] = 0;
        *(_QWORD *)((char *)v95 + 7) = 0;
        *(_QWORD *)(a3 + 96) = v3;
        *(_QWORD *)(a3 + 104) = v48;
        *(_QWORD *)(a3 + 112) = v94[0];
        *(_QWORD *)(a3 + 119) = *(_QWORD *)((char *)v94 + 7);
        *(_BYTE *)(a3 + 127) = (_BYTE)v9;
        v94[0] = 0;
        *(_QWORD *)((char *)v94 + 7) = 0;
        *(_BYTE *)(a3 + 128) = 1;
      }
      *(_BYTE *)(a3 + 136) = 1;
      if (v32 && (v8 & 0x80) != 0)
        operator delete(__p);
    }
  }
  if (!v72 || !v71)
    goto LABEL_165;
  if (!v70)
    goto LABEL_162;
  if ((SHIBYTE(v69) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v66) & 0x80000000) == 0)
      goto LABEL_162;
LABEL_184:
    operator delete((void *)v65);
    if (!v64)
      goto LABEL_165;
LABEL_163:
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    goto LABEL_165;
  }
  operator delete((void *)v68);
  if (SHIBYTE(v66) < 0)
    goto LABEL_184;
LABEL_162:
  if (v64)
    goto LABEL_163;
LABEL_165:
  v38 = (char *)v73[0];
  if (v73[0])
  {
    v39 = (char *)v73[1];
    if (v73[1] == v73[0])
    {
LABEL_181:
      operator delete(v38);
      return;
    }
    while (2)
    {
      v40 = (std::__shared_weak_count *)*((_QWORD *)v39 - 1);
      if (!v40)
        goto LABEL_173;
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
        v43 = (std::__shared_weak_count *)*((_QWORD *)v39 - 4);
        if (v43)
        {
LABEL_174:
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
      }
      else
      {
LABEL_173:
        v43 = (std::__shared_weak_count *)*((_QWORD *)v39 - 4);
        if (v43)
          goto LABEL_174;
      }
      v39 -= 40;
      if (v39 == v38)
      {
        v38 = (char *)v73[0];
        goto LABEL_181;
      }
      continue;
    }
  }
}

void sub_20B1F2678(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1F2700(uint64_t a1)
{
  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 96));
    if (!*(_BYTE *)(a1 + 88))
      goto LABEL_8;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 119) < 0)
    goto LABEL_6;
LABEL_3:
  if (!*(_BYTE *)(a1 + 88))
  {
LABEL_8:
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_12:
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_13;
  }
LABEL_7:
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    goto LABEL_8;
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_12;
LABEL_9:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_13:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20B1F27AC(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_10:
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_11;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_10;
LABEL_5:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_11:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20B1F284C(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  void **v19;
  uint64_t *v20;
  unsigned __int8 *v21;
  unsigned __int8 *i;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  std::string *v32;
  size_t size;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::string *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  BOOL v59;
  char *v60;
  char *v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::logic_error *v66;
  std::logic_error *v67;
  std::logic_error *v68;
  std::logic_error *v69;
  std::logic_error *v70;
  std::logic_error *v71;
  std::logic_error *v72;
  std::logic_error *v73;
  std::logic_error *exception;
  uint64_t v76;
  char *v77;
  char *v78;
  char v79;
  char *v80;
  char *v81;
  char v82;
  void *v83[2];
  uint64_t v84;
  char v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  std::string v90;
  char v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  void *v94;
  char v95;
  void *__p;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101[24];
  char v102;
  _QWORD v103[3];
  _QWORD *v104;
  char v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v13 = operator new();
  LOBYTE(v83[0]) = 0;
  v85 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    *(_OWORD *)v83 = *(_OWORD *)a2;
    v84 = a2[2];
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    v85 = 1;
  }
  LOBYTE(v77) = 0;
  v79 = 0;
  v14 = *(unsigned __int8 *)(a3 + 24);
  v76 = a1;
  if (*(_BYTE *)(a3 + 24))
  {
    a2 = *(_QWORD **)(a3 + 8);
    v77 = *(char **)a3;
    v78 = (char *)a2;
    v6 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v79 = 1;
    LOBYTE(v80) = 0;
    v82 = 0;
    v15 = *(unsigned __int8 *)(a3 + 56);
    if (*(_BYTE *)(a3 + 56))
      goto LABEL_5;
  }
  else
  {
    LOBYTE(v80) = 0;
    v82 = 0;
    v15 = *(unsigned __int8 *)(a3 + 56);
    if (*(_BYTE *)(a3 + 56))
    {
LABEL_5:
      v7 = *(char **)(a3 + 40);
      v80 = *(char **)(a3 + 32);
      v81 = v7;
      a1 = *(_QWORD *)(a3 + 48);
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      v82 = 1;
      LOBYTE(v103[0]) = 0;
      v105 = 0;
      v16 = *(unsigned __int8 *)(a4 + 32);
      if (!*(_BYTE *)(a4 + 32))
        goto LABEL_15;
      goto LABEL_9;
    }
  }
  LOBYTE(v103[0]) = 0;
  v105 = 0;
  v16 = *(unsigned __int8 *)(a4 + 32);
  if (!*(_BYTE *)(a4 + 32))
    goto LABEL_15;
LABEL_9:
  v17 = *(_QWORD *)(a4 + 24);
  if (v17)
  {
    if (v17 == a4)
    {
      v104 = v103;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a4 + 24))(a4, v103);
    }
    else
    {
      v104 = *(_QWORD **)(a4 + 24);
      *(_QWORD *)(a4 + 24) = 0;
    }
  }
  else
  {
    v104 = 0;
  }
  v105 = 1;
LABEL_15:
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = a5;
  *(_BYTE *)(v13 + 32) = 0;
  *(_BYTE *)(v13 + 56) = 0;
  if (v14)
  {
    *(_QWORD *)(v13 + 32) = v77;
    *(_QWORD *)(v13 + 40) = a2;
    *(_QWORD *)(v13 + 48) = v6;
    v78 = 0;
    v77 = 0;
    *(_BYTE *)(v13 + 56) = 1;
  }
  *(_BYTE *)(v13 + 64) = 0;
  *(_BYTE *)(v13 + 88) = 0;
  if (v15)
  {
    *(_QWORD *)(v13 + 64) = v80;
    *(_QWORD *)(v13 + 72) = v7;
    *(_QWORD *)(v13 + 80) = a1;
    v81 = 0;
    v80 = 0;
    *(_BYTE *)(v13 + 88) = 1;
  }
  *(_BYTE *)(v13 + 96) = 0;
  *(_BYTE *)(v13 + 128) = 0;
  if (v16)
  {
    if (v104)
    {
      if (v104 == v103)
      {
        *(_QWORD *)(v13 + 120) = v13 + 96;
        (*(void (**)(_QWORD *, uint64_t))(v103[0] + 24))(v103, v13 + 96);
      }
      else
      {
        *(_QWORD *)(v13 + 120) = v104;
        v104 = 0;
      }
    }
    else
    {
      *(_QWORD *)(v13 + 120) = 0;
    }
    *(_BYTE *)(v13 + 128) = 1;
  }
  v18 = sub_20B0C19F8(0);
  if (v85)
    v19 = v83;
  else
    v19 = (void **)v18;
  sub_20AF43774((_QWORD *)(v13 + 136), (uint64_t)v19);
  *(_OWORD *)(v13 + 168) = 0u;
  *(_DWORD *)(v13 + 216) = 0;
  *(_OWORD *)(v13 + 184) = 0u;
  *(_OWORD *)(v13 + 200) = 0u;
  sub_20AF43774((_QWORD *)(v13 + 224), v13 + 136);
  *(_QWORD *)(v13 + 248) = &off_24C41B858;
  *(_OWORD *)(v13 + 256) = 0u;
  *(_OWORD *)(v13 + 272) = 0u;
  v20 = (uint64_t *)(v13 + 272);
  *(_OWORD *)(v13 + 288) = 0u;
  *(_QWORD *)(v13 + 320) = 0;
  *(_QWORD *)(v13 + 312) = v13 + 320;
  *(_QWORD *)(v13 + 304) = 0;
  *(_QWORD *)(v13 + 344) = 0;
  *(_QWORD *)(v13 + 352) = 0;
  *(_QWORD *)(v13 + 328) = 0;
  *(_QWORD *)(v13 + 336) = v13 + 344;
  if (v14)
  {
    v21 = *(unsigned __int8 **)(v13 + 32);
    for (i = *(unsigned __int8 **)(v13 + 40); v21 != i; v21 += 768)
    {
      v23 = v21[240];
      *(_QWORD *)v101 = "context_id";
      if (v23)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20B1F5A04((uint64_t)&v90, v101);
        std::logic_error::logic_error(exception, &v90);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
      }
      v24 = v21[272];
      *(_QWORD *)v101 = "value";
      if (v24)
      {
        v73 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20B1F5A04((uint64_t)&v90, v101);
        std::logic_error::logic_error(v73, &v90);
        v73->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v73, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
      }
      v25 = v21[328];
      *(_QWORD *)v101 = "name";
      if (v25)
      {
        v72 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20B1F5A04((uint64_t)&v90, v101);
        std::logic_error::logic_error(v72, &v90);
        v72->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v72, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
      }
      v26 = v21[432];
      *(_QWORD *)v101 = "instance_id";
      if (v26)
      {
        v71 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20B1F5A04((uint64_t)&v90, v101);
        std::logic_error::logic_error(v71, &v90);
        v71->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v71, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
      }
      v27 = v21[592];
      *(_QWORD *)v101 = "reference_id";
      if (v27)
      {
        v70 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20B1F5A04((uint64_t)&v90, v101);
        std::logic_error::logic_error(v70, &v90);
        v70->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v70, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
      }
      v28 = v21[640];
      *(_QWORD *)v101 = "references";
      if (v28)
      {
        v69 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20B1F5A04((uint64_t)&v90, v101);
        std::logic_error::logic_error(v69, &v90);
        v69->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v69, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
      }
      v29 = v21[696];
      *(_QWORD *)v101 = "space";
      if (v29)
      {
        v68 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20B1F5A04((uint64_t)&v90, v101);
        std::logic_error::logic_error(v68, &v90);
        v68->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v68, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
      }
      v30 = v21[728];
      *(_QWORD *)v101 = "custom_timestamp";
      if (v30)
      {
        v67 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20B1F5A04((uint64_t)&v90, v101);
        std::logic_error::logic_error(v67, &v90);
        v67->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v67, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
      }
      v31 = v21[760];
      *(_QWORD *)v101 = "auto_timestamp";
      if (v31)
      {
        v66 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20B1F5A04((uint64_t)&v90, v101);
        std::logic_error::logic_error(v66, &v90);
        v66->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v66, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
      }
    }
  }
  v86 = 0x500000001;
  v87 = 0;
  v88 = 1;
  v89 = 0;
  sub_20B1FEB30(v76, a5, (uint64_t)&v86, (uint64_t)&v90);
  if (!v100)
  {
    sub_20B0B52D8((uint64_t)&v90);
    sub_20B0BFB50((uint64_t)&v90);
  }
  if (*(char *)(v13 + 23) < 0)
  {
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &v90;
    else
      v32 = (std::string *)v90.__r_.__value_.__r.__words[0];
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v90.__r_.__value_.__r.__words[2]);
    else
      size = v90.__r_.__value_.__l.__size_;
    sub_20AEC8090((void **)v13, v32, size);
  }
  else if ((*((_BYTE *)&v90.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    sub_20AEC7FCC((_QWORD *)v13, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  }
  else
  {
    *(std::string *)v13 = v90;
  }
  v35 = v92;
  v34 = v93;
  if (v93)
  {
    p_shared_owners = (unint64_t *)&v93->__shared_owners_;
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
  }
  v38 = *(std::__shared_weak_count **)(v13 + 264);
  *(_QWORD *)(v13 + 256) = v35;
  *(_QWORD *)(v13 + 264) = v34;
  if (!v38)
    goto LABEL_60;
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (v40)
  {
LABEL_60:
    if (v100)
      goto LABEL_61;
LABEL_68:
    if (v99)
    {
      if (v98)
      {
        if (v97 < 0)
          operator delete(__p);
        if (v95 < 0)
          operator delete(v94);
      }
      if ((_BYTE)v93 && SHIBYTE(v92) < 0)
      {
        v44 = (std::string *)&v90.__r_.__value_.__r.__words[2];
        goto LABEL_77;
      }
    }
    goto LABEL_79;
  }
  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
  std::__shared_weak_count::__release_weak(v38);
  if (!v100)
    goto LABEL_68;
LABEL_61:
  v41 = v93;
  if (!v93)
    goto LABEL_65;
  v42 = (unint64_t *)&v93->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (v43)
  {
LABEL_65:
    if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_79;
    goto LABEL_66;
  }
  ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
  std::__shared_weak_count::__release_weak(v41);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_66:
    v44 = &v90;
LABEL_77:
    operator delete(v44->__r_.__value_.__l.__data_);
  }
LABEL_79:
  v45 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 256) + 16))(*(_QWORD *)(v13 + 256));
  v46 = (_QWORD *)operator new();
  v90.__r_.__value_.__s.__data_[0] = 0;
  v91 = 0;
  v101[0] = 0;
  v102 = 0;
  sub_20B1F5BC8(v46, v45, (uint64_t)&v90, (uint64_t)v101);
  v47 = *v20;
  *v20 = (uint64_t)v46;
  if (!v47)
    goto LABEL_84;
  *(_QWORD *)v47 = off_24C41EF88;
  if ((*(char *)(v47 + 159) & 0x80000000) == 0)
  {
    if ((*(char *)(v47 + 71) & 0x80000000) == 0)
      goto LABEL_82;
LABEL_89:
    operator delete(*(void **)(v47 + 48));
    if ((*(char *)(v47 + 47) & 0x80000000) == 0)
      goto LABEL_83;
LABEL_90:
    operator delete(*(void **)(v47 + 24));
    goto LABEL_83;
  }
  operator delete(*(void **)(v47 + 136));
  if (*(char *)(v47 + 71) < 0)
    goto LABEL_89;
LABEL_82:
  if (*(char *)(v47 + 47) < 0)
    goto LABEL_90;
LABEL_83:
  MEMORY[0x20BD3583C](v47, 0x10B3C40F5E21753);
LABEL_84:
  sub_20B1EA4B0((_QWORD *)v13);
  sub_20B1EB268(v13);
  *a6 = v13;
  if (!v105)
    goto LABEL_93;
  v51 = v104;
  if (v104 == v103)
  {
    v52 = 4;
    v51 = v103;
  }
  else
  {
    if (!v104)
      goto LABEL_93;
    v52 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v51 + 8 * v52))(v51, v48, v49, v50);
LABEL_93:
  if (!v82 || !v80)
    goto LABEL_105;
  v53 = v81;
  v54 = v80;
  if (v81 == v80)
    goto LABEL_104;
  do
  {
    v55 = (char *)*((_QWORD *)v53 - 1);
    if (v53 - 32 == v55)
    {
      v55 = v53 - 32;
      v56 = 4;
LABEL_98:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55 + 8 * v56))(v55, v48, v49, v50);
      goto LABEL_99;
    }
    if (v55)
    {
      v56 = 5;
      goto LABEL_98;
    }
LABEL_99:
    *((_QWORD *)v53 - 100) = &off_24C411BF8;
    sub_20B07AE6C((uint64_t)(v53 - 784));
    v53 -= 800;
  }
  while (v53 != v80);
  v54 = v80;
LABEL_104:
  operator delete(v54);
LABEL_105:
  if (v79 && v77)
  {
    v57 = v77;
    if (v78 != v77)
    {
      v58 = v78 - 768;
      do
      {
        (**(void (***)(char *))v58)(v58);
        v59 = v58 == v77;
        v58 -= 768;
      }
      while (!v59);
      v57 = v77;
    }
    operator delete(v57);
  }
  if (v85)
  {
    v60 = (char *)v83[0];
    if (v83[0])
    {
      v61 = (char *)v83[1];
      v62 = v83[0];
      if (v83[1] != v83[0])
      {
        do
        {
          v63 = (std::__shared_weak_count *)*((_QWORD *)v61 - 1);
          if (v63)
          {
            v64 = (unint64_t *)&v63->__shared_owners_;
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          v61 -= 16;
        }
        while (v61 != v60);
        v62 = v83[0];
      }
      v83[1] = v60;
      operator delete(v62);
    }
  }
}

void sub_20B1F3380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B1F35F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  *a1 = &off_24C410CA8;
  a1[1] = 0;
  if (v2)
  {
    v3 = sub_20B1F671C(v2);
    MEMORY[0x20BD3583C](v3, 0x10F2C4013865076);
  }
  return a1;
}

void sub_20B1F363C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  *a1 = &off_24C410CA8;
  a1[1] = 0;
  if (v2)
  {
    v3 = sub_20B1F671C(v2);
    MEMORY[0x20BD3583C](v3, 0x10F2C4013865076);
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B1F3698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void *v23;
  char *v24;
  BOOL v25;
  char *v26;
  char *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t result;
  uint64_t v33;
  void *v34;
  char *v35;
  char v36;
  void *__p;
  char *v38;
  char v39;
  void *v40;
  char *v41;
  char v42;
  uint64_t (**v43)();
  int v44[2];
  _BYTE v45[24];
  _BYTE *v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 24))
    goto LABEL_2;
  v13 = sub_20B0C19F8(0);
  if (!*(_BYTE *)(a2 + 24))
  {
    sub_20AF43774((_QWORD *)a2, (uint64_t)v13);
    *(_BYTE *)(a2 + 24) = 1;
    goto LABEL_2;
  }
  if (v13 == (uint64_t *)a2)
  {
LABEL_2:
    LOBYTE(v40) = 0;
    v42 = 0;
LABEL_3:
    sub_20AF43774(&v40, a2);
    v42 = 1;
    goto LABEL_4;
  }
  sub_20B1F6A88(a2, (_QWORD *)*v13, (_QWORD *)v13[1], (v13[1] - *v13) >> 4);
  v14 = *(unsigned __int8 *)(a2 + 24);
  LOBYTE(v40) = 0;
  v42 = 0;
  if (v14)
    goto LABEL_3;
LABEL_4:
  sub_20AF07468((uint64_t)&v34, a3);
  v45[0] = 0;
  v47 = 0;
  if (*(_BYTE *)(a4 + 32))
  {
    v12 = *(_QWORD *)(a4 + 24);
    if (v12)
    {
      if (v12 == a4)
      {
        v46 = v45;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a4 + 24))(a4, v45);
      }
      else
      {
        v46 = *(_BYTE **)(a4 + 24);
        *(_QWORD *)(a4 + 24) = 0;
      }
    }
    else
    {
      v46 = 0;
    }
    v47 = 1;
  }
  v43 = &off_24C410CA8;
  sub_20B1F284C(a1, &v40, (uint64_t)&v34, (uint64_t)v45, a5, (uint64_t *)v44);
  if (!v47)
    goto LABEL_21;
  v15 = v46;
  if (v46 == v45)
  {
    v16 = 4;
    v15 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_21;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_21:
  if (!v39)
    goto LABEL_33;
  v17 = (char *)__p;
  if (!__p)
    goto LABEL_33;
  v18 = v38;
  v19 = __p;
  if (v38 == __p)
    goto LABEL_32;
  do
  {
    v20 = (char *)*((_QWORD *)v18 - 1);
    if (v18 - 32 == v20)
    {
      v20 = v18 - 32;
      v21 = 4;
LABEL_26:
      (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
      goto LABEL_27;
    }
    if (v20)
    {
      v21 = 5;
      goto LABEL_26;
    }
LABEL_27:
    *((_QWORD *)v18 - 100) = &off_24C411BF8;
    sub_20B07AE6C((uint64_t)(v18 - 784));
    v18 -= 800;
  }
  while (v18 != v17);
  v19 = __p;
LABEL_32:
  v38 = v17;
  operator delete(v19);
LABEL_33:
  if (v36)
  {
    v22 = (char *)v34;
    if (v34)
    {
      v23 = v34;
      if (v35 != v34)
      {
        v24 = v35 - 768;
        do
        {
          (**(void (***)(char *))v24)(v24);
          v25 = v24 == v22;
          v24 -= 768;
        }
        while (!v25);
        v23 = v34;
      }
      v35 = v22;
      operator delete(v23);
    }
  }
  if (v42)
  {
    v26 = (char *)v40;
    if (v40)
    {
      v27 = v41;
      v28 = v40;
      if (v41 != v40)
      {
        do
        {
          v29 = (std::__shared_weak_count *)*((_QWORD *)v27 - 1);
          if (v29)
          {
            p_shared_owners = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldaxr(p_shared_owners);
            while (__stlxr(v31 - 1, p_shared_owners));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v27 -= 16;
        }
        while (v27 != v26);
        v28 = v40;
      }
      v41 = v26;
      operator delete(v28);
    }
  }
  sub_20B1F19AC((void *)0x7FFFFFFFFFFFFFFFLL, *(uint64_t *)v44, a6);
  result = *(_QWORD *)v44;
  v43 = &off_24C410CA8;
  *(_QWORD *)v44 = 0;
  if (result)
  {
    v33 = sub_20B1F671C(result);
    return MEMORY[0x20BD3583C](v33, 0x10F2C4013865076);
  }
  return result;
}

void sub_20B1F39DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1F3A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;

  if (*(_BYTE *)(v17 - 64))
  {
    v19 = *(_QWORD **)(v17 - 72);
    if (v19 == (_QWORD *)(v17 - 96))
    {
      v20 = 4;
      v19 = (_QWORD *)(v17 - 96);
    }
    else
    {
      if (!v19)
        goto LABEL_7;
      v20 = 5;
    }
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
LABEL_7:
  sub_20AFF095C((uint64_t)&a9);
  sub_20AFF0B84(&a17);
  _Unwind_Resume(a1);
}

void sub_20B1F3AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20AFF0B84((char **)va);
  _Unwind_Resume(a1);
}

void sub_20B1F3AF0()
{
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B1F3B04(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C410D08;
  result[1] = v3;
  return result;
}

uint64_t sub_20B1F3B38(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C410D08;
  a2[1] = v2;
  return result;
}

BOOL sub_20B1F3B54(uint64_t a1, _QWORD **a2)
{
  return (**a2 & **(_QWORD **)(a1 + 8)) != 0;
}

uint64_t sub_20B1F3B70(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit3vizlsERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEERKNS1_17StoragePreferenceEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit3vizlsERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEERKNS1_17StoragePreferenceEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit3vizlsERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEERKNS1_17StoragePreferenceEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit3vizlsERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEERKNS1_17StoragePreferenceEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B1F3BDC()
{
  return &unk_24C410D78;
}

uint64_t sub_20B1F3BE8(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t *v16;
  uint64_t *v17;
  _BOOL4 v18;
  _BOOL4 v19;
  BOOL v20;
  uint64_t v22[13];
  uint64_t v23[13];
  char v24;

  v5 = *a2;
  v6 = *a3;
  v7 = *((unsigned __int8 *)*a3 + 24);
  if (*((_BYTE *)*a2 + 24))
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if ((*((_BYTE *)*a2 + 24) != 0) == (v7 != 0))
    {
LABEL_19:
      v16 = a2[1];
      v17 = a3[1];
      v18 = *((_BYTE *)v16 + 16) != 0;
      v19 = *((_BYTE *)v17 + 16) != 0;
      if (*((_BYTE *)v16 + 16))
        v20 = *((_BYTE *)v17 + 16) == 0;
      else
        v20 = 1;
      if (v20)
        return v18 ^ v19 ^ 1u;
      v18 = *((_BYTE *)v16 + 8) != 0;
      v19 = *((_BYTE *)v17 + 8) != 0;
      if (!*((_BYTE *)v16 + 8) || *((_BYTE *)v17 + 8) == 0)
        return v18 ^ v19 ^ 1u;
      else
        return *v16 == *v17;
    }
    return 0;
  }
  v10 = *v5;
  v9 = v5[1];
  v11 = *v6;
  if (v9 - *v5 != v6[1] - *v6)
    return 0;
  if (v10 == v9)
    goto LABEL_19;
  v12 = 0;
  while (1)
  {
    v13 = v10 + v12;
    v23[0] = v10 + v12 + 16;
    v23[1] = v10 + v12 + 72;
    v14 = v11 + v12;
    v23[2] = v10 + v12 + 88;
    v23[3] = v10 + v12 + 136;
    v23[4] = v10 + v12 + 176;
    v23[5] = v10 + v12 + 248;
    v23[6] = v10 + v12 + 280;
    v23[7] = v10 + v12 + 336;
    v23[8] = v10 + v12 + 448;
    v23[9] = v10 + v12 + 608;
    v23[10] = v10 + v12 + 648;
    v23[11] = v10 + v12 + 704;
    v23[12] = v10 + v12 + 736;
    v22[0] = v11 + v12 + 16;
    v22[1] = v11 + v12 + 72;
    v22[2] = v11 + v12 + 88;
    v22[3] = v11 + v12 + 136;
    v22[4] = v11 + v12 + 176;
    v22[5] = v11 + v12 + 248;
    v22[6] = v11 + v12 + 280;
    v22[7] = v11 + v12 + 336;
    v22[8] = v11 + v12 + 448;
    v22[9] = v11 + v12 + 608;
    v22[10] = v11 + v12 + 648;
    v22[11] = v11 + v12 + 704;
    v22[12] = v11 + v12 + 736;
    result = sub_20B210600((uint64_t)&v24, v23, v22);
    if (!(_DWORD)result)
      return result;
    if (*(_BYTE *)(v13 + 808) && *(_BYTE *)(v14 + 808))
    {
      if (*(_DWORD *)(v10 + v12 + 800) | *(_DWORD *)(v11 + v12 + 800)
        || *(_QWORD *)(v13 + 768) != *(_QWORD *)(v14 + 768))
      {
        return 0;
      }
    }
    else if ((*(_BYTE *)(v13 + 808) != 0) != (*(_BYTE *)(v14 + 808) != 0))
    {
      return 0;
    }
    v12 += 816;
    if (v10 + v12 == v9)
      goto LABEL_19;
  }
}

uint64_t sub_20B1F3E20(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C410D88[v2])(&v4, a1);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

void sub_20B1F3E78(char *__p)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  do
  {
    while (1)
    {
      v2 = *(char **)__p;
      v3 = (std::__shared_weak_count *)*((_QWORD *)__p + 6);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      if (__p[39] < 0)
        break;
      operator delete(__p);
      __p = v2;
      if (!v2)
        return;
    }
    operator delete(*((void **)__p + 2));
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

void sub_20B1F3F14()
{
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B1F3F2C(uint64_t a1)
{
  char v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *result;
  char v6;
  char v7;

  v2 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = *(_QWORD **)(a1 + 24);
    v6 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v3, (uint64_t)&v6, 1);
  }
  v4 = *(_QWORD **)(a1 + 24);
  v7 = v2;
  result = sub_20AEC01D0(v4, (uint64_t)&v7, 1);
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20B1F3F94(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

void sub_20B1F3FF4(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *__p[2];
  char v7;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    LOBYTE(__p[0]) = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v4, (uint64_t)__p, 1);
  }
  v5 = *(_QWORD **)(a1 + 24);
  __p[0] = (void *)*a2;
  v7 = 1;
  sub_20AEC01D0(v5, (uint64_t)__p, 1);
  if (v7 < 0)
    operator delete(__p[0]);
  ++*(_QWORD *)(a1 + 40);
}

void sub_20B1F4078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1F4094(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20B1F40F4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20B1F4154(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20B1F41B4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20B1F421C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20B1F427C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20B1F42DC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20B1F433C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20B1F439C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v2, (uint64_t)&v4, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20B1F4410(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v2, (uint64_t)&v4, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20B1F4488(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = a2;
    v5 = result;
    v6 = *(_QWORD *)(result + 40);
    do
    {
      if (v6)
      {
        v7 = *(_QWORD **)(v5 + 24);
        v8 = *(_BYTE *)(v5 + 32);
        sub_20AEC01D0(v7, (uint64_t)&v8, 1);
      }
      ++a3;
      result = std::ostream::operator<<();
      v6 = *(_QWORD *)(v5 + 40) + 1;
      *(_QWORD *)(v5 + 40) = v6;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_20B1F4508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_20B5130C0(a1, v3);
}

uint64_t sub_20B1F452C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 2 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20AEC01D0(v7, (uint64_t)&v8, 1);
      }
      a3 += 2;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 2;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20B1F45AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 4 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20AEC01D0(v7, (uint64_t)&v8, 1);
      }
      a3 += 4;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 4;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20B1F462C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 8 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20AEC01D0(v7, (uint64_t)&v8, 1);
      }
      a3 += 8;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20B1F46AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 8 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20AEC01D0(v7, (uint64_t)&v8, 1);
      }
      a3 += 8;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void sub_20B1F472C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4;

  if (a2)
  {
    v4 = a2;
    do
    {
      sub_20B512EB0(a1, a3++);
      --v4;
    }
    while (v4);
  }
}

void sub_20B1F4774(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4;

  if (a2)
  {
    v4 = a2;
    do
    {
      sub_20B512CCC(a1, a3++);
      --v4;
    }
    while (v4);
  }
}

uint64_t sub_20B1F47BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 2 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20AEC01D0(v7, (uint64_t)&v8, 1);
      }
      a3 += 2;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 2;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20B1F483C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 4 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20AEC01D0(v7, (uint64_t)&v8, 1);
      }
      a3 += 4;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 4;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20B1F48BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 8 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20AEC01D0(v7, (uint64_t)&v8, 1);
      }
      a3 += 8;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20B1F493C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 8 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20AEC01D0(v7, (uint64_t)&v8, 1);
      }
      a3 += 8;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20B1F49BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 4 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20AEC01D0(v7, (uint64_t)&v8, 1);
      }
      *(_QWORD *)(*(_QWORD *)(v4 + 24) + *(_QWORD *)(**(_QWORD **)(v4 + 24) - 24) + 16) = 9;
      a3 += 4;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 4;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20B1F4A50(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 8 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20AEC01D0(v7, (uint64_t)&v8, 1);
      }
      *(_QWORD *)(*(_QWORD *)(v4 + 24) + *(_QWORD *)(**(_QWORD **)(v4 + 24) - 24) + 16) = 17;
      a3 += 8;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void sub_20B1F4AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a2)
  {
    v5 = 24 * a2;
    do
    {
      sub_20B512F6C(a1, a3);
      a3 += 24;
      v5 -= 24;
    }
    while (v5);
  }
}

_QWORD *sub_20B1F4B38(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  char v3;

  v1 = result;
  if (result[5])
  {
    v2 = (_QWORD *)result[3];
    v3 = *((_BYTE *)v1 + 32);
    result = sub_20AEC01D0(v2, (uint64_t)&v3, 1);
    ++v1[5];
  }
  else
  {
    result[5] = 1;
  }
  return result;
}

_QWORD *sub_20B1F4BA0(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;

  v2 = *a2;
  if (*a2)
  {
    v3 = result;
    v4 = result[5];
    do
    {
      while (v4)
      {
        v5 = (_QWORD *)v3[3];
        v6 = *((_BYTE *)v3 + 32);
        result = sub_20AEC01D0(v5, (uint64_t)&v6, 1);
        v4 = v3[5] + 1;
        v3[5] = v4;
        if (!--v2)
          return result;
      }
      v4 = 1;
      v3[5] = 1;
      --v2;
    }
    while (v2);
  }
  return result;
}

void sub_20B1F4C1C()
{
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B1F4C38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return a1;
}

void sub_20B1F4C88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B1F4CE8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B1F4CF8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B1F4D08(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B1F4D18(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

__n128 sub_20B1F4D28(uint64_t **a1, unint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  uint64_t v6;
  std::string __p;
  uint64_t v8;
  unsigned __int8 v9;

  v2 = *a1;
  v3 = **a1;
  if (*(_BYTE *)(v3 + 456))
    v4 = v3 + 416;
  else
    v4 = 0;
  sub_20B204A28(v3 + 32, (void ***)(*a1)[2], *a2, *(_QWORD *)(v3 + 56), v4, *(unsigned __int8 *)(v3 + 456), &__p);
  v6 = v2[1];
  if (*(unsigned __int8 *)(v6 + 32) == v9)
  {
    if (*(_BYTE *)(v6 + 32))
    {
      if (*(char *)(v6 + 23) < 0)
        operator delete(*(void **)v6);
      result = *(__n128 *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v6 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(__n128 *)v6 = result;
      *(_QWORD *)(v6 + 24) = v8;
    }
  }
  else if (*(_BYTE *)(v6 + 32))
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    *(_BYTE *)(v6 + 32) = 0;
    if (v9 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    result = *(__n128 *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(__n128 *)v6 = result;
    *(_QWORD *)(v6 + 24) = v8;
    *(_BYTE *)(v6 + 32) = 1;
  }
  return result;
}

__n128 sub_20B1F4E28(_QWORD **a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  _QWORD v16[2];

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *v2;
  v5 = v2[2];
  v6 = *(_QWORD *)(*v2 + 56);
  v7 = *v2 + 416;
  v8 = *(unsigned __int8 *)(*v2 + 456);
  if (!*(_BYTE *)(*v2 + 456))
    v7 = 0;
  v16[0] = v7;
  v16[1] = v8;
  v15 = 6;
  if (!v3)
    sub_20AECABA4();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 48))(__p, v3, v4 + 32, v5, &v15, v6, v16);
  v10 = v2[1];
  if (*(unsigned __int8 *)(v10 + 32) == v14)
  {
    if (*(_BYTE *)(v10 + 32))
    {
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      result = *(__n128 *)__p;
      *(_QWORD *)(v10 + 16) = v12;
      *(__n128 *)v10 = result;
      *(_QWORD *)(v10 + 24) = v13;
    }
  }
  else if (*(_BYTE *)(v10 + 32))
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    *(_BYTE *)(v10 + 32) = 0;
    if (v14 && SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  else
  {
    result = *(__n128 *)__p;
    *(_QWORD *)(v10 + 16) = v12;
    *(__n128 *)v10 = result;
    *(_QWORD *)(v10 + 24) = v13;
    *(_BYTE *)(v10 + 32) = 1;
  }
  return result;
}

uint64_t sub_20B1F4F4C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  char v11;

  v2 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C410D88[v2])(&v11, a1 + 56);
  *(_DWORD *)(a1 + 88) = -1;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *(std::__shared_weak_count **)(a1 + 8);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  return a1;
}

_QWORD *sub_20B1F5020(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = a1 + 2;
    v6 = (_QWORD *)a1[5];
    if (v6 != a1 + 2)
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v5;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = a1 + 2;
  v6 = (_QWORD *)a1[5];
  if (v6 == a1 + 2)
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = (std::__shared_weak_count *)a1[1];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20B1F5100(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C410E58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B1F5110(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C410E58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B1F5140()
{
  JUMPOUT(0x20BD35710);
}

void sub_20B1F514C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C410EA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B1F515C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C410EA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B1F518C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  char v10;

  v2 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C410D88[v2])(&v10, a1 + 80);
  *(_DWORD *)(a1 + 112) = -1;
  v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *(std::__shared_weak_count **)(a1 + 32);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

_QWORD *sub_20B1F5260(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_24C410F08;
  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = a1 + 3;
    v6 = (_QWORD *)a1[6];
    if (v6 != a1 + 3)
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v5;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = a1 + 3;
  v6 = (_QWORD *)a1[6];
  if (v6 == a1 + 3)
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20B1F534C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_24C410F08;
  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = a1 + 3;
    v6 = (_QWORD *)a1[6];
    if (v6 != a1 + 3)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    v5 = a1 + 3;
    v6 = (_QWORD *)a1[6];
    if (v6 != a1 + 3)
    {
LABEL_6:
      if (!v6)
        goto LABEL_11;
      v7 = 5;
LABEL_10:
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
      v8 = (std::__shared_weak_count *)a1[2];
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      JUMPOUT(0x20BD3583CLL);
    }
  }
  v7 = 4;
  v6 = v5;
  goto LABEL_10;
}

_QWORD *sub_20B1F5438(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0x48uLL);
  v4 = a1[1];
  v3 = a1[2];
  *v2 = &off_24C410F08;
  v2[1] = v4;
  v2[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[6];
  if (!v7)
    goto LABEL_7;
  if ((_QWORD *)v7 != a1 + 3)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_7:
    v2[6] = v7;
    goto LABEL_9;
  }
  v2[6] = v2 + 3;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
LABEL_9:
  v8 = a1[8];
  v2[7] = a1[7];
  v2[8] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v2;
}

void sub_20B1F54F4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1F5540(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = a1[1];
  v4 = a1[2];
  *a2 = &off_24C410F08;
  a2[1] = v5;
  a2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = a1[6];
  if (!result)
    goto LABEL_7;
  if ((_QWORD *)result != a1 + 3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_7:
    a2[6] = result;
    goto LABEL_9;
  }
  a2[6] = a2 + 3;
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[6] + 24))(a1[6]);
LABEL_9:
  v9 = a1[8];
  a2[7] = a1[7];
  a2[8] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20B1F55EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B1F5630(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = a1 + 3;
      v6 = (_QWORD *)a1[6];
      if (v6 != a1 + 3)
        goto LABEL_6;
LABEL_9:
      v7 = 4;
      v6 = v5;
      goto LABEL_10;
    }
  }
  v5 = a1 + 3;
  v6 = (_QWORD *)a1[6];
  if (v6 == a1 + 3)
    goto LABEL_9;
LABEL_6:
  if (!v6)
    goto LABEL_11;
  v7 = 5;
LABEL_10:
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20B1F5704(char *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 8);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = __p + 24;
    v6 = (char *)*((_QWORD *)__p + 6);
    if (v6 != __p + 24)
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v5;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = __p + 24;
  v6 = (char *)*((_QWORD *)__p + 6);
  if (v6 == __p + 24)
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    operator delete(__p);
  }
  else
  {
LABEL_15:
    operator delete(__p);
  }
}

void sub_20B1F57E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[8];
  std::__shared_weak_count *v6[2];
  _BYTE v7[32];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)v6 = *(_OWORD *)v2;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  v7[0] = 0;
  v8 = -1;
  v3 = *(unsigned int *)(v2 + 88);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))off_24C410EE8[v3])(v5, v7, v2 + 56);
    v8 = v3;
  }
  v4 = *(_QWORD *)(a1 + 48);
  if (!v4)
    sub_20AECABA4();
  (*(void (**)(uint64_t, std::__shared_weak_count **, uint64_t, _BYTE *))(*(_QWORD *)v4 + 48))(v4, v6, v2 + 16, v7);
  if (v8 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_24C410D88[v8])(v5, v7);
  v8 = -1;
  if (v6[1])
    std::__shared_weak_count::__release_weak(v6[1]);
  std::promise<void>::set_value(*(std::promise<void> **)(a1 + 8));
}

void sub_20B1F58EC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20AEC01C0(exception_object);
}

void sub_20B1F5908(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, std::__shared_weak_count *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  uint64_t v17;
  std::promise<void> *v18;
  std::exception_ptr v19;

  if (a2)
  {
    __cxa_begin_catch(a1);
    v18 = *(std::promise<void> **)(v17 + 8);
    std::current_exception();
    v19.__ptr_ = &a10;
    std::promise<void>::set_exception(v18, v19);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x20B1F58B4);
  }
  JUMPOUT(0x20B1F58F8);
}

uint64_t sub_20B1F598C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureIvNSt3__18functionIFvNS4_8weak_ptrINS_3kit3v"
                     "iz13VDataExporter4ImplEEERKNS8_11ContextDataENS4_7variantIJNS8_17StoragePreferenceENS5_IFNS4_8optio"
                     "nalINS8_12DataLocationEEERKNS4_4__fs10filesystem4pathESE_SG_RNS7_2fs11IFilesystemENS0_11OptionalRef"
                     "INS8_15ExportFileStateEEEEEEEEEEEENS1_11IWorkQueueTINS5_IFvvEEEEEJRSB_SE_RKSX_EEENS4_6futureIT_EERT"
                     "1_OT0_DpOT2_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureIvNSt3__18functionIFvNS4_8weak_pt"
                                "rINS_3kit3viz13VDataExporter4ImplEEERKNS8_11ContextDataENS4_7variantIJNS8_17StoragePrefe"
                                "renceENS5_IFNS4_8optionalINS8_12DataLocationEEERKNS4_4__fs10filesystem4pathESE_SG_RNS7_2"
                                "fs11IFilesystemENS0_11OptionalRefINS8_15ExportFileStateEEEEEEEEEEEENS1_11IWorkQueueTINS5"
                                "_IFvvEEEEEJRSB_SE_RKSX_EEENS4_6futureIT_EERT1_OT0_DpOT2_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureIvNSt3__18functionIFvNS4_8weak_ptrINS_3kit3viz13VDataExporter4ImplEEERKNS8_11ContextDataENS4_7variantIJNS8_17StoragePreferenceENS5_IFNS4_8optionalINS8_12DataLocationEEERKNS4_4__fs10filesystem4pathESE_SG_RNS7_2fs11IFilesystemENS0_11OptionalRefINS8_15ExportFileStateEEEEEEEEEEEENS1_11IWorkQueueTINS5_IFvvEEEEEJRSB_SE_RKSX_EEENS4_6futureIT_EERT1_OT0_DpOT2_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureIvNSt3__18functionIFvNS4_8weak_ptrINS_3kit3viz13VDataExporter4ImplEEERKNS8_11ContextDataENS4_7variantIJNS8_17StoragePreferenceENS5_IFNS4_8optionalINS8_12DataLocationEEERKNS4_4__fs10filesystem4pathESE_SG_RNS7_2fs11IFilesystemENS0_11OptionalRefINS8_15ExportFileStateEEEEEEEEEEEENS1_11IWorkQueueTINS5_IFvvEEEEEJRSB_SE_RKSX_EEENS4_6futureIT_EERT1_OT0_DpOT2_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B1F59F8()
{
  return &unk_24C410F68;
}

uint64_t sub_20B1F5A04(uint64_t a1, const char *a2)
{
  uint64_t result;
  char *v4;
  __int128 v5;
  int v6;
  char **v7;
  const char *v8;
  char **v9;
  const char *v10;
  const char *v11;
  char ***v12;

  v4 = (char *)operator new(0x38uLL);
  v5 = xmmword_20B5EAC30;
  strcpy(v4, "data importer does not support filtering with matcher '");
  v6 = 1;
  if (*(_QWORD *)a2)
  {
    v7 = &v4;
    v8 = a2;
    v9 = &v4;
    v10 = a2;
    v11 = a2;
    sub_20AED0870((uint64_t *)&v9, (uint64_t)&v4);
  }
  else
  {
    v7 = &v4;
    v8 = "nullptr";
    v9 = &v4;
    v10 = "nullptr";
    v11 = "nullptr";
    sub_20AED0260((uint64_t *)&v9, (uint64_t)&v4);
  }
  v7 = &v4;
  v8 = "'";
  v9 = &v4;
  v10 = "'";
  v11 = "'";
  if (v6 == -1)
    sub_20AECFAB8();
  v12 = &v7;
  ((void (*)(char ****, char **))off_24C410F78[v6])(&v12, &v4);
  if (v6 == -1)
    sub_20AECFAB8();
  v7 = (char **)&v12;
  result = ((uint64_t (*)(char ***, char **))off_24C410E30[v6])(&v7, &v4);
  if (v6 != -1)
    return ((uint64_t (*)(char ***, char **))off_24C410E18[v6])(&v7, &v4);
  return result;
}

void sub_20B1F5B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1F5B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1F5BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B1F5BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B1F5BC8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  uint64_t v9;
  char v10;
  void *__dst[2];
  uint64_t v12;
  char v13;
  uint64_t v14;

  v14 = 0x400000001;
  LOBYTE(__dst[0]) = 0;
  v13 = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a3;
      v12 = *(_QWORD *)(a3 + 16);
    }
    v13 = 1;
  }
  LOBYTE(__p[0]) = 0;
  v10 = 0;
  if (*(_BYTE *)(a4 + 24))
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_20AEC60F4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v9 = *(_QWORD *)(a4 + 16);
    }
    v10 = 1;
  }
  sub_20B5162E4((uint64_t)a1, &v14, a2, (__int128 *)__dst, (__int128 *)__p, 0, 1);
  if (v10 && SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (v13 && SHIBYTE(v12) < 0)
    operator delete(__dst[0]);
  *a1 = off_24C410FA0;
  return a1;
}

void sub_20B1F5CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 && a14 < 0)
    operator delete(__p);
  if (a22)
  {
    if (a21 < 0)
      operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1F5D30(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C41EF88;
  if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20B1F5DAC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C41EF88;
  if (*(char *)(a1 + 159) < 0)
  {
    operator delete(*(void **)(a1 + 136));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 47) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 48));
  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
LABEL_8:
    JUMPOUT(0x20BD3583CLL);
LABEL_7:
  operator delete(*(void **)(a1 + 24));
  goto LABEL_8;
}

void sub_20B1F5E30(uint64_t a1)
{
  char v2;
  void *__p[2];
  char v4;

  while (!*(_BYTE *)(a1 + 131)
       && (*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) == 0)
  {
    sub_20B51680C(a1, (uint64_t)__p);
    if (v4 < 0)
    {
      if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
      {
LABEL_11:
        v2 = 0;
        if (v4 < 0)
          goto LABEL_14;
        goto LABEL_2;
      }
    }
    else if (v4 == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
    {
      goto LABEL_11;
    }
    v2 = 1;
    if (v4 < 0)
LABEL_14:
      operator delete(__p[0]);
LABEL_2:
    if ((v2 & 1) == 0)
      return;
  }
}

double sub_20B1F5F28(uint64_t a1, uint64_t a2)
{
  double result;
  __int128 v5;
  uint64_t v6;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
  }
  else
  {
    sub_20B51680C(a1, (uint64_t)&v5);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    result = *(double *)&v5;
    *(_OWORD *)a2 = v5;
    *(_QWORD *)(a2 + 16) = v6;
    ++*(_QWORD *)(a1 + 104);
  }
  return result;
}

void sub_20B1F5FBC(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;

  if (a2)
  {
    v4 = a2;
    do
    {
      sub_20B515758(a1, a3++);
      --v4;
    }
    while (v4);
  }
}

void sub_20B1F6004(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;

  if (a2)
  {
    v4 = a2;
    do
    {
      sub_20B5136B0(a1, a3++);
      --v4;
    }
    while (v4);
  }
}

void sub_20B1F604C(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v5;

  if (a2)
  {
    v5 = 2 * a2;
    do
    {
      sub_20B513D94(a1, a3++);
      v5 -= 2;
    }
    while (v5);
  }
}

void sub_20B1F6094(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;

  if (a2)
  {
    v5 = 4 * a2;
    do
    {
      sub_20B51423C(a1, a3++);
      v5 -= 4;
    }
    while (v5);
  }
}

void sub_20B1F60DC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;

  if (a2)
  {
    v5 = 8 * a2;
    do
    {
      sub_20B5146E4(a1, a3++);
      v5 -= 8;
    }
    while (v5);
  }
}

void sub_20B1F6124(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;

  if (a2)
  {
    v5 = 8 * a2;
    do
    {
      sub_20B514B8C(a1, a3++);
      v5 -= 8;
    }
    while (v5);
  }
}

void sub_20B1F616C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;

  if (a2)
  {
    v4 = a2;
    do
    {
      sub_20B513B4C(a1, a3++);
      --v4;
    }
    while (v4);
  }
}

void sub_20B1F61B4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;

  if (a2)
  {
    v4 = a2;
    do
    {
      sub_20B513904(a1, a3++);
      --v4;
    }
    while (v4);
  }
}

void sub_20B1F61FC(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v5;

  if (a2)
  {
    v5 = 2 * a2;
    do
    {
      sub_20B513FE8(a1, a3++);
      v5 -= 2;
    }
    while (v5);
  }
}

void sub_20B1F6244(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;

  if (a2)
  {
    v5 = 4 * a2;
    do
    {
      sub_20B514490(a1, a3++);
      v5 -= 4;
    }
    while (v5);
  }
}

void sub_20B1F628C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;

  if (a2)
  {
    v5 = 8 * a2;
    do
    {
      sub_20B514938(a1, a3++);
      v5 -= 8;
    }
    while (v5);
  }
}

void sub_20B1F62D4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;

  if (a2)
  {
    v5 = 8 * a2;
    do
    {
      sub_20B514DE0(a1, a3++);
      v5 -= 8;
    }
    while (v5);
  }
}

void sub_20B1F631C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;

  if (a2)
  {
    v5 = 4 * a2;
    do
    {
      sub_20B5152B0(a1, a3++);
      v5 -= 4;
    }
    while (v5);
  }
}

void sub_20B1F6364(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;

  if (a2)
  {
    v5 = 8 * a2;
    do
    {
      sub_20B515504(a1, a3++);
      v5 -= 8;
    }
    while (v5);
  }
}

void sub_20B1F63AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  if (a2)
  {
    v5 = 24 * a2;
    do
    {
      while (1)
      {
        ++*(_QWORD *)(a1 + 80);
        if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 131))
          break;
        *(_BYTE *)(a1 + 132) = 1;
        a3 += 24;
        v5 -= 24;
        if (!v5)
          return;
      }
      sub_20B51680C(a1, (uint64_t)&v7);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      v6 = v7;
      *(_QWORD *)(a3 + 16) = v8;
      *(_OWORD *)a3 = v6;
      a3 += 24;
      ++*(_QWORD *)(a1 + 104);
      v5 -= 24;
    }
    while (v5);
  }
}

void sub_20B1F6468(uint64_t a1)
{
  void *__p;
  char v3;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
  }
  else
  {
    sub_20B51680C(a1, (uint64_t)&__p);
    if (v3 < 0)
      operator delete(__p);
    ++*(_QWORD *)(a1 + 104);
  }
}

void sub_20B1F64E8(uint64_t a1, uint64_t *a2)
{
  uint64_t i;
  void *__p;
  char v5;

  for (i = *a2; i; --i)
  {
    while (1)
    {
      ++*(_QWORD *)(a1 + 80);
      if (*(_BYTE *)(a1 + 128))
      {
        if (*(_BYTE *)(a1 + 131))
          break;
      }
      sub_20B51680C(a1, (uint64_t)&__p);
      if (v5 < 0)
      {
        operator delete(__p);
        ++*(_QWORD *)(a1 + 104);
        if (!--i)
          return;
      }
      else
      {
        ++*(_QWORD *)(a1 + 104);
        if (!--i)
          return;
      }
    }
    *(_BYTE *)(a1 + 132) = 1;
  }
}

void sub_20B1F6594(uint64_t a1)
{
  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 96));
    if (!*(_BYTE *)(a1 + 88))
      goto LABEL_8;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 119) < 0)
    goto LABEL_6;
LABEL_3:
  if (!*(_BYTE *)(a1 + 88))
  {
LABEL_8:
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_12;
  }
LABEL_7:
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    goto LABEL_8;
  operator delete(*(void **)(a1 + 64));
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
LABEL_9:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(*(void **)(a1 + 8));
    return;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    goto LABEL_13;
}

uint64_t sub_20B1F6634(uint64_t a1, std::__fs::filesystem::path *this)
{
  char v4;
  __int128 v5;
  int v7;
  std::__fs::filesystem::path *v8;
  std::string::size_type v9;
  std::__fs::filesystem::path *v10;
  size_t size;

  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    if ((std::__fs::filesystem::path *)a1 == this)
      return a1;
    v4 = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (*(char *)(a1 + 23) < 0)
    {
      if (v4 >= 0)
        v10 = this;
      else
        v10 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
      if (v4 >= 0)
        size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
      else
        size = this->__pn_.__r_.__value_.__l.__size_;
      sub_20AEC8090((void **)a1, v10, size);
      return a1;
    }
    else
    {
      if ((*((_BYTE *)&this->__pn_.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        v5 = *(_OWORD *)&this->__pn_.__r_.__value_.__l.__data_;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)&this->__pn_.__r_.__value_.__l + 2);
        *(_OWORD *)a1 = v5;
        return a1;
      }
      sub_20AEC7FCC((_QWORD *)a1, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
      return a1;
    }
  }
  else
  {
    if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)a1).__size_)
      std::string::push_back((std::string *)a1, 47);
    v7 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v7 >= 0)
      v8 = this;
    else
      v8 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    if (v7 >= 0)
      v9 = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    else
      v9 = this->__pn_.__r_.__value_.__l.__size_;
    std::string::append((std::string *)a1, (const std::string::value_type *)v8, v9);
    return a1;
  }
}

uint64_t sub_20B1F671C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  void (***v29)(_QWORD);
  void (***v30)(_QWORD);
  void *v31;
  void (***v32)(_QWORD);
  BOOL v33;
  char v35;

  sub_20B1F7D30(*(char **)(a1 + 344));
  sub_20AEC833C(a1 + 312, *(char **)(a1 + 320));
  v2 = *(_QWORD *)(a1 + 288);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 296);
    v4 = *(void **)(a1 + 288);
    if (v3 != v2)
    {
      do
      {
        v3 -= 152;
        sub_20B1F6594(v3);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 288);
    }
    *(_QWORD *)(a1 + 296) = v2;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  if (v5)
  {
    *(_QWORD *)v5 = off_24C41EF88;
    if (*(char *)(v5 + 159) < 0)
    {
      operator delete(*(void **)(v5 + 136));
      if ((*(char *)(v5 + 71) & 0x80000000) == 0)
      {
LABEL_9:
        if ((*(char *)(v5 + 47) & 0x80000000) == 0)
        {
LABEL_10:
          MEMORY[0x20BD3583C](v5, 0x10B3C40F5E21753);
          goto LABEL_11;
        }
LABEL_48:
        operator delete(*(void **)(v5 + 24));
        goto LABEL_10;
      }
    }
    else if ((*(char *)(v5 + 71) & 0x80000000) == 0)
    {
      goto LABEL_9;
    }
    operator delete(*(void **)(v5 + 48));
    if ((*(char *)(v5 + 47) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_48;
  }
LABEL_11:
  v6 = *(std::__shared_weak_count **)(a1 + 264);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *(_QWORD *)(a1 + 224);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 232);
    v11 = *(void **)(a1 + 224);
    if (v10 != v9)
    {
      do
      {
        v12 = *(std::__shared_weak_count **)(v10 - 8);
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v10 -= 16;
      }
      while (v10 != v9);
      v11 = *(void **)(a1 + 224);
    }
    *(_QWORD *)(a1 + 232) = v9;
    operator delete(v11);
  }
  v15 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_24C4110C8[v15])(&v35, a1 + 200);
  *(_DWORD *)(a1 + 216) = -1;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  v16 = *(_QWORD *)(a1 + 136);
  if (v16)
  {
    v17 = *(_QWORD *)(a1 + 144);
    v18 = *(void **)(a1 + 136);
    if (v17 != v16)
    {
      do
      {
        v19 = *(std::__shared_weak_count **)(v17 - 8);
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v17 -= 16;
      }
      while (v17 != v16);
      v18 = *(void **)(a1 + 136);
    }
    *(_QWORD *)(a1 + 144) = v16;
    operator delete(v18);
  }
  if (!*(_BYTE *)(a1 + 128))
    goto LABEL_51;
  v22 = *(_QWORD **)(a1 + 120);
  if (v22 == (_QWORD *)(a1 + 96))
  {
    v23 = 4;
    v22 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v22)
      goto LABEL_51;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_51:
  if (!*(_BYTE *)(a1 + 88))
    goto LABEL_63;
  v24 = *(_QWORD *)(a1 + 64);
  if (!v24)
    goto LABEL_63;
  v25 = *(_QWORD *)(a1 + 72);
  v26 = *(void **)(a1 + 64);
  if (v25 == v24)
    goto LABEL_62;
  do
  {
    v27 = *(_QWORD **)(v25 - 8);
    if ((_QWORD *)(v25 - 32) == v27)
    {
      v27 = (_QWORD *)(v25 - 32);
      v28 = 4;
LABEL_56:
      (*(void (**)(void))(*v27 + 8 * v28))();
      goto LABEL_57;
    }
    if (v27)
    {
      v28 = 5;
      goto LABEL_56;
    }
LABEL_57:
    *(_QWORD *)(v25 - 800) = &off_24C411BF8;
    sub_20B07AE6C(v25 - 784);
    v25 -= 800;
  }
  while (v25 != v24);
  v26 = *(void **)(a1 + 64);
LABEL_62:
  *(_QWORD *)(a1 + 72) = v24;
  operator delete(v26);
LABEL_63:
  if (*(_BYTE *)(a1 + 56))
  {
    v29 = *(void (****)(_QWORD))(a1 + 32);
    if (v29)
    {
      v30 = *(void (****)(_QWORD))(a1 + 40);
      v31 = *(void **)(a1 + 32);
      if (v30 != v29)
      {
        v32 = v30 - 96;
        do
        {
          (**v32)(v32);
          v33 = v32 == v29;
          v32 -= 96;
        }
        while (!v33);
        v31 = *(void **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 40) = v29;
      operator delete(v31);
    }
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B1F6A88(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (__sz > (v8 - *(_QWORD *)a1) >> 4)
  {
    if (v9)
    {
      v10 = *(char **)(a1 + 8);
      v11 = *(char **)a1;
      if (v10 != v9)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 -= 16;
        }
        while (v10 != v9);
        v11 = *(char **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_68;
    v33 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v33 = __sz;
    v34 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v35 = 0xFFFFFFFFFFFFFFFLL;
    if (!v34)
      v35 = v33;
    if (v35 >> 60)
LABEL_68:
      sub_20AEC60B8();
    v36 = 2 * v35;
    v37 = operator new(16 * v35);
    *(_QWORD *)a1 = v37;
    *(_QWORD *)(a1 + 8) = v37;
    *(_QWORD *)(a1 + 16) = &v37[v36];
    while (v6 != a3)
    {
      v38 = v6[1];
      *v37 = *v6;
      v37[1] = v38;
      if (v38)
      {
        v39 = (unint64_t *)(v38 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v6 += 2;
      v37 += 2;
    }
    *(_QWORD *)(a1 + 8) = v37;
    return;
  }
  v15 = *(char **)(a1 + 8);
  v16 = (v15 - v9) >> 4;
  if (v16 < __sz)
  {
    v17 = &a2[2 * v16];
    if (v15 == v9)
    {
      v18 = *(char **)a1;
      if (v17 == a3)
      {
LABEL_58:
        *(_QWORD *)(a1 + 8) = v18;
        return;
      }
    }
    else
    {
      do
      {
        v20 = *v6;
        v19 = v6[1];
        if (v19)
        {
          v21 = (unint64_t *)(v19 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
        *(_QWORD *)v9 = v20;
        *((_QWORD *)v9 + 1) = v19;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v6 += 2;
        v9 += 16;
      }
      while (v6 != v17);
      v9 = *(char **)(a1 + 8);
      v18 = v9;
      if (v17 == a3)
        goto LABEL_58;
    }
    v18 = v9;
    do
    {
      v41 = v17[1];
      *(_QWORD *)v18 = *v17;
      *((_QWORD *)v18 + 1) = v41;
      if (v41)
      {
        v42 = (unint64_t *)(v41 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v17 += 2;
      v18 += 16;
    }
    while (v17 != a3);
    goto LABEL_58;
  }
  if (a2 != a3)
  {
    do
    {
      v27 = *v6;
      v26 = v6[1];
      if (v26)
      {
        v28 = (unint64_t *)(v26 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
      *(_QWORD *)v9 = v27;
      *((_QWORD *)v9 + 1) = v26;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v6 += 2;
      v9 += 16;
    }
    while (v6 != a3);
    v15 = *(char **)(a1 + 8);
  }
  while (v15 != v9)
  {
    v44 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v15 -= 16;
  }
  *(_QWORD *)(a1 + 8) = v9;
}

void sub_20B1F6DCC(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  void *__p[2];
  unsigned __int8 v7;
  uint64_t v8;
  std::string v9;
  std::string v10;

  v8 = *a1;
  sub_20B1E487C(&v8);
  std::string::push_back(&v9, 32);
  v10 = v9;
  memset(&v9, 0, sizeof(v9));
  sub_20B52C584(1, 1000000000, __p);
  if ((v7 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (std::string::size_type)__p[1];
  v5 = std::string::append(&v10, (const std::string::value_type *)v3, v4);
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if ((char)v7 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_13:
      operator delete(v9.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_13;
}

void sub_20B1F6EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v22 - 25) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a22 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v22 - 25) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v22 - 48));
  if ((a22 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_20B1F6F3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C411118;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B1F6F4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C411118;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B1F6F7C(uint64_t a1)
{
  return sub_20B1E7FC4(a1 + 24);
}

void sub_20B1F6F8C()
{
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B1F6FA0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C411168;
  return result;
}

void sub_20B1F6FC4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C411168;
}

void sub_20B1F6FDC(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  _BYTE v16[16];
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  char v24;
  char v25;
  char v26;
  _BYTE v27[32];
  unsigned int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v27[0] = 0;
  v28 = -1;
  v7 = *(unsigned int *)(a4 + 32);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))off_24C410EE8[v7])(v16, v27, a4);
    v28 = v7;
  }
  if (!v5)
    goto LABEL_16;
  v8 = std::__shared_weak_count::lock(v5);
  if (!v8)
    goto LABEL_16;
  v9 = v8;
  if (v6)
  {
    sub_20B1E830C((uint64_t)v16, v6, a3, (uint64_t)v27);
    if (!v26 && *(_BYTE *)(v6 + 160))
    {
      v10 = *(_QWORD *)(v6 + 152);
      if (!v10)
        sub_20AECABA4();
      (*(void (**)(uint64_t, uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)v10 + 48))(v10, v6 + 32, a3 + 2, v16);
    }
    std::mutex::lock((std::mutex *)(v6 + 352));
    v11 = (unsigned int *)(v6 + 296);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    std::condition_variable::notify_one((std::condition_variable *)(v6 + 304));
    std::mutex::unlock((std::mutex *)(v6 + 352));
    if (!v26 && v25)
    {
      if (v24)
      {
        if (v23 < 0)
          operator delete(__p);
        if (v21 < 0)
          operator delete(v20);
      }
      if (v19 && v18 < 0)
        operator delete(v17);
    }
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_16:
    v15 = v28;
    if (v28 == -1)
      goto LABEL_18;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  v15 = v28;
  if (v28 != -1)
LABEL_17:
    ((void (*)(_BYTE *, _BYTE *))off_24C410D88[v15])(v16, v27);
LABEL_18:
  v28 = -1;
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20B1F71D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,int a32,__int16 a33,char a34,char a35,int a36,__int16 a37,char a38,char a39)
{
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t v45;

  if (!(_BYTE)a37 && (_BYTE)a33)
  {
    if (a31)
    {
      if (a30 < 0)
        operator delete(__p);
      if (a23 < 0)
        operator delete(a18);
    }
    if (a17 && a16 < 0)
      operator delete(a11);
  }
  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    v44 = __ldaxr(p_shared_owners);
  while (__stlxr(v44 - 1, p_shared_owners));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  v45 = *(unsigned int *)(v41 - 48);
  if ((_DWORD)v45 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24C410D88[v45])(&a9, v41 - 80);
  *(_DWORD *)(v41 - 48) = -1;
  std::__shared_weak_count::__release_weak(v39);
  _Unwind_Resume(a1);
}

void sub_20B1F72A0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20AEC01C0(exception_object);
}

uint64_t sub_20B1F72C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit3viz13VDataExporter4Impl16ExportDataAsynchERKNS1_11ContextDataERKNSt3__17variantIJNS1_17"
                     "StoragePreferenceENS7_8functionIFNS7_8optionalINS1_12DataLocationEEERKNS7_4__fs10filesystem4pathES6"
                     "_S9_RNS0_2fs11IFilesystemENS_3esn11OptionalRefINS1_15ExportFileStateEEEEEEEEEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit3viz13VDataExporter4Impl16ExportDataAsynchERKNS1_11ContextDataERKNSt3__17vari"
                                "antIJNS1_17StoragePreferenceENS7_8functionIFNS7_8optionalINS1_12DataLocationEEERKNS7_4__"
                                "fs10filesystem4pathES6_S9_RNS0_2fs11IFilesystemENS_3esn11OptionalRefINS1_15ExportFileSta"
                                "teEEEEEEEEEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit3viz13VDataExporter4Impl16ExportDataAsynchERKNS1_11ContextDataERKNSt3__17variantIJNS1_17StoragePreferenceENS7_8functionIFNS7_8optionalINS1_12DataLocationEEERKNS7_4__fs10filesystem4pathES6_S9_RNS0_2fs11IFilesystemENS_3esn11OptionalRefINS1_15ExportFileStateEEEEEEEEEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit3viz13VDataExporter4Impl16ExportDataAsynchERKNS1_11ContextDataERKNSt3__17variantIJNS1_17StoragePreferenceENS7_8functionIFNS7_8optionalINS1_12DataLocationEEERKNS7_4__fs10filesystem4pathES6_S9_RNS0_2fs11IFilesystemENS_3esn11OptionalRefINS1_15ExportFileStateEEEEEEEEEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B1F732C()
{
  return &unk_24C4111D8;
}

void sub_20B1F7338(uint64_t a1, void **a2, void **a3)
{
  unint64_t v3;
  void **v4;
  uint64_t v6;
  uint64_t i;
  void **v8;
  _OWORD *v9;
  char v10;
  __int128 v11;
  void *v12;
  size_t v13;
  unint64_t *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void **v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint64_t **v28;
  uint64_t *v29;
  unint64_t v30;
  int v31;
  std::__fs::filesystem::path::__string_view v32;
  uint64_t v33;
  int v34;
  std::__fs::filesystem::path::__string_view v35;
  float v36;
  float v37;
  _BOOL8 v38;
  unint64_t v39;
  unint64_t v40;
  size_t prime;
  int8x8_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  int8x8_t v46;
  unint64_t v47;
  uint8x8_t v48;
  void **v49;
  unint64_t v50;
  void **v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  __int128 v55;
  uint64_t *v56;
  void *v57;
  unint64_t v58;
  unint64_t v59;
  uint8x8_t v60;
  uint64_t **v61;
  uint64_t *v62;
  unint64_t v63;
  int v64;
  std::__fs::filesystem::path::__string_view v65;
  uint64_t v66;
  int v67;
  std::__fs::filesystem::path::__string_view v68;
  _QWORD *v69;
  _BYTE *v70;
  __int128 v71;
  char *v72;
  unint64_t *v73;
  unint64_t v74;
  float v75;
  float v76;
  _BOOL8 v77;
  unint64_t v78;
  unint64_t v79;
  size_t v80;
  int8x8_t v81;
  unint64_t v82;
  uint8x8_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  void *__p[2];
  void *v92;
  char v93;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    v8 = *(void ***)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v89 = a1 + 16;
    if (a2 == a3)
    {
      v21 = v8;
      if (v8)
        goto LABEL_118;
    }
    else
    {
      if (v8)
      {
        while (1)
        {
          v9 = v8 + 2;
          if (v8 + 2 != v4)
          {
            v10 = *((_BYTE *)v4 + 23);
            if (*((char *)v8 + 39) < 0)
            {
              if (v10 >= 0)
                v12 = v4;
              else
                v12 = *v4;
              if (v10 >= 0)
                v13 = *((unsigned __int8 *)v4 + 23);
              else
                v13 = (size_t)v4[1];
              sub_20AEC8090(v8 + 2, v12, v13);
            }
            else if ((*((_BYTE *)v4 + 23) & 0x80) != 0)
            {
              sub_20AEC7FCC(v8 + 2, *v4, (size_t)v4[1]);
            }
            else
            {
              v11 = *(_OWORD *)v4;
              v8[4] = v4[2];
              *v9 = v11;
            }
          }
          v15 = v4[3];
          v14 = (unint64_t *)v4[4];
          if (v14)
          {
            v16 = v14 + 1;
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v18 = (std::__shared_weak_count *)v8[6];
          v8[5] = v15;
          v8[6] = v14;
          if (!v18)
            goto LABEL_25;
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
            v21 = (void **)*v8;
            if ((*((char *)v8 + 39) & 0x80000000) == 0)
            {
LABEL_26:
              *(_OWORD *)__p = *v9;
              v92 = v8[4];
              goto LABEL_29;
            }
          }
          else
          {
LABEL_25:
            v21 = (void **)*v8;
            if ((*((char *)v8 + 39) & 0x80000000) == 0)
              goto LABEL_26;
          }
          sub_20AEC60F4(__p, v8[2], (unint64_t)v8[3]);
LABEL_29:
          if (SHIBYTE(v92) >= 0)
            v22 = (uint64_t *)__p;
          else
            v22 = (uint64_t *)__p[0];
          if (SHIBYTE(v92) >= 0)
            v23 = HIBYTE(v92);
          else
            v23 = (unint64_t)__p[1];
          v24 = sub_20AEC7B80((uint64_t)&v93, v22, v23);
          v25 = v24;
          if (SHIBYTE(v92) < 0)
          {
            operator delete(__p[0]);
            v8[1] = (void *)v25;
            v3 = *(_QWORD *)(a1 + 8);
            if (!v3)
              goto LABEL_71;
          }
          else
          {
            v8[1] = (void *)v24;
            v3 = *(_QWORD *)(a1 + 8);
            if (!v3)
              goto LABEL_71;
          }
          v26 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
          v26.i16[0] = vaddlv_u8(v26);
          if (v26.u32[0] > 1uLL)
          {
            v27 = v25;
            if (v3 <= v25)
              v27 = v25 % v3;
          }
          else
          {
            v27 = (v3 - 1) & v25;
          }
          v28 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v27);
          if (v28)
          {
            v29 = *v28;
            if (*v28)
            {
              if (v26.u32[0] < 2uLL)
              {
                while (1)
                {
                  v33 = v29[1];
                  if (v33 == v25)
                  {
                    v34 = *((char *)v8 + 39);
                    if (v34 >= 0)
                      v35.__data_ = (const std::string_view::value_type *)(v8 + 2);
                    else
                      v35.__data_ = (const std::string_view::value_type *)v8[2];
                    if (v34 >= 0)
                      v35.__size_ = *((unsigned __int8 *)v8 + 39);
                    else
                      v35.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)v8[3];
                    if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v29 + 2), v35))
                      goto LABEL_108;
                  }
                  else if ((v33 & (v3 - 1)) != v27)
                  {
                    goto LABEL_71;
                  }
                  v29 = (uint64_t *)*v29;
                  if (!v29)
                    goto LABEL_71;
                }
              }
              do
              {
                v30 = v29[1];
                if (v30 == v25)
                {
                  v31 = *((char *)v8 + 39);
                  if (v31 >= 0)
                    v32.__data_ = (const std::string_view::value_type *)(v8 + 2);
                  else
                    v32.__data_ = (const std::string_view::value_type *)v8[2];
                  if (v31 >= 0)
                    v32.__size_ = *((unsigned __int8 *)v8 + 39);
                  else
                    v32.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)v8[3];
                  if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v29 + 2), v32))
                    goto LABEL_108;
                }
                else
                {
                  if (v30 >= v3)
                    v30 %= v3;
                  if (v30 != v27)
                    break;
                }
                v29 = (uint64_t *)*v29;
              }
              while (v29);
            }
          }
LABEL_71:
          v36 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
          v37 = *(float *)(a1 + 32);
          if (!v3 || (float)(v37 * (float)v3) < v36)
          {
            v38 = (v3 & (v3 - 1)) != 0;
            if (v3 < 3)
              v38 = 1;
            v39 = v38 | (2 * v3);
            v40 = vcvtps_u32_f32(v36 / v37);
            if (v39 <= v40)
              prime = v40;
            else
              prime = v39;
            if (prime == 1)
            {
              prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              prime = std::__next_prime(prime);
            }
            v42 = *(int8x8_t *)(a1 + 8);
            if (prime > *(_QWORD *)&v42)
              goto LABEL_83;
            if (prime < *(_QWORD *)&v42)
            {
              v43 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
              if (*(_QWORD *)&v42 < 3uLL
                || (v44 = (uint8x8_t)vcnt_s8(v42), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
              {
                v43 = std::__next_prime(v43);
              }
              else
              {
                v45 = 1 << -(char)__clz(v43 - 1);
                if (v43 >= 2)
                  v43 = v45;
              }
              if (prime <= v43)
                prime = v43;
              if (prime < *(_QWORD *)&v42)
LABEL_83:
                sub_20AEC91EC(a1, prime);
            }
          }
          v46 = *(int8x8_t *)(a1 + 8);
          v47 = (unint64_t)v8[1];
          v48 = (uint8x8_t)vcnt_s8(v46);
          v48.i16[0] = vaddlv_u8(v48);
          if (v48.u32[0] > 1uLL)
          {
            if (v47 >= *(_QWORD *)&v46)
              v47 %= *(_QWORD *)&v46;
          }
          else
          {
            v47 &= *(_QWORD *)&v46 - 1;
          }
          v49 = *(void ***)(*(_QWORD *)a1 + 8 * v47);
          if (v49)
          {
            *v8 = *v49;
          }
          else
          {
            *v8 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v8;
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v47) = v89;
            if (!*v8)
              goto LABEL_107;
            v50 = *((_QWORD *)*v8 + 1);
            if (v48.u32[0] > 1uLL)
            {
              if (v50 >= *(_QWORD *)&v46)
                v50 %= *(_QWORD *)&v46;
            }
            else
            {
              v50 &= *(_QWORD *)&v46 - 1;
            }
            v49 = (void **)(*(_QWORD *)a1 + 8 * v50);
          }
          *v49 = v8;
LABEL_107:
          ++*(_QWORD *)(a1 + 24);
LABEL_108:
          v4 += 5;
          if (v21)
          {
            v8 = v21;
            if (v4 != a3)
              continue;
          }
          goto LABEL_112;
        }
      }
      v21 = 0;
LABEL_112:
      if (v21)
      {
        do
        {
          while (1)
          {
LABEL_118:
            v51 = (void **)*v21;
            v52 = (std::__shared_weak_count *)v21[6];
            if (v52)
            {
              v53 = (unint64_t *)&v52->__shared_owners_;
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            if (*((char *)v21 + 39) < 0)
              break;
            operator delete(v21);
            v21 = v51;
            if (!v51)
              goto LABEL_124;
          }
          operator delete(v21[2]);
          operator delete(v21);
          v21 = v51;
        }
        while (v51);
      }
    }
  }
LABEL_124:
  if (v4 == a3)
    return;
  do
  {
    while (1)
    {
      if (*((char *)v4 + 23) < 0)
      {
        sub_20AEC60F4(__p, *v4, (unint64_t)v4[1]);
      }
      else
      {
        v55 = *(_OWORD *)v4;
        v92 = v4[2];
        *(_OWORD *)__p = v55;
      }
      v56 = SHIBYTE(v92) >= 0 ? (uint64_t *)__p : (uint64_t *)__p[0];
      v57 = SHIBYTE(v92) >= 0 ? (void *)HIBYTE(v92) : __p[1];
      v58 = sub_20AEC7B80((uint64_t)&v93, v56, (unint64_t)v57);
      if (SHIBYTE(v92) < 0)
      {
        operator delete(__p[0]);
        v59 = *(_QWORD *)(a1 + 8);
        if (!v59)
          goto LABEL_171;
      }
      else
      {
        v59 = *(_QWORD *)(a1 + 8);
        if (!v59)
          goto LABEL_171;
      }
      v60 = (uint8x8_t)vcnt_s8((int8x8_t)v59);
      v60.i16[0] = vaddlv_u8(v60);
      if (v60.u32[0] > 1uLL)
      {
        v3 = v58;
        if (v58 >= v59)
          v3 = v58 % v59;
      }
      else
      {
        v3 = (v59 - 1) & v58;
      }
      v61 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
      if (v61)
      {
        v62 = *v61;
        if (*v61)
          break;
      }
LABEL_171:
      v69 = operator new(0x38uLL);
      __p[0] = v69;
      __p[1] = (void *)(a1 + 16);
      LOBYTE(v92) = 0;
      *v69 = 0;
      v69[1] = v58;
      v70 = v69 + 2;
      if (*((char *)v4 + 23) < 0)
      {
        sub_20AEC60F4(v70, *v4, (unint64_t)v4[1]);
      }
      else
      {
        v71 = *(_OWORD *)v4;
        v69[4] = v4[2];
        *(_OWORD *)v70 = v71;
      }
      v69[5] = v4[3];
      v72 = (char *)v4[4];
      v69[6] = v72;
      if (v72)
      {
        v73 = (unint64_t *)(v72 + 8);
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      LOBYTE(v92) = 1;
      v75 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v76 = *(float *)(a1 + 32);
      if (v59 && (float)(v76 * (float)v59) >= v75)
        goto LABEL_205;
      v77 = (v59 & (v59 - 1)) != 0;
      if (v59 < 3)
        v77 = 1;
      v78 = v77 | (2 * v59);
      v79 = vcvtps_u32_f32(v75 / v76);
      if (v78 <= v79)
        v80 = v79;
      else
        v80 = v78;
      if (v80 == 1)
      {
        v80 = 2;
      }
      else if ((v80 & (v80 - 1)) != 0)
      {
        v80 = std::__next_prime(v80);
      }
      v81 = *(int8x8_t *)(a1 + 8);
      if (v80 > *(_QWORD *)&v81)
        goto LABEL_189;
      if (v80 < *(_QWORD *)&v81)
      {
        v82 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (*(_QWORD *)&v81 < 3uLL || (v83 = (uint8x8_t)vcnt_s8(v81), v83.i16[0] = vaddlv_u8(v83), v83.u32[0] > 1uLL))
        {
          v82 = std::__next_prime(v82);
        }
        else
        {
          v84 = 1 << -(char)__clz(v82 - 1);
          if (v82 >= 2)
            v82 = v84;
        }
        if (v80 <= v82)
          v80 = v82;
        if (v80 < *(_QWORD *)&v81)
LABEL_189:
          sub_20AEC91EC(a1, v80);
      }
      v59 = *(_QWORD *)(a1 + 8);
      v85 = v59 - 1;
      if ((v59 & (v59 - 1)) == 0)
      {
        v3 = v85 & v58;
        v86 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v85 & v58));
        v87 = __p[0];
        if (!v86)
          goto LABEL_208;
        goto LABEL_206;
      }
      if (v58 < v59)
      {
        v3 = v58;
LABEL_205:
        v86 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
        v87 = __p[0];
        if (!v86)
          goto LABEL_208;
        goto LABEL_206;
      }
      v3 = v58 % v59;
      v86 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v58 % v59));
      v87 = __p[0];
      if (!v86)
      {
LABEL_208:
        *v87 = *(_QWORD *)(a1 + 16);
        *(void **)(a1 + 16) = __p[0];
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
        if (*(_QWORD *)__p[0])
        {
          v88 = *(_QWORD *)(*(_QWORD *)__p[0] + 8);
          if ((v59 & (v59 - 1)) != 0)
          {
            if (v88 >= v59)
              v88 %= v59;
          }
          else
          {
            v88 &= v59 - 1;
          }
          *(void **)(*(_QWORD *)a1 + 8 * v88) = __p[0];
        }
        goto LABEL_214;
      }
LABEL_206:
      *v87 = *v86;
      *v86 = __p[0];
LABEL_214:
      ++*(_QWORD *)(a1 + 24);
      v4 += 5;
      if (v4 == a3)
        return;
    }
    if (v60.u32[0] < 2uLL)
    {
      while (1)
      {
        v66 = v62[1];
        if (v66 == v58)
        {
          v67 = *((char *)v4 + 23);
          if (v67 >= 0)
            v68.__data_ = (const std::string_view::value_type *)v4;
          else
            v68.__data_ = (const std::string_view::value_type *)*v4;
          if (v67 >= 0)
            v68.__size_ = *((unsigned __int8 *)v4 + 23);
          else
            v68.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)v4[1];
          if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v62 + 2), v68))
            goto LABEL_169;
        }
        else if ((v66 & (v59 - 1)) != v3)
        {
          goto LABEL_171;
        }
        v62 = (uint64_t *)*v62;
        if (!v62)
          goto LABEL_171;
      }
    }
    while (1)
    {
      v63 = v62[1];
      if (v63 == v58)
        break;
      if (v63 >= v59)
        v63 %= v59;
      if (v63 != v3)
        goto LABEL_171;
LABEL_147:
      v62 = (uint64_t *)*v62;
      if (!v62)
        goto LABEL_171;
    }
    v64 = *((char *)v4 + 23);
    if (v64 >= 0)
      v65.__data_ = (const std::string_view::value_type *)v4;
    else
      v65.__data_ = (const std::string_view::value_type *)*v4;
    if (v64 >= 0)
      v65.__size_ = *((unsigned __int8 *)v4 + 23);
    else
      v65.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)v4[1];
    if (std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v62 + 2), v65))
      goto LABEL_147;
LABEL_169:
    v4 += 5;
  }
  while (v4 != a3);
}

void sub_20B1F7C2C(void *a1)
{
  char *v1;

  __cxa_begin_catch(a1);
  sub_20B1F3E78(v1);
  __cxa_rethrow();
}

void sub_20B1F7C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B1F7C98((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B1F7C78(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *sub_20B1F7C98(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
          if ((*(char *)(v2 + 39) & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_8;
        }
      }
      if (*(char *)(v2 + 39) < 0)
LABEL_8:
        operator delete(*(void **)(v2 + 16));
    }
LABEL_9:
    operator delete((void *)v2);
  }
  return a1;
}

void sub_20B1F7D30(char *a1)
{
  if (a1)
  {
    sub_20B1F7D30(*(_QWORD *)a1);
    sub_20B1F7D30(*((_QWORD *)a1 + 1));
    sub_20B1F7D90(*((_QWORD **)a1 + 8));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void sub_20B1F7D90(_QWORD *a1)
{
  if (a1)
  {
    sub_20B1F7D90(*a1);
    sub_20B1F7D90(a1[1]);
    operator delete(a1);
  }
}

_QWORD *sub_20B1F7DC8(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C41F3B0;
  a1[2] = &unk_24C41F4F8;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    sub_20B51A350((_QWORD *)(v2 + 8));
    MEMORY[0x20BD3583C](v2, 0x10F2C40853B94B7);
  }
  a1[2] = off_24C41F618;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_20B1F7E44(uint64_t a1, uint64_t a2, unint64_t *a3, std::string *a4)
{
  uint64_t result;
  char v8;
  _DWORD v9[6];
  int v10;
  std::string v11;
  std::string **v12;
  std::string *v13;
  std::string *v14;
  _DWORD *v15;
  std::string *v16;
  std::string *v17;

  v10 = 0;
  sub_20AFAC918(v9, "Failed to parse ");
  sub_20AFF447C((uint64_t)&v8, (uint64_t)v9, a2);
  v13 = (std::string *)v9;
  v14 = (std::string *)" row starting at file_pos ";
  v15 = v9;
  v16 = (std::string *)" row starting at file_pos ";
  v17 = (std::string *)" row starting at file_pos ";
  if (v10 == -1)
    sub_20AECFAB8();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  ((void (*)(std::string *, _DWORD *))off_24C4113B0[v10])(&v11, v9);
  std::to_string(&v11, *a3);
  v13 = (std::string *)v9;
  v14 = &v11;
  v15 = v9;
  v16 = &v11;
  v17 = &v11;
  if (v10 == -1)
    sub_20AECFAB8();
  v12 = &v13;
  ((void (*)(std::string ***, _DWORD *))off_24C4110D8[v10])(&v12, v9);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v13 = (std::string *)v9;
  v14 = (std::string *)": ";
  v15 = v9;
  v16 = (std::string *)": ";
  v17 = (std::string *)": ";
  if (v10 == -1)
    sub_20AECFAB8();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  ((void (*)(std::string *, _DWORD *))off_24C4113C8[v10])(&v11, v9);
  v13 = (std::string *)v9;
  v14 = a4;
  v15 = v9;
  v16 = a4;
  v17 = a4;
  if (v10 == -1)
    sub_20AECFAB8();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  ((void (*)(std::string *, _DWORD *))off_24C4110F0[v10])(&v11, v9);
  if (v10 == -1)
    sub_20AECFAB8();
  v13 = &v11;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C410E30[v10])(&v13, v9);
  if (v10 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C410E18[v10])(&v13, v9);
  return result;
}

void sub_20B1F8048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20AECFA60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1F8098(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_24C41E890;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(void))(a1 + 24))();
  return a1;
}

void sub_20B1F80FC(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C41F3B0;
  a1[2] = &unk_24C41F4F8;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    sub_20B51A350((_QWORD *)(v2 + 8));
    MEMORY[0x20BD3583C](v2, 0x10F2C40853B94B7);
  }
  a1[2] = off_24C41F618;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B1F8188(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16);
}

uint64_t sub_20B1F8194(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
}

void sub_20B1F81A0(uint64_t a1, _BYTE *a2)
{
  sub_20B518F1C(*(_QWORD *)(a1 + 48), a2);
}

void sub_20B1F81A8(uint64_t a1, _BYTE *a2)
{
  sub_20B5183CC(*(_QWORD *)(a1 + 48), a2);
}

void sub_20B1F81B0(uint64_t a1, _WORD *a2)
{
  sub_20B518610(*(_QWORD *)(a1 + 48), a2);
}

void sub_20B1F81B8(uint64_t a1, _DWORD *a2)
{
  sub_20B5187A4(*(_QWORD *)(a1 + 48), a2);
}

void sub_20B1F81C0(uint64_t a1, _QWORD *a2)
{
  sub_20B518938(*(_QWORD *)(a1 + 48), a2);
}

void sub_20B1F81C8(uint64_t a1, _QWORD *a2)
{
  sub_20B518AFC(*(_QWORD *)(a1 + 48), a2);
}

void sub_20B1F81D0(uint64_t a1, _BYTE *a2)
{
  sub_20B51852C(*(_QWORD *)(a1 + 48), a2);
}

void sub_20B1F81D8(uint64_t a1, _BYTE *a2)
{
  sub_20B51847C(*(_QWORD *)(a1 + 48), a2);
}

void sub_20B1F81E0(uint64_t a1, _WORD *a2)
{
  sub_20B5186C0(*(_QWORD *)(a1 + 48), a2);
}

void sub_20B1F81E8(uint64_t a1, _DWORD *a2)
{
  sub_20B518854(*(_QWORD *)(a1 + 48), a2);
}

void sub_20B1F81F0(uint64_t a1, _QWORD *a2)
{
  sub_20B518A20(*(_QWORD *)(a1 + 48), a2);
}

void sub_20B1F81F8(uint64_t a1, _QWORD *a2)
{
  sub_20B518BE4(*(_QWORD *)(a1 + 48), a2);
}

void sub_20B1F8200(uint64_t a1, float *a2)
{
  sub_20B518CC0(*(_QWORD *)(a1 + 48), a2);
}

void sub_20B1F8208(uint64_t a1, double *a2)
{
  sub_20B518DF0(*(_QWORD *)(a1 + 48), a2);
}

void sub_20B1F8210(uint64_t a1, void **a2)
{
  sub_20B518FF8(*(_QWORD *)(a1 + 48), a2);
}

void sub_20B1F8218(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = a2;
    v5 = *(_QWORD *)(a1 + 48);
    do
    {
      sub_20B518F1C(v5, a3++);
      --v4;
    }
    while (v4);
  }
}

void sub_20B1F8260(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = a2;
    v5 = *(_QWORD *)(a1 + 48);
    do
    {
      sub_20B5183CC(v5, a3++);
      --v4;
    }
    while (v4);
  }
}

void sub_20B1F82A8(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 2 * a2;
    do
    {
      sub_20B518610(v4, a3++);
      v5 -= 2;
    }
    while (v5);
  }
}

void sub_20B1F82F0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 4 * a2;
    do
    {
      sub_20B5187A4(v4, a3++);
      v5 -= 4;
    }
    while (v5);
  }
}

void sub_20B1F8338(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 8 * a2;
    do
    {
      sub_20B518938(v4, a3++);
      v5 -= 8;
    }
    while (v5);
  }
}

void sub_20B1F8380(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 8 * a2;
    do
    {
      sub_20B518AFC(v4, a3++);
      v5 -= 8;
    }
    while (v5);
  }
}

void sub_20B1F83C8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = a2;
    v5 = *(_QWORD *)(a1 + 48);
    do
    {
      sub_20B51852C(v5, a3++);
      --v4;
    }
    while (v4);
  }
}

void sub_20B1F8410(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = a2;
    v5 = *(_QWORD *)(a1 + 48);
    do
    {
      sub_20B51847C(v5, a3++);
      --v4;
    }
    while (v4);
  }
}

void sub_20B1F8458(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 2 * a2;
    do
    {
      sub_20B5186C0(v4, a3++);
      v5 -= 2;
    }
    while (v5);
  }
}

void sub_20B1F84A0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 4 * a2;
    do
    {
      sub_20B518854(v4, a3++);
      v5 -= 4;
    }
    while (v5);
  }
}

void sub_20B1F84E8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 8 * a2;
    do
    {
      sub_20B518A20(v4, a3++);
      v5 -= 8;
    }
    while (v5);
  }
}

void sub_20B1F8530(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 8 * a2;
    do
    {
      sub_20B518BE4(v4, a3++);
      v5 -= 8;
    }
    while (v5);
  }
}

void sub_20B1F8578(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 4 * a2;
    do
    {
      sub_20B518CC0(v4, a3++);
      v5 -= 4;
    }
    while (v5);
  }
}

void sub_20B1F85C0(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 8 * a2;
    do
    {
      sub_20B518DF0(v4, a3++);
      v5 -= 8;
    }
    while (v5);
  }
}

void sub_20B1F8608(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 24 * a2;
    do
    {
      sub_20B518FF8(v4, a3);
      a3 += 3;
      v5 -= 24;
    }
    while (v5);
  }
}

void *sub_20B1F8654(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::bad_cast *exception;
  std::bad_cast *v6;
  size_t __n;
  void *__src;

  v3 = *(_QWORD *)(a1 + 48);
  LODWORD(__n) = 0;
  __src = 0;
  sub_20B5191B4(v3, (uint64_t)&__n);
  if (*(_QWORD *)a2 != __n)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v6 = sub_20B519294(exception);
    __cxa_throw(v6, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
  }
  return memcpy(*(void **)(a2 + 8), __src, __n);
}

void sub_20B1F86D4(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *(a1 - 2) = &off_24C41F3B0;
  *a1 = &unk_24C41F4F8;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    sub_20B51A350((_QWORD *)(v2 + 8));
    MEMORY[0x20BD3583C](v2, 0x10F2C40853B94B7);
  }
  *a1 = off_24C41F618;
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void sub_20B1F874C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *(a1 - 2) = &off_24C41F3B0;
  *a1 = &unk_24C41F4F8;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    sub_20B51A350((_QWORD *)(v2 + 8));
    MEMORY[0x20BD3583C](v2, 0x10F2C40853B94B7);
  }
  *a1 = off_24C41F618;
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B1F87E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = a1[2];
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  v4 = *(_QWORD *)(v2 - 16) - result + *(_QWORD *)(v2 - 8);
  if (v4)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v4);
  a1[2] -= 16;
  return result;
}

uint64_t sub_20B1F8840(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 128) || *(_BYTE *)(a1 + 120) || !*(_BYTE *)(a1 + 112))
    return a1;
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0)
      operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
  }
  if (!*(_BYTE *)(a1 + 40) || (*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20B1F88C8()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B1F88DC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  void **v23;
  void **v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  BOOL v29;
  char v30;
  void *__p[2];
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];
  void *v35;
  char v36;
  char v37;
  void *v38;
  char v39;
  char v40;
  void *v41;
  char v42;
  char v43;
  void **v44;
  void **v45;
  char v46;
  __int128 v47;
  _BYTE v48[23];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[105];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(uint64_t **)(a1 + 16);
  v3 = *v1;
  v4 = v1[1];
  *(_BYTE *)(v3 + 128) = 1;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_WORD *)(v3 + 130) = 0;
  *(_BYTE *)(v3 + 132) = 0;
  LODWORD(v47) = 3;
  sub_20B514490(v3, &v47);
  if (v47 >= 3)
    v5 = 3;
  else
    v5 = v47;
  if (v47 > 2)
  {
    ++*(_QWORD *)(v3 + 80);
    if (*(_BYTE *)(v3 + 128))
      v6 = *(_BYTE *)(v3 + 131) == 0;
    else
      v6 = 1;
    if (v6)
    {
      sub_20B51680C(v3, (uint64_t)&v47);
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v7 = v47;
      *(_QWORD *)(v4 + 16) = *(_QWORD *)v48;
      *(_OWORD *)v4 = v7;
      ++*(_QWORD *)(v3 + 104);
    }
    else
    {
      *(_BYTE *)(v3 + 132) = 1;
    }
    sub_20B514DE0(v3, (_QWORD *)(v4 + 24));
    if (v5 == 1)
    {
      LODWORD(v47) = 2;
      sub_20B514490(v3, &v47);
      v8 = v47;
      if (v47 >= 2)
        v9 = 2;
      else
        v9 = v47;
      if (v9 < 2)
      {
        *(_QWORD *)&v47 = 0;
        BYTE8(v47) = 0;
        sub_20B514B8C(v3, &v47);
        LOBYTE(__p[0]) = 0;
        sub_20B513B4C(v3, __p);
        v16 = (char)__p[0];
        *(_QWORD *)(v4 + 40) = v47;
        *(_BYTE *)(v4 + 48) = v16;
        if (v8 <= 1)
          goto LABEL_67;
      }
      else
      {
        sub_20B514B8C(v3, (_QWORD *)(v4 + 40));
        LOBYTE(v47) = 0;
        sub_20B513B4C(v3, &v47);
        *(_BYTE *)(v4 + 48) = v47;
        if (v8 <= 1)
          goto LABEL_67;
      }
      goto LABEL_49;
    }
    LODWORD(v47) = 6;
    sub_20B514490(v3, &v47);
    v12 = v47;
    if (v47 >= 6)
      v13 = 6;
    else
      v13 = v47;
    if (v13 < 3)
      sub_20B0E0A94((uint64_t)&v47, v3, v4 + 32, v13);
    else
      sub_20B0E0C84(v3, v4 + 32, v13);
    if (v12 >= 3)
    {
LABEL_49:
      if (*(_BYTE *)(v3 + 131))
        goto LABEL_67;
      while (1)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v3 + 16) + *(_QWORD *)(**(_QWORD **)(v3 + 16) - 24) + 32) & 2) != 0)
          goto LABEL_67;
        sub_20B51680C(v3, (uint64_t)&v47);
        if ((v48[7] & 0x80000000) != 0)
        {
          if (*((_QWORD *)&v47 + 1) == 1 && *(unsigned __int8 *)(v3 + 72) == *(unsigned __int8 *)v47)
          {
LABEL_62:
            v18 = 0;
            if ((v48[7] & 0x80000000) != 0)
              goto LABEL_65;
            goto LABEL_51;
          }
        }
        else if (v48[7] == 1 && *(unsigned __int8 *)(v3 + 72) == v47)
        {
          goto LABEL_62;
        }
        v18 = 1;
        if ((v48[7] & 0x80000000) != 0)
LABEL_65:
          operator delete((void *)v47);
LABEL_51:
        if (*(_BYTE *)(v3 + 131))
          v17 = 0;
        else
          v17 = v18;
        if ((v17 & 1) == 0)
          goto LABEL_67;
      }
    }
    while (1)
    {
LABEL_67:
      if (*(_BYTE *)(v3 + 131)
        || (*(_BYTE *)(*(_QWORD *)(v3 + 16) + *(_QWORD *)(**(_QWORD **)(v3 + 16) - 24) + 32) & 2) != 0)
      {
        goto LABEL_142;
      }
      sub_20B51680C(v3, (uint64_t)&v47);
      if ((v48[7] & 0x80000000) != 0)
      {
        if (*((_QWORD *)&v47 + 1) == 1 && *(unsigned __int8 *)(v3 + 72) == *(unsigned __int8 *)v47)
        {
LABEL_75:
          v19 = 0;
          if ((v48[7] & 0x80000000) != 0)
            goto LABEL_78;
          goto LABEL_66;
        }
      }
      else if (v48[7] == 1 && *(unsigned __int8 *)(v3 + 72) == v47)
      {
        goto LABEL_75;
      }
      v19 = 1;
      if ((v48[7] & 0x80000000) != 0)
LABEL_78:
        operator delete((void *)v47);
LABEL_66:
      if ((v19 & 1) == 0)
        goto LABEL_142;
    }
  }
  LOBYTE(v47) = 0;
  v51 = 0u;
  v52 = 0u;
  memset(v53, 0, sizeof(v53));
  *(_OWORD *)&v48[7] = 0u;
  v49 = 0u;
  v50 = 0u;
  ++*(_QWORD *)(v3 + 80);
  if (*(_BYTE *)(v3 + 128) && *(_BYTE *)(v3 + 131))
  {
    *(_BYTE *)(v3 + 132) = 1;
  }
  else
  {
    sub_20B51680C(v3, (uint64_t)__p);
    if ((v48[7] & 0x80000000) != 0)
      operator delete((void *)v47);
    v47 = *(_OWORD *)__p;
    *(_QWORD *)v48 = v32;
    ++*(_QWORD *)(v3 + 104);
  }
  sub_20B514DE0(v3, &v48[8]);
  if (v5 == 1)
  {
    LODWORD(__p[0]) = 2;
    sub_20B514490(v3, __p);
    v10 = __p[0];
    if (LODWORD(__p[0]) >= 2)
      v11 = 2;
    else
      v11 = __p[0];
    if (v11 < 2)
    {
      __p[0] = 0;
      LOBYTE(__p[1]) = 0;
      sub_20B514B8C(v3, __p);
      v30 = 0;
      sub_20B513B4C(v3, &v30);
      *(void **)((char *)&v49 + 1) = __p[0];
      BYTE9(v49) = v30;
      if (v10 <= 1)
        goto LABEL_82;
    }
    else
    {
      sub_20B514B8C(v3, (__int128 *)((char *)&v49 + 1));
      LOBYTE(__p[0]) = 0;
      sub_20B513B4C(v3, __p);
      BYTE9(v49) = __p[0];
      if (v10 <= 1)
        goto LABEL_82;
    }
  }
  else
  {
    LODWORD(__p[0]) = 6;
    sub_20B514490(v3, __p);
    v14 = __p[0];
    if (LODWORD(__p[0]) >= 6)
      v15 = 6;
    else
      v15 = __p[0];
    if (v15 < 3)
      sub_20B0E0A94((uint64_t)__p, v3, (uint64_t)&v48[16], v15);
    else
      sub_20B0E0C84(v3, (uint64_t)&v48[16], v15);
    if (v14 < 3)
      goto LABEL_82;
  }
  if (!*(_BYTE *)(v3 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v3 + 16) + *(_QWORD *)(**(_QWORD **)(v3 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20B51680C(v3, (uint64_t)__p);
      if (SHIBYTE(v32) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(v3 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_95:
          v21 = 0;
          if (SHIBYTE(v32) < 0)
            goto LABEL_98;
          goto LABEL_84;
        }
      }
      else if (SHIBYTE(v32) == 1 && *(unsigned __int8 *)(v3 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_95;
      }
      v21 = 1;
      if (SHIBYTE(v32) < 0)
LABEL_98:
        operator delete(__p[0]);
LABEL_84:
      if (*(_BYTE *)(v3 + 131))
        v20 = 0;
      else
        v20 = v21;
    }
    while ((v20 & 1) != 0);
  }
LABEL_82:
  if ((v48[7] & 0x80000000) != 0)
  {
    sub_20AEC60F4(__p, (void *)v47, *((unint64_t *)&v47 + 1));
  }
  else
  {
    *(_OWORD *)__p = v47;
    v32 = *(_QWORD *)v48;
  }
  v33 = *(_QWORD *)&v48[8];
  sub_20B0D1898((uint64_t)v34, (uint64_t)&v48[16]);
  if (*(char *)(v4 + 23) < 0)
    operator delete(*(void **)v4);
  v22 = *(_OWORD *)__p;
  *(_QWORD *)(v4 + 16) = v32;
  *(_OWORD *)v4 = v22;
  HIBYTE(v32) = 0;
  LOBYTE(__p[0]) = 0;
  *(_QWORD *)(v4 + 24) = v33;
  sub_20B0DAD74(v4 + 32, (uint64_t)v34);
  if (v46)
  {
    v23 = v44;
    if (v44)
    {
      v24 = v45;
      v25 = v44;
      if (v45 != v44)
      {
        do
        {
          if (*((char *)v24 - 1) < 0)
            operator delete(*(v24 - 3));
          v24 -= 3;
        }
        while (v24 != v23);
        v25 = v44;
      }
      v45 = v23;
      operator delete(v25);
    }
  }
  if (v43 && v42 < 0)
    operator delete(v41);
  if (v40 && v39 < 0)
    operator delete(v38);
  if (v37 && v36 < 0)
    operator delete(v35);
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  if (v53[97])
  {
    v26 = *(_QWORD *)&v53[73];
    if (*(_QWORD *)&v53[73])
    {
      v27 = *(_QWORD *)&v53[81];
      v28 = *(void **)&v53[73];
      if (*(_QWORD *)&v53[81] != *(_QWORD *)&v53[73])
      {
        do
        {
          if (*(char *)(v27 - 1) < 0)
            operator delete(*(void **)(v27 - 24));
          v27 -= 24;
        }
        while (v27 != v26);
        v28 = *(void **)&v53[73];
      }
      *(_QWORD *)&v53[81] = v26;
      operator delete(v28);
    }
  }
  if (v53[65] && (v53[64] & 0x80000000) != 0)
    operator delete(*(void **)&v53[41]);
  if (v53[33] && (v53[32] & 0x80000000) != 0)
    operator delete(*(void **)&v53[9]);
  if (BYTE9(v51) && SBYTE8(v51) < 0)
    operator delete(*(void **)((char *)&v50 + 1));
  if ((v48[7] & 0x80000000) != 0)
    operator delete((void *)v47);
LABEL_142:
  v29 = sub_20B516B94(v3);
  if (*(_BYTE *)(v2 + 128) && !*(_BYTE *)(v2 + 120) && *(_BYTE *)(v2 + 112))
  {
    if (*(_BYTE *)(v2 + 104))
    {
      if (*(char *)(v2 + 103) < 0)
        operator delete(*(void **)(v2 + 80));
      if (*(char *)(v2 + 71) < 0)
        operator delete(*(void **)(v2 + 48));
    }
    if (*(_BYTE *)(v2 + 40) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
  }
  *(_BYTE *)v2 = v29;
  *(_BYTE *)(v2 + 120) = 1;
  *(_BYTE *)(v2 + 128) = 1;
}

void sub_20B1F90CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  char a69;
  char a70;
  char a72;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  void *v76;

  if (a72)
  {
    v74 = *(_QWORD *)(v72 + 176);
    if (v74)
    {
      v75 = *(_QWORD *)(v72 + 184);
      v76 = *(void **)(v72 + 176);
      if (v75 != v74)
      {
        do
        {
          if (*(char *)(v75 - 1) < 0)
            operator delete(*(void **)(v75 - 24));
          v75 -= 24;
        }
        while (v75 != v74);
        v76 = *(void **)(v72 + 176);
      }
      *(_QWORD *)(v72 + 184) = v74;
      operator delete(v76);
    }
  }
  if (a70 && a69 < 0)
    operator delete(*(void **)(v72 + 144));
  if (a63 && a62 < 0)
    operator delete(*(void **)(v72 + 112));
  if (a53 && a52 < 0)
    operator delete(*(void **)(v72 + 56));
  if (a42 < 0)
  {
    operator delete(*(void **)v72);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B1F91AC(std::string *this, _QWORD *a2, _QWORD *a3)
{
  _BOOL4 v6;
  int v7;
  int v8;
  std::string::value_type *v9;
  std::string::value_type v10;
  uint64_t v11;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  while (1)
  {
    if (!a2)
    {
      if (!a3)
        return;
      a2 = 0;
      if (a3[3] != a3[4])
        goto LABEL_20;
      v6 = 1;
      goto LABEL_17;
    }
    if (a2[3] != a2[4])
    {
      if (!a3)
        goto LABEL_20;
      if (a3[3] != a3[4])
        return;
      v6 = 0;
      goto LABEL_17;
    }
    v7 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
    v6 = v7 == -1;
    if (v7 == -1)
      a2 = 0;
    if (a3)
      break;
    if (v7 == -1)
      return;
    a3 = 0;
    v9 = (std::string::value_type *)a2[3];
    if (v9 == (std::string::value_type *)a2[4])
    {
LABEL_24:
      v10 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
      goto LABEL_25;
    }
LABEL_21:
    v10 = *v9;
LABEL_25:
    std::string::push_back(this, v10);
    v11 = a2[3];
    if (v11 == a2[4])
      (*(void (**)(_QWORD *))(*a2 + 80))(a2);
    else
      a2[3] = v11 + 1;
  }
  if (a3[3] != a3[4])
  {
    if (v7 != -1)
      return;
LABEL_20:
    v9 = (std::string::value_type *)a2[3];
    if (v9 == (std::string::value_type *)a2[4])
      goto LABEL_24;
    goto LABEL_21;
  }
LABEL_17:
  v8 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  if (v8 == -1)
    a3 = 0;
  if (v6 != (v8 == -1))
    goto LABEL_20;
}

void sub_20B1F92F4(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_20B1F9310(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B1F9324(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_24C41E890;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(void))(a1 + 24))();
  JUMPOUT(0x20BD3583CLL);
}

char *sub_20B1F93A0(uint64_t *a1, _BYTE *a2)
{
  char *v4;
  char *result;
  char v6;

  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  v6 = 0;
  result = sub_20B4556BC(v4, &v6);
  *a2 = v6;
  return result;
}

void sub_20B1F93EC(uint64_t *a1, _BYTE *a2)
{
  char *v4;
  _QWORD *exception;
  uint64_t v6;

  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  v6 = 0;
  sub_20B45540C(v4, &v6);
  if (v6 != (char)v6)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20B1F9468(uint64_t *a1, _WORD *a2)
{
  char *v4;
  _QWORD *exception;
  uint64_t v6;

  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  v6 = 0;
  sub_20B45540C(v4, &v6);
  if (v6 != (__int16)v6)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20B1F94E4(uint64_t *a1, _DWORD *a2)
{
  char *v4;
  _QWORD *exception;
  uint64_t v6;

  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  v6 = 0;
  sub_20B45540C(v4, &v6);
  if (v6 != (int)v6)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20B1F9560(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  v5 = 0;
  sub_20B45540C(v4, &v5);
  *a2 = v5;
}

void sub_20B1F95AC(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  v5 = 0;
  sub_20B45540C(v4, &v5);
  *a2 = v5;
}

void sub_20B1F95F8(uint64_t *a1, _BYTE *a2)
{
  char *v4;
  _QWORD *exception;
  unint64_t v6;

  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  v6 = 0;
  sub_20B4552C4(v4, &v6);
  if (v6 >= 0x100)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20B1F9674(uint64_t *a1, _BYTE *a2)
{
  char *v4;
  _QWORD *exception;
  uint64_t v6;

  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  v6 = 0;
  sub_20B45540C(v4, &v6);
  if (v6 != (char)v6)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20B1F96F0(uint64_t *a1, _WORD *a2)
{
  char *v4;
  _QWORD *exception;
  unint64_t v6;

  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  v6 = 0;
  sub_20B4552C4(v4, &v6);
  if (v6 >= 0x10000)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20B1F976C(uint64_t *a1, _DWORD *a2)
{
  char *v4;
  _QWORD *exception;
  unint64_t v6;

  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  v6 = 0;
  sub_20B4552C4(v4, &v6);
  if (HIDWORD(v6))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_20B1F97E8(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  v5 = 0;
  sub_20B4552C4(v4, &v5);
  *a2 = v5;
}

void sub_20B1F9834(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  v5 = 0;
  sub_20B4552C4(v4, &v5);
  *a2 = v5;
}

void sub_20B1F9880(uint64_t *a1, float *a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)sub_20B50AF4C(a1);
  ++a1[14];
  *a2 = sub_20B5112FC(v4);
}

void sub_20B1F98B8(uint64_t *a1, double *a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)sub_20B50AF4C(a1);
  ++a1[14];
  *a2 = sub_20B5113DC(v4);
}

double sub_20B1F98F0(uint64_t *a1, uint64_t a2)
{
  void **v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v4 = (void **)sub_20B50AF4C(a1);
  ++a1[14];
  v7 = 0;
  v6 = 0uLL;
  sub_20B4557C4(v4, (uint64_t)&v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_20B1F9958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1F9974(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_20B50C630(a1, (uint64_t)v3);
}

void sub_20B1F9998(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  sub_20B50BC00(v4, (uint64_t)v5);
}

void sub_20B1F99D8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  sub_20B50BDAC(v4, (uint64_t)v5);
}

void sub_20B1F9A18(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  sub_20B50BF58(v4, (uint64_t)v5);
}

void sub_20B1F9A58(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;

  v5 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  v18 = 0;
  v19 = 0;
  v20 = 0;
  sub_20B50E120(v5, (uint64_t)&v18);
  v6 = v18;
  v7 = v19;
  if (v18 != v19)
  {
    v8 = (char *)v19 - (char *)v18 - 8;
    v9 = (_QWORD *)a3;
    v10 = v18;
    if (v8 < 0x18)
      goto LABEL_11;
    v11 = (v8 >> 3) + 1;
    v12 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    v9 = (_QWORD *)(a3 + v12 * 8);
    v10 = &v18[v12];
    v13 = (__int128 *)(v18 + 2);
    v14 = (_OWORD *)(a3 + 16);
    v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v16 = *v13;
      *(v14 - 1) = *(v13 - 1);
      *v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
    if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_11:
      do
      {
        v17 = *v10++;
        *v9++ = v17;
      }
      while (v10 != v7);
    }
  }
  if (v6)
  {
    v19 = v6;
    operator delete(v6);
  }
}

void sub_20B1F9B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1F9B40(uint64_t *a1, uint64_t a2, void *a3)
{
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  v5 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_20B50E120(v5, (uint64_t)&v7);
  v6 = v7;
  if (v8 != v7)
    memmove(a3, v7, v8 - v7);
  if (v6)
  {
    v8 = v6;
    operator delete(v6);
  }
}

void sub_20B1F9BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1F9BCC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  sub_20B50B064(v4, (uint64_t)v5);
}

void sub_20B1F9C0C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  sub_20B50BCBC(v4, (uint64_t)v5);
}

void sub_20B1F9C4C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  sub_20B50BE9C(v4, (uint64_t)v5);
}

void sub_20B1F9C8C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  sub_20B50C014(v4, (uint64_t)v5);
}

void sub_20B1F9CCC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;

  v5 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  v18 = 0;
  v19 = 0;
  v20 = 0;
  sub_20B50E45C(v5, (uint64_t)&v18);
  v6 = v18;
  v7 = v19;
  if (v18 != v19)
  {
    v8 = (char *)v19 - (char *)v18 - 8;
    v9 = (_QWORD *)a3;
    v10 = v18;
    if (v8 < 0x18)
      goto LABEL_11;
    v11 = (v8 >> 3) + 1;
    v12 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    v9 = (_QWORD *)(a3 + v12 * 8);
    v10 = &v18[v12];
    v13 = (__int128 *)(v18 + 2);
    v14 = (_OWORD *)(a3 + 16);
    v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v16 = *v13;
      *(v14 - 1) = *(v13 - 1);
      *v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
    if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_11:
      do
      {
        v17 = *v10++;
        *v9++ = v17;
      }
      while (v10 != v7);
    }
  }
  if (v6)
  {
    v19 = v6;
    operator delete(v6);
  }
}

void sub_20B1F9D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1F9DB4(uint64_t *a1, uint64_t a2, void *a3)
{
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  v5 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_20B50E45C(v5, (uint64_t)&v7);
  v6 = v7;
  if (v8 != v7)
    memmove(a3, v7, v8 - v7);
  if (v6)
  {
    v8 = v6;
    operator delete(v6);
  }
}

void sub_20B1F9E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1F9E40(uint64_t *a1, uint64_t a2, float *a3)
{
  unint64_t v5;

  v5 = sub_20B50AF4C(a1);
  ++a1[14];
  sub_20B50C420(v5, a3);
}

void sub_20B1F9E74(uint64_t *a1, uint64_t a2, double *a3)
{
  unint64_t v5;

  v5 = sub_20B50AF4C(a1);
  ++a1[14];
  sub_20B50C528(v5, a3);
}

void sub_20B1F9EA8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_20B50C6F8(a1, (uint64_t)v3);
}

void sub_20B1F9ECC(uint64_t *a1, uint64_t a2)
{
  char *v4;

  v4 = (char *)sub_20B50AF4C(a1);
  ++a1[14];
  sub_20B50B064(v4, a2);
}

uint64_t *sub_20B1F9F08(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9[48];
  uint64_t v10;

  sub_20B1FA014((uint64_t)v9, a2);
  sub_20B08AC1C((uint64_t)v9, a3, &v10);
  v5 = v10;
  v10 = 0;
  *a1 = &off_24C411E78;
  a1[1] = v5;
  if (v5)
  {
    v6 = (_QWORD *)operator new();
    *v6 = &off_24C411F70;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v5;
    v7 = v10;
    a1[2] = v6;
    v10 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    a1[2] = 0;
    v10 = 0;
  }
  return sub_20B088C38(v9);
}

void sub_20B1F9FC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v5 = *(_QWORD *)(v3 - 40);
  *(_QWORD *)(v3 - 40) = 0;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    sub_20B088C38((uint64_t *)va);
    _Unwind_Resume(a1);
  }
  sub_20B088C38((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1FA014(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_DWORD *)(result + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 136) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(result + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(result + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(result + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(result + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 184) = 0;
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 200) = *(_QWORD *)(a2 + 200);
  *(_OWORD *)(result + 176) = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(result + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(result + 208) = 0;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 224) = 0;
  *(_QWORD *)(result + 232) = *(_QWORD *)(a2 + 232);
  *(_OWORD *)(result + 208) = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(result + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(result + 240) = 0;
  *(_QWORD *)(result + 248) = 0;
  *(_QWORD *)(result + 256) = 0;
  *(_QWORD *)(result + 264) = *(_QWORD *)(a2 + 264);
  *(_OWORD *)(result + 240) = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(result + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_DWORD *)(result + 272) = *(_DWORD *)(a2 + 272);
  *(_QWORD *)(result + 288) = 0;
  *(_QWORD *)(result + 296) = 0;
  *(_QWORD *)(result + 280) = 0;
  *(_QWORD *)(result + 304) = *(_QWORD *)(a2 + 304);
  v2 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(result + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(result + 288) = v2;
  *(_QWORD *)(result + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_DWORD *)(result + 312) = *(_DWORD *)(a2 + 312);
  *(_QWORD *)(result + 328) = 0;
  *(_QWORD *)(result + 336) = 0;
  *(_QWORD *)(result + 320) = 0;
  *(_QWORD *)(result + 344) = *(_QWORD *)(a2 + 344);
  *(_OWORD *)(result + 320) = *(_OWORD *)(a2 + 320);
  *(_QWORD *)(result + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a2 + 320) = 0;
  *(_DWORD *)(result + 352) = *(_DWORD *)(a2 + 352);
  *(_BYTE *)(result + 356) = 0;
  *(_BYTE *)(result + 380) = 0;
  if (*(_BYTE *)(a2 + 380))
  {
    v3 = *(_QWORD *)(a2 + 356);
    *(_DWORD *)(result + 364) = *(_DWORD *)(a2 + 364);
    *(_QWORD *)(result + 356) = v3;
    v4 = *(_QWORD *)(a2 + 368);
    *(_DWORD *)(result + 376) = *(_DWORD *)(a2 + 376);
    *(_QWORD *)(result + 368) = v4;
    *(_BYTE *)(result + 380) = 1;
  }
  return result;
}

void sub_20B1FA210(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  void *__p[2];
  uint64_t v11;
  int v12;

  LODWORD(__p[0]) = 2;
  sub_20B518854(a1[6], __p);
  if (LODWORD(__p[0]) < 2)
  {
    HIBYTE(v11) = 0;
    LOBYTE(__p[0]) = 0;
    v12 = 0;
    sub_20B518FF8(a1[6], __p);
    sub_20B518854(a1[6], &v12);
    if (SHIBYTE(v11) < 0)
    {
      sub_20AEC60F4(&v7, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      v7 = *(_OWORD *)__p;
      v8 = v11;
    }
    v6 = v12;
    v9 = v12;
    if (*(char *)(a2 + 23) < 0)
    {
      operator delete(*(void **)a2);
      v6 = v9;
    }
    *(_OWORD *)a2 = v7;
    *(_QWORD *)(a2 + 16) = v8;
    *(_DWORD *)(a2 + 24) = v6;
    if (SHIBYTE(v11) < 0)
      operator delete(__p[0]);
  }
  else
  {
    sub_20B0DD290(a1 + 2);
    sub_20B518FF8(a1[6], (void **)a2);
    sub_20B518854(a1[6], (_DWORD *)(a2 + 24));
    v4 = a1[4];
    v5 = *(_QWORD *)(v4 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v4 - 8);
    if (v5)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v5);
    a1[4] -= 16;
  }
}

void sub_20B1FA368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1FA38C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B1FA3A0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  void **v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  __int128 v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  char v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  BOOL v35;
  char v36;
  char v37;
  void *v38[2];
  uint64_t v39;
  char v40;
  uint64_t v41;
  int v42;
  void *v43;
  char *v44;
  _BYTE __p[24];
  __int128 v46;
  __int128 v47;
  int v48;
  char *v49;
  char *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(uint64_t **)(a1 + 16);
  v3 = *v1;
  v4 = v1[1];
  *(_BYTE *)(v3 + 128) = 1;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_WORD *)(v3 + 130) = 0;
  *(_BYTE *)(v3 + 132) = 0;
  *(_DWORD *)__p = 2;
  sub_20B514490(v3, __p);
  v5 = *(_DWORD *)__p;
  if (*(_DWORD *)__p >= 2u)
    v6 = 2;
  else
    v6 = *(_DWORD *)__p;
  if (v6 >= 2)
  {
    *(_DWORD *)__p = 2;
    sub_20B514490(v3, __p);
    v7 = (void **)(v4 + 8);
    v8 = *(_DWORD *)__p;
    if (*(_DWORD *)__p >= 2u)
      v9 = 2;
    else
      v9 = *(_DWORD *)__p;
    if (v9 < 2)
    {
      sub_20B1FAC20(v3, v4 + 8);
    }
    else
    {
      ++*(_QWORD *)(v3 + 80);
      if (*(_BYTE *)(v3 + 128))
        v10 = *(_BYTE *)(v3 + 131) == 0;
      else
        v10 = 1;
      if (v10)
      {
        sub_20B51680C(v3, (uint64_t)__p);
        if (*(char *)(v4 + 31) < 0)
          operator delete(*v7);
        v11 = *(_OWORD *)__p;
        *(_QWORD *)(v4 + 24) = *(_QWORD *)&__p[16];
        *(_OWORD *)v7 = v11;
        ++*(_QWORD *)(v3 + 104);
      }
      else
      {
        *(_BYTE *)(v3 + 132) = 1;
      }
      sub_20B514490(v3, (_DWORD *)(v4 + 32));
    }
    if (v8 < 2 || *(_BYTE *)(v3 + 131))
    {
LABEL_34:
      sub_20B0C16D8(v4);
      if (*(_DWORD *)(v4 + 56))
        sub_20AECFAB8();
      v15 = *(_QWORD *)(v4 + 40);
      *(_DWORD *)__p = 2;
      sub_20B514490(v3, __p);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 40))(v15, v3, *(unsigned int *)__p);
      if (!*(_BYTE *)(v3 + 131))
      {
        do
        {
          if ((*(_BYTE *)(*(_QWORD *)(v3 + 16) + *(_QWORD *)(**(_QWORD **)(v3 + 16) - 24) + 32) & 2) != 0)
            break;
          sub_20B51680C(v3, (uint64_t)__p);
          if ((__p[23] & 0x80000000) != 0)
          {
            if (*(_QWORD *)&__p[8] == 1 && *(unsigned __int8 *)(v3 + 72) == **(_BYTE **)__p)
            {
LABEL_48:
              v17 = 0;
              if ((__p[23] & 0x80000000) != 0)
                goto LABEL_51;
              goto LABEL_37;
            }
          }
          else if (__p[23] == 1 && *(unsigned __int8 *)(v3 + 72) == __p[0])
          {
            goto LABEL_48;
          }
          v17 = 1;
          if ((__p[23] & 0x80000000) != 0)
LABEL_51:
            operator delete(*(void **)__p);
LABEL_37:
          if (*(_BYTE *)(v3 + 131))
            v16 = 0;
          else
            v16 = v17;
        }
        while ((v16 & 1) != 0);
      }
LABEL_115:
      if (v5 < 2)
        goto LABEL_116;
      while (1)
      {
LABEL_131:
        if (*(_BYTE *)(v3 + 131)
          || (*(_BYTE *)(*(_QWORD *)(v3 + 16) + *(_QWORD *)(**(_QWORD **)(v3 + 16) - 24) + 32) & 2) != 0)
        {
          goto LABEL_116;
        }
        sub_20B51680C(v3, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
        {
          if (*(_QWORD *)&__p[8] == 1 && *(unsigned __int8 *)(v3 + 72) == **(_BYTE **)__p)
          {
LABEL_139:
            v36 = 0;
            if ((__p[23] & 0x80000000) != 0)
              goto LABEL_142;
            goto LABEL_130;
          }
        }
        else if (__p[23] == 1 && *(unsigned __int8 *)(v3 + 72) == __p[0])
        {
          goto LABEL_139;
        }
        v36 = 1;
        if ((__p[23] & 0x80000000) != 0)
LABEL_142:
          operator delete(*(void **)__p);
LABEL_130:
        if ((v36 & 1) == 0)
          goto LABEL_116;
      }
    }
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v3 + 16) + *(_QWORD *)(**(_QWORD **)(v3 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_34;
      sub_20B51680C(v3, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0)
      {
        if (*(_QWORD *)&__p[8] == 1 && *(unsigned __int8 *)(v3 + 72) == **(_BYTE **)__p)
        {
LABEL_63:
          v19 = 0;
          if ((__p[23] & 0x80000000) != 0)
            goto LABEL_66;
          goto LABEL_52;
        }
      }
      else if (__p[23] == 1 && *(unsigned __int8 *)(v3 + 72) == __p[0])
      {
        goto LABEL_63;
      }
      v19 = 1;
      if ((__p[23] & 0x80000000) != 0)
LABEL_66:
        operator delete(*(void **)__p);
LABEL_52:
      if (*(_BYTE *)(v3 + 131))
        v18 = 0;
      else
        v18 = v19;
      if ((v18 & 1) == 0)
        goto LABEL_34;
    }
  }
  v48 = 0;
  v47 = 0u;
  v46 = 0u;
  *(_OWORD *)&__p[8] = 0u;
  sub_20AF43774(&v49, v4 + 64);
  LODWORD(v38[0]) = 2;
  sub_20B514490(v3, v38);
  v12 = v38[0];
  if (LODWORD(v38[0]) >= 2)
    v13 = 2;
  else
    v13 = v38[0];
  if (v13 < 2)
  {
    sub_20B1FAC20(v3, (uint64_t)&__p[8]);
  }
  else
  {
    ++*(_QWORD *)(v3 + 80);
    if (*(_BYTE *)(v3 + 128))
      v14 = *(_BYTE *)(v3 + 131) == 0;
    else
      v14 = 1;
    if (v14)
    {
      sub_20B51680C(v3, (uint64_t)v38);
      if (SBYTE7(v46) < 0)
        operator delete(*(void **)&__p[8]);
      *(_OWORD *)&__p[8] = *(_OWORD *)v38;
      *(_QWORD *)&v46 = v39;
      ++*(_QWORD *)(v3 + 104);
    }
    else
    {
      *(_BYTE *)(v3 + 132) = 1;
    }
    sub_20B514490(v3, (_DWORD *)&v46 + 2);
  }
  if (v12 >= 2 && !*(_BYTE *)(v3 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v3 + 16) + *(_QWORD *)(**(_QWORD **)(v3 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20B51680C(v3, (uint64_t)v38);
      if (SHIBYTE(v39) < 0)
      {
        if (v38[1] == (void *)1 && *(unsigned __int8 *)(v3 + 72) == *(unsigned __int8 *)v38[0])
        {
LABEL_91:
          v28 = 0;
          if (SHIBYTE(v39) < 0)
            goto LABEL_94;
          goto LABEL_80;
        }
      }
      else if (SHIBYTE(v39) == 1 && *(unsigned __int8 *)(v3 + 72) == LOBYTE(v38[0]))
      {
        goto LABEL_91;
      }
      v28 = 1;
      if (SHIBYTE(v39) < 0)
LABEL_94:
        operator delete(v38[0]);
LABEL_80:
      if (*(_BYTE *)(v3 + 131))
        v27 = 0;
      else
        v27 = v28;
    }
    while ((v27 & 1) != 0);
  }
  sub_20B0C1158((uint64_t)__p);
  if (v48)
    sub_20AECFAB8();
  v20 = v47;
  LODWORD(v38[0]) = 1;
  sub_20B514490(v3, v38);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v20 + 40))(v20, v3, LODWORD(v38[0]));
  sub_20B0C53C0((uint64_t)v38, (uint64_t)__p);
  sub_20B0C5528(v4, (uint64_t)v38);
  v21 = (char *)v43;
  if (v43)
  {
    v22 = v44;
    v23 = v43;
    if (v44 != v43)
    {
      do
      {
        v24 = (std::__shared_weak_count *)*((_QWORD *)v22 - 1);
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v22 -= 16;
      }
      while (v22 != v21);
      v23 = v43;
    }
    v44 = v21;
    operator delete(v23);
  }
  if (v42 != -1)
    ((void (*)(char *, uint64_t *))off_24C4110C8[v42])(&v37, &v41);
  v42 = -1;
  if (v40 < 0)
    operator delete(v38[1]);
  v29 = v49;
  if (v49)
  {
    v30 = v50;
    v31 = v49;
    if (v50 != v49)
    {
      do
      {
        v32 = (std::__shared_weak_count *)*((_QWORD *)v30 - 1);
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v30 -= 16;
      }
      while (v30 != v29);
      v31 = v49;
    }
    v50 = v29;
    operator delete(v31);
  }
  if (v48 != -1)
    ((void (*)(void **, __int128 *))off_24C4110C8[v48])(v38, &v47);
  v48 = -1;
  if ((SBYTE7(v46) & 0x80000000) == 0)
    goto LABEL_115;
  operator delete(*(void **)&__p[8]);
  if (v5 >= 2)
    goto LABEL_131;
LABEL_116:
  v35 = sub_20B516B94(v3);
  if (*(_BYTE *)(v2 + 128) && !*(_BYTE *)(v2 + 120) && *(_BYTE *)(v2 + 112))
  {
    if (*(_BYTE *)(v2 + 104))
    {
      if (*(char *)(v2 + 103) < 0)
        operator delete(*(void **)(v2 + 80));
      if (*(char *)(v2 + 71) < 0)
        operator delete(*(void **)(v2 + 48));
    }
    if (*(_BYTE *)(v2 + 40) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
  }
  *(_BYTE *)v2 = v35;
  *(_BYTE *)(v2 + 120) = 1;
  *(_BYTE *)(v2 + 128) = 1;
}

void sub_20B1FAB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B1FAC20(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  void *__p[2];
  uint64_t v11;
  int v12;

  HIBYTE(v11) = 0;
  LOBYTE(__p[0]) = 0;
  v12 = 0;
  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128))
    v4 = *(_BYTE *)(a1 + 131) == 0;
  else
    v4 = 1;
  if (v4)
  {
    sub_20B51680C(a1, (uint64_t)&v7);
    v5 = *(_QWORD *)(a1 + 104);
    *(_OWORD *)__p = v7;
    v11 = v8;
    *(_QWORD *)(a1 + 104) = v5 + 1;
  }
  else
  {
    *(_BYTE *)(a1 + 132) = 1;
  }
  sub_20B514490(a1, &v12);
  if (SHIBYTE(v11) < 0)
  {
    sub_20AEC60F4(&v7, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    v7 = *(_OWORD *)__p;
    v8 = v11;
  }
  v6 = v12;
  v9 = v12;
  if (*(char *)(a2 + 23) < 0)
  {
    operator delete(*(void **)a2);
    v6 = v9;
  }
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_DWORD *)(a2 + 24) = v6;
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
}

void sub_20B1FAD30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B1FAD50(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  int v7;
  void **v8;
  int v9;
  char *v10;
  int v11;
  void **v12;
  __int128 v13;
  int v14;
  int v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *exception;
  __int128 __dst;
  uint64_t v24;
  int v25;
  _DWORD v26[2];

  sub_20B50AC94(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&__dst = 0;
  sub_20B4552C4(v5, &__dst);
  if (DWORD1(__dst))
    goto LABEL_29;
  if (__dst >= 2)
    v6 = 2;
  else
    v6 = __dst;
  if (v6 < 2)
  {
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "package_id";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v12 = (void **)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v24 = 0;
    __dst = 0uLL;
    sub_20B4557C4(v12, (uint64_t)&__dst);
    v13 = __dst;
    v26[0] = v24;
    *(_DWORD *)((char *)v26 + 3) = *(_DWORD *)((char *)&v24 + 3);
    v14 = SHIBYTE(v24);
    v15 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "type_id";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v15)
      *(_BYTE *)(a1 + 104) = 1;
    v16 = (char *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&__dst = 0;
    sub_20B4552C4(v16, &__dst);
    v17 = __dst;
    if (DWORD1(__dst))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24C41FEF0;
      __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
    }
    if (v14 < 0)
    {
      sub_20AEC60F4(&__dst, (void *)v13, *((unint64_t *)&v13 + 1));
    }
    else
    {
      __dst = v13;
      LODWORD(v24) = v26[0];
      *(_DWORD *)((char *)&v24 + 3) = *(_DWORD *)((char *)v26 + 3);
      HIBYTE(v24) = v14;
    }
    v25 = v17;
    if (*(char *)(a2 + 23) < 0)
    {
      operator delete(*(void **)a2);
      v20 = v25;
      *(_OWORD *)a2 = __dst;
      *(_QWORD *)(a2 + 16) = v24;
      *(_DWORD *)(a2 + 24) = v20;
      if ((v14 & 0x80000000) == 0)
        goto LABEL_26;
    }
    else
    {
      *(_OWORD *)a2 = __dst;
      *(_QWORD *)(a2 + 16) = v24;
      *(_DWORD *)(a2 + 24) = v17;
      if ((v14 & 0x80000000) == 0)
        goto LABEL_26;
    }
    operator delete((void *)v13);
    goto LABEL_26;
  }
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "package_id";
  *(_QWORD *)(a1 + 96) = 10;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  v8 = (void **)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v24 = 0;
  __dst = 0uLL;
  sub_20B4557C4(v8, (uint64_t)&__dst);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v24;
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "type_id";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v9)
    *(_BYTE *)(a1 + 104) = 1;
  v10 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&__dst = 0;
  sub_20B4552C4(v10, &__dst);
  if (DWORD1(__dst))
  {
LABEL_29:
    v21 = __cxa_allocate_exception(8uLL);
    *v21 = &off_24C41FEF0;
    __cxa_throw(v21, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  *(_DWORD *)(a2 + 24) = __dst;
LABEL_26:
  v18 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v18 - 8);
  v19 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(a1 + 48) = v18 - 8;
  *(_QWORD *)(a1 + 72) = v19 - 8;
}

void sub_20B1FB044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_20B1FB088(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  size_t v25;
  unint64_t v26;
  unint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35[2];
  unsigned __int8 v36;
  _DWORD v37[6];
  int v38;
  void *__dst[2];
  unint64_t v40;
  _QWORD *v41;
  void *v42[2];
  unsigned __int8 v43;
  std::string __p;
  int v45;
  std::string v46;
  std::string *v47;
  std::string *p_p;
  std::string *v49;
  std::string *v50;
  std::string *v51;
  std::string **v52;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20AEC0BD8(v4);
  v34 = v4;
  v38 = 0;
  sub_20AED5B5C(v37, "{");
  sub_20B1F6DCC((uint64_t *)a2, &__p);
  v47 = (std::string *)v37;
  p_p = &__p;
  v49 = (std::string *)v37;
  v50 = &__p;
  v51 = &__p;
  if (v38 == -1)
    sub_20AECFAB8();
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
  ((void (*)(std::string *, _DWORD *))off_24C4110D8[v38])(&v46, v37);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v47 = (std::string *)v37;
  p_p = (std::string *)",";
  v49 = (std::string *)v37;
  v50 = (std::string *)",";
  v51 = (std::string *)",";
  if (v38 == -1)
    goto LABEL_84;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
  ((void (*)(std::string *, _DWORD *))off_24C410F78[v38])(&__p, v37);
  v47 = (std::string *)v37;
  p_p = (std::string *)(a2 + 8);
  v49 = (std::string *)v37;
  v50 = (std::string *)(a2 + 8);
  v51 = (std::string *)(a2 + 8);
  if (v38 == -1)
    goto LABEL_84;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
  ((void (*)(std::string *, _DWORD *))off_24C4110F0[v38])(&__p, v37);
  v47 = (std::string *)v37;
  p_p = (std::string *)",";
  v49 = (std::string *)v37;
  v50 = (std::string *)",";
  v51 = (std::string *)",";
  if (v38 == -1)
    goto LABEL_84;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
  ((void (*)(std::string *, _DWORD *))off_24C410F78[v38])(&__p, v37);
  std::to_string(&__p, *(_DWORD *)(a2 + 32));
  v47 = (std::string *)v37;
  p_p = &__p;
  v49 = (std::string *)v37;
  v50 = &__p;
  v51 = &__p;
  if (v38 == -1)
    sub_20AECFAB8();
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
  ((void (*)(std::string *, _DWORD *))off_24C4110D8[v38])(&v46, v37);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v47 = (std::string *)v37;
  p_p = (std::string *)",";
  v49 = (std::string *)v37;
  v50 = (std::string *)",";
  v51 = (std::string *)",";
  if (v38 == -1)
    goto LABEL_84;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
  ((void (*)(std::string *, _DWORD *))off_24C410F78[v38])(&__p, v37);
  sub_20B07A194((uint64_t)&v47, (uint64_t)v37, a2 + 40);
  v47 = (std::string *)v37;
  p_p = (std::string *)",";
  v49 = (std::string *)v37;
  v50 = (std::string *)",";
  v51 = (std::string *)",";
  if (v38 == -1)
LABEL_84:
    sub_20AECFAB8();
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
  ((void (*)(std::string *, _DWORD *))off_24C410F78[v38])(&__p, v37);
  v5 = operator new();
  *(_QWORD *)(v5 + 272) = 0;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)v5 = 0u;
  sub_20AEC0BD8(v5);
  v41 = (_QWORD *)v5;
  v45 = 0;
  sub_20AED5B5C(&__p, "{");
  sub_20AFF447C((uint64_t)&v47, (uint64_t)&__p, a2 + 96);
  v47 = &__p;
  p_p = (std::string *)",";
  v49 = &__p;
  v50 = (std::string *)",";
  v51 = (std::string *)",";
  if (v45 == -1)
    goto LABEL_85;
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
  ((void (*)(std::string *, std::string *))off_24C410F78[v45])(&v46, &__p);
  std::to_string(&v46, *(_QWORD *)(a2 + 120));
  v47 = &__p;
  p_p = &v46;
  v49 = &__p;
  v50 = &v46;
  v51 = &v46;
  if (v45 == -1)
    sub_20AECFAB8();
  v52 = &v47;
  ((void (*)(std::string ***, std::string *))off_24C4110D8[v45])(&v52, &__p);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  v47 = &__p;
  p_p = (std::string *)"}";
  v49 = &__p;
  v50 = (std::string *)"}";
  v51 = (std::string *)"}";
  if (v45 == -1)
LABEL_85:
    sub_20AECFAB8();
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
  ((void (*)(std::string *, std::string *))off_24C410F78[v45])(&v46, &__p);
  if (v45 == -1)
    sub_20AECFAB8();
  v47 = &v46;
  ((void (*)(void **__return_ptr, std::string **, std::string *))off_24C410E30[v45])(v42, &v47, &__p);
  if (v45 != -1)
    ((void (*)(std::string **, std::string *))off_24C410E18[v45])(&v47, &__p);
  if ((v43 & 0x80u) == 0)
    v6 = v42;
  else
    v6 = (void **)v42[0];
  if ((v43 & 0x80u) == 0)
    v7 = v43;
  else
    v7 = (uint64_t)v42[1];
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)v6, v7);
  if (((char)v43 & 0x80000000) == 0)
  {
    v8 = *(_DWORD *)(v5 + 120);
    if ((v8 & 0x10) == 0)
      goto LABEL_28;
LABEL_31:
    v11 = *(_QWORD *)(v5 + 112);
    v12 = *(_QWORD *)(v5 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v5 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v5 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_81;
    goto LABEL_34;
  }
  operator delete(v42[0]);
  v8 = *(_DWORD *)(v5 + 120);
  if ((v8 & 0x10) != 0)
    goto LABEL_31;
LABEL_28:
  if ((v8 & 8) == 0)
  {
    v9 = 0;
    HIBYTE(v40) = 0;
    v10 = __dst;
    goto LABEL_41;
  }
  v13 = *(const void **)(v5 + 40);
  v9 = *(_QWORD *)(v5 + 56) - (_QWORD)v13;
  if (v9 > 0x7FFFFFFFFFFFFFF7)
LABEL_81:
    sub_20AEC0138();
LABEL_34:
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v40 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_40;
  }
  HIBYTE(v40) = v9;
  v10 = __dst;
  if (v9)
LABEL_40:
    memmove(v10, v13, v9);
LABEL_41:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v41;
  v17 = (uint64_t *)MEMORY[0x24BEDB7F0];
  v18 = MEMORY[0x24BEDB848];
  if (v41)
  {
    v19 = *MEMORY[0x24BEDB7F0];
    *v41 = *MEMORY[0x24BEDB7F0];
    v20 = v17[9];
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v19 - 24)) = v17[8];
    v16[3] = v18 + 16;
    v16[2] = v20;
    if (*((char *)v16 + 111) < 0)
      operator delete((void *)v16[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v16 + 16);
    MEMORY[0x20BD3583C](v16, 0x10B2C40EED050F3);
  }
  v47 = (std::string *)v37;
  p_p = (std::string *)__dst;
  v49 = (std::string *)v37;
  v50 = (std::string *)__dst;
  v51 = (std::string *)__dst;
  if (v38 == -1)
    sub_20AECFAB8();
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
  ((void (*)(std::string *, _DWORD *))off_24C4110D8[v38])(&__p, v37);
  if (SHIBYTE(v40) < 0)
    operator delete(__dst[0]);
  v47 = (std::string *)v37;
  p_p = (std::string *)",";
  v49 = (std::string *)v37;
  v50 = (std::string *)",";
  v51 = (std::string *)",";
  if (v38 == -1)
    goto LABEL_84;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
  ((void (*)(std::string *, _DWORD *))off_24C410F78[v38])(&__p, v37);
  v47 = (std::string *)v37;
  p_p = (std::string *)(a2 + 128);
  v49 = (std::string *)v37;
  v50 = (std::string *)(a2 + 128);
  v51 = (std::string *)(a2 + 128);
  if (v38 == -1)
    goto LABEL_84;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
  ((void (*)(std::string *, _DWORD *))off_24C4110F0[v38])(&__p, v37);
  v47 = (std::string *)v37;
  p_p = (std::string *)"}";
  v49 = (std::string *)v37;
  v50 = (std::string *)"}";
  v51 = (std::string *)"}";
  if (v38 == -1)
    goto LABEL_84;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
  ((void (*)(std::string *, _DWORD *))off_24C410F78[v38])(&__p, v37);
  if (v38 == -1)
    sub_20AECFAB8();
  v47 = &__p;
  ((void (*)(void **__return_ptr, std::string **, _DWORD *))off_24C410E30[v38])(v35, &v47, v37);
  if (v38 != -1)
    ((void (*)(std::string **, _DWORD *))off_24C410E18[v38])(&v47, v37);
  if ((v36 & 0x80u) == 0)
    v21 = v35;
  else
    v21 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v22 = v36;
  else
    v22 = (uint64_t)v35[1];
  sub_20AEC01D0((_QWORD *)(v4 + 16), (uint64_t)v21, v22);
  if (((char)v36 & 0x80000000) == 0)
  {
    v23 = (_QWORD *)v4;
    v24 = *(_DWORD *)(v4 + 120);
    if ((v24 & 0x10) == 0)
      goto LABEL_62;
LABEL_65:
    v26 = v23[14];
    v27 = v23[9];
    if (v26 < v27)
    {
      v23[14] = v27;
      v26 = v27;
    }
    v28 = (const void *)v23[8];
    v25 = v26 - (_QWORD)v28;
    if (v26 - (unint64_t)v28 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_83;
    goto LABEL_68;
  }
  operator delete(v35[0]);
  v23 = (_QWORD *)v4;
  v24 = *(_DWORD *)(v4 + 120);
  if ((v24 & 0x10) != 0)
    goto LABEL_65;
LABEL_62:
  if ((v24 & 8) == 0)
  {
    v25 = 0;
    a1[23] = 0;
    goto LABEL_75;
  }
  v28 = (const void *)v23[5];
  v25 = v23[7] - (_QWORD)v28;
  if (v25 > 0x7FFFFFFFFFFFFFF7)
LABEL_83:
    sub_20AEC0138();
LABEL_68:
  if (v25 >= 0x17)
  {
    v29 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v29 = v25 | 7;
    v30 = v29 + 1;
    v31 = operator new(v29 + 1);
    *((_QWORD *)a1 + 1) = v25;
    *((_QWORD *)a1 + 2) = v30 | 0x8000000000000000;
    *(_QWORD *)a1 = v31;
    a1 = v31;
    goto LABEL_74;
  }
  a1[23] = v25;
  if (v25)
LABEL_74:
    memmove(a1, v28, v25);
LABEL_75:
  a1[v25] = 0;
  if (v34)
  {
    v32 = *v17;
    *(_QWORD *)v34 = *v17;
    v33 = v17[9];
    *(_QWORD *)(v34 + *(_QWORD *)(v32 - 24)) = v17[8];
    *(_QWORD *)(v34 + 24) = v18 + 16;
    *(_QWORD *)(v34 + 16) = v33;
    if (*(char *)(v34 + 111) < 0)
      operator delete(*(void **)(v34 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v34 + 128);
    MEMORY[0x20BD3583C](v34, 0x10B2C40EED050F3);
  }
}

void sub_20B1FB954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_20B52CE84(&a10);
    _Unwind_Resume(a1);
  }
  sub_20B52CE84(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1FBA78(uint64_t a1)
{
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20B1FBAE8(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C41F230;
  v2 = a1[3];
  a1[2] = &unk_24C41F380;
  a1[3] = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 80);
    if (v3)
    {
      *(_QWORD *)(v2 + 88) = v3;
      operator delete(v3);
    }
    if (*(_BYTE *)(v2 + 72))
      free(*(void **)(v2 + 56));
    if (*(_BYTE *)(v2 + 40))
      free(*(void **)(v2 + 24));
    MEMORY[0x20BD3583C](v2, 0x1030C408C1A3048);
  }
  return a1;
}

void sub_20B1FBB6C(uint64_t a1, uint64_t a2)
{
  int v4;
  size_t v5;
  void **p_dst;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  char *v23;
  std::runtime_error *exception;
  std::__fs::filesystem::path v25;
  void **__dst;
  size_t v27;
  int64_t v28;
  std::string v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 144);
  if ((v4 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(a1 + 136);
    v8 = *(_QWORD *)(a1 + 96);
    if (v7 < v8)
    {
      *(_QWORD *)(a1 + 136) = v8;
      v7 = v8;
    }
    v9 = *(const void **)(a1 + 88);
    v5 = v7 - (_QWORD)v9;
    if (v7 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v4 & 8) == 0)
    {
      v5 = 0;
      HIBYTE(v28) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v9 = *(const void **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 80) - (_QWORD)v9;
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    v27 = v5;
    v28 = v11 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v28) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_13:
    memmove(p_dst, v9, v5);
LABEL_14:
  *((_BYTE *)p_dst + v5) = 0;
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 135) = 0;
  sub_20AEC8D2C(a1 + 48);
  std::ios_base::clear((std::ios_base *)(a1 + 24 + *(_QWORD *)(*(_QWORD *)(a1 + 24) - 24)), 0);
  *(_QWORD *)(a1 + 312) = 0;
  v12 = HIBYTE(v28);
  if (v28 >= 0)
    v13 = HIBYTE(v28);
  else
    v13 = v27;
  if (!v13 && *(_BYTE *)(a1 + 328))
  {
    if ((v28 & 0x8000000000000000) == 0)
      return;
LABEL_51:
    operator delete(__dst);
    return;
  }
  if (*(_BYTE *)(a2 + 24))
  {
    if (v28 < 0)
      v12 = v27;
    if (!v12)
      goto LABEL_47;
LABEL_46:
    (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
    std::ostream::write();
    goto LABEL_47;
  }
  sub_20B422114((const std::__fs::filesystem::path *)a1, 0x11u, *(_QWORD *)(a1 + 304), &v29);
  if (*(_BYTE *)(a2 + 24))
  {
    v14 = *(_OWORD *)&v29.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v29.__r_.__value_.__r.__words[1] = 0uLL;
    v15 = *(std::__shared_weak_count **)(a2 + 16);
    *(_OWORD *)(a2 + 8) = v14;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = &off_24C41B880;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)&v29.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v29.__r_.__value_.__r.__words[1] = 0uLL;
    *(_BYTE *)(a2 + 24) = 1;
  }
  v18 = (std::__shared_weak_count *)v29.__r_.__value_.__r.__words[2];
  if (v29.__r_.__value_.__r.__words[2])
  {
    v19 = (unint64_t *)(v29.__r_.__value_.__r.__words[2] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (!*(_QWORD *)(a2 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (*(char *)(a1 + 23) < 0)
      sub_20AEC60F4(&v25, *(void **)a1, *(_QWORD *)(a1 + 8));
    else
      v25.__pn_ = *(std::__fs::filesystem::path::string_type *)a1;
    sub_20B1F16DC("Failed to write to file: ", &v25.__pn_, &v29);
    std::runtime_error::runtime_error(exception, &v29);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v21 = HIBYTE(v28);
  if (v28 < 0)
    v21 = v27;
  if (v21)
    goto LABEL_46;
LABEL_47:
  v22 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
  v23 = (char *)v22 + *(_QWORD *)(*v22 - 24);
  if ((v23[32] & 5) != 0)
  {
    *(_QWORD *)(a1 + 320) = 0;
    *(_BYTE *)(a1 + 328) = 1;
    if (v28 < 0)
      goto LABEL_51;
  }
  else
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v23 + 5) + 32))(&v29, *((_QWORD *)v23 + 5), 0, 1, 16);
    *(_QWORD *)(a1 + 320) = v30 & ~(v30 >> 63);
    *(_BYTE *)(a1 + 328) = 1;
    if (v28 < 0)
      goto LABEL_51;
  }
}

void sub_20B1FBF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  __cxa_free_exception(v26);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1FBFDC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20AEC60F4((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v5 = a1 + 40;
    if ((*(char *)(a2 + 63) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v5 = a1 + 40;
    if ((*(char *)(a2 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 56);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_20AEC60F4((_BYTE *)v5, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
LABEL_6:
  v7 = (_BYTE *)(a1 + 64);
  if (*(char *)(a2 + 119) < 0)
  {
    sub_20AEC60F4(v7, *(void **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)v7 = v8;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 120);
  return a1;
}

void sub_20B1FC0BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 63) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1FC108(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20AEC60F4((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v5 = a1 + 40;
    if ((*(char *)(a2 + 63) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v5 = a1 + 40;
    if ((*(char *)(a2 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 56);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_20AEC60F4((_BYTE *)v5, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
LABEL_6:
  if (*(char *)(a2 + 119) < 0)
  {
    sub_20AEC60F4((_BYTE *)(a1 + 64), *(void **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 64) = v7;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 120);
  if (*(_BYTE *)(a2 + 88))
  {
    if (*(char *)(a2 + 87) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 96), *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v8;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 119) = 0;
    *(_BYTE *)(a1 + 96) = 0;
  }
  v12 = -1;
  if (*(char *)(a2 + 151) < 0)
  {
    sub_20AEC60F4(&v10, *(void **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 128);
    v11 = *(_QWORD *)(a2 + 144);
  }
  *(_OWORD *)(a1 + 120) = v10;
  *(_QWORD *)(a1 + 136) = v11;
  return a1;
}

void sub_20B1FC284(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[87] < 0)
  {
    operator delete(*v4);
    if ((v1[63] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v1[31] & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((v1[63] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((v1[31] & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1FC328(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20AEC60F4((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v5 = a1 + 40;
    if ((*(char *)(a2 + 63) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v5 = a1 + 40;
    if ((*(char *)(a2 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 56);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_20AEC60F4((_BYTE *)v5, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
LABEL_6:
  v7 = (_BYTE *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_20AEC60F4(v7, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)v7 = v8;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_WORD *)(a1 + 119) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 143) = 0;
  return a1;
}

void sub_20B1FC414(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 63) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_20B1FC460(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  _OWORD *v5;
  int v6;
  uint64_t v7;
  void **v8;
  _BYTE *v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  int8x8_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  void *__p[2];
  uint64_t v21;
  char v22;
  void *__dst[2];
  uint64_t v24;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v4 = (_BYTE *)(a2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    sub_20AEC60F4(v4, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
    *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    sub_20AEC60F4(__dst, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
    goto LABEL_6;
  }
  *(_OWORD *)v4 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_5;
LABEL_3:
  *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
  v24 = *(_QWORD *)(a1 + 56);
LABEL_6:
  v5 = (_OWORD *)(a2 + 40);
  v6 = *(char *)(a1 + 119);
  if (v6 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 119);
  else
    v7 = *(_QWORD *)(a1 + 104);
  if (v7)
  {
    v8 = (void **)(a1 + 96);
    if (v6 < 0)
    {
      sub_20AEC60F4(__p, *v8, *(_QWORD *)(a1 + 104));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v8;
      v21 = *(_QWORD *)(a1 + 112);
    }
    v22 = 1;
    *v5 = *(_OWORD *)__dst;
    *(_QWORD *)(a2 + 56) = v24;
    __dst[0] = 0;
    __dst[1] = 0;
    v24 = 0;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 80) = v21;
    __p[0] = 0;
    __p[1] = 0;
    v21 = 0;
    *(_BYTE *)(a2 + 88) = 1;
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    v22 = 0;
    *v5 = *(_OWORD *)__dst;
    *(_QWORD *)(a2 + 56) = v24;
    __dst[0] = 0;
    __dst[1] = 0;
    v24 = 0;
    *(_BYTE *)(a2 + 64) = 0;
    *(_BYTE *)(a2 + 88) = 0;
  }
  v9 = *(_BYTE **)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  if (*(char *)(a2 + 63) >= 0)
  {
    v9 = (_BYTE *)(a2 + 40);
    v10 = *(unsigned __int8 *)(a2 + 63);
  }
  if (!v10)
    goto LABEL_39;
  v11 = v9;
  if (v10 < 8)
    goto LABEL_46;
  v11 = &v9[v10 & 0xFFFFFFFFFFFFFFF8];
  v12 = v9 + 3;
  v13 = v10 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v14 = vceq_s8(*(int8x8_t *)(v12 - 3), (int8x8_t)0x3A3A3A3A3A3A3A3ALL);
    if ((v14.i8[0] & 1) != 0)
    {
      *(v12 - 3) = 95;
      if ((v14.i8[1] & 1) == 0)
      {
LABEL_23:
        if ((v14.i8[2] & 1) == 0)
          goto LABEL_24;
        goto LABEL_32;
      }
    }
    else if ((v14.i8[1] & 1) == 0)
    {
      goto LABEL_23;
    }
    *(v12 - 2) = 95;
    if ((v14.i8[2] & 1) == 0)
    {
LABEL_24:
      if ((v14.i8[3] & 1) == 0)
        goto LABEL_25;
      goto LABEL_33;
    }
LABEL_32:
    *(v12 - 1) = 95;
    if ((v14.i8[3] & 1) == 0)
    {
LABEL_25:
      if ((v14.i8[4] & 1) == 0)
        goto LABEL_26;
      goto LABEL_34;
    }
LABEL_33:
    *v12 = 95;
    if ((v14.i8[4] & 1) == 0)
    {
LABEL_26:
      if ((v14.i8[5] & 1) == 0)
        goto LABEL_27;
      goto LABEL_35;
    }
LABEL_34:
    v12[1] = 95;
    if ((v14.i8[5] & 1) == 0)
    {
LABEL_27:
      if ((v14.i8[6] & 1) != 0)
        goto LABEL_36;
      goto LABEL_28;
    }
LABEL_35:
    v12[2] = 95;
    if ((v14.i8[6] & 1) != 0)
    {
LABEL_36:
      v12[3] = 95;
      if ((v14.i8[7] & 1) == 0)
        goto LABEL_20;
      goto LABEL_37;
    }
LABEL_28:
    if ((v14.i8[7] & 1) == 0)
      goto LABEL_20;
LABEL_37:
    v12[4] = 95;
LABEL_20:
    v12 += 8;
    v13 -= 8;
  }
  while (v13);
  if (v10 == (v10 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_39;
LABEL_46:
  v19 = &v9[v10];
  do
  {
    if (*v11 == 58)
      *v11 = 95;
    ++v11;
  }
  while (v11 != v19);
LABEL_39:
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v15 = *(char *)(a1 + 87);
  if (v15 >= 0)
    v16 = (char *)(a1 + 64);
  else
    v16 = *(char **)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a1 + 87);
  sub_20AF08074(a2 + 96, v16, &v16[v17]);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 88);
  v18 = (_BYTE *)(a2 + 128);
  if (*(char *)(a1 + 143) < 0)
  {
    sub_20AEC60F4(v18, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
  }
  else
  {
    *(_OWORD *)v18 = *(_OWORD *)(a1 + 120);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 136);
  }
  if (v22 && SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v24) < 0)
    operator delete(__dst[0]);
}

void sub_20B1FC794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void **v21;
  uint64_t v22;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v22 + 31) < 0)
    operator delete(*v21);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B1FC804(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

uint64_t sub_20B1FC884(unsigned __int8 *a1)
{
  int v2;
  uint64_t v3;
  std::string::size_type v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  std::string *v9;
  size_t size;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  std::string::size_type v15;
  unsigned __int8 *v16;
  int v17;
  std::string::size_type v18;
  void *v19;
  std::string *v20;
  uint64_t v21;
  std::string *v22;
  BOOL v24;
  std::logic_error *exception;
  std::string v27;
  std::string v28;

  v2 = (char)a1[23];
  v3 = *(_QWORD *)a1;
  if (v2 >= 0)
    v4 = a1[23];
  else
    v4 = *((_QWORD *)a1 + 1);
  memset(&v28, 0, sizeof(v28));
  std::string::reserve(&v28, v4);
  if (v2 >= 0)
    v5 = a1;
  else
    v5 = (unsigned __int8 *)v3;
  while (v4)
  {
    while (1)
    {
      v6 = __tolower(*v5);
      v7 = v6;
      v8 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (HIBYTE(v28.__r_.__value_.__r.__words[2]) == 22)
      {
        v9 = &v28;
        size = 22;
        goto LABEL_16;
      }
      *((_BYTE *)&v28.__r_.__value_.__s + 23) = (*((_BYTE *)&v28.__r_.__value_.__s + 23) + 1) & 0x7F;
      *(_WORD *)((char *)&v28.__r_.__value_.__l.__data_ + v8) = v6;
      ++v5;
      if (!--v4)
        goto LABEL_32;
    }
    size = (v28.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v28.__r_.__value_.__l.__size_ == size)
    {
      if ((v28.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
        sub_20AEC0138();
      v9 = (std::string *)v28.__r_.__value_.__r.__words[0];
      if (size > 0x3FFFFFFFFFFFFFF2)
      {
        v13 = 0x7FFFFFFFFFFFFFF7;
      }
      else
      {
LABEL_16:
        if (size + 1 > 2 * size)
          v11 = size + 1;
        else
          v11 = 2 * size;
        v12 = (v11 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v12 = v11 | 7;
        if (v11 >= 0x17)
          v13 = v12 + 1;
        else
          v13 = 23;
      }
      v14 = operator new(v13);
      v15 = (std::string::size_type)v14;
      if (!size || (memmove(v14, v9, size), size != 22))
        operator delete(v9);
      v28.__r_.__value_.__r.__words[0] = v15;
      v28.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      goto LABEL_29;
    }
    size = v28.__r_.__value_.__l.__size_;
    v15 = v28.__r_.__value_.__r.__words[0];
LABEL_29:
    v28.__r_.__value_.__l.__size_ = size + 1;
    v16 = (unsigned __int8 *)(v15 + size);
    *v16 = v7;
    v16[1] = 0;
    ++v5;
    --v4;
  }
LABEL_32:
  v17 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  else
    v18 = v28.__r_.__value_.__l.__size_;
  if (v18 == 5)
  {
    v19 = (void *)v28.__r_.__value_.__r.__words[0];
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v28;
    else
      v22 = (std::string *)v28.__r_.__value_.__r.__words[0];
    if (LODWORD(v22->__r_.__value_.__l.__data_) == 1869834798 && v22->__r_.__value_.__s.__data_[4] == 110)
    {
      v21 = 3;
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v21;
      goto LABEL_62;
    }
    v24 = LODWORD(v22->__r_.__value_.__l.__data_) == 1701866030 && v22->__r_.__value_.__s.__data_[4] == 103;
    if (!v24 && memcmp(v22, ".tiff", 5uLL))
      goto LABEL_73;
  }
  else
  {
    if (v18 != 4)
      goto LABEL_73;
    v19 = (void *)v28.__r_.__value_.__r.__words[0];
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v28;
    else
      v20 = (std::string *)v28.__r_.__value_.__r.__words[0];
    switch(LODWORD(v20->__r_.__value_.__l.__data_))
    {
      case 0x7461642E:
        v21 = 1;
        if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return v21;
        goto LABEL_62;
      case 0x7673632E:
        v21 = 2;
        if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return v21;
        goto LABEL_62;
      case 0x7478742E:
        v21 = 4;
        if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return v21;
        goto LABEL_62;
    }
    if (LODWORD(v20->__r_.__value_.__l.__data_) != 1735290926
      && LODWORD(v20->__r_.__value_.__l.__data_) != 1735420462
      && memcmp(v20, ".tif", 4uLL))
    {
      if (!memcmp(v20, ".obj", 4uLL))
      {
        v21 = 6;
        if (v17 < 0)
          goto LABEL_62;
        return v21;
      }
LABEL_73:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_20B1FCC78("Extension ", (uint64_t *)a1, " has no supported export file format", &v27);
      std::logic_error::logic_error(exception, &v27);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
  }
  v21 = 5;
  if (v17 < 0)
LABEL_62:
    operator delete(v19);
  return v21;
}

void sub_20B1FCC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      if (a20 < 0)
        operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void sub_20B1FCC78(const char *a1@<X0>, uint64_t *a2@<X1>, const char *a3@<X2>, std::string *a4@<X8>)
{
  size_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD v10[6];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10[0] = a1;
  v7 = strlen(a1);
  v8 = *((unsigned __int8 *)a2 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = a2;
  else
    v9 = (uint64_t *)*a2;
  if ((v8 & 0x80u) != 0)
    v8 = a2[1];
  v10[1] = v7;
  v10[2] = v9;
  v10[3] = v8;
  v10[4] = a3;
  v10[5] = strlen(a3);
  sub_20AECFDF8((uint64_t)v10, (uint64_t)&v11, 0, 0, a4);
}

void sub_20B1FCD2C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__fs::filesystem::path::__string_view v8;
  _BYTE *v9;
  std::basic_string_view<_CharT, _Traits>::size_type v10;
  std::basic_string_view<_CharT, _Traits>::size_type v11;
  std::__fs::filesystem::path::__string_view v12;
  int v13;
  std::__fs::filesystem::path::__string_view v14;
  _BYTE *v15;
  std::basic_string_view<_CharT, _Traits>::size_type v16;
  std::basic_string_view<_CharT, _Traits>::size_type v17;
  void *v18;
  char v19;
  char v20;
  void *v21;
  void *v22;
  size_t v23;
  std::__fs::filesystem::path::__string_view v24;
  _BYTE *v25;
  std::basic_string_view<_CharT, _Traits>::size_type v26;
  std::basic_string_view<_CharT, _Traits>::size_type v27;
  void *v28;
  int v29;
  char v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  _DWORD *v34;
  _BOOL4 v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  std::__fs::filesystem::path::__string_view v39;
  _BYTE *v40;
  std::basic_string_view<_CharT, _Traits>::size_type v41;
  std::basic_string_view<_CharT, _Traits>::size_type v42;
  std::string::size_type size;
  void *v44;
  int v45;
  std::string *v46;
  std::string::size_type v47;
  uint64_t v48;
  uint64_t v49;
  void ***v50;
  _QWORD *v51;
  uint64_t v52;
  void ***v53;
  _QWORD *v56;
  void **v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  int v60;
  uint64_t v61;
  unsigned __int8 *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::string *v66;
  unint64_t v67;
  void *v68;
  int v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  unint64_t v72;
  _BYTE *v73;
  int v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  __int128 v78;
  unsigned __int8 *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::string *v83;
  unint64_t v84;
  void *v85;
  int v86;
  int v87;
  uint64_t v88;
  unint64_t *v89;
  __int128 v90;
  _BYTE v91[7];
  char v92;
  char v93;
  void *v94;
  char v95;
  void *v96;
  char v97;
  char v98;
  char v99;
  std::__fs::filesystem::path v100;
  std::__fs::filesystem::path v101;
  void *v102[2];
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  char v106;
  void *v107;
  char v108;
  void *v109;
  char v110;
  char v111;
  char v112;
  _BYTE v113[24];
  _BYTE v114[28];
  _BYTE v115[28];
  unsigned __int8 *v116;
  std::string v117;
  uint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  unsigned __int8 v122;
  _BYTE v123[24];
  void *v124[2];
  char v125;
  char v126;
  void *v127;
  char v128;
  void *v129;
  char v130;
  char v131;
  char v132;
  std::__fs::filesystem::path __src;
  void *__p[4];
  std::__fs::filesystem::path v135;
  _BYTE v136[28];
  void *v137;
  char v138;
  void *v139;
  char v140;
  char v141;
  char v142;
  std::string pn;
  _BYTE *v144;
  _BYTE __dst[32];
  _BYTE v146[64];
  uint64_t v147;
  char v148;
  uint64_t v149;
  char v150;
  _BYTE v151[32];
  std::__fs::filesystem::path *p_pn;
  unsigned __int8 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  char v158;
  char v159;
  uint64_t v160;

  v160 = *MEMORY[0x24BDAC8D0];
  v8 = std::__fs::filesystem::path::__extension((const std::__fs::filesystem::path *)a1);
  if (v8.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v8.__size_ >= 0x17)
  {
    v10 = (v8.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8.__size_ | 7) != 0x17)
      v10 = v8.__size_ | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    *(_QWORD *)&__dst[16] = v11 | 0x8000000000000000;
    *(_QWORD *)__dst = v9;
    *(_QWORD *)&__dst[8] = v8.__size_;
    goto LABEL_8;
  }
  __dst[23] = v8.__size_;
  v9 = __dst;
  if (v8.__size_)
LABEL_8:
    memmove(v9, v8.__data_, v8.__size_);
  v9[v8.__size_] = 0;
  *(_OWORD *)v151 = *(_OWORD *)__dst;
  *(_QWORD *)&v151[16] = *(_QWORD *)&__dst[16];
  memset(__dst, 0, 24);
  sub_20AF08074((unint64_t)__dst, ".csv", "");
  if (__dst[23] >= 0)
    v12.__data_ = __dst;
  else
    v12.__data_ = *(const std::string_view::value_type **)__dst;
  if (__dst[23] >= 0)
    v12.__size_ = __dst[23];
  else
    v12.__size_ = *(_QWORD *)&__dst[8];
  v13 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)v151, v12);
  if ((__dst[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__dst);
    if ((v151[23] & 0x80000000) == 0)
      goto LABEL_17;
  }
  else if ((v151[23] & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(*(void **)v151);
LABEL_17:
  memset(&v135, 0, sizeof(v135));
  memset(__p, 0, 24);
  memset(&__src, 0, sizeof(__src));
  if (!v13)
  {
    v14 = std::__fs::filesystem::path::__parent_path((const std::__fs::filesystem::path *)a1);
    if (v14.__size_ > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    if (v14.__size_ >= 0x17)
    {
      v16 = (v14.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14.__size_ | 7) != 0x17)
        v16 = v14.__size_ | 7;
      v17 = v16 + 1;
      v15 = operator new(v16 + 1);
      *(_QWORD *)&__dst[16] = v17 | 0x8000000000000000;
      *(_QWORD *)__dst = v15;
      *(_QWORD *)&__dst[8] = v14.__size_;
    }
    else
    {
      __dst[23] = v14.__size_;
      v15 = __dst;
      if (!v14.__size_)
      {
LABEL_31:
        v15[v14.__size_] = 0;
        *(_QWORD *)v151 = *(_QWORD *)&__dst[8];
        v18 = *(void **)__dst;
        *(_QWORD *)&v151[7] = *(_QWORD *)&__dst[15];
        v19 = __dst[23];
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        __p[0] = v18;
        __p[1] = *(void **)v151;
        *(void **)((char *)&__p[1] + 7) = *(void **)&v151[7];
        HIBYTE(__p[2]) = v19;
        if (&v135 != (std::__fs::filesystem::path *)a1)
        {
          v20 = *(_BYTE *)(a1 + 23);
          if (SHIBYTE(v135.__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v20 >= 0)
              v22 = (void *)a1;
            else
              v22 = *(void **)a1;
            if (v20 >= 0)
              v23 = *(unsigned __int8 *)(a1 + 23);
            else
              v23 = *(_QWORD *)(a1 + 8);
            sub_20AEC8090((void **)&v135.__pn_.__r_.__value_.__l.__data_, v22, v23);
          }
          else if ((*(_BYTE *)(a1 + 23) & 0x80) != 0)
          {
            sub_20AEC7FCC(&v135, *(void **)a1, *(_QWORD *)(a1 + 8));
          }
          else
          {
            v135 = *(std::__fs::filesystem::path *)a1;
          }
        }
        v24 = std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)a1);
        if (v24.__size_ > 0x7FFFFFFFFFFFFFF7)
          sub_20AEC0138();
        if (v24.__size_ >= 0x17)
        {
          v26 = (v24.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v24.__size_ | 7) != 0x17)
            v26 = v24.__size_ | 7;
          v27 = v26 + 1;
          v25 = operator new(v26 + 1);
          *(_QWORD *)&__dst[16] = v27 | 0x8000000000000000;
          *(_QWORD *)__dst = v25;
          *(_QWORD *)&__dst[8] = v24.__size_;
        }
        else
        {
          __dst[23] = v24.__size_;
          v25 = __dst;
          if (!v24.__size_)
          {
LABEL_68:
            v25[v24.__size_] = 0;
            v28 = *(void **)__dst;
            *(_DWORD *)v136 = *(_DWORD *)&__dst[16];
            *(_DWORD *)&v136[3] = *(_DWORD *)&__dst[19];
            v29 = __dst[23];
            if ((__dst[23] & 0x80000000) != 0)
            {
              sub_20AEC60F4(v151, *(void **)__dst, *(unint64_t *)&__dst[8]);
              v30 = v151[23];
              v31 = v151[23];
              v36 = v151[23];
              if (v151[23] < 0)
                v36 = *(_QWORD *)&v151[8];
              if (v36 >= 4)
              {
LABEL_72:
                v33 = v31 < 0;
                v34 = v151;
                if (v33)
                  v34 = *(_DWORD **)v151;
                v35 = *v34 == 1868983913;
                if ((v30 & 0x80) == 0)
                {
LABEL_81:
                  if (v29 < 0)
                  {
                    operator delete(v28);
                    if (v35)
                    {
LABEL_83:
                      sub_20AF55B94((uint64_t)v124, "sequence file must not be named 'info'");
                      v132 = 1;
                      sub_20B52280C((uint64_t)v124, (uint64_t)__dst);
                      *(_OWORD *)a4 = *(_OWORD *)__dst;
                      *(_BYTE *)(a4 + 16) = 0;
                      *(_BYTE *)(a4 + 112) = 0;
                      if ((_BYTE)v149)
                      {
                        *(_BYTE *)(a4 + 40) = 0;
                        v37 = v146[8];
                        if (v146[8])
                        {
                          *(_OWORD *)(a4 + 16) = *(_OWORD *)&__dst[16];
                          *(_QWORD *)(a4 + 32) = *(_QWORD *)v146;
                          *(_QWORD *)&__dst[24] = 0;
                          *(_QWORD *)v146 = 0;
                          *(_QWORD *)&__dst[16] = 0;
                          *(_BYTE *)(a4 + 40) = 1;
                        }
                        *(_BYTE *)(a4 + 48) = 0;
                        *(_BYTE *)(a4 + 104) = 0;
                        if (v148)
                        {
                          v38 = *(_QWORD *)&v146[40];
                          *(_QWORD *)(a4 + 64) = *(_QWORD *)&v146[32];
                          *(_OWORD *)(a4 + 48) = *(_OWORD *)&v146[16];
                          *(_OWORD *)&v146[16] = 0uLL;
                          *(_QWORD *)(a4 + 72) = v38;
                          *(_OWORD *)(a4 + 80) = *(_OWORD *)&v146[48];
                          *(_QWORD *)(a4 + 96) = v147;
                          *(_QWORD *)&v146[32] = 0;
                          *(_OWORD *)&v146[48] = 0uLL;
                          v147 = 0;
                          *(_BYTE *)(a4 + 104) = 1;
                        }
                        *(_BYTE *)(a4 + 112) = 1;
                        *(_BYTE *)(a4 + 120) = 0;
                        if (v37 && (v146[7] & 0x80000000) != 0)
                          operator delete(*(void **)&__dst[16]);
                        if (!v132)
                        {
LABEL_343:
                          if ((SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_344;
                          goto LABEL_348;
                        }
                      }
                      else
                      {
                        *(_BYTE *)(a4 + 120) = 0;
                        if (!v132)
                          goto LABEL_343;
                      }
                      if (v131)
                      {
                        if (v130 < 0)
                          operator delete(v129);
                        if (v128 < 0)
                          operator delete(v127);
                      }
                      if (v126 && v125 < 0)
                      {
                        operator delete(v124[0]);
                        if ((SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_344;
                        goto LABEL_348;
                      }
                      goto LABEL_343;
                    }
                  }
                  else if (v35)
                  {
                    goto LABEL_83;
                  }
                  v39 = std::__fs::filesystem::path::__stem(&v135);
                  if (v39.__size_ > 0x7FFFFFFFFFFFFFF7)
                    sub_20AEC0138();
                  if (v39.__size_ >= 0x17)
                  {
                    v41 = (v39.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v39.__size_ | 7) != 0x17)
                      v41 = v39.__size_ | 7;
                    v42 = v41 + 1;
                    v40 = operator new(v41 + 1);
                    *(_QWORD *)&__dst[16] = v42 | 0x8000000000000000;
                    *(_QWORD *)__dst = v40;
                    *(_QWORD *)&__dst[8] = v39.__size_;
                  }
                  else
                  {
                    __dst[23] = v39.__size_;
                    v40 = __dst;
                    if (!v39.__size_)
                    {
LABEL_102:
                      v40[v39.__size_] = 0;
                      size = *(_QWORD *)&__dst[8];
                      v44 = *(void **)__dst;
                      *(_DWORD *)v123 = *(_DWORD *)&__dst[16];
                      *(_DWORD *)&v123[3] = *(_DWORD *)&__dst[19];
                      v45 = __dst[23];
                      if ((__dst[23] & 0x80000000) != 0)
                      {
                        sub_20AEC60F4(&pn, *(void **)__dst, *(unint64_t *)&__dst[8]);
                        LOBYTE(v47) = *((_BYTE *)&pn.__r_.__value_.__s + 23);
                        size = pn.__r_.__value_.__l.__size_;
                        v46 = (std::string *)pn.__r_.__value_.__r.__words[0];
                      }
                      else
                      {
                        *(_OWORD *)&pn.__r_.__value_.__l.__data_ = *(_OWORD *)__dst;
                        LODWORD(pn.__r_.__value_.__r.__words[2]) = *(_DWORD *)v123;
                        *(_DWORD *)((char *)&pn.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v123[3];
                        *((_BYTE *)&pn.__r_.__value_.__s + 23) = __dst[23];
                        v46 = *(std::string **)__dst;
                        LOBYTE(v47) = __dst[23];
                      }
                      *(_QWORD *)__dst = "info_";
                      *(_QWORD *)&__dst[8] = 5;
                      v47 = v47;
                      if ((v47 & 0x80u) != 0)
                        v47 = size;
                      else
                        v46 = &pn;
                      *(_QWORD *)&__dst[16] = v46;
                      *(_QWORD *)&__dst[24] = v47;
                      *(_QWORD *)v146 = ".json";
                      *(_QWORD *)&v146[8] = 5;
                      sub_20AECFDF8((uint64_t)__dst, (uint64_t)&v146[16], 0, 0, (std::string *)v115);
                      *(_OWORD *)v136 = *(_OWORD *)v115;
                      *(_QWORD *)&v136[16] = *(_QWORD *)&v115[16];
                      memset(v115, 0, 24);
                      if (SHIBYTE(__p[2]) < 0)
                      {
                        sub_20AEC60F4(v151, __p[0], (unint64_t)__p[1]);
                      }
                      else
                      {
                        *(_OWORD *)v151 = *(_OWORD *)__p;
                        *(void **)&v151[16] = __p[2];
                      }
                      sub_20B1F6634((uint64_t)v151, (std::__fs::filesystem::path *)v136);
                      if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__src.__pn_.__r_.__value_.__l.__data_);
                      __src = *(std::__fs::filesystem::path *)v151;
                      v151[23] = 0;
                      v151[0] = 0;
                      if ((v136[23] & 0x80000000) != 0)
                      {
                        operator delete(*(void **)v136);
                        if ((v115[23] & 0x80000000) == 0)
                        {
LABEL_125:
                          if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_126;
                          goto LABEL_130;
                        }
                      }
                      else if ((v115[23] & 0x80000000) == 0)
                      {
                        goto LABEL_125;
                      }
                      operator delete(*(void **)v115);
                      if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_126:
                        if ((v45 & 0x80000000) == 0)
                          goto LABEL_133;
LABEL_131:
                        v21 = v44;
                        goto LABEL_132;
                      }
LABEL_130:
                      operator delete(pn.__r_.__value_.__l.__data_);
                      if ((v45 & 0x80000000) == 0)
                        goto LABEL_133;
                      goto LABEL_131;
                    }
                  }
                  memmove(v40, v39.__data_, v39.__size_);
                  goto LABEL_102;
                }
LABEL_80:
                operator delete(*(void **)v151);
                goto LABEL_81;
              }
            }
            else
            {
              *(_OWORD *)v151 = *(_OWORD *)__dst;
              *(_DWORD *)&v151[16] = *(_DWORD *)v136;
              *(_DWORD *)&v151[19] = *(_DWORD *)&v136[3];
              v151[23] = __dst[23];
              v30 = __dst[23];
              v31 = __dst[23];
              v32 = __dst[23];
              if (__dst[23] < 0)
                v32 = *(_QWORD *)&__dst[8];
              if (v32 >= 4)
                goto LABEL_72;
            }
            v35 = 0;
            if ((v30 & 0x80) == 0)
              goto LABEL_81;
            goto LABEL_80;
          }
        }
        memmove(v25, v24.__data_, v24.__size_);
        goto LABEL_68;
      }
    }
    memmove(v15, v14.__data_, v14.__size_);
    goto LABEL_31;
  }
  if (__p != (void **)a1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20AEC7FCC(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a1;
      __p[2] = *(void **)(a1 + 16);
    }
  }
  memset(v151, 0, 24);
  sub_20AF08074((unint64_t)v151, "sequence.csv", "");
  if (SHIBYTE(__p[2]) < 0)
  {
    sub_20AEC60F4(__dst, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)__p;
    *(void **)&__dst[16] = __p[2];
  }
  sub_20B1F6634((uint64_t)__dst, (std::__fs::filesystem::path *)v151);
  if (SHIBYTE(v135.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__pn_.__r_.__value_.__l.__data_);
  v135 = *(std::__fs::filesystem::path *)__dst;
  __dst[23] = 0;
  __dst[0] = 0;
  if ((v151[23] & 0x80000000) != 0)
    operator delete(*(void **)v151);
  memset(v151, 0, 24);
  sub_20AF08074((unint64_t)v151, "info.json", "");
  if (SHIBYTE(__p[2]) < 0)
  {
    sub_20AEC60F4(__dst, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)__p;
    *(void **)&__dst[16] = __p[2];
  }
  sub_20B1F6634((uint64_t)__dst, (std::__fs::filesystem::path *)v151);
  if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__pn_.__r_.__value_.__l.__data_);
  __src = *(std::__fs::filesystem::path *)__dst;
  __dst[23] = 0;
  __dst[0] = 0;
  if ((v151[23] & 0x80000000) != 0)
  {
    v21 = *(void **)v151;
LABEL_132:
    operator delete(v21);
  }
LABEL_133:
  *(_OWORD *)v123 = *(_OWORD *)a3;
  *(_QWORD *)&v123[16] = *(_QWORD *)(a3 + 16);
  *(_OWORD *)&v136[4] = *(_OWORD *)a3;
  *(_QWORD *)&v136[20] = *(_QWORD *)(a3 + 16);
  *(_OWORD *)&pn.__r_.__value_.__l.__data_ = xmmword_20B5EAC40;
  pn.__r_.__value_.__s.__data_[16] = 0;
  *(_QWORD *)&__dst[8] = 0x300000001;
  v48 = operator new();
  *(_BYTE *)v48 = 0;
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)&__dst[24] = sub_20B50F13C;
  v146[0] = 1;
  v146[56] = 0;
  LOBYTE(v147) = 0;
  BYTE4(v147) = 0;
  memset(&v146[16], 0, 25);
  *(_QWORD *)&v146[8] = v48;
  *(_QWORD *)&__dst[16] = v48;
  *(_QWORD *)__dst = &off_24C411808;
  sub_20B50671C((uint64_t)__dst);
  *(_QWORD *)v151 = "version";
  *(_QWORD *)&v151[8] = 7;
  *(_DWORD *)&v151[16] = 1;
  if (**(_BYTE **)&v146[8] <= 1u)
  {
    *(_QWORD *)&v146[40] = "version";
    *(_QWORD *)&v146[48] = 7;
    if (!v146[56])
      v146[56] = 1;
  }
  sub_20B5086B4((uint64_t)__dst, &v151[16]);
  *(_OWORD *)v151 = *(_OWORD *)v136;
  *(_OWORD *)&v151[12] = *(_OWORD *)&v136[12];
  if (**(_BYTE **)&v146[8] <= 1u)
  {
    *(_QWORD *)&v146[40] = "protocol_info";
    *(_QWORD *)&v146[48] = 13;
    if (!v146[56])
      v146[56] = 1;
  }
  sub_20B50671C((uint64_t)__dst);
  *(_QWORD *)v115 = "version";
  *(_QWORD *)&v115[8] = 7;
  *(_DWORD *)&v115[16] = 1;
  if (**(_BYTE **)&v146[8] <= 1u)
  {
    *(_QWORD *)&v146[40] = "version";
    *(_QWORD *)&v146[48] = 7;
    if (!v146[56])
      v146[56] = 1;
  }
  sub_20B5086B4((uint64_t)__dst, &v115[16]);
  if (**(_BYTE **)&v146[8] <= 1u)
  {
    *(_QWORD *)&v146[40] = "current";
    *(_QWORD *)&v146[48] = 7;
    if (!v146[56])
      v146[56] = 1;
  }
  *(_QWORD *)v115 = &v151[4];
  sub_20B1C212C((uint64_t)__dst, (uint64_t **)v115);
  if (**(_BYTE **)&v146[8] <= 1u)
  {
    *(_QWORD *)&v146[40] = "min";
    *(_QWORD *)&v146[48] = 3;
    if (!v146[56])
      v146[56] = 1;
  }
  *(_QWORD *)v115 = &v151[16];
  sub_20B1C212C((uint64_t)__dst, (uint64_t **)v115);
  v49 = *(_QWORD *)&v146[24];
  *(_QWORD *)&v146[8] = *(_QWORD *)(*(_QWORD *)&v146[24] - 8);
  *(_QWORD *)&v146[24] -= 8;
  if (v146[56])
    v146[56] = 0;
  *(_QWORD *)&v146[8] = *(_QWORD *)(v49 - 16);
  *(_QWORD *)&v146[24] = v49 - 16;
  sub_20B4F7E88(*(unsigned __int8 **)&__dst[16], (uint64_t)&pn, v121);
  *(_QWORD *)__dst = &off_24C41E750;
  if (*(_QWORD *)&v146[16])
  {
    *(_QWORD *)&v146[24] = *(_QWORD *)&v146[16];
    operator delete(*(void **)&v146[16]);
  }
  v50 = *(void ****)&__dst[16];
  *(_QWORD *)&__dst[16] = 0;
  if (v50)
    (*(void (**)(void ***))&__dst[24])(v50);
  if (!(*(unsigned int (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)a2 + 328))(a2, &__src))
  {
    sub_20B422114(&__src, 0x30u, a2, v115);
    if (*(_QWORD *)&v115[8])
    {
      v56 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&v115[8] + 16))(*(_QWORD *)&v115[8]);
      if ((v122 & 0x80u) == 0)
        v57 = v121;
      else
        v57 = (void **)v121[0];
      if ((v122 & 0x80u) == 0)
        v58 = v122;
      else
        v58 = (uint64_t)v121[1];
      sub_20AEC01D0(v56, (uint64_t)v57, v58);
      v150 = 1;
      v59 = *(std::__shared_weak_count **)&v115[16];
      if (!*(_QWORD *)&v115[16])
        goto LABEL_268;
      goto LABEL_264;
    }
    if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0)
      sub_20AEC60F4(&pn, __src.__pn_.__r_.__value_.__l.__data_, __src.__pn_.__r_.__value_.__l.__size_);
    else
      pn = __src.__pn_;
    v66 = std::string::insert(&pn, 0, "failed to create file ", 0x16uLL);
    v68 = (void *)v66->__r_.__value_.__r.__words[0];
    v67 = v66->__r_.__value_.__l.__size_;
    LODWORD(v118) = v66->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)&v118 + 3) = *(_DWORD *)((char *)&v66->__r_.__value_.__r.__words[2] + 3);
    v69 = SHIBYTE(v66->__r_.__value_.__r.__words[2]);
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    if (v69 < 0)
    {
      sub_20AEC60F4(v136, v68, v67);
    }
    else
    {
      *(_QWORD *)v136 = v68;
      *(_QWORD *)&v136[8] = v67;
      *(_DWORD *)&v136[16] = v118;
      *(_DWORD *)&v136[19] = *(_DWORD *)((char *)&v118 + 3);
      v136[23] = v69;
    }
    v136[24] = 1;
    LOBYTE(v137) = 0;
    v141 = 0;
    v142 = 1;
    sub_20AF558C0(5u, (__int128 *)v136, (uint64_t)v151);
    *(_OWORD *)__dst = *(_OWORD *)v151;
    __dst[16] = 0;
    LOBYTE(v149) = 0;
    if (v159)
    {
      v146[8] = 0;
      if (v153)
      {
        *(_OWORD *)&__dst[16] = *(_OWORD *)&v151[16];
        *(_QWORD *)v146 = p_pn;
        *(_QWORD *)&v151[24] = 0;
        p_pn = 0;
        *(_QWORD *)&v151[16] = 0;
        v146[8] = 1;
      }
      v146[16] = 0;
      v148 = 0;
      if (v158)
      {
        *(_OWORD *)&v146[32] = v155;
        *(_OWORD *)&v146[16] = v154;
        v154 = 0uLL;
        *(_OWORD *)&v146[48] = v156;
        v147 = v157;
        *(_QWORD *)&v155 = 0;
        v156 = 0uLL;
        v157 = 0;
        v148 = 1;
      }
      LOBYTE(v149) = 1;
      v150 = 0;
      if (v153 && SHIBYTE(p_pn) < 0)
        operator delete(*(void **)&v151[16]);
    }
    else
    {
      v150 = 0;
    }
    if (v142)
    {
      if (v141)
      {
        if (v140 < 0)
          operator delete(v139);
        if (v138 < 0)
          operator delete(v137);
      }
      if (v136[24] && (v136[23] & 0x80000000) != 0)
        operator delete(*(void **)v136);
    }
    if (v69 < 0)
    {
      operator delete(v68);
      if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_263:
        v59 = *(std::__shared_weak_count **)&v115[16];
        if (!*(_QWORD *)&v115[16])
          goto LABEL_268;
LABEL_264:
        p_shared_owners = (unint64_t *)&v59->__shared_owners_;
        do
          v71 = __ldaxr(p_shared_owners);
        while (__stlxr(v71 - 1, p_shared_owners));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
LABEL_268:
        if (!v150)
        {
          *(_OWORD *)v151 = *(_OWORD *)__dst;
          v73 = sub_20AECEBD0(&v151[16], (__int128 *)&__dst[16]);
          *(_OWORD *)a4 = *(_OWORD *)v151;
          *(_BYTE *)(a4 + 16) = 0;
          *(_BYTE *)(a4 + 112) = 0;
          if (v159)
          {
            *(_BYTE *)(a4 + 40) = 0;
            v74 = v153;
            if (v153)
            {
              *(_OWORD *)(a4 + 16) = *(_OWORD *)v73;
              *(_QWORD *)(a4 + 32) = *((_QWORD *)v73 + 2);
              *((_QWORD *)v73 + 1) = 0;
              *((_QWORD *)v73 + 2) = 0;
              *(_QWORD *)v73 = 0;
              *(_BYTE *)(a4 + 40) = 1;
            }
            *(_BYTE *)(a4 + 48) = 0;
            *(_BYTE *)(a4 + 104) = 0;
            if (v158)
            {
              v75 = *((_QWORD *)&v155 + 1);
              *(_QWORD *)(a4 + 64) = v155;
              *(_OWORD *)(a4 + 48) = v154;
              v154 = 0uLL;
              *(_QWORD *)(a4 + 72) = v75;
              *(_OWORD *)(a4 + 80) = v156;
              *(_QWORD *)(a4 + 96) = v157;
              *(_QWORD *)&v155 = 0;
              v156 = 0uLL;
              v157 = 0;
              *(_BYTE *)(a4 + 104) = 1;
            }
            *(_BYTE *)(a4 + 112) = 1;
            *(_BYTE *)(a4 + 120) = 0;
            if (v74 && SHIBYTE(p_pn) < 0)
              operator delete(*(void **)&v151[16]);
          }
          else
          {
            *(_BYTE *)(a4 + 120) = 0;
          }
          if (!v150 && (_BYTE)v149)
          {
            if (v148)
            {
              if (SHIBYTE(v147) < 0)
                operator delete(*(void **)&v146[48]);
              if ((v146[39] & 0x80000000) != 0)
                operator delete(*(void **)&v146[16]);
            }
            if (v146[8] && (v146[7] & 0x80000000) != 0)
              operator delete(*(void **)&__dst[16]);
          }
          goto LABEL_342;
        }
LABEL_269:
        sub_20B422114(&v135, 0x11u, a2, v151);
        v72 = *(_QWORD *)&v151[8];
        if (*(_QWORD *)&v151[8])
        {
          if (SHIBYTE(__p[2]) < 0)
          {
            sub_20AEC60F4(__dst, __p[0], (unint64_t)__p[1]);
            v72 = *(_QWORD *)&v151[8];
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)__p;
            *(void **)&__dst[16] = __p[2];
          }
          *(_QWORD *)&__dst[24] = &off_24C41B880;
          *(_QWORD *)v146 = v72;
          *(_QWORD *)&v146[8] = *(_QWORD *)&v151[16];
          if (*(_QWORD *)&v151[16])
          {
            v76 = (unint64_t *)(*(_QWORD *)&v151[16] + 8);
            do
              v77 = __ldxr(v76);
            while (__stxr(v77 + 1, v76));
            v78 = *(_OWORD *)v146;
          }
          else
          {
            v78 = v72;
          }
          *(_OWORD *)a4 = *(_OWORD *)__dst;
          *(_QWORD *)(a4 + 16) = *(_QWORD *)&__dst[16];
          *(_QWORD *)(a4 + 24) = &off_24C41B880;
          *(_OWORD *)(a4 + 32) = v78;
          *(_BYTE *)(a4 + 120) = 1;
          v63 = *(std::__shared_weak_count **)&v151[16];
          if (!*(_QWORD *)&v151[16])
            goto LABEL_342;
LABEL_338:
          v89 = (unint64_t *)&v63->__shared_owners_;
          do
            v65 = __ldaxr(v89);
          while (__stlxr(v65 - 1, v89));
          goto LABEL_340;
        }
        if (SHIBYTE(v135.__pn_.__r_.__value_.__r.__words[2]) < 0)
          sub_20AEC60F4(v136, v135.__pn_.__r_.__value_.__l.__data_, v135.__pn_.__r_.__value_.__l.__size_);
        else
          *(std::__fs::filesystem::path *)v136 = v135;
        v83 = std::string::insert((std::string *)v136, 0, "failed to create file ", 0x16uLL);
        v85 = (void *)v83->__r_.__value_.__r.__words[0];
        v84 = v83->__r_.__value_.__l.__size_;
        *(_DWORD *)v115 = v83->__r_.__value_.__r.__words[2];
        *(_DWORD *)&v115[3] = *(_DWORD *)((char *)&v83->__r_.__value_.__r.__words[2] + 3);
        v86 = SHIBYTE(v83->__r_.__value_.__r.__words[2]);
        v83->__r_.__value_.__l.__size_ = 0;
        v83->__r_.__value_.__r.__words[2] = 0;
        v83->__r_.__value_.__r.__words[0] = 0;
        if (v86 < 0)
        {
          sub_20AEC60F4(&v90, v85, v84);
        }
        else
        {
          *(_QWORD *)&v90 = v85;
          *((_QWORD *)&v90 + 1) = v84;
          *(_DWORD *)v91 = *(_DWORD *)v115;
          *(_DWORD *)&v91[3] = *(_DWORD *)&v115[3];
          v92 = v86;
        }
        v93 = 1;
        LOBYTE(v94) = 0;
        v98 = 0;
        v99 = 1;
        sub_20AF558C0(5u, &v90, (uint64_t)__dst);
        *(_OWORD *)a4 = *(_OWORD *)__dst;
        *(_BYTE *)(a4 + 16) = 0;
        *(_BYTE *)(a4 + 112) = 0;
        if ((_BYTE)v149)
        {
          *(_BYTE *)(a4 + 40) = 0;
          v87 = v146[8];
          if (v146[8])
          {
            *(_OWORD *)(a4 + 16) = *(_OWORD *)&__dst[16];
            *(_QWORD *)(a4 + 32) = *(_QWORD *)v146;
            *(_QWORD *)&__dst[24] = 0;
            *(_QWORD *)v146 = 0;
            *(_QWORD *)&__dst[16] = 0;
            *(_BYTE *)(a4 + 40) = 1;
          }
          *(_BYTE *)(a4 + 48) = 0;
          *(_BYTE *)(a4 + 104) = 0;
          if (v148)
          {
            v88 = *(_QWORD *)&v146[40];
            *(_QWORD *)(a4 + 64) = *(_QWORD *)&v146[32];
            *(_OWORD *)(a4 + 48) = *(_OWORD *)&v146[16];
            *(_OWORD *)&v146[16] = 0uLL;
            *(_QWORD *)(a4 + 72) = v88;
            *(_OWORD *)(a4 + 80) = *(_OWORD *)&v146[48];
            *(_QWORD *)(a4 + 96) = v147;
            *(_QWORD *)&v146[32] = 0;
            *(_OWORD *)&v146[48] = 0uLL;
            v147 = 0;
            *(_BYTE *)(a4 + 104) = 1;
          }
          *(_BYTE *)(a4 + 112) = 1;
          *(_BYTE *)(a4 + 120) = 0;
          if (v87 && (v146[7] & 0x80000000) != 0)
            operator delete(*(void **)&__dst[16]);
        }
        else
        {
          *(_BYTE *)(a4 + 120) = 0;
        }
        if (v99)
        {
          if (v98)
          {
            if (v97 < 0)
              operator delete(v96);
            if (v95 < 0)
              operator delete(v94);
          }
          if (v93 && v92 < 0)
            operator delete((void *)v90);
        }
        if (v86 < 0)
        {
          operator delete(v85);
          if ((v136[23] & 0x80000000) == 0)
          {
LABEL_337:
            v63 = *(std::__shared_weak_count **)&v151[16];
            if (!*(_QWORD *)&v151[16])
              goto LABEL_342;
            goto LABEL_338;
          }
        }
        else if ((v136[23] & 0x80000000) == 0)
        {
          goto LABEL_337;
        }
        operator delete(*(void **)v136);
        v63 = *(std::__shared_weak_count **)&v151[16];
        if (!*(_QWORD *)&v151[16])
          goto LABEL_342;
        goto LABEL_338;
      }
    }
    else if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_263;
    }
    operator delete(pn.__r_.__value_.__l.__data_);
    v59 = *(std::__shared_weak_count **)&v115[16];
    if (!*(_QWORD *)&v115[16])
      goto LABEL_268;
    goto LABEL_264;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::__fs::filesystem::path *, uint64_t))(*(_QWORD *)a2 + 368))(&v118, a2, &__src, 8);
  v51 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 16))(v119);
  sub_20B1F91AC(&v117, *(_QWORD **)((char *)v51 + *(_QWORD *)(*v51 - 24) + 40), 0);
  sub_20B4F8A14((uint64_t *)&v117, (uint64_t *)&v116);
  memset(&v114[4], 0, 24);
  sub_20B4541AC((uint64_t)v151, v116);
  *(_QWORD *)&__dst[8] = 0x300000001;
  *(_QWORD *)__dst = &unk_24C41E890;
  v52 = operator new();
  *(_BYTE *)v52 = v151[0];
  *(_QWORD *)(v52 + 8) = *(_QWORD *)&v151[8];
  v151[0] = 0;
  *(_QWORD *)&v151[8] = 0;
  *(_QWORD *)&__dst[16] = v52;
  *(_QWORD *)&__dst[24] = sub_20B50F13C;
  *(_QWORD *)v146 = v52;
  v148 = 0;
  v149 = 0;
  memset(&v146[8], 0, 49);
  sub_20B4181DC((void ***)&v151[8], 0);
  *(_QWORD *)__dst = &off_24C411450;
  sub_20B208498((uint64_t)__dst, (uint64_t)v114);
  *(_OWORD *)v115 = *(_OWORD *)v114;
  *(_OWORD *)&v115[12] = *(_OWORD *)&v114[12];
  *(_QWORD *)__dst = &unk_24C41E890;
  if (*(_QWORD *)&v146[32])
  {
    *(_QWORD *)&v146[40] = *(_QWORD *)&v146[32];
    operator delete(*(void **)&v146[32]);
  }
  if (*(_QWORD *)&v146[8])
  {
    *(_QWORD *)&v146[16] = *(_QWORD *)&v146[8];
    operator delete(*(void **)&v146[8]);
  }
  v53 = *(void ****)&__dst[16];
  *(_QWORD *)&__dst[16] = 0;
  if (v53)
    (*(void (**)(void ***))&__dst[24])(v53);
  *(_OWORD *)v113 = *(_OWORD *)&v115[4];
  *(_QWORD *)&v113[16] = *(_QWORD *)&v115[20];
  if (*(_QWORD *)&v115[4] == *(_QWORD *)v123
    && *(unsigned int *)&v113[8] == (unint64_t)*(unsigned int *)&v123[8]
    && *(_QWORD *)&v113[12] == *(_QWORD *)&v123[12]
    && *(unsigned int *)&v113[20] == (unint64_t)*(unsigned int *)&v123[20])
  {
    v79 = v116;
    v116 = 0;
    if (v79)
    {
      sub_20B4181DC((void ***)v79 + 1, *v79);
      MEMORY[0x20BD3583C](v79, 0x1022C40B06DCE69);
    }
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v117.__r_.__value_.__l.__data_);
    v80 = v120;
    if (v120)
    {
      v81 = (unint64_t *)&v120->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    goto LABEL_269;
  }
  if (SHIBYTE(v135.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&v101, v135.__pn_.__r_.__value_.__l.__data_, v135.__pn_.__r_.__value_.__l.__size_);
  else
    v101 = v135;
  if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&v100, __src.__pn_.__r_.__value_.__l.__data_, __src.__pn_.__r_.__value_.__l.__size_);
  else
    v100 = __src;
  *(_DWORD *)&v136[24] = 0;
  sub_20AF6A9E4(v136, "Can't append to sequence '");
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = &v101;
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = &v101;
  p_pn = &v101;
  if (*(_DWORD *)&v136[24] == -1)
    sub_20AECFAB8();
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  ((void (*)(std::string *, _BYTE *))off_24C4117E0[*(unsigned int *)&v136[24]])(&pn, v136);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = "'. Info file '";
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = "'. Info file '";
  p_pn = (std::__fs::filesystem::path *)"'. Info file '";
  if (*(_DWORD *)&v136[24] == -1)
    sub_20AECFAB8();
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  ((void (*)(std::string *, _BYTE *))off_24C411950[*(unsigned int *)&v136[24]])(&pn, v136);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = &v100;
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = &v100;
  p_pn = &v100;
  if (*(_DWORD *)&v136[24] == -1)
    sub_20AECFAB8();
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  ((void (*)(std::string *, _BYTE *))off_24C4117E0[*(unsigned int *)&v136[24]])(&pn, v136);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = "' sequence protocol version ";
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = "' sequence protocol version ";
  p_pn = (std::__fs::filesystem::path *)"' sequence protocol version ";
  if (*(_DWORD *)&v136[24] == -1)
    sub_20AECFAB8();
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  ((void (*)(std::string *, _BYTE *))off_24C411968[*(unsigned int *)&v136[24]])(&pn, v136);
  sub_20B208C00(&pn, (uint64_t *)v113);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = &pn;
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = &pn;
  p_pn = (std::__fs::filesystem::path *)&pn;
  if (*(_DWORD *)&v136[24] == -1)
    sub_20AECFAB8();
  v144 = v151;
  ((void (*)(_BYTE **, _BYTE *))off_24C411798[*(unsigned int *)&v136[24]])(&v144, v136);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = " is incompatible with current version ";
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = " is incompatible with current version ";
  p_pn = (std::__fs::filesystem::path *)" is incompatible with current version ";
  if (*(_DWORD *)&v136[24] == -1)
    sub_20AECFAB8();
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  ((void (*)(std::string *, _BYTE *))off_24C411980[*(unsigned int *)&v136[24]])(&pn, v136);
  sub_20B208C00(&pn, (uint64_t *)v123);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = &pn;
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = &pn;
  p_pn = (std::__fs::filesystem::path *)&pn;
  if (*(_DWORD *)&v136[24] == -1)
    sub_20AECFAB8();
  v144 = v151;
  ((void (*)(_BYTE **, _BYTE *))off_24C411798[*(unsigned int *)&v136[24]])(&v144, v136);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = ".";
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = ".";
  p_pn = (std::__fs::filesystem::path *)".";
  if (*(_DWORD *)&v136[24] == -1)
    sub_20AECFAB8();
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  ((void (*)(std::string *, _BYTE *))off_24C411998[*(unsigned int *)&v136[24]])(&pn, v136);
  if (*(_DWORD *)&v136[24] == -1)
    sub_20AECFAB8();
  *(_QWORD *)v151 = &pn;
  ((void (*)(void **__return_ptr, _BYTE *, _BYTE *))off_24C4117C8[*(unsigned int *)&v136[24]])(v102, v151, v136);
  if (*(_DWORD *)&v136[24] != -1)
    ((void (*)(_BYTE *, _BYTE *))off_24C4117B0[*(unsigned int *)&v136[24]])(v151, v136);
  if (SHIBYTE(v103) < 0)
  {
    sub_20AEC60F4(&v104, v102[0], (unint64_t)v102[1]);
  }
  else
  {
    v104 = *(_OWORD *)v102;
    v105 = v103;
  }
  v106 = 1;
  LOBYTE(v107) = 0;
  v111 = 0;
  v112 = 1;
  sub_20AF558C0(5u, &v104, (uint64_t)__dst);
  *(_OWORD *)a4 = *(_OWORD *)__dst;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!(_BYTE)v149)
  {
    *(_BYTE *)(a4 + 120) = 0;
    if (!v112)
      goto LABEL_224;
    goto LABEL_216;
  }
  *(_BYTE *)(a4 + 40) = 0;
  v60 = v146[8];
  if (v146[8])
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)&__dst[16];
    *(_QWORD *)(a4 + 32) = *(_QWORD *)v146;
    *(_QWORD *)&__dst[24] = 0;
    *(_QWORD *)v146 = 0;
    *(_QWORD *)&__dst[16] = 0;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (v148)
  {
    v61 = *(_QWORD *)&v146[40];
    *(_QWORD *)(a4 + 64) = *(_QWORD *)&v146[32];
    *(_OWORD *)(a4 + 48) = *(_OWORD *)&v146[16];
    *(_OWORD *)&v146[16] = 0uLL;
    *(_QWORD *)(a4 + 72) = v61;
    *(_OWORD *)(a4 + 80) = *(_OWORD *)&v146[48];
    *(_QWORD *)(a4 + 96) = v147;
    *(_QWORD *)&v146[32] = 0;
    *(_OWORD *)&v146[48] = 0uLL;
    v147 = 0;
    *(_BYTE *)(a4 + 104) = 1;
  }
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (v60 && (v146[7] & 0x80000000) != 0)
    operator delete(*(void **)&__dst[16]);
  if (v112)
  {
LABEL_216:
    if (v111)
    {
      if (v110 < 0)
        operator delete(v109);
      if (v108 < 0)
        operator delete(v107);
    }
    if (v106 && SHIBYTE(v105) < 0)
      operator delete((void *)v104);
  }
LABEL_224:
  if (SHIBYTE(v103) < 0)
  {
    operator delete(v102[0]);
    if ((SHIBYTE(v100.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_226:
      if ((SHIBYTE(v101.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_227;
      goto LABEL_237;
    }
  }
  else if ((SHIBYTE(v100.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_226;
  }
  operator delete(v100.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v101.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_227:
    v62 = v116;
    v116 = 0;
    if (!v62)
      goto LABEL_229;
    goto LABEL_228;
  }
LABEL_237:
  operator delete(v101.__pn_.__r_.__value_.__l.__data_);
  v62 = v116;
  v116 = 0;
  if (v62)
  {
LABEL_228:
    sub_20B4181DC((void ***)v62 + 1, *v62);
    MEMORY[0x20BD3583C](v62, 0x1022C40B06DCE69);
  }
LABEL_229:
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v117.__r_.__value_.__l.__data_);
  v63 = v120;
  if (v120)
  {
    v64 = (unint64_t *)&v120->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
LABEL_340:
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
LABEL_342:
  if (((char)v122 & 0x80000000) == 0)
    goto LABEL_343;
  operator delete(v121[0]);
  if ((SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_344:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_345;
    goto LABEL_349;
  }
LABEL_348:
  operator delete(__src.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
LABEL_345:
    if ((SHIBYTE(v135.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_350:
    operator delete(v135.__pn_.__r_.__value_.__l.__data_);
    return;
  }
LABEL_349:
  operator delete(__p[0]);
  if (SHIBYTE(v135.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_350;
}

void sub_20B1FE778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  char a71;
  void *v71;
  uint64_t v72;

  operator delete(v71);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  sub_20B4224E8(v72 - 224);
  if (a71 < 0)
    operator delete(a66);
  if (SLOBYTE(STACK[0x277]) < 0)
  {
    operator delete((void *)STACK[0x260]);
    if ((SLOBYTE(STACK[0x297]) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((SLOBYTE(STACK[0x297]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x2B7]) < 0)
      goto LABEL_8;
    goto LABEL_11;
  }
  operator delete((void *)STACK[0x280]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x2A0]);
    _Unwind_Resume(a1);
  }
LABEL_11:
  _Unwind_Resume(a1);
}

void sub_20B1FEB30(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__fs::filesystem::path::__string_view v7;
  _BYTE *v8;
  std::basic_string_view<_CharT, _Traits>::size_type v9;
  std::basic_string_view<_CharT, _Traits>::size_type v10;
  std::__fs::filesystem::path::__string_view v11;
  int v12;
  std::__fs::filesystem::path::__string_view v13;
  _BYTE *v14;
  std::basic_string_view<_CharT, _Traits>::size_type v15;
  std::basic_string_view<_CharT, _Traits>::size_type v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  void *v21;
  size_t v22;
  std::__fs::filesystem::path::__string_view v23;
  _BYTE *v24;
  std::basic_string_view<_CharT, _Traits>::size_type v25;
  std::basic_string_view<_CharT, _Traits>::size_type v26;
  void *v27;
  void *v28;
  int v29;
  void **v30;
  unint64_t v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  void *v40;
  int v41;
  uint64_t v42;
  void ***v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::string v63;
  char v64;
  void *v65;
  char v66;
  void *v67;
  char v68;
  char v69;
  char v70;
  std::string v71;
  char v72;
  void *v73;
  char v74;
  void *v75;
  char v76;
  char v77;
  char v78;
  _BYTE v79[28];
  __int128 v80;
  uint64_t v81;
  void *v82[2];
  uint64_t v83;
  char v84;
  void *v85;
  char v86;
  void *v87;
  char v88;
  char v89;
  char v90;
  std::string v91;
  void *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  void *v95[2];
  uint64_t v96;
  char v97;
  _OWORD v98[2];
  std::string v99;
  char v100;
  void *v101;
  char v102;
  void *v103;
  char v104;
  char v105;
  char v106;
  uint64_t v107;
  __int128 v108;
  std::string v109;
  char v110;
  void *v111;
  char v112;
  void *v113;
  char v114;
  char v115;
  char v116;
  void *v117[2];
  uint64_t v118;
  std::__fs::filesystem::path v119;
  void *__p[4];
  std::string __src;
  int v122;
  _BYTE v123[32];
  const char *v124;
  _BYTE *v125;
  char v126;
  _BYTE __dst[32];
  __int128 v128;
  void *v129[2];
  uint64_t v130;
  uint64_t v131;
  void *v132[2];
  uint64_t v133;
  char v134;
  char v135;
  unsigned __int8 v136;
  __int128 v137;
  __int128 v138;
  const char *v139;
  _BYTE v140[56];
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;

  v144 = *MEMORY[0x24BDAC8D0];
  v7 = std::__fs::filesystem::path::__extension((const std::__fs::filesystem::path *)a1);
  if (v7.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v7.__size_ >= 0x17)
  {
    v9 = (v7.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7.__size_ | 7) != 0x17)
      v9 = v7.__size_ | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)&__dst[16] = v10 | 0x8000000000000000;
    *(_QWORD *)__dst = v8;
    *(_QWORD *)&__dst[8] = v7.__size_;
    goto LABEL_8;
  }
  __dst[23] = v7.__size_;
  v8 = __dst;
  if (v7.__size_)
LABEL_8:
    memmove(v8, v7.__data_, v7.__size_);
  v8[v7.__size_] = 0;
  v137 = *(_OWORD *)__dst;
  *(_QWORD *)&v138 = *(_QWORD *)&__dst[16];
  memset(__dst, 0, 24);
  sub_20AF08074((unint64_t)__dst, ".csv", "");
  if (__dst[23] >= 0)
    v11.__data_ = __dst;
  else
    v11.__data_ = *(const std::string_view::value_type **)__dst;
  if (__dst[23] >= 0)
    v11.__size_ = __dst[23];
  else
    v11.__size_ = *(_QWORD *)&__dst[8];
  v12 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)&v137, v11);
  if ((__dst[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__dst);
    if ((SBYTE7(v138) & 0x80000000) == 0)
      goto LABEL_17;
  }
  else if ((SBYTE7(v138) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete((void *)v137);
LABEL_17:
  memset(__p, 0, 24);
  memset(&v119, 0, sizeof(v119));
  v117[1] = 0;
  v117[0] = 0;
  v118 = 0;
  if (v12)
  {
    if (__p != (void **)a1)
    {
      if (*(char *)(a1 + 23) < 0)
      {
        sub_20AEC7FCC(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)a1;
        __p[2] = *(void **)(a1 + 16);
      }
    }
    v137 = 0uLL;
    *(_QWORD *)&v138 = 0;
    sub_20AF08074((unint64_t)&v137, "sequence.csv", "");
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a1;
      *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 16);
    }
    sub_20B1F6634((uint64_t)__dst, (std::__fs::filesystem::path *)&v137);
    if (SHIBYTE(v119.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v119.__pn_.__r_.__value_.__l.__data_);
    v119 = *(std::__fs::filesystem::path *)__dst;
    __dst[23] = 0;
    __dst[0] = 0;
    if (SBYTE7(v138) < 0)
      operator delete((void *)v137);
    v137 = 0uLL;
    *(_QWORD *)&v138 = 0;
    sub_20AF08074((unint64_t)&v137, "info.json", "");
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a1;
      *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 16);
    }
    sub_20B1F6634((uint64_t)__dst, (std::__fs::filesystem::path *)&v137);
    if (SHIBYTE(v118) < 0)
      operator delete(v117[0]);
    *(_OWORD *)v117 = *(_OWORD *)__dst;
    v118 = *(_QWORD *)&__dst[16];
    __dst[23] = 0;
    __dst[0] = 0;
    if (SBYTE7(v138) < 0)
    {
      v20 = (void *)v137;
      goto LABEL_112;
    }
LABEL_83:
    if (((*(uint64_t (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)a2 + 328))(a2, &v119) & 1) == 0)
      goto LABEL_113;
LABEL_84:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, std::__fs::filesystem::path *, uint64_t))(*(_QWORD *)a2 + 368))(&v107, a2, &v119, 8);
    if (!(_QWORD)v108)
    {
      *(_DWORD *)&v123[24] = 0;
      sub_20AF6A3D8(v123, "failed to open file ");
      sub_20AFF447C((uint64_t)v98, (uint64_t)v123, (uint64_t)&v119);
      *(_QWORD *)&v137 = v123;
      *((_QWORD *)&v137 + 1) = ".";
      *(_QWORD *)&v138 = v123;
      *((_QWORD *)&v138 + 1) = ".";
      v139 = ".";
      if (*(_DWORD *)&v123[24] == -1)
        sub_20AECFAB8();
      v95[0] = &v137;
      ((void (*)(void **, _BYTE *))off_24C411998[*(unsigned int *)&v123[24]])(v95, v123);
      if (*(_DWORD *)&v123[24] == -1)
        sub_20AECFAB8();
      *(_QWORD *)&v137 = v95;
      ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24C4117C8[*(unsigned int *)&v123[24]])(&__src, &v137, v123);
      if (*(_DWORD *)&v123[24] != -1)
        ((void (*)(__int128 *, _BYTE *))off_24C4117B0[*(unsigned int *)&v123[24]])(&v137, v123);
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        sub_20AEC60F4(&v99, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
      else
        v99 = __src;
      v100 = 1;
      LOBYTE(v101) = 0;
      v105 = 0;
      v106 = 1;
      sub_20AF558C0(5u, (__int128 *)&v99, (uint64_t)__dst);
      *(_OWORD *)a4 = *(_OWORD *)__dst;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v135)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v38 = BYTE8(v128);
        if (BYTE8(v128))
        {
          *(_OWORD *)(a4 + 16) = *(_OWORD *)&__dst[16];
          *(_QWORD *)(a4 + 32) = v128;
          *(_QWORD *)&__dst[24] = 0;
          *(_QWORD *)&v128 = 0;
          *(_QWORD *)&__dst[16] = 0;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v134)
        {
          v39 = v131;
          *(_QWORD *)(a4 + 64) = v130;
          *(_OWORD *)(a4 + 48) = *(_OWORD *)v129;
          v129[0] = 0;
          v129[1] = 0;
          *(_QWORD *)(a4 + 72) = v39;
          *(_OWORD *)(a4 + 80) = *(_OWORD *)v132;
          *(_QWORD *)(a4 + 96) = v133;
          v130 = 0;
          v132[0] = 0;
          v132[1] = 0;
          v133 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v38 && SBYTE7(v128) < 0)
          operator delete(*(void **)&__dst[16]);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (v106)
      {
        if (v105)
        {
          if (v104 < 0)
            operator delete(v103);
          if (v102 < 0)
            operator delete(v101);
        }
        if (v100 && SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v99.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      {
        v40 = (void *)__src.__r_.__value_.__r.__words[0];
LABEL_306:
        operator delete(v40);
      }
LABEL_307:
      v59 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
      if (*((_QWORD *)&v108 + 1))
      {
        v60 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
          if ((SHIBYTE(v118) & 0x80000000) == 0)
            goto LABEL_312;
LABEL_139:
          operator delete(v117[0]);
          if (SHIBYTE(v119.__pn_.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_140;
LABEL_313:
          if (SHIBYTE(__p[2]) < 0)
            goto LABEL_141;
          return;
        }
      }
LABEL_311:
      if ((SHIBYTE(v118) & 0x80000000) == 0)
        goto LABEL_312;
      goto LABEL_139;
    }
    memset(v98, 0, 24);
    LOBYTE(v95[0]) = 0;
    v97 = 0;
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a2 + 328))(a2, v117))
    {
      (*(void (**)(void **__return_ptr, uint64_t, void **, uint64_t))(*(_QWORD *)a2 + 368))(&v92, a2, v117, 8);
      v32 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 16))(v93);
      sub_20B1F91AC(&v91, *(_QWORD **)((char *)v32 + *(_QWORD *)(*v32 - 24) + 40), 0);
      sub_20B4F96FC((uint64_t *)&v91, (uint64_t)__dst);
      v33 = v136;
      if (v136)
      {
        memset(&v79[4], 0, 24);
        sub_20B4541AC((uint64_t)&__src, *(unsigned __int8 **)__dst);
        *(_QWORD *)&v137 = &unk_24C41E890;
        *((_QWORD *)&v137 + 1) = 0x300000001;
        v34 = operator new();
        *(_BYTE *)v34 = __src.__r_.__value_.__s.__data_[0];
        *(_QWORD *)(v34 + 8) = __src.__r_.__value_.__l.__size_;
        __src.__r_.__value_.__s.__data_[0] = 0;
        __src.__r_.__value_.__l.__size_ = 0;
        *(_QWORD *)&v138 = v34;
        *((_QWORD *)&v138 + 1) = sub_20B50F13C;
        v139 = (const char *)v34;
        v142 = 0;
        v143 = 0;
        memset(v140, 0, 49);
        sub_20B4181DC((void ***)&__src.__r_.__value_.__l.__size_, 0);
        *(_QWORD *)&v137 = &off_24C411450;
        sub_20B208498((uint64_t)&v137, (uint64_t)v79);
        *(_OWORD *)v123 = *(_OWORD *)v79;
        *(_OWORD *)&v123[12] = *(_OWORD *)&v79[12];
        *(_QWORD *)&v137 = &unk_24C41E890;
        if (*(_QWORD *)&v140[24])
        {
          *(_QWORD *)&v140[32] = *(_QWORD *)&v140[24];
          operator delete(*(void **)&v140[24]);
        }
        if (*(_QWORD *)v140)
        {
          *(_QWORD *)&v140[8] = *(_QWORD *)v140;
          operator delete(*(void **)v140);
        }
        v35 = v138;
        *(_QWORD *)&v138 = 0;
        if (v35)
          (*((void (**)(void))&v138 + 1))();
        v98[0] = *(_OWORD *)&v123[4];
        *(_QWORD *)&v98[1] = *(_QWORD *)&v123[20];
      }
      else
      {
        v122 = 0;
        sub_20AF4C134(&__src, "failed to load sequence info from file ");
        sub_20AFF447C((uint64_t)&v126, (uint64_t)&__src, (uint64_t)v117);
        *(_QWORD *)v123 = &__src;
        *(_QWORD *)&v123[8] = ":";
        *(_QWORD *)&v123[16] = &__src;
        *(_QWORD *)&v123[24] = ":";
        v124 = ":";
        if (v122 == -1)
          sub_20AECFAB8();
        v125 = v123;
        ((void (*)(_BYTE **, std::string *))off_24C411998[v122])(&v125, &__src);
        sub_20AF57E5C((uint64_t)v123, (std::string::size_type)&__src, (uint64_t)__dst);
        if (v122 == -1)
          sub_20AECFAB8();
        *(_QWORD *)v123 = &v125;
        ((void (*)(__int128 *__return_ptr, _BYTE *, std::string *))off_24C4117C8[v122])(&v80, v123, &__src);
        if (v122 != -1)
          ((void (*)(_BYTE *, std::string *))off_24C4117B0[v122])(v123, &__src);
        if (SHIBYTE(v81) < 0)
        {
          sub_20AEC60F4(v82, (void *)v80, *((unint64_t *)&v80 + 1));
        }
        else
        {
          *(_OWORD *)v82 = v80;
          v83 = v81;
        }
        v84 = 1;
        LOBYTE(v85) = 0;
        v89 = 0;
        v90 = 1;
        sub_20AF558C0(5u, (__int128 *)v82, (uint64_t)&v137);
        *(_OWORD *)a4 = v137;
        *(_BYTE *)(a4 + 16) = 0;
        *(_BYTE *)(a4 + 112) = 0;
        if ((_BYTE)v143)
        {
          *(_BYTE *)(a4 + 40) = 0;
          v41 = v140[0];
          if (v140[0])
          {
            *(_OWORD *)(a4 + 16) = v138;
            *(_QWORD *)(a4 + 32) = v139;
            v139 = 0;
            v138 = 0uLL;
            *(_BYTE *)(a4 + 40) = 1;
          }
          *(_BYTE *)(a4 + 48) = 0;
          *(_BYTE *)(a4 + 104) = 0;
          if (v142)
          {
            v42 = *(_QWORD *)&v140[32];
            *(_QWORD *)(a4 + 64) = *(_QWORD *)&v140[24];
            *(_OWORD *)(a4 + 48) = *(_OWORD *)&v140[8];
            *(_OWORD *)&v140[8] = 0uLL;
            *(_QWORD *)(a4 + 72) = v42;
            *(_OWORD *)(a4 + 80) = *(_OWORD *)&v140[40];
            *(_QWORD *)(a4 + 96) = v141;
            *(_QWORD *)&v140[24] = 0;
            *(_OWORD *)&v140[40] = 0uLL;
            v141 = 0;
            *(_BYTE *)(a4 + 104) = 1;
          }
          *(_BYTE *)(a4 + 112) = 1;
          *(_BYTE *)(a4 + 120) = 0;
          if (v41 && SHIBYTE(v139) < 0)
            operator delete((void *)v138);
        }
        else
        {
          *(_BYTE *)(a4 + 120) = 0;
        }
        if (v90)
        {
          if (v89)
          {
            if (v88 < 0)
              operator delete(v87);
            if (v86 < 0)
              operator delete(v85);
          }
          if (v84 && SHIBYTE(v83) < 0)
            operator delete(v82[0]);
        }
        if (SHIBYTE(v81) < 0)
          operator delete((void *)v80);
      }
      if (v136)
      {
        v43 = *(void ****)__dst;
        *(_QWORD *)__dst = 0;
        if (v43)
        {
          sub_20B4181DC(v43 + 1, *(unsigned __int8 *)v43);
          MEMORY[0x20BD3583C](v43, 0x1022C40B06DCE69);
        }
      }
      else if (v135)
      {
        if (v134)
        {
          if (SHIBYTE(v133) < 0)
            operator delete(v132[0]);
          if (SHIBYTE(v130) < 0)
            operator delete(v129[0]);
        }
        if (BYTE8(v128) && SBYTE7(v128) < 0)
          operator delete(*(void **)&__dst[16]);
      }
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      v44 = v94;
      if (v94)
      {
        p_shared_owners = (unint64_t *)&v94->__shared_owners_;
        do
          v46 = __ldaxr(p_shared_owners);
        while (__stlxr(v46 - 1, p_shared_owners));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      if (!v33)
        goto LABEL_303;
    }
    else
    {
      v98[0] = xmmword_20B5EAC50;
      *(_QWORD *)&v98[1] = 9;
      DWORD2(v138) = 0;
      sub_20AF71210(&v137, "No info file ");
      sub_20AFF447C((uint64_t)&v92, (uint64_t)&v137, (uint64_t)v117);
      *(_QWORD *)__dst = &v137;
      *(_QWORD *)&__dst[8] = " found. Assuming legacy data (v 1.0.0).";
      *(_QWORD *)&__dst[16] = &v137;
      *(_QWORD *)&__dst[24] = " found. Assuming legacy data (v 1.0.0).";
      *(_QWORD *)&v128 = " found. Assuming legacy data (v 1.0.0).";
      if (DWORD2(v138) == -1)
        sub_20AECFAB8();
      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
      ((void (*)(std::string *, __int128 *))off_24C4119C8[DWORD2(v138)])(&__src, &v137);
      if (DWORD2(v138) == -1)
        sub_20AECFAB8();
      *(_QWORD *)__dst = &__src;
      ((void (*)(_BYTE *__return_ptr, _BYTE *, __int128 *))off_24C4117C8[DWORD2(v138)])(v123, __dst, &v137);
      if (DWORD2(v138) != -1)
        ((void (*)(_BYTE *, __int128 *))off_24C4117B0[DWORD2(v138)])(__dst, &v137);
      if (v97)
      {
        if (SHIBYTE(v96) < 0)
          operator delete(v95[0]);
        *(_OWORD *)v95 = *(_OWORD *)v123;
        v96 = *(_QWORD *)&v123[16];
      }
      else
      {
        *(_OWORD *)v95 = *(_OWORD *)v123;
        v96 = *(_QWORD *)&v123[16];
        v97 = 1;
      }
    }
    LODWORD(v47) = HIDWORD(v98[0]);
    v48 = *(_QWORD *)a3;
    if (HIDWORD(v98[0]) != *(_QWORD *)a3
      || (v47 = HIDWORD(*(_QWORD *)((char *)v98 + 12)), v48 >>= 32, LODWORD(v98[1]) != (_DWORD)v48)
      || (LODWORD(v47) = DWORD1(v98[1]), LODWORD(v48) = *(_DWORD *)(a3 + 8), DWORD1(v98[1]) != (_DWORD)v48))
    {
      if (v47 >= v48)
      {
        *(_DWORD *)&v123[24] = 0;
        sub_20AF6A9E4(v123, "Cannot load sequence file ");
        sub_20AFF447C((uint64_t)&v91, (uint64_t)v123, (uint64_t)&v119);
        *(_QWORD *)&v137 = v123;
        *((_QWORD *)&v137 + 1) = " with current protocol version ";
        *(_QWORD *)&v138 = v123;
        *((_QWORD *)&v138 + 1) = " with current protocol version ";
        v139 = " with current protocol version ";
        if (*(_DWORD *)&v123[24] == -1)
          sub_20AECFAB8();
        v92 = &v137;
        ((void (*)(void **, _BYTE *))off_24C4119E0[*(unsigned int *)&v123[24]])(&v92, v123);
        sub_20B1C2234((uint64_t)&v80, (uint64_t)v123, (uint64_t *)a3);
        *(_QWORD *)&v137 = v123;
        *((_QWORD *)&v137 + 1) = "; the minimum required protocol version for the sequence is ";
        *(_QWORD *)&v138 = v123;
        *((_QWORD *)&v138 + 1) = "; the minimum required protocol version for the sequence is ";
        v139 = "; the minimum required protocol version for the sequence is ";
        if (*(_DWORD *)&v123[24] == -1)
          sub_20AECFAB8();
        v92 = &v137;
        ((void (*)(void **, _BYTE *))off_24C4119F8[*(unsigned int *)&v123[24]])(&v92, v123);
        sub_20B1C2234((uint64_t)&v125, (uint64_t)v123, (uint64_t *)((unint64_t)v98 | 0xC));
        *(_QWORD *)&v137 = v123;
        *((_QWORD *)&v137 + 1) = ".";
        *(_QWORD *)&v138 = v123;
        *((_QWORD *)&v138 + 1) = ".";
        v139 = ".";
        if (*(_DWORD *)&v123[24] == -1)
          sub_20AECFAB8();
        v92 = &v137;
        ((void (*)(void **, _BYTE *))off_24C411998[*(unsigned int *)&v123[24]])(&v92, v123);
        if (*(_DWORD *)&v123[24] == -1)
          sub_20AECFAB8();
        *(_QWORD *)&v137 = &v92;
        ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24C4117C8[*(unsigned int *)&v123[24]])(&__src, &v137, v123);
        if (*(_DWORD *)&v123[24] != -1)
          ((void (*)(__int128 *, _BYTE *))off_24C4117B0[*(unsigned int *)&v123[24]])(&v137, v123);
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          sub_20AEC60F4(&v71, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
        else
          v71 = __src;
        v72 = 1;
        LOBYTE(v73) = 0;
        v77 = 0;
        v78 = 1;
        sub_20AF558C0(5u, (__int128 *)&v71, (uint64_t)__dst);
        *(_OWORD *)a4 = *(_OWORD *)__dst;
        *(_BYTE *)(a4 + 16) = 0;
        *(_BYTE *)(a4 + 112) = 0;
        if (v135)
        {
          *(_BYTE *)(a4 + 40) = 0;
          v51 = BYTE8(v128);
          if (BYTE8(v128))
          {
            *(_OWORD *)(a4 + 16) = *(_OWORD *)&__dst[16];
            *(_QWORD *)(a4 + 32) = v128;
            *(_QWORD *)&__dst[24] = 0;
            *(_QWORD *)&v128 = 0;
            *(_QWORD *)&__dst[16] = 0;
            *(_BYTE *)(a4 + 40) = 1;
          }
          *(_BYTE *)(a4 + 48) = 0;
          *(_BYTE *)(a4 + 104) = 0;
          if (v134)
          {
            v52 = v131;
            *(_QWORD *)(a4 + 64) = v130;
            *(_OWORD *)(a4 + 48) = *(_OWORD *)v129;
            v129[0] = 0;
            v129[1] = 0;
            *(_QWORD *)(a4 + 72) = v52;
            *(_OWORD *)(a4 + 80) = *(_OWORD *)v132;
            *(_QWORD *)(a4 + 96) = v133;
            v130 = 0;
            v132[0] = 0;
            v132[1] = 0;
            v133 = 0;
            *(_BYTE *)(a4 + 104) = 1;
          }
          *(_BYTE *)(a4 + 112) = 1;
          *(_BYTE *)(a4 + 120) = 0;
          if (v51 && SBYTE7(v128) < 0)
            operator delete(*(void **)&__dst[16]);
        }
        else
        {
          *(_BYTE *)(a4 + 120) = 0;
        }
        if (v78)
        {
          if (v77)
          {
            if (v76 < 0)
              operator delete(v75);
            if (v74 < 0)
              operator delete(v73);
          }
          if (v72 && SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v71.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        {
          v53 = (void *)__src.__r_.__value_.__r.__words[0];
LABEL_302:
          operator delete(v53);
        }
LABEL_303:
        if (v97 && SHIBYTE(v96) < 0)
        {
          v40 = v95[0];
          goto LABEL_306;
        }
        goto LABEL_307;
      }
    }
    v49 = *(_QWORD *)(a3 + 12);
    LODWORD(v50) = v98[0];
    if ((_DWORD)v49 == LODWORD(v98[0])
      && (v49 >>= 32, v50 = HIDWORD(*(_QWORD *)&v98[0]), (_DWORD)v49 == DWORD1(v98[0]))
      && (LODWORD(v49) = *(_DWORD *)(a3 + 20), LODWORD(v50) = DWORD2(v98[0]), (_DWORD)v49 == DWORD2(v98[0]))
      || v49 < v50)
    {
      if (SHIBYTE(__p[2]) < 0)
      {
        sub_20AEC60F4(__dst, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)__p;
        *(void **)&__dst[16] = __p[2];
      }
      *(_QWORD *)&__dst[24] = &off_24C41B858;
      v128 = v108;
      if (*((_QWORD *)&v108 + 1))
      {
        v54 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
        v56 = v128;
      }
      else
      {
        v56 = (unint64_t)v108;
      }
      *(_OWORD *)a4 = *(_OWORD *)__dst;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)&__dst[16];
      *(_QWORD *)(a4 + 24) = &off_24C41B858;
      *(_OWORD *)(a4 + 32) = v56;
      *(_BYTE *)(a4 + 120) = 1;
      goto LABEL_303;
    }
    if (!v97)
    {
      HIBYTE(v94) = 0;
      LOBYTE(v92) = 0;
      goto LABEL_270;
    }
    *(_DWORD *)&v123[24] = 0;
    sub_20B002838(v123, " Warning: ");
    if (v97)
    {
      *(_QWORD *)&v137 = v123;
      *((_QWORD *)&v137 + 1) = v95;
      *(_QWORD *)&v138 = v123;
      *((_QWORD *)&v138 + 1) = v95;
      v139 = (const char *)v95;
      if (*(_DWORD *)&v123[24] != -1)
      {
        v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&v137;
        ((void (*)(std::string *, _BYTE *))off_24C4117E0[*(unsigned int *)&v123[24]])(&v91, v123);
LABEL_267:
        if (*(_DWORD *)&v123[24] == -1)
          sub_20AECFAB8();
        *(_QWORD *)&v137 = &v91;
        ((void (*)(void **__return_ptr, __int128 *, _BYTE *))off_24C4117C8[*(unsigned int *)&v123[24]])(&v92, &v137, v123);
        if (*(_DWORD *)&v123[24] != -1)
          ((void (*)(__int128 *, _BYTE *))off_24C4117B0[*(unsigned int *)&v123[24]])(&v137, v123);
LABEL_270:
        *(_DWORD *)&v123[24] = 0;
        sub_20AF6A9E4(v123, "Cannot load sequence file ");
        sub_20AFF447C((uint64_t)&v80, (uint64_t)v123, (uint64_t)&v119);
        *(_QWORD *)&v137 = v123;
        *((_QWORD *)&v137 + 1) = " of protocol version ";
        *(_QWORD *)&v138 = v123;
        *((_QWORD *)&v138 + 1) = " of protocol version ";
        v139 = " of protocol version ";
        if (*(_DWORD *)&v123[24] == -1)
          sub_20AECFAB8();
        v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&v137;
        ((void (*)(std::string *, _BYTE *))off_24C411A10[*(unsigned int *)&v123[24]])(&v91, v123);
        sub_20B1C2234((uint64_t)&v125, (uint64_t)v123, (uint64_t *)v98);
        *(_QWORD *)&v137 = v123;
        *((_QWORD *)&v137 + 1) = "; the oldest loadable protocol version of this program is ";
        *(_QWORD *)&v138 = v123;
        *((_QWORD *)&v138 + 1) = "; the oldest loadable protocol version of this program is ";
        v139 = "; the oldest loadable protocol version of this program is ";
        if (*(_DWORD *)&v123[24] == -1)
          sub_20AECFAB8();
        v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&v137;
        ((void (*)(std::string *, _BYTE *))off_24C411A28[*(unsigned int *)&v123[24]])(&v91, v123);
        sub_20B1C2234((uint64_t)&v126, (uint64_t)v123, (uint64_t *)(a3 + 12));
        *(_QWORD *)&v137 = v123;
        *((_QWORD *)&v137 + 1) = ". See online documentation for possible conversion tools.";
        *(_QWORD *)&v138 = v123;
        *((_QWORD *)&v138 + 1) = ". See online documentation for possible conversion tools.";
        v139 = ". See online documentation for possible conversion tools.";
        if (*(_DWORD *)&v123[24] == -1)
          sub_20AECFAB8();
        v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&v137;
        ((void (*)(std::string *, _BYTE *))off_24C411A40[*(unsigned int *)&v123[24]])(&v91, v123);
        *(_QWORD *)&v137 = v123;
        *((_QWORD *)&v137 + 1) = &v92;
        *(_QWORD *)&v138 = v123;
        *((_QWORD *)&v138 + 1) = &v92;
        v139 = (const char *)&v92;
        if (*(_DWORD *)&v123[24] == -1)
          sub_20AECFAB8();
        v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&v137;
        ((void (*)(std::string *, _BYTE *))off_24C4117E0[*(unsigned int *)&v123[24]])(&v91, v123);
        if (*(_DWORD *)&v123[24] == -1)
          sub_20AECFAB8();
        *(_QWORD *)&v137 = &v91;
        ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24C4117C8[*(unsigned int *)&v123[24]])(&__src, &v137, v123);
        if (*(_DWORD *)&v123[24] != -1)
          ((void (*)(__int128 *, _BYTE *))off_24C4117B0[*(unsigned int *)&v123[24]])(&v137, v123);
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          sub_20AEC60F4(&v63, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
        else
          v63 = __src;
        v64 = 1;
        LOBYTE(v65) = 0;
        v69 = 0;
        v70 = 1;
        sub_20AF558C0(5u, (__int128 *)&v63, (uint64_t)__dst);
        *(_OWORD *)a4 = *(_OWORD *)__dst;
        *(_BYTE *)(a4 + 16) = 0;
        *(_BYTE *)(a4 + 112) = 0;
        if (v135)
        {
          *(_BYTE *)(a4 + 40) = 0;
          v57 = BYTE8(v128);
          if (BYTE8(v128))
          {
            *(_OWORD *)(a4 + 16) = *(_OWORD *)&__dst[16];
            *(_QWORD *)(a4 + 32) = v128;
            *(_QWORD *)&__dst[24] = 0;
            *(_QWORD *)&v128 = 0;
            *(_QWORD *)&__dst[16] = 0;
            *(_BYTE *)(a4 + 40) = 1;
          }
          *(_BYTE *)(a4 + 48) = 0;
          *(_BYTE *)(a4 + 104) = 0;
          if (v134)
          {
            v58 = v131;
            *(_QWORD *)(a4 + 64) = v130;
            *(_OWORD *)(a4 + 48) = *(_OWORD *)v129;
            v129[0] = 0;
            v129[1] = 0;
            *(_QWORD *)(a4 + 72) = v58;
            *(_OWORD *)(a4 + 80) = *(_OWORD *)v132;
            *(_QWORD *)(a4 + 96) = v133;
            v130 = 0;
            v132[0] = 0;
            v132[1] = 0;
            v133 = 0;
            *(_BYTE *)(a4 + 104) = 1;
          }
          *(_BYTE *)(a4 + 112) = 1;
          *(_BYTE *)(a4 + 120) = 0;
          if (v57 && SBYTE7(v128) < 0)
            operator delete(*(void **)&__dst[16]);
        }
        else
        {
          *(_BYTE *)(a4 + 120) = 0;
        }
        if (v70)
        {
          if (v69)
          {
            if (v68 < 0)
              operator delete(v67);
            if (v66 < 0)
              operator delete(v65);
          }
          if (v64 && SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v63.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__src.__r_.__value_.__l.__data_);
        if (SHIBYTE(v94) < 0)
        {
          v53 = v92;
          goto LABEL_302;
        }
        goto LABEL_303;
      }
    }
    else
    {
      *(_QWORD *)&v137 = v123;
      *((_QWORD *)&v137 + 1) = "nullopt";
      *(_QWORD *)&v138 = v123;
      *((_QWORD *)&v138 + 1) = "nullopt";
      v139 = "nullopt";
      if (*(_DWORD *)&v123[24] != -1)
      {
        v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&v137;
        ((void (*)(std::string *, _BYTE *))off_24C411938[*(unsigned int *)&v123[24]])(&v91, v123);
        goto LABEL_267;
      }
    }
    sub_20AECFAB8();
  }
  v13 = std::__fs::filesystem::path::__parent_path((const std::__fs::filesystem::path *)a1);
  if (v13.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v13.__size_ >= 0x17)
  {
    v15 = (v13.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13.__size_ | 7) != 0x17)
      v15 = v13.__size_ | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)&__dst[16] = v16 | 0x8000000000000000;
    *(_QWORD *)__dst = v14;
    *(_QWORD *)&__dst[8] = v13.__size_;
    goto LABEL_30;
  }
  __dst[23] = v13.__size_;
  v14 = __dst;
  if (v13.__size_)
LABEL_30:
    memmove(v14, v13.__data_, v13.__size_);
  v14[v13.__size_] = 0;
  *(_QWORD *)&v137 = *(_QWORD *)&__dst[8];
  v17 = *(void **)__dst;
  *(_QWORD *)((char *)&v137 + 7) = *(_QWORD *)&__dst[15];
  v18 = __dst[23];
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  __p[0] = v17;
  __p[1] = (void *)v137;
  *(void **)((char *)&__p[1] + 7) = *(void **)((char *)&v137 + 7);
  HIBYTE(__p[2]) = v18;
  if (&v119 != (std::__fs::filesystem::path *)a1)
  {
    v19 = *(_BYTE *)(a1 + 23);
    if (SHIBYTE(v119.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v19 >= 0)
        v21 = (void *)a1;
      else
        v21 = *(void **)a1;
      if (v19 >= 0)
        v22 = *(unsigned __int8 *)(a1 + 23);
      else
        v22 = *(_QWORD *)(a1 + 8);
      sub_20AEC8090((void **)&v119.__pn_.__r_.__value_.__l.__data_, v21, v22);
    }
    else if ((*(_BYTE *)(a1 + 23) & 0x80) != 0)
    {
      sub_20AEC7FCC(&v119, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      v119 = *(std::__fs::filesystem::path *)a1;
    }
  }
  v23 = std::__fs::filesystem::path::__stem(&v119);
  if (v23.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v23.__size_ >= 0x17)
  {
    v25 = (v23.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23.__size_ | 7) != 0x17)
      v25 = v23.__size_ | 7;
    v26 = v25 + 1;
    v24 = operator new(v25 + 1);
    *(_QWORD *)&__dst[16] = v26 | 0x8000000000000000;
    *(_QWORD *)__dst = v24;
    *(_QWORD *)&__dst[8] = v23.__size_;
    goto LABEL_67;
  }
  __dst[23] = v23.__size_;
  v24 = __dst;
  if (v23.__size_)
LABEL_67:
    memmove(v24, v23.__data_, v23.__size_);
  v24[v23.__size_] = 0;
  v27 = *(void **)&__dst[8];
  v28 = *(void **)__dst;
  LODWORD(v107) = *(_DWORD *)&__dst[16];
  *(_DWORD *)((char *)&v107 + 3) = *(_DWORD *)&__dst[19];
  v29 = __dst[23];
  if ((__dst[23] & 0x80000000) != 0)
  {
    sub_20AEC60F4(v95, *(void **)__dst, *(unint64_t *)&__dst[8]);
    LOBYTE(v31) = HIBYTE(v96);
    v30 = (void **)v95[0];
    v27 = v95[1];
  }
  else
  {
    *(_OWORD *)v95 = *(_OWORD *)__dst;
    LODWORD(v96) = v107;
    *(_DWORD *)((char *)&v96 + 3) = *(_DWORD *)((char *)&v107 + 3);
    HIBYTE(v96) = __dst[23];
    v30 = *(void ***)__dst;
    LOBYTE(v31) = __dst[23];
  }
  *(_QWORD *)__dst = "info_";
  *(_QWORD *)&__dst[8] = 5;
  v31 = v31;
  if ((v31 & 0x80u) != 0)
    v31 = (unint64_t)v27;
  else
    v30 = v95;
  *(_QWORD *)&__dst[16] = v30;
  *(_QWORD *)&__dst[24] = v31;
  *(_QWORD *)&v128 = ".json";
  *((_QWORD *)&v128 + 1) = 5;
  sub_20AECFDF8((uint64_t)__dst, (uint64_t)v129, 0, 0, &__src);
  *(std::string *)v123 = __src;
  memset(&__src, 0, sizeof(__src));
  if (SHIBYTE(__p[2]) < 0)
  {
    sub_20AEC60F4(&v137, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    v137 = *(_OWORD *)__p;
    *(void **)&v138 = __p[2];
  }
  sub_20B1F6634((uint64_t)&v137, (std::__fs::filesystem::path *)v123);
  if (SHIBYTE(v118) < 0)
    operator delete(v117[0]);
  *(_OWORD *)v117 = v137;
  v118 = v138;
  BYTE7(v138) = 0;
  LOBYTE(v137) = 0;
  if ((v123[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v123);
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_81:
      if ((SHIBYTE(v96) & 0x80000000) == 0)
        goto LABEL_82;
      goto LABEL_110;
    }
  }
  else if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_81;
  }
  operator delete(__src.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v96) & 0x80000000) == 0)
  {
LABEL_82:
    if ((v29 & 0x80000000) == 0)
      goto LABEL_83;
    goto LABEL_111;
  }
LABEL_110:
  operator delete(v95[0]);
  if ((v29 & 0x80000000) == 0)
    goto LABEL_83;
LABEL_111:
  v20 = v28;
LABEL_112:
  operator delete(v20);
  if (((*(uint64_t (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)a2 + 328))(a2, &v119) & 1) != 0)
    goto LABEL_84;
LABEL_113:
  *(_DWORD *)&v123[24] = 0;
  sub_20AF6B5FC(v123, "sequence file ");
  sub_20AFF447C((uint64_t)&v107, (uint64_t)v123, (uint64_t)&v119);
  *(_QWORD *)&v137 = v123;
  *((_QWORD *)&v137 + 1) = " not found";
  *(_QWORD *)&v138 = v123;
  *((_QWORD *)&v138 + 1) = " not found";
  v139 = " not found";
  if (*(_DWORD *)&v123[24] == -1)
    sub_20AECFAB8();
  v95[0] = &v137;
  ((void (*)(void **, _BYTE *))off_24C4119B0[*(unsigned int *)&v123[24]])(v95, v123);
  if (*(_DWORD *)&v123[24] == -1)
    sub_20AECFAB8();
  *(_QWORD *)&v137 = v95;
  ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24C4117C8[*(unsigned int *)&v123[24]])(&__src, &v137, v123);
  if (*(_DWORD *)&v123[24] != -1)
    ((void (*)(__int128 *, _BYTE *))off_24C4117B0[*(unsigned int *)&v123[24]])(&v137, v123);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&v109, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
  else
    v109 = __src;
  v110 = 1;
  LOBYTE(v111) = 0;
  v115 = 0;
  v116 = 1;
  sub_20AF558C0(5u, (__int128 *)&v109, (uint64_t)__dst);
  *(_OWORD *)a4 = *(_OWORD *)__dst;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!v135)
  {
    *(_BYTE *)(a4 + 120) = 0;
    if (!v116)
      goto LABEL_137;
LABEL_131:
    if (!v115)
      goto LABEL_134;
    if (v114 < 0)
    {
      operator delete(v113);
      if ((v112 & 0x80000000) == 0)
      {
LABEL_134:
        if (!v110)
          goto LABEL_137;
LABEL_135:
        if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v109.__r_.__value_.__l.__data_);
        goto LABEL_137;
      }
    }
    else if ((v112 & 0x80000000) == 0)
    {
      goto LABEL_134;
    }
    operator delete(v111);
    if (!v110)
      goto LABEL_137;
    goto LABEL_135;
  }
  *(_BYTE *)(a4 + 40) = 0;
  v36 = BYTE8(v128);
  if (BYTE8(v128))
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)&__dst[16];
    *(_QWORD *)(a4 + 32) = v128;
    *(_QWORD *)&__dst[24] = 0;
    *(_QWORD *)&v128 = 0;
    *(_QWORD *)&__dst[16] = 0;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (v134)
  {
    v37 = v131;
    *(_QWORD *)(a4 + 64) = v130;
    *(_OWORD *)(a4 + 48) = *(_OWORD *)v129;
    v129[0] = 0;
    v129[1] = 0;
    *(_QWORD *)(a4 + 72) = v37;
    *(_OWORD *)(a4 + 80) = *(_OWORD *)v132;
    *(_QWORD *)(a4 + 96) = v133;
    v130 = 0;
    v132[0] = 0;
    v132[1] = 0;
    v133 = 0;
    *(_BYTE *)(a4 + 104) = 1;
  }
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (v36 && SBYTE7(v128) < 0)
    operator delete(*(void **)&__dst[16]);
  if (v116)
    goto LABEL_131;
LABEL_137:
  if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_311;
  operator delete(__src.__r_.__value_.__l.__data_);
  if (SHIBYTE(v118) < 0)
    goto LABEL_139;
LABEL_312:
  if ((SHIBYTE(v119.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_313;
LABEL_140:
  operator delete(v119.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[2]) < 0)
LABEL_141:
    operator delete(__p[0]);
}

void sub_20B200598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  void *a68;
  void *a71;
  char a72;
  char a73;

  if (a47 < 0)
    operator delete(__p);
  sub_20B20096C((void ****)&STACK[0x3B0]);
  if (a67 < 0)
    operator delete(a62);
  sub_20B422408((uint64_t)&a68);
  if (a73)
  {
    if (a72 < 0)
      operator delete(a71);
  }
  sub_20B422408((uint64_t)&STACK[0x268]);
  if (SLOBYTE(STACK[0x307]) < 0)
  {
    operator delete((void *)STACK[0x2F0]);
    if ((SLOBYTE(STACK[0x327]) & 0x80000000) == 0)
      goto LABEL_10;
  }
  else if ((SLOBYTE(STACK[0x327]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SLOBYTE(STACK[0x347]) & 0x80000000) == 0)
LABEL_15:
      _Unwind_Resume(a1);
LABEL_14:
    operator delete((void *)STACK[0x330]);
    _Unwind_Resume(a1);
  }
  operator delete((void *)STACK[0x310]);
  if ((SLOBYTE(STACK[0x347]) & 0x80000000) == 0)
    goto LABEL_15;
  goto LABEL_14;
}

void ****sub_20B20096C(void ****a1)
{
  void ***v2;

  if (*((_BYTE *)a1 + 120))
  {
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      sub_20B4181DC(v2 + 1, *(unsigned __int8 *)v2);
      MEMORY[0x20BD3583C](v2, 0x1022C40B06DCE69);
    }
    return a1;
  }
  if (!*((_BYTE *)a1 + 112))
    return a1;
  if (!*((_BYTE *)a1 + 104))
    goto LABEL_9;
  if (*((char *)a1 + 103) < 0)
  {
    operator delete(a1[10]);
    if (*((char *)a1 + 71) < 0)
      goto LABEL_13;
LABEL_9:
    if (*((_BYTE *)a1 + 40))
      goto LABEL_10;
    return a1;
  }
  if ((*((char *)a1 + 71) & 0x80000000) == 0)
    goto LABEL_9;
LABEL_13:
  operator delete(a1[6]);
  if (!*((_BYTE *)a1 + 40))
    return a1;
LABEL_10:
  if ((*((char *)a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(a1[2]);
  return a1;
}

void sub_20B200A30(std::runtime_error *this)
{
  if (!LOBYTE(this[8].__vftable))
    goto LABEL_7;
  if (!LOBYTE(this[7].__imp_.__imp_))
    goto LABEL_5;
  if (SHIBYTE(this[7].__vftable) < 0)
  {
    operator delete(this[6].__vftable);
    if (SHIBYTE(this[5].__vftable) < 0)
      goto LABEL_10;
LABEL_5:
    if (!LOBYTE(this[3].__imp_.__imp_))
      goto LABEL_7;
    goto LABEL_6;
  }
  if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
    goto LABEL_5;
LABEL_10:
  operator delete(this[4].__vftable);
  if (!LOBYTE(this[3].__imp_.__imp_))
    goto LABEL_7;
LABEL_6:
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[2].__vftable);
    std::runtime_error::~runtime_error(this);
    return;
  }
LABEL_7:
  std::runtime_error::~runtime_error(this);
}

void sub_20B200ABC(std::runtime_error *this)
{
  if (!LOBYTE(this[8].__vftable))
    goto LABEL_10;
  if (!LOBYTE(this[7].__imp_.__imp_))
    goto LABEL_5;
  if (SHIBYTE(this[7].__vftable) < 0)
  {
    operator delete(this[6].__vftable);
    if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
    {
LABEL_5:
      if (!LOBYTE(this[3].__imp_.__imp_))
        goto LABEL_10;
      goto LABEL_6;
    }
  }
  else if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(this[4].__vftable);
  if (!LOBYTE(this[3].__imp_.__imp_))
    goto LABEL_10;
LABEL_6:
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[2].__vftable);
LABEL_10:
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B200B4C(uint64_t a1, uint64_t a2, void *__src, size_t __len, uint64_t a5, char a6)
{
  std::__fs::filesystem::path *p_dst;
  size_t v13;
  size_t v14;
  std::__fs::filesystem::path *v15;
  std::string::size_type size;
  void **v17;
  void **v18;
  _BYTE *v19;
  char v20;
  int v21;
  BOOL v22;
  char *v23;
  char *v24;
  char v25;
  uint64_t v26;
  char *v27;
  void **v28;
  void **v29;
  void *v30;
  std::__fs::filesystem::path __p;
  void *v32;
  void **v33;
  std::__fs::filesystem::path v34;
  std::__fs::filesystem::path __dst;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x24BDAC8D0];
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (__len >= 0x17)
  {
    v13 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v13 = __len | 7;
    v14 = v13 + 1;
    p_dst = (std::__fs::filesystem::path *)operator new(v13 + 1);
    __dst.__pn_.__r_.__value_.__l.__size_ = __len;
    __dst.__pn_.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  p_dst->__pn_.__r_.__value_.__s.__data_[__len] = 0;
  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &__dst;
  else
    v15 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__pn_.__r_.__value_.__l.__size_;
  sub_20AF4E53C((char *)v15, size, ".", 1, 0, (uint64_t)&v32);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    v17 = (void **)v32;
    v18 = v33;
    memset(v36, 0, 15);
    if (v32 != v33)
      goto LABEL_17;
  }
  else
  {
    v17 = (void **)v32;
    v18 = v33;
    memset(v36, 0, 15);
    if (v32 != v33)
    {
LABEL_17:
      v19 = 0;
      v20 = 0;
      while (1)
      {
        v34.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
        v34.__pn_.__r_.__value_.__l.__size_ = v36[0];
        *(std::string::size_type *)((char *)&v34.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v36 + 7);
        *((_BYTE *)&v34.__pn_.__r_.__value_.__s + 23) = v20;
        memset(v36, 0, 15);
        if (*((char *)v17 + 23) < 0)
        {
          if (!v17[1] || *(_BYTE *)*v17 != 47)
          {
LABEL_27:
            if (std::__fs::filesystem::path::__filename(&v34).__size_)
              std::string::push_back(&v34.__pn_, 47);
            goto LABEL_30;
          }
        }
        else if (!*((_BYTE *)v17 + 23) || *(_BYTE *)v17 != 47)
        {
          goto LABEL_27;
        }
        if (v20 < 0)
        {
          *v19 = 0;
          v34.__pn_.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v34.__pn_.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v34.__pn_.__r_.__value_.__s + 23) = 0;
        }
LABEL_30:
        v21 = *((char *)v17 + 23);
        v22 = v21 < 0;
        if (v21 >= 0)
          v23 = (char *)v17;
        else
          v23 = (char *)*v17;
        v24 = (char *)*((unsigned __int8 *)v17 + 23);
        if (v22)
          v24 = (char *)v17[1];
        sub_20AF08074((unint64_t)&v34, v23, &v24[(_QWORD)v23]);
        v25 = HIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_20AEC60F4(&__dst, v34.__pn_.__r_.__value_.__l.__data_, v34.__pn_.__r_.__value_.__l.__size_);
          v25 = HIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]);
        }
        else
        {
          __dst = v34;
        }
        v36[0] = __dst.__pn_.__r_.__value_.__l.__size_;
        v19 = (_BYTE *)__dst.__pn_.__r_.__value_.__r.__words[0];
        *(_QWORD *)((char *)v36 + 7) = *(std::string::size_type *)((char *)&__dst.__pn_.__r_.__value_.__r.__words[1] + 7);
        v20 = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
        *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = 0;
        __dst.__pn_.__r_.__value_.__s.__data_[0] = 0;
        if (v25 < 0)
          operator delete(v34.__pn_.__r_.__value_.__l.__data_);
        v17 += 3;
        if (v17 == v18)
        {
          __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
          __p.__pn_.__r_.__value_.__l.__size_ = v36[0];
          *(std::string::size_type *)((char *)&__p.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v36 + 7);
          *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = v20;
          if (a6)
            goto LABEL_41;
LABEL_50:
          if (*(char *)(a2 + 23) < 0)
          {
            sub_20AEC60F4((_BYTE *)a1, *(void **)a2, *(_QWORD *)(a2 + 8));
          }
          else
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          }
          sub_20B1F6634(a1, &__p);
          goto LABEL_63;
        }
      }
    }
  }
  memset(&__p, 0, sizeof(__p));
  if (!a6)
    goto LABEL_50;
LABEL_41:
  memset(&v34, 0, sizeof(v34));
  v26 = *(unsigned __int8 *)(a5 + 23);
  if ((v26 & 0x80u) == 0)
    v27 = (char *)a5;
  else
    v27 = *(char **)a5;
  if ((v26 & 0x80u) != 0)
    v26 = *(_QWORD *)(a5 + 8);
  sub_20AF08074((unint64_t)&v34, v27, &v27[v26]);
  if (*(char *)(a2 + 23) < 0)
    sub_20AEC60F4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::__fs::filesystem::path *)a2;
  sub_20B1F6634((uint64_t)&__dst, &v34);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4((_BYTE *)a1, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
  else
    *(std::__fs::filesystem::path *)a1 = __dst;
  sub_20B1F6634(a1, &__p);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_63;
  }
  else if ((SHIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_63;
  }
  operator delete(v34.__pn_.__r_.__value_.__l.__data_);
LABEL_63:
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  v28 = (void **)v32;
  if (v32)
  {
    v29 = v33;
    v30 = v32;
    if (v33 != v32)
    {
      do
      {
        if (*((char *)v29 - 1) < 0)
          operator delete(*(v29 - 3));
        v29 -= 3;
      }
      while (v29 != v28);
      v30 = v32;
    }
    v33 = v28;
    operator delete(v30);
  }
}

void sub_20B200F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0)
    operator delete(__p);
  sub_20AEC2E90(&a16);
  _Unwind_Resume(a1);
}

void sub_20B201054(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int i;
  std::string *v17;
  __int128 v18;
  std::string v19;
  void *v20[2];
  std::string::size_type v21;
  int v22;
  std::string __p;
  std::__fs::filesystem::path v24;

  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_20B201318(&v24.__pn_, *a3, a4, a5, (uint64_t *)&__p, a6, a7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    sub_20AEC60F4((_BYTE *)a1, *(void **)a2, *(_QWORD *)(a2 + 8));
    goto LABEL_6;
  }
  if (*(char *)(a2 + 23) < 0)
    goto LABEL_5;
LABEL_3:
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
LABEL_6:
  sub_20B1F6634(a1, &v24);
  for (i = 1; ; i = v22 + 1)
  {
    v22 = i;
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a8 + 176))(a8, a1) & 1) == 0)
      break;
    sub_20B201468(&v22);
    v17 = std::string::insert(&v19, 0, "_", 1uLL);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v21 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)v20 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    sub_20B201318(&__p, *a3, a4, a5, (uint64_t *)v20, a6, a7);
    if (SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v24.__pn_.__r_.__value_.__l.__data_);
      v24.__pn_ = __p;
      if ((SHIBYTE(v21) & 0x80000000) == 0)
      {
LABEL_11:
        if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_12;
        goto LABEL_16;
      }
    }
    else
    {
      v24.__pn_ = __p;
      if ((SHIBYTE(v21) & 0x80000000) == 0)
        goto LABEL_11;
    }
    operator delete(v20[0]);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_17;
    }
LABEL_16:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_13:
      __p = *(std::string *)a2;
      goto LABEL_18;
    }
LABEL_17:
    sub_20AEC60F4(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_18:
    sub_20B1F6634((uint64_t)&__p, &v24);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(std::string *)a1 = __p;
  }
  if (SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__pn_.__r_.__value_.__l.__data_);
}

void sub_20B20127C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B201318(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  std::string::size_type size;
  std::string *p_p;
  uint64_t v15;
  uint64_t *v16;
  std::string __p;
  std::string v18;
  _QWORD v19[10];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  sub_20B52BA04("%020llu", &__p, a2);
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = "_";
  v19[3] = 1;
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  v19[4] = p_p;
  v19[5] = size;
  v15 = *((unsigned __int8 *)a5 + 23);
  if ((v15 & 0x80u) == 0)
    v16 = a5;
  else
    v16 = (uint64_t *)*a5;
  if ((v15 & 0x80u) != 0)
    v15 = a5[1];
  v19[6] = v16;
  v19[7] = v15;
  v19[8] = a6;
  v19[9] = a7;
  sub_20AECFDF8((uint64_t)v19, (uint64_t)&v20, 0, 0, &v18);
  *a1 = v18;
  memset(&v18, 0, sizeof(v18));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20B201440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B201468(int *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_20AED65E8)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_20AECFAB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C4117C8[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C4117B0[v3])(v5, v2);
  return result;
}

void sub_20B201554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B20156C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_20AECFA60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20B201590(std::string *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  size_t v12;
  void **v13;
  std::string *p_dst;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type size;
  void *v23;
  int v24;
  void *v25;
  std::string::size_type v26;
  char v27;
  void *v28;
  void **v29;
  void **v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  std::string::size_type v35;
  std::string::value_type v36;
  int v37;
  std::string *v38;
  std::string::size_type v39;
  std::string::value_type v40;
  std::string v41;
  void *__p[2];
  unsigned __int8 v43;
  _DWORD v44[2];
  std::string __dst;
  void *v46[2];
  uint64_t v47;
  unsigned int v48;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4) + 40))
      goto LABEL_15;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
    {
      goto LABEL_92;
    }
    if (!*(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8)) + 40))
      goto LABEL_15;
  }
  v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
    {
      goto LABEL_92;
    }
    v5 = *(_QWORD *)(a2 + 8);
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v7 = *(unsigned __int8 *)(v6 + 39);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(v6 + 24);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if ((*(char *)(v9 + 39) & 0x80000000) == 0)
      {
LABEL_14:
        *(_OWORD *)v46 = *(_OWORD *)(v9 + 16);
        v47 = *(_QWORD *)(v9 + 32);
LABEL_59:
        v26 = HIBYTE(v47);
        v27 = HIBYTE(v47);
        v29 = (void **)v46[0];
        v28 = v46[1];
        if (v47 >= 0)
          v30 = v46;
        else
          v30 = (void **)v46[0];
        if (v47 >= 0)
          v31 = (char *)HIBYTE(v47);
        else
          v31 = (char *)v46[1];
        if (v31)
        {
          do
          {
            v32 = (char *)memchr(" .\\/:*?|<>\"", *(char *)v30, 0xBuLL);
            v33 = "";
            if (v32)
              v33 = v32;
            if (v33 - " .\\/:*?|<>\"" != 11)
              *(_BYTE *)v30 = 95;
            v30 = (void **)((char *)v30 + 1);
            --v31;
          }
          while (v31);
          v26 = HIBYTE(v47);
          v29 = (void **)v46[0];
          v28 = v46[1];
          v27 = HIBYTE(v47);
        }
        v34 = v27;
        if (v27 >= 0)
          v35 = v26;
        else
          v35 = (std::string::size_type)v28;
        a1->__r_.__value_.__r.__words[0] = 0;
        a1->__r_.__value_.__l.__size_ = 0;
        a1->__r_.__value_.__r.__words[2] = 0;
        std::string::reserve(a1, v35);
        if (v34 >= 0)
          v29 = v46;
        for (; v35; --v35)
        {
          v36 = __tolower(*(unsigned __int8 *)v29);
          std::string::push_back(a1, v36);
          v29 = (void **)((char *)v29 + 1);
        }
        goto LABEL_89;
      }
    }
    else
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_92;
      }
      v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
      if ((*(char *)(v9 + 39) & 0x80000000) == 0)
        goto LABEL_14;
    }
    sub_20AEC60F4(v46, *(void **)(v9 + 16), *(_QWORD *)(v9 + 24));
    goto LABEL_59;
  }
LABEL_15:
  v10 = *(_QWORD *)(a2 + 8);
  if (!v10)
  {
    if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
    {
      v10 = *(_QWORD *)(a2 + 8);
      goto LABEL_18;
    }
LABEL_92:
    abort();
  }
LABEL_18:
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v10 + 48))(v46);
  v11 = SHIBYTE(v47);
  if (v47 >= 0)
    v12 = HIBYTE(v47);
  else
    v12 = (size_t)v46[1];
  if (v12 != 8)
  {
    v15 = v12 + 1;
    if (v12 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v15 >= 0x17)
    {
      v16 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v16 = v15 | 7;
      v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v12 + 1;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v12 + 1;
      if (!v12)
        goto LABEL_37;
    }
LABEL_33:
    if (v11 >= 0)
      v18 = v46;
    else
      v18 = (void **)v46[0];
    memmove(p_dst, v18, v12);
LABEL_37:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v12) = 95;
    sub_20AF9E310(&v48);
    if ((v43 & 0x80u) == 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    if ((v43 & 0x80u) == 0)
      v20 = v43;
    else
      v20 = (std::string::size_type)__p[1];
    v21 = std::string::append(&__dst, (const std::string::value_type *)v19, v20);
    v23 = (void *)v21->__r_.__value_.__r.__words[0];
    size = v21->__r_.__value_.__l.__size_;
    v44[0] = v21->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v44 + 3) = *(_DWORD *)((char *)&v21->__r_.__value_.__r.__words[2] + 3);
    v24 = SHIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if ((char)v43 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_45:
        if ((v24 & 0x80000000) == 0)
        {
LABEL_46:
          v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
          v41.__r_.__value_.__l.__size_ = size;
          LODWORD(v41.__r_.__value_.__r.__words[2]) = v44[0];
          *(_DWORD *)((char *)&v41.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v44 + 3);
          *((_BYTE *)&v41.__r_.__value_.__s + 23) = v24;
LABEL_50:
          sub_20B52B814(&v41, ".", 1, "_", 1uLL, 0, 0, (uint64_t)a1);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v41.__r_.__value_.__l.__data_);
            if ((v24 & 0x80000000) == 0)
              goto LABEL_89;
          }
          else if ((v24 & 0x80000000) == 0)
          {
            goto LABEL_89;
          }
          v25 = v23;
          goto LABEL_55;
        }
LABEL_49:
        sub_20AEC60F4(&v41, v23, size);
        goto LABEL_50;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v24 & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_49;
  }
  v13 = (void **)v46[0];
  if (v47 >= 0)
    v13 = v46;
  if (*(void **)"cv3d.viz" != *v13)
  {
    __dst.__r_.__value_.__r.__words[2] = 0x900000000000000;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    p_dst = &__dst;
    goto LABEL_33;
  }
  sub_20B235DB8((uint64_t)__p, v48);
  v37 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v38 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v39 = __dst.__r_.__value_.__l.__size_;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  std::string::reserve(a1, v39);
  if (v37 >= 0)
    v38 = &__dst;
  for (; v39; --v39)
  {
    v40 = __tolower(v38->__r_.__value_.__s.__data_[0]);
    std::string::push_back(a1, v40);
    v38 = (std::string *)((char *)v38 + 1);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    v25 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_55:
    operator delete(v25);
  }
LABEL_89:
  if (SHIBYTE(v47) < 0)
    operator delete(v46[0]);
}

void sub_20B201AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 + 23) < 0)
    operator delete(*(void **)v33);
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void sub_20B201B80(uint64_t a1, uint64_t a2, std::mutex *a3, const std::__fs::filesystem::path *a4, _QWORD *a5, const std::__fs::filesystem::path *a6, int a7)
{
  uint64_t v7;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  size_t v35;
  void **v36;
  unint64_t v37;
  unint64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  char v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  int v56;
  std::__fs::filesystem::path v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  std::__fs::filesystem::path v67;
  __int128 v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  int v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  std::__fs::filesystem::path v80;
  __int128 v81;
  uint64_t v82;
  std::__fs::filesystem::path v83;
  __int128 v84;
  uint64_t v85;
  int v86;
  _BYTE v87[24];
  int v88;
  void *__dst[2];
  unint64_t v90;
  _QWORD v91[5];
  _QWORD *v92;

  v14 = a5[3];
  if (!v14)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v14 = a5[3];
  }
  v56 = a7;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v14 + 48))(&v84);
  v15 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD *))(a5[2] + 16))(a5 + 2) + 96);
  v16 = (*(uint64_t (**)(_QWORD *))(a5[2] + 16))(a5 + 2);
  v17 = (uint64_t *)(v16 + 80);
  if (!v15)
    v17 = (uint64_t *)v16;
  v18 = *v17;
  std::__fs::filesystem::path::lexically_relative(&v83, a6, a4);
  std::mutex::lock(a3);
  v58 = v18;
  if (SHIBYTE(v85) < 0)
  {
    sub_20AEC60F4(&v59, (void *)v84, *((unint64_t *)&v84 + 1));
  }
  else
  {
    v59 = v84;
    v60 = v85;
  }
  v61 = v86;
  v19 = (__int128 *)*a5;
  if (*(char *)(*a5 + 23) < 0)
  {
    sub_20AEC60F4(&v62, *(void **)v19, *((_QWORD *)v19 + 1));
  }
  else
  {
    v20 = *v19;
    v63 = *((_QWORD *)v19 + 2);
    v62 = v20;
  }
  LOBYTE(v64) = 0;
  LOBYTE(v66) = 0;
  if (*((_BYTE *)v19 + 48))
  {
    if (*((char *)v19 + 47) < 0)
    {
      sub_20AEC60F4(&v64, *((void **)v19 + 3), *((_QWORD *)v19 + 4));
    }
    else
    {
      v21 = *(__int128 *)((char *)v19 + 24);
      v65 = *((_QWORD *)v19 + 5);
      v64 = v21;
    }
    LOBYTE(v66) = 1;
  }
  if (SHIBYTE(v83.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&v57, v83.__pn_.__r_.__value_.__l.__data_, v83.__pn_.__r_.__value_.__l.__size_);
  else
    v57 = v83;
  v67 = v57;
  memset(&v57, 0, sizeof(v57));
  *(_QWORD *)&v68 = a6[1].__pn_.__r_.__value_.__l.__data_;
  v22 = a5[3];
  if (!v22)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v22 = a5[3];
  }
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  v24 = v23;
  v25 = *(unsigned __int8 *)(v23 + 40);
  if (*(_BYTE *)(v23 + 40))
  {
    v26 = *(char *)(v23 + 39);
    if (v26 >= 0)
      v27 = v23 + 16;
    else
      v27 = *(_QWORD *)(v23 + 16);
    if (v26 >= 0)
      v7 = *(unsigned __int8 *)(v23 + 39);
    else
      v7 = *(_QWORD *)(v23 + 24);
  }
  else
  {
    v27 = 0;
  }
  v28 = *(unsigned __int8 *)(v23 + 160);
  v88 = 0;
  v29 = operator new();
  *(_QWORD *)(v29 + 272) = 0;
  *(_OWORD *)(v29 + 240) = 0u;
  *(_OWORD *)(v29 + 256) = 0u;
  *(_OWORD *)(v29 + 208) = 0u;
  *(_OWORD *)(v29 + 224) = 0u;
  *(_OWORD *)(v29 + 176) = 0u;
  *(_OWORD *)(v29 + 192) = 0u;
  *(_OWORD *)(v29 + 144) = 0u;
  *(_OWORD *)(v29 + 160) = 0u;
  *(_OWORD *)(v29 + 112) = 0u;
  *(_OWORD *)(v29 + 128) = 0u;
  *(_OWORD *)(v29 + 80) = 0u;
  *(_OWORD *)(v29 + 96) = 0u;
  *(_OWORD *)(v29 + 48) = 0u;
  *(_OWORD *)(v29 + 64) = 0u;
  *(_OWORD *)(v29 + 16) = 0u;
  *(_OWORD *)(v29 + 32) = 0u;
  *(_OWORD *)v29 = 0u;
  sub_20AEC0BD8(v29);
  v91[0] = v29;
  if (v25)
    sub_20AEC01D0((_QWORD *)(v29 + 16), v27, v7);
  if (v28)
  {
    v30 = sub_20AEC01D0((_QWORD *)(v29 + 16), (uint64_t)"#", 1);
    v31 = *(char *)(v24 + 135);
    if (v31 >= 0)
      v32 = v24 + 112;
    else
      v32 = *(_QWORD *)(v24 + 112);
    if (v31 >= 0)
      v33 = *(unsigned __int8 *)(v24 + 135);
    else
      v33 = *(_QWORD *)(v24 + 120);
    sub_20AEC01D0(v30, v32, v33);
  }
  v34 = *(_DWORD *)(v29 + 120);
  if ((v34 & 0x10) != 0)
  {
    v37 = *(_QWORD *)(v29 + 112);
    v38 = *(_QWORD *)(v29 + 72);
    if (v37 < v38)
    {
      *(_QWORD *)(v29 + 112) = v38;
      v37 = v38;
    }
    v39 = *(const void **)(v29 + 64);
    v35 = v37 - (_QWORD)v39;
    if (v37 - (unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_133;
  }
  else
  {
    if ((v34 & 8) == 0)
    {
      v35 = 0;
      HIBYTE(v90) = 0;
      v36 = __dst;
      goto LABEL_54;
    }
    v39 = *(const void **)(v29 + 40);
    v35 = *(_QWORD *)(v29 + 56) - (_QWORD)v39;
    if (v35 >= 0x7FFFFFFFFFFFFFF8)
LABEL_133:
      sub_20AEC0138();
  }
  if (v35 >= 0x17)
  {
    v40 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v40 = v35 | 7;
    v41 = v40 + 1;
    v36 = (void **)operator new(v40 + 1);
    __dst[1] = (void *)v35;
    v90 = v41 | 0x8000000000000000;
    __dst[0] = v36;
    goto LABEL_53;
  }
  HIBYTE(v90) = v35;
  v36 = __dst;
  if (v35)
LABEL_53:
    memmove(v36, v39, v35);
LABEL_54:
  *((_BYTE *)v36 + v35) = 0;
  v42 = v91[0];
  if (v91[0])
  {
    v43 = MEMORY[0x24BEDB7F0];
    v44 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v91[0] = *MEMORY[0x24BEDB7F0];
    v45 = *(_QWORD *)(v43 + 72);
    *(_QWORD *)(v42 + *(_QWORD *)(v44 - 24)) = *(_QWORD *)(v43 + 64);
    *(_QWORD *)(v42 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v42 + 16) = v45;
    if (*(char *)(v42 + 111) < 0)
      operator delete(*(void **)(v42 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v42 + 128);
    MEMORY[0x20BD3583C](v42, 0x10B2C40EED050F3);
  }
  v91[0] = v87;
  v91[1] = __dst;
  v91[2] = v87;
  v91[3] = __dst;
  v91[4] = __dst;
  if (v88 == -1)
    sub_20AECFAB8();
  v92 = v91;
  ((void (*)(_QWORD **, _BYTE *))off_24C411798[v88])(&v92, v87);
  if (SHIBYTE(v90) < 0)
    operator delete(__dst[0]);
  if (v88 == -1)
    sub_20AECFAB8();
  v91[0] = __dst;
  ((void (*)(_QWORD *__return_ptr, _QWORD *, _BYTE *))off_24C4117C8[v88])((_QWORD *)&v68 + 1, v91, v87);
  if (v88 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C4117B0[v88])(v91, v87);
  sub_20B1FC108((uint64_t)&v71, (uint64_t)&v58);
  if (v70 < 0)
  {
    operator delete(*((void **)&v68 + 1));
    if ((SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_66:
      if (!(_BYTE)v66)
        goto LABEL_72;
      goto LABEL_70;
    }
  }
  else if ((SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(v67.__pn_.__r_.__value_.__l.__data_);
  if (!(_BYTE)v66)
    goto LABEL_72;
LABEL_70:
  if (SHIBYTE(v65) < 0)
    operator delete((void *)v64);
LABEL_72:
  if (SHIBYTE(v63) < 0)
  {
    operator delete((void *)v62);
    if ((SHIBYTE(v60) & 0x80000000) == 0)
    {
LABEL_74:
      if ((SHIBYTE(v57.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_75;
LABEL_79:
      operator delete(v57.__pn_.__r_.__value_.__l.__data_);
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_81;
      goto LABEL_80;
    }
  }
  else if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    goto LABEL_74;
  }
  operator delete((void *)v59);
  if (SHIBYTE(v57.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_79;
LABEL_75:
  if (*(_QWORD *)(a1 + 40))
  {
LABEL_80:
    v46 = *(_QWORD **)(a1 + 24);
    LOBYTE(v58) = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v46, (uint64_t)&v58, 1);
  }
LABEL_81:
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v58 = v71;
  if (SHIBYTE(v73) < 0)
  {
    sub_20AEC60F4(&v59, (void *)v72, *((unint64_t *)&v72 + 1));
  }
  else
  {
    v59 = v72;
    v60 = v73;
  }
  v61 = v74;
  if (SHIBYTE(v76) < 0)
  {
    sub_20AEC60F4(&v62, (void *)v75, *((unint64_t *)&v75 + 1));
  }
  else
  {
    v62 = v75;
    v63 = v76;
  }
  if (SHIBYTE(v78) < 0)
  {
    sub_20AEC60F4(&v64, (void *)v77, *((unint64_t *)&v77 + 1));
  }
  else
  {
    v64 = v77;
    v65 = v78;
  }
  v66 = v79;
  if (SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&v67, v80.__pn_.__r_.__value_.__l.__data_, v80.__pn_.__r_.__value_.__l.__size_);
  else
    v67 = v80;
  if (SHIBYTE(v82) < 0)
  {
    sub_20AEC60F4(&v68, (void *)v81, *((unint64_t *)&v81 + 1));
  }
  else
  {
    v68 = v81;
    v69 = v82;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v47 = *(_QWORD **)(a1 + 24);
    LOBYTE(v91[0]) = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v47, (uint64_t)v91, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20B512F6C(a1, (uint64_t)&v59);
  if (*(_QWORD *)(a1 + 40))
  {
    v48 = *(_QWORD **)(a1 + 24);
    LOBYTE(v91[0]) = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v48, (uint64_t)v91, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20B512F6C(a1, (uint64_t)&v62);
  sub_20B512F6C(a1, (uint64_t)&v64);
  if (*(_QWORD *)(a1 + 40))
  {
    v49 = *(_QWORD **)(a1 + 24);
    LOBYTE(v91[0]) = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v49, (uint64_t)v91, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20B512F6C(a1, (uint64_t)&v67);
  sub_20B512F6C(a1, (uint64_t)&v68);
  if (SHIBYTE(v69) < 0)
  {
    operator delete((void *)v68);
    if ((SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_104:
      if ((SHIBYTE(v65) & 0x80000000) == 0)
        goto LABEL_105;
      goto LABEL_111;
    }
  }
  else if ((SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_104;
  }
  operator delete(v67.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v65) & 0x80000000) == 0)
  {
LABEL_105:
    if ((SHIBYTE(v63) & 0x80000000) == 0)
      goto LABEL_106;
    goto LABEL_112;
  }
LABEL_111:
  operator delete((void *)v64);
  if ((SHIBYTE(v63) & 0x80000000) == 0)
  {
LABEL_106:
    if ((SHIBYTE(v60) & 0x80000000) == 0)
      goto LABEL_107;
LABEL_113:
    operator delete((void *)v59);
    v50 = *(_BYTE *)(a1 + 34);
    if (!*(_QWORD *)(a1 + 40))
      goto LABEL_115;
    goto LABEL_114;
  }
LABEL_112:
  operator delete((void *)v62);
  if (SHIBYTE(v60) < 0)
    goto LABEL_113;
LABEL_107:
  v50 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
LABEL_114:
    v51 = *(_QWORD **)(a1 + 24);
    LOBYTE(v58) = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v51, (uint64_t)&v58, 1);
  }
LABEL_115:
  v52 = *(_QWORD **)(a1 + 24);
  LOBYTE(v58) = v50;
  sub_20AEC01D0(v52, (uint64_t)&v58, 1);
  v53 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v53;
  v54 = *(_QWORD **)(a1 + 24);
  LOBYTE(v58) = *(_BYTE *)(a1 + 33);
  sub_20AEC01D0(v54, (uint64_t)&v58, 1);
  if (v56)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
    std::ostream::flush();
  }
  if (SHIBYTE(v82) < 0)
  {
    operator delete((void *)v81);
    if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_119:
      if ((SHIBYTE(v78) & 0x80000000) == 0)
        goto LABEL_120;
      goto LABEL_127;
    }
  }
  else if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_119;
  }
  operator delete(v80.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v78) & 0x80000000) == 0)
  {
LABEL_120:
    if ((SHIBYTE(v76) & 0x80000000) == 0)
      goto LABEL_121;
    goto LABEL_128;
  }
LABEL_127:
  operator delete((void *)v77);
  if ((SHIBYTE(v76) & 0x80000000) == 0)
  {
LABEL_121:
    if ((SHIBYTE(v73) & 0x80000000) == 0)
      goto LABEL_122;
    goto LABEL_129;
  }
LABEL_128:
  operator delete((void *)v75);
  if ((SHIBYTE(v73) & 0x80000000) == 0)
  {
LABEL_122:
    std::mutex::unlock(a3);
    if ((SHIBYTE(v83.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_123;
    goto LABEL_130;
  }
LABEL_129:
  operator delete((void *)v72);
  std::mutex::unlock(a3);
  if ((SHIBYTE(v83.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_123:
    if ((SHIBYTE(v85) & 0x80000000) == 0)
      return;
LABEL_131:
    operator delete((void *)v84);
    return;
  }
LABEL_130:
  operator delete(v83.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v85) < 0)
    goto LABEL_131;
}

void sub_20B202548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  std::mutex *v49;
  uint64_t v50;

  if (a38 && a37 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (a24 < 0)
    operator delete(a19);
  std::mutex::unlock(v49);
  if (*(char *)(v50 - 225) < 0)
  {
    operator delete(*(void **)(v50 - 248));
    if ((*(char *)(v50 - 201) & 0x80000000) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v50 - 201) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(*(void **)(v50 - 224));
  _Unwind_Resume(a1);
}

void sub_20B202768(uint64_t a1, uint64_t a2, void ***a3, int a4, unint64_t a5, uint64_t a6, char a7)
{
  int v10;
  int v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  int v20;
  size_t v21;
  void *v22;
  unsigned __int8 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t *v29;
  std::string::size_type *v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  int8x8_t v36;
  uint8x8_t v37;
  unint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  std::string::size_type p_dst;
  uint64_t v42;
  std::__fs::filesystem::path::__string_view v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  std::__fs::filesystem::path::__string_view v53;
  std::string *v54;
  uint64_t v55;
  unint64_t v56;
  std::string::size_type v57;
  std::string::size_type v58;
  std::string::size_type v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint8x8_t v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t v69;
  std::__fs::filesystem::path::__string_view v70;
  unint64_t v71;
  std::__fs::filesystem::path::__string_view v72;
  _QWORD *v73;
  _BYTE *v74;
  float v75;
  float v76;
  _QWORD *v77;
  _QWORD *v78;
  _BOOL8 v79;
  unint64_t v80;
  unint64_t v81;
  size_t prime;
  unint64_t v83;
  uint8x8_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  uint64_t v93;
  std::string::pointer data;
  int v95;
  int v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  char *v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  size_t *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  void *v121;
  std::string::value_type v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  void *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::runtime_error *exception;
  __int128 v148;
  int v149;
  std::__fs::filesystem::path v150;
  uint64_t v151;
  std::__fs::filesystem::path __dst;
  void *v153[2];
  int64_t v154;
  void *v155[2];
  char v156;
  uint64_t (**v157)();
  __int128 v158;
  unsigned __int8 v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  uint64_t (**v162)();
  __int128 v163;
  char v164;
  __int128 v165;
  char v166;
  std::string pn;
  char v168[8];
  void *v169;
  char v170;
  uint64_t v171;
  int v172;
  void *v173;
  char *v174;
  std::__fs::filesystem::path __p;
  _QWORD *v176;
  std::string::value_type v177;
  std::string::value_type v178;
  std::string::value_type v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  char v183;
  uint64_t v184[19];
  _BYTE v185[32];
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  _QWORD v192[22];

  v192[19] = *MEMORY[0x24BDAC8D0];
  v10 = a4;
  switch(a4)
  {
    case 1:
      v156 = 4;
      v14 = 1952539694;
      goto LABEL_6;
    case 2:
      v156 = 4;
      v14 = 1987273518;
      goto LABEL_6;
    case 3:
      v156 = 5;
      strcpy((char *)v155, ".json");
      goto LABEL_7;
    case 4:
      v156 = 4;
      v14 = 1954051118;
LABEL_6:
      LODWORD(v155[0]) = v14;
      BYTE4(v155[0]) = 0;
LABEL_7:
      sub_20B201590((std::string *)v185, (uint64_t)(a3 + 2));
      if (v156 >= 0)
        v15 = v155;
      else
        v15 = (void **)v155[0];
      if (v156 >= 0)
        v16 = v156;
      else
        v16 = (std::string::size_type)v155[1];
      v17 = std::string::append((std::string *)v185, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v154 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)v153 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if ((v185[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v185);
        v19 = *a3;
        v20 = *((char *)*a3 + 23);
        if ((v20 & 0x80000000) == 0)
          goto LABEL_15;
      }
      else
      {
        v19 = *a3;
        v20 = *((char *)*a3 + 23);
        if ((v20 & 0x80000000) == 0)
        {
LABEL_15:
          v21 = v20;
          v22 = v19;
          goto LABEL_18;
        }
      }
      v22 = *v19;
      v21 = (size_t)v19[1];
LABEL_18:
      v23 = (_BYTE)v19 + 24;
      v24 = *((unsigned __int8 *)v19 + 48);
      v25 = (unint64_t)(v19 + 3) & 0xFFFFFFFFFFFFFF00;
      v26 = v23 & 0xF8;
      if (!v24)
        v26 = 0;
      sub_20B200B4C((uint64_t)v185, a2, v22, v21, v26 | v25, v24);
      memset(&__p, 0, sizeof(__p));
      v27 = (char *)HIBYTE(v154);
      if (v154 >= 0)
        v28 = (char *)v153;
      else
        v28 = (char *)v153[0];
      if (v154 < 0)
        v27 = (char *)v153[1];
      sub_20AF08074((unint64_t)&__p, v28, &v27[(_QWORD)v28]);
      if ((v185[23] & 0x80000000) != 0)
        sub_20AEC60F4(&__dst, *(void **)v185, *(unint64_t *)&v185[8]);
      else
        __dst = *(std::__fs::filesystem::path *)v185;
      sub_20B1F6634((uint64_t)&__dst, &__p);
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__pn_.__r_.__value_.__l.__data_);
        if ((v185[23] & 0x80000000) == 0)
          goto LABEL_30;
      }
      else if ((v185[23] & 0x80000000) == 0)
      {
        goto LABEL_30;
      }
      operator delete(*(void **)v185);
LABEL_30:
      v29 = sub_20B0C19F8(0);
      sub_20B0C1478((uint64_t)v168, (uint64_t)(a3 + 2), (uint64_t)v29);
      LOBYTE(v162) = 0;
      v164 = 0;
      v160 = 0;
      v161 = 0;
      LOBYTE(v157) = 0;
      v159 = 0;
      if (!a7)
      {
        sub_20B422114(&__dst, 0x11u, a5, v185);
        v162 = &off_24C41B880;
        v163 = *(_OWORD *)&v185[8];
        v164 = 1;
        v30 = (std::string::size_type *)(*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)&v185[8] + 16))(*(_QWORD *)&v185[8], *(__n128 *)&v185[8]);
        v31 = (char *)v30 + *(_QWORD *)(*v30 - 24);
        if ((v31[32] & 5) != 0)
        {
          v32 = -1;
        }
        else
        {
          (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v31 + 5) + 32))(v185, *((_QWORD *)v31 + 5), 0, 1, 16);
          v32 = v192[0];
        }
        v51 = v32 & ~(v32 >> 63);
        goto LABEL_241;
      }
      if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
        sub_20AEC60F4(v185, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
      else
        *(std::__fs::filesystem::path *)v185 = __dst;
      if (v185[23] >= 0)
        v33 = (uint64_t *)v185;
      else
        v33 = *(uint64_t **)v185;
      if (v185[23] >= 0)
        v34 = v185[23];
      else
        v34 = *(_QWORD *)&v185[8];
      v35 = sub_20AEC7B80((uint64_t)&__p, v33, v34);
      if ((v185[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v185);
        v36 = *(int8x8_t *)(a6 + 8);
        if (!*(_QWORD *)&v36)
          goto LABEL_89;
      }
      else
      {
        v36 = *(int8x8_t *)(a6 + 8);
        if (!*(_QWORD *)&v36)
          goto LABEL_89;
      }
      v37 = (uint8x8_t)vcnt_s8(v36);
      v37.i16[0] = vaddlv_u8(v37);
      if (v37.u32[0] > 1uLL)
      {
        v38 = v35;
        if (v35 >= *(_QWORD *)&v36)
          v38 = v35 % *(_QWORD *)&v36;
      }
      else
      {
        v38 = (*(_QWORD *)&v36 - 1) & v35;
      }
      v39 = *(uint64_t ***)(*(_QWORD *)a6 + 8 * v38);
      if (!v39 || (v40 = *v39) == 0)
      {
LABEL_89:
        v166 = 0;
        LOBYTE(v165) = 0;
        sub_20B206D10((uint64_t)&__p, &v165, 24);
        v54 = (std::string *)operator new(0x168uLL);
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C411748;
        if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
          sub_20AEC60F4(&pn, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
        else
          pn = __dst.__pn_;
        sub_20B206FF0((uint64_t)v185, (uint64_t)&__p);
        v149 = v10;
        if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
          sub_20AEC60F4(&v54[1], pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
        else
          v54[1] = pn;
        v55 = a1;
        sub_20B206FF0((uint64_t)&v54[2], (uint64_t)v185);
        v54[13].__r_.__value_.__r.__words[2] = a5;
        v54[14].__r_.__value_.__r.__words[0] = 0;
        v54[14].__r_.__value_.__s.__data_[8] = 0;
        v54[14].__r_.__value_.__s.__data_[16] = 0;
        v56 = MEMORY[0x24BEDB7F0];
        v57 = *MEMORY[0x24BEDB7F0];
        *(_QWORD *)v185 = v57;
        v58 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
        v59 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        *(_QWORD *)&v185[*(_QWORD *)(v57 - 24)] = v58;
        p_dst = MEMORY[0x24BEDB848];
        *(_QWORD *)&v185[16] = v59;
        *(_QWORD *)&v185[24] = MEMORY[0x24BEDB848] + 16;
        if (SHIBYTE(v190) < 0)
          operator delete(*((void **)&v189 + 1));
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x20BD35758](v192);
        if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
          operator delete(pn.__r_.__value_.__l.__data_);
        v60 = v161;
        v160 = v54 + 1;
        v161 = (std::__shared_weak_count *)v54;
        if (v60)
        {
          p_shared_owners = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldaxr(p_shared_owners);
          while (__stlxr(v62 - 1, p_shared_owners));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        __p.__pn_.__r_.__value_.__r.__words[0] = v57;
        *(std::string::size_type *)((char *)__p.__pn_.__r_.__value_.__r.__words + *(_QWORD *)(v57 - 24)) = v58;
        __p.__pn_.__r_.__value_.__r.__words[2] = v59;
        v176 = (_QWORD *)(p_dst + 16);
        if (v183 < 0)
          operator delete(v182);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x20BD35758](v184);
        a1 = v55;
        if (v166 < 0)
        {
          operator delete((void *)v165);
          v10 = v149;
          if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_108;
        }
        else
        {
          v10 = v149;
          if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_108:
            *(std::__fs::filesystem::path *)v185 = __dst;
            goto LABEL_111;
          }
        }
        sub_20AEC60F4(v185, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
LABEL_111:
        if (v185[23] >= 0)
          v63 = (uint64_t *)v185;
        else
          v63 = *(uint64_t **)v185;
        if (v185[23] >= 0)
          v64 = v185[23];
        else
          v64 = *(_QWORD *)&v185[8];
        a5 = sub_20AEC7B80((uint64_t)&__p, v63, v64);
        if ((v185[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v185);
          v65 = *(_QWORD *)(a6 + 8);
          if (!v65)
            goto LABEL_154;
        }
        else
        {
          v65 = *(_QWORD *)(a6 + 8);
          if (!v65)
            goto LABEL_154;
        }
        v66 = (uint8x8_t)vcnt_s8((int8x8_t)v65);
        v66.i16[0] = vaddlv_u8(v66);
        if (v66.u32[0] > 1uLL)
        {
          v56 = a5;
          if (a5 >= v65)
            v56 = a5 % v65;
        }
        else
        {
          v56 = (v65 - 1) & a5;
        }
        v67 = *(uint64_t ***)(*(_QWORD *)a6 + 8 * v56);
        if (v67)
        {
          v68 = *v67;
          if (*v67)
          {
            if (v66.u32[0] < 2uLL)
            {
              p_dst = v65 - 1;
              while (1)
              {
                v69 = v68[1];
                if (v69 == a5)
                {
                  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v70.__data_ = (const std::string_view::value_type *)&__dst;
                  else
                    v70.__data_ = (const std::string_view::value_type *)__dst.__pn_.__r_.__value_.__r.__words[0];
                  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v70.__size_ = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
                  else
                    v70.__size_ = __dst.__pn_.__r_.__value_.__l.__size_;
                  if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v68 + 2), v70))
                    goto LABEL_197;
                }
                else if ((v69 & p_dst) != v56)
                {
                  goto LABEL_154;
                }
                v68 = (uint64_t *)*v68;
                if (!v68)
                  goto LABEL_154;
              }
            }
            p_dst = (std::string::size_type)&__dst;
            do
            {
              v71 = v68[1];
              if (v71 == a5)
              {
                if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v72.__data_ = (const std::string_view::value_type *)&__dst;
                else
                  v72.__data_ = (const std::string_view::value_type *)__dst.__pn_.__r_.__value_.__r.__words[0];
                if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v72.__size_ = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
                else
                  v72.__size_ = __dst.__pn_.__r_.__value_.__l.__size_;
                if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v68 + 2), v72))
                  goto LABEL_197;
              }
              else
              {
                if (v71 >= v65)
                  v71 %= v65;
                if (v71 != v56)
                  break;
              }
              v68 = (uint64_t *)*v68;
            }
            while (v68);
          }
        }
LABEL_154:
        v73 = operator new(0x38uLL);
        *(_QWORD *)v185 = v73;
        *(_QWORD *)&v185[8] = a6 + 16;
        v185[16] = 0;
        *v73 = 0;
        v73[1] = a5;
        v74 = v73 + 2;
        if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_20AEC60F4(v74, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)v74 = *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_;
          v73[4] = *((_QWORD *)&__dst.__pn_.__r_.__value_.__l + 2);
        }
        v73[5] = 0;
        v73[6] = 0;
        v185[16] = 1;
        v75 = (float)(unint64_t)(*(_QWORD *)(a6 + 24) + 1);
        v76 = *(float *)(a6 + 32);
        if (v65 && (float)(v76 * (float)v65) >= v75)
        {
          v77 = *(_QWORD **)(*(_QWORD *)a6 + 8 * v56);
          v78 = *(_QWORD **)v185;
          if (v77)
          {
LABEL_160:
            *v78 = *v77;
            *v77 = *(_QWORD *)v185;
LABEL_196:
            v68 = *(uint64_t **)v185;
            ++*(_QWORD *)(a6 + 24);
LABEL_197:
            v89 = (uint64_t)v160;
            v88 = v161;
            if (v161)
            {
              v90 = (unint64_t *)&v161->__shared_owners_;
              do
                v91 = __ldxr(v90);
              while (__stxr(v91 + 1, v90));
            }
            v48 = (std::__shared_weak_count *)v68[6];
            v68[5] = v89;
            v68[6] = (uint64_t)v88;
            if (v48)
            {
              v92 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v92);
              while (__stlxr(v50 - 1, v92));
              goto LABEL_203;
            }
            goto LABEL_204;
          }
        }
        else
        {
          v79 = v65 < 3 || (v65 & (v65 - 1)) != 0;
          v80 = v79 | (2 * v65);
          v81 = vcvtps_u32_f32(v75 / v76);
          if (v80 <= v81)
            prime = v81;
          else
            prime = v80;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
          }
          p_dst = *(_QWORD *)(a6 + 8);
          if (prime > p_dst)
            goto LABEL_172;
          if (prime < p_dst)
          {
            v83 = vcvtps_u32_f32((float)*(unint64_t *)(a6 + 24) / *(float *)(a6 + 32));
            if (p_dst < 3
              || (v84 = (uint8x8_t)vcnt_s8((int8x8_t)p_dst), v84.i16[0] = vaddlv_u8(v84), v84.u32[0] > 1uLL))
            {
              v83 = std::__next_prime(v83);
            }
            else
            {
              v85 = 1 << -(char)__clz(v83 - 1);
              if (v83 >= 2)
                v83 = v85;
            }
            if (prime <= v83)
              prime = v83;
            if (prime < p_dst)
LABEL_172:
              sub_20AEC91EC(a6, prime);
          }
          v65 = *(_QWORD *)(a6 + 8);
          v86 = v65 - 1;
          if ((v65 & (v65 - 1)) != 0)
          {
            if (a5 >= v65)
            {
              v56 = a5 % v65;
              v77 = *(_QWORD **)(*(_QWORD *)a6 + 8 * (a5 % v65));
              v78 = *(_QWORD **)v185;
              if (v77)
                goto LABEL_160;
            }
            else
            {
              v56 = a5;
              v77 = *(_QWORD **)(*(_QWORD *)a6 + 8 * a5);
              v78 = *(_QWORD **)v185;
              if (v77)
                goto LABEL_160;
            }
          }
          else
          {
            v56 = v86 & a5;
            v77 = *(_QWORD **)(*(_QWORD *)a6 + 8 * (v86 & a5));
            v78 = *(_QWORD **)v185;
            if (v77)
              goto LABEL_160;
          }
        }
        *v78 = *(_QWORD *)(a6 + 16);
        *(_QWORD *)(a6 + 16) = *(_QWORD *)v185;
        *(_QWORD *)(*(_QWORD *)a6 + 8 * v56) = a6 + 16;
        if (**(_QWORD **)v185)
        {
          v87 = *(_QWORD *)(**(_QWORD **)v185 + 8);
          if ((v65 & (v65 - 1)) != 0)
          {
            if (v87 >= v65)
              v87 %= v65;
          }
          else
          {
            v87 &= v65 - 1;
          }
          *(_QWORD *)(*(_QWORD *)a6 + 8 * v87) = *(_QWORD *)v185;
        }
        goto LABEL_196;
      }
      if (v37.u32[0] < 2uLL)
      {
        p_dst = *(_QWORD *)&v36 - 1;
        while (1)
        {
          v42 = v40[1];
          if (v42 == v35)
          {
            if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v43.__data_ = (const std::string_view::value_type *)&__dst;
            else
              v43.__data_ = (const std::string_view::value_type *)__dst.__pn_.__r_.__value_.__r.__words[0];
            if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v43.__size_ = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
            else
              v43.__size_ = __dst.__pn_.__r_.__value_.__l.__size_;
            if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v40 + 2), v43))
              goto LABEL_66;
          }
          else if ((v42 & p_dst) != v38)
          {
            goto LABEL_89;
          }
          v40 = (uint64_t *)*v40;
          if (!v40)
            goto LABEL_89;
        }
      }
      p_dst = (std::string::size_type)&__dst;
      break;
    default:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/FileIOPrivate.cpp", 130, (uint64_t)"", 0, (uint64_t)"Unsupported format", 18, (void (*)(void **))sub_20B532360);
      abort();
  }
  while (1)
  {
    v52 = v40[1];
    if (v52 == v35)
      break;
    if (v52 >= *(_QWORD *)&v36)
      v52 %= *(_QWORD *)&v36;
    if (v52 != v38)
      goto LABEL_89;
LABEL_77:
    v40 = (uint64_t *)*v40;
    if (!v40)
      goto LABEL_89;
  }
  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v53.__data_ = (const std::string_view::value_type *)__dst.__pn_.__r_.__value_.__r.__words[0];
  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53.__size_ = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
  else
    v53.__size_ = __dst.__pn_.__r_.__value_.__l.__size_;
  if (std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v40 + 2), v53))
    goto LABEL_77;
LABEL_66:
  v45 = v40[5];
  v44 = (std::__shared_weak_count *)v40[6];
  if (v44)
  {
    v46 = (unint64_t *)&v44->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = v161;
  v160 = (std::string *)v45;
  v161 = v44;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
LABEL_203:
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      v93 = (uint64_t)v160;
      data = v160[13].__r_.__value_.__l.__data_;
      v95 = v160[13].__r_.__value_.__s.__data_[16];
      if (!v160[13].__r_.__value_.__s.__data_[16])
        goto LABEL_213;
LABEL_205:
      v51 = (uint64_t)&data[*(_QWORD *)(v93 + 320)];
      v96 = v159;
      if (v159)
        goto LABEL_226;
      goto LABEL_206;
    }
  }
LABEL_204:
  v93 = (uint64_t)v160;
  data = v160[13].__r_.__value_.__l.__data_;
  v95 = v160[13].__r_.__value_.__s.__data_[16];
  if (v160[13].__r_.__value_.__s.__data_[16])
    goto LABEL_205;
LABEL_213:
  sub_20B422114((const std::__fs::filesystem::path *)v93, 0x11u, *(_QWORD *)(v93 + 304), &__p);
  if (!__p.__pn_.__r_.__value_.__l.__size_)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (*(char *)(v93 + 23) < 0)
    {
      sub_20AEC60F4(&pn, *(void **)v93, *(_QWORD *)(v93 + 8));
    }
    else
    {
      v148 = *(_OWORD *)v93;
      pn.__r_.__value_.__r.__words[2] = *(_QWORD *)(v93 + 16);
      *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v148;
    }
    sub_20B1F16DC("Failed to write to file: ", &pn, (std::string *)v185);
    std::runtime_error::runtime_error(exception, (const std::string *)v185);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v100 = (_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__p.__pn_.__r_.__value_.__l.__size_
                                                                     + 16))(__p.__pn_.__r_.__value_.__l.__size_);
  v101 = (char *)v100 + *(_QWORD *)(*v100 - 24);
  if ((v101[32] & 5) != 0)
  {
    v102 = 0;
    *(_QWORD *)(v93 + 320) = 0;
    *(_BYTE *)(v93 + 328) = 1;
    a5 = __p.__pn_.__r_.__value_.__r.__words[2];
    p_dst = __p.__pn_.__r_.__value_.__l.__size_;
    if (!__p.__pn_.__r_.__value_.__r.__words[2])
      goto LABEL_225;
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v101 + 5) + 32))(v185, *((_QWORD *)v101 + 5), 0, 1, 16);
    v102 = v192[0] & ~(v192[0] >> 63);
    *(_QWORD *)(v93 + 320) = v102;
    *(_BYTE *)(v93 + 328) = 1;
    a5 = __p.__pn_.__r_.__value_.__r.__words[2];
    p_dst = __p.__pn_.__r_.__value_.__l.__size_;
    if (!__p.__pn_.__r_.__value_.__r.__words[2])
      goto LABEL_225;
  }
  v103 = (unint64_t *)(a5 + 8);
  do
    v104 = __ldxr(v103);
  while (__stxr(v104 + 1, v103));
  v105 = (std::__shared_weak_count *)__p.__pn_.__r_.__value_.__r.__words[2];
  if (__p.__pn_.__r_.__value_.__r.__words[2])
  {
    v106 = (unint64_t *)(__p.__pn_.__r_.__value_.__r.__words[2] + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
LABEL_225:
  v51 = (uint64_t)&data[v102];
  v96 = v159;
  if (v159 == 1)
  {
LABEL_206:
    if (!v96)
      goto LABEL_233;
    v97 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
    *(_QWORD *)&v158 = p_dst;
    *((_QWORD *)&v158 + 1) = a5;
    if (v97)
    {
      v98 = (unint64_t *)&v97->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    goto LABEL_240;
  }
LABEL_226:
  if (!v96)
  {
    v157 = &off_24C41B880;
    *(_QWORD *)&v158 = p_dst;
    *((_QWORD *)&v158 + 1) = a5;
    v159 = 1;
LABEL_240:
    v30 = &v160[1].__r_.__value_.__r.__words[2];
    goto LABEL_241;
  }
  v108 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
  if (*((_QWORD *)&v158 + 1))
  {
    v109 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v159 = 0;
LABEL_233:
  v30 = &v160[1].__r_.__value_.__r.__words[2];
  if (!v95)
  {
    if (a5)
    {
      v111 = (unint64_t *)(a5 + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)a5 + 16))(a5);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)a5);
      }
    }
  }
LABEL_241:
  v113 = (char *)v30 + *(_QWORD *)(*v30 - 24);
  if ((v113[32] & 5) != 0)
  {
    v190 = 0u;
    v191 = 0u;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    memset(v185, 0, sizeof(v185));
    v192[0] = -1;
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v113 + 5) + 32))(v185, *((_QWORD *)v113 + 5), 0, 1, 16);
  }
  if (v10 == 4 || v10 == 2)
  {
    pn.__r_.__value_.__r.__words[0] = 0x400000001;
    sub_20B515AB4((uint64_t)&__p, (uint64_t *)&pn, (uint64_t)v30, 0, 0, 0);
    __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C411588;
    __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C4116D8;
    if (v180)
    {
      pn.__r_.__value_.__s.__data_[0] = v177;
      sub_20AEC01D0(v176, (uint64_t)&pn, 1);
    }
    std::ostream::operator<<();
    ++v180;
    sub_20B20B948((uint64_t)&__p, (uint64_t)v168);
    v122 = v179;
    if (v180)
    {
      pn.__r_.__value_.__s.__data_[0] = v177;
      sub_20AEC01D0(v176, (uint64_t)&pn, 1);
    }
    pn.__r_.__value_.__s.__data_[0] = v122;
    sub_20AEC01D0(v176, (uint64_t)&pn, 1);
    v123 = v180 + 1;
    v180 = 0;
    v181 = v123;
    pn.__r_.__value_.__s.__data_[0] = v178;
    sub_20AEC01D0(v176, (uint64_t)&pn, 1);
  }
  else
  {
    if (v10 != 1)
    {
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/FileIOPrivate.cpp", 445, (uint64_t)"", 0, (uint64_t)"Unsupported format", 18, (void (*)(void **))sub_20B532360);
      abort();
    }
    __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C41F230;
    __p.__pn_.__r_.__value_.__l.__size_ = 1;
    __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C41F380;
    v114 = operator new();
    *(_QWORD *)v114 = v30;
    *(_QWORD *)(v114 + 8) = v30;
    *(_BYTE *)(v114 + 16) = 0;
    *(_BYTE *)(v114 + 40) = 0;
    *(_BYTE *)(v114 + 48) = 0;
    *(_BYTE *)(v114 + 72) = 0;
    *(_QWORD *)(v114 + 88) = 0;
    *(_QWORD *)(v114 + 96) = 0;
    *(_QWORD *)(v114 + 80) = 0;
    __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C411A68;
    __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C411BB8;
    v176 = (_QWORD *)v114;
    pn.__r_.__value_.__s.__data_[0] = 2;
    std::ostream::write();
    sub_20B51956C((uint64_t)v176);
    sub_20B20B69C((uint64_t)&__p, (uint64_t)v168);
    v115 = v176;
    v116 = *(_QWORD *)(v176[11] - 8);
    v117 = v176 + 6;
    sub_20B5190E0(v176 + 6, v176[2] - v116 - 9);
    if (*v117)
      memmove((void *)(v115[3] + v116), (const void *)v115[7], *v117);
    v115[6] = 0;
    v118 = v115[10];
    v119 = v115[11] - 8;
    v115[11] = v119;
    if (v118 == v119)
    {
      std::ostream::write();
      if (*((_BYTE *)v115 + 40))
      {
        free((void *)v115[3]);
        *((_BYTE *)v115 + 40) = 0;
      }
    }
    __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C41F230;
    v120 = v176;
    __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C41F380;
    v176 = 0;
    if (v120)
    {
      v121 = (void *)v120[10];
      if (v121)
      {
        v120[11] = v121;
        operator delete(v121);
      }
      if (*((_BYTE *)v120 + 72))
        free((void *)v120[7]);
      if (*((_BYTE *)v120 + 40))
        free((void *)v120[3]);
      MEMORY[0x20BD3583C](v120, 0x1030C408C1A3048);
    }
  }
  v124 = (uint64_t)v160;
  if (v160)
  {
    v125 = v160[13].__r_.__value_.__r.__words[0];
    if (v125 <= 0x19000)
    {
      v129 = (char *)v30 + *(_QWORD *)(*v30 - 24);
      if ((v129[32] & 5) != 0)
      {
        v130 = -1;
      }
      else
      {
        (*(void (**)(std::__fs::filesystem::path *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v129 + 5) + 32))(&__p, *((_QWORD *)v129 + 5), 0, 1, 16);
        v130 = v184[0];
        v125 = *(_QWORD *)(v124 + 312);
      }
      *(_QWORD *)(v124 + 312) = v130 + v125 - v192[0];
    }
    else
    {
      __p.__pn_.__r_.__value_.__s.__data_[0] = 0;
      LOBYTE(v176) = 0;
      if (v159)
      {
        __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C41B880;
        *(_OWORD *)&__p.__pn_.__r_.__value_.__r.__words[1] = v158;
        v158 = 0uLL;
        LOBYTE(v176) = 1;
      }
      sub_20B1FBB6C((uint64_t)v160, (uint64_t)&__p);
      if ((_BYTE)v176)
      {
        v126 = (std::__shared_weak_count *)__p.__pn_.__r_.__value_.__r.__words[2];
        if (__p.__pn_.__r_.__value_.__r.__words[2])
        {
          v127 = (unint64_t *)(__p.__pn_.__r_.__value_.__r.__words[2] + 8);
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
      }
    }
  }
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&v150, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
  else
    v150 = __dst;
  v151 = v51;
  if (v159)
  {
    v131 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
    if (*((_QWORD *)&v158 + 1))
    {
      v132 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
  }
  v134 = v161;
  if (v161)
  {
    v135 = (unint64_t *)&v161->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  if (v164)
  {
    v137 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
    if (*((_QWORD *)&v163 + 1))
    {
      v138 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
  }
  *(_OWORD *)a1 = *(_OWORD *)&v150.__pn_.__r_.__value_.__l.__data_;
  v140 = v151;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v150.__pn_.__r_.__value_.__l + 2);
  *(_QWORD *)(a1 + 24) = v140;
  *(_BYTE *)(a1 + 32) = 1;
  v141 = (char *)v173;
  if (v173)
  {
    v142 = v174;
    v143 = v173;
    if (v174 != v173)
    {
      do
      {
        v144 = (std::__shared_weak_count *)*((_QWORD *)v142 - 1);
        if (v144)
        {
          v145 = (unint64_t *)&v144->__shared_owners_;
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        v142 -= 16;
      }
      while (v142 != v141);
      v143 = v173;
    }
    v174 = v141;
    operator delete(v143);
  }
  if (v172 != -1)
    ((void (*)(_BYTE *, uint64_t *))off_24C411788[v172])(v185, &v171);
  v172 = -1;
  if ((v170 & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_314;
LABEL_318:
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v154) < 0)
      goto LABEL_319;
LABEL_315:
    if ((v156 & 0x80000000) == 0)
      return;
LABEL_320:
    operator delete(v155[0]);
    return;
  }
  operator delete(v169);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_318;
LABEL_314:
  if ((SHIBYTE(v154) & 0x80000000) == 0)
    goto LABEL_315;
LABEL_319:
  operator delete(v153[0]);
  if (v156 < 0)
    goto LABEL_320;
}

void sub_20B203AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,char a38,int a39,__int16 a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *v64;

  __cxa_free_exception(v64);
  sub_20B4224E8((uint64_t)&a64);
  if (a38)
    sub_20B4224E8((uint64_t)&a35);
  sub_20AEC147C((uint64_t)&a40);
  if (a45)
    sub_20B4224E8((uint64_t)&a42);
  sub_20B1EBC54((uint64_t)&a53);
  if (a20 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(a1);
}

void sub_20B203D2C(std::string *a1, uint64_t a2, _QWORD *a3, int a4, uint64_t a5)
{
  uint64_t v9;
  size_t v10;
  void *v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  std::string *v21;
  std::string::size_type size;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  std::string::value_type v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void ***(*v32)(void ***);
  uint64_t v33;
  size_t *v34;
  uint64_t v35;
  uint64_t v36;
  void ***(*v37)(void ***);
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  char *v46;
  char *v47;
  char *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::string::size_type v54;
  _QWORD *v55;
  void **v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::runtime_error *exception;
  std::logic_error *v68;
  __int128 v69;
  char v70;
  void *v71[2];
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  std::__fs::filesystem::path v76;
  std::string __dst;
  void ***(*v78)(void ***);
  std::string::value_type v79;
  std::string::value_type v80;
  std::string::value_type v81;
  unsigned __int8 *v82;
  void *v83;
  char *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  char v88;
  char v89;
  char v90;
  const char *v91;
  uint64_t v92;
  unsigned int v93;
  void *__p[2];
  char v95;
  char v96;
  uint64_t v97;
  int v98;
  void *v99;
  char *v100;
  std::string pn;
  char v102;
  int v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unsigned int v106;
  char *v107;
  char *v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v9 = *a3;
  if (*(char *)(*a3 + 23) < 0)
  {
    v11 = *(void **)v9;
    v10 = *(_QWORD *)(v9 + 8);
  }
  else
  {
    v10 = *(unsigned __int8 *)(*a3 + 23);
    v11 = (void *)*a3;
  }
  v12 = v9 + 24;
  v13 = *(unsigned __int8 *)(v9 + 48);
  v14 = (v9 + 24) & 0xFFFFFFFFFFFFFF00;
  v15 = v12 & 0xF8;
  if (!v13)
    v15 = 0;
  sub_20B200B4C((uint64_t)&__dst, a2, v11, v10, v15 | v14, v13);
  v17 = a3[2];
  v16 = (uint64_t)(a3 + 2);
  v18 = *(unsigned __int8 *)((*(uint64_t (**)(uint64_t))(v17 + 16))(v16) + 96);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  if (v18)
    v20 = (uint64_t *)(v19 + 80);
  else
    v20 = (uint64_t *)v19;
  sub_20B201590(&pn, v16);
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &pn;
  else
    v21 = (std::string *)pn.__r_.__value_.__r.__words[0];
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(pn.__r_.__value_.__r.__words[2]);
  else
    size = pn.__r_.__value_.__l.__size_;
  v23 = a4 - 1;
  switch(v23)
  {
    case 0:
      v24 = 4;
      v95 = 4;
      v25 = 1952539694;
      goto LABEL_20;
    case 1:
      v24 = 4;
      v95 = 4;
      v25 = 1987273518;
      goto LABEL_20;
    case 2:
      v24 = 5;
      v95 = 5;
      strcpy((char *)__p, ".json");
      goto LABEL_21;
    case 3:
      v24 = 4;
      v95 = 4;
      v25 = 1954051118;
LABEL_20:
      LODWORD(__p[0]) = v25;
      BYTE4(__p[0]) = 0;
LABEL_21:
      sub_20B201054((uint64_t)&v76, (uint64_t)&__dst, v20, (uint64_t)v21, size, (uint64_t)__p, v24, a5);
      if (v95 < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_23:
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_24;
          goto LABEL_33;
        }
      }
      else if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_23;
      }
      operator delete(pn.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_24;
LABEL_33:
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
      sub_20B422114(&v76, 0x30u, a5, &v73);
      if (!v74)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
          sub_20AEC60F4(&pn, v76.__pn_.__r_.__value_.__l.__data_, v76.__pn_.__r_.__value_.__l.__size_);
        else
          pn = v76.__pn_;
        sub_20B1F16DC("Failed to write to file: ", &pn, &__dst);
        std::runtime_error::runtime_error(exception, &__dst);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      return;
    default:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/FileIOPrivate.cpp", 130, (uint64_t)"", 0, (uint64_t)"Unsupported format", 18, (void (*)(void **))sub_20B532360);
      abort();
  }
  v26 = sub_20B0C19F8(0);
  sub_20B0C1478((uint64_t)__p, v16, (uint64_t)v26);
  switch(v23)
  {
    case 0:
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C41F230;
      __dst.__r_.__value_.__l.__size_ = 1;
      __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C41F380;
      v31 = operator new();
      *(_QWORD *)v31 = v30;
      *(_QWORD *)(v31 + 8) = v30;
      *(_BYTE *)(v31 + 16) = 0;
      *(_BYTE *)(v31 + 40) = 0;
      *(_BYTE *)(v31 + 48) = 0;
      *(_BYTE *)(v31 + 72) = 0;
      *(_QWORD *)(v31 + 88) = 0;
      *(_QWORD *)(v31 + 96) = 0;
      *(_QWORD *)(v31 + 80) = 0;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C411A68;
      __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C411BB8;
      v78 = (void ***(*)(void ***))v31;
      sub_20B51EBD0((uint64_t)&pn, v31 + 8);
      sub_20B51956C((uint64_t)v78);
      sub_20B20B69C((uint64_t)&__dst, (uint64_t)__p);
      v32 = v78;
      v33 = *(_QWORD *)(*((_QWORD *)v78 + 11) - 8);
      v34 = (size_t *)((char *)v78 + 48);
      sub_20B5190E0((uint64_t *)v78 + 6, *((_QWORD *)v78 + 2) - v33 - 9);
      if (*v34)
        memmove((void *)(*((_QWORD *)v32 + 3) + v33), *((const void **)v32 + 7), *v34);
      *((_QWORD *)v32 + 6) = 0;
      v35 = *((_QWORD *)v32 + 10);
      v36 = *((_QWORD *)v32 + 11) - 8;
      *((_QWORD *)v32 + 11) = v36;
      if (v35 == v36)
      {
        std::ostream::write();
        if (*((_BYTE *)v32 + 40))
        {
          free(*((void **)v32 + 3));
          *((_BYTE *)v32 + 40) = 0;
        }
      }
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C41F230;
      v37 = v78;
      __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C41F380;
      v78 = 0;
      if (!v37)
        goto LABEL_108;
      v38 = (void *)*((_QWORD *)v37 + 10);
      if (v38)
      {
        *((_QWORD *)v37 + 11) = v38;
        operator delete(v38);
      }
      if (*((_BYTE *)v37 + 72))
        free(*((void **)v37 + 7));
      if (*((_BYTE *)v37 + 40))
        free(*((void **)v37 + 3));
      MEMORY[0x20BD3583C](v37, 0x1030C408C1A3048);
      if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_47;
      goto LABEL_109;
    case 1:
    case 3:
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
      pn.__r_.__value_.__r.__words[0] = 0x400000001;
      sub_20B515AB4((uint64_t)&__dst, (uint64_t *)&pn, v27, 0, 0, 0);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C411588;
      __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C4116D8;
      if (v82)
      {
        pn.__r_.__value_.__s.__data_[0] = v79;
        sub_20AEC01D0(v78, (uint64_t)&pn, 1);
      }
      std::ostream::operator<<();
      ++v82;
      sub_20B20B948((uint64_t)&__dst, (uint64_t)__p);
      v28 = v81;
      if (v82)
      {
        pn.__r_.__value_.__s.__data_[0] = v79;
        sub_20AEC01D0(v78, (uint64_t)&pn, 1);
      }
      pn.__r_.__value_.__s.__data_[0] = v28;
      sub_20AEC01D0(v78, (uint64_t)&pn, 1);
      v29 = v82 + 1;
      v82 = 0;
      v83 = v29;
      pn.__r_.__value_.__s.__data_[0] = v80;
      sub_20AEC01D0(v78, (uint64_t)&pn, 1);
      goto LABEL_108;
    case 2:
      v69 = xmmword_20B5EAC40;
      v70 = 0;
      __dst.__r_.__value_.__l.__size_ = 0x300000001;
      v39 = operator new();
      *(_BYTE *)v39 = 0;
      *(_QWORD *)(v39 + 8) = 0;
      __dst.__r_.__value_.__r.__words[2] = v39;
      v78 = sub_20B50F13C;
      v79 = 1;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v84 = 0;
      v85 = 0;
      LOBYTE(v86) = 0;
      v82 = (unsigned __int8 *)v39;
      v83 = 0;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C411808;
      sub_20B50671C((uint64_t)&__dst);
      pn.__r_.__value_.__r.__words[0] = (std::string::size_type)"version";
      pn.__r_.__value_.__l.__size_ = 7;
      LODWORD(pn.__r_.__value_.__r.__words[2]) = 2;
      if (*v82 <= 1u)
      {
        v86 = "version";
        v87 = 7;
        if (!v88)
          v88 = 1;
      }
      sub_20B5086B4((uint64_t)&__dst, &pn.__r_.__value_.__r.__words[2]);
      sub_20B20BC50((uint64_t)&pn, (uint64_t)__p);
      if (*v82 <= 1u)
      {
        v86 = "data_id";
        v87 = 7;
        if (!v88)
          v88 = 1;
      }
      sub_20B50671C((uint64_t)&__dst);
      v91 = "version";
      v92 = 7;
      v93 = 2;
      if (*v82 <= 1u)
      {
        v86 = "version";
        v87 = 7;
        if (!v88)
          v88 = 1;
      }
      sub_20B5086B4((uint64_t)&__dst, &v93);
      if (*v82 <= 1u)
      {
        v86 = "package_id";
        v87 = 10;
        if (!v88)
          v88 = 1;
      }
      sub_20B508B7C((uint64_t)&__dst, (uint64_t)&pn.__r_.__value_.__l.__size_);
      if (*v82 <= 1u)
      {
        v86 = "type_id";
        v87 = 7;
        if (!v88)
          v88 = 1;
      }
      sub_20B5086B4((uint64_t)&__dst, &v103);
      v82 = (unsigned __int8 *)*((_QWORD *)v84 - 1);
      v84 -= 8;
      if (v88)
        v88 = 0;
      if (v106 > 1)
        sub_20AECFAB8();
      v40 = v104;
      v41 = v105;
      if (v105)
      {
        p_shared_owners = (unint64_t *)&v105->__shared_owners_;
        do
          v43 = __ldxr(p_shared_owners);
        while (__stxr(v43 + 1, p_shared_owners));
        do
          v44 = __ldaxr(p_shared_owners);
        while (__stlxr(v44 - 1, p_shared_owners));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      if (*v82 <= 1u)
      {
        v86 = "data";
        v87 = 4;
        if (!v88)
          v88 = 1;
      }
      sub_20B50671C((uint64_t)&__dst);
      v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
      v91 = "version";
      v92 = 7;
      v93 = v45;
      if (*v82 <= 1u)
      {
        v86 = "version";
        v87 = 7;
        if (!v88)
          v88 = 1;
      }
      sub_20B5086B4((uint64_t)&__dst, &v93);
      (*(void (**)(uint64_t, std::string *, _QWORD))(*(_QWORD *)v40 + 32))(v40, &__dst, v93);
      v82 = (unsigned __int8 *)*((_QWORD *)v84 - 1);
      v84 -= 8;
      if (v88)
        v88 = 0;
      v46 = v107;
      if (v107)
      {
        v47 = v108;
        v48 = v107;
        if (v108 != v107)
        {
          do
          {
            v49 = (std::__shared_weak_count *)*((_QWORD *)v47 - 1);
            if (v49)
            {
              v50 = (unint64_t *)&v49->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            v47 -= 16;
          }
          while (v47 != v46);
          v48 = v107;
        }
        v108 = v46;
        operator delete(v48);
      }
      if (v106 != -1)
        ((void (*)(const char **, uint64_t *))off_24C411788[v106])(&v91, &v104);
      v106 = -1;
      if (v102 < 0)
        operator delete((void *)pn.__r_.__value_.__l.__size_);
      v82 = (unsigned __int8 *)*((_QWORD *)v84 - 1);
      v84 -= 8;
      if (v88)
        v88 = 0;
      sub_20B4F7E88((unsigned __int8 *)__dst.__r_.__value_.__r.__words[2], (uint64_t)&v69, v71);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C41E750;
      if (v83)
      {
        v84 = (char *)v83;
        operator delete(v83);
      }
      v54 = __dst.__r_.__value_.__r.__words[2];
      __dst.__r_.__value_.__r.__words[2] = 0;
      if (v54)
        ((void (*)(std::string::size_type, uint64_t, uint64_t))v78)(v54, v52, v53);
      v55 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
      if ((v72 & 0x80u) == 0)
        v56 = v71;
      else
        v56 = (void **)v71[0];
      if ((v72 & 0x80u) == 0)
        v57 = v72;
      else
        v57 = (uint64_t)v71[1];
      sub_20AEC01D0(v55, (uint64_t)v56, v57);
      if ((char)v72 < 0)
      {
        operator delete(v71[0]);
        if ((SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_109;
LABEL_47:
        sub_20AEC60F4(&__dst, v76.__pn_.__r_.__value_.__l.__data_, v76.__pn_.__r_.__value_.__l.__size_);
        goto LABEL_110;
      }
LABEL_108:
      if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_47;
LABEL_109:
      __dst = v76.__pn_;
LABEL_110:
      *a1 = __dst;
      a1[1].__r_.__value_.__r.__words[0] = 0;
      a1[1].__r_.__value_.__s.__data_[8] = 1;
      v58 = (char *)v99;
      if (v99)
      {
        v59 = v100;
        v60 = v99;
        if (v100 != v99)
        {
          do
          {
            v61 = (std::__shared_weak_count *)*((_QWORD *)v59 - 1);
            if (v61)
            {
              v62 = (unint64_t *)&v61->__shared_owners_;
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
            v59 -= 16;
          }
          while (v59 != v58);
          v60 = v99;
        }
        v100 = v58;
        operator delete(v60);
      }
      if (v98 != -1)
        ((void (*)(std::string *, uint64_t *))off_24C411788[v98])(&__dst, &v97);
      v98 = -1;
      if (v96 < 0)
      {
        operator delete(__p[1]);
        v64 = v75;
        if (!v75)
          goto LABEL_130;
      }
      else
      {
        v64 = v75;
        if (!v75)
          goto LABEL_130;
      }
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (v66)
      {
LABEL_130:
        if ((SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_131;
      }
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
      if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
LABEL_131:
        operator delete(v76.__pn_.__r_.__value_.__l.__data_);
      return;
    default:
      v68 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v68, "No method to save given format");
      v68->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(v68, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
}

void sub_20B204884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  sub_20B1EBC54((uint64_t)&a47);
  sub_20B4224E8((uint64_t)&a18);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B204A28(uint64_t a1@<X0>, void ***a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, std::string *a7@<X8>)
{
  void **v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  size_t v13;
  uint64_t v14;
  char *v15;
  void **p_s1;
  uint64_t v17;
  _BOOL4 v18;
  void *v19;
  uint64_t v20;
  void ***v21;
  unint64_t v22;
  void *__s1;
  size_t __n;
  unsigned __int8 v25;
  int v26;
  uint64_t v27;
  void ***v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  int v35;
  __int128 v36;

  v27 = a1;
  v28 = a2;
  v29 = a4;
  v30 = a5;
  v31 = a6;
  v32 = 0;
  v33 = 0;
  v34 = 0x400000004;
  v35 = 3;
  if ((a3 & 1) != 0)
  {
    a7->__r_.__value_.__s.__data_[0] = 0;
    a7[1].__r_.__value_.__s.__data_[8] = 0;
    return;
  }
  if ((a3 & 0x40) == 0)
    goto LABEL_25;
  v10 = a2[3];
  if (!v10)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
    {
      goto LABEL_63;
    }
    v10 = a2[3];
  }
  (*((void (**)(void **__return_ptr))*v10 + 6))(&__s1);
  v11 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
  {
    v36 = xmmword_20B5B0AE0;
    sub_20B1DFBA8((uint64_t *)&v36);
    __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CF48);
  }
  v12 = v25;
  if ((v25 & 0x80u) == 0)
    v13 = v25;
  else
    v13 = __n;
  v14 = *(_QWORD *)&byte_25463CE68[8];
  if (byte_25463CE68[23] >= 0)
    v14 = byte_25463CE68[23];
  if (v13 != v14)
    goto LABEL_23;
  if (byte_25463CE68[23] >= 0)
    v15 = byte_25463CE68;
  else
    v15 = *(char **)byte_25463CE68;
  if ((v25 & 0x80) != 0)
  {
    v19 = __s1;
    if (memcmp(__s1, v15, __n))
    {
      operator delete(v19);
      if ((a3 & 4) == 0)
        goto LABEL_33;
      goto LABEL_26;
    }
  }
  else if (v25)
  {
    p_s1 = &__s1;
    v17 = v25;
    while (*(unsigned __int8 *)p_s1 == *v15)
    {
      p_s1 = (void **)((char *)p_s1 + 1);
      ++v15;
      if (!--v17)
        goto LABEL_44;
    }
LABEL_23:
    v18 = 0;
    if ((v25 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_45;
  }
LABEL_44:
  v18 = v26 == dword_25463CE80;
  if ((v12 & 0x80) != 0)
  {
LABEL_45:
    operator delete(__s1);
    if (v18)
      goto LABEL_46;
LABEL_25:
    if ((a3 & 4) == 0)
      goto LABEL_33;
LABEL_26:
    sub_20B207350((uint64_t)&v27);
    if (v33)
    {
      sub_20B207350((uint64_t)&v27);
      if ((_DWORD)v34 != 6)
      {
        if ((_DWORD)v34 == 5)
        {
          sub_20B205064(a7, v27, v28, a3, v29);
          return;
        }
        goto LABEL_62;
      }
      sub_20B2066D0((uint64_t)a7, v27, v28, a3, v29);
      return;
    }
LABEL_33:
    if ((a3 & 0x38) != 0)
    {
      if ((a3 & 0x10) != 0)
      {
        if ((a3 & 0x100) != 0)
          sub_20B203D2C(a7, v27, v28, 2, v29);
        else
          sub_20B202768((uint64_t)a7, v27, v28, 2, v29, v30, v31);
        return;
      }
      if ((a3 & 0x20) != 0)
      {
        sub_20B203D2C(a7, v27, v28, 3, v29);
        return;
      }
      sub_20B207350((uint64_t)&v27);
      if (BYTE1(v32))
      {
        v20 = v27;
        v21 = v28;
        v22 = v29;
        if ((a3 & 0x100) == 0)
        {
LABEL_38:
          sub_20B202768((uint64_t)a7, v20, v21, SHIDWORD(v34), v22, v30, v31);
          return;
        }
LABEL_54:
        sub_20B203D2C(a7, v20, v21, v35, v22);
        return;
      }
      sub_20B207350((uint64_t)&v27);
      if (BYTE2(v32))
      {
        v20 = v27;
        v21 = v28;
        v22 = v29;
        if ((a3 & 0x80) != 0)
          goto LABEL_38;
        goto LABEL_54;
      }
      v20 = v27;
      v21 = v28;
      v22 = v29;
      if ((a3 & 2) == 0)
      {
        if ((a3 & 0x80) != 0)
          goto LABEL_38;
        goto LABEL_54;
      }
    }
    else
    {
      sub_20B207350((uint64_t)&v27);
      v20 = v27;
      v21 = v28;
      v22 = v29;
      if (BYTE1(v32))
      {
        if ((a3 & 0x100) != 0)
        {
LABEL_59:
          sub_20B203D2C(a7, v20, v21, 1, v22);
          return;
        }
LABEL_41:
        sub_20B202768((uint64_t)a7, v20, v21, 1, v22, v30, v31);
        return;
      }
    }
    if ((a3 & 0x80) == 0)
      goto LABEL_59;
    goto LABEL_41;
  }
LABEL_24:
  if (!v18)
    goto LABEL_25;
LABEL_46:
  sub_20B207350((uint64_t)&v27);
  if ((_DWORD)v34 == 6)
  {
    sub_20B2066D0((uint64_t)a7, v27, v28, 0x40uLL, v29);
  }
  else
  {
    if ((_DWORD)v34 != 5)
    {
LABEL_62:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/FileIOPrivate.cpp", 593, (uint64_t)"", 0, (uint64_t)"No known common format", 22, (void (*)(void **))sub_20B532360);
LABEL_63:
      abort();
    }
    sub_20B205064(a7, v27, v28, 0x40uLL, v29);
  }
}

void sub_20B204EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_guard_abort(&qword_25463CF48);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B204ED0(uint64_t a1@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, std::string *a7@<X8>)
{
  std::string *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;

  v15 = a1;
  v16 = a2;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = 0;
  v21 = 0;
  v22 = 0x400000004;
  v23 = 3;
  if ((a3 & 2) != 0)
  {
LABEL_9:
    v12 = a7;
    v13 = 1;
    v14 = a4;
LABEL_10:
    sub_20B203D2C(v12, a1, a2, v13, v14);
    return;
  }
  if ((a3 & 8) != 0)
    goto LABEL_11;
  if ((a3 & 0x10) != 0)
  {
    v12 = a7;
    v13 = 2;
    v14 = a4;
    goto LABEL_10;
  }
  if ((a3 & 0x20) != 0)
  {
LABEL_11:
    v12 = a7;
    v13 = 3;
    v14 = a4;
    goto LABEL_10;
  }
  if ((a3 & 0x40) == 0)
  {
    if ((a3 & 4) == 0)
    {
      if ((a3 & 1) == 0)
      {
        sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/FileIOPrivate.cpp", 768, (uint64_t)"", 0, (uint64_t)"Flag not supported for ExportLargeData", 38, (void (*)(void **))sub_20B532360);
        abort();
      }
      a7->__r_.__value_.__s.__data_[0] = 0;
      a7[1].__r_.__value_.__s.__data_[8] = 0;
      return;
    }
    goto LABEL_9;
  }
  sub_20B207350((uint64_t)&v15);
  if ((_DWORD)v22 == 6)
  {
    sub_20B2066D0((uint64_t)a7, v15, v16, a3, v17);
  }
  else
  {
    if ((_DWORD)v22 != 5)
    {
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/FileIOPrivate.cpp", 593, (uint64_t)"", 0, (uint64_t)"No known common format", 22, (void (*)(void **))sub_20B532360);
      abort();
    }
    sub_20B205064(a7, v15, v16, a3, v17);
  }
}

void sub_20B205064(std::string *a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  uint64_t (***v10)();
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  const char *v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  unint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _BYTE *v39;
  int v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *exception;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::__fs::filesystem::path v50;
  std::string::size_type v51;
  std::__fs::filesystem::path v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  void *v62[2];
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  void *v67;
  char v68;
  __int128 v69;
  __int128 v70;
  char v71;
  char v72;
  void *v73;
  char v74;
  void *v75;
  char v76;
  char v77;
  char v78;
  __int128 v79;
  void *__p[2];
  int v81;
  char v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  char v89;
  char v90;
  __int128 v91;
  void *v92;
  char v93;
  char v94;
  void *v95;
  char v96;
  void *v97;
  char v98;
  char v99;
  char v100;
  char v101;
  int v102;
  _QWORD v103[2];

  v10 = (uint64_t (***)())a3[3];
  v11 = (std::__shared_weak_count *)a3[4];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if (v10 && *v10 == &off_24C411FE8)
  {
    v14 = 1;
    if (!v11)
      goto LABEL_13;
  }
  else
  {
    v14 = 0;
    if (!v11)
      goto LABEL_13;
  }
  v15 = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_13:
  if ((v14 & 1) == 0)
  {
    v53 = 0;
    v54 = 0;
    goto LABEL_104;
  }
  v18 = a3[3];
  v17 = (std::__shared_weak_count *)a3[4];
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v53 = v18;
  v54 = v17;
  if (!v18)
  {
LABEL_104:
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/FileIOPrivate.cpp", 808, (uint64_t)"image_data_ptr", 14, (uint64_t)"ExportImageData requires data to be ImageData", 45, (void (*)(void **))sub_20B532360);
    abort();
  }
  v21 = ".png";
  v22 = 3;
  v23 = 4;
  switch(*(_DWORD *)(v18 + 56))
  {
    case 1:
    case 2:
    case 0x15:
    case 0x16:
    case 0x1E:
      goto LABEL_21;
    case 3:
    case 4:
      v21 = ".tiff";
      v22 = 5;
      v23 = 5;
      goto LABEL_21;
    case 0x17:
    case 0x18:
    case 0x1D:
    case 0x1F:
    case 0x20:
      v21 = ".tiff";
      v23 = 5;
      v22 = 5;
LABEL_21:
      sub_20B20577C(&v50, a2, a3, (uint64_t)v21, v23, a4, a5);
      sub_20B422114(&v52, 0x30u, a5, &v47);
      v24 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
      *(_QWORD *)&v79 = &off_24C3FA3D0;
      v25 = *(_QWORD *)(v18 + 16);
      v26 = *(std::__shared_weak_count **)(v18 + 24);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        v29 = *(_QWORD *)(v18 + 48);
        v30 = *(_DWORD *)(v18 + 56);
        v31 = *(_WORD *)(v18 + 60);
        do
          v32 = __ldxr(v27);
        while (__stxr(v32 + 1, v27));
      }
      else
      {
        v29 = *(_QWORD *)(v18 + 48);
        v30 = *(_DWORD *)(v18 + 56);
        v31 = *(_WORD *)(v18 + 60);
      }
      *((_QWORD *)&v79 + 1) = v25;
      __p[0] = v26;
      v33 = *(void **)(v18 + 32);
      v81 = *(_DWORD *)(v18 + 40);
      __p[1] = v33;
      v83 = v29;
      LODWORD(v84) = v30;
      WORD2(v84) = v31;
      if (v26)
      {
        v34 = (unint64_t *)&v26->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      sub_20B2D17C0(&v79, v24, v22, (uint64_t)&v91);
      v36 = (std::__shared_weak_count *)__p[0];
      if (!__p[0])
        goto LABEL_37;
      v37 = (unint64_t *)((char *)__p[0] + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
        if (v101)
          goto LABEL_38;
      }
      else
      {
LABEL_37:
        if (v101)
        {
LABEL_38:
          v66 = 1;
          goto LABEL_73;
        }
      }
      v103[0] = "save";
      v103[1] = 4;
      v102 = v22;
      sub_20B2D15EC("Failure during ", (uint64_t)v103, (uint64_t)" from stream with file format ", &v102, (uint64_t)": ");
      if (v101)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C3F6160;
        __cxa_throw(exception, (struct type_info *)&unk_24C3F22A8, (void (*)(void *))std::exception::~exception);
      }
      sub_20B52A138(&v67, &v91, (uint64_t)&v69);
      v79 = v69;
      v39 = sub_20AECEBD0(__p, &v70);
      v55 = v79;
      LOBYTE(v56) = 0;
      v65 = 0;
      if (!v90)
      {
        v66 = 0;
        if (!v78)
          goto LABEL_60;
        goto LABEL_52;
      }
      v58 = 0;
      v40 = v83;
      if ((_BYTE)v83)
      {
        v56 = *(_OWORD *)v39;
        v57 = *((_QWORD *)v39 + 2);
        *((_QWORD *)v39 + 1) = 0;
        *((_QWORD *)v39 + 2) = 0;
        *(_QWORD *)v39 = 0;
        v58 = 1;
      }
      LOBYTE(v59) = 0;
      v64 = 0;
      if (v89)
      {
        v60 = v85;
        v59 = v84;
        v84 = 0uLL;
        v61 = v86;
        *(_OWORD *)v62 = v87;
        v63 = v88;
        v85 = 0;
        v87 = 0uLL;
        v88 = 0;
        v64 = 1;
      }
      v65 = 1;
      v66 = 0;
      if (v40 && v82 < 0)
        operator delete(__p[0]);
      if (v78)
      {
LABEL_52:
        if (v77)
        {
          if (v76 < 0)
            operator delete(v75);
          if (v74 < 0)
            operator delete(v73);
        }
        if (v72 && v71 < 0)
          operator delete((void *)v70);
      }
LABEL_60:
      if (v68 < 0)
      {
        operator delete(v67);
        if (v101)
          goto LABEL_73;
      }
      else if (v101)
      {
        goto LABEL_73;
      }
      if (v100)
      {
        if (v99)
        {
          if (v98 < 0)
            operator delete(v97);
          if (v96 < 0)
            operator delete(v95);
        }
        if (v94 && v93 < 0)
          operator delete(v92);
      }
LABEL_73:
      sub_20B0D38B0((uint64_t)&v55);
      if (!v66 && v65)
      {
        if (v64)
        {
          if (SHIBYTE(v63) < 0)
            operator delete(v62[0]);
          if (SHIBYTE(v60) < 0)
            operator delete((void *)v59);
        }
        if (v58 && SHIBYTE(v57) < 0)
          operator delete((void *)v56);
      }
      if (SHIBYTE(v50.__pn_.__r_.__value_.__r.__words[2]) < 0)
        sub_20AEC60F4(a1, v50.__pn_.__r_.__value_.__l.__data_, v50.__pn_.__r_.__value_.__l.__size_);
      else
        *(std::__fs::filesystem::path *)a1 = v50;
      a1[1].__r_.__value_.__r.__words[0] = v51;
      a1[1].__r_.__value_.__s.__data_[8] = 1;
      v41 = v49;
      if (!v49)
        goto LABEL_90;
      v42 = (unint64_t *)&v49->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (v43)
      {
LABEL_90:
        if ((SHIBYTE(v52.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_91;
LABEL_100:
        operator delete(v52.__pn_.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v50.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_92;
LABEL_101:
        operator delete(v50.__pn_.__r_.__value_.__l.__data_);
        goto LABEL_92;
      }
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      if (SHIBYTE(v52.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_100;
LABEL_91:
      if (SHIBYTE(v50.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_101;
LABEL_92:
      v17 = v54;
LABEL_93:
      if (v17)
      {
        v44 = (unint64_t *)&v17->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      return;
    default:
      sub_20B204ED0(a2, a3, a4, a5, 0, 0, a1);
      goto LABEL_93;
  }
}

void sub_20B2056BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B2056D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  uint64_t v58;

  sub_20AECCE40((uint64_t)&a43);
  if (a42 < 0)
    operator delete(__p);
  sub_20AECD704(v58 - 232);
  sub_20B4224E8((uint64_t)&a9);
  sub_20B206678((uint64_t)&a12);
  sub_20AEC147C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20B205768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B20577C(std::__fs::filesystem::path *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  int v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  size_t size;
  unint64_t v23;
  uint64_t v24;
  std::string *p_dst;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  void **v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  std::string *v37;
  std::string::size_type v38;
  std::__fs::filesystem::path::__string_view v39;
  std::__fs::filesystem::path *p_p;
  std::basic_string_view<_CharT, _Traits>::size_type v41;
  std::basic_string_view<_CharT, _Traits>::size_type v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  std::__shared_weak_count *v47;
  _QWORD *v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  std::string::value_type v55;
  void **v56;
  void **v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  size_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  size_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  std::string::value_type v71;
  uint64_t v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  std::__fs::filesystem::path *v75;
  std::string::value_type *v76;
  void **v77;
  void **v78;
  void *v79;
  std::__fs::filesystem::path *v80;
  int v81;
  std::__fs::filesystem::path v82;
  uint64_t v83;
  std::__fs::filesystem::path v84;
  std::__fs::filesystem::path v85;
  std::string v86;
  std::__fs::filesystem::path v87;
  void *v88[2];
  char v89;
  uint64_t *v90[3];
  _QWORD *v91;
  std::string::value_type v92;
  std::string::value_type v93;
  std::string::value_type v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (**v99)();
  __int128 v100;
  char v101;
  std::string::value_type v102;
  std::string __dst;
  unint64_t v104;
  _BYTE v105[24];
  void *v106;
  char v107;
  char v108;
  void *v109;
  char v110;
  char v111;
  void *v112;
  char v113;
  char v114;
  void *v115;
  void **v116;
  char v117;
  _OWORD v118[8];
  uint64_t v119;
  std::__fs::filesystem::path __p;
  unint64_t v121;
  _BYTE v122[24];
  void *v123;
  char v124;
  char v125;
  void *v126;
  uint64_t v127;
  char v128;
  void *v129;
  char v130;
  char v131;
  void *v132;
  void **v133;
  char v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  if (a6 <= 0x10 && ((1 << a6) & 0x14100) != 0)
  {
    v81 = 2;
    v12 = 1987273518;
  }
  else
  {
    v81 = 1;
    v12 = 1952539694;
  }
  v89 = 4;
  LODWORD(v88[0]) = v12;
  BYTE4(v88[0]) = 0;
  v13 = *a3;
  if (*(char *)(*a3 + 23) < 0)
  {
    v15 = *(void **)v13;
    v14 = *(_QWORD *)(v13 + 8);
  }
  else
  {
    v14 = *(unsigned __int8 *)(*a3 + 23);
    v15 = (void *)*a3;
  }
  v16 = v13 + 24;
  v17 = *(unsigned __int8 *)(v13 + 48);
  v18 = (v13 + 24) & 0xFFFFFFFFFFFFFF00;
  v19 = v16 & 0xF8;
  if (!v17)
    v19 = 0;
  sub_20B200B4C((uint64_t)&v87, a2, v15, v14, v19 | v18, v17);
  v80 = a1;
  v20 = a3 + 2;
  sub_20B201590(&v86, (uint64_t)(a3 + 2));
  v21 = SHIBYTE(v86.__r_.__value_.__r.__words[2]);
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
  else
    size = v86.__r_.__value_.__l.__size_;
  v23 = size + 5;
  if (size + 5 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v24 = a5;
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    p_dst = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = size + 5;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + 5;
    if (!size)
      goto LABEL_24;
  }
  if (v21 >= 0)
    v28 = &v86;
  else
    v28 = (std::string *)v86.__r_.__value_.__r.__words[0];
  memmove(p_dst, v28, size);
LABEL_24:
  strcpy((char *)p_dst + size, "_info");
  if (v89 >= 0)
    v29 = v88;
  else
    v29 = (void **)v88[0];
  if (v89 >= 0)
    v30 = v89;
  else
    v30 = (std::string::size_type)v88[1];
  v31 = std::string::append(&__dst, (const std::string::value_type *)v29, v30);
  v32 = v31->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v118[0] = v31->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v118 + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
  v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&__p.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v118 + 7);
  __p.__pn_.__r_.__value_.__r.__words[0] = v32;
  __p.__pn_.__r_.__value_.__l.__size_ = *(_QWORD *)&v118[0];
  *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = v33;
  if (SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&v85, v87.__pn_.__r_.__value_.__l.__data_, v87.__pn_.__r_.__value_.__l.__size_);
  else
    v85 = v87;
  sub_20B1F6634((uint64_t)&v85, &__p);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_35;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_35;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_35:
  v34 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD *))(*v20 + 16))(a3 + 2) + 96);
  v35 = (*(uint64_t (**)(_QWORD *))(*v20 + 16))(a3 + 2);
  if (v34)
    v36 = (uint64_t *)(v35 + 80);
  else
    v36 = (uint64_t *)v35;
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = &v86;
  else
    v37 = (std::string *)v86.__r_.__value_.__r.__words[0];
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
  else
    v38 = v86.__r_.__value_.__l.__size_;
  sub_20B201054((uint64_t)&v84, (uint64_t)&v87, v36, (uint64_t)v37, v38, a4, v24, a7);
  v39 = std::__fs::filesystem::path::__filename(&v84);
  if (v39.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v39.__size_ >= 0x17)
  {
    v41 = (v39.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39.__size_ | 7) != 0x17)
      v41 = v39.__size_ | 7;
    v42 = v41 + 1;
    p_p = (std::__fs::filesystem::path *)operator new(v41 + 1);
    __p.__pn_.__r_.__value_.__r.__words[2] = v42 | 0x8000000000000000;
    __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    __p.__pn_.__r_.__value_.__l.__size_ = v39.__size_;
    goto LABEL_51;
  }
  *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = v39.__size_;
  p_p = &__p;
  if (v39.__size_)
LABEL_51:
    memmove(p_p, v39.__data_, v39.__size_);
  p_p->__pn_.__r_.__value_.__s.__data_[v39.__size_] = 0;
  v43 = *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_;
  LODWORD(v118[0]) = __p.__pn_.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v118 + 3) = *(_DWORD *)((char *)&__p.__pn_.__r_.__value_.__r.__words[2] + 3);
  v44 = SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
  v45 = a3[3];
  if (!v45)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v45 = a3[3];
  }
  v46 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
  if (v44 < 0)
  {
    sub_20AEC60F4(&__dst, (void *)v43, *((unint64_t *)&v43 + 1));
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v43;
    LODWORD(__dst.__r_.__value_.__r.__words[2]) = v118[0];
    *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v118 + 3);
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v44;
  }
  v104 = 0;
  sub_20B0D0A00((uint64_t)v105, v46);
  if (v44 < 0)
    operator delete((void *)v43);
  v97 = 0;
  v98 = 0;
  sub_20B422114(&v85, 0x11u, a7, &__p);
  v47 = (std::__shared_weak_count *)__p.__pn_.__r_.__value_.__r.__words[2];
  v99 = &off_24C41B880;
  v100 = *(_OWORD *)&__p.__pn_.__r_.__value_.__r.__words[1];
  v101 = 1;
  v48 = (_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__p.__pn_.__r_.__value_.__l.__size_
                                                                    + 16))(__p.__pn_.__r_.__value_.__l.__size_);
  v49 = v48;
  v50 = (char *)v48 + *(_QWORD *)(*v48 - 24);
  if ((v50[32] & 5) != 0)
  {
    v51 = -1;
    v52 = (char *)v48 + *(_QWORD *)(*v48 - 24);
    if ((v52[32] & 5) != 0)
    {
LABEL_64:
      memset(v118, 0, sizeof(v118));
      v119 = -1;
      goto LABEL_67;
    }
  }
  else
  {
    (*(void (**)(std::__fs::filesystem::path *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v50 + 5) + 32))(&__p, *((_QWORD *)v50 + 5), 0, 1, 16);
    v51 = v127;
    v52 = (char *)v49 + *(_QWORD *)(*v49 - 24);
    if ((v52[32] & 5) != 0)
      goto LABEL_64;
  }
  (*(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v52 + 5) + 32))(v118, *((_QWORD *)v52 + 5), 0, 1, 16);
LABEL_67:
  if (v81 == 2)
  {
    __p.__pn_.__r_.__value_.__r.__words[0] = 0x400000001;
    sub_20B515AB4((uint64_t)v90, (uint64_t *)&__p, (uint64_t)v49, 0, 0, 0);
    v90[0] = (uint64_t *)&off_24C411588;
    v90[2] = (uint64_t *)&unk_24C4116D8;
    if (v95)
    {
      __p.__pn_.__r_.__value_.__s.__data_[0] = v92;
      sub_20AEC01D0(v91, (uint64_t)&__p, 1);
    }
    std::ostream::operator<<();
    ++v95;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      sub_20AEC60F4(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      __p.__pn_ = __dst;
    v121 = v104;
    sub_20B0D1898((uint64_t)v122, (uint64_t)v105);
    sub_20B512F6C((uint64_t)v90, (uint64_t)&__p);
    if (v95)
    {
      v102 = v92;
      sub_20AEC01D0(v91, (uint64_t)&v102, 1);
    }
    std::ostream::operator<<();
    if (!__CFADD__(v95++, 1))
    {
      v102 = v92;
      sub_20AEC01D0(v91, (uint64_t)&v102, 1);
    }
    std::ostream::operator<<();
    ++v95;
    sub_20B0D67E0((uint64_t)v90, (uint64_t)v122, 6u);
    v55 = v94;
    if (v95)
    {
      v102 = v92;
      sub_20AEC01D0(v91, (uint64_t)&v102, 1);
    }
    v102 = v55;
    sub_20AEC01D0(v91, (uint64_t)&v102, 1);
    ++v95;
    if (v134)
    {
      v56 = (void **)v132;
      if (v132)
      {
        v57 = v133;
        v58 = v132;
        if (v133 != v132)
        {
          do
          {
            if (*((char *)v57 - 1) < 0)
              operator delete(*(v57 - 3));
            v57 -= 3;
          }
          while (v57 != v56);
          v58 = v132;
        }
        v133 = v56;
        operator delete(v58);
      }
    }
    if (v131 && v130 < 0)
      operator delete(v129);
    if (v128 && SHIBYTE(v127) < 0)
      operator delete(v126);
    if (v125 && v124 < 0)
      operator delete(v123);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      v71 = v94;
      if (!v95)
      {
LABEL_129:
        __p.__pn_.__r_.__value_.__s.__data_[0] = v71;
        sub_20AEC01D0(v91, (uint64_t)&__p, 1);
        v72 = v95 + 1;
        v95 = 0;
        v96 = v72;
        __p.__pn_.__r_.__value_.__s.__data_[0] = v93;
        sub_20AEC01D0(v91, (uint64_t)&__p, 1);
        goto LABEL_130;
      }
    }
    else
    {
      v71 = v94;
      if (!v95)
        goto LABEL_129;
    }
    __p.__pn_.__r_.__value_.__s.__data_[0] = v92;
    sub_20AEC01D0(v91, (uint64_t)&__p, 1);
    goto LABEL_129;
  }
  __p.__pn_.__r_.__value_.__l.__size_ = 1;
  __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C41F230;
  __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C41F380;
  v53 = operator new();
  *(_QWORD *)v53 = v49;
  *(_QWORD *)(v53 + 8) = v49;
  *(_BYTE *)(v53 + 16) = 0;
  *(_BYTE *)(v53 + 40) = 0;
  *(_BYTE *)(v53 + 48) = 0;
  *(_BYTE *)(v53 + 72) = 0;
  *(_QWORD *)(v53 + 88) = 0;
  *(_QWORD *)(v53 + 96) = 0;
  *(_QWORD *)(v53 + 80) = 0;
  v121 = v53;
  __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C411A68;
  __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C411BB8;
  LOBYTE(v90[0]) = 3;
  std::ostream::write();
  sub_20B51956C(v121);
  if (*(_BYTE *)(v121 + 40))
  {
    v90[0] = (uint64_t *)(v121 + 16);
    sub_20B51FA2C((uint64_t)&v102, v90, (const void **)&__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_20B51FE64((uint64_t)v90, v121 + 8, (uint64_t)&__dst);
  }
  if (*(_BYTE *)(v121 + 40))
  {
    v90[0] = (uint64_t *)(v121 + 16);
    sub_20B51F33C(v90, v104);
  }
  else
  {
    sub_20B51F644();
  }
  if (*(_BYTE *)(v121 + 40))
  {
    v90[0] = (uint64_t *)(v121 + 16);
    sub_20B51E95C(v90, 6u);
  }
  else
  {
    LOBYTE(v90[0]) = 6;
    std::ostream::write();
  }
  sub_20B51956C(v121);
  sub_20B0D3E00((uint64_t)&__p, (uint64_t)v105, 6u);
  v59 = v121;
  v60 = *(_QWORD *)(*(_QWORD *)(v121 + 88) - 8);
  v61 = (size_t *)(v121 + 48);
  sub_20B5190E0((uint64_t *)(v121 + 48), *(_QWORD *)(v121 + 16) - v60 - 9);
  if (*v61)
    memmove((void *)(*(_QWORD *)(v59 + 24) + v60), *(const void **)(v59 + 56), *v61);
  *(_QWORD *)(v59 + 48) = 0;
  v62 = *(_QWORD *)(v59 + 80);
  v63 = *(_QWORD *)(v59 + 88) - 8;
  *(_QWORD *)(v59 + 88) = v63;
  if (v62 == v63)
  {
    std::ostream::write();
    if (*(_BYTE *)(v59 + 40))
    {
      free(*(void **)(v59 + 24));
      *(_BYTE *)(v59 + 40) = 0;
    }
  }
  v64 = v121;
  v65 = *(_QWORD *)(*(_QWORD *)(v121 + 88) - 8);
  v66 = (size_t *)(v121 + 48);
  sub_20B5190E0((uint64_t *)(v121 + 48), *(_QWORD *)(v121 + 16) - v65 - 9);
  if (*v66)
    memmove((void *)(*(_QWORD *)(v64 + 24) + v65), *(const void **)(v64 + 56), *v66);
  *(_QWORD *)(v64 + 48) = 0;
  v67 = *(_QWORD *)(v64 + 80);
  v68 = *(_QWORD *)(v64 + 88) - 8;
  *(_QWORD *)(v64 + 88) = v68;
  if (v67 == v68)
  {
    std::ostream::write();
    if (*(_BYTE *)(v64 + 40))
    {
      free(*(void **)(v64 + 24));
      *(_BYTE *)(v64 + 40) = 0;
    }
  }
  __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C41F230;
  __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C41F380;
  v69 = v121;
  v121 = 0;
  if (v69)
  {
    v70 = *(void **)(v69 + 80);
    if (v70)
    {
      *(_QWORD *)(v69 + 88) = v70;
      operator delete(v70);
    }
    if (*(_BYTE *)(v69 + 72))
      free(*(void **)(v69 + 56));
    if (*(_BYTE *)(v69 + 40))
      free(*(void **)(v69 + 24));
    MEMORY[0x20BD3583C](v69, 0x1030C408C1A3048);
  }
LABEL_130:
  if (SHIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&v82, v85.__pn_.__r_.__value_.__l.__data_, v85.__pn_.__r_.__value_.__l.__size_);
  else
    v82 = v85;
  v83 = v51 & ~(v51 >> 63);
  if (!v47)
    goto LABEL_137;
  p_shared_owners = (unint64_t *)&v47->__shared_owners_;
  do
    v74 = __ldaxr(p_shared_owners);
  while (__stlxr(v74 - 1, p_shared_owners));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
    if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_138;
  }
  else
  {
LABEL_137:
    if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_138:
      v75 = v80;
      *v80 = v82;
      goto LABEL_141;
    }
  }
  v75 = v80;
  sub_20AEC60F4(v80, v82.__pn_.__r_.__value_.__l.__data_, v82.__pn_.__r_.__value_.__l.__size_);
LABEL_141:
  v75[1].__pn_.__r_.__value_.__r.__words[0] = v83;
  v76 = &v75[1].__pn_.__r_.__value_.__s.__data_[8];
  if (SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(v76, v84.__pn_.__r_.__value_.__l.__data_, v84.__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)v76 = *(_OWORD *)&v84.__pn_.__r_.__value_.__l.__data_;
    v75[2].__pn_.__r_.__value_.__r.__words[0] = v84.__pn_.__r_.__value_.__r.__words[2];
  }
  if (SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__pn_.__r_.__value_.__l.__data_);
  if (v117)
  {
    v77 = (void **)v115;
    if (v115)
    {
      v78 = v116;
      v79 = v115;
      if (v116 != v115)
      {
        do
        {
          if (*((char *)v78 - 1) < 0)
            operator delete(*(v78 - 3));
          v78 -= 3;
        }
        while (v78 != v77);
        v79 = v115;
      }
      v116 = v77;
      operator delete(v79);
    }
  }
  if (v114 && v113 < 0)
    operator delete(v112);
  if (v111 && v110 < 0)
    operator delete(v109);
  if (v108)
  {
    if (v107 < 0)
      operator delete(v106);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_166:
      if ((SHIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_167;
      goto LABEL_173;
    }
  }
  else if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_166;
  }
  operator delete(v84.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_167:
    if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_168;
    goto LABEL_174;
  }
LABEL_173:
  operator delete(v85.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_168:
    if ((SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_169;
    goto LABEL_175;
  }
LABEL_174:
  operator delete(v86.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_169:
    if ((v89 & 0x80000000) == 0)
      return;
LABEL_176:
    operator delete(v88[0]);
    return;
  }
LABEL_175:
  operator delete(v87.__pn_.__r_.__value_.__l.__data_);
  if (v89 < 0)
    goto LABEL_176;
}

void sub_20B206460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  uint64_t v63;

  if (*(char *)(v63 + 23) < 0)
    operator delete(*a9);
  if (a16 < 0)
    operator delete(__p);
  sub_20B1F1888((uint64_t)&a63);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((a30 & 0x80000000) == 0)
      goto LABEL_10;
  }
  else if ((a30 & 0x80000000) == 0)
  {
LABEL_10:
    if (a36 < 0)
    {
      operator delete(a31);
      if ((a42 & 0x80000000) == 0)
      {
LABEL_12:
        if ((a48 & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_16;
      }
    }
    else if ((a42 & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(a37);
    if ((a48 & 0x80000000) == 0)
LABEL_13:
      _Unwind_Resume(a1);
LABEL_16:
    operator delete(a43);
    _Unwind_Resume(a1);
  }
  operator delete(a25);
  goto LABEL_10;
}

uint64_t sub_20B206678(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void sub_20B2066D0(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  const void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  BOOL v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _BOOL4 v23;
  char v24;
  uint64_t v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *exception;
  uint64_t v33;
  std::__fs::filesystem::path __p;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  void *v39[2];
  uint64_t v40;
  uint64_t v41;
  void *v42[2];
  uint64_t v43;
  char v44;
  char v45;
  unsigned __int8 v46;
  std::__fs::filesystem::path v47;
  uint64_t v48;
  std::__fs::filesystem::path v49;
  uint64_t v50[2];
  std::__shared_weak_count *v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  std::__shared_weak_count *v64;

  v10 = (const void *)a3[3];
  v11 = (std::__shared_weak_count *)a3[4];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if (v10)
  {
    v14 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40B990, 0) != 0;
    if (!v11)
      goto LABEL_11;
  }
  else
  {
    v14 = 0;
    if (!v11)
      goto LABEL_11;
  }
  v15 = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_11:
    if (v14)
      goto LABEL_12;
LABEL_19:
    v17 = 0;
    v63 = 0;
    v64 = 0;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v14)
    goto LABEL_19;
LABEL_12:
  v18 = a3[3];
  v17 = (std::__shared_weak_count *)a3[4];
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v63 = v18;
  v64 = v17;
  if (!v18)
  {
LABEL_20:
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/FileIOPrivate.cpp", 833, (uint64_t)"mesh_data_ptr", 13, (uint64_t)"ExportMeshData requires data to be MeshData", 43, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v18 = 0;
    v21 = MEMORY[8];
    if (*(_DWORD *)(MEMORY[8] + 104) > 1u)
      goto LABEL_23;
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v18 + 8);
  if (*(_DWORD *)(v21 + 104) > 1u)
    goto LABEL_23;
LABEL_22:
  if (*(_DWORD *)(v21 + 64) <= 1u)
  {
    if (*(_QWORD *)(v21 + 144) == *(_QWORD *)(v21 + 152)
      && *(_QWORD *)(v21 + 176) == *(_QWORD *)(v21 + 184)
      && *(_QWORD *)(v21 + 208) == *(_QWORD *)(v21 + 216)
      && *(_QWORD *)(v21 + 240) == *(_QWORD *)(v21 + 248)
      && *(_QWORD *)(v21 + 280) == *(_QWORD *)(v21 + 288)
      && *(_QWORD *)(v21 + 320) == *(_QWORD *)(v21 + 328)
      && (v22 = *(_BYTE *)(v21 + 380)) == 0)
    {
      v23 = *(_BYTE *)(v21 + 408) == 0;
      if (a4 == 64)
        goto LABEL_37;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      if (a4 == 64)
        goto LABEL_37;
    }
    goto LABEL_31;
  }
LABEL_23:
  v22 = 1;
  v23 = 0;
  if (a4 == 64)
  {
LABEL_37:
    v24 = v22 ^ 1;
    if (a4 != 64)
      v24 = 1;
    if ((v24 & 1) == 0)
    {
      exception = __cxa_allocate_exception(0x88uLL);
      sub_20AEC0D64(&v47, ".obj");
      sub_20AEC0D64(v50, "mesh is required to have per-vertex colors and normals");
      sub_20B1E2B58((uint64_t *)&v47, v50, (uint64_t)&v35);
      v52 = v35;
      LOBYTE(v53) = 0;
      v62 = 0;
      if (v45)
      {
        v55 = 0;
        if (v38)
        {
          v53 = v36;
          v54 = v37;
          v37 = 0;
          v36 = 0uLL;
          v55 = 1;
        }
        LOBYTE(v56) = 0;
        v61 = 0;
        if (v44)
        {
          v57 = v40;
          v56 = *(_OWORD *)v39;
          v39[0] = 0;
          v39[1] = 0;
          v58 = v41;
          v59 = *(_OWORD *)v42;
          v60 = v43;
          v40 = 0;
          v42[0] = 0;
          v42[1] = 0;
          v43 = 0;
          v61 = 1;
        }
        v62 = 1;
      }
      sub_20B207518((uint64_t)exception, &v52);
      __cxa_throw(exception, (struct type_info *)&unk_24C4116F8, (void (*)(void *))sub_20B200A30);
    }
    sub_20B20577C(&v47, a2, a3, (uint64_t)".obj", 4, a4, a5);
    sub_20B422114(&v49, 0x30u, a5, v50);
    if (SHIBYTE(v49.__pn_.__r_.__value_.__r.__words[2]) < 0)
      sub_20AEC60F4(&__p, v49.__pn_.__r_.__value_.__l.__data_, v49.__pn_.__r_.__value_.__l.__size_);
    else
      __p = v49;
    sub_20B41B7A4((char *)&__p, *(uint64_t **)(v18 + 8), a5, (uint64_t)&v35);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if (!v46)
    {
      v33 = sub_20B0B52D8((uint64_t)&v35);
      sub_20B0BFB50(v33);
    }
    if (SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20AEC60F4((_BYTE *)a1, v47.__pn_.__r_.__value_.__l.__data_, v47.__pn_.__r_.__value_.__l.__size_);
      v26 = v46;
      *(_QWORD *)(a1 + 24) = v48;
      *(_BYTE *)(a1 + 32) = 1;
      if (!v26 && v45)
      {
        if (v44)
        {
          if (SHIBYTE(v43) < 0)
            operator delete(v42[0]);
          if (SHIBYTE(v40) < 0)
            operator delete(v39[0]);
        }
        if (v38 && SHIBYTE(v37) < 0)
          operator delete((void *)v36);
      }
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)&v47.__pn_.__r_.__value_.__l.__data_;
      v25 = v48;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)&v47.__pn_.__r_.__value_.__l + 2);
      *(_QWORD *)(a1 + 24) = v25;
      *(_BYTE *)(a1 + 32) = 1;
    }
    v27 = v51;
    if (!v51)
      goto LABEL_53;
    v28 = (unint64_t *)&v51->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if ((SHIBYTE(v49.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_54:
        if ((SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_55;
        goto LABEL_59;
      }
    }
    else
    {
LABEL_53:
      if ((SHIBYTE(v49.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_54;
    }
    operator delete(v49.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_55:
      v17 = v64;
      if (!v64)
        return;
      goto LABEL_60;
    }
LABEL_59:
    operator delete(v47.__pn_.__r_.__value_.__l.__data_);
    v17 = v64;
    if (!v64)
      return;
    goto LABEL_60;
  }
LABEL_31:
  if (v23)
    goto LABEL_37;
  sub_20B204ED0(a2, a3, a4, a5, 0, 0);
  if (!v17)
    return;
LABEL_60:
  v30 = (unint64_t *)&v17->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_20B206C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;
  int v48;
  uint64_t v49;

  sub_20AECCE40(v49 - 208);
  sub_20AECCE40((uint64_t)&a16);
  if (a47 < 0)
    operator delete(__p);
  if (a37 < 0)
  {
    operator delete(a32);
    if ((v48 & 1) == 0)
    {
LABEL_8:
      sub_20AEC147C(v49 - 80);
      _Unwind_Resume(a1);
    }
  }
  else if (!v48)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v47);
  sub_20AEC147C(v49 - 80);
  _Unwind_Resume(a1);
}

uint64_t sub_20B206D10(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v5 = MEMORY[0x24BEDB858];
  v6 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v5 + 64;
  v7 = a1 + 16;
  v8 = a1 + 24;
  v9 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + *(_QWORD *)(v10 - 24)) = v11;
  *(_QWORD *)(a1 + 8) = 0;
  v12 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v12, (void *)(a1 + 24));
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v9[4];
  v14 = v9[5];
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v7 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = v9[1];
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + *(_QWORD *)(v15 - 24)) = v9[6];
  *(_QWORD *)a1 = v5 + 24;
  *(_QWORD *)(a1 + 128) = v6;
  *(_QWORD *)(a1 + 16) = v5 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  v16 = *a2;
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 88) = v16;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = a3;
  sub_20AEC8D2C(v8);
  return a1;
}

void sub_20B206E40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 111) < 0)
    operator delete(*v3);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v1);
  _Unwind_Resume(a1);
}

void sub_20B206E94(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C411748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B206EA4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C411748;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B206ED4(uint64_t a1)
{
  void **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[16];
  std::__shared_weak_count *v10;
  char v11;

  v2 = (void **)(a1 + 24);
  v9[0] = 0;
  v11 = 0;
  sub_20B1FBB6C(a1 + 24, (uint64_t)v9);
  if (v11)
  {
    v3 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  v6 = MEMORY[0x24BEDB7F0];
  v7 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)(a1 + 48) = *MEMORY[0x24BEDB7F0];
  v8 = *(_QWORD *)(v6 + 72);
  *(_QWORD *)(a1 + 48 + *(_QWORD *)(v7 - 24)) = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(a1 + 72) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 64) = v8;
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](a1 + 176);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v2);
}

uint64_t sub_20B206FF0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  std::locale v31;
  std::locale v32;

  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB898] + 16;
  v4 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24)) = v6;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v8 = (std::ios_base *)(a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  std::ios_base::move(v7, v8);
  v7[1].__vftable = v8[1].__vftable;
  v8[1].__vftable = 0;
  v7[1].__fmtflags_ = v8[1].__fmtflags_;
  v9 = v4[4];
  v10 = v4[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 16 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v4[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v4[6];
  v12 = MEMORY[0x24BEDB858];
  *(_QWORD *)a1 = MEMORY[0x24BEDB858] + 24;
  *(_QWORD *)(a1 + 128) = v12 + 104;
  *(_QWORD *)(a1 + 16) = v12 + 64;
  std::streambuf::basic_streambuf();
  v13 = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 88) = 0;
  v14 = (_OWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v15 = (__int128 *)(a2 + 88);
  if (*(char *)(a2 + 111) >= 0)
    v16 = a2 + 88;
  else
    v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a2 + 40);
  if (v17)
  {
    v18 = v17 - v16;
    v19 = *(_QWORD *)(a2 + 48) - v16;
    v20 = *(_QWORD *)(a2 + 56) - v16;
    v21 = *(_QWORD *)(a2 + 64);
    if (v21)
    {
LABEL_6:
      v22 = v21 - v16;
      v23 = *(_QWORD *)(a2 + 72) - v16;
      v24 = *(_QWORD *)(a2 + 80) - v16;
      goto LABEL_9;
    }
  }
  else
  {
    v20 = -1;
    v19 = -1;
    v18 = -1;
    v21 = *(_QWORD *)(a2 + 64);
    if (v21)
      goto LABEL_6;
  }
  v22 = -1;
  v23 = -1;
  v24 = -1;
LABEL_9:
  v25 = *(_QWORD *)(a2 + 112);
  v26 = v25 - v16;
  if (!v25)
    v26 = -1;
  v27 = *v15;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *v14 = v27;
  *(_BYTE *)(a2 + 111) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  v28 = a1 + 88;
  if (*(char *)(a1 + 111) < 0)
    v28 = *(_QWORD *)v14;
  if (v18 != -1)
  {
    *(_QWORD *)(a1 + 40) = v28 + v18;
    *(_QWORD *)(a1 + 48) = v28 + v19;
    *(_QWORD *)(a1 + 56) = v28 + v20;
  }
  if (v22 != -1)
  {
    *(_QWORD *)(a1 + 80) = v28 + v24;
    *(_QWORD *)(a1 + 64) = v28 + v22;
    *(_QWORD *)(a1 + 72) = v28 + v22 + v23;
  }
  v29 = v28 + v26;
  if (v26 == -1)
    v29 = 0;
  *(_QWORD *)(a1 + 112) = v29;
  if (*(char *)(a2 + 111) < 0)
    v15 = *(__int128 **)(a2 + 88);
  *(_QWORD *)(a2 + 40) = v15;
  *(_QWORD *)(a2 + 48) = v15;
  *(_QWORD *)(a2 + 56) = v15;
  *(_QWORD *)(a2 + 64) = v15;
  *(_QWORD *)(a2 + 72) = v15;
  *(_QWORD *)(a2 + 80) = v15;
  *(_QWORD *)(a2 + 112) = v15;
  std::locale::locale(&v31, (const std::locale *)(a2 + 32));
  (*(void (**)(uint64_t, std::locale *))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24, &v31);
  std::locale::locale(&v32, (const std::locale *)(a1 + 32));
  std::locale::operator=((std::locale *)(a1 + 32), &v31);
  std::locale::~locale(&v32);
  std::locale::~locale(&v31);
  *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40) = a1 + 24;
  return a1;
}

void sub_20B207278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  uint64_t v10;
  void **v11;

  std::locale::~locale(&a9);
  if (*(char *)(v9 + 111) < 0)
    operator delete(*v11);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B2072D4(_QWORD *result)
{
  uint64_t v1;
  void *v2;

  *(result - 2) = &off_24C41F230;
  v1 = result[1];
  *result = &unk_24C41F380;
  result[1] = 0;
  if (v1)
  {
    v2 = *(void **)(v1 + 80);
    if (v2)
    {
      *(_QWORD *)(v1 + 88) = v2;
      operator delete(v2);
    }
    if (*(_BYTE *)(v1 + 72))
      free(*(void **)(v1 + 56));
    if (*(_BYTE *)(v1 + 40))
      free(*(void **)(v1 + 24));
    return (_QWORD *)MEMORY[0x20BD3583C](v1, 0x1030C408C1A3048);
  }
  return result;
}

void sub_20B207350(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  void **v6;
  int v7;
  void *__p[2];
  unsigned __int8 v9;
  int v10;

  if (!*(_BYTE *)(a1 + 40))
  {
    *(_BYTE *)(a1 + 40) = 1;
    v2 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(v2 + 24);
    if (!v3)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v3 = *(_QWORD *)(v2 + 24);
    }
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v3 + 48))(__p);
    v4 = v9;
    v5 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v4 = (unint64_t)__p[1];
    if (v4 == 8)
    {
      v6 = (void **)__p[0];
      if ((v9 & 0x80u) == 0)
        v6 = __p;
      if (*(void **)"cv3d.viz" == *v6)
      {
        switch(v10)
        {
          case 0:
          case 14:
            sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/FileIOPrivate.cpp", 651, (uint64_t)"", 0, (uint64_t)"invalid data type", 17, (void (*)(void **))sub_20B532360);
            abort();
          case 1:
            *(_BYTE *)(a1 + 44) = 1;
            v7 = 5;
            goto LABEL_19;
          case 2:
          case 3:
          case 4:
          case 12:
          case 13:
            *(_BYTE *)(a1 + 42) = 1;
            break;
          case 5:
          case 8:
          case 10:
            *(_BYTE *)(a1 + 41) = 1;
            *(_DWORD *)(a1 + 52) = 2;
            break;
          case 6:
            *(_DWORD *)(a1 + 56) = 3;
            break;
          case 7:
            *(_BYTE *)(a1 + 44) = 1;
            v7 = 6;
LABEL_19:
            *(_DWORD *)(a1 + 48) = v7;
            break;
          case 11:
            *(_BYTE *)(a1 + 41) = 1;
            *(_DWORD *)(a1 + 52) = 4;
            break;
          default:
            break;
        }
      }
    }
    if (v5 < 0)
      operator delete(__p[0]);
  }
}

void sub_20B2074FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B207518(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  std::string *p_p;
  std::string::size_type size;
  int v7;
  size_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  std::string::size_type v18;
  std::string v20;
  _BYTE v21[24];
  int v22;
  void *__dst[2];
  unint64_t v24;
  std::string __p;
  void **v26;
  void **v27;
  std::string *v28;

  v22 = 0;
  v4 = operator new();
  *(_QWORD *)(v4 + 272) = 0;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)v4 = 0u;
  sub_20AEC0BD8(v4);
  v28 = (std::string *)v4;
  sub_20B5287D4((uint64_t)a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  sub_20AEC01D0((_QWORD *)(v4 + 16), (uint64_t)p_p, size);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v7 = *(_DWORD *)(v4 + 120);
    if ((v7 & 0x10) == 0)
      goto LABEL_9;
LABEL_12:
    v10 = *(_QWORD *)(v4 + 112);
    v11 = *(_QWORD *)(v4 + 72);
    if (v10 < v11)
    {
      *(_QWORD *)(v4 + 112) = v11;
      v10 = v11;
    }
    v12 = *(const void **)(v4 + 64);
    v8 = v10 - (_QWORD)v12;
    if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_36;
    goto LABEL_15;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v7 = *(_DWORD *)(v4 + 120);
  if ((v7 & 0x10) != 0)
    goto LABEL_12;
LABEL_9:
  if ((v7 & 8) == 0)
  {
    v8 = 0;
    HIBYTE(v24) = 0;
    v9 = __dst;
    goto LABEL_22;
  }
  v12 = *(const void **)(v4 + 40);
  v8 = *(_QWORD *)(v4 + 56) - (_QWORD)v12;
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_36:
    sub_20AEC0138();
LABEL_15:
  if (v8 >= 0x17)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    v9 = (void **)operator new(v13 + 1);
    __dst[1] = (void *)v8;
    v24 = v14 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_21;
  }
  HIBYTE(v24) = v8;
  v9 = __dst;
  if (v8)
LABEL_21:
    memmove(v9, v12, v8);
LABEL_22:
  *((_BYTE *)v9 + v8) = 0;
  v15 = v28;
  if (v28)
  {
    v16 = MEMORY[0x24BEDB7F0];
    v17 = *MEMORY[0x24BEDB7F0];
    v28->__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(v16 + 72);
    *(std::string::size_type *)((char *)v15->__r_.__value_.__r.__words + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(v16 + 64);
    v15[1].__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB848] + 16;
    v15->__r_.__value_.__r.__words[2] = v18;
    if (v15[4].__r_.__value_.__s.__data_[15] < 0)
      operator delete((void *)v15[3].__r_.__value_.__r.__words[2]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](&v15[5].__r_.__value_.__r.__words[1]);
    MEMORY[0x20BD3583C](v15, 0x10B2C40EED050F3);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)__dst;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v21;
  v26 = __dst;
  v27 = __dst;
  if (v22 == -1)
    sub_20AECFAB8();
  v28 = &__p;
  ((void (*)(std::string **, _BYTE *))off_24C411798[v22])(&v28, v21);
  if (SHIBYTE(v24) < 0)
    operator delete(__dst[0]);
  if (v22 == -1)
    sub_20AECFAB8();
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
  ((void (*)(std::string *__return_ptr, std::string *, _BYTE *))off_24C4117C8[v22])(&v20, &__p, v21);
  if (v22 != -1)
    ((void (*)(std::string *, _BYTE *))off_24C4117B0[v22])(&__p, v21);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_24C411720;
  *(_OWORD *)(a1 + 16) = *a2;
  sub_20AECEBD0((_BYTE *)(a1 + 32), a2 + 1);
  return a1;
}

void sub_20B207834(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_20B207848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B207864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  sub_20B52CE84((uint64_t *)(v27 - 56));
  sub_20AECFA60((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20B207910(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24C41E750;
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 24))();
  return a1;
}

void sub_20B207964(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24C41E750;
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 24))();
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B2079D0(uint64_t a1, unsigned __int8 *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_20B506370(a1);
    v7 = *v6;
    *v6 = 4;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20B4181DC(&v9, v7);
  }
}

void sub_20B207A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B207A88(uint64_t a1, char *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_20B506370(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20B4181DC(&v9, v7);
  }
}

void sub_20B207B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B207B40(uint64_t a1, __int16 *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_20B506370(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20B4181DC(&v9, v7);
  }
}

void sub_20B207BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B207BF8(uint64_t a1, int *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_20B506370(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20B4181DC(&v9, v7);
  }
}

void sub_20B207C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B207CB0(uint64_t a1, void ***a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_20B506370(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20B4181DC(&v9, v7);
  }
}

void sub_20B207D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B207D68(uint64_t a1, void ***a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_20B506370(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20B4181DC(&v9, v7);
  }
}

void sub_20B207E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B207E20(uint64_t a1, unsigned __int8 *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_20B506370(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20B4181DC(&v9, v7);
  }
}

void sub_20B207EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B207ED8(uint64_t a1, char *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_20B506370(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20B4181DC(&v9, v7);
  }
}

void sub_20B207F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B207F90(uint64_t a1, unsigned __int16 *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_20B506370(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20B4181DC(&v9, v7);
  }
}

void sub_20B208030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B20804C(uint64_t a1, void ***a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_20B506370(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20B4181DC(&v9, v7);
  }
}

void sub_20B2080EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B208104(uint64_t a1, void ***a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_20B506370(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20B4181DC(&v9, v7);
  }
}

void sub_20B2081A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20B2081BC(uint64_t a1, float *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    sub_20B508790(a1, a2);
  }
}

void sub_20B208200(uint64_t a1, double *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    sub_20B508988(a1, a2);
  }
}

void sub_20B208248(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_20B50A4F0(a1, v3);
}

void sub_20B20826C(uint64_t a1, size_t a2, size_t a3)
{
  size_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_20B508C8C(a1, v3);
}

void sub_20B208290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_20B508EFC(a1, (uint64_t)v3);
}

void sub_20B2082B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_20B50916C(a1, (uint64_t)v3);
}

void sub_20B2082D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_20B5093DC(a1, (uint64_t)v3);
}

void sub_20B2082FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_20B50964C(a1, (uint64_t)v3);
}

void sub_20B208320(uint64_t a1, size_t a2, size_t a3)
{
  size_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_20B506898(a1, v3);
}

void sub_20B208344(uint64_t a1, size_t a2, size_t a3)
{
  size_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_20B508DC4(a1, v3);
}

void sub_20B208368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_20B509034(a1, (uint64_t)v3);
}

void sub_20B20838C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_20B5092A4(a1, (uint64_t)v3);
}

void sub_20B2083B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_20B509514(a1, (uint64_t)v3);
}

void sub_20B2083D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_20B509784(a1, (uint64_t)v3);
}

void sub_20B2083F8(uint64_t a1, float *a2, float *a3)
{
  float *v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_20B509D64(a1, v3);
}

void sub_20B20841C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_20B50A184(a1, v3);
}

void sub_20B208440(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_20B50A640(a1, v3);
}

void sub_20B208468(uint64_t a1, size_t *a2)
{
  size_t v2;
  size_t v3[2];

  v2 = a2[1];
  v3[0] = *a2;
  v3[1] = v2;
  sub_20B506898(a1, v3);
}

void sub_20B208498(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  int v6;
  int v7;
  char *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *exception;
  uint64_t v15;

  sub_20B50AC94(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v15 = 0;
  sub_20B4552C4(v5, &v15);
  if (HIDWORD(v15))
  {
LABEL_14:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "protocol_info";
  *(_QWORD *)(a1 + 96) = 13;
  if (v6)
  {
    sub_20B50AC94(a1);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "version";
    *(_QWORD *)(a1 + 96) = 7;
    if (v7)
      goto LABEL_6;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    sub_20B50AC94(a1);
    v13 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "version";
    *(_QWORD *)(a1 + 96) = 7;
    if (v13)
      goto LABEL_6;
  }
  *(_BYTE *)(a1 + 104) = 1;
LABEL_6:
  v8 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v15 = 0;
  sub_20B4552C4(v8, &v15);
  if (HIDWORD(v15))
    goto LABEL_14;
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "current";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v9)
    *(_BYTE *)(a1 + 104) = 1;
  v15 = a2 + 4;
  sub_20B1C6C04((uint64_t *)a1, &v15);
  v10 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "min";
  *(_QWORD *)(a1 + 96) = 3;
  if (!v10)
    *(_BYTE *)(a1 + 104) = 1;
  v15 = a2 + 16;
  sub_20B1C6C04((uint64_t *)a1, &v15);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a1 + 48) = v11 - 8;
  *(_QWORD *)(a1 + 72) = v12 - 8;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v11 - 16);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v12 - 16);
  *(_QWORD *)(a1 + 48) = v11 - 16;
  *(_QWORD *)(a1 + 72) = v12 - 16;
}

size_t sub_20B208668(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24C4117B0[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_20B208754(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C4117B0[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20AEC7620((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20B20890C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B208950(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20B208BE0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B208BF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_20B208C00(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  void *result;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20AEC0BD8(v4);
  v19 = v4;
  v5 = sub_20AEC01D0((_QWORD *)(v4 + 16), (uint64_t)"{", 1);
  sub_20AEC01D0(v5, (uint64_t)"{current=", 9);
  sub_20B511704(v5, a2);
  sub_20AEC01D0(v5, (uint64_t)", min=", 6);
  sub_20B511704(v5, (uint64_t *)((char *)a2 + 12));
  sub_20AEC01D0(v5, (uint64_t)"}", 1);
  result = sub_20AEC01D0(v5, (uint64_t)"}", 1);
  v7 = *(_DWORD *)(v4 + 120);
  if ((v7 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v4 + 112);
    v10 = *(_QWORD *)(v4 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v4 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v4 + 64);
    v12 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_20;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      a1[23] = 0;
      *a1 = 0;
      v8 = v4;
      if (!v4)
        return result;
LABEL_11:
      v13 = MEMORY[0x24BEDB7F0];
      v14 = *MEMORY[0x24BEDB7F0];
      *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
      v15 = *(_QWORD *)(v13 + 72);
      *(_QWORD *)(v8 + *(_QWORD *)(v14 - 24)) = *(_QWORD *)(v13 + 64);
      *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
      *(_QWORD *)(v8 + 16) = v15;
      if (*(char *)(v8 + 111) < 0)
        operator delete(*(void **)(v8 + 88));
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x20BD35758](v8 + 128);
      JUMPOUT(0x20BD3583CLL);
    }
    v11 = *(const void **)(v4 + 40);
    v12 = *(_QWORD *)(v4 + 56) - (_QWORD)v11;
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
LABEL_20:
      sub_20AEC0138();
  }
  if (v12 >= 0x17)
  {
    v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v16 = v12 | 7;
    v17 = v16 + 1;
    v18 = operator new(v16 + 1);
    *((_QWORD *)a1 + 1) = v12;
    *((_QWORD *)a1 + 2) = v17 | 0x8000000000000000;
    *(_QWORD *)a1 = v18;
    a1 = v18;
  }
  else
  {
    a1[23] = v12;
    if (!v12)
    {
      *a1 = 0;
      v8 = v19;
      if (v19)
        goto LABEL_11;
      return result;
    }
  }
  result = memmove(a1, v11, v12);
  a1[v12] = 0;
  v8 = v19;
  if (v19)
    goto LABEL_11;
  return result;
}

void sub_20B208E68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B208E8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20B208EA0(_DWORD ***a1)
{
  return sub_20B209358(**a1, (char *)(*a1)[1]);
}

void sub_20B208EAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C4117B0[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20AEC7620((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20B209064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B2090A8(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20B209338(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B209350(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_DWORD *sub_20B209358(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C4117B0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20B209448(_DWORD ***a1)
{
  return sub_20AFF4744(**a1, (char *)(*a1)[1]);
}

void sub_20B209454(uint64_t a1, uint64_t a2)
{
  sub_20B209464((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20B209464(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C4117B0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20B209618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20B20965C(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20B209754((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20B20974C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20B209754(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20B209950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t sub_20B209964(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24C4117B0[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_20B209A50(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C4117B0[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20AEC7620((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20B209C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B209C4C(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20B209EDC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B209EF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

size_t sub_20B209EFC(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24C4117B0[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_20B209FE8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C4117B0[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20AEC7620((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20B20A1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B20A1E4(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20B20A474(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B20A48C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20B20A494(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  *a1 = &off_24C41F230;
  v1 = a1[3];
  a1[2] = &unk_24C41F380;
  a1[3] = 0;
  if (v1)
  {
    v2 = *(void **)(v1 + 80);
    if (v2)
    {
      *(_QWORD *)(v1 + 88) = v2;
      operator delete(v2);
    }
    if (*(_BYTE *)(v1 + 72))
      free(*(void **)(v1 + 56));
    if (*(_BYTE *)(v1 + 40))
      free(*(void **)(v1 + 24));
    MEMORY[0x20BD3583C](v1, 0x1030C408C1A3048);
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B20A528(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);
}

void sub_20B20A534(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v1 + 48), *(_QWORD *)(v1 + 16) - v2 - 9);
  v3 = *(_QWORD *)(v1 + 48);
  if (v3)
    memmove((void *)(*(_QWORD *)(v1 + 24) + v2), *(const void **)(v1 + 56), v3);
  *(_QWORD *)(v1 + 48) = 0;
  v4 = *(_QWORD *)(v1 + 80);
  v5 = *(_QWORD *)(v1 + 88) - 8;
  *(_QWORD *)(v1 + 88) = v5;
  if (v4 == v5)
  {
    std::ostream::write();
    if (*(_BYTE *)(v1 + 40))
    {
      free(*(void **)(v1 + 24));
      *(_BYTE *)(v1 + 40) = 0;
    }
  }
}

uint64_t **sub_20B20A5C8(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t *v4;
  _BYTE v5[3];

  v2 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v2 + 40))
  {
    v4 = (uint64_t *)(v2 + 16);
    return sub_20B51F8F4((uint64_t)v5, &v4, a2);
  }
  else
  {
    if (*a2)
      v5[1] = -61;
    else
      v5[2] = -62;
    return (uint64_t **)std::ostream::write();
  }
}

char *sub_20B20A654(uint64_t a1, char *a2)
{
  uint64_t v2;
  int v4;
  uint64_t *v5;
  char v6;
  char v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v2 + 40))
  {
    v5 = (uint64_t *)(v2 + 16);
    return sub_20B51DC2C(&v5, *a2);
  }
  else
  {
    v4 = *a2;
    if (v4 > -33)
    {
      v6 = *a2;
    }
    else
    {
      v7 = -48;
      v8 = v4;
    }
    return (char *)std::ostream::write();
  }
}

_BYTE *sub_20B20A6E0(uint64_t a1, __int16 *a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (_BYTE *)sub_20B51E17C();
  v4 = (uint64_t *)(v2 + 16);
  return sub_20B51DEB8(&v4, *a2);
}

_BYTE *sub_20B20A72C(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (_BYTE *)sub_20B51E860();
  v4 = (uint64_t *)(v2 + 16);
  return sub_20B51E444(&v4, *a2);
}

_BYTE *sub_20B20A778(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (_BYTE *)sub_20B51F1FC();
  v4 = (uint64_t *)(v2 + 16);
  return sub_20B51ECC0(&v4, *a2);
}

_BYTE *sub_20B20A7C4(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (_BYTE *)sub_20B51F1FC();
  v4 = (uint64_t *)(v2 + 16);
  return sub_20B51ECC0(&v4, *a2);
}

char *sub_20B20A810(uint64_t a1, char *a2)
{
  uint64_t v2;
  int v4;
  uint64_t *v5;
  char v6;
  char v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v2 + 40))
  {
    v5 = (uint64_t *)(v2 + 16);
    return sub_20B51DD74(&v5, *a2);
  }
  else
  {
    v4 = *a2;
    if (v4 < 0)
    {
      v6 = -52;
      v7 = v4;
    }
    else
    {
      v8 = *a2;
    }
    return (char *)std::ostream::write();
  }
}

char *sub_20B20A898(uint64_t a1, char *a2)
{
  uint64_t v2;
  int v4;
  uint64_t *v5;
  char v6;
  char v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v2 + 40))
  {
    v5 = (uint64_t *)(v2 + 16);
    return sub_20B51DC2C(&v5, *a2);
  }
  else
  {
    v4 = *a2;
    if (v4 > -33)
    {
      v6 = *a2;
    }
    else
    {
      v7 = -48;
      v8 = v4;
    }
    return (char *)std::ostream::write();
  }
}

_BYTE *sub_20B20A924(uint64_t a1, _WORD *a2)
{
  return sub_20B5180B8(*(_QWORD *)(a1 + 24), a2);
}

_BYTE *sub_20B20A92C(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t *v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (_BYTE *)sub_20B51EBD0((uint64_t)&v5, v2 + 8);
  v4 = (uint64_t *)(v2 + 16);
  return sub_20B51E95C(&v4, *a2);
}

_BYTE *sub_20B20A984(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (_BYTE *)sub_20B51F644();
  v4 = (uint64_t *)(v2 + 16);
  return sub_20B51F33C(&v4, *a2);
}

_BYTE *sub_20B20A9D0(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (_BYTE *)sub_20B51F644();
  v4 = (uint64_t *)(v2 + 16);
  return sub_20B51F33C(&v4, *a2);
}

uint64_t **sub_20B20AA1C(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t *v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (uint64_t **)std::ostream::write();
  v4 = (uint64_t *)(v2 + 16);
  return sub_20B51F73C((uint64_t)&v5, &v4, a2);
}

uint64_t **sub_20B20AA88(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  char v4;
  uint64_t *v5[3];

  v5[2] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (uint64_t **)std::ostream::write();
  v5[0] = (uint64_t *)(v2 + 16);
  return sub_20B51F818((uint64_t)&v4, v5, a2);
}

uint64_t **sub_20B20AB2C(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t *v4;
  char v5;
  char v6;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (uint64_t **)sub_20B51FE64((uint64_t)&v6, v2 + 8, (uint64_t)a2);
  v4 = (uint64_t *)(v2 + 16);
  return sub_20B51FA2C((uint64_t)&v5, &v4, a2);
}

uint64_t sub_20B20AB80(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _BYTE v7[3];

  v4 = a2;
  v5 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v6 = (uint64_t *)(v5 + 16);
    if (a2)
    {
      do
      {
        result = (uint64_t)sub_20B51F8F4((uint64_t)v7, &v6, a3++);
        --v4;
      }
      while (v4);
    }
  }
  else if (a2)
  {
    do
    {
      while (!*a3)
      {
        v7[2] = -62;
        result = std::ostream::write();
        ++a3;
        if (!--v4)
          return result;
      }
      v7[1] = -61;
      result = std::ostream::write();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B20AC48(uint64_t result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t *v8;
  char v9;
  char v10;
  char v11;

  v4 = a2;
  v5 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v8 = (uint64_t *)(v5 + 16);
    if (a2)
    {
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20B51DC2C(&v8, v6);
        --v4;
      }
      while (v4);
    }
  }
  else if (a2)
  {
    do
    {
      while (1)
      {
        v7 = *a3;
        if (v7 <= -33)
          break;
        v9 = *a3;
        result = std::ostream::write();
        ++a3;
        if (!--v4)
          return result;
      }
      v10 = -48;
      v11 = v7;
      result = std::ostream::write();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B20AD04(uint64_t result, uint64_t a2, __int16 *a3)
{
  uint64_t v4;
  uint64_t v5;
  signed int v6;
  uint64_t v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v8 = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 2 * a2;
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20B51DEB8(&v8, v6);
        v5 -= 2;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v7 = 2 * a2;
    do
    {
      ++a3;
      result = sub_20B51E17C();
      v7 -= 2;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_20B20AD84(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v8 = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 4 * a2;
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20B51E444(&v8, v6);
        v5 -= 4;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v7 = 4 * a2;
    do
    {
      ++a3;
      result = sub_20B51E860();
      v7 -= 4;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_20B20AE04(uint64_t result, uint64_t a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v8 = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 8 * a2;
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20B51ECC0(&v8, v6);
        v5 -= 8;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v7 = 8 * a2;
    do
    {
      ++a3;
      result = sub_20B51F1FC();
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_20B20AE84(uint64_t result, uint64_t a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v8 = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 8 * a2;
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20B51ECC0(&v8, v6);
        v5 -= 8;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v7 = 8 * a2;
    do
    {
      ++a3;
      result = sub_20B51F1FC();
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_20B20AF04(uint64_t result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t *v8;
  char v9;
  char v10;
  char v11;

  v4 = a2;
  v5 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v8 = (uint64_t *)(v5 + 16);
    if (a2)
    {
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20B51DD74(&v8, v6);
        --v4;
      }
      while (v4);
    }
  }
  else if (a2)
  {
    do
    {
      while (1)
      {
        v7 = *a3;
        if ((v7 & 0x80000000) == 0)
          break;
        v9 = -52;
        v10 = v7;
        result = std::ostream::write();
        ++a3;
        if (!--v4)
          return result;
      }
      v11 = *a3;
      result = std::ostream::write();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B20AFBC(uint64_t result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t *v8;
  char v9;
  char v10;
  char v11;

  v4 = a2;
  v5 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v8 = (uint64_t *)(v5 + 16);
    if (a2)
    {
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20B51DC2C(&v8, v6);
        --v4;
      }
      while (v4);
    }
  }
  else if (a2)
  {
    do
    {
      while (1)
      {
        v7 = *a3;
        if (v7 <= -33)
          break;
        v9 = *a3;
        result = std::ostream::write();
        ++a3;
        if (!--v4)
          return result;
      }
      v10 = -48;
      v11 = v7;
      result = std::ostream::write();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B20B078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_20B518234(*(_QWORD *)(a1 + 24), v4);
}

uint64_t sub_20B20B0A0(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  char v10;

  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v9 = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 4 * a2;
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20B51E95C(&v9, v6);
        v5 -= 4;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v7 = v4 + 8;
    v8 = 4 * a2;
    do
    {
      ++a3;
      result = sub_20B51EBD0((uint64_t)&v10, v7);
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_20B20B124(uint64_t result, uint64_t a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v8 = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 8 * a2;
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20B51F33C(&v8, v6);
        v5 -= 8;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v7 = 8 * a2;
    do
    {
      ++a3;
      result = sub_20B51F644();
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_20B20B1A4(uint64_t result, uint64_t a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v8 = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 8 * a2;
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20B51F33C(&v8, v6);
        v5 -= 8;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v7 = 8 * a2;
    do
    {
      ++a3;
      result = sub_20B51F644();
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_20B20B224(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  _BYTE v9[2];
  unsigned int v10;

  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v8 = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 4 * a2;
      do
      {
        result = (uint64_t)sub_20B51F73C((uint64_t)v9, &v8, a3++);
        v5 -= 4;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v6 = 4 * a2;
    do
    {
      v7 = *a3++;
      v9[1] = -54;
      v10 = bswap32(v7);
      result = std::ostream::write();
      v6 -= 4;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20B20B2C0(uint64_t result, uint64_t a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t *v9[3];

  v9[2] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v9[0] = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 8 * a2;
      do
      {
        result = (uint64_t)sub_20B51F818((uint64_t)&v8, v9, a3++);
        v5 -= 8;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v6 = 8 * a2;
    do
    {
      v7 = *a3++;
      LOBYTE(v9[0]) = -53;
      *(uint64_t **)((char *)v9 + 1) = (uint64_t *)bswap64(v7);
      result = std::ostream::write();
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20B20B388(uint64_t result, uint64_t a2, const void **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char v9;
  char v10;

  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v8 = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 24 * a2;
      do
      {
        result = (uint64_t)sub_20B51FA2C((uint64_t)&v9, &v8, a3);
        a3 += 3;
        v5 -= 24;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v6 = v4 + 8;
    v7 = 24 * a2;
    do
    {
      result = sub_20B51FE64((uint64_t)&v10, v6, (uint64_t)a3);
      a3 += 3;
      v7 -= 24;
    }
    while (v7);
  }
  return result;
}

uint64_t **sub_20B20B420(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int v7[2];
  uint64_t v8;
  char v9;

  v2 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v6 = (uint64_t *)(v4 + 16);
    v7[0] = v2;
    v8 = v3;
    return sub_20B51D930((uint64_t)&v9, &v6, v7);
  }
  else
  {
    if (v2 > 0xFF)
    {
      if (HIWORD(v2))
      {
        LOBYTE(v7[0]) = -58;
        *(unsigned int *)((char *)v7 + 1) = bswap32(v2);
      }
      else
      {
        LOBYTE(v7[0]) = -59;
        *(_WORD *)((char *)v7 + 1) = bswap32(v2) >> 16;
      }
    }
    else
    {
      LOBYTE(v7[0]) = -60;
      BYTE1(v7[0]) = v2;
    }
    std::ostream::write();
    return (uint64_t **)std::ostream::write();
  }
}

uint64_t **sub_20B20B510(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int v7[2];
  uint64_t v8;
  char v9;

  v2 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v6 = (uint64_t *)(v4 + 16);
    v7[0] = v2;
    v8 = v3;
    return sub_20B51D930((uint64_t)&v9, &v6, v7);
  }
  else
  {
    if (v2 > 0xFF)
    {
      if (HIWORD(v2))
      {
        LOBYTE(v7[0]) = -58;
        *(unsigned int *)((char *)v7 + 1) = bswap32(v2);
      }
      else
      {
        LOBYTE(v7[0]) = -59;
        *(_WORD *)((char *)v7 + 1) = bswap32(v2) >> 16;
      }
    }
    else
    {
      LOBYTE(v7[0]) = -60;
      BYTE1(v7[0]) = v2;
    }
    std::ostream::write();
    return (uint64_t **)std::ostream::write();
  }
}

void sub_20B20B608(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  v1 = a1[1];
  *a1 = &unk_24C41F380;
  a1[1] = 0;
  *(a1 - 2) = &off_24C41F230;
  if (v1)
  {
    v2 = *(void **)(v1 + 80);
    if (v2)
    {
      *(_QWORD *)(v1 + 88) = v2;
      operator delete(v2);
    }
    if (*(_BYTE *)(v1 + 72))
      free(*(void **)(v1 + 56));
    if (*(_BYTE *)(v1 + 40))
      free(*(void **)(v1 + 24));
    MEMORY[0x20BD3583C](v1, 0x1030C408C1A3048);
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B20B69C(uint64_t a1, uint64_t a2)
{
  const void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;

  v4 = (const void **)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v26 = (uint64_t *)(v5 + 16);
    sub_20B51E95C(&v26, 2u);
    sub_20B51956C(*(_QWORD *)(a1 + 24));
    v6 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v6 + 40))
      goto LABEL_3;
LABEL_6:
    sub_20B51FE64((uint64_t)&v26, v6 + 8, (uint64_t)v4);
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_20B51EBD0((uint64_t)&v26, v5 + 8);
  sub_20B51956C(*(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v6 + 40))
    goto LABEL_6;
LABEL_3:
  v26 = (uint64_t *)(v6 + 16);
  sub_20B51FA2C((uint64_t)&v25, &v26, v4);
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
LABEL_4:
    v26 = (uint64_t *)(v7 + 16);
    sub_20B51E95C(&v26, *(_DWORD *)(a2 + 32));
    goto LABEL_8;
  }
LABEL_7:
  sub_20B51EBD0((uint64_t)&v26, v7 + 8);
LABEL_8:
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v8 + 48), *(_QWORD *)(v8 + 16) - v9 - 9);
  v10 = *(_QWORD *)(v8 + 48);
  if (v10)
    memmove((void *)(*(_QWORD *)(v8 + 24) + v9), *(const void **)(v8 + 56), v10);
  *(_QWORD *)(v8 + 48) = 0;
  v11 = *(_QWORD *)(v8 + 80);
  v12 = *(_QWORD *)(v8 + 88) - 8;
  *(_QWORD *)(v8 + 88) = v12;
  if (v11 == v12)
  {
    std::ostream::write();
    if (*(_BYTE *)(v8 + 40))
    {
      free(*(void **)(v8 + 24));
      *(_BYTE *)(v8 + 40) = 0;
    }
  }
  if (*(_DWORD *)(a2 + 56) > 1u)
    sub_20AECFAB8();
  v14 = *(_QWORD *)(a2 + 40);
  v13 = *(std::__shared_weak_count **)(a2 + 48);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  v19 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v19 + 40))
  {
    v26 = (uint64_t *)(v19 + 16);
    sub_20B51E95C(&v26, v18);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v26, v19 + 8);
  }
  sub_20B51956C(*(_QWORD *)(a1 + 24));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, a1, v18);
  v20 = *(_QWORD *)(a1 + 24);
  v21 = *(_QWORD *)(*(_QWORD *)(v20 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v20 + 48), *(_QWORD *)(v20 + 16) - v21 - 9);
  v22 = *(_QWORD *)(v20 + 48);
  if (v22)
    memmove((void *)(*(_QWORD *)(v20 + 24) + v21), *(const void **)(v20 + 56), v22);
  *(_QWORD *)(v20 + 48) = 0;
  v23 = *(_QWORD *)(v20 + 80);
  v24 = *(_QWORD *)(v20 + 88) - 8;
  *(_QWORD *)(v20 + 88) = v24;
  if (v23 == v24)
  {
    std::ostream::write();
    if (*(_BYTE *)(v20 + 40))
    {
      free(*(void **)(v20 + 24));
      *(_BYTE *)(v20 + 40) = 0;
    }
  }
}

void sub_20B20B948(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char v25;
  char v26[8];
  void *v27;
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unsigned int v31;
  void *__p;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  sub_20B20BC50((uint64_t)v26, a2);
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = *(_QWORD **)(a1 + 24);
    v25 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v3, (uint64_t)&v25, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_20B512F6C(a1, (uint64_t)&v27);
  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    v25 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v4, (uint64_t)&v25, 1);
  }
  std::ostream::operator<<();
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_BYTE *)(a1 + 34);
  *(_QWORD *)(a1 + 40) = v5 + 1;
  if (v5 != -1)
  {
    v7 = *(_QWORD **)(a1 + 24);
    v25 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v7, (uint64_t)&v25, 1);
  }
  v8 = *(_QWORD **)(a1 + 24);
  v25 = v6;
  sub_20AEC01D0(v8, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a1 + 40);
  if (v31 > 1)
    sub_20AECFAB8();
  v9 = v29;
  v10 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  if (*(_QWORD *)(a1 + 40))
  {
    v15 = *(_QWORD **)(a1 + 24);
    v25 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v15, (uint64_t)&v25, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a1, v14);
  v16 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v17 = *(_QWORD **)(a1 + 24);
    v25 = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v17, (uint64_t)&v25, 1);
  }
  v18 = *(_QWORD **)(a1 + 24);
  v25 = v16;
  sub_20AEC01D0(v18, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a1 + 40);
  v19 = (char *)__p;
  if (__p)
  {
    v20 = v33;
    v21 = __p;
    if (v33 != __p)
    {
      do
      {
        v22 = (std::__shared_weak_count *)*((_QWORD *)v20 - 1);
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v20 -= 16;
      }
      while (v20 != v19);
      v21 = __p;
    }
    v33 = v19;
    operator delete(v21);
  }
  if (v31 != -1)
    ((void (*)(char *, uint64_t *))off_24C411788[v31])(&v25, &v29);
  v31 = -1;
  if (v28 < 0)
    operator delete(v27);
}

void sub_20B20BC20(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B20BC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B1EBC54((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B20BC50(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;
  uint64_t v6;
  _BYTE v8[2];

  if (*(char *)(a2 + 31) < 0)
  {
    sub_20AEC60F4((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 56) = -1;
  v6 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24C411BD8[v6])(v8, a1 + 40, a2 + 40);
    *(_DWORD *)(a1 + 56) = v6;
  }
  sub_20AF43774((_QWORD *)(a1 + 64), a2 + 64);
  return a1;
}

void sub_20B20BD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *(unsigned int *)(v14 + 56);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_24C411788[v17])(&a13, v15);
  *(_DWORD *)(v14 + 56) = -1;
  if (*(char *)(v14 + 31) < 0)
    operator delete(*v13);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B20BD68(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t v15;
  void **v17;
  uint64_t v18;
  std::string::size_type v19;
  char *v20;
  void *__p[2];
  uint64_t v22;
  __int128 __dst;
  int64_t v24;
  int v25;

  v2 = (char *)a1;
  v3 = *((_DWORD *)a1 + 6);
  if (v3 == 1)
  {
    v25 = -1;
    if ((char)a2[23] < 0)
    {
      sub_20AEC60F4(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      __dst = *(_OWORD *)a2;
      v24 = *((_QWORD *)a2 + 2);
    }
    v22 = v24;
    *(_OWORD *)__p = __dst;
    if (v24 >= 0)
      v17 = __p;
    else
      v17 = (void **)__dst;
    if (v24 >= 0)
      v18 = HIBYTE(v24);
    else
      v18 = *((_QWORD *)&__dst + 1);
    if (v2[23] < 0)
    {
      v20 = v2;
      v2 = *(char **)v2;
      v19 = *((_QWORD *)v20 + 1);
    }
    else
    {
      v19 = v2[23];
    }
    v15 = sub_20B52BBE0((uint64_t)v17, v18, v2, v19, 0);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      return v15;
    operator delete(__p[0]);
    return v15;
  }
  else
  {
    if (v3)
      sub_20AECFAB8();
    v4 = a1[23];
    if ((v4 & 0x80u) == 0)
      v5 = a1[23];
    else
      v5 = *((_QWORD *)a1 + 1);
    v6 = a2[23];
    v7 = (char)v6;
    if ((v6 & 0x80u) != 0)
      v6 = *((_QWORD *)a2 + 1);
    if (v5 != v6)
      return 0;
    if (v7 < 0)
      a2 = *(unsigned __int8 **)a2;
    if ((v4 & 0x80) != 0)
    {
      return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
    }
    else
    {
      if (a1[23])
      {
        v8 = v4 - 1;
        do
        {
          v10 = *v2++;
          v9 = v10;
          v12 = *a2++;
          v11 = v12;
          v14 = v8-- != 0;
          v15 = v9 == v11;
        }
        while (v9 == v11 && v14);
        return v15;
      }
      return 1;
    }
  }
}

void sub_20B20BF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B20BF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B20BF3C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  char v15;
  BOOL v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  char v27;

  v2 = *((_DWORD *)a1 + 6);
  v3 = *((_DWORD *)a2 + 6);
  if (!v2)
  {
    if (!v3)
    {
      v18 = a1[23];
      v5 = *((_QWORD *)a1 + 1);
      if ((v18 & 0x80u) == 0)
        v19 = a1[23];
      else
        v19 = *((_QWORD *)a1 + 1);
      v20 = a2[23];
      v21 = (char)v20;
      if ((v20 & 0x80u) != 0)
        v20 = *((_QWORD *)a2 + 1);
      if (v19 == v20)
      {
        if (v21 < 0)
          a2 = *(unsigned __int8 **)a2;
        if ((v18 & 0x80) == 0)
        {
          if (a1[23])
          {
            v22 = v18 - 1;
            do
            {
              v24 = *a1++;
              v23 = v24;
              v26 = *a2++;
              v25 = v26;
              v14 = v22-- != 0;
              v27 = v14;
              v16 = v23 == v25;
              v17 = v23 == v25;
            }
            while (v16 && (v27 & 1) != 0);
            return v17;
          }
          return 1;
        }
        return memcmp(*(const void **)a1, a2, v5) == 0;
      }
    }
    return 0;
  }
  if (v3 != 1)
    return 0;
  if (v2 != 1)
    sub_20AECFAB8();
  v4 = a1[23];
  v5 = *((_QWORD *)a1 + 1);
  if ((v4 & 0x80u) == 0)
    v6 = a1[23];
  else
    v6 = *((_QWORD *)a1 + 1);
  v7 = a2[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a2 + 1);
  if (v6 != v7)
    return 0;
  if (v8 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, v5) == 0;
  if (a1[23])
  {
    v9 = v4 - 1;
    do
    {
      v11 = *a1++;
      v10 = v11;
      v13 = *a2++;
      v12 = v13;
      v14 = v9-- != 0;
      v15 = v14;
      v16 = v10 == v12;
      v17 = v10 == v12;
    }
    while (v16 && (v15 & 1) != 0);
    return v17;
  }
  return 1;
}

uint64_t sub_20B20C084(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned __int8 v5;
  size_t v6;
  unint64_t v7;
  int v8;
  void **v9;
  uint64_t v10;
  void **v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;
  uint64_t v18;
  void *p_s1;
  size_t v20;
  std::string::size_type v21;
  uint64_t v22;
  void *__p[2];
  unsigned __int8 v25;
  void *__s1;
  size_t __n;
  unsigned __int8 v28;
  char v29;
  char *v30;
  _BYTE v31[24];
  int v32;

  v3 = a1;
  v4 = *(_DWORD *)(a1 + 56);
  if (v4 == 1)
  {
    v32 = 0;
    sub_20B07A194((uint64_t)__p, (uint64_t)v31, a2);
    if (v32 == -1)
      sub_20AECFAB8();
    __p[0] = &v30;
    ((void (*)(void **__return_ptr, void **, _BYTE *))off_24C411C48[v32])(&__s1, __p, v31);
    if (v32 != -1)
      ((void (*)(void **, _BYTE *))off_24C411C30[v32])(__p, v31);
    if ((v28 & 0x80u) == 0)
      p_s1 = &__s1;
    else
      p_s1 = __s1;
    if ((v28 & 0x80u) == 0)
      v20 = v28;
    else
      v20 = __n;
    if (*(char *)(v3 + 23) < 0)
    {
      v22 = v3;
      v3 = *(_QWORD *)v3;
      v21 = *(_QWORD *)(v22 + 8);
    }
    else
    {
      v21 = *(unsigned __int8 *)(v3 + 23);
    }
    v18 = sub_20B52BBE0((uint64_t)p_s1, v20, (char *)v3, v21, 0);
    if ((char)v28 < 0)
      goto LABEL_49;
    return v18;
  }
  if (v4)
    sub_20AECFAB8();
  v32 = 0;
  sub_20B07A194((uint64_t)__p, (uint64_t)v31, a1);
  if (v32 == -1)
    sub_20AECFAB8();
  __p[0] = &v30;
  ((void (*)(void **__return_ptr, void **, _BYTE *))off_24C411C48[v32])(&__s1, __p, v31);
  if (v32 != -1)
    ((void (*)(void **, _BYTE *))off_24C411C30[v32])(__p, v31);
  v32 = 0;
  sub_20B07A194((uint64_t)&v30, (uint64_t)v31, a2);
  if (v32 == -1)
    sub_20AECFAB8();
  v30 = &v29;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C411C48[v32])(__p, &v30, v31);
  if (v32 != -1)
    ((void (*)(char **, _BYTE *))off_24C411C30[v32])(&v30, v31);
  v5 = v28;
  if ((v28 & 0x80u) == 0)
    v6 = v28;
  else
    v6 = __n;
  v7 = v25;
  v8 = (char)v25;
  if ((v25 & 0x80u) != 0)
    v7 = (unint64_t)__p[1];
  if (v6 != v7)
  {
    v18 = 0;
    if (((char)v25 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_48;
  }
  if ((v25 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((char)v28 < 0)
  {
    v18 = memcmp(__s1, v9, __n) == 0;
    goto LABEL_44;
  }
  if (v28)
  {
    v10 = v28 - 1;
    v11 = &__s1;
    do
    {
      v13 = *(unsigned __int8 *)v11;
      v11 = (void **)((char *)v11 + 1);
      v12 = v13;
      v15 = *(unsigned __int8 *)v9;
      v9 = (void **)((char *)v9 + 1);
      v14 = v15;
      v17 = v10-- != 0;
      v18 = v12 == v14;
    }
    while (v12 == v14 && v17);
LABEL_44:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_48;
  }
  v18 = 1;
  if (((char)v25 & 0x80000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x80) != 0)
      goto LABEL_49;
    return v18;
  }
LABEL_48:
  operator delete(__p[0]);
  if ((v28 & 0x80) == 0)
    return v18;
LABEL_49:
  operator delete(__s1);
  return v18;
}

void sub_20B20C334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B20C38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B20C3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B20C3B4(_QWORD *a1, uint64_t a2)
{
  int v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void **v8;
  void *v9;
  void *v10[2];
  uint64_t v11;
  void *__p[2];
  int64_t v13;
  int v14;

  v3 = *(_DWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 != 1)
      sub_20AECFAB8();
    sub_20B20C51C(a2);
    if (v13 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if (v13 >= 0)
      v5 = HIBYTE(v13);
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_20AEC01D0(a1, (uint64_t)v4, v5);
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      return v6;
    operator delete(__p[0]);
    return v6;
  }
  else
  {
    v14 = -1;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20AEC60F4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      v13 = *(_QWORD *)(a2 + 16);
    }
    v11 = v13;
    *(_OWORD *)v10 = *(_OWORD *)__p;
    if (v13 >= 0)
      v8 = v10;
    else
      v8 = (void **)__p[0];
    if (v13 >= 0)
      v9 = (void *)HIBYTE(v13);
    else
      v9 = __p[1];
    v6 = sub_20AEC01D0(a1, (uint64_t)v8, (uint64_t)v9);
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      return v6;
    operator delete(v10[0]);
    return v6;
  }
}

void sub_20B20C4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B20C4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B20C51C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _BYTE v21[24];
  int v22;
  void *__dst[2];
  unint64_t v24;
  _QWORD v25[5];
  _QWORD *v26;

  v22 = 0;
  v2 = operator new();
  *(_QWORD *)(v2 + 272) = 0;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  sub_20AEC0BD8(v2);
  v25[0] = v2;
  v3 = sub_20AEC01D0((_QWORD *)(v2 + 16), (uint64_t)"WildcardPattern{", 16);
  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = a1;
  else
    v5 = *(_QWORD *)a1;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = sub_20AEC01D0(v3, v5, v6);
  sub_20AEC01D0(v7, (uint64_t)"}", 1);
  v8 = *(_DWORD *)(v2 + 120);
  if ((v8 & 0x10) != 0)
  {
    v11 = *(_QWORD *)(v2 + 112);
    v12 = *(_QWORD *)(v2 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v2 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v2 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_32;
  }
  else
  {
    if ((v8 & 8) == 0)
    {
      v9 = 0;
      HIBYTE(v24) = 0;
      v10 = __dst;
      goto LABEL_20;
    }
    v13 = *(const void **)(v2 + 40);
    v9 = *(_QWORD *)(v2 + 56) - (_QWORD)v13;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_32:
      sub_20AEC0138();
  }
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v24 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_19;
  }
  HIBYTE(v24) = v9;
  v10 = __dst;
  if (v9)
LABEL_19:
    memmove(v10, v13, v9);
LABEL_20:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v25[0];
  if (v25[0])
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v25[0] = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)(v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    *(_QWORD *)(v16 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v16 + 16) = v19;
    if (*(char *)(v16 + 111) < 0)
      operator delete(*(void **)(v16 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v16 + 128);
    MEMORY[0x20BD3583C](v16, 0x10B2C40EED050F3);
  }
  v25[0] = v21;
  v25[1] = __dst;
  v25[2] = v21;
  v25[3] = __dst;
  v25[4] = __dst;
  if (v22 == -1)
    sub_20AECFAB8();
  v26 = v25;
  ((void (*)(_QWORD **, _BYTE *))off_24C411C18[v22])(&v26, v21);
  if (SHIBYTE(v24) < 0)
    operator delete(__dst[0]);
  if (v22 == -1)
    sub_20AECFAB8();
  v25[0] = __dst;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C411C48[v22])(v25, v21);
  if (v22 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C411C30[v22])(v25, v21);
  return result;
}

void sub_20B20C7F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x20BD3583C](v2, 0x10B2C40EED050F3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B20C81C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B20C834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_20AECFA60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

BOOL sub_20B20C874(uint64_t a1, std::__shared_weak_count *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;

  if (!a2)
    return a1 != 0;
  p_shared_owners = (unint64_t *)&a2->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1 != 0;
  ((void (*)(std::__shared_weak_count *))a2->__on_zero_shared)(a2);
  std::__shared_weak_count::__release_weak(a2);
  return a1 != 0;
}

void sub_20B20C8F4(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int128 *v7;
  unsigned __int128 v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  int8x8_t v16;
  uint64_t v17;
  unsigned __int128 v18;
  _BYTE *v19;
  void *v20[2];
  uint64_t v21;
  char v22;
  _OWORD v23[2];
  void *__p[2];
  uint64_t v25;
  unsigned __int128 v26;
  unsigned __int8 v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  LOBYTE(v20[0]) = 0;
  v22 = 0;
  v4 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0)
    {
      sub_20AEC60F4(v20, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    else
    {
      *(_OWORD *)v20 = *(_OWORD *)(a2 + 16);
      v21 = *(_QWORD *)(a2 + 32);
    }
    v4 = 1;
    v22 = 1;
  }
  LOBYTE(__p[0]) = 0;
  v27 = 0;
  if (!*(_BYTE *)(a2 + 160))
  {
    v5 = 0;
    if (v4)
      goto LABEL_16;
LABEL_10:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 32) = 0;
    v6 = a1 + 32;
    *(_BYTE *)(a1 + 80) = 0;
    if (!v5)
      goto LABEL_50;
    goto LABEL_45;
  }
  if (*(char *)(a2 + 135) < 0)
  {
    sub_20AEC60F4(__p, *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 112);
    v25 = *(_QWORD *)(a2 + 128);
  }
  v7 = (unsigned __int128 *)(a2 + 144);
  do
    v8 = __ldaxp(v7);
  while (__stlxp(v8, v7));
  v26 = v8;
  v5 = 1;
  v27 = 1;
  if (!v22)
    goto LABEL_10;
LABEL_16:
  *(_QWORD *)&v23[1] = v21;
  v23[0] = *(_OWORD *)v20;
  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  v9 = BYTE7(v23[1]);
  v10 = *((_QWORD *)&v23[0] + 1);
  v11 = *(_QWORD *)&v23[0];
  if ((SBYTE7(v23[1]) & 0x80u) == 0)
    v12 = v23;
  else
    v12 = *(_OWORD **)&v23[0];
  if ((SBYTE7(v23[1]) & 0x80u) == 0)
    v10 = BYTE7(v23[1]);
  if (v10)
  {
    v13 = v12;
    if (v10 >= 8)
    {
      v13 = (char *)v12 + (v10 & 0xFFFFFFFFFFFFFFF8);
      v14 = (char *)v12 + 3;
      v15 = v10 & 0xFFFFFFFFFFFFFFF8;
      while (1)
      {
        v16 = vceq_s8(*(int8x8_t *)(v14 - 3), (int8x8_t)0x2323232323232323);
        if ((v16.i8[0] & 1) != 0)
        {
          *(v14 - 3) = 95;
          if ((v16.i8[1] & 1) == 0)
          {
LABEL_27:
            if ((v16.i8[2] & 1) == 0)
              goto LABEL_28;
            goto LABEL_36;
          }
        }
        else if ((v16.i8[1] & 1) == 0)
        {
          goto LABEL_27;
        }
        *(v14 - 2) = 95;
        if ((v16.i8[2] & 1) == 0)
        {
LABEL_28:
          if ((v16.i8[3] & 1) == 0)
            goto LABEL_29;
          goto LABEL_37;
        }
LABEL_36:
        *(v14 - 1) = 95;
        if ((v16.i8[3] & 1) == 0)
        {
LABEL_29:
          if ((v16.i8[4] & 1) == 0)
            goto LABEL_30;
          goto LABEL_38;
        }
LABEL_37:
        *v14 = 95;
        if ((v16.i8[4] & 1) == 0)
        {
LABEL_30:
          if ((v16.i8[5] & 1) == 0)
            goto LABEL_31;
          goto LABEL_39;
        }
LABEL_38:
        v14[1] = 95;
        if ((v16.i8[5] & 1) == 0)
        {
LABEL_31:
          if ((v16.i8[6] & 1) == 0)
            goto LABEL_32;
          goto LABEL_40;
        }
LABEL_39:
        v14[2] = 95;
        if ((v16.i8[6] & 1) == 0)
        {
LABEL_32:
          if ((v16.i8[7] & 1) != 0)
            goto LABEL_41;
          goto LABEL_24;
        }
LABEL_40:
        v14[3] = 95;
        if ((v16.i8[7] & 1) != 0)
LABEL_41:
          v14[4] = 95;
LABEL_24:
        v14 += 8;
        v15 -= 8;
        if (!v15)
        {
          if (v10 == (v10 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_43;
          break;
        }
      }
    }
    v19 = (char *)v12 + v10;
    do
    {
      if (*v13 == 35)
        *v13 = 95;
      ++v13;
    }
    while (v13 != v19);
LABEL_43:
    v11 = *(_QWORD *)&v23[0];
    v9 = BYTE7(v23[1]);
    v5 = v27;
  }
  v28[0] = *((_QWORD *)&v23[0] + 1);
  *(_QWORD *)((char *)v28 + 7) = *(_QWORD *)((char *)v23 + 15);
  memset(v23, 0, 24);
  v17 = v28[0];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v17;
  *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v28 + 7);
  *(_BYTE *)(a1 + 23) = v9;
  *(_BYTE *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 0;
  v6 = a1 + 32;
  *(_BYTE *)(a1 + 80) = 0;
  if (v5)
  {
LABEL_45:
    *(_OWORD *)v6 = *(_OWORD *)__p;
    *(_QWORD *)(v6 + 16) = v25;
    __p[1] = 0;
    v25 = 0;
    __p[0] = 0;
    do
      v18 = __ldaxp(&v26);
    while (__stlxp(v18, &v26));
    *(_OWORD *)(a1 + 64) = v18;
    *(_BYTE *)(a1 + 80) = 1;
    if (v27 && SHIBYTE(v25) < 0)
      operator delete(__p[0]);
  }
LABEL_50:
  if (v22)
  {
    if (SHIBYTE(v21) < 0)
      operator delete(v20[0]);
  }
}

void sub_20B20CC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a29 && a25 < 0)
    operator delete(__p);
  if (a15)
  {
    if (a14 < 0)
      operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B20CC5C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  size_t v8;
  void **p_dst;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void **v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  size_t v26;
  void **v27;
  unint64_t v28;
  unint64_t v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  size_t v43;
  void **v44;
  unint64_t v45;
  unint64_t v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void **v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  int v59;
  _QWORD **v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  const void *v65;
  size_t v66;
  void **v67;
  void **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *p_p;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  unint64_t v82;
  int v83;
  int v84;
  void *v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  void ***v90;
  unsigned int v91;
  void ***v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  int v98;
  _QWORD **v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  const void *v104;
  size_t v105;
  void **v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  void **v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  int v121;
  _QWORD **v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  unint64_t v126;
  const void *v127;
  size_t v128;
  void **v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  void **v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  int v144;
  size_t v145;
  void **v146;
  unint64_t v147;
  unint64_t v148;
  const void *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void **v156;
  uint64_t v157;
  _BYTE v159[32];
  _BYTE v160[32];
  _BYTE v161[32];
  _BYTE v162[32];
  _DWORD v163[2];
  _BYTE v164[32];
  char *v165;
  _QWORD *v166;
  char v167;
  void *__p;
  uint64_t v169;
  unsigned __int8 v170;
  void *v171;
  unint64_t v172;
  uint64_t v173;
  int v174;
  void **v175;
  size_t v176;
  int64_t v177;
  _QWORD *v178;
  char v179;
  char *v180;
  _QWORD **__dst;
  size_t v182;
  int64_t v183;
  void **v184;
  void **v185;
  void **v186;
  void ***v187;
  void **v188;

  sub_20AEC01D0(a1, (uint64_t)"{", 1);
  v167 = 1;
  v165 = &v167;
  v166 = a1;
  v164[0] = 0;
  v164[24] = 0;
  sub_20B20E974((uint64_t)&v165, "package_id", a2, (uint64_t)v164);
  if (!*(_BYTE *)(a2 + 64))
    goto LABEL_35;
  if (v167)
    v167 = 0;
  else
    sub_20AEC01D0(a1, (uint64_t)",", 1);
  v4 = sub_20AEC01D0(a1, (uint64_t)"data_type_id", 12);
  v5 = sub_20AEC01D0(v4, (uint64_t)": ", 2);
  v174 = 0;
  v6 = operator new();
  *(_QWORD *)(v6 + 272) = 0;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)v6 = 0u;
  sub_20AEC0BD8(v6);
  v184 = (void **)v6;
  sub_20AF19054((_QWORD *)(v6 + 16), a2 + 56);
  v7 = *(_DWORD *)(v6 + 120);
  if ((v7 & 0x10) != 0)
  {
    v10 = *(_QWORD *)(v6 + 112);
    v11 = *(_QWORD *)(v6 + 72);
    if (v10 < v11)
    {
      *(_QWORD *)(v6 + 112) = v11;
      v10 = v11;
    }
    v12 = *(const void **)(v6 + 64);
    v8 = v10 - (_QWORD)v12;
    if (v10 - (unint64_t)v12 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_175;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v183) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_18;
    }
    v12 = *(const void **)(v6 + 40);
    v8 = *(_QWORD *)(v6 + 56) - (_QWORD)v12;
    if (v8 > 0x7FFFFFFFFFFFFFF7)
LABEL_175:
      sub_20AEC0138();
  }
  if (v8 >= 0x17)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v182 = v8;
    v183 = v14 | 0x8000000000000000;
    __dst = (_QWORD **)p_dst;
    goto LABEL_17;
  }
  HIBYTE(v183) = v8;
  p_dst = (void **)&__dst;
  if (v8)
LABEL_17:
    memmove(p_dst, v12, v8);
LABEL_18:
  *((_BYTE *)p_dst + v8) = 0;
  v15 = v184;
  if (v184)
  {
    v16 = MEMORY[0x24BEDB7F0];
    v17 = *MEMORY[0x24BEDB7F0];
    *v184 = (void *)*MEMORY[0x24BEDB7F0];
    v18 = *(void **)(v16 + 72);
    *(void **)((char *)v15 + *(_QWORD *)(v17 - 24)) = *(void **)(v16 + 64);
    v15[3] = (void *)(MEMORY[0x24BEDB848] + 16);
    v15[2] = v18;
    if (*((char *)v15 + 111) < 0)
      operator delete(v15[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v15 + 16);
    MEMORY[0x20BD3583C](v15, 0x10B2C40EED050F3);
  }
  v184 = &v171;
  v185 = (void **)&__dst;
  v186 = &v171;
  v187 = (void ***)&__dst;
  v188 = (void **)&__dst;
  if (v174 == -1)
    sub_20AECFAB8();
  __p = &v184;
  ((void (*)(void **, void **))off_24C411C18[v174])(&__p, &v171);
  if (SHIBYTE(v183) < 0)
    operator delete(__dst);
  if (v174 == -1)
    sub_20AECFAB8();
  v184 = (void **)&__dst;
  ((void (*)(void ***__return_ptr, void ***, void **))off_24C411C48[v174])(&v175, &v184, &v171);
  if (v174 != -1)
    ((void (*)(void ***, void **))off_24C411C30[v174])(&v184, &v171);
  if (v177 >= 0)
    v19 = (void **)&v175;
  else
    v19 = v175;
  if (v177 >= 0)
    v20 = HIBYTE(v177);
  else
    v20 = v176;
  sub_20AEC01D0(v5, (uint64_t)v19, v20);
  if ((SHIBYTE(v177) & 0x80000000) == 0)
  {
LABEL_35:
    if (!*(_BYTE *)(a2 + 112))
      goto LABEL_74;
    goto LABEL_36;
  }
  operator delete(v175);
  if (!*(_BYTE *)(a2 + 112))
    goto LABEL_74;
LABEL_36:
  if (v167)
    v167 = 0;
  else
    sub_20AEC01D0(a1, (uint64_t)",", 1);
  v21 = sub_20AEC01D0(a1, (uint64_t)"package_data_id", 15);
  v22 = sub_20AEC01D0(v21, (uint64_t)": ", 2);
  v174 = 0;
  v23 = operator new();
  *(_QWORD *)(v23 + 272) = 0;
  *(_OWORD *)(v23 + 240) = 0u;
  *(_OWORD *)(v23 + 256) = 0u;
  *(_OWORD *)(v23 + 208) = 0u;
  *(_OWORD *)(v23 + 224) = 0u;
  *(_OWORD *)(v23 + 176) = 0u;
  *(_OWORD *)(v23 + 192) = 0u;
  *(_OWORD *)(v23 + 144) = 0u;
  *(_OWORD *)(v23 + 160) = 0u;
  *(_OWORD *)(v23 + 112) = 0u;
  *(_OWORD *)(v23 + 128) = 0u;
  *(_OWORD *)(v23 + 80) = 0u;
  *(_OWORD *)(v23 + 96) = 0u;
  *(_OWORD *)(v23 + 48) = 0u;
  *(_OWORD *)(v23 + 64) = 0u;
  *(_OWORD *)(v23 + 16) = 0u;
  *(_OWORD *)(v23 + 32) = 0u;
  *(_OWORD *)v23 = 0u;
  sub_20AEC0BD8(v23);
  v178 = (_QWORD *)v23;
  v24 = (_QWORD *)(v23 + 16);
  v180 = (char *)(v23 + 16);
  if (*(_BYTE *)(a2 + 104))
  {
    __p = (void *)(a2 + 72);
    v169 = a2 + 96;
    sub_20AEC01D0(v24, (uint64_t)"{", 1);
    LOBYTE(v184) = 1;
    v185 = (void **)&v180;
    v186 = (void **)&v179;
    sub_20AFAA494((uint64_t *)&__p, (uint64_t)&v184);
    sub_20AEC01D0(v180, (uint64_t)"}", 1);
  }
  else
  {
    sub_20AEC01D0(v24, (uint64_t)"nullopt", 7);
  }
  v25 = *(_DWORD *)(v23 + 120);
  if ((v25 & 0x10) != 0)
  {
    v28 = *(_QWORD *)(v23 + 112);
    v29 = *(_QWORD *)(v23 + 72);
    if (v28 < v29)
    {
      *(_QWORD *)(v23 + 112) = v29;
      v28 = v29;
    }
    v30 = *(const void **)(v23 + 64);
    v26 = v28 - (_QWORD)v30;
    if (v28 - (unint64_t)v30 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_177;
  }
  else
  {
    if ((v25 & 8) == 0)
    {
      v26 = 0;
      HIBYTE(v183) = 0;
      v27 = (void **)&__dst;
      goto LABEL_57;
    }
    v30 = *(const void **)(v23 + 40);
    v26 = *(_QWORD *)(v23 + 56) - (_QWORD)v30;
    if (v26 > 0x7FFFFFFFFFFFFFF7)
LABEL_177:
      sub_20AEC0138();
  }
  if (v26 >= 0x17)
  {
    v31 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v31 = v26 | 7;
    v32 = v31 + 1;
    v27 = (void **)operator new(v31 + 1);
    v182 = v26;
    v183 = v32 | 0x8000000000000000;
    __dst = (_QWORD **)v27;
    goto LABEL_56;
  }
  HIBYTE(v183) = v26;
  v27 = (void **)&__dst;
  if (v26)
LABEL_56:
    memmove(v27, v30, v26);
LABEL_57:
  *((_BYTE *)v27 + v26) = 0;
  v33 = v178;
  if (v178)
  {
    v34 = MEMORY[0x24BEDB7F0];
    v35 = *MEMORY[0x24BEDB7F0];
    *v178 = *MEMORY[0x24BEDB7F0];
    v36 = *(_QWORD *)(v34 + 72);
    *(_QWORD *)((char *)v33 + *(_QWORD *)(v35 - 24)) = *(_QWORD *)(v34 + 64);
    v33[3] = MEMORY[0x24BEDB848] + 16;
    v33[2] = v36;
    if (*((char *)v33 + 111) < 0)
      operator delete((void *)v33[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v33 + 16);
    MEMORY[0x20BD3583C](v33, 0x10B2C40EED050F3);
  }
  v184 = &v171;
  v185 = (void **)&__dst;
  v186 = &v171;
  v187 = (void ***)&__dst;
  v188 = (void **)&__dst;
  if (v174 == -1)
    sub_20AECFAB8();
  __p = &v184;
  ((void (*)(void **, void **))off_24C411C18[v174])(&__p, &v171);
  if (SHIBYTE(v183) < 0)
    operator delete(__dst);
  if (v174 == -1)
    sub_20AECFAB8();
  v184 = (void **)&__dst;
  ((void (*)(void ***__return_ptr, void ***, void **))off_24C411C48[v174])(&v175, &v184, &v171);
  if (v174 != -1)
    ((void (*)(void ***, void **))off_24C411C30[v174])(&v184, &v171);
  if (v177 >= 0)
    v37 = (void **)&v175;
  else
    v37 = v175;
  if (v177 >= 0)
    v38 = HIBYTE(v177);
  else
    v38 = v176;
  sub_20AEC01D0(v22, (uint64_t)v37, v38);
  if ((SHIBYTE(v177) & 0x80000000) == 0)
  {
LABEL_74:
    if (!*(_BYTE *)(a2 + 152))
      goto LABEL_110;
    goto LABEL_75;
  }
  operator delete(v175);
  if (!*(_BYTE *)(a2 + 152))
    goto LABEL_110;
LABEL_75:
  if (v167)
    v167 = 0;
  else
    sub_20AEC01D0(a1, (uint64_t)",", 1);
  v39 = sub_20AEC01D0(a1, (uint64_t)"context_name", 12);
  v40 = sub_20AEC01D0(v39, (uint64_t)": ", 2);
  v174 = 0;
  v41 = operator new();
  *(_QWORD *)(v41 + 272) = 0;
  *(_OWORD *)(v41 + 240) = 0u;
  *(_OWORD *)(v41 + 256) = 0u;
  *(_OWORD *)(v41 + 208) = 0u;
  *(_OWORD *)(v41 + 224) = 0u;
  *(_OWORD *)(v41 + 176) = 0u;
  *(_OWORD *)(v41 + 192) = 0u;
  *(_OWORD *)(v41 + 144) = 0u;
  *(_OWORD *)(v41 + 160) = 0u;
  *(_OWORD *)(v41 + 112) = 0u;
  *(_OWORD *)(v41 + 128) = 0u;
  *(_OWORD *)(v41 + 80) = 0u;
  *(_OWORD *)(v41 + 96) = 0u;
  *(_OWORD *)(v41 + 48) = 0u;
  *(_OWORD *)(v41 + 64) = 0u;
  *(_OWORD *)(v41 + 16) = 0u;
  *(_OWORD *)(v41 + 32) = 0u;
  *(_OWORD *)v41 = 0u;
  sub_20AEC0BD8(v41);
  v184 = (void **)v41;
  sub_20B20C3B4((_QWORD *)(v41 + 16), a2 + 120);
  v42 = *(_DWORD *)(v41 + 120);
  if ((v42 & 0x10) != 0)
  {
    v45 = *(_QWORD *)(v41 + 112);
    v46 = *(_QWORD *)(v41 + 72);
    if (v45 < v46)
    {
      *(_QWORD *)(v41 + 112) = v46;
      v45 = v46;
    }
    v47 = *(const void **)(v41 + 64);
    v43 = v45 - (_QWORD)v47;
    if (v45 - (unint64_t)v47 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_179;
  }
  else
  {
    if ((v42 & 8) == 0)
    {
      v43 = 0;
      HIBYTE(v183) = 0;
      v44 = (void **)&__dst;
      goto LABEL_91;
    }
    v47 = *(const void **)(v41 + 40);
    v43 = *(_QWORD *)(v41 + 56) - (_QWORD)v47;
    if (v43 > 0x7FFFFFFFFFFFFFF7)
LABEL_179:
      sub_20AEC0138();
  }
  if (v43 >= 0x17)
  {
    v48 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v48 = v43 | 7;
    v49 = v48 + 1;
    v44 = (void **)operator new(v48 + 1);
    v182 = v43;
    v183 = v49 | 0x8000000000000000;
    __dst = (_QWORD **)v44;
  }
  else
  {
    HIBYTE(v183) = v43;
    v44 = (void **)&__dst;
    if (!v43)
      goto LABEL_91;
  }
  memmove(v44, v47, v43);
LABEL_91:
  *((_BYTE *)v44 + v43) = 0;
  v50 = v184;
  if (v184)
  {
    v51 = MEMORY[0x24BEDB7F0];
    v52 = *MEMORY[0x24BEDB7F0];
    *v184 = (void *)*MEMORY[0x24BEDB7F0];
    v53 = *(void **)(v51 + 72);
    *(void **)((char *)v50 + *(_QWORD *)(v52 - 24)) = *(void **)(v51 + 64);
    v50[3] = (void *)(MEMORY[0x24BEDB848] + 16);
    v50[2] = v53;
    if (*((char *)v50 + 111) < 0)
      operator delete(v50[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v50 + 16);
    MEMORY[0x20BD3583C](v50, 0x10B2C40EED050F3);
  }
  v184 = &v171;
  v185 = (void **)&__dst;
  v186 = &v171;
  v187 = (void ***)&__dst;
  v188 = (void **)&__dst;
  if (v174 == -1)
    sub_20AECFAB8();
  __p = &v184;
  ((void (*)(void **, void **))off_24C411C18[v174])(&__p, &v171);
  if (SHIBYTE(v183) < 0)
    operator delete(__dst);
  if (v174 == -1)
    sub_20AECFAB8();
  v184 = (void **)&__dst;
  ((void (*)(void ***__return_ptr, void ***, void **))off_24C411C48[v174])(&v175, &v184, &v171);
  if (v174 != -1)
    ((void (*)(void ***, void **))off_24C411C30[v174])(&v184, &v171);
  if (v177 >= 0)
    v54 = (void **)&v175;
  else
    v54 = v175;
  if (v177 >= 0)
    v55 = HIBYTE(v177);
  else
    v55 = v176;
  sub_20AEC01D0(v40, (uint64_t)v54, v55);
  if (SHIBYTE(v177) < 0)
    operator delete(v175);
LABEL_110:
  if (!*(_BYTE *)(a2 + 224))
    goto LABEL_164;
  if (v167)
    v167 = 0;
  else
    sub_20AEC01D0(a1, (uint64_t)",", 1);
  v56 = sub_20AEC01D0(a1, (uint64_t)"context_id", 10);
  v57 = sub_20AEC01D0(v56, (uint64_t)": ", 2);
  v174 = 0;
  v58 = operator new();
  *(_QWORD *)(v58 + 272) = 0;
  *(_OWORD *)(v58 + 240) = 0u;
  *(_OWORD *)(v58 + 256) = 0u;
  *(_OWORD *)(v58 + 208) = 0u;
  *(_OWORD *)(v58 + 224) = 0u;
  *(_OWORD *)(v58 + 176) = 0u;
  *(_OWORD *)(v58 + 192) = 0u;
  *(_OWORD *)(v58 + 144) = 0u;
  *(_OWORD *)(v58 + 160) = 0u;
  *(_OWORD *)(v58 + 112) = 0u;
  *(_OWORD *)(v58 + 128) = 0u;
  *(_OWORD *)(v58 + 80) = 0u;
  *(_OWORD *)(v58 + 96) = 0u;
  *(_OWORD *)(v58 + 48) = 0u;
  *(_OWORD *)(v58 + 64) = 0u;
  *(_OWORD *)(v58 + 16) = 0u;
  *(_OWORD *)(v58 + 32) = 0u;
  *(_OWORD *)v58 = 0u;
  sub_20AEC0BD8(v58);
  v178 = (_QWORD *)v58;
  v59 = *(_DWORD *)(a2 + 216);
  if (!v59)
  {
    LODWORD(v187) = 0;
    sub_20B07A194((uint64_t)&v180, (uint64_t)&v184, a2 + 160);
    if ((_DWORD)v187 == -1)
      sub_20AECFAB8();
    v180 = &v179;
    ((void (*)(_QWORD ***__return_ptr, char **, void ***))off_24C411C48[v187])(&__dst, &v180, &v184);
    if ((_DWORD)v187 != -1)
      ((void (*)(char **, void ***))off_24C411C30[v187])(&v180, &v184);
    if (v183 >= 0)
      v68 = (void **)&__dst;
    else
      v68 = (void **)__dst;
    if (v183 >= 0)
      v69 = HIBYTE(v183);
    else
      v69 = v182;
    sub_20AEC01D0((_QWORD *)(v58 + 16), (uint64_t)v68, v69);
    if (SHIBYTE(v183) < 0)
    {
      operator delete(__dst);
      v62 = *(_DWORD *)(v58 + 120);
      if ((v62 & 0x10) == 0)
        goto LABEL_141;
LABEL_124:
      v63 = *(_QWORD *)(v58 + 112);
      v64 = *(_QWORD *)(v58 + 72);
      if (v63 < v64)
      {
        *(_QWORD *)(v58 + 112) = v64;
        v63 = v64;
      }
      v65 = *(const void **)(v58 + 64);
      v66 = v63 - (_QWORD)v65;
      if (v63 - (unint64_t)v65 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_127;
LABEL_181:
      sub_20AEC0138();
    }
LABEL_140:
    v62 = *(_DWORD *)(v58 + 120);
    if ((v62 & 0x10) == 0)
      goto LABEL_141;
    goto LABEL_124;
  }
  if (v59 != 1)
    sub_20AECFAB8();
  sub_20B20C51C(a2 + 160);
  if (SHIBYTE(v186) >= 0)
    v60 = &v184;
  else
    v60 = (_QWORD **)v184;
  if (SHIBYTE(v186) >= 0)
    v61 = HIBYTE(v186);
  else
    v61 = (uint64_t)v185;
  sub_20AEC01D0((_QWORD *)(v58 + 16), (uint64_t)v60, v61);
  if ((SHIBYTE(v186) & 0x80000000) == 0)
    goto LABEL_140;
  operator delete(v184);
  v62 = *(_DWORD *)(v58 + 120);
  if ((v62 & 0x10) != 0)
    goto LABEL_124;
LABEL_141:
  if ((v62 & 8) == 0)
  {
    v66 = 0;
    HIBYTE(v177) = 0;
    v67 = (void **)&v175;
    goto LABEL_147;
  }
  v65 = *(const void **)(v58 + 40);
  v66 = *(_QWORD *)(v58 + 56) - (_QWORD)v65;
  if (v66 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_181;
LABEL_127:
  if (v66 >= 0x17)
  {
    v70 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v66 | 7) != 0x17)
      v70 = v66 | 7;
    v71 = v70 + 1;
    v67 = (void **)operator new(v70 + 1);
    v176 = v66;
    v177 = v71 | 0x8000000000000000;
    v175 = v67;
    goto LABEL_146;
  }
  HIBYTE(v177) = v66;
  v67 = (void **)&v175;
  if (v66)
LABEL_146:
    memmove(v67, v65, v66);
LABEL_147:
  *((_BYTE *)v67 + v66) = 0;
  v72 = v178;
  if (v178)
  {
    v73 = MEMORY[0x24BEDB7F0];
    v74 = *MEMORY[0x24BEDB7F0];
    *v178 = *MEMORY[0x24BEDB7F0];
    v75 = *(_QWORD *)(v73 + 72);
    *(_QWORD *)((char *)v72 + *(_QWORD *)(v74 - 24)) = *(_QWORD *)(v73 + 64);
    v72[3] = MEMORY[0x24BEDB848] + 16;
    v72[2] = v75;
    if (*((char *)v72 + 111) < 0)
      operator delete((void *)v72[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v72 + 16);
    MEMORY[0x20BD3583C](v72, 0x10B2C40EED050F3);
  }
  v184 = &v171;
  v185 = (void **)&v175;
  v186 = &v171;
  v187 = &v175;
  v188 = (void **)&v175;
  if (v174 == -1)
    sub_20AECFAB8();
  __dst = &v184;
  ((void (*)(_QWORD ***, void **))off_24C411C18[v174])(&__dst, &v171);
  if (SHIBYTE(v177) < 0)
    operator delete(v175);
  if (v174 == -1)
    sub_20AECFAB8();
  v184 = (void **)&__dst;
  ((void (*)(void **__return_ptr, void ***, void **))off_24C411C48[v174])(&__p, &v184, &v171);
  if (v174 != -1)
    ((void (*)(void ***, void **))off_24C411C30[v174])(&v184, &v171);
  if ((v170 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v170 & 0x80u) == 0)
    v77 = v170;
  else
    v77 = v169;
  sub_20AEC01D0(v57, (uint64_t)p_p, v77);
  if ((char)v170 < 0)
  {
    operator delete(__p);
    if (*(_BYTE *)(a2 + 256))
      goto LABEL_165;
LABEL_173:
    v83 = 7;
    HIBYTE(v173) = 7;
    LODWORD(v171) = 1819047278;
    v84 = 1953525612;
LABEL_184:
    *(_DWORD *)((char *)&v171 + 3) = v84;
    HIBYTE(v171) = 0;
    goto LABEL_185;
  }
LABEL_164:
  if (!*(_BYTE *)(a2 + 256))
    goto LABEL_173;
LABEL_165:
  v79 = *(_QWORD *)(a2 + 240);
  v78 = *(std::__shared_weak_count **)(a2 + 248);
  if (v78)
  {
    p_shared_owners = (unint64_t *)&v78->__shared_owners_;
    do
      v81 = __ldxr(p_shared_owners);
    while (__stxr(v81 + 1, p_shared_owners));
    do
      v82 = __ldaxr(p_shared_owners);
    while (__stlxr(v82 - 1, p_shared_owners));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
      if (v79)
        goto LABEL_171;
      goto LABEL_183;
    }
  }
  if (!v79)
  {
LABEL_183:
    v83 = 7;
    HIBYTE(v173) = 7;
    LODWORD(v171) = 1819047278;
    v84 = 1920233580;
    goto LABEL_184;
  }
LABEL_171:
  sub_20B217434(a2 + 232, (uint64_t)&v171);
  v83 = HIBYTE(v173);
LABEL_185:
  v85 = v171;
  v86 = v172;
  v163[0] = v173;
  *(_DWORD *)((char *)v163 + 3) = *(_DWORD *)((char *)&v173 + 3);
  v172 = 0;
  v173 = 0;
  v171 = 0;
  if (!*(_BYTE *)(a2 + 256))
    goto LABEL_199;
  if (*v165)
  {
    *v165 = 0;
    v87 = v166;
  }
  else
  {
    v87 = v166;
    sub_20AEC01D0(v166, (uint64_t)",", 1);
  }
  v88 = sub_20AEC01D0(v87, (uint64_t)"value", 5);
  v89 = sub_20AEC01D0(v88, (uint64_t)": ", 2);
  if ((v83 & 0x80) != 0)
  {
    sub_20AEC60F4(&v184, v85, v86);
    v91 = HIBYTE(v186);
    v90 = (void ***)v184;
    v86 = (unint64_t)v185;
  }
  else
  {
    v184 = (void **)v85;
    v185 = (void **)v86;
    LODWORD(v186) = v163[0];
    *(_DWORD *)((char *)&v186 + 3) = *(_DWORD *)((char *)v163 + 3);
    HIBYTE(v186) = v83;
    v90 = (void ***)v85;
    v91 = v83;
  }
  v92 = (v91 & 0x80u) == 0 ? &v184 : v90;
  v93 = (v91 & 0x80u) == 0 ? v91 : v86;
  sub_20AEC01D0(v89, (uint64_t)v92, v93);
  if ((SHIBYTE(v186) & 0x80000000) == 0)
  {
LABEL_199:
    if ((v83 & 0x80) == 0)
      goto LABEL_200;
LABEL_222:
    operator delete(v85);
    if ((SHIBYTE(v173) & 0x80000000) == 0)
      goto LABEL_201;
    goto LABEL_223;
  }
  operator delete(v184);
  if ((v83 & 0x80) != 0)
    goto LABEL_222;
LABEL_200:
  if ((SHIBYTE(v173) & 0x80000000) == 0)
    goto LABEL_201;
LABEL_223:
  operator delete(v171);
LABEL_201:
  v162[0] = 0;
  v162[24] = 0;
  sub_20B20E974((uint64_t)&v165, "name", a2 + 264, (uint64_t)v162);
  if (!*(_BYTE *)(a2 + 416))
    goto LABEL_264;
  if (*v165)
  {
    *v165 = 0;
    v94 = v166;
  }
  else
  {
    v94 = v166;
    sub_20AEC01D0(v166, (uint64_t)",", 1);
  }
  v95 = sub_20AEC01D0(v94, (uint64_t)"instance_id", 11);
  v96 = sub_20AEC01D0(v95, (uint64_t)": ", 2);
  v174 = 0;
  v97 = operator new();
  *(_QWORD *)(v97 + 272) = 0;
  *(_OWORD *)(v97 + 240) = 0u;
  *(_OWORD *)(v97 + 256) = 0u;
  *(_OWORD *)(v97 + 208) = 0u;
  *(_OWORD *)(v97 + 224) = 0u;
  *(_OWORD *)(v97 + 176) = 0u;
  *(_OWORD *)(v97 + 192) = 0u;
  *(_OWORD *)(v97 + 144) = 0u;
  *(_OWORD *)(v97 + 160) = 0u;
  *(_OWORD *)(v97 + 112) = 0u;
  *(_OWORD *)(v97 + 128) = 0u;
  *(_OWORD *)(v97 + 80) = 0u;
  *(_OWORD *)(v97 + 96) = 0u;
  *(_OWORD *)(v97 + 48) = 0u;
  *(_OWORD *)(v97 + 64) = 0u;
  *(_OWORD *)(v97 + 16) = 0u;
  *(_OWORD *)(v97 + 32) = 0u;
  *(_OWORD *)v97 = 0u;
  sub_20AEC0BD8(v97);
  v178 = (_QWORD *)v97;
  v98 = *(_DWORD *)(a2 + 400);
  if (!v98)
  {
    LODWORD(v187) = 0;
    if (*(_BYTE *)(a2 + 384))
      sub_20B210348((uint64_t)&v184, a2 + 336);
    else
      sub_20AED0170(&v184, "nullopt");
    if ((_DWORD)v187 == -1)
      sub_20AECFAB8();
    v180 = &v179;
    ((void (*)(_QWORD ***__return_ptr, char **, void ***))off_24C411C48[v187])(&__dst, &v180, &v184);
    if ((_DWORD)v187 != -1)
      ((void (*)(char **, void ***))off_24C411C30[v187])(&v180, &v184);
    if (v183 >= 0)
      v110 = (void **)&__dst;
    else
      v110 = (void **)__dst;
    if (v183 >= 0)
      v111 = HIBYTE(v183);
    else
      v111 = v182;
    sub_20AEC01D0((_QWORD *)(v97 + 16), (uint64_t)v110, v111);
    if (SHIBYTE(v183) < 0)
    {
      operator delete(__dst);
      v101 = *(_DWORD *)(v97 + 120);
      if ((v101 & 0x10) == 0)
        goto LABEL_246;
LABEL_215:
      v102 = *(_QWORD *)(v97 + 112);
      v103 = *(_QWORD *)(v97 + 72);
      if (v102 < v103)
      {
        *(_QWORD *)(v97 + 112) = v103;
        v102 = v103;
      }
      v104 = *(const void **)(v97 + 64);
      v105 = v102 - (_QWORD)v104;
      if (v102 - (unint64_t)v104 <= 0x7FFFFFFFFFFFFFF7)
      {
LABEL_218:
        if (v105 >= 0x17)
        {
          v107 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v105 | 7) != 0x17)
            v107 = v105 | 7;
          v108 = v107 + 1;
          v106 = (void **)operator new(v107 + 1);
          v176 = v105;
          v177 = v108 | 0x8000000000000000;
          v175 = v106;
        }
        else
        {
          HIBYTE(v177) = v105;
          v106 = (void **)&v175;
          if (!v105)
          {
LABEL_230:
            *((_BYTE *)v106 + v105) = 0;
            v109 = v178;
            if (!v178)
              goto LABEL_251;
            goto LABEL_248;
          }
        }
        memmove(v106, v104, v105);
        goto LABEL_230;
      }
LABEL_295:
      sub_20AEC0138();
    }
LABEL_245:
    v101 = *(_DWORD *)(v97 + 120);
    if ((v101 & 0x10) == 0)
      goto LABEL_246;
    goto LABEL_215;
  }
  if (v98 != 1)
    sub_20AECFAB8();
  sub_20B20C51C(a2 + 336);
  if (SHIBYTE(v186) >= 0)
    v99 = &v184;
  else
    v99 = (_QWORD **)v184;
  if (SHIBYTE(v186) >= 0)
    v100 = HIBYTE(v186);
  else
    v100 = (uint64_t)v185;
  sub_20AEC01D0((_QWORD *)(v97 + 16), (uint64_t)v99, v100);
  if ((SHIBYTE(v186) & 0x80000000) == 0)
    goto LABEL_245;
  operator delete(v184);
  v101 = *(_DWORD *)(v97 + 120);
  if ((v101 & 0x10) != 0)
    goto LABEL_215;
LABEL_246:
  if ((v101 & 8) != 0)
  {
    v104 = *(const void **)(v97 + 40);
    v105 = *(_QWORD *)(v97 + 56) - (_QWORD)v104;
    if (v105 <= 0x7FFFFFFFFFFFFFF7)
      goto LABEL_218;
    goto LABEL_295;
  }
  HIBYTE(v177) = 0;
  LOBYTE(v175) = 0;
  v109 = v178;
  if (!v178)
    goto LABEL_251;
LABEL_248:
  v112 = MEMORY[0x24BEDB7F0];
  v113 = *MEMORY[0x24BEDB7F0];
  *v109 = *MEMORY[0x24BEDB7F0];
  v114 = *(_QWORD *)(v112 + 72);
  *(_QWORD *)((char *)v109 + *(_QWORD *)(v113 - 24)) = *(_QWORD *)(v112 + 64);
  v109[3] = MEMORY[0x24BEDB848] + 16;
  v109[2] = v114;
  if (*((char *)v109 + 111) < 0)
    operator delete((void *)v109[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v109 + 16);
  MEMORY[0x20BD3583C](v109, 0x10B2C40EED050F3);
LABEL_251:
  v184 = &v171;
  v185 = (void **)&v175;
  v186 = &v171;
  v187 = &v175;
  v188 = (void **)&v175;
  if (v174 == -1)
    sub_20AECFAB8();
  __dst = &v184;
  ((void (*)(_QWORD ***, void **))off_24C411C18[v174])(&__dst, &v171);
  if (SHIBYTE(v177) < 0)
    operator delete(v175);
  if (v174 == -1)
    sub_20AECFAB8();
  v184 = (void **)&__dst;
  ((void (*)(void **__return_ptr, void ***, void **))off_24C411C48[v174])(&__p, &v184, &v171);
  if (v174 != -1)
    ((void (*)(void ***, void **))off_24C411C30[v174])(&v184, &v171);
  if ((v170 & 0x80u) == 0)
    v115 = &__p;
  else
    v115 = __p;
  if ((v170 & 0x80u) == 0)
    v116 = v170;
  else
    v116 = v169;
  sub_20AEC01D0(v96, (uint64_t)v115, v116);
  if (((char)v170 & 0x80000000) == 0)
  {
LABEL_264:
    if (!*(_BYTE *)(a2 + 576))
      goto LABEL_328;
    goto LABEL_265;
  }
  operator delete(__p);
  if (!*(_BYTE *)(a2 + 576))
    goto LABEL_328;
LABEL_265:
  if (*v165)
  {
    *v165 = 0;
    v117 = v166;
  }
  else
  {
    v117 = v166;
    sub_20AEC01D0(v166, (uint64_t)",", 1);
  }
  v118 = sub_20AEC01D0(v117, (uint64_t)"reference_id", 12);
  v119 = sub_20AEC01D0(v118, (uint64_t)": ", 2);
  v174 = 0;
  v120 = operator new();
  *(_QWORD *)(v120 + 272) = 0;
  *(_OWORD *)(v120 + 240) = 0u;
  *(_OWORD *)(v120 + 256) = 0u;
  *(_OWORD *)(v120 + 208) = 0u;
  *(_OWORD *)(v120 + 224) = 0u;
  *(_OWORD *)(v120 + 176) = 0u;
  *(_OWORD *)(v120 + 192) = 0u;
  *(_OWORD *)(v120 + 144) = 0u;
  *(_OWORD *)(v120 + 160) = 0u;
  *(_OWORD *)(v120 + 112) = 0u;
  *(_OWORD *)(v120 + 128) = 0u;
  *(_OWORD *)(v120 + 80) = 0u;
  *(_OWORD *)(v120 + 96) = 0u;
  *(_OWORD *)(v120 + 48) = 0u;
  *(_OWORD *)(v120 + 64) = 0u;
  *(_OWORD *)(v120 + 16) = 0u;
  *(_OWORD *)(v120 + 32) = 0u;
  *(_OWORD *)v120 = 0u;
  sub_20AEC0BD8(v120);
  v178 = (_QWORD *)v120;
  v121 = *(_DWORD *)(a2 + 560);
  if (!v121)
  {
    LODWORD(v187) = 0;
    if (*(_BYTE *)(a2 + 544))
      sub_20B0C2E10((uint64_t)&v180, (uint64_t)&v184, a2 + 448);
    else
      sub_20AED0170(&v184, "nullopt");
    if ((_DWORD)v187 == -1)
      sub_20AECFAB8();
    v180 = &v179;
    ((void (*)(_QWORD ***__return_ptr, char **, void ***))off_24C411C48[v187])(&__dst, &v180, &v184);
    if ((_DWORD)v187 != -1)
      ((void (*)(char **, void ***))off_24C411C30[v187])(&v180, &v184);
    if (v183 >= 0)
      v133 = (void **)&__dst;
    else
      v133 = (void **)__dst;
    if (v183 >= 0)
      v134 = HIBYTE(v183);
    else
      v134 = v182;
    sub_20AEC01D0((_QWORD *)(v120 + 16), (uint64_t)v133, v134);
    if (SHIBYTE(v183) < 0)
    {
      operator delete(__dst);
      v124 = *(_DWORD *)(v120 + 120);
      if ((v124 & 0x10) == 0)
        goto LABEL_310;
LABEL_278:
      v125 = *(_QWORD *)(v120 + 112);
      v126 = *(_QWORD *)(v120 + 72);
      if (v125 < v126)
      {
        *(_QWORD *)(v120 + 112) = v126;
        v125 = v126;
      }
      v127 = *(const void **)(v120 + 64);
      v128 = v125 - (_QWORD)v127;
      if (v125 - (unint64_t)v127 <= 0x7FFFFFFFFFFFFFF7)
      {
LABEL_281:
        if (v128 >= 0x17)
        {
          v130 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v128 | 7) != 0x17)
            v130 = v128 | 7;
          v131 = v130 + 1;
          v129 = (void **)operator new(v130 + 1);
          v176 = v128;
          v177 = v131 | 0x8000000000000000;
          v175 = v129;
        }
        else
        {
          HIBYTE(v177) = v128;
          v129 = (void **)&v175;
          if (!v128)
          {
LABEL_292:
            *((_BYTE *)v129 + v128) = 0;
            v132 = v178;
            if (!v178)
              goto LABEL_315;
            goto LABEL_312;
          }
        }
        memmove(v129, v127, v128);
        goto LABEL_292;
      }
LABEL_366:
      sub_20AEC0138();
    }
LABEL_309:
    v124 = *(_DWORD *)(v120 + 120);
    if ((v124 & 0x10) == 0)
      goto LABEL_310;
    goto LABEL_278;
  }
  if (v121 != 1)
    sub_20AECFAB8();
  sub_20B20C51C(a2 + 448);
  if (SHIBYTE(v186) >= 0)
    v122 = &v184;
  else
    v122 = (_QWORD **)v184;
  if (SHIBYTE(v186) >= 0)
    v123 = HIBYTE(v186);
  else
    v123 = (uint64_t)v185;
  sub_20AEC01D0((_QWORD *)(v120 + 16), (uint64_t)v122, v123);
  if ((SHIBYTE(v186) & 0x80000000) == 0)
    goto LABEL_309;
  operator delete(v184);
  v124 = *(_DWORD *)(v120 + 120);
  if ((v124 & 0x10) != 0)
    goto LABEL_278;
LABEL_310:
  if ((v124 & 8) != 0)
  {
    v127 = *(const void **)(v120 + 40);
    v128 = *(_QWORD *)(v120 + 56) - (_QWORD)v127;
    if (v128 <= 0x7FFFFFFFFFFFFFF7)
      goto LABEL_281;
    goto LABEL_366;
  }
  HIBYTE(v177) = 0;
  LOBYTE(v175) = 0;
  v132 = v178;
  if (!v178)
    goto LABEL_315;
LABEL_312:
  v135 = MEMORY[0x24BEDB7F0];
  v136 = *MEMORY[0x24BEDB7F0];
  *v132 = *MEMORY[0x24BEDB7F0];
  v137 = *(_QWORD *)(v135 + 72);
  *(_QWORD *)((char *)v132 + *(_QWORD *)(v136 - 24)) = *(_QWORD *)(v135 + 64);
  v132[3] = MEMORY[0x24BEDB848] + 16;
  v132[2] = v137;
  if (*((char *)v132 + 111) < 0)
    operator delete((void *)v132[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v132 + 16);
  MEMORY[0x20BD3583C](v132, 0x10B2C40EED050F3);
LABEL_315:
  v184 = &v171;
  v185 = (void **)&v175;
  v186 = &v171;
  v187 = &v175;
  v188 = (void **)&v175;
  if (v174 == -1)
    sub_20AECFAB8();
  __dst = &v184;
  ((void (*)(_QWORD ***, void **))off_24C411C18[v174])(&__dst, &v171);
  if (SHIBYTE(v177) < 0)
    operator delete(v175);
  if (v174 == -1)
    sub_20AECFAB8();
  v184 = (void **)&__dst;
  ((void (*)(void **__return_ptr, void ***, void **))off_24C411C48[v174])(&__p, &v184, &v171);
  if (v174 != -1)
    ((void (*)(void ***, void **))off_24C411C30[v174])(&v184, &v171);
  if ((v170 & 0x80u) == 0)
    v138 = &__p;
  else
    v138 = __p;
  if ((v170 & 0x80u) == 0)
    v139 = v170;
  else
    v139 = v169;
  sub_20AEC01D0(v119, (uint64_t)v138, v139);
  if ((char)v170 < 0)
  {
    operator delete(__p);
    if (!*(_BYTE *)(a2 + 624))
      goto LABEL_364;
    goto LABEL_329;
  }
LABEL_328:
  if (!*(_BYTE *)(a2 + 624))
    goto LABEL_364;
LABEL_329:
  if (*v165)
  {
    *v165 = 0;
    v140 = v166;
  }
  else
  {
    v140 = v166;
    sub_20AEC01D0(v166, (uint64_t)",", 1);
  }
  v141 = sub_20AEC01D0(v140, (uint64_t)"references", 10);
  v142 = sub_20AEC01D0(v141, (uint64_t)": ", 2);
  v174 = 0;
  v143 = operator new();
  *(_QWORD *)(v143 + 272) = 0;
  *(_OWORD *)(v143 + 240) = 0u;
  *(_OWORD *)(v143 + 256) = 0u;
  *(_OWORD *)(v143 + 208) = 0u;
  *(_OWORD *)(v143 + 224) = 0u;
  *(_OWORD *)(v143 + 176) = 0u;
  *(_OWORD *)(v143 + 192) = 0u;
  *(_OWORD *)(v143 + 144) = 0u;
  *(_OWORD *)(v143 + 160) = 0u;
  *(_OWORD *)(v143 + 112) = 0u;
  *(_OWORD *)(v143 + 128) = 0u;
  *(_OWORD *)(v143 + 80) = 0u;
  *(_OWORD *)(v143 + 96) = 0u;
  *(_OWORD *)(v143 + 48) = 0u;
  *(_OWORD *)(v143 + 64) = 0u;
  *(_OWORD *)(v143 + 16) = 0u;
  *(_OWORD *)(v143 + 32) = 0u;
  *(_OWORD *)v143 = 0u;
  sub_20AEC0BD8(v143);
  __p = (void *)v143;
  v184 = (void **)(v143 + 16);
  sub_20AFA9FC0((uint64_t)&v180, &v184, (uint64_t *)(a2 + 592));
  v144 = *(_DWORD *)(v143 + 120);
  if ((v144 & 0x10) != 0)
  {
    v147 = *(_QWORD *)(v143 + 112);
    v148 = *(_QWORD *)(v143 + 72);
    if (v147 < v148)
    {
      *(_QWORD *)(v143 + 112) = v148;
      v147 = v148;
    }
    v149 = *(const void **)(v143 + 64);
    v145 = v147 - (_QWORD)v149;
    if (v147 - (unint64_t)v149 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_368;
  }
  else
  {
    if ((v144 & 8) == 0)
    {
      v145 = 0;
      HIBYTE(v183) = 0;
      v146 = (void **)&__dst;
      goto LABEL_345;
    }
    v149 = *(const void **)(v143 + 40);
    v145 = *(_QWORD *)(v143 + 56) - (_QWORD)v149;
    if (v145 > 0x7FFFFFFFFFFFFFF7)
LABEL_368:
      sub_20AEC0138();
  }
  if (v145 >= 0x17)
  {
    v150 = (v145 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v145 | 7) != 0x17)
      v150 = v145 | 7;
    v151 = v150 + 1;
    v146 = (void **)operator new(v150 + 1);
    v182 = v145;
    v183 = v151 | 0x8000000000000000;
    __dst = (_QWORD **)v146;
  }
  else
  {
    HIBYTE(v183) = v145;
    v146 = (void **)&__dst;
    if (!v145)
      goto LABEL_345;
  }
  memmove(v146, v149, v145);
LABEL_345:
  *((_BYTE *)v146 + v145) = 0;
  v152 = (char *)__p;
  if (__p)
  {
    v153 = MEMORY[0x24BEDB7F0];
    v154 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)__p = *MEMORY[0x24BEDB7F0];
    v155 = *(_QWORD *)(v153 + 72);
    *(_QWORD *)&v152[*(_QWORD *)(v154 - 24)] = *(_QWORD *)(v153 + 64);
    *((_QWORD *)v152 + 3) = MEMORY[0x24BEDB848] + 16;
    *((_QWORD *)v152 + 2) = v155;
    if (v152[111] < 0)
      operator delete(*((void **)v152 + 11));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v152 + 128);
    MEMORY[0x20BD3583C](v152, 0x10B2C40EED050F3);
  }
  v184 = &v171;
  v185 = (void **)&__dst;
  v186 = &v171;
  v187 = (void ***)&__dst;
  v188 = (void **)&__dst;
  if (v174 == -1)
    sub_20AECFAB8();
  __p = &v184;
  ((void (*)(void **, void **))off_24C411C18[v174])(&__p, &v171);
  if (SHIBYTE(v183) < 0)
    operator delete(__dst);
  if (v174 == -1)
    sub_20AECFAB8();
  v184 = (void **)&__dst;
  ((void (*)(void ***__return_ptr, void ***, void **))off_24C411C48[v174])(&v175, &v184, &v171);
  if (v174 != -1)
    ((void (*)(void ***, void **))off_24C411C30[v174])(&v184, &v171);
  if (v177 >= 0)
    v156 = (void **)&v175;
  else
    v156 = v175;
  if (v177 >= 0)
    v157 = HIBYTE(v177);
  else
    v157 = v176;
  sub_20AEC01D0(v142, (uint64_t)v156, v157);
  if (SHIBYTE(v177) < 0)
    operator delete(v175);
LABEL_364:
  v161[0] = 0;
  v161[24] = 0;
  sub_20B20E974((uint64_t)&v165, "space", a2 + 632, (uint64_t)v161);
  v160[0] = 0;
  v160[24] = 0;
  sub_20B20EDAC((uint64_t)&v165, "custom_timestamp", a2 + 688, (uint64_t)v160);
  v159[0] = 0;
  v159[24] = 0;
  sub_20B20EDAC((uint64_t)&v165, "auto_timestamp", a2 + 720, (uint64_t)v159);
  sub_20AEC01D0(a1, (uint64_t)"}", 1);
  return a1;
}

void sub_20B20E758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  if (*(char *)(v44 - 129) < 0)
    operator delete(*(void **)(v44 - 152));
  sub_20B52CE84((uint64_t *)(v44 - 176));
  sub_20AECFA60((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20B20E974(uint64_t a1, char *__s, uint64_t a3, uint64_t a4)
{
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  size_t v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  void *__p[2];
  uint64_t v28;
  _BYTE v29[24];
  int v30;
  void *__dst[2];
  unint64_t v32;
  _QWORD v33[5];
  _QWORD *v34;

  if (!*(_BYTE *)(a3 + 48))
    return;
  if (**(_BYTE **)a1)
    **(_BYTE **)a1 = 0;
  else
    sub_20AEC01D0(*(_QWORD **)(a1 + 8), (uint64_t)",", 1);
  v8 = strlen(__s);
  v9 = sub_20AEC01D0(*(_QWORD **)(a1 + 8), (uint64_t)__s, v8);
  v10 = sub_20AEC01D0(v9, (uint64_t)": ", 2);
  if (!*(_BYTE *)(a4 + 24))
  {
    v30 = 0;
    v11 = operator new();
    *(_QWORD *)(v11 + 272) = 0;
    *(_OWORD *)(v11 + 240) = 0u;
    *(_OWORD *)(v11 + 256) = 0u;
    *(_OWORD *)(v11 + 208) = 0u;
    *(_OWORD *)(v11 + 224) = 0u;
    *(_OWORD *)(v11 + 176) = 0u;
    *(_OWORD *)(v11 + 192) = 0u;
    *(_OWORD *)(v11 + 144) = 0u;
    *(_OWORD *)(v11 + 160) = 0u;
    *(_OWORD *)(v11 + 112) = 0u;
    *(_OWORD *)(v11 + 128) = 0u;
    *(_OWORD *)(v11 + 80) = 0u;
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)v11 = 0u;
    sub_20AEC0BD8(v11);
    v33[0] = v11;
    sub_20B21131C((_QWORD *)(v11 + 16), a3);
    v12 = *(_DWORD *)(v11 + 120);
    if ((v12 & 0x10) != 0)
    {
      v15 = *(_QWORD *)(v11 + 112);
      v16 = *(_QWORD *)(v11 + 72);
      if (v15 < v16)
      {
        *(_QWORD *)(v11 + 112) = v16;
        v15 = v16;
      }
      v17 = *(const void **)(v11 + 64);
      v13 = v15 - (_QWORD)v17;
      if (v15 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_42;
    }
    else
    {
      if ((v12 & 8) == 0)
      {
        v13 = 0;
        HIBYTE(v32) = 0;
        v14 = __dst;
        goto LABEL_22;
      }
      v26 = *(_QWORD *)(v11 + 56);
      v17 = *(const void **)(v11 + 40);
      v13 = v26 - (_QWORD)v17;
      if ((unint64_t)(v26 - (_QWORD)v17) >= 0x7FFFFFFFFFFFFFF8)
LABEL_42:
        sub_20AEC0138();
    }
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      v14 = (void **)operator new(v18 + 1);
      __dst[1] = (void *)v13;
      v32 = v19 | 0x8000000000000000;
      __dst[0] = v14;
    }
    else
    {
      HIBYTE(v32) = v13;
      v14 = __dst;
      if (!v13)
        goto LABEL_22;
    }
    memmove(v14, v17, v13);
LABEL_22:
    *((_BYTE *)v14 + v13) = 0;
    v20 = v33[0];
    if (v33[0])
    {
      v21 = MEMORY[0x24BEDB7F0];
      v22 = *MEMORY[0x24BEDB7F0];
      *(_QWORD *)v33[0] = *MEMORY[0x24BEDB7F0];
      v23 = *(_QWORD *)(v21 + 72);
      *(_QWORD *)(v20 + *(_QWORD *)(v22 - 24)) = *(_QWORD *)(v21 + 64);
      *(_QWORD *)(v20 + 24) = MEMORY[0x24BEDB848] + 16;
      *(_QWORD *)(v20 + 16) = v23;
      if (*(char *)(v20 + 111) < 0)
        operator delete(*(void **)(v20 + 88));
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x20BD35758](v20 + 128);
      MEMORY[0x20BD3583C](v20, 0x10B2C40EED050F3);
    }
    v33[0] = v29;
    v33[1] = __dst;
    v33[2] = v29;
    v33[3] = __dst;
    v33[4] = __dst;
    if (v30 == -1)
      sub_20AECFAB8();
    v34 = v33;
    ((void (*)(_QWORD **, _BYTE *))off_24C411C18[v30])(&v34, v29);
    if (SHIBYTE(v32) < 0)
      operator delete(__dst[0]);
    if (v30 == -1)
      sub_20AECFAB8();
    v33[0] = __dst;
    ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24C411C48[v30])(__p, v33, v29);
    if (v30 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_24C411C30[v30])(v33, v29);
    goto LABEL_32;
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_20AEC60F4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a4;
    v28 = *(_QWORD *)(a4 + 16);
  }
LABEL_32:
  if (v28 >= 0)
    v24 = __p;
  else
    v24 = (void **)__p[0];
  if (v28 >= 0)
    v25 = HIBYTE(v28);
  else
    v25 = (uint64_t)__p[1];
  sub_20AEC01D0(v10, (uint64_t)v24, v25);
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
}

void sub_20B20ECFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  MEMORY[0x20BD3583C](v4, 0x10B2C40EED050F3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B20ED28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B20ED3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B20ED50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  sub_20AECFA60((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_20B20ED90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B20EDAC(uint64_t a1, char *__s, uint64_t a3, uint64_t a4)
{
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  size_t v14;
  void **v15;
  unint64_t v16;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  void *__p[2];
  uint64_t v29;
  _BYTE v30[24];
  int v31;
  void *__dst[2];
  unint64_t v33;
  _QWORD v34[5];
  _QWORD *v35;

  if (!*(_BYTE *)(a3 + 24))
    return;
  if (**(_BYTE **)a1)
    **(_BYTE **)a1 = 0;
  else
    sub_20AEC01D0(*(_QWORD **)(a1 + 8), (uint64_t)",", 1);
  v8 = strlen(__s);
  v9 = sub_20AEC01D0(*(_QWORD **)(a1 + 8), (uint64_t)__s, v8);
  v10 = sub_20AEC01D0(v9, (uint64_t)": ", 2);
  if (!*(_BYTE *)(a4 + 24))
  {
    v31 = 0;
    v11 = operator new();
    *(_QWORD *)(v11 + 272) = 0;
    *(_OWORD *)(v11 + 240) = 0u;
    *(_OWORD *)(v11 + 256) = 0u;
    *(_OWORD *)(v11 + 208) = 0u;
    *(_OWORD *)(v11 + 224) = 0u;
    *(_OWORD *)(v11 + 176) = 0u;
    *(_OWORD *)(v11 + 192) = 0u;
    *(_OWORD *)(v11 + 144) = 0u;
    *(_OWORD *)(v11 + 160) = 0u;
    *(_OWORD *)(v11 + 112) = 0u;
    *(_OWORD *)(v11 + 128) = 0u;
    *(_OWORD *)(v11 + 80) = 0u;
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)v11 = 0u;
    sub_20AEC0BD8(v11);
    v34[0] = v11;
    v12 = (_QWORD *)(v11 + 16);
    if (*(_BYTE *)(a3 + 16))
      sub_20B430618(v12, (uint64_t *)a3);
    else
      sub_20AEC01D0(v12, (uint64_t)"nullopt", 7);
    v13 = *(_DWORD *)(v11 + 120);
    if ((v13 & 0x10) != 0)
    {
      v16 = *(_QWORD *)(v11 + 112);
      v17 = *(_QWORD *)(v11 + 72);
      if (v16 < v17)
      {
        *(_QWORD *)(v11 + 112) = v17;
        v16 = v17;
      }
      v18 = *(const void **)(v11 + 64);
      v14 = v16 - (_QWORD)v18;
      if (v16 - (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_45;
    }
    else
    {
      if ((v13 & 8) == 0)
      {
        v14 = 0;
        HIBYTE(v33) = 0;
        v15 = __dst;
        goto LABEL_25;
      }
      v27 = *(_QWORD *)(v11 + 56);
      v18 = *(const void **)(v11 + 40);
      v14 = v27 - (_QWORD)v18;
      if ((unint64_t)(v27 - (_QWORD)v18) >= 0x7FFFFFFFFFFFFFF8)
LABEL_45:
        sub_20AEC0138();
    }
    if (v14 >= 0x17)
    {
      v19 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v19 = v14 | 7;
      v20 = v19 + 1;
      v15 = (void **)operator new(v19 + 1);
      __dst[1] = (void *)v14;
      v33 = v20 | 0x8000000000000000;
      __dst[0] = v15;
    }
    else
    {
      HIBYTE(v33) = v14;
      v15 = __dst;
      if (!v14)
        goto LABEL_25;
    }
    memmove(v15, v18, v14);
LABEL_25:
    *((_BYTE *)v15 + v14) = 0;
    v21 = v34[0];
    if (v34[0])
    {
      v22 = MEMORY[0x24BEDB7F0];
      v23 = *MEMORY[0x24BEDB7F0];
      *(_QWORD *)v34[0] = *MEMORY[0x24BEDB7F0];
      v24 = *(_QWORD *)(v22 + 72);
      *(_QWORD *)(v21 + *(_QWORD *)(v23 - 24)) = *(_QWORD *)(v22 + 64);
      *(_QWORD *)(v21 + 24) = MEMORY[0x24BEDB848] + 16;
      *(_QWORD *)(v21 + 16) = v24;
      if (*(char *)(v21 + 111) < 0)
        operator delete(*(void **)(v21 + 88));
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x20BD35758](v21 + 128);
      MEMORY[0x20BD3583C](v21, 0x10B2C40EED050F3);
    }
    v34[0] = v30;
    v34[1] = __dst;
    v34[2] = v30;
    v34[3] = __dst;
    v34[4] = __dst;
    if (v31 == -1)
      sub_20AECFAB8();
    v35 = v34;
    ((void (*)(_QWORD **, _BYTE *))off_24C411C18[v31])(&v35, v30);
    if (SHIBYTE(v33) < 0)
      operator delete(__dst[0]);
    if (v31 == -1)
      sub_20AECFAB8();
    v34[0] = __dst;
    ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24C411C48[v31])(__p, v34, v30);
    if (v31 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_24C411C30[v31])(v34, v30);
    goto LABEL_35;
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_20AEC60F4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a4;
    v29 = *(_QWORD *)(a4 + 16);
  }
LABEL_35:
  if (v29 >= 0)
    v25 = __p;
  else
    v25 = (void **)__p[0];
  if (v29 >= 0)
    v26 = HIBYTE(v29);
  else
    v26 = (uint64_t)__p[1];
  sub_20AEC01D0(v10, (uint64_t)v25, v26);
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
}

void sub_20B20F150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  MEMORY[0x20BD3583C](v4, 0x10B2C40EED050F3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B20F17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B20F190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B20F1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  sub_20AECFA60((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_20B20F1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B20F200(_QWORD *a1)
{
  *a1 = &off_24C411BF8;
  sub_20B07AE6C((uint64_t)(a1 + 2));
  return a1;
}

void sub_20B20F230(_QWORD *a1)
{
  *a1 = &off_24C411BF8;
  sub_20B07AE6C((uint64_t)(a1 + 2));
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B20F270(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const void **v12;
  unsigned __int8 *v13;
  _BOOL4 v14;
  _BOOL4 v15;
  size_t v16;
  uint64_t v17;
  void *v18;
  _QWORD *p_dst;
  size_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  int8x8_t v27;
  char v28;
  _BYTE *v30;
  _BYTE *__dst;
  __int128 v32;
  _BYTE __p[24];
  void *v34;
  char v35;
  char v36;
  void *__src;
  size_t __len;
  void *v39[2];
  char v40;
  char v41;
  char *v42;

  __src = a3;
  __len = a4;
  if (*(_BYTE *)(a1 + 80))
  {
    if (!*(_BYTE *)(a1 + 76) || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  if (*(_BYTE *)(a1 + 64))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20AEC60F4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      *(_QWORD *)&__p[16] = *(_QWORD *)(a2 + 16);
    }
    LOBYTE(v34) = 1;
    v7 = sub_20B211A8C(a1 + 16, (uint64_t)__p);
    if ((_BYTE)v34 && (__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (!v7)
      return 0;
  }
  if (*(_BYTE *)(a1 + 128))
  {
    if (!*(_BYTE *)(a1 + 120))
      return 0;
    v8 = *(unsigned __int8 *)(a1 + 111);
    if ((v8 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(a1 + 111);
    else
      v9 = *(_QWORD *)(a1 + 96);
    v10 = *(unsigned __int8 *)(a2 + 23);
    v11 = (char)v10;
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a2 + 8);
    if (v9 != v10)
      return 0;
    v12 = (const void **)(a1 + 88);
    v13 = v11 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*v12, v13, *(_QWORD *)(a1 + 96)))
        return 0;
    }
    else if (*(_BYTE *)(a1 + 111))
    {
      do
      {
        if (*(unsigned __int8 *)v12 != *v13)
          return 0;
        v12 = (const void **)((char *)v12 + 1);
        ++v13;
        --v8;
      }
      while (v8);
    }
    if (*(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  if (*(_BYTE *)(a1 + 168))
  {
    LODWORD(v34) = 0;
    sub_20B210214((uint64_t)&v42, (uint64_t)__p, (uint64_t)&__src);
    if ((_DWORD)v34 == -1)
      sub_20AECFAB8();
    v42 = &v41;
    ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C411C48[v34])(v39, &v42, __p);
    if ((_DWORD)v34 != -1)
      ((void (*)(char **, _BYTE *))off_24C411C30[v34])(&v42, __p);
    v14 = sub_20B20BD68((unsigned __int8 *)(a1 + 136), (unsigned __int8 *)v39);
    v15 = v14;
    if (v40 < 0)
    {
      operator delete(v39[0]);
      if (!v15)
        return 0;
    }
    else if (!v14)
    {
      return 0;
    }
  }
  if (!*(_BYTE *)(a1 + 240))
    return 1;
  v16 = __len;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v17 = a1 + 176;
  v18 = __src;
  if (__len >= 0x17)
  {
    v20 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v20 = __len | 7;
    v21 = v20 + 1;
    p_dst = operator new(v20 + 1);
    *(_QWORD *)&v32 = v16;
    *((_QWORD *)&v32 + 1) = v21 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v32) = __len;
    p_dst = &__dst;
    if (!__len)
      goto LABEL_50;
  }
  memmove(p_dst, v18, v16);
LABEL_50:
  *((_BYTE *)p_dst + v16) = 0;
  *(_QWORD *)&__p[15] = *(_QWORD *)((char *)&v32 + 7);
  v22 = HIBYTE(v32);
  *(_QWORD *)__p = __dst;
  *(_QWORD *)&__p[8] = v32;
  __p[23] = HIBYTE(v32);
  LOBYTE(v34) = 0;
  v36 = 0;
  v23 = __p;
  if (v32 < 0)
  {
    v23 = __dst;
    v22 = *(_QWORD *)&__p[8];
  }
  if (!v22)
    goto LABEL_74;
  v24 = v23;
  if (v22 < 8)
    goto LABEL_80;
  v24 = &v23[v22 & 0xFFFFFFFFFFFFFFF8];
  v25 = v23 + 3;
  v26 = v22 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v27 = vceq_s8(*(int8x8_t *)(v25 - 3), (int8x8_t)0x3A3A3A3A3A3A3A3ALL);
    if ((v27.i8[0] & 1) != 0)
    {
      *(v25 - 3) = 95;
      if ((v27.i8[1] & 1) == 0)
        goto LABEL_58;
    }
    else if ((v27.i8[1] & 1) == 0)
    {
LABEL_58:
      if ((v27.i8[2] & 1) != 0)
        goto LABEL_59;
      goto LABEL_67;
    }
    *(v25 - 2) = 95;
    if ((v27.i8[2] & 1) != 0)
    {
LABEL_59:
      *(v25 - 1) = 95;
      if ((v27.i8[3] & 1) == 0)
        goto LABEL_60;
      goto LABEL_68;
    }
LABEL_67:
    if ((v27.i8[3] & 1) == 0)
    {
LABEL_60:
      if ((v27.i8[4] & 1) != 0)
        goto LABEL_61;
      goto LABEL_69;
    }
LABEL_68:
    *v25 = 95;
    if ((v27.i8[4] & 1) != 0)
    {
LABEL_61:
      v25[1] = 95;
      if ((v27.i8[5] & 1) == 0)
        goto LABEL_62;
      goto LABEL_70;
    }
LABEL_69:
    if ((v27.i8[5] & 1) == 0)
    {
LABEL_62:
      if ((v27.i8[6] & 1) == 0)
        goto LABEL_71;
      goto LABEL_63;
    }
LABEL_70:
    v25[2] = 95;
    if ((v27.i8[6] & 1) == 0)
    {
LABEL_71:
      if ((v27.i8[7] & 1) == 0)
        goto LABEL_55;
      goto LABEL_72;
    }
LABEL_63:
    v25[3] = 95;
    if ((v27.i8[7] & 1) == 0)
      goto LABEL_55;
LABEL_72:
    v25[4] = 95;
LABEL_55:
    v25 += 8;
    v26 -= 8;
  }
  while (v26);
  if (v22 == (v22 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_74;
LABEL_80:
  v30 = &v23[v22];
  do
  {
    if (*v24 == 58)
      *v24 = 95;
    ++v24;
  }
  while (v24 != v30);
LABEL_74:
  v28 = sub_20B20C084(v17, (uint64_t)__p);
  if (v36)
  {
    if (v35 < 0)
      operator delete(v34);
  }
  if ((__p[23] & 0x80000000) == 0)
    return (v28 & 1) != 0;
  operator delete(*(void **)__p);
  return (v28 & 1) != 0;
}

void sub_20B20F6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AF17348((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B20F6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  uint64_t v19;

  if (*(char *)(v19 - 65) < 0)
    operator delete(*(void **)(v19 - 88));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B20F718(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  __int128 *p_p;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unsigned __int128 v40;
  int v41;
  unsigned __int8 v42;
  __int128 __p;
  uint64_t v44;
  int v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  unsigned __int128 v52;
  char v53;
  __int128 __dst;
  uint64_t v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  unsigned __int128 v59;
  char v60;
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v42 = 1;
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(std::__shared_weak_count **)(a2 + 32);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
LABEL_6:
    if (v5)
      goto LABEL_7;
LABEL_14:
    LOBYTE(__p) = 0;
    v46 = 0;
    if (!*(_BYTE *)(a1 + 64))
    {
      v10 = 0;
      goto LABEL_23;
    }
    v10 = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (!v5)
    goto LABEL_14;
LABEL_7:
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v9 = *(_QWORD *)(a2 + 24);
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v9 + 48))(&__dst);
  __p = __dst;
  v44 = v55;
  v45 = v56;
  v10 = 1;
  v46 = 1;
  if (*(_BYTE *)(a1 + 64))
  {
    if (SHIBYTE(v44) < 0)
    {
      sub_20AEC60F4(&__dst, (void *)__p, *((unint64_t *)&__p + 1));
    }
    else
    {
      __dst = __p;
      v55 = v44;
    }
LABEL_17:
    LOBYTE(v56) = v10;
    if ((sub_20B211A8C(a1 + 16, (uint64_t)&__dst) & 1) == 0)
      v42 = 0;
    if ((_BYTE)v56 && SHIBYTE(v55) < 0)
      operator delete((void *)__dst);
  }
  if (!v42)
    goto LABEL_92;
LABEL_23:
  if (*(_BYTE *)(a1 + 80))
  {
    if (v10)
    {
      if (!*(_BYTE *)(a1 + 76) || *(_DWORD *)(a1 + 72) != v45)
        goto LABEL_92;
    }
    else if (*(_BYTE *)(a1 + 76))
    {
      goto LABEL_92;
    }
  }
  if (*(_BYTE *)(a1 + 128))
  {
    if (*(_BYTE *)(a1 + 120) && v10)
    {
      v11 = *(unsigned __int8 *)(a1 + 111);
      if ((v11 & 0x80u) == 0)
        v12 = *(unsigned __int8 *)(a1 + 111);
      else
        v12 = *(_QWORD *)(a1 + 96);
      v13 = HIBYTE(v44);
      if (v44 < 0)
        v13 = *((_QWORD *)&__p + 1);
      if (v12 != v13)
        goto LABEL_92;
      v14 = (const void **)(a1 + 88);
      if (v44 >= 0)
        p_p = &__p;
      else
        p_p = (__int128 *)__p;
      if ((v11 & 0x80) != 0)
      {
        if (memcmp(*v14, p_p, *(_QWORD *)(a1 + 96)))
          goto LABEL_92;
      }
      else if (*(_BYTE *)(a1 + 111))
      {
        while (*(unsigned __int8 *)v14 == *(unsigned __int8 *)p_p)
        {
          v14 = (const void **)((char *)v14 + 1);
          p_p = (__int128 *)((char *)p_p + 1);
          if (!--v11)
            goto LABEL_50;
        }
        goto LABEL_92;
      }
LABEL_50:
      if (*(_DWORD *)(a1 + 112) != v45)
        goto LABEL_92;
    }
    else if ((*(_BYTE *)(a1 + 120) != 0) != (v10 != 0))
    {
      goto LABEL_92;
    }
  }
  if (*(_BYTE *)(a1 + 168) && !sub_20B20BD68((unsigned __int8 *)(a1 + 136), *(unsigned __int8 **)a2))
    goto LABEL_92;
  v17 = *(_QWORD *)(a2 + 24);
  v16 = *(std::__shared_weak_count **)(a2 + 32);
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v17)
  {
    v21 = *(_QWORD *)(a2 + 24);
    if (!v21)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v21 = *(_QWORD *)(a2 + 24);
    }
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    if (!*(_BYTE *)(a1 + 240))
      goto LABEL_67;
  }
  else
  {
    v22 = 0;
    if (!*(_BYTE *)(a1 + 240))
      goto LABEL_67;
  }
  if ((sub_20B20C084(a1 + 176, *(_QWORD *)a2) & 1) == 0)
    goto LABEL_92;
LABEL_67:
  if (*(_BYTE *)(a1 + 272))
  {
    v24 = *(_QWORD *)(a2 + 24);
    v23 = *(std::__shared_weak_count **)(a2 + 32);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (!v24)
      goto LABEL_84;
    v29 = *(_QWORD *)(a1 + 256);
    v28 = *(std::__shared_weak_count **)(a1 + 264);
    if (v28)
    {
      v30 = (unint64_t *)&v28->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      do
        v32 = __ldaxr(v30);
      while (__stlxr(v32 - 1, v30));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v29)
    {
      if ((sub_20B216F74(a1 + 248, a2 + 16) & 1) == 0)
        goto LABEL_92;
    }
    else
    {
LABEL_84:
      v34 = *(_QWORD *)(a2 + 24);
      v33 = *(std::__shared_weak_count **)(a2 + 32);
      if (v33)
      {
        v35 = (unint64_t *)&v33->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        do
          v37 = __ldaxr(v35);
        while (__stlxr(v37 - 1, v35));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (v34 || sub_20B20C874(*(_QWORD *)(a1 + 256), *(std::__shared_weak_count **)(a1 + 264)))
        goto LABEL_92;
    }
  }
  v38 = v42;
  if (*(_BYTE *)(a1 + 328))
  {
    if (v17)
    {
      sub_20B2110EC(&__dst, (__int128 *)(v22 + 16));
    }
    else
    {
      LOBYTE(__dst) = 0;
      LOBYTE(v56) = 0;
    }
    if ((sub_20B211A8C(a1 + 280, (uint64_t)&__dst) & 1) == 0)
    {
      v38 = 0;
      v42 = 0;
    }
    if ((_BYTE)v56 && SHIBYTE(v55) < 0)
      operator delete((void *)__dst);
    if (!v38)
      goto LABEL_93;
  }
  if (*(_BYTE *)(a1 + 432))
  {
    if (v17)
    {
      sub_20B211174(&__dst, (__int128 *)(v22 + 112));
    }
    else
    {
      LOBYTE(__dst) = 0;
      LOBYTE(v58) = 0;
    }
    if ((sub_20B211CEC(a1 + 336, (uint64_t)&__dst) & 1) == 0)
    {
      v38 = 0;
      v42 = 0;
    }
    if ((_BYTE)v58 && SHIBYTE(v55) < 0)
      operator delete((void *)__dst);
    if (!v38)
      goto LABEL_93;
  }
  if (*(_BYTE *)(a1 + 592))
  {
    if (v17 && (*(_BYTE *)(v22 + 40) || *(_BYTE *)(v22 + 160)))
    {
      sub_20B20C8F4((uint64_t)&v47, v22);
      LOBYTE(__dst) = 0;
      LOBYTE(v56) = 0;
      if (v49)
      {
        __dst = v47;
        v55 = v48;
        v48 = 0;
        v47 = 0uLL;
        LOBYTE(v56) = 1;
      }
      LOBYTE(v57) = 0;
      v60 = 0;
      if (v53)
      {
        v57 = v50;
        v58 = v51;
        v51 = 0;
        v50 = 0uLL;
        do
          v40 = __ldaxp(&v52);
        while (__stlxp(v40, &v52));
        v59 = v40;
        v41 = 1;
        v60 = 1;
      }
      else
      {
        v41 = 1;
      }
    }
    else
    {
      v41 = 0;
      LOBYTE(__dst) = 0;
    }
    v61 = v41;
    if ((sub_20B212060(a1 + 448, (uint64_t)&__dst) & 1) != 0)
    {
      sub_20B211210((uint64_t)&__dst);
      if (!v41)
        goto LABEL_131;
    }
    else
    {
      v42 = 0;
      sub_20B211210((uint64_t)&__dst);
      if (!v41)
      {
LABEL_131:
        v38 = v42;
        if (!v42)
          goto LABEL_93;
        goto LABEL_135;
      }
    }
    sub_20AFA5678((uint64_t)&v47);
    v38 = v42;
    if (!v42)
      goto LABEL_93;
  }
LABEL_135:
  if (*(_BYTE *)(a1 + 696))
  {
    if (v17)
    {
      sub_20B2110EC(&__dst, (__int128 *)(v22 + 48));
    }
    else
    {
      LOBYTE(__dst) = 0;
      LOBYTE(v56) = 0;
    }
    if ((sub_20B211A8C(a1 + 648, (uint64_t)&__dst) & 1) == 0)
    {
      v38 = 0;
      v42 = 0;
    }
    if ((_BYTE)v56 && SHIBYTE(v55) < 0)
      operator delete((void *)__dst);
    if (!v38)
      goto LABEL_93;
  }
  if (*(_BYTE *)(a1 + 640))
  {
    if (v17)
    {
      sub_20AED3838((uint64_t)&__dst, v22 + 176);
    }
    else
    {
      LOBYTE(__dst) = 0;
      LOBYTE(v56) = 0;
    }
    sub_20B211C44((uint64_t)&v42, a1 + 608, (uint64_t)&__dst);
    sub_20B211278((uint64_t)&__dst);
    LOBYTE(v38) = v42;
    if (!v42)
      goto LABEL_93;
  }
  if (*(_BYTE *)(a1 + 728))
  {
    if (!v17)
    {
      if (*(_BYTE *)(a1 + 720) || *(_BYTE *)(a1 + 760) && *(_BYTE *)(a1 + 752))
        goto LABEL_92;
      goto LABEL_93;
    }
    if (*(_BYTE *)(v22 + 96) && *(_BYTE *)(a1 + 720))
    {
      if (*(_QWORD *)(a1 + 704) != *(_QWORD *)(v22 + 80)
        || *(unsigned __int8 *)(a1 + 712) != *(unsigned __int8 *)(v22 + 88))
      {
        goto LABEL_92;
      }
    }
    else if ((*(_BYTE *)(v22 + 96) != 0) != (*(_BYTE *)(a1 + 720) != 0))
    {
      goto LABEL_92;
    }
  }
  if (!*(_BYTE *)(a1 + 760))
    goto LABEL_93;
  if (!v17)
  {
    if (!*(_BYTE *)(a1 + 752))
      goto LABEL_93;
    goto LABEL_92;
  }
  if (!*(_BYTE *)(a1 + 752)
    || *(_QWORD *)(a1 + 736) != *(_QWORD *)v22
    || *(unsigned __int8 *)(a1 + 744) != *(unsigned __int8 *)(v22 + 8))
  {
LABEL_92:
    LOBYTE(v38) = 0;
  }
LABEL_93:
  if (v46 && SHIBYTE(v44) < 0)
    operator delete((void *)__p);
  return v38 & 1;
}

void sub_20B20FFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48)
{
  if (a46)
  {
    if (a44 < 0)
      operator delete(__p);
  }
  sub_20B211504((uint64_t)&a29);
  sub_20B211504((uint64_t)&a20);
  sub_20B210080((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B210080(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 72))
    return a1;
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (!*(_BYTE *)(a1 + 24) || (*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_20B2100E8(_QWORD *a1, uint64_t a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_20B2123E0((uint64_t)&v12, (uint64_t)v9, a2 + 16);
  if (v10 == -1)
    sub_20AECFAB8();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C411C48[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C411C30[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_20AEC01D0(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20B2101D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B2101EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B210200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B210214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v3;
  const void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__dst[2];
  unint64_t v11;
  _QWORD v12[5];
  _QWORD *v13;

  v3 = *(_QWORD *)(a3 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = *(const void **)a3;
  if (v3 >= 0x17)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v7 = v3 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)v3;
    v11 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v11) = *(_QWORD *)(a3 + 8);
  v6 = __dst;
  if (v3)
LABEL_8:
    memmove(v6, v5, v3);
  *((_BYTE *)v6 + v3) = 0;
  v12[0] = a2;
  v12[1] = __dst;
  v12[2] = a2;
  v12[3] = __dst;
  v12[4] = __dst;
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    sub_20AECFAB8();
  v13 = v12;
  ((void (*)(_QWORD **, uint64_t))off_24C411C18[v9])(&v13, a2);
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20B21032C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B210348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__dst[2];
  unint64_t v22;
  _QWORD v23[5];
  _QWORD *v24;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20AEC0BD8(v4);
  v23[0] = v4;
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  sub_20AEC01D0((_QWORD *)(v4 + 16), v6, v7);
  v8 = *(_DWORD *)(v4 + 120);
  if ((v8 & 0x10) != 0)
  {
    v11 = *(_QWORD *)(v4 + 112);
    v12 = *(_QWORD *)(v4 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v4 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v4 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_28;
  }
  else
  {
    if ((v8 & 8) == 0)
    {
      v9 = 0;
      HIBYTE(v22) = 0;
      v10 = __dst;
      goto LABEL_20;
    }
    v13 = *(const void **)(v4 + 40);
    v9 = *(_QWORD *)(v4 + 56) - (_QWORD)v13;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_28:
      sub_20AEC0138();
  }
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_19;
  }
  HIBYTE(v22) = v9;
  v10 = __dst;
  if (v9)
LABEL_19:
    memmove(v10, v13, v9);
LABEL_20:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v23[0];
  if (v23[0])
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v23[0] = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)(v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    *(_QWORD *)(v16 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v16 + 16) = v19;
    if (*(char *)(v16 + 111) < 0)
      operator delete(*(void **)(v16 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v16 + 128);
    MEMORY[0x20BD3583C](v16, 0x10B2C40EED050F3);
  }
  v23[0] = a1;
  v23[1] = __dst;
  v23[2] = a1;
  v23[3] = __dst;
  v23[4] = __dst;
  v20 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v20 == -1)
    sub_20AECFAB8();
  v24 = v23;
  ((void (*)(_QWORD **, uint64_t))off_24C411C18[v20])(&v24, a1);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
}

void sub_20B2105AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B2105D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B2105EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B210600(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  _BOOL4 v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 **v15;
  BOOL v16;
  char v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL4 v73;
  _BOOL4 v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  _BOOL4 v78;
  _BOOL4 v79;
  BOOL v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  BOOL v85;
  int v86;
  int v87;
  uint64_t v88;
  size_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  const void **v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  int v105;
  int v106;
  uint64_t v107;
  size_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  const void **v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  char v124;
  uint64_t v125;
  uint64_t v126;

  v5 = *(unsigned __int8 *)(*a3 + 48);
  if (*(_BYTE *)(*a2 + 48))
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if ((*(_BYTE *)(*a2 + 48) != 0) != (v5 != 0))
      return 0;
  }
  else if (!sub_20B210F74(*a2, *a3))
  {
    return 0;
  }
  v8 = a2[1];
  v9 = a3[1];
  v10 = *(_BYTE *)(v8 + 8) != 0;
  v11 = *(_BYTE *)(v9 + 8) != 0;
  if (*(_BYTE *)(v8 + 8))
    v12 = *(_BYTE *)(v9 + 8) == 0;
  else
    v12 = 1;
  if (v12
    || ((v10 = *(_BYTE *)(v8 + 4) != 0, v11 = *(_BYTE *)(v9 + 4) != 0, *(_BYTE *)(v8 + 4))
      ? (v13 = *(_BYTE *)(v9 + 4) == 0)
      : (v13 = 1),
        v13))
  {
    if (((v10 ^ v11) & 1) != 0)
      return 0;
  }
  else if (*(_DWORD *)v8 != *(_DWORD *)v9)
  {
    return 0;
  }
  v14 = a2[2];
  v15 = (unsigned __int8 **)a3[2];
  if (*(_BYTE *)(v14 + 40))
    v16 = *((_BYTE *)v15 + 40) == 0;
  else
    v16 = 1;
  if (v16)
  {
    v17 = (*(_BYTE *)(v14 + 40) != 0) ^ (*((_BYTE *)v15 + 40) != 0);
  }
  else
  {
    v17 = (*(_BYTE *)(v14 + 32) != 0) ^ (*((_BYTE *)v15 + 32) != 0);
    if (*(_BYTE *)(v14 + 32) && *((_BYTE *)v15 + 32))
    {
      v22 = *(unsigned __int8 *)(v14 + 23);
      if ((v22 & 0x80u) == 0)
        v23 = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 23);
      else
        v23 = *(unsigned __int8 **)(v14 + 8);
      v24 = (unsigned __int8 *)*((unsigned __int8 *)v15 + 23);
      v25 = (char)v24;
      if ((char)v24 < 0)
        v24 = v15[1];
      if (v23 != v24)
        return 0;
      if (v25 >= 0)
        v26 = (unsigned __int8 *)a3[2];
      else
        v26 = *v15;
      if ((v22 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v14, v26, *(_QWORD *)(v14 + 8)))
          return 0;
      }
      else if (*(_BYTE *)(v14 + 23))
      {
        v27 = (unsigned __int8 *)a2[2];
        while (*v27 == *v26)
        {
          ++v27;
          ++v26;
          if (!--v22)
            goto LABEL_84;
        }
        return 0;
      }
LABEL_84:
      if (*(_DWORD *)(v14 + 24) != *((_DWORD *)v15 + 6))
        return 0;
      goto LABEL_29;
    }
  }
  if ((v17 & 1) != 0)
    return 0;
LABEL_29:
  v18 = (unsigned __int8 *)a2[3];
  v19 = (unsigned __int8 *)a3[3];
  v20 = v19[32];
  if (v18[32])
    v21 = v20 == 0;
  else
    v21 = 1;
  if (v21)
  {
    if ((v18[32] != 0) != (v20 != 0))
      return 0;
  }
  else if (!sub_20B20BF3C(v18, v19))
  {
    return 0;
  }
  v28 = (unsigned __int8 *)a2[4];
  v29 = (unsigned __int8 *)a3[4];
  v30 = v29[64];
  if (v28[64])
    v31 = v30 == 0;
  else
    v31 = 1;
  if (v31)
  {
    if ((v28[64] != 0) != (v30 != 0))
      return 0;
  }
  else
  {
    v36 = *((_DWORD *)v28 + 14);
    v37 = *((_DWORD *)v29 + 14);
    if (v36)
    {
      if (v37 != 1)
        return 0;
      if (v36 != 1)
        goto LABEL_250;
      v38 = v28[23];
      if ((v38 & 0x80u) == 0)
        v39 = v28[23];
      else
        v39 = *((_QWORD *)v28 + 1);
      v40 = v29[23];
      v41 = (char)v40;
      if ((v40 & 0x80u) != 0)
        v40 = *((_QWORD *)v29 + 1);
      if (v39 != v40)
        return 0;
      if (v41 < 0)
        v29 = *(unsigned __int8 **)v29;
      if ((v38 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v28, v29, *((_QWORD *)v28 + 1)))
          return 0;
      }
      else if (v28[23])
      {
        while (*v28 == *v29)
        {
          ++v28;
          ++v29;
          if (!--v38)
            goto LABEL_60;
        }
        return 0;
      }
    }
    else if (v37 || (sub_20B0BFCC0(v28, v29) & 1) == 0)
    {
      return 0;
    }
  }
LABEL_60:
  v32 = a2[5];
  v33 = a3[5];
  v34 = *(unsigned __int8 *)(v33 + 24);
  if (*(_BYTE *)(v32 + 24))
    v35 = v34 == 0;
  else
    v35 = 1;
  if (v35)
  {
    if ((*(_BYTE *)(v32 + 24) != 0) != (v34 != 0))
      return 0;
    goto LABEL_125;
  }
  v43 = *(_QWORD *)(v32 + 8);
  v42 = *(std::__shared_weak_count **)(v32 + 16);
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v45 = __ldxr(p_shared_owners);
    while (__stxr(v45 + 1, p_shared_owners));
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v43)
  {
    v48 = *(_QWORD *)(v33 + 8);
    v47 = *(std::__shared_weak_count **)(v33 + 16);
    if (v47)
    {
      v49 = (unint64_t *)&v47->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
      do
        v51 = __ldaxr(v49);
      while (__stlxr(v51 - 1, v49));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v52 = *(_QWORD *)(v32 + 8);
    if (v48)
    {
      if (v52)
        goto LABEL_108;
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 228, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
      {
        v52 = *(_QWORD *)(v32 + 8);
        if (v52)
          goto LABEL_108;
        if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
        {
          v52 = *(_QWORD *)(v32 + 8);
LABEL_108:
          if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 24))(v33, v52) & 1) == 0)
            return 0;
          goto LABEL_125;
        }
      }
      abort();
    }
  }
  else
  {
    v52 = *(_QWORD *)(v32 + 8);
  }
  v53 = *(std::__shared_weak_count **)(v32 + 16);
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
    do
      v56 = __ldaxr(v54);
    while (__stlxr(v56 - 1, v54));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v52)
    return 0;
  v58 = *(_QWORD *)(v33 + 8);
  v57 = *(std::__shared_weak_count **)(v33 + 16);
  if (v57)
  {
    v59 = (unint64_t *)&v57->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
    do
      v61 = __ldaxr(v59);
    while (__stlxr(v61 - 1, v59));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (v58)
    return 0;
LABEL_125:
  v62 = a2[6];
  v63 = a3[6];
  v64 = *(unsigned __int8 *)(v63 + 48);
  if (*(_BYTE *)(v62 + 48))
    v65 = v64 == 0;
  else
    v65 = 1;
  if (v65)
  {
    if ((*(_BYTE *)(v62 + 48) != 0) != (v64 != 0))
      return 0;
  }
  else if (!sub_20B210F74(v62, v63))
  {
    return 0;
  }
  v66 = a2[7];
  v67 = a3[7];
  v68 = *(unsigned __int8 *)(v66 + 96);
  v69 = *(unsigned __int8 *)(v67 + 96);
  if (*(_BYTE *)(v66 + 96))
    v70 = v69 == 0;
  else
    v70 = 1;
  if (v70)
    goto LABEL_138;
  v86 = *(_DWORD *)(v66 + 80);
  v87 = *(_DWORD *)(v67 + 80);
  if (v86)
  {
    if (v87 != 1)
      return 0;
    if (v86 != 1)
      goto LABEL_250;
    v88 = *(unsigned __int8 *)(v66 + 39);
    v89 = *(_QWORD *)(v66 + 24);
    if ((v88 & 0x80u) == 0)
      v90 = *(unsigned __int8 *)(v66 + 39);
    else
      v90 = *(_QWORD *)(v66 + 24);
    v91 = *(unsigned __int8 *)(v67 + 39);
    v92 = (char)v91;
    if ((v91 & 0x80u) != 0)
      v91 = *(_QWORD *)(v67 + 24);
    if (v90 != v91)
      return 0;
    v93 = (const void **)(v66 + 16);
    v96 = *(unsigned __int8 **)(v67 + 16);
    v94 = (unsigned __int8 *)(v67 + 16);
    v95 = v96;
    if (v92 >= 0)
      v97 = v94;
    else
      v97 = v95;
    if ((v88 & 0x80) == 0)
    {
      if ((_DWORD)v88)
      {
        while (*(unsigned __int8 *)v93 == *v97)
        {
          v93 = (const void **)((char *)v93 + 1);
          ++v97;
          if (!--v88)
            goto LABEL_139;
        }
        return 0;
      }
      goto LABEL_139;
    }
LABEL_222:
    if (memcmp(*v93, v97, v89))
      return 0;
    goto LABEL_139;
  }
  if (v87)
    return 0;
  v68 = *(unsigned __int8 *)(v66 + 64);
  v69 = *(unsigned __int8 *)(v67 + 64);
  if (!*(_BYTE *)(v66 + 64) || !*(_BYTE *)(v67 + 64))
  {
LABEL_138:
    if ((v68 != 0) != (v69 != 0))
      return 0;
    goto LABEL_139;
  }
  v98 = *(unsigned __int8 *)(v66 + 39);
  v89 = *(_QWORD *)(v66 + 24);
  if ((v98 & 0x80u) == 0)
    v99 = *(unsigned __int8 *)(v66 + 39);
  else
    v99 = *(_QWORD *)(v66 + 24);
  v100 = *(unsigned __int8 *)(v67 + 39);
  v101 = (char)v100;
  if ((v100 & 0x80u) != 0)
    v100 = *(_QWORD *)(v67 + 24);
  if (v99 != v100)
    return 0;
  v93 = (const void **)(v66 + 16);
  v104 = *(unsigned __int8 **)(v67 + 16);
  v102 = (unsigned __int8 *)(v67 + 16);
  v103 = v104;
  if (v101 >= 0)
    v97 = v102;
  else
    v97 = v103;
  if ((v98 & 0x80) != 0)
    goto LABEL_222;
  if ((_DWORD)v98)
  {
    while (*(unsigned __int8 *)v93 == *v97)
    {
      v93 = (const void **)((char *)v93 + 1);
      ++v97;
      if (!--v98)
        goto LABEL_139;
    }
    return 0;
  }
LABEL_139:
  v71 = a2[8];
  v72 = a3[8];
  v73 = *(_BYTE *)(v71 + 144) != 0;
  v74 = *(_BYTE *)(v72 + 144) != 0;
  if (*(_BYTE *)(v71 + 144))
    v75 = *(_BYTE *)(v72 + 144) == 0;
  else
    v75 = 1;
  if (v75)
    goto LABEL_144;
  v105 = *(_DWORD *)(v71 + 128);
  v106 = *(_DWORD *)(v72 + 128);
  if (v105)
  {
    if (v106 != 1)
      return 0;
    if (v105 == 1)
    {
      v107 = *(unsigned __int8 *)(v71 + 39);
      v108 = *(_QWORD *)(v71 + 24);
      if ((v107 & 0x80u) == 0)
        v109 = *(unsigned __int8 *)(v71 + 39);
      else
        v109 = *(_QWORD *)(v71 + 24);
      v110 = *(unsigned __int8 *)(v72 + 39);
      v111 = (char)v110;
      if ((v110 & 0x80u) != 0)
        v110 = *(_QWORD *)(v72 + 24);
      if (v109 != v110)
        return 0;
      v112 = (const void **)(v71 + 16);
      v115 = *(unsigned __int8 **)(v72 + 16);
      v113 = (unsigned __int8 *)(v72 + 16);
      v114 = v115;
      if (v111 >= 0)
        v116 = v113;
      else
        v116 = v114;
      if ((v107 & 0x80) != 0)
      {
        if (memcmp(*v112, v116, v108))
          return 0;
      }
      else if ((_DWORD)v107)
      {
        while (*(unsigned __int8 *)v112 == *v116)
        {
          v112 = (const void **)((char *)v112 + 1);
          ++v116;
          if (!--v107)
            goto LABEL_145;
        }
        return 0;
      }
      goto LABEL_145;
    }
LABEL_250:
    sub_20AECFAB8();
  }
  if (v106)
    return 0;
  v73 = *(_BYTE *)(v71 + 112) != 0;
  v74 = *(_BYTE *)(v72 + 112) != 0;
  if (!*(_BYTE *)(v71 + 112) || *(_BYTE *)(v72 + 112) == 0)
  {
LABEL_144:
    if (((v73 ^ v74) & 1) != 0)
      return 0;
  }
  else if ((sub_20B2167B8((unsigned __int8 *)(v71 + 16), (unsigned __int8 *)(v72 + 16)) & 1) == 0)
  {
    return 0;
  }
LABEL_145:
  v76 = a2[9];
  v77 = a3[9];
  v78 = *(_BYTE *)(v76 + 32) != 0;
  v79 = *(_BYTE *)(v77 + 32) != 0;
  if (*(_BYTE *)(v76 + 32))
    v80 = *(_BYTE *)(v77 + 32) == 0;
  else
    v80 = 1;
  if (v80
    || ((v78 = *(_BYTE *)(v76 + 24) != 0, v79 = *(_BYTE *)(v77 + 24) != 0, *(_BYTE *)(v76 + 24))
      ? (v81 = *(_BYTE *)(v77 + 24) == 0)
      : (v81 = 1),
        v81))
  {
    if (((v78 ^ v79) & 1) != 0)
      return 0;
  }
  else
  {
    v118 = *(unsigned __int8 **)v76;
    v119 = *(unsigned __int8 **)(v76 + 8);
    v120 = *(unsigned __int8 **)v77;
    if (&v119[-*(_QWORD *)v76] != (unsigned __int8 *)(*(_QWORD *)(v77 + 8) - *(_QWORD *)v77))
      return 0;
    for (; v118 != v119; v120 += 96)
    {
      result = sub_20B2167B8(v118, v120);
      if (!(_DWORD)result)
        return result;
      v118 += 96;
    }
  }
  v82 = a2[10];
  v83 = a3[10];
  v84 = *(unsigned __int8 *)(v83 + 48);
  if (*(_BYTE *)(v82 + 48))
    v85 = v84 == 0;
  else
    v85 = 1;
  if (v85)
  {
    if ((*(_BYTE *)(v82 + 48) != 0) != (v84 != 0))
      return 0;
  }
  else if (!sub_20B210F74(v82, v83))
  {
    return 0;
  }
  v121 = a2[11];
  v122 = a3[11];
  if (*(_BYTE *)(v121 + 24))
    v123 = *(_BYTE *)(v122 + 24) == 0;
  else
    v123 = 1;
  if (v123)
  {
    v124 = (*(_BYTE *)(v121 + 24) != 0) ^ (*(_BYTE *)(v122 + 24) != 0);
    goto LABEL_241;
  }
  v124 = (*(_BYTE *)(v121 + 16) != 0) ^ (*(_BYTE *)(v122 + 16) != 0);
  if (!*(_BYTE *)(v121 + 16) || !*(_BYTE *)(v122 + 16))
  {
LABEL_241:
    if ((v124 & 1) == 0)
      goto LABEL_242;
    return 0;
  }
  if (*(_QWORD *)v121 != *(_QWORD *)v122 || *(unsigned __int8 *)(v121 + 8) != *(unsigned __int8 *)(v122 + 8))
    return 0;
LABEL_242:
  v125 = a2[12];
  v126 = a3[12];
  result = (*(_BYTE *)(v125 + 24) != 0) == (*(_BYTE *)(v126 + 24) != 0);
  if (*(_BYTE *)(v125 + 24))
  {
    if (*(_BYTE *)(v126 + 24))
    {
      result = (*(_BYTE *)(v125 + 16) != 0) == (*(_BYTE *)(v126 + 16) != 0);
      if (*(_BYTE *)(v125 + 16))
      {
        if (*(_BYTE *)(v126 + 16))
        {
          if (*(_QWORD *)v125 == *(_QWORD *)v126)
            return *(unsigned __int8 *)(v125 + 8) == *(unsigned __int8 *)(v126 + 8);
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL sub_20B210F74(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const void **v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  char v19;
  _BOOL8 result;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  char v31;

  v2 = *(_DWORD *)(a1 + 40);
  v3 = *(_DWORD *)(a2 + 40);
  if (v2)
  {
    if (v3 == 1)
    {
      if (v2 != 1)
        sub_20AECFAB8();
      v4 = *(unsigned __int8 *)(a1 + 31);
      v5 = *(_QWORD *)(a1 + 16);
      if ((v4 & 0x80u) == 0)
        v6 = *(unsigned __int8 *)(a1 + 31);
      else
        v6 = *(_QWORD *)(a1 + 16);
      v7 = *(unsigned __int8 *)(a2 + 31);
      v8 = (char)v7;
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(a2 + 16);
      if (v6 == v7)
      {
        v9 = (const void **)(a1 + 8);
        v12 = *(unsigned __int8 **)(a2 + 8);
        v10 = (unsigned __int8 *)(a2 + 8);
        v11 = v12;
        if (v8 < 0)
          v10 = v11;
        if ((v4 & 0x80) == 0)
        {
          if (*(_BYTE *)(a1 + 31))
          {
            v13 = v4 - 1;
            do
            {
              v15 = *(unsigned __int8 *)v9;
              v9 = (const void **)((char *)v9 + 1);
              v14 = v15;
              v17 = *v10++;
              v16 = v17;
              v18 = v13-- != 0;
              v19 = v18;
              result = v14 == v16;
            }
            while (v14 == v16 && (v19 & 1) != 0);
            return result;
          }
          return 1;
        }
        return memcmp(*v9, v10, v5) == 0;
      }
    }
    return 0;
  }
  if (v3)
    return 0;
  if (*(_BYTE *)(a1 + 32))
    v21 = *(_BYTE *)(a2 + 32) == 0;
  else
    v21 = 1;
  if (v21)
    return (*(_BYTE *)(a1 + 32) != 0) == (*(_BYTE *)(a2 + 32) != 0);
  v22 = *(unsigned __int8 *)(a1 + 31);
  v5 = *(_QWORD *)(a1 + 16);
  if ((v22 & 0x80u) == 0)
    v23 = *(unsigned __int8 *)(a1 + 31);
  else
    v23 = *(_QWORD *)(a1 + 16);
  v24 = *(unsigned __int8 *)(a2 + 31);
  v25 = (char)v24;
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a2 + 16);
  if (v23 != v24)
    return 0;
  v9 = (const void **)(a1 + 8);
  if (v25 >= 0)
    v10 = (unsigned __int8 *)(a2 + 8);
  else
    v10 = *(unsigned __int8 **)(a2 + 8);
  if ((v22 & 0x80) != 0)
    return memcmp(*v9, v10, v5) == 0;
  if (!*(_BYTE *)(a1 + 31))
    return 1;
  v26 = v22 - 1;
  do
  {
    v28 = *(unsigned __int8 *)v9;
    v9 = (const void **)((char *)v9 + 1);
    v27 = v28;
    v30 = *v10++;
    v29 = v30;
    v18 = v26-- != 0;
    v31 = v18;
    result = v27 == v29;
  }
  while (v27 == v29 && (v31 & 1) != 0);
  return result;
}

_BYTE *sub_20B2110EC(_BYTE *__dst, __int128 *a2)
{
  __int128 v3;

  *__dst = 0;
  __dst[24] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v3;
    }
    __dst[24] = 1;
  }
  return __dst;
}

void sub_20B211150(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B211174(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;
  unsigned __int128 *v5;
  unsigned __int128 v6;

  *__dst = 0;
  __dst[48] = 0;
  if (*((_BYTE *)a2 + 48))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    v5 = (unsigned __int128 *)(a2 + 2);
    do
      v6 = __ldaxp(v5);
    while (__stlxp(v6, v5));
    *((_OWORD *)__dst + 2) = v6;
    __dst[48] = 1;
  }
  return __dst;
}

void sub_20B2111EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 48))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B211210(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 96))
    return a1;
  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (!*(_BYTE *)(a1 + 24) || (*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20B211278(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(void ***)a1;
    if (*(_QWORD *)a1)
    {
      v3 = *(void ***)(a1 + 8);
      v4 = *(void ***)a1;
      if (v3 == v2)
      {
LABEL_14:
        *(_QWORD *)(a1 + 8) = v2;
        operator delete(v4);
        return a1;
      }
      while (1)
      {
        if (*((_BYTE *)v3 - 16) && *((char *)v3 - 41) < 0)
        {
          operator delete(*(v3 - 8));
          if (*((_BYTE *)v3 - 72))
          {
LABEL_9:
            if (*((char *)v3 - 73) < 0)
              operator delete(*(v3 - 12));
          }
        }
        else if (*((_BYTE *)v3 - 72))
        {
          goto LABEL_9;
        }
        v3 -= 12;
        if (v3 == v2)
        {
          v4 = *(void ***)a1;
          goto LABEL_14;
        }
      }
    }
  }
  return a1;
}

_QWORD *sub_20B21131C(_QWORD *a1, uint64_t a2)
{
  int v3;
  void *p_p;
  uint64_t v5;
  _QWORD *result;
  _QWORD *v7;
  void *__p;
  uint64_t v9;
  unsigned __int8 v10;

  v3 = *(_DWORD *)(a2 + 40);
  if (v3)
  {
    if (v3 != 1)
      sub_20AECFAB8();
    sub_20B20C51C(a2 + 8);
    if ((v10 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v10 & 0x80u) == 0)
      v5 = v10;
    else
      v5 = v9;
  }
  else
  {
    sub_20B211404((__int128 *)(a2 + 8));
    if ((v10 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v10 & 0x80u) == 0)
      v5 = v10;
    else
      v5 = v9;
  }
  result = sub_20AEC01D0(a1, (uint64_t)p_p, v5);
  v7 = result;
  if ((char)v10 < 0)
  {
    operator delete(__p);
    return v7;
  }
  return result;
}

void sub_20B2113E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B211404(__int128 *a1)
{
  int v1;
  uint64_t result;
  __int128 v3;
  uint64_t v4;
  int v5;
  char v6;
  char *v7;

  v5 = 0;
  if (*((_BYTE *)a1 + 24))
  {
    v5 = -1;
    if (*((char *)a1 + 23) < 0)
    {
      sub_20AEC60F4(&v3, *(void **)a1, *((_QWORD *)a1 + 1));
    }
    else
    {
      v3 = *a1;
      v4 = *((_QWORD *)a1 + 2);
    }
    v1 = 1;
    v5 = 1;
  }
  else
  {
    sub_20AED0170(&v3, "nullopt");
    v1 = v5;
    if (v5 == -1)
      sub_20AECFAB8();
  }
  v7 = &v6;
  result = ((uint64_t (*)(char **, __int128 *))off_24C411C48[v1])(&v7, &v3);
  if (v5 != -1)
    return ((uint64_t (*)(char **, __int128 *))off_24C411C30[v5])(&v7, &v3);
  return result;
}

void sub_20B2114D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B2114F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B211504(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if (!*(_BYTE *)(a1 + 24))
      return a1;
  }
  else if (!*(_BYTE *)(a1 + 24))
  {
    return a1;
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

_DWORD *sub_20B211570(_DWORD ***a1)
{
  return sub_20AEF7138(**a1, (char *)(*a1)[1]);
}

void sub_20B21157C(uint64_t a1, uint64_t a2)
{
  sub_20B21158C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20B21158C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C411C30[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20B211740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20B211784(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20B21187C((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20B211874(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20B21187C(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20B211A78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B211A8C(uint64_t a1, uint64_t a2)
{
  int v4;
  void *p_s1;
  size_t v6;
  char *v7;
  std::string::size_type v8;
  unsigned __int8 v9;
  size_t v10;
  unint64_t v11;
  int v12;
  void **v13;
  uint64_t v14;
  void **v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  uint64_t v22;
  void *__p[2];
  unsigned __int8 v25;
  void *__s1;
  size_t __n;
  unsigned __int8 v28;

  v4 = *(_DWORD *)(a1 + 40);
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
    if (v4 != 1)
      sub_20AECFAB8();
    sub_20B211404((__int128 *)a2);
    if ((v28 & 0x80u) == 0)
      p_s1 = &__s1;
    else
      p_s1 = __s1;
    if ((v28 & 0x80u) == 0)
      v6 = v28;
    else
      v6 = __n;
    if (*(char *)(a1 + 31) < 0)
    {
      v7 = *(char **)(a1 + 8);
      v8 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v7 = (char *)(a1 + 8);
      v8 = *(unsigned __int8 *)(a1 + 31);
    }
    v22 = sub_20B52BBE0((uint64_t)p_s1, v6, v7, v8, 0);
    if ((char)v28 < 0)
      goto LABEL_43;
    return v22;
  }
  sub_20B211404((__int128 *)(a1 + 8));
  sub_20B211404((__int128 *)a2);
  v9 = v28;
  if ((v28 & 0x80u) == 0)
    v10 = v28;
  else
    v10 = __n;
  v11 = v25;
  v12 = (char)v25;
  if ((v25 & 0x80u) != 0)
    v11 = (unint64_t)__p[1];
  if (v10 != v11)
  {
    v22 = 0;
    if (((char)v25 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_42;
  }
  if ((v25 & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((char)v28 < 0)
  {
    v22 = memcmp(__s1, v13, __n) == 0;
    goto LABEL_38;
  }
  if (v28)
  {
    v14 = v28 - 1;
    v15 = &__s1;
    do
    {
      v17 = *(unsigned __int8 *)v15;
      v15 = (void **)((char *)v15 + 1);
      v16 = v17;
      v19 = *(unsigned __int8 *)v13;
      v13 = (void **)((char *)v13 + 1);
      v18 = v19;
      v21 = v14-- != 0;
      v22 = v16 == v18;
    }
    while (v16 == v18 && v21);
LABEL_38:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_42:
    operator delete(__p[0]);
    if ((v28 & 0x80) == 0)
      return v22;
    goto LABEL_43;
  }
  v22 = 1;
  if ((char)v25 < 0)
    goto LABEL_42;
LABEL_39:
  if ((v9 & 0x80) == 0)
    return v22;
LABEL_43:
  operator delete(__s1);
  return v22;
}

void sub_20B211C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B211C44(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;

  v3 = (_BYTE *)result;
  v4 = *(unsigned __int8 *)(a3 + 24);
  if (*(_BYTE *)(a2 + 24))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if ((*(_BYTE *)(a2 + 24) != 0) == (v4 != 0))
      return result;
LABEL_13:
    *v3 = 0;
    return result;
  }
  v6 = *(unsigned __int8 **)a2;
  v7 = *(unsigned __int8 **)(a2 + 8);
  v8 = *(unsigned __int8 **)a3;
  if (&v7[-*(_QWORD *)a2] != (unsigned __int8 *)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3))
    goto LABEL_13;
  if (v6 != v7)
  {
    while (1)
    {
      result = sub_20B2167B8(v6, v8);
      if (!(_DWORD)result)
        break;
      v6 += 96;
      v8 += 96;
      if (v6 == v7)
        return result;
    }
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_20B211CEC(uint64_t a1, uint64_t a2)
{
  int v4;
  void *p_s1;
  size_t v6;
  char *v7;
  std::string::size_type v8;
  uint64_t v9;
  unsigned __int8 v11;
  size_t v12;
  unint64_t v13;
  int v14;
  void **v15;
  uint64_t v16;
  void **v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  void *__p[2];
  unsigned __int8 v25;
  void *__s1;
  size_t __n;
  unsigned __int8 v28;
  char v29;
  char *v30;
  _DWORD v31[6];
  int v32;

  v4 = *(_DWORD *)(a1 + 80);
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 48))
      return 0;
    if (v4 != 1)
      sub_20AECFAB8();
    v32 = 0;
    sub_20B210348((uint64_t)v31, a2);
    if (v32 == -1)
      sub_20AECFAB8();
    __p[0] = &v30;
    ((void (*)(void **__return_ptr, void **, _DWORD *))off_24C411C48[v32])(&__s1, __p, v31);
    if (v32 != -1)
      ((void (*)(void **, _DWORD *))off_24C411C30[v32])(__p, v31);
    if ((v28 & 0x80u) == 0)
      p_s1 = &__s1;
    else
      p_s1 = __s1;
    if ((v28 & 0x80u) == 0)
      v6 = v28;
    else
      v6 = __n;
    if (*(char *)(a1 + 39) < 0)
    {
      v7 = *(char **)(a1 + 16);
      v8 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      v7 = (char *)(a1 + 16);
      v8 = *(unsigned __int8 *)(a1 + 39);
    }
    v9 = sub_20B52BBE0((uint64_t)p_s1, v6, v7, v8, 0);
    if ((char)v28 < 0)
      goto LABEL_58;
    return v9;
  }
  v32 = 0;
  if (*(_BYTE *)(a1 + 64))
    sub_20B210348((uint64_t)v31, a1 + 16);
  else
    sub_20AED0170(v31, "nullopt");
  if (v32 == -1)
    sub_20AECFAB8();
  __p[0] = &v30;
  ((void (*)(void **__return_ptr, void **, _DWORD *))off_24C411C48[v32])(&__s1, __p, v31);
  if (v32 != -1)
    ((void (*)(void **, _DWORD *))off_24C411C30[v32])(__p, v31);
  v32 = 0;
  if (*(_BYTE *)(a2 + 48))
    sub_20B210348((uint64_t)v31, a2);
  else
    sub_20AED0170(v31, "nullopt");
  if (v32 == -1)
    sub_20AECFAB8();
  v30 = &v29;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24C411C48[v32])(__p, &v30, v31);
  if (v32 != -1)
    ((void (*)(char **, _DWORD *))off_24C411C30[v32])(&v30, v31);
  v11 = v28;
  if ((v28 & 0x80u) == 0)
    v12 = v28;
  else
    v12 = __n;
  v13 = v25;
  v14 = (char)v25;
  if ((v25 & 0x80u) != 0)
    v13 = (unint64_t)__p[1];
  if (v12 != v13)
  {
    v9 = 0;
    if (((char)v25 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_57;
  }
  if ((v25 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((char)v28 < 0)
  {
    v9 = memcmp(__s1, v15, __n) == 0;
    goto LABEL_53;
  }
  if (v28)
  {
    v16 = v28 - 1;
    v17 = &__s1;
    do
    {
      v19 = *(unsigned __int8 *)v17;
      v17 = (void **)((char *)v17 + 1);
      v18 = v19;
      v21 = *(unsigned __int8 *)v15;
      v15 = (void **)((char *)v15 + 1);
      v20 = v21;
      v23 = v16-- != 0;
      v9 = v18 == v20;
    }
    while (v18 == v20 && v23);
LABEL_53:
    if ((v14 & 0x80000000) == 0)
      goto LABEL_54;
LABEL_57:
    operator delete(__p[0]);
    if ((v28 & 0x80) == 0)
      return v9;
    goto LABEL_58;
  }
  v9 = 1;
  if ((char)v25 < 0)
    goto LABEL_57;
LABEL_54:
  if ((v11 & 0x80) == 0)
    return v9;
LABEL_58:
  operator delete(__s1);
  return v9;
}

void sub_20B211FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_20AECFA60((uint64_t)&a20);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B212038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B21204C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B212060(uint64_t a1, uint64_t a2)
{
  int v4;
  void *p_s1;
  size_t v6;
  char *v7;
  std::string::size_type v8;
  uint64_t v9;
  unsigned __int8 v11;
  size_t v12;
  unint64_t v13;
  int v14;
  void **v15;
  uint64_t v16;
  void **v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  void *__p[2];
  unsigned __int8 v25;
  void *__s1;
  size_t __n;
  unsigned __int8 v28;
  char v29;
  char *v30;
  _DWORD v31[6];
  int v32;

  v4 = *(_DWORD *)(a1 + 128);
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 96))
      return 0;
    if (v4 != 1)
      sub_20AECFAB8();
    v32 = 0;
    sub_20B0C2E10((uint64_t)__p, (uint64_t)v31, a2);
    if (v32 == -1)
      sub_20AECFAB8();
    __p[0] = &v30;
    ((void (*)(void **__return_ptr, void **, _DWORD *))off_24C411C48[v32])(&__s1, __p, v31);
    if (v32 != -1)
      ((void (*)(void **, _DWORD *))off_24C411C30[v32])(__p, v31);
    if ((v28 & 0x80u) == 0)
      p_s1 = &__s1;
    else
      p_s1 = __s1;
    if ((v28 & 0x80u) == 0)
      v6 = v28;
    else
      v6 = __n;
    if (*(char *)(a1 + 39) < 0)
    {
      v7 = *(char **)(a1 + 16);
      v8 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      v7 = (char *)(a1 + 16);
      v8 = *(unsigned __int8 *)(a1 + 39);
    }
    v9 = sub_20B52BBE0((uint64_t)p_s1, v6, v7, v8, 0);
    if ((char)v28 < 0)
      goto LABEL_58;
    return v9;
  }
  v32 = 0;
  if (*(_BYTE *)(a1 + 112))
    sub_20B0C2E10((uint64_t)__p, (uint64_t)v31, a1 + 16);
  else
    sub_20AED0170(v31, "nullopt");
  if (v32 == -1)
    sub_20AECFAB8();
  __p[0] = &v30;
  ((void (*)(void **__return_ptr, void **, _DWORD *))off_24C411C48[v32])(&__s1, __p, v31);
  if (v32 != -1)
    ((void (*)(void **, _DWORD *))off_24C411C30[v32])(__p, v31);
  v32 = 0;
  if (*(_BYTE *)(a2 + 96))
    sub_20B0C2E10((uint64_t)&v30, (uint64_t)v31, a2);
  else
    sub_20AED0170(v31, "nullopt");
  if (v32 == -1)
    sub_20AECFAB8();
  v30 = &v29;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24C411C48[v32])(__p, &v30, v31);
  if (v32 != -1)
    ((void (*)(char **, _DWORD *))off_24C411C30[v32])(&v30, v31);
  v11 = v28;
  if ((v28 & 0x80u) == 0)
    v12 = v28;
  else
    v12 = __n;
  v13 = v25;
  v14 = (char)v25;
  if ((v25 & 0x80u) != 0)
    v13 = (unint64_t)__p[1];
  if (v12 != v13)
  {
    v9 = 0;
    if (((char)v25 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_57;
  }
  if ((v25 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((char)v28 < 0)
  {
    v9 = memcmp(__s1, v15, __n) == 0;
    goto LABEL_53;
  }
  if (v28)
  {
    v16 = v28 - 1;
    v17 = &__s1;
    do
    {
      v19 = *(unsigned __int8 *)v17;
      v17 = (void **)((char *)v17 + 1);
      v18 = v19;
      v21 = *(unsigned __int8 *)v15;
      v15 = (void **)((char *)v15 + 1);
      v20 = v21;
      v23 = v16-- != 0;
      v9 = v18 == v20;
    }
    while (v18 == v20 && v23);
LABEL_53:
    if ((v14 & 0x80000000) == 0)
      goto LABEL_54;
LABEL_57:
    operator delete(__p[0]);
    if ((v28 & 0x80) == 0)
      return v9;
    goto LABEL_58;
  }
  v9 = 1;
  if ((char)v25 < 0)
    goto LABEL_57;
LABEL_54:
  if ((v11 & 0x80) == 0)
    return v9;
LABEL_58:
  operator delete(__s1);
  return v9;
}

void sub_20B212360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_20AECFA60((uint64_t)&a20);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B2123B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B2123CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B2123E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v21[0] = v5;
  sub_20B20CC5C((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 128);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20AECFAB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C411C18[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20B212630(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B212654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B212670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B212684(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  const char *v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  size_t v49;
  void **v50;
  unint64_t v51;
  unint64_t v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v64;
  void *__p[2];
  unsigned __int8 v66;
  _BYTE v67[24];
  int v68;
  void *__dst[2];
  unint64_t v70;
  _QWORD *v71;
  _QWORD v72[6];

  v72[5] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AEC01D0(a1, (uint64_t)"{", 1);
  sub_20AEC01D0(v4, (uint64_t)"Device: ", 8);
  if (*(_BYTE *)(a2 + 200))
  {
    v5 = sub_20AEC01D0(a1, (uint64_t)"{", 1);
    v6 = sub_20AEC01D0(v5, (uint64_t)"Name: ", 6);
    v7 = *(char *)(a2 + 79);
    if (v7 >= 0)
      v8 = a2 + 56;
    else
      v8 = *(_QWORD *)(a2 + 56);
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 79);
    else
      v9 = *(_QWORD *)(a2 + 64);
    v10 = sub_20AEC01D0(v6, v8, v9);
    v11 = sub_20AEC01D0(v10, (uint64_t)", ", 2);
    v12 = sub_20AEC01D0(v11, (uint64_t)"Product: ", 9);
    v13 = *(char *)(a2 + 103);
    if (v13 >= 0)
      v14 = a2 + 80;
    else
      v14 = *(_QWORD *)(a2 + 80);
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a2 + 103);
    else
      v15 = *(_QWORD *)(a2 + 88);
    v16 = sub_20AEC01D0(v12, v14, v15);
    v17 = sub_20AEC01D0(v16, (uint64_t)", ", 2);
    v18 = sub_20AEC01D0(v17, (uint64_t)"SN: ", 4);
    v19 = *(char *)(a2 + 151);
    if (v19 >= 0)
      v20 = a2 + 128;
    else
      v20 = *(_QWORD *)(a2 + 128);
    if (v19 >= 0)
      v21 = *(unsigned __int8 *)(a2 + 151);
    else
      v21 = *(_QWORD *)(a2 + 136);
    v22 = sub_20AEC01D0(v18, v20, v21);
    v23 = sub_20AEC01D0(v22, (uint64_t)", ", 2);
    v24 = sub_20AEC01D0(v23, (uint64_t)"OS: ", 4);
    v25 = *(char *)(a2 + 199);
    if (v25 >= 0)
      v26 = a2 + 176;
    else
      v26 = *(_QWORD *)(a2 + 176);
    if (v25 >= 0)
      v27 = *(unsigned __int8 *)(a2 + 199);
    else
      v27 = *(_QWORD *)(a2 + 184);
    v28 = sub_20AEC01D0(v24, v26, v27);
    v29 = sub_20AEC01D0(v28, (uint64_t)" (", 2);
    v30 = *(char *)(a2 + 175);
    if (v30 >= 0)
      v31 = a2 + 152;
    else
      v31 = *(_QWORD *)(a2 + 152);
    if (v30 >= 0)
      v32 = *(unsigned __int8 *)(a2 + 175);
    else
      v32 = *(_QWORD *)(a2 + 160);
    v33 = sub_20AEC01D0(v29, v31, v32);
    v34 = ")}";
    v35 = 2;
  }
  else
  {
    v34 = "not available";
    v33 = a1;
    v35 = 13;
  }
  sub_20AEC01D0(v33, (uint64_t)v34, v35);
  v36 = sub_20AEC01D0(a1, (uint64_t)", ", 2);
  sub_20AEC01D0(v36, (uint64_t)"Process: ", 9);
  if (*(_BYTE *)(a2 + 48))
  {
    v37 = *(char *)(a2 + 47);
    if (v37 >= 0)
      v38 = a2 + 24;
    else
      v38 = *(_QWORD *)(a2 + 24);
    if (v37 >= 0)
      v39 = *(unsigned __int8 *)(a2 + 47);
    else
      v39 = *(_QWORD *)(a2 + 32);
    v40 = sub_20AEC01D0(a1, v38, v39);
    sub_20AEC01D0(v40, (uint64_t)" ", 1);
  }
  sub_20AEC01D0(a1, (uint64_t)"(", 1);
  v41 = (_QWORD *)std::ostream::operator<<();
  v42 = sub_20AEC01D0(v41, (uint64_t)"), ", 3);
  v43 = sub_20AEC01D0(v42, (uint64_t)"UUID: ", 6);
  sub_20B5211A0((unsigned __int8 *)a2, v72);
  v44 = sub_20AEC01D0(v43, (uint64_t)v72, 36);
  v45 = sub_20AEC01D0(v44, (uint64_t)", ", 2);
  v46 = sub_20AEC01D0(v45, (uint64_t)"Protocol: ", 10);
  v68 = 0;
  v47 = operator new();
  *(_QWORD *)(v47 + 272) = 0;
  *(_OWORD *)(v47 + 240) = 0u;
  *(_OWORD *)(v47 + 256) = 0u;
  *(_OWORD *)(v47 + 208) = 0u;
  *(_OWORD *)(v47 + 224) = 0u;
  *(_OWORD *)(v47 + 176) = 0u;
  *(_OWORD *)(v47 + 192) = 0u;
  *(_OWORD *)(v47 + 144) = 0u;
  *(_OWORD *)(v47 + 160) = 0u;
  *(_OWORD *)(v47 + 112) = 0u;
  *(_OWORD *)(v47 + 128) = 0u;
  *(_OWORD *)(v47 + 80) = 0u;
  *(_OWORD *)(v47 + 96) = 0u;
  *(_OWORD *)(v47 + 48) = 0u;
  *(_OWORD *)(v47 + 64) = 0u;
  *(_OWORD *)(v47 + 16) = 0u;
  *(_OWORD *)(v47 + 32) = 0u;
  *(_OWORD *)v47 = 0u;
  sub_20AEC0BD8(v47);
  v72[0] = v47;
  sub_20AEC01D0((_QWORD *)(v47 + 16), (uint64_t)"{current=", 9);
  sub_20B511704((_QWORD *)(v47 + 16), (uint64_t *)(a2 + 208));
  sub_20AEC01D0((_QWORD *)(v47 + 16), (uint64_t)", min=", 6);
  sub_20B511704((_QWORD *)(v47 + 16), (uint64_t *)(a2 + 220));
  sub_20AEC01D0((_QWORD *)(v47 + 16), (uint64_t)"}", 1);
  v48 = *(_DWORD *)(v47 + 120);
  if ((v48 & 0x10) != 0)
  {
    v51 = *(_QWORD *)(v47 + 112);
    v52 = *(_QWORD *)(v47 + 72);
    if (v51 < v52)
    {
      *(_QWORD *)(v47 + 112) = v52;
      v51 = v52;
    }
    v53 = *(const void **)(v47 + 64);
    v49 = v51 - (_QWORD)v53;
    if (v51 - (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_75;
  }
  else
  {
    if ((v48 & 8) == 0)
    {
      v49 = 0;
      HIBYTE(v70) = 0;
      v50 = __dst;
      goto LABEL_55;
    }
    v64 = *(_QWORD *)(v47 + 56);
    v53 = *(const void **)(v47 + 40);
    v49 = v64 - (_QWORD)v53;
    if ((unint64_t)(v64 - (_QWORD)v53) >= 0x7FFFFFFFFFFFFFF8)
LABEL_75:
      sub_20AEC0138();
  }
  if (v49 >= 0x17)
  {
    v54 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v54 = v49 | 7;
    v55 = v54 + 1;
    v50 = (void **)operator new(v54 + 1);
    __dst[1] = (void *)v49;
    v70 = v55 | 0x8000000000000000;
    __dst[0] = v50;
    goto LABEL_54;
  }
  HIBYTE(v70) = v49;
  v50 = __dst;
  if (v49)
LABEL_54:
    memmove(v50, v53, v49);
LABEL_55:
  *((_BYTE *)v50 + v49) = 0;
  v56 = v72[0];
  if (v72[0])
  {
    v57 = MEMORY[0x24BEDB7F0];
    v58 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v72[0] = *MEMORY[0x24BEDB7F0];
    v59 = *(_QWORD *)(v57 + 72);
    *(_QWORD *)(v56 + *(_QWORD *)(v58 - 24)) = *(_QWORD *)(v57 + 64);
    *(_QWORD *)(v56 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v56 + 16) = v59;
    if (*(char *)(v56 + 111) < 0)
      operator delete(*(void **)(v56 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v56 + 128);
    MEMORY[0x20BD3583C](v56, 0x10B2C40EED050F3);
  }
  v72[0] = v67;
  v72[1] = __dst;
  v72[2] = v67;
  v72[3] = __dst;
  v72[4] = __dst;
  if (v68 == -1)
    sub_20AECFAB8();
  v71 = v72;
  ((void (*)(_QWORD **, _BYTE *))off_24C411CE8[v68])(&v71, v67);
  if (SHIBYTE(v70) < 0)
    operator delete(__dst[0]);
  if (v68 == -1)
    sub_20AECFAB8();
  v72[0] = __dst;
  ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24C411D18[v68])(__p, v72, v67);
  if (v68 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C411D00[v68])(v72, v67);
  if ((v66 & 0x80u) == 0)
    v60 = __p;
  else
    v60 = (void **)__p[0];
  if ((v66 & 0x80u) == 0)
    v61 = v66;
  else
    v61 = (uint64_t)__p[1];
  v62 = sub_20AEC01D0(v46, (uint64_t)v60, v61);
  sub_20AEC01D0(v62, (uint64_t)"}", 1);
  if ((char)v66 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20B212C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B212CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20B52CE84((uint64_t *)va);
  JUMPOUT(0x20B212D00);
}

_QWORD *sub_20B212D10(_QWORD *a1, _BYTE *a2)
{
  int v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  sub_20AEC01D0(a1, (uint64_t)"{Type: ", 7);
  v4 = *a2;
  if (v4 == 2)
  {
    v5 = "TCP/IP";
LABEL_7:
    v6 = a1;
    v7 = 6;
    goto LABEL_9;
  }
  if (v4 == 1)
  {
    v5 = "Direct";
    goto LABEL_7;
  }
  if (*a2)
  {
    v5 = "invalid connection type";
    v6 = a1;
    v7 = 23;
  }
  else
  {
    v5 = "Unknown";
    v6 = a1;
    v7 = 7;
  }
LABEL_9:
  sub_20AEC01D0(v6, (uint64_t)v5, v7);
  sub_20AEC01D0(a1, (uint64_t)", Client:", 9);
  v8 = sub_20B212684(a1, (uint64_t)(a2 + 8));
  sub_20AEC01D0(v8, (uint64_t)"}", 1);
  return a1;
}

__n128 sub_20B212DD4@<Q0>(uint64_t a1@<X0>, char a2@<W1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 v7;
  int *v8;
  int v9;
  __int128 v10;
  __n128 result;
  int v12;
  char v13;
  uint64_t (**v14)();

  v7 = atomic_load((unsigned __int8 *)&qword_25463D208);
  if ((v7 & 1) == 0)
  {
    v13 = a2;
    v12 = __cxa_guard_acquire(&qword_25463D208);
    a2 = v13;
    if (v12)
    {
      v14 = &off_24C41FD00;
      sub_20B527D50((char *)xmmword_25463D178, (uint64_t)&v14);
      __cxa_atexit((void (*)(void *))sub_20B5281E4, xmmword_25463D178, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463D208);
      a2 = v13;
    }
  }
  if (a2)
  {
    *(_OWORD *)a4 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
  v8 = sub_20AECACFC();
  v9 = *v8;
  *(_BYTE *)(a4 + 24) = 0;
  *(_DWORD *)(a4 + 16) = v9;
  *(_BYTE *)(a4 + 48) = 0;
  if (*((_BYTE *)v8 + 32))
  {
    if (*((char *)v8 + 31) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a4 + 24), *((void **)v8 + 1), *((_QWORD *)v8 + 2));
    }
    else
    {
      v10 = *(_OWORD *)(v8 + 2);
      *(_QWORD *)(a4 + 40) = *((_QWORD *)v8 + 3);
      *(_OWORD *)(a4 + 24) = v10;
    }
    *(_BYTE *)(a4 + 48) = 1;
  }
  sub_20AF3FE60((char *)(a4 + 56), xmmword_25463D178);
  *(_BYTE *)(a4 + 200) = 1;
  result = *a3;
  *(__n128 *)(a4 + 208) = *a3;
  *(_QWORD *)(a4 + 224) = a3[1].n128_u64[0];
  return result;
}

void sub_20B212F20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D208);
  _Unwind_Resume(a1);
}

void sub_20B212F38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 48))
  {
    if (*(char *)(v1 + 47) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_20B212F60@<Q0>(uint64_t a1@<X0>, char a2@<W1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 v7;
  int *v8;
  int v9;
  __int128 v10;
  __n128 result;
  int v12;
  char v13;
  uint64_t (**v14)();

  v7 = atomic_load((unsigned __int8 *)&qword_25463D208);
  if ((v7 & 1) == 0)
  {
    v13 = a2;
    v12 = __cxa_guard_acquire(&qword_25463D208);
    a2 = v13;
    if (v12)
    {
      v14 = &off_24C41FD00;
      sub_20B527D50((char *)xmmword_25463D178, (uint64_t)&v14);
      __cxa_atexit((void (*)(void *))sub_20B5281E4, xmmword_25463D178, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463D208);
      a2 = v13;
    }
  }
  if (a2)
  {
    *(_OWORD *)a4 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
  v8 = sub_20AECACFC();
  v9 = *v8;
  *(_BYTE *)(a4 + 24) = 0;
  *(_DWORD *)(a4 + 16) = v9;
  *(_BYTE *)(a4 + 48) = 0;
  if (*((_BYTE *)v8 + 32))
  {
    if (*((char *)v8 + 31) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a4 + 24), *((void **)v8 + 1), *((_QWORD *)v8 + 2));
    }
    else
    {
      v10 = *(_OWORD *)(v8 + 2);
      *(_QWORD *)(a4 + 40) = *((_QWORD *)v8 + 3);
      *(_OWORD *)(a4 + 24) = v10;
    }
    *(_BYTE *)(a4 + 48) = 1;
  }
  sub_20AF3FE60((char *)(a4 + 56), xmmword_25463D178);
  *(_BYTE *)(a4 + 200) = 1;
  result = *a3;
  *(__n128 *)(a4 + 208) = *a3;
  *(_QWORD *)(a4 + 224) = a3[1].n128_u64[0];
  return result;
}

void sub_20B2130AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D208);
  _Unwind_Resume(a1);
}

void sub_20B2130C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 48))
  {
    if (*(char *)(v1 + 47) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B2130EC(_QWORD *a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  int v5;
  char v6;
  char v7;
  uint64_t v8;
  int v9;
  std::string::size_type v10;
  std::string *v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  int v20;
  char v21;
  char v22;
  std::string *p_dst;
  std::string::size_type size;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  uint64_t v32;
  uint64_t v33;
  std::string::size_type v34;
  void *p_p;
  uint64_t v36;
  _QWORD *v37;
  void *__p;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  _QWORD v44[2];
  unsigned __int8 v45;
  int v46;
  std::string __dst;
  std::string *v48;
  std::string *v49;
  char *v50;
  std::string *v51;
  std::string *v52;
  std::string **v53;

  if (!*(_BYTE *)(a2 + 48))
  {
    v12 = sub_20AEC01D0(a1, (uint64_t)"Sync{", 5);
    if (*(_DWORD *)(a2 + 40))
      v13 = 2;
    else
      v13 = 1;
    if (*(_BYTE *)(a2 + 48))
      v14 = v13;
    else
      v14 = 0;
    LOBYTE(v53) = v14;
    LODWORD(v51) = 0;
    sub_20B2142AC((uint64_t)&v48, (char *)&v53);
    if ((_DWORD)v51 == -1)
      sub_20AECFAB8();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    ((void (*)(_QWORD *__return_ptr, std::string *, std::string **))off_24C411D18[v51])(v44, &__dst, &v48);
    if ((_DWORD)v51 != -1)
      ((void (*)(std::string *, std::string **))off_24C411D00[v51])(&__dst, &v48);
    if ((v45 & 0x80u) == 0)
      v15 = v44;
    else
      v15 = (_QWORD *)v44[0];
    if ((v45 & 0x80u) == 0)
      v16 = v45;
    else
      v16 = v44[1];
    v17 = sub_20AEC01D0(v12, (uint64_t)v15, v16);
    v18 = sub_20AEC01D0(v17, (uint64_t)"}", 1);
    if (((char)v45 & 0x80000000) == 0)
      return v18;
    v19 = (void *)v44[0];
    goto LABEL_87;
  }
  v3 = *(_DWORD *)(a2 + 40);
  v4 = sub_20AEC01D0(a1, (uint64_t)"Sync{", 5);
  if (!v3)
  {
    v20 = *(_DWORD *)(a2 + 40);
    if (v20)
      v21 = 2;
    else
      v21 = 1;
    if (*(_BYTE *)(a2 + 48))
      v22 = v21;
    else
      v22 = 0;
    v42 = v22;
    if (v20)
LABEL_92:
      sub_20AECFAB8();
    __p = (void *)a2;
    v40 = a2 + 8;
    v41 = a2 + 24;
    v46 = 0;
    sub_20B2142AC((uint64_t)v44, &v42);
    v48 = (std::string *)v44;
    v49 = (std::string *)", ";
    v50 = (char *)v44;
    v51 = (std::string *)", ";
    v52 = (std::string *)", ";
    if (v46 == -1)
      sub_20AECFAB8();
    v53 = &v48;
    ((void (*)(std::string ***, _QWORD *))off_24C411D30[v46])(&v53, v44);
    v48 = (std::string *)v44;
    v49 = (std::string *)"{";
    v50 = (char *)v44;
    v51 = (std::string *)"{";
    v52 = (std::string *)"{";
    if (v46 == -1)
      goto LABEL_93;
    v53 = &v48;
    ((void (*)(std::string ***, _QWORD *))off_24C411D60[v46])(&v53, v44);
    LOBYTE(v48) = 1;
    v49 = (std::string *)v44;
    v50 = &v43;
    sub_20B214584((uint64_t)&__p, (uint64_t)&v48);
    v48 = (std::string *)v44;
    v49 = (std::string *)"}";
    v50 = (char *)v44;
    v51 = (std::string *)"}";
    v52 = (std::string *)"}";
    if (v46 == -1)
LABEL_93:
      sub_20AECFAB8();
    v53 = &v48;
    ((void (*)(std::string ***, _QWORD *))off_24C411D60[v46])(&v53, v44);
    if (v46 == -1)
      sub_20AECFAB8();
    v48 = (std::string *)&v53;
    ((void (*)(std::string *__return_ptr, std::string **, _QWORD *))off_24C411D18[v46])(&__dst, &v48, v44);
    if (v46 != -1)
      ((void (*)(std::string **, _QWORD *))off_24C411D00[v46])(&v48, v44);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v25 = sub_20AEC01D0(v4, (uint64_t)p_dst, size);
    v18 = sub_20AEC01D0(v25, (uint64_t)"}", 1);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v18;
    v19 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_87:
    operator delete(v19);
    return v18;
  }
  v5 = *(_DWORD *)(a2 + 40);
  if (v5)
    v6 = 2;
  else
    v6 = 1;
  if (*(_BYTE *)(a2 + 48))
    v7 = v6;
  else
    v7 = 0;
  v43 = v7;
  if (v5 != 1)
    goto LABEL_92;
  v46 = 0;
  sub_20B2142AC((uint64_t)v44, &v43);
  v48 = (std::string *)v44;
  v49 = (std::string *)", ";
  v50 = (char *)v44;
  v51 = (std::string *)", ";
  v52 = (std::string *)", ";
  if (v46 == -1)
    sub_20AECFAB8();
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  ((void (*)(std::string *, _QWORD *))off_24C411D30[v46])(&__dst, v44);
  v48 = (std::string *)v44;
  v49 = (std::string *)"{";
  v50 = (char *)v44;
  v51 = (std::string *)"{";
  v52 = (std::string *)"{";
  if (v46 == -1)
LABEL_91:
    sub_20AECFAB8();
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  ((void (*)(std::string *, _QWORD *))off_24C411D60[v46])(&__dst, v44);
  v8 = operator new();
  *(_QWORD *)(v8 + 272) = 0;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)v8 = 0u;
  sub_20AEC0BD8(v8);
  v48 = (std::string *)v8;
  sub_20B0BFBFC((_QWORD *)(v8 + 16), (_BYTE *)a2);
  v9 = *(_DWORD *)(v8 + 120);
  if ((v9 & 0x10) != 0)
  {
    v26 = *(_QWORD *)(v8 + 112);
    v27 = *(_QWORD *)(v8 + 72);
    if (v26 < v27)
    {
      *(_QWORD *)(v8 + 112) = v27;
      v26 = v27;
    }
    v28 = *(const void **)(v8 + 64);
    v10 = v26 - (_QWORD)v28;
    if (v26 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_90;
  }
  else
  {
    if ((v9 & 8) == 0)
    {
      v10 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      v11 = &__dst;
      goto LABEL_63;
    }
    v28 = *(const void **)(v8 + 40);
    v10 = *(_QWORD *)(v8 + 56) - (_QWORD)v28;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_90:
      sub_20AEC0138();
  }
  if (v10 >= 0x17)
  {
    v29 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v29 = v10 | 7;
    v30 = v29 + 1;
    v11 = (std::string *)operator new(v29 + 1);
    __dst.__r_.__value_.__l.__size_ = v10;
    __dst.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    goto LABEL_62;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v10;
  v11 = &__dst;
  if (v10)
LABEL_62:
    memmove(v11, v28, v10);
LABEL_63:
  v11->__r_.__value_.__s.__data_[v10] = 0;
  v31 = v48;
  if (v48)
  {
    v32 = MEMORY[0x24BEDB7F0];
    v33 = *MEMORY[0x24BEDB7F0];
    v48->__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
    v34 = *(_QWORD *)(v32 + 72);
    *(std::string::size_type *)((char *)v31->__r_.__value_.__r.__words + *(_QWORD *)(v33 - 24)) = *(_QWORD *)(v32 + 64);
    v31[1].__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB848] + 16;
    v31->__r_.__value_.__r.__words[2] = v34;
    if (v31[4].__r_.__value_.__s.__data_[15] < 0)
      operator delete((void *)v31[3].__r_.__value_.__r.__words[2]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](&v31[5].__r_.__value_.__r.__words[1]);
    MEMORY[0x20BD3583C](v31, 0x10B2C40EED050F3);
  }
  v48 = (std::string *)v44;
  v49 = &__dst;
  v50 = (char *)v44;
  v51 = &__dst;
  v52 = &__dst;
  if (v46 == -1)
    sub_20AECFAB8();
  v53 = &v48;
  ((void (*)(std::string ***, _QWORD *))off_24C411CE8[v46])(&v53, v44);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v48 = (std::string *)v44;
  v49 = (std::string *)",";
  v50 = (char *)v44;
  v51 = (std::string *)",";
  v52 = (std::string *)",";
  if (v46 == -1)
    goto LABEL_91;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  ((void (*)(std::string *, _QWORD *))off_24C411D60[v46])(&__dst, v44);
  std::to_string(&__dst, *(_QWORD *)(a2 + 8));
  v48 = (std::string *)v44;
  v49 = &__dst;
  v50 = (char *)v44;
  v51 = &__dst;
  v52 = &__dst;
  if (v46 == -1)
    sub_20AECFAB8();
  v53 = &v48;
  ((void (*)(std::string ***, _QWORD *))off_24C411CE8[v46])(&v53, v44);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v48 = (std::string *)v44;
  v49 = (std::string *)",";
  v50 = (char *)v44;
  v51 = (std::string *)",";
  v52 = (std::string *)",";
  if (v46 == -1)
    goto LABEL_91;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  ((void (*)(std::string *, _QWORD *))off_24C411D60[v46])(&__dst, v44);
  sub_20B214758((uint64_t)v44, *(_QWORD *)(a2 + 16), *(_BYTE *)(a2 + 24));
  v48 = (std::string *)v44;
  v49 = (std::string *)"}";
  v50 = (char *)v44;
  v51 = (std::string *)"}";
  v52 = (std::string *)"}";
  if (v46 == -1)
    goto LABEL_91;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  ((void (*)(std::string *, _QWORD *))off_24C411D60[v46])(&__dst, v44);
  if (v46 == -1)
    sub_20AECFAB8();
  v48 = &__dst;
  ((void (*)(void **__return_ptr, std::string **, _QWORD *))off_24C411D18[v46])(&__p, &v48, v44);
  if (v46 != -1)
    ((void (*)(std::string **, _QWORD *))off_24C411D00[v46])(&v48, v44);
  if (v41 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v41 >= 0)
    v36 = HIBYTE(v41);
  else
    v36 = v40;
  v37 = sub_20AEC01D0(v4, (uint64_t)p_p, v36);
  v18 = sub_20AEC01D0(v37, (uint64_t)"}", 1);
  if (SHIBYTE(v41) < 0)
  {
    v19 = __p;
    goto LABEL_87;
  }
  return v18;
}

void sub_20B2138B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  sub_20AECFA60((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20B2139C0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B2139F8(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B213A40(uint64_t a1)
{
  uint64_t result;
  char v3;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  char *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_20AED5B5C(v4, "{");
  LOBYTE(v6) = 1;
  v7 = (const char *)v4;
  v8 = &v3;
  sub_20B214584(a1, (uint64_t)&v6);
  v6 = (_QWORD **)v4;
  v7 = "}";
  v8 = (char *)v4;
  v9 = "}";
  v10 = "}";
  if (v5 == -1)
    sub_20AECFAB8();
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C411D60[v5])(&v11, v4);
  if (v5 == -1)
    sub_20AECFAB8();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C411D18[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C411D00[v5])(&v6, v4);
  return result;
}

void sub_20B213B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B213B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B213B78(std::mutex *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  std::mutex *v5;
  uint64_t sig;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int sig_low;

  v5 = a1 + 1;
  std::mutex::lock(a1 + 1);
  sig = a1[2].__m_.__sig;
  v7 = *(_QWORD *)a1[2].__m_.__opaque;
  if (sig == v7)
  {
    v11 = 0;
    LOBYTE(v8) = 0;
    std::mutex::unlock(v5);
    if (!a1->__m_.__opaque[8])
      goto LABEL_16;
  }
  else
  {
    v8 = *(_QWORD *)(v7 - 40);
    if (*(_BYTE *)(v7 - 24))
    {
      v9 = *(_QWORD *)(v7 - 32);
      a1->__m_.__opaque[8] = *(_BYTE *)(v7 - 24);
      *(_QWORD *)a1->__m_.__opaque = v9;
    }
    if (*(_BYTE *)(v7 - 8))
    {
      v10 = *(_QWORD *)(v7 - 16);
      a1->__m_.__opaque[24] = *(_BYTE *)(v7 - 8);
      *(_QWORD *)&a1->__m_.__opaque[16] = v10;
    }
    if (a1->__m_.__opaque[8] || a1->__m_.__opaque[24])
    {
      *(_QWORD *)&a1->__m_.__opaque[32] = *(_QWORD *)(v7 - 40);
      a1->__m_.__opaque[40] = 1;
    }
    else
    {
      LOBYTE(a1->__m_.__sig) = 2;
    }
    v2 = v8 >> 8;
    *(_QWORD *)a1[2].__m_.__opaque = sig;
    v11 = 1;
    std::mutex::unlock(v5);
    if (!a1->__m_.__opaque[8])
      goto LABEL_16;
  }
  v12 = *(_QWORD *)a1->__m_.__opaque;
  if (!v12)
  {
    v11 = 1;
    LOBYTE(a1->__m_.__sig) = 1;
    a1->__m_.__opaque[0] = 0;
    a1->__m_.__opaque[8] = 0;
    if (sig == v7)
    {
      v8 = *(_QWORD *)&a1->__m_.__opaque[32];
      v2 = v8 >> 8;
      v11 = a1->__m_.__opaque[40];
      if (a1->__m_.__opaque[24])
        goto LABEL_17;
      goto LABEL_23;
    }
LABEL_16:
    if (a1->__m_.__opaque[24])
      goto LABEL_17;
LABEL_23:
    sig_low = LOBYTE(a1->__m_.__sig);
    v13 = *(_QWORD *)&a1->__m_.__opaque[48];
    if (sig_low != 1)
      goto LABEL_25;
    goto LABEL_24;
  }
  *(_QWORD *)a1->__m_.__opaque = v12 - 1;
  LOBYTE(a1->__m_.__sig) = 3;
  if (!a1->__m_.__opaque[24])
    goto LABEL_23;
LABEL_17:
  v13 = *(_QWORD *)&a1->__m_.__opaque[48];
  if (*(_QWORD *)&a1->__m_.__opaque[16] > v13)
  {
    LOBYTE(sig_low) = 3;
    LOBYTE(a1->__m_.__sig) = 3;
LABEL_25:
    *(_BYTE *)a2 = sig_low;
    *(_QWORD *)&a1->__m_.__opaque[48] = v13 + 1;
    goto LABEL_26;
  }
  LOBYTE(a1->__m_.__sig) = 1;
  a1->__m_.__opaque[16] = 0;
  a1->__m_.__opaque[24] = 0;
  if (!v11)
  {
    v8 = *(_QWORD *)&a1->__m_.__opaque[32];
    v2 = v8 >> 8;
    v11 = a1->__m_.__opaque[40];
  }
LABEL_24:
  a1->__m_.__opaque[32] = 0;
  a1->__m_.__opaque[40] = 0;
  *(_BYTE *)a2 = 1;
LABEL_26:
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 16) = v8 | (v2 << 8);
  *(_BYTE *)(a2 + 24) = v11;
}

uint64_t sub_20B213D34(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  std::chrono::steady_clock::time_point v8;
  uint64_t v9;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v10;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  std::chrono::steady_clock::time_point v16;
  std::chrono::system_clock::time_point v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  std::unique_lock<std::mutex> v22;

  v22.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 64);
  v22.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 64));
  if (!a4)
  {
    if (*(_QWORD *)(a1 + 128) == *(_QWORD *)(a1 + 136))
    {
      do
      {
        v19 = *(_QWORD *)(a2 + 24);
        if (!v19)
          sub_20AECABA4();
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 48))(v19);
        if ((v20 & 1) != 0)
          break;
        std::condition_variable::wait((std::condition_variable *)(a1 + 152), &v22);
      }
      while (*(_QWORD *)(a1 + 128) == *(_QWORD *)(a1 + 136));
      v9 = v20 ^ 1u;
      if (!v22.__owns_)
        return v9;
    }
    else
    {
      v9 = 1;
    }
LABEL_27:
    std::mutex::unlock(v22.__m_);
    return v9;
  }
  v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + a3;
  do
  {
    v12 = *(_QWORD *)(a1 + 128);
    v13 = *(_QWORD *)(a1 + 136);
    v14 = v12 != v13;
    if (v12 != v13)
      goto LABEL_26;
    v15 = *(_QWORD *)(a2 + 24);
    if (!v15)
      goto LABEL_37;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15) & 1) != 0)
      goto LABEL_26;
    if (v8.__d_.__rep_ <= std::chrono::steady_clock::now().__d_.__rep_)
      break;
    v16.__d_.__rep_ = v8.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v16.__d_.__rep_ < 1)
      continue;
    std::chrono::steady_clock::now();
    v17.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v17.__d_.__rep_)
    {
      if (v17.__d_.__rep_ < 1)
      {
        if ((unint64_t)v17.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          v10 = 0x8000000000000000;
          goto LABEL_6;
        }
      }
      else if ((unint64_t)v17.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        v10 = 0x7FFFFFFFFFFFFFFFLL;
        if ((v16.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL) != 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_23;
        goto LABEL_6;
      }
      v10 = 1000 * v17.__d_.__rep_;
      if (1000 * v17.__d_.__rep_ > (v16.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
LABEL_23:
        v11.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_7;
      }
    }
    else
    {
      v10 = 0;
      if (v16.__d_.__rep_ < 0)
        goto LABEL_23;
    }
LABEL_6:
    v11.__d_.__rep_ = v10 + v16.__d_.__rep_;
LABEL_7:
    std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 152), &v22, v11);
    std::chrono::steady_clock::now();
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v8.__d_.__rep_);
  if (*(_QWORD *)(a1 + 128) != *(_QWORD *)(a1 + 136))
  {
    v14 = 1;
LABEL_26:
    v9 = v14;
    if (!v22.__owns_)
      return v9;
    goto LABEL_27;
  }
  v21 = *(_QWORD *)(a2 + 24);
  if (!v21)
LABEL_37:
    sub_20AECABA4();
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 48))(v21);
  v9 = 0;
  if (v22.__owns_)
    goto LABEL_27;
  return v9;
}

void sub_20B213F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void sub_20B213F88(uint64_t a1, __int128 *a2)
{
  std::mutex *v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v6 = *(char **)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  if ((unint64_t)v6 >= v5)
  {
    v10 = *(char **)(a1 + 128);
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v10) >> 3) + 1;
    if (v11 > 0x666666666666666)
      sub_20B214298();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (_QWORD)v10) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 > 0x666666666666666)
        sub_20AEC60CC();
      v14 = (char *)operator new(40 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * ((v6 - v10) >> 3)];
    v16 = a2[1];
    *(_OWORD *)v15 = *a2;
    *((_OWORD *)v15 + 1) = v16;
    *((_QWORD *)v15 + 4) = *((_QWORD *)a2 + 4);
    v9 = v15 + 40;
    if (v6 != v10)
    {
      do
      {
        v17 = *(_OWORD *)(v6 - 40);
        v18 = *(_OWORD *)(v6 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v6 - 1);
        *(_OWORD *)(v15 - 24) = v18;
        *(_OWORD *)(v15 - 40) = v17;
        v15 -= 40;
        v6 -= 40;
      }
      while (v6 != v10);
      v6 = *(char **)(a1 + 128);
    }
    *(_QWORD *)(a1 + 128) = v15;
    *(_QWORD *)(a1 + 136) = v9;
    *(_QWORD *)(a1 + 144) = &v14[40 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    *((_QWORD *)v6 + 4) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v6 = v7;
    *((_OWORD *)v6 + 1) = v8;
    v9 = v6 + 40;
  }
  *(_QWORD *)(a1 + 136) = v9;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 152));
  std::mutex::unlock(v4);
}

void sub_20B2140F8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B21410C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B21411C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B21412C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v16;
  uint64_t v17;
  const void **v18;
  uint64_t v19;
  unsigned __int8 *v21[6];
  const void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  if (*(_QWORD *)*a2 != *(_QWORD *)*a3 || *(_QWORD *)(*a2 + 8) != *(_QWORD *)(*a3 + 8))
    return 0;
  result = sub_20AECAC08(a2[1], a3[1]);
  if ((_DWORD)result)
  {
    v7 = a2[2];
    v8 = (unsigned __int8 *)a3[2];
    v9 = v8[144];
    if (*(_BYTE *)(v7 + 144))
      v10 = v9 == 0;
    else
      v10 = 1;
    if (v10)
    {
      if ((*(_BYTE *)(v7 + 144) != 0) != (v9 != 0))
        return 0;
    }
    else
    {
      v22 = (const void **)a2[2];
      v23 = v7 + 24;
      v24 = v7 + 48;
      v25 = v7 + 72;
      v26 = v7 + 96;
      v27 = v7 + 120;
      v21[0] = v8;
      v21[1] = v8 + 24;
      v21[2] = v8 + 48;
      v21[3] = v8 + 72;
      v21[4] = v8 + 96;
      v21[5] = v8 + 120;
      v11 = sub_20B52829C((uint64_t)&v28, &v22, v21);
      if ((v11 & 1) == 0)
        return 0;
    }
    v12 = a2[3];
    v13 = a3[3];
    v14 = *(unsigned int *)(v12 + 8);
    v22 = *(const void ***)v12;
    LODWORD(v23) = v14;
    if (v22 != *(const void ***)v13 || v14 != *(_DWORD *)(v13 + 8))
      return 0;
    v16 = *(const void ***)(v12 + 12);
    v17 = *(unsigned int *)(v12 + 20);
    v22 = v16;
    LODWORD(v23) = v17;
    v18 = *(const void ***)(v13 + 12);
    v19 = *(unsigned int *)(v13 + 20);
    return v16 == v18 && v17 == v19;
  }
  return result;
}

void sub_20B214298()
{
  sub_20AEC014C("vector");
}

void sub_20B2142AC(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__dst[2];
  unint64_t v23;
  _QWORD v24[5];
  _QWORD *v25;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20AEC0BD8(v4);
  v24[0] = v4;
  v5 = *a2;
  if (v5 > 2)
  {
    v7 = "invalid sync type";
    v8 = 17;
  }
  else
  {
    v6 = v5;
    v7 = off_24C411D78[v6];
    v8 = *(_QWORD *)((char *)&unk_20B5EAE00 + v6 * 8);
  }
  sub_20AEC01D0((_QWORD *)(v4 + 16), (uint64_t)v7, v8);
  v9 = *(_DWORD *)(v4 + 120);
  if ((v9 & 0x10) != 0)
  {
    v12 = *(_QWORD *)(v4 + 112);
    v13 = *(_QWORD *)(v4 + 72);
    if (v12 < v13)
    {
      *(_QWORD *)(v4 + 112) = v13;
      v12 = v13;
    }
    v14 = *(const void **)(v4 + 64);
    v10 = v12 - (_QWORD)v14;
    if (v12 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_25;
  }
  else
  {
    if ((v9 & 8) == 0)
    {
      v10 = 0;
      HIBYTE(v23) = 0;
      v11 = __dst;
      goto LABEL_17;
    }
    v14 = *(const void **)(v4 + 40);
    v10 = *(_QWORD *)(v4 + 56) - (_QWORD)v14;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_25:
      sub_20AEC0138();
  }
  if (v10 >= 0x17)
  {
    v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v15 = v10 | 7;
    v16 = v15 + 1;
    v11 = (void **)operator new(v15 + 1);
    __dst[1] = (void *)v10;
    v23 = v16 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_16;
  }
  HIBYTE(v23) = v10;
  v11 = __dst;
  if (v10)
LABEL_16:
    memmove(v11, v14, v10);
LABEL_17:
  *((_BYTE *)v11 + v10) = 0;
  v17 = v24[0];
  if (v24[0])
  {
    v18 = MEMORY[0x24BEDB7F0];
    v19 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v24[0] = *MEMORY[0x24BEDB7F0];
    v20 = *(_QWORD *)(v18 + 72);
    *(_QWORD *)(v17 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(v18 + 64);
    *(_QWORD *)(v17 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v17 + 16) = v20;
    if (*(char *)(v17 + 111) < 0)
      operator delete(*(void **)(v17 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v17 + 128);
    MEMORY[0x20BD3583C](v17, 0x10B2C40EED050F3);
  }
  v24[0] = a1;
  v24[1] = __dst;
  v24[2] = a1;
  v24[3] = __dst;
  v24[4] = __dst;
  v21 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v21 == -1)
    sub_20AECFAB8();
  v25 = v24;
  ((void (*)(_QWORD **, uint64_t))off_24C411CE8[v21])(&v25, a1);
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
}

void sub_20B214530(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B214554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B214570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B214584(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string v12;
  uint64_t v13;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  uint64_t *v18;

  v4 = *(unint64_t **)a1;
  if (!*(_BYTE *)a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v14 = (std::string *)",";
    v15 = v13;
    v16 = (std::string *)",";
    v17 = (std::string *)",";
    v5 = *(unsigned int *)(v13 + 24);
    if ((_DWORD)v5 == -1)
      goto LABEL_15;
    v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    ((void (*)(std::string *))off_24C411D60[v5])(&v12);
  }
  *(_BYTE *)a2 = 0;
  v6 = *(_QWORD *)(a2 + 8);
  std::to_string(&v12, *v4);
  v13 = v6;
  v14 = &v12;
  v15 = v6;
  v16 = &v12;
  v17 = &v12;
  v7 = *(unsigned int *)(v6 + 24);
  if ((_DWORD)v7 == -1)
    sub_20AECFAB8();
  v18 = &v13;
  ((void (*)(uint64_t **, uint64_t))off_24C411CE8[v7])(&v18, v6);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    v8 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)a2)
      goto LABEL_11;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)a2)
      goto LABEL_11;
  }
  v13 = *(_QWORD *)(a2 + 8);
  v14 = (std::string *)",";
  v15 = v13;
  v16 = (std::string *)",";
  v17 = (std::string *)",";
  v9 = *(unsigned int *)(v13 + 24);
  if ((_DWORD)v9 == -1)
    goto LABEL_15;
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  ((void (*)(std::string *))off_24C411D60[v9])(&v12);
LABEL_11:
  *(_BYTE *)a2 = 0;
  sub_20B214758(*(_QWORD *)(a2 + 8), *(_QWORD *)v8, *(_BYTE *)(v8 + 8));
  v10 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v14 = (std::string *)",";
    v15 = v13;
    v16 = (std::string *)",";
    v17 = (std::string *)",";
    v11 = *(unsigned int *)(v13 + 24);
    if ((_DWORD)v11 != -1)
    {
      v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
      ((void (*)(std::string *))off_24C411D60[v11])(&v12);
      goto LABEL_14;
    }
LABEL_15:
    sub_20AECFAB8();
  }
LABEL_14:
  *(_BYTE *)a2 = 0;
  sub_20B214758(*(_QWORD *)(a2 + 8), *(_QWORD *)v10, *(_BYTE *)(v10 + 8));
}

void sub_20B21473C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B214758(uint64_t a1, unint64_t __val, char a3)
{
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  uint64_t *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;

  if (a3)
  {
    std::to_string(&v6, __val);
    v8 = a1;
    v9 = &v6;
    v10 = a1;
    v11 = &v6;
    v12 = &v6;
    v4 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v4 == -1)
      sub_20AECFAB8();
    v7 = &v8;
    ((void (*)(uint64_t **, uint64_t))off_24C411CE8[v4])(&v7, a1);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = a1;
    v9 = (std::string *)"nullopt";
    v10 = a1;
    v11 = (std::string *)"nullopt";
    v12 = (std::string *)"nullopt";
    v5 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v5 == -1)
      sub_20AECFAB8();
    v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    ((void (*)(std::string *, uint64_t))off_24C411D48[v5])(&v6, a1);
  }
}

void sub_20B214848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B214864(uint64_t *a1, _BYTE *a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t *v8;
  char v9;
  uint64_t v11;
  char v12;
  __int128 *v13;
  std::logic_error *exception;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  _QWORD v19[2];
  unsigned __int8 v20;
  std::string v21;
  std::string v22;
  std::string v23;
  __int128 v24;
  uint64_t v25;

  v4 = atomic_load((unsigned __int8 *)&qword_25463B180);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463B180))
  {
    LOWORD(v24) = 256;
    BYTE2(v24) = 2;
    sub_20B214C70(&v24, 3uLL);
    __cxa_atexit((void (*)(void *))sub_20B214D00, &qword_25463B1A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B180);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_25463B188);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_25463B188))
  {
    *(_QWORD *)&xmmword_25463B1D0 = qword_25463B1A0;
    qword_25463B1E0 = qword_25463B1A8;
    __cxa_guard_release(&qword_25463B188);
  }
  v6 = atomic_load((unsigned __int8 *)&qword_25463B190);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25463B190))
  {
    xmmword_25463B1F0 = xmmword_25463B1D0;
    qword_25463B200 = qword_25463B1A0;
    *(_OWORD *)byte_25463B208 = *(_OWORD *)&qword_25463B1E0;
    *(_QWORD *)&byte_25463B208[16] = qword_25463B1A8;
    __cxa_guard_release(&qword_25463B190);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_25463B198);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25463B198))
  {
    v24 = xmmword_25463B1F0;
    v25 = qword_25463B200;
    v23 = *(std::string *)byte_25463B208;
    sub_20B215B1C((unsigned __int8 **)&v24, (unsigned __int8 **)&v23);
    __cxa_atexit((void (*)(void *))sub_20B214D30, &qword_25463B1B8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463B198);
  }
  v24 = 0uLL;
  v25 = 0;
  sub_20B1C68C0(a1, (uint64_t)&v24);
  v8 = sub_20AFB10A4((uint64_t)&qword_25463B1B8, (const void **)&v24);
  if (v8 == &qword_25463B1C0)
  {
    v11 = HIBYTE(v25);
    v12 = HIBYTE(v25);
    if (v25 < 0)
      v11 = *((_QWORD *)&v24 + 1);
    if (v11 != 4)
      goto LABEL_24;
    v13 = (__int128 *)v24;
    if (v25 >= 0)
      v13 = &v24;
    if (*(_DWORD *)v13 != 1701736270)
    {
LABEL_24:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      sub_20B214D58("', expected ", &v21, &v22);
      sub_20B214DB4();
      if ((v20 & 0x80u) == 0)
        v15 = (const std::string::value_type *)v19;
      else
        v15 = (const std::string::value_type *)v19[0];
      if ((v20 & 0x80u) == 0)
        v16 = v20;
      else
        v16 = v19[1];
      v17 = std::string::append(&v22, v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v23);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    *a2 = 0;
    if ((v12 & 0x80) == 0)
      return a1;
  }
  else
  {
    v9 = HIBYTE(v25);
    *a2 = *((_BYTE *)v8 + 56);
    if ((v9 & 0x80) == 0)
      return a1;
  }
  operator delete((void *)v24);
  return a1;
}

void sub_20B214B64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B198);
  _Unwind_Resume(a1);
}

void sub_20B214B7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463B180);
  _Unwind_Resume(a1);
}

void sub_20B214B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (a33 < 0)
  {
    operator delete(a28);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_4:
    if (a21 < 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a22);
  if (a21 < 0)
  {
LABEL_5:
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_12:
      if (*(char *)(v35 - 41) < 0)
        operator delete(*(void **)(v35 - 64));
      _Unwind_Resume(a1);
    }
LABEL_11:
    __cxa_free_exception(v33);
    goto LABEL_12;
  }
LABEL_10:
  if (!v34)
    goto LABEL_12;
  goto LABEL_11;
}

void *sub_20B214C70(void *result, size_t __sz)
{
  const void *v3;
  uint64_t v4;

  qword_25463B1A0 = 0;
  qword_25463B1A8 = 0;
  qword_25463B1B0 = 0;
  if (__sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v3 = result;
    qword_25463B1A0 = (uint64_t)operator new(__sz);
    qword_25463B1A8 = qword_25463B1A0;
    v4 = qword_25463B1A0 + __sz;
    qword_25463B1B0 = qword_25463B1A0 + __sz;
    result = memmove((void *)qword_25463B1A0, v3, __sz);
    qword_25463B1A8 = v4;
  }
  return result;
}

void sub_20B214CDC(_Unwind_Exception *exception_object)
{
  if (qword_25463B1A0)
  {
    qword_25463B1A8 = qword_25463B1A0;
    operator delete((void *)qword_25463B1A0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B214D00(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20B214D30(uint64_t a1)
{
  sub_20AEC833C(a1, *(char **)(a1 + 8));
  return a1;
}

__n128 sub_20B214D58@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_20B214DB4()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  _DWORD v4[6];
  int v5;
  void *__p[2];
  char v7;
  void **v8;
  const char *v9;
  _DWORD *v10;
  const char *v11;
  const char *v12;
  void ***v13;

  v5 = 0;
  if (qword_25463B1E0 - (uint64_t)xmmword_25463B1D0 <= 0)
  {
    sub_20AEF9DBC(v4, "{}");
    goto LABEL_16;
  }
  sub_20AED5B5C(v4, "{");
  v0 = xmmword_25463B1D0;
  sub_20B215E68((uint64_t)__p, (unsigned __int8 *)xmmword_25463B1D0);
  v8 = (void **)v4;
  v9 = (const char *)__p;
  v10 = v4;
  v11 = (const char *)__p;
  v12 = (const char *)__p;
  if (v5 == -1)
    sub_20AECFAB8();
  v13 = &v8;
  ((void (*)(void ****, _DWORD *))off_24C411E50[v5])(&v13, v4);
  if (v7 < 0)
  {
    operator delete(__p[0]);
    v1 = qword_25463B1E0;
    v2 = (unsigned __int8 *)(v0 + 1);
    if (v2 != (unsigned __int8 *)qword_25463B1E0)
    {
LABEL_10:
      while (1)
      {
        v8 = (void **)v4;
        v9 = ",";
        v10 = v4;
        v11 = ",";
        v12 = ",";
        if (v5 == -1)
          break;
        __p[0] = &v8;
        ((void (*)(void **, _DWORD *))off_24C411E38[v5])(__p, v4);
        sub_20B215E68((uint64_t)__p, v2);
        v8 = (void **)v4;
        v9 = (const char *)__p;
        v10 = v4;
        v11 = (const char *)__p;
        v12 = (const char *)__p;
        if (v5 == -1)
          sub_20AECFAB8();
        v13 = &v8;
        ((void (*)(void ****, _DWORD *))off_24C411E50[v5])(&v13, v4);
        if (v7 < 0)
          operator delete(__p[0]);
        if (++v2 == (unsigned __int8 *)v1)
          goto LABEL_14;
      }
LABEL_20:
      sub_20AECFAB8();
    }
  }
  else
  {
    v1 = qword_25463B1E0;
    v2 = (unsigned __int8 *)(v0 + 1);
    if (v2 != (unsigned __int8 *)qword_25463B1E0)
      goto LABEL_10;
  }
LABEL_14:
  v8 = (void **)v4;
  v9 = "}";
  v10 = v4;
  v11 = "}";
  v12 = "}";
  if (v5 == -1)
    goto LABEL_20;
  __p[0] = &v8;
  ((void (*)(void **, _DWORD *))off_24C411E38[v5])(__p, v4);
LABEL_16:
  if (v5 == -1)
    sub_20AECFAB8();
  v8 = __p;
  result = ((uint64_t (*)(void ***, _DWORD *))off_24C411E20[v5])(&v8, v4);
  if (v5 != -1)
    return ((uint64_t (*)(void ***, _DWORD *))off_24C411E08[v5])(&v8, v4);
  return result;
}

void sub_20B21502C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_20AECFA60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

char *sub_20B215074@<X0>(char *__src@<X0>, size_t __len@<X1>, uint64_t a3@<X8>)
{
  size_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  size_t v11;
  __int128 *p_dst;
  __int128 *v13;
  size_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  unint64_t v22;
  int8x8_t v23;
  _BYTE *v24;
  size_t v25;
  size_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  unint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  unint64_t v36;
  int8x8_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  _BYTE *v47;
  unint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  unint64_t v51;
  int8x8_t v52;
  _BYTE *v53;
  _BYTE *v54;
  __int128 v55;
  unint64_t v56;
  _QWORD *v57;
  __int128 v58;
  __int128 v59;
  unint64_t v60;
  __int128 __dst;
  unint64_t v62;

  v3 = __len;
  if (!__len)
  {
    HIBYTE(v56) = 0;
    v13 = &v55;
LABEL_21:
    *((_BYTE *)v13 + v3) = 0;
    v16 = v56;
    *(_QWORD *)(a3 + 16) = v56;
    *(_OWORD *)a3 = v55;
    *(_BYTE *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 48) = 0;
    v17 = HIBYTE(v16);
    v18 = *(_BYTE **)a3;
    v19 = *(_QWORD *)(a3 + 8);
    if ((v17 & 0x80u) == 0)
    {
      v18 = (_BYTE *)a3;
      v19 = v17;
    }
    if (!v19)
      return __src;
    v20 = v18;
    if (v19 < 8)
    {
LABEL_45:
      v24 = &v18[v19];
      do
      {
        if (*v20 == 58)
          *v20 = 95;
        ++v20;
      }
      while (v20 != v24);
      return __src;
    }
    v20 = &v18[v19 & 0xFFFFFFFFFFFFFFF8];
    v21 = v18 + 3;
    v22 = v19 & 0xFFFFFFFFFFFFFFF8;
    while (1)
    {
      v23 = vceq_s8(*(int8x8_t *)(v21 - 3), (int8x8_t)0x3A3A3A3A3A3A3A3ALL);
      if ((v23.i8[0] & 1) != 0)
      {
        *(v21 - 3) = 95;
        if ((v23.i8[1] & 1) == 0)
        {
LABEL_29:
          if ((v23.i8[2] & 1) == 0)
            goto LABEL_30;
          goto LABEL_38;
        }
      }
      else if ((v23.i8[1] & 1) == 0)
      {
        goto LABEL_29;
      }
      *(v21 - 2) = 95;
      if ((v23.i8[2] & 1) == 0)
      {
LABEL_30:
        if ((v23.i8[3] & 1) == 0)
          goto LABEL_31;
        goto LABEL_39;
      }
LABEL_38:
      *(v21 - 1) = 95;
      if ((v23.i8[3] & 1) == 0)
      {
LABEL_31:
        if ((v23.i8[4] & 1) == 0)
          goto LABEL_32;
        goto LABEL_40;
      }
LABEL_39:
      *v21 = 95;
      if ((v23.i8[4] & 1) == 0)
      {
LABEL_32:
        if ((v23.i8[5] & 1) == 0)
          goto LABEL_33;
        goto LABEL_41;
      }
LABEL_40:
      v21[1] = 95;
      if ((v23.i8[5] & 1) == 0)
      {
LABEL_33:
        if ((v23.i8[6] & 1) == 0)
          goto LABEL_34;
        goto LABEL_42;
      }
LABEL_41:
      v21[2] = 95;
      if ((v23.i8[6] & 1) == 0)
      {
LABEL_34:
        if ((v23.i8[7] & 1) != 0)
          goto LABEL_43;
        goto LABEL_26;
      }
LABEL_42:
      v21[3] = 95;
      if ((v23.i8[7] & 1) != 0)
LABEL_43:
        v21[4] = 95;
LABEL_26:
      v21 += 8;
      v22 -= 8;
      if (!v22)
      {
        if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8))
          return __src;
        goto LABEL_45;
      }
    }
  }
  v5 = (uint64_t)__src;
  v6 = 0;
  v7 = 0;
  v8 = __src + 1;
  v9 = __src - 1;
  do
  {
    if (__len == v6)
      goto LABEL_13;
    v10 = v9[__len];
    ++v7;
    --v8;
    --v9;
    ++v6;
  }
  while (v10 != 58);
  v11 = __len - v7;
  if (__len - v7 == -1)
  {
LABEL_13:
    if (__len > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    if (__len >= 0x17)
    {
      v14 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v14 = __len | 7;
      v15 = v14 + 1;
      v13 = (__int128 *)operator new(v14 + 1);
      *((_QWORD *)&v55 + 1) = v3;
      v56 = v15 | 0x8000000000000000;
      *(_QWORD *)&v55 = v13;
    }
    else
    {
      HIBYTE(v56) = __len;
      v13 = &v55;
    }
    __src = (char *)memmove(v13, (const void *)v5, v3);
    goto LABEL_21;
  }
  if (v11)
  {
    if (__len <= v11)
      sub_20AEC749C("string_view::substr");
    v25 = v7 - 1;
    if (v25 >= __len)
      v26 = __len;
    else
      v26 = v25;
    if (v26 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    if (v26 >= 0x17)
    {
      v38 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v38 = v26 | 7;
      v39 = v38 + 1;
      v27 = (__int128 *)operator new(v38 + 1);
      *((_QWORD *)&v59 + 1) = v26;
      v60 = v39 | 0x8000000000000000;
      *(_QWORD *)&v59 = v27;
    }
    else
    {
      HIBYTE(v60) = v26;
      v27 = &v59;
      if (!v26)
        goto LABEL_88;
    }
    memmove(v27, &v8[v3], v26);
LABEL_88:
    *((_BYTE *)v27 + v26) = 0;
    if (v3 >= v11)
      v3 = v11;
    if (v3 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    if (v3 >= 0x17)
    {
      v41 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v41 = v3 | 7;
      v42 = v41 + 1;
      v40 = operator new(v41 + 1);
      *(_QWORD *)&v58 = v3;
      *((_QWORD *)&v58 + 1) = v42 | 0x8000000000000000;
      v57 = v40;
    }
    else
    {
      HIBYTE(v58) = v3;
      v40 = &v57;
    }
    __src = (char *)memmove(v40, (const void *)v5, v3);
    *((_BYTE *)v40 + v3) = 0;
    v43 = v58;
    *(_QWORD *)(a3 + 24) = v57;
    *(_QWORD *)(a3 + 32) = v43;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v58 + 7);
    LOBYTE(v43) = HIBYTE(v58);
    v44 = v60;
    *(_OWORD *)a3 = v59;
    *(_QWORD *)(a3 + 16) = v44;
    *(_BYTE *)(a3 + 47) = v43;
    *(_BYTE *)(a3 + 48) = 1;
    v45 = HIBYTE(v44);
    v46 = (v44 & 0x8000000000000000) != 0;
    v47 = *(_BYTE **)a3;
    v48 = *(_QWORD *)(a3 + 8);
    if (!v46)
    {
      v47 = (_BYTE *)a3;
      v48 = v45;
    }
    if (!v48)
      return __src;
    v49 = v47;
    if (v48 < 8)
    {
LABEL_126:
      v54 = &v47[v48];
      do
      {
        if (*v49 == 58)
          *v49 = 95;
        ++v49;
      }
      while (v49 != v54);
      return __src;
    }
    v49 = &v47[v48 & 0xFFFFFFFFFFFFFFF8];
    v50 = v47 + 3;
    v51 = v48 & 0xFFFFFFFFFFFFFFF8;
    while (1)
    {
      v52 = vceq_s8(*(int8x8_t *)(v50 - 3), (int8x8_t)0x3A3A3A3A3A3A3A3ALL);
      if ((v52.i8[0] & 1) != 0)
      {
        *(v50 - 3) = 95;
        if ((v52.i8[1] & 1) == 0)
        {
LABEL_104:
          if ((v52.i8[2] & 1) == 0)
            goto LABEL_105;
          goto LABEL_113;
        }
      }
      else if ((v52.i8[1] & 1) == 0)
      {
        goto LABEL_104;
      }
      *(v50 - 2) = 95;
      if ((v52.i8[2] & 1) == 0)
      {
LABEL_105:
        if ((v52.i8[3] & 1) == 0)
          goto LABEL_106;
        goto LABEL_114;
      }
LABEL_113:
      *(v50 - 1) = 95;
      if ((v52.i8[3] & 1) == 0)
      {
LABEL_106:
        if ((v52.i8[4] & 1) == 0)
          goto LABEL_107;
        goto LABEL_115;
      }
LABEL_114:
      *v50 = 95;
      if ((v52.i8[4] & 1) == 0)
      {
LABEL_107:
        if ((v52.i8[5] & 1) == 0)
          goto LABEL_108;
        goto LABEL_116;
      }
LABEL_115:
      v50[1] = 95;
      if ((v52.i8[5] & 1) == 0)
      {
LABEL_108:
        if ((v52.i8[6] & 1) == 0)
          goto LABEL_109;
        goto LABEL_117;
      }
LABEL_116:
      v50[2] = 95;
      if ((v52.i8[6] & 1) == 0)
      {
LABEL_109:
        if ((v52.i8[7] & 1) != 0)
          goto LABEL_118;
        goto LABEL_101;
      }
LABEL_117:
      v50[3] = 95;
      if ((v52.i8[7] & 1) != 0)
LABEL_118:
        v50[4] = 95;
LABEL_101:
      v50 += 8;
      v51 -= 8;
      if (!v51)
      {
        if (v48 == (v48 & 0xFFFFFFFFFFFFFFF8))
          return __src;
        goto LABEL_126;
      }
    }
  }
  if (__len - 1 < __len)
    v3 = __len - 1;
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v3 >= 0x17)
  {
    v28 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v28 = v3 | 7;
    v29 = v28 + 1;
    p_dst = (__int128 *)operator new(v28 + 1);
    *((_QWORD *)&__dst + 1) = v3;
    v62 = v29 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v62) = v3;
    p_dst = &__dst;
    if (!v3)
      goto LABEL_61;
  }
  __src = (char *)memmove(p_dst, (const void *)(v5 + 1), v3);
LABEL_61:
  *((_BYTE *)p_dst + v3) = 0;
  v30 = v62;
  *(_QWORD *)(a3 + 16) = v62;
  *(_OWORD *)a3 = __dst;
  *(_BYTE *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  v31 = HIBYTE(v30);
  v32 = *(_BYTE **)a3;
  v33 = *(_QWORD *)(a3 + 8);
  if ((v31 & 0x80u) == 0)
  {
    v32 = (_BYTE *)a3;
    v33 = v31;
  }
  if (!v33)
    return __src;
  v34 = v32;
  if (v33 < 8)
  {
LABEL_120:
    v53 = &v32[v33];
    do
    {
      if (*v34 == 58)
        *v34 = 95;
      ++v34;
    }
    while (v34 != v53);
    return __src;
  }
  v34 = &v32[v33 & 0xFFFFFFFFFFFFFFF8];
  v35 = v32 + 3;
  v36 = v33 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v37 = vceq_s8(*(int8x8_t *)(v35 - 3), (int8x8_t)0x3A3A3A3A3A3A3A3ALL);
    if ((v37.i8[0] & 1) != 0)
    {
      *(v35 - 3) = 95;
      if ((v37.i8[1] & 1) == 0)
      {
LABEL_69:
        if ((v37.i8[2] & 1) == 0)
          goto LABEL_70;
        goto LABEL_78;
      }
    }
    else if ((v37.i8[1] & 1) == 0)
    {
      goto LABEL_69;
    }
    *(v35 - 2) = 95;
    if ((v37.i8[2] & 1) == 0)
    {
LABEL_70:
      if ((v37.i8[3] & 1) == 0)
        goto LABEL_71;
      goto LABEL_79;
    }
LABEL_78:
    *(v35 - 1) = 95;
    if ((v37.i8[3] & 1) == 0)
    {
LABEL_71:
      if ((v37.i8[4] & 1) == 0)
        goto LABEL_72;
      goto LABEL_80;
    }
LABEL_79:
    *v35 = 95;
    if ((v37.i8[4] & 1) == 0)
    {
LABEL_72:
      if ((v37.i8[5] & 1) == 0)
        goto LABEL_73;
      goto LABEL_81;
    }
LABEL_80:
    v35[1] = 95;
    if ((v37.i8[5] & 1) == 0)
    {
LABEL_73:
      if ((v37.i8[6] & 1) != 0)
        goto LABEL_82;
      goto LABEL_74;
    }
LABEL_81:
    v35[2] = 95;
    if ((v37.i8[6] & 1) != 0)
    {
LABEL_82:
      v35[3] = 95;
      if ((v37.i8[7] & 1) == 0)
        goto LABEL_66;
      goto LABEL_83;
    }
LABEL_74:
    if ((v37.i8[7] & 1) == 0)
      goto LABEL_66;
LABEL_83:
    v35[4] = 95;
LABEL_66:
    v35 += 8;
    v36 -= 8;
  }
  while (v36);
  if (v33 != (v33 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_120;
  return __src;
}

void sub_20B2156F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B21570C(uint64_t a1, void *__src, size_t __len, char a4)
{
  __int128 *v8;
  size_t v9;
  size_t v10;
  __int128 v11;
  unint64_t v12;
  char **v13;
  char *v14[2];
  void *__p[2];
  unint64_t v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    v8 = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&v11 + 1) = __len;
    v12 = v10 | 0x8000000000000000;
    *(_QWORD *)&v11 = v8;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  v8 = &v11;
  if (__len)
LABEL_8:
    memmove(v8, __src, __len);
  *((_BYTE *)v8 + __len) = 0;
  *(_OWORD *)__p = v11;
  v16 = v12;
  v17 = a4;
  v14[0] = 0;
  v14[1] = 0;
  v13 = v14;
  sub_20AF4043C((uint64_t **)&v13, (uint64_t *)v14, (const void **)__p, (uint64_t)__p);
  (*(void (**)(uint64_t, char ***))(*(_QWORD *)a1 + 32))(a1, &v13);
  sub_20AEC833C((uint64_t)&v13, v14[0]);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
}

void sub_20B215850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_20AEC833C((uint64_t)&a12, a13);
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B215888(uint64_t a1, const void ***a2)
{
  const void ***v3;
  const void **v4;
  const void **v5;
  const void ***v6;
  BOOL v7;
  char **v8;
  char *v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  v3 = a2 + 1;
  v4 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      sub_20AF4043C((uint64_t **)&v8, (uint64_t *)v9, v4 + 4, (uint64_t)(v4 + 4));
      v5 = (const void **)v4[1];
      if (v5)
      {
        do
        {
          v6 = (const void ***)v5;
          v5 = (const void **)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (const void ***)v4[2];
          v7 = *v6 == v4;
          v4 = (const void **)v6;
        }
        while (!v7);
      }
      v4 = (const void **)v6;
    }
    while (v6 != v3);
  }
  (*(void (**)(uint64_t, char ***))(*(_QWORD *)a1 + 32))(a1, &v8);
  sub_20AEC833C((uint64_t)&v8, v9[0]);
}

void sub_20B215944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20AEC833C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20B21595C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20AEC833C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B215974(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  size_t v11;
  int v12;
  __int128 *p_dst;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void *__p[2];
  _BYTE v20[9];
  __int128 __dst;
  unint64_t v22;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if (v9)
    return v6;
  if (a3)
  {
    v11 = a3;
    do
    {
      if (!v11)
        goto LABEL_8;
      v12 = a2[--v11];
    }
    while (v12 != 46);
    if (v11 == -1)
    {
LABEL_8:
      v7 = 0;
      v8 = 256;
      *(_WORD *)&v20[7] = 256;
      LOBYTE(__p[0]) = 0;
      goto LABEL_21;
    }
    if (a3 >= v11)
      a3 = v11;
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (a3 >= 0x17)
    {
      v14 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v14 = a3 | 7;
      v15 = v14 + 1;
      p_dst = (__int128 *)operator new(v14 + 1);
      *((_QWORD *)&__dst + 1) = a3;
      v22 = v15 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v22) = a3;
      p_dst = &__dst;
      if (!a3)
        goto LABEL_20;
    }
    memmove(p_dst, a2, a3);
LABEL_20:
    *((_BYTE *)p_dst + a3) = 0;
    *(_OWORD *)__p = __dst;
    *(_QWORD *)v20 = v22;
    v20[8] = 1;
    v7 = HIBYTE(v22);
    v8 = *((_QWORD *)&__dst + 1);
    goto LABEL_21;
  }
  LOBYTE(__p[0]) = 0;
  v20[8] = 0;
LABEL_21:
  if ((v7 & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v17 = v7;
  else
    v17 = v8;
  v10 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 64))(a1, v16, v17);
  if (v20[8] && (v20[7] & 0x80000000) != 0)
    operator delete(__p[0]);
  return v10;
}

void sub_20B215AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B215B1C(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  BOOL v4;
  void *v5;
  void *v6;
  size_t v7;
  int v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  const void *v16;
  size_t v17;
  const void *v18;
  size_t v19;
  int v20;
  uint64_t *v21;
  size_t v22;
  size_t v23;
  const void *v24;
  size_t v25;
  size_t v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  void *v32;
  _BYTE v33[15];
  unsigned __int8 v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x24BDAC8D0];
  qword_25463B1C8 = 0;
  qword_25463B1C0 = 0;
  qword_25463B1B8 = (uint64_t)&qword_25463B1C0;
  v2 = *a1;
  v3 = a1[2];
  v30 = *a2;
  v29 = a2[2];
  v4 = *a1 == *a2 && v3 == a2[2];
  if (!v4)
  {
    v5 = &unk_25463B000;
    while (1)
    {
      sub_20B215E68((uint64_t)&v32, v2);
      v6 = v32;
      v35[0] = *(_QWORD *)v33;
      *(_QWORD *)((char *)v35 + 7) = *(_QWORD *)&v33[7];
      v7 = v34;
      v8 = (char)v34;
      v9 = operator new(0x40uLL);
      v9[4] = v6;
      v9[5] = v35[0];
      *(_QWORD *)((char *)v9 + 47) = *(_QWORD *)((char *)v35 + 7);
      *((_BYTE *)v9 + 55) = v8;
      v35[0] = 0;
      *(_QWORD *)((char *)v35 + 7) = 0;
      *((_BYTE *)v9 + 56) = *v3;
      v10 = (uint64_t *)*((_QWORD *)v5 + 55);
      v12 = &qword_25463B1C0;
      v11 = qword_25463B1C0;
      v31 = v3;
      if (v10 != &qword_25463B1C0)
      {
        v13 = qword_25463B1C0;
        if (qword_25463B1C0)
        {
          do
          {
            v12 = (uint64_t *)v13;
            v13 = *(_QWORD *)(v13 + 8);
          }
          while (v13);
        }
        else
        {
          v14 = &qword_25463B1C0;
          do
          {
            v12 = (uint64_t *)v14[2];
            v4 = *v12 == (_QWORD)v14;
            v14 = v12;
          }
          while (v4);
        }
        v15 = *((char *)v12 + 55);
        if (v15 >= 0)
          v16 = v12 + 4;
        else
          v16 = (const void *)v12[4];
        if (v15 >= 0)
          v17 = *((unsigned __int8 *)v12 + 55);
        else
          v17 = v12[5];
        if (v8 >= 0)
          v18 = v9 + 4;
        else
          v18 = v6;
        if (v8 < 0)
          v7 = v9[5];
        if (v7 >= v17)
          v19 = v17;
        else
          v19 = v7;
        v20 = memcmp(v16, v18, v19);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            goto LABEL_28;
        }
        else if (v17 >= v7)
        {
LABEL_28:
          if (!v11)
          {
LABEL_57:
            v12 = &qword_25463B1C0;
            v21 = &qword_25463B1C0;
            goto LABEL_58;
          }
          while (1)
          {
            v12 = (uint64_t *)v11;
            v22 = *(unsigned __int8 *)(v11 + 55);
            v23 = *(_QWORD *)(v11 + 40);
            if ((v22 & 0x80u) == 0)
              v24 = (const void *)(v11 + 32);
            else
              v24 = *(const void **)(v11 + 32);
            if ((v22 & 0x80u) == 0)
              v25 = v22;
            else
              v25 = v23;
            if (v25 >= v7)
              v26 = v7;
            else
              v26 = v25;
            v27 = memcmp(v18, v24, v26);
            if (v27)
            {
              if (v27 < 0)
                goto LABEL_30;
            }
            else if (v7 < v25)
            {
LABEL_30:
              v11 = *v12;
              v21 = v12;
              if (!*v12)
                goto LABEL_58;
              continue;
            }
            v28 = memcmp(v24, v18, v26);
            if (v28)
            {
              if ((v28 & 0x80000000) == 0)
                goto LABEL_53;
            }
            else if (v25 >= v7)
            {
              goto LABEL_53;
            }
            v11 = v12[1];
            if (!v11)
            {
              v21 = v12 + 1;
              goto LABEL_58;
            }
          }
        }
      }
      if (!v11)
        goto LABEL_57;
      v21 = v12 + 1;
      if (v12[1])
      {
LABEL_53:
        if (v8 < 0)
          operator delete(v6);
        operator delete(v9);
        v5 = &unk_25463B000;
        ++v2;
        v3 = v31 + 1;
        if (v2 == v30)
          goto LABEL_61;
      }
      else
      {
LABEL_58:
        *v9 = 0;
        v9[1] = 0;
        v9[2] = v12;
        *v21 = (uint64_t)v9;
        v5 = &unk_25463B000;
        if (*(_QWORD *)qword_25463B1B8)
        {
          qword_25463B1B8 = *(_QWORD *)qword_25463B1B8;
          v9 = (_QWORD *)*v21;
        }
        sub_20AEC84C8((uint64_t *)qword_25463B1C0, v9);
        ++qword_25463B1C8;
        ++v2;
        v3 = v31 + 1;
        if (v2 == v30)
        {
LABEL_61:
          if (v3 == v29)
            return;
        }
      }
    }
  }
}

void sub_20B215E24(_Unwind_Exception *a1)
{
  void *v1;
  int v2;

  if (v2 < 0)
  {
    operator delete(v1);
    sub_20AEC833C((uint64_t)&qword_25463B1B8, (char *)qword_25463B1C0);
    _Unwind_Resume(a1);
  }
  sub_20AEC833C((uint64_t)&qword_25463B1B8, (char *)qword_25463B1C0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B215E68(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  int v7;
  size_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _BYTE v20[24];
  int v21;
  void *__dst[2];
  unint64_t v23;
  _QWORD v24[5];
  _QWORD *v25;

  v21 = 0;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_20AEC0BD8(v3);
  v24[0] = v3;
  v4 = (_QWORD *)(v3 + 16);
  v5 = *a2;
  if (v5 > 2)
  {
    sub_20AEC01D0(v4, (uint64_t)"Invalid(", 8);
    v6 = (_QWORD *)std::ostream::operator<<();
    sub_20AEC01D0(v6, (uint64_t)")", 1);
  }
  else
  {
    sub_20AEC01D0(v4, (uint64_t)(&off_24C411D90)[2 * v5], (uint64_t)(&off_24C411D90)[2 * v5 + 1]);
  }
  v7 = *(_DWORD *)(v3 + 120);
  if ((v7 & 0x10) != 0)
  {
    v10 = *(_QWORD *)(v3 + 112);
    v11 = *(_QWORD *)(v3 + 72);
    if (v10 < v11)
    {
      *(_QWORD *)(v3 + 112) = v11;
      v10 = v11;
    }
    v12 = *(const void **)(v3 + 64);
    v8 = v10 - (_QWORD)v12;
    if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v23) = 0;
      v9 = __dst;
      goto LABEL_17;
    }
    v12 = *(const void **)(v3 + 40);
    v8 = *(_QWORD *)(v3 + 56) - (_QWORD)v12;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v8 >= 0x17)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    v9 = (void **)operator new(v13 + 1);
    __dst[1] = (void *)v8;
    v23 = v14 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_16;
  }
  HIBYTE(v23) = v8;
  v9 = __dst;
  if (v8)
LABEL_16:
    memmove(v9, v12, v8);
LABEL_17:
  *((_BYTE *)v9 + v8) = 0;
  v15 = v24[0];
  if (v24[0])
  {
    v16 = MEMORY[0x24BEDB7F0];
    v17 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v24[0] = *MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(v16 + 72);
    *(_QWORD *)(v15 + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(v16 + 64);
    *(_QWORD *)(v15 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v15 + 16) = v18;
    if (*(char *)(v15 + 111) < 0)
      operator delete(*(void **)(v15 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v15 + 128);
    MEMORY[0x20BD3583C](v15, 0x10B2C40EED050F3);
  }
  v24[0] = v20;
  v24[1] = __dst;
  v24[2] = v20;
  v24[3] = __dst;
  v24[4] = __dst;
  if (v21 == -1)
    sub_20AECFAB8();
  v25 = v24;
  ((void (*)(_QWORD **, _BYTE *))off_24C411DF0[v21])(&v25, v20);
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
  if (v21 == -1)
    sub_20AECFAB8();
  v24[0] = __dst;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C411E20[v21])(v24, v20);
  if (v21 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C411E08[v21])(v24, v20);
  return result;
}

void sub_20B21614C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x20BD3583C](v2, 0x10B2C40EED050F3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B216178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B216190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_20AECFA60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

unint64_t sub_20B2161D0(std::string *__str)
{
  unsigned __int128 *v2;
  unint64_t v3;
  unsigned __int128 v4;
  unint64_t v5;
  size_t v6;
  std::string::size_type size;
  int v8;
  std::string *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v14;
  unint64_t v15;
  void *__p;
  size_t __n;
  unsigned __int8 v19;
  void *v20;
  size_t v21;

  v2 = (unsigned __int128 *)&__str[1].__r_.__value_.__r.__words[1];
  do
  {
    v4 = __ldaxp(v2);
    LOBYTE(v3) = v4;
  }
  while (__stlxp(v4, v2));
  v5 = (unint64_t)v4 >> 8;
  if (!BYTE8(v4))
  {
    v20 = (void *)std::stoll(__str, 0, 10);
    LOBYTE(v21) = 1;
    sub_20B1E487C((uint64_t *)&v20);
    if ((v19 & 0x80u) == 0)
      v6 = v19;
    else
      v6 = __n;
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    v8 = (char)size;
    if ((size & 0x80u) != 0)
      size = __str->__r_.__value_.__l.__size_;
    if (v6 == size)
    {
      if (v8 >= 0)
        v9 = __str;
      else
        v9 = (std::string *)__str->__r_.__value_.__r.__words[0];
      if ((v19 & 0x80) != 0)
      {
        v14 = memcmp(__p, v9, __n);
        operator delete(__p);
        if (!v14)
        {
LABEL_27:
          v3 = (unint64_t)v20;
          __p = v20;
          __n = v21;
          v15 = v21;
          do
            __ldaxp(v2);
          while (__stlxp(__PAIR128__(v15, v3), v2));
          v5 = v3 >> 8;
          return v3 | (v5 << 8);
        }
      }
      else
      {
        if (!v19)
          goto LABEL_27;
        v10 = 0;
        do
        {
          v11 = *((unsigned __int8 *)&__p + v10);
          v12 = v9->__r_.__value_.__s.__data_[v10];
        }
        while (v11 == v12 && v19 - 1 != v10++);
        if (v11 == v12)
          goto LABEL_27;
      }
    }
    else if ((v19 & 0x80) != 0)
    {
      operator delete(__p);
    }
    LOBYTE(v3) = 0;
  }
  return v3 | (v5 << 8);
}

void sub_20B21631C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x20B2162FCLL);
}

void sub_20B216330(_BYTE *__src@<X0>, uint64_t __len@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v3;
  int64_t v7;
  size_t v8;
  int v9;
  uint64_t v10;
  void **p_dst;
  uint64_t v12;
  uint64_t v13;
  char v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  size_t *v22;
  unint64_t v23;
  size_t *v24;
  _BYTE *v25;
  unint64_t v26;
  int8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t *v31;
  int64_t v32;
  _QWORD *v33;
  __int128 v34;
  void **__dst;
  __int128 v36;
  size_t v37;
  _BYTE v38[15];
  unsigned __int8 v39;
  _QWORD v40[2];
  _QWORD v41[2];
  _QWORD v42[3];

  v42[2] = *MEMORY[0x24BDAC8D0];
  if (!__len)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 80) = 0;
    return;
  }
  v7 = 0;
  v8 = __len;
  while (__src[v7] != 35)
  {
    if (__len == ++v7)
    {
      LOBYTE(v9) = 0;
      v10 = -1;
      goto LABEL_14;
    }
  }
  LOBYTE(v9) = 0;
  v10 = -1;
  if (__len != v7 && v7 != -1)
  {
    if (__len >= v7)
      v8 = v7;
    else
      v8 = __len;
    v9 = 1;
    if (!v8)
    {
      v32 = __len + ~v7;
      if (__len >= v32)
        v15 = v32;
      else
        v15 = __len;
      if (v15 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_25;
LABEL_81:
      sub_20AEC0138();
    }
    v10 = v7;
  }
LABEL_14:
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v8 >= 0x17)
  {
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    *(_QWORD *)&v36 = v8;
    *((_QWORD *)&v36 + 1) = v13 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v36) = v8;
    p_dst = (void **)&__dst;
  }
  memmove(p_dst, __src, v8);
  *((_BYTE *)p_dst + v8) = 0;
  v8 = (size_t)__dst;
  v42[0] = v36;
  *(_QWORD *)((char *)v42 + 7) = *(_QWORD *)((char *)&v36 + 7);
  v3 = HIBYTE(v36);
  __dst = 0;
  v36 = 0uLL;
  if ((v9 & 1) == 0)
  {
    v17 = 0;
    v18 = 0;
    goto LABEL_36;
  }
  v9 = 0;
  if (__len >= __len + ~v10)
    v15 = __len + ~v10;
  else
    v15 = __len;
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_81;
LABEL_25:
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    v16 = operator new(v19 + 1);
    *(_QWORD *)&v34 = v15;
    *((_QWORD *)&v34 + 1) = v20 | 0x8000000000000000;
    v33 = v16;
  }
  else
  {
    HIBYTE(v34) = v15;
    v16 = &v33;
    if (!v15)
      goto LABEL_33;
  }
  memmove(v16, &__src[__len - v15], v15);
LABEL_33:
  *((_BYTE *)v16 + v15) = 0;
  v17 = v33;
  v40[0] = v34;
  *(_QWORD *)((char *)v40 + 7) = *(_QWORD *)((char *)&v34 + 7);
  v14 = HIBYTE(v34);
  v34 = 0uLL;
  v33 = 0;
  v41[0] = v40[0];
  *(_QWORD *)((char *)v41 + 7) = *(_QWORD *)((char *)v40 + 7);
  v40[0] = 0;
  *(_QWORD *)((char *)v40 + 7) = 0;
  if (v9)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 0;
    v21 = 1;
    *(_BYTE *)(a3 + 80) = 0;
    goto LABEL_66;
  }
  v18 = 1;
LABEL_36:
  *(_QWORD *)&v38[7] = *(_QWORD *)((char *)v42 + 7);
  v37 = v8;
  *(_QWORD *)v38 = v42[0];
  v39 = v3;
  v42[0] = 0;
  *(_QWORD *)((char *)v42 + 7) = 0;
  if ((v3 & 0x80u) == 0)
    v22 = &v37;
  else
    v22 = (size_t *)v8;
  v23 = v3;
  if ((v3 & 0x80u) != 0)
    v23 = *(_QWORD *)v38;
  if (v23)
  {
    v24 = v22;
    if (v23 >= 8)
    {
      v24 = (size_t *)((char *)v22 + (v23 & 0xFFFFFFFFFFFFFFF8));
      v25 = (char *)v22 + 3;
      v26 = v23 & 0xFFFFFFFFFFFFFFF8;
      while (1)
      {
        v27 = vceq_s8(*(int8x8_t *)(v25 - 3), (int8x8_t)0x2323232323232323);
        if ((v27.i8[0] & 1) != 0)
        {
          *(v25 - 3) = 95;
          if ((v27.i8[1] & 1) == 0)
          {
LABEL_47:
            if ((v27.i8[2] & 1) == 0)
              goto LABEL_48;
            goto LABEL_56;
          }
        }
        else if ((v27.i8[1] & 1) == 0)
        {
          goto LABEL_47;
        }
        *(v25 - 2) = 95;
        if ((v27.i8[2] & 1) == 0)
        {
LABEL_48:
          if ((v27.i8[3] & 1) == 0)
            goto LABEL_49;
          goto LABEL_57;
        }
LABEL_56:
        *(v25 - 1) = 95;
        if ((v27.i8[3] & 1) == 0)
        {
LABEL_49:
          if ((v27.i8[4] & 1) == 0)
            goto LABEL_50;
          goto LABEL_58;
        }
LABEL_57:
        *v25 = 95;
        if ((v27.i8[4] & 1) == 0)
        {
LABEL_50:
          if ((v27.i8[5] & 1) == 0)
            goto LABEL_51;
          goto LABEL_59;
        }
LABEL_58:
        v25[1] = 95;
        if ((v27.i8[5] & 1) == 0)
        {
LABEL_51:
          if ((v27.i8[6] & 1) == 0)
            goto LABEL_52;
          goto LABEL_60;
        }
LABEL_59:
        v25[2] = 95;
        if ((v27.i8[6] & 1) == 0)
        {
LABEL_52:
          if ((v27.i8[7] & 1) != 0)
            goto LABEL_61;
          goto LABEL_44;
        }
LABEL_60:
        v25[3] = 95;
        if ((v27.i8[7] & 1) != 0)
LABEL_61:
          v25[4] = 95;
LABEL_44:
        v25 += 8;
        v26 -= 8;
        if (!v26)
        {
          if (v23 == (v23 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_63;
          break;
        }
      }
    }
    v31 = (size_t *)((char *)v22 + v23);
    do
    {
      if (*(_BYTE *)v24 == 35)
        *(_BYTE *)v24 = 95;
      v24 = (size_t *)((char *)v24 + 1);
    }
    while (v24 != v31);
LABEL_63:
    v8 = v37;
    v3 = v39;
  }
  v28 = *(_QWORD *)v38;
  v29 = *(_QWORD *)&v38[7];
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v28;
  *(_QWORD *)(a3 + 15) = v29;
  *(_BYTE *)(a3 + 23) = v3;
  *(_BYTE *)(a3 + 24) = 1;
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  if ((v18 & 1) == 0)
    goto LABEL_68;
  v8 = 0;
  v3 = 0;
  v21 = 0;
LABEL_66:
  v30 = v41[0];
  *(_QWORD *)(a3 + 32) = v17;
  *(_QWORD *)(a3 + 40) = v30;
  *(_QWORD *)(a3 + 47) = *(_QWORD *)((char *)v41 + 7);
  *(_BYTE *)(a3 + 55) = v14;
  v41[0] = 0;
  *(_QWORD *)((char *)v41 + 7) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_BYTE *)(a3 + 80) = 1;
  if ((v21 & 1) != 0)
    return;
  if ((v3 & 0x80) == 0)
  {
LABEL_68:
    if ((SHIBYTE(v36) & 0x80000000) == 0)
      return;
    goto LABEL_69;
  }
  operator delete((void *)v8);
  if (SHIBYTE(v36) < 0)
LABEL_69:
    operator delete(__dst);
}

void sub_20B216790(_Unwind_Exception *exception_object)
{
  void *v1;
  char v2;
  char v3;

  if ((v3 & 1) == 0 && v2 < 0)
  {
    operator delete(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B2167B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  int v4;
  BOOL v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void **v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v24;

  v2 = a2;
  v4 = a2[24];
  if (a1[24])
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if ((a1[24] != 0) != (v4 != 0))
      return 0;
  }
  else
  {
    v7 = a1[23];
    if ((v7 & 0x80u) == 0)
      v8 = a1[23];
    else
      v8 = *((_QWORD *)a1 + 1);
    v9 = a2[23];
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *((_QWORD *)a2 + 1);
    if (v8 != v9)
      return 0;
    if (v10 < 0)
      a2 = *(unsigned __int8 **)a2;
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
        return 0;
    }
    else if (a1[23])
    {
      v11 = a1;
      while (*v11 == *a2)
      {
        ++v11;
        ++a2;
        if (!--v7)
          goto LABEL_23;
      }
      return 0;
    }
  }
LABEL_23:
  result = (a1[80] != 0) == (v2[80] != 0);
  if (!a1[80] || !v2[80])
    return result;
  v12 = a1[55];
  if ((v12 & 0x80u) == 0)
    v13 = a1[55];
  else
    v13 = *((_QWORD *)a1 + 5);
  v14 = v2[55];
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *((_QWORD *)v2 + 5);
  if (v13 != v14)
    return 0;
  v16 = (const void **)(a1 + 32);
  if (v15 >= 0)
    v17 = v2 + 32;
  else
    v17 = (unsigned __int8 *)*((_QWORD *)v2 + 4);
  if ((v12 & 0x80) != 0)
    return memcmp(*v16, v17, *((_QWORD *)a1 + 5)) == 0;
  if (!a1[55])
    return 1;
  v18 = v12 - 1;
  do
  {
    v20 = *(unsigned __int8 *)v16;
    v16 = (const void **)((char *)v16 + 1);
    v19 = v20;
    v22 = *v17++;
    v21 = v22;
    v24 = v18-- != 0;
    result = v19 == v21;
  }
  while (v19 == v21 && v24);
  return result;
}

_QWORD *sub_20B216960(_QWORD *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  const char *v9;
  uint64_t v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  int v15;
  const char *v16;
  uint64_t v17;
  _QWORD *v18;

  sub_20AEC01D0(a1, (uint64_t)"{", 1);
  sub_20B430618(a1, (uint64_t *)a2);
  sub_20AEC01D0(a1, (uint64_t)",", 1);
  if (*(_BYTE *)(a2 + 40))
  {
    v4 = *(char *)(a2 + 39);
    if (v4 >= 0)
      v5 = (const char *)(a2 + 16);
    else
      v5 = *(const char **)(a2 + 16);
    if (v4 >= 0)
      v6 = *(unsigned __int8 *)(a2 + 39);
    else
      v6 = *(_QWORD *)(a2 + 24);
    v7 = a1;
  }
  else
  {
    v5 = "nullopt";
    v7 = a1;
    v6 = 7;
  }
  sub_20AEC01D0(v7, (uint64_t)v5, v6);
  sub_20AEC01D0(a1, (uint64_t)",", 1);
  if (*(_BYTE *)(a2 + 72))
  {
    v8 = *(char *)(a2 + 71);
    if (v8 >= 0)
      v9 = (const char *)(a2 + 48);
    else
      v9 = *(const char **)(a2 + 48);
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 71);
    else
      v10 = *(_QWORD *)(a2 + 56);
    v11 = a1;
  }
  else
  {
    v9 = "nullopt";
    v11 = a1;
    v10 = 7;
  }
  sub_20AEC01D0(v11, (uint64_t)v9, v10);
  sub_20AEC01D0(a1, (uint64_t)",", 1);
  if (*(_BYTE *)(a2 + 96))
    sub_20B430618(a1, (uint64_t *)(a2 + 80));
  else
    sub_20AEC01D0(a1, (uint64_t)"nullopt", 7);
  sub_20AEC01D0(a1, (uint64_t)",", 1);
  if (*(_BYTE *)(a2 + 160))
  {
    v14 = *(const char **)(a2 + 112);
    v13 = a2 + 112;
    v12 = v14;
    v15 = *(char *)(v13 + 23);
    if (v15 >= 0)
      v16 = (const char *)v13;
    else
      v16 = v12;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(v13 + 23);
    else
      v17 = *(_QWORD *)(v13 + 8);
    v18 = a1;
  }
  else
  {
    v16 = "nullopt";
    v18 = a1;
    v17 = 7;
  }
  sub_20AEC01D0(v18, (uint64_t)v16, v17);
  sub_20AEC01D0(a1, (uint64_t)"}", 1);
  return a1;
}

void sub_20B216AF8(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_20B216B00(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B216B68(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B216BD0(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  _QWORD v25[5];
  uint64_t v26;
  _QWORD v27[5];
  uint64_t v28;
  char v29;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v10 = a2[1];
    v9 = (std::__shared_weak_count *)a2[2];
    if (v5)
    {
      if (!v9)
        goto LABEL_12;
LABEL_7:
      v11 = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10)
          return 0;
      }
      else
      {
LABEL_12:
        if (!v10)
          return 0;
      }
      if (*(_QWORD *)(a1 + 8))
        goto LABEL_16;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 228, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_47;
      }
      if (*(_QWORD *)(a1 + 8))
      {
LABEL_16:
        result = (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_47;
        }
        result = (*(uint64_t (**)(_QWORD *, _QWORD))(*a2 + 24))(a2, *(_QWORD *)(a1 + 8));
        if (!(_DWORD)result)
          return result;
      }
      v15 = *(_QWORD *)(a1 + 8);
      if (v15)
      {
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        v17 = a2[1];
        if (!v17)
        {
LABEL_32:
          if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
          {
            v17 = a2[1];
            goto LABEL_34;
          }
LABEL_47:
          abort();
        }
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_47;
        }
        v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
        v17 = a2[1];
        if (!v17)
          goto LABEL_32;
      }
LABEL_34:
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      v27[0] = v16;
      v27[1] = v16 + 16;
      v27[2] = v16 + 48;
      v27[3] = v16 + 80;
      v27[4] = v16 + 112;
      v28 = v16 + 176;
      v25[0] = v21;
      v25[1] = v21 + 16;
      v25[2] = v21 + 48;
      v25[3] = v21 + 80;
      v25[4] = v21 + 112;
      v26 = v21 + 176;
      result = sub_20B2178A8((uint64_t)&v29, v27, v25);
      if (!(_DWORD)result)
        return result;
      result = (*(_BYTE *)(v28 + 24) != 0) == (*(_BYTE *)(v26 + 24) != 0);
      if (!*(_BYTE *)(v28 + 24) || !*(_BYTE *)(v26 + 24))
        return result;
      v22 = *(unsigned __int8 **)v28;
      v23 = *(unsigned __int8 **)(v28 + 8);
      v24 = *(unsigned __int8 **)v26;
      if (&v23[-*(_QWORD *)v28] == (unsigned __int8 *)(*(_QWORD *)(v26 + 8) - *(_QWORD *)v26))
      {
        if (v22 == v23)
          return 1;
        do
        {
          result = sub_20B2167B8(v22, v24);
          if (!(_DWORD)result)
            break;
          v22 += 96;
          v24 += 96;
        }
        while (v22 != v23);
        return result;
      }
      return 0;
    }
  }
  else
  {
LABEL_6:
    v10 = a2[1];
    v9 = (std::__shared_weak_count *)a2[2];
    if (v5)
      goto LABEL_7;
  }
  if (v9)
  {
    v18 = (unint64_t *)&v9->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v10 == 0;
}

uint64_t sub_20B216F74(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 8))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 228, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_7;
  }
  if (*(_QWORD *)(a1 + 8))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
  {
LABEL_7:
    abort();
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t sub_20B217038(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

void sub_20B2170B4(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::string *v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  std::string::size_type v26;
  char v27;
  _QWORD v28[3];
  int v29;
  std::string v30;
  const char *v31;
  const char *v32;
  std::string *v33;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v28[0] = v2;
  v28[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (!v2)
  {
    HIBYTE(v26) = 0;
    LOBYTE(__p[0]) = 0;
    if (!v3)
      goto LABEL_22;
    goto LABEL_18;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  v23 = *(_QWORD *)(a1 + 8);
  v24 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v6 + 32))(&v30);
  v10 = std::string::insert(&v30, 0, ",", 1uLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v26 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v3 = (std::__shared_weak_count *)v28[1];
  if (v28[1])
  {
LABEL_18:
    v14 = (unint64_t *)&v3->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
LABEL_22:
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(std::__shared_weak_count **)(a1 + 16);
  v23 = v16;
  v24 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v22 = v16;
  strcpy((char *)v28, "viz::SharedData");
  v28[2] = 0xF00000000000000;
  v29 = 1;
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  v30.__r_.__value_.__l.__size_ = (std::string::size_type)"{";
  v30.__r_.__value_.__r.__words[2] = (std::string::size_type)v28;
  v31 = "{";
  v32 = "{";
  sub_20AED5C4C((uint64_t *)&v30.__r_.__value_.__r.__words[2], (uint64_t)v28);
  sub_20AED5838((uint64_t)&v27, (uint64_t)v28, &v22);
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  v30.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
  v30.__r_.__value_.__r.__words[2] = (std::string::size_type)v28;
  v31 = (const char *)__p;
  v32 = (const char *)__p;
  if (v29 == -1)
    sub_20AECFAB8();
  v33 = &v30;
  ((void (*)(std::string **, _QWORD *))off_24C411F30[v29])(&v33, v28);
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  v30.__r_.__value_.__l.__size_ = (std::string::size_type)"}";
  v30.__r_.__value_.__r.__words[2] = (std::string::size_type)v28;
  v31 = "}";
  v32 = "}";
  if (v29 == -1)
    sub_20AECFAB8();
  v33 = &v30;
  ((void (*)(std::string **, _QWORD *))off_24C411F48[v29])(&v33, v28);
  if (v29 == -1)
    sub_20AECFAB8();
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  ((void (*)(std::string *, _QWORD *))off_24C411F18[v29])(&v30, v28);
  if (v29 != -1)
    ((void (*)(std::string *, _QWORD *))off_24C411F00[v29])(&v30, v28);
  if (!v17)
    goto LABEL_34;
  v20 = (unint64_t *)&v17->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
  {
LABEL_34:
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      return;
LABEL_37:
    operator delete(__p[0]);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (SHIBYTE(v26) < 0)
    goto LABEL_37;
}

void sub_20B2173C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  if (*(char *)(v3 - 57) < 0)
    operator delete(*(void **)(v3 - 80));
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B2173F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  sub_20AECFA60((uint64_t)&a20);
  sub_20AEC147C((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B217434(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::string *v12;
  void *v13;
  char v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p[2];
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::string __dst;
  int v37;

  v4 = *(void **)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  __p[0] = v4;
  __p[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (!v4)
  {
    v13 = 0;
    v14 = 0;
    if (!v5)
      goto LABEL_22;
    goto LABEL_18;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  v34 = *(_QWORD *)(a1 + 8);
  v35 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v8 + 40))(&__dst);
  v12 = std::string::insert(&__dst, 0, ",", 1uLL);
  v13 = (void *)v12->__r_.__value_.__r.__words[0];
  v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__r.__words[0] = 0;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v9)
  {
    v15 = (unint64_t *)&v9->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v5 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
LABEL_18:
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_22:
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(std::__shared_weak_count **)(a1 + 16);
  v34 = v19;
  v35 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  if (v19)
  {
    v23 = *(_QWORD *)(a1 + 8);
    v24 = *(std::__shared_weak_count **)(a1 + 16);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v23 + 40))(__p);
    v37 = -1;
    if (SHIBYTE(v33) < 0)
    {
      sub_20AEC60F4(&__dst, __p[0], (unint64_t)__p[1]);
      v27 = SHIBYTE(v33);
      *(std::string *)a2 = __dst;
      if (v27 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 16) = v33;
    }
    if (v24)
    {
      v28 = (unint64_t *)&v24->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v20 = v35;
    if (!v35)
    {
LABEL_44:
      if ((v14 & 0x80) == 0)
        return;
LABEL_47:
      operator delete(v13);
      return;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 23) = 7;
    strcpy((char *)a2, "nullptr");
    if (!v20)
      goto LABEL_44;
  }
  v30 = (unint64_t *)&v20->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (v31)
    goto LABEL_44;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (v14 < 0)
    goto LABEL_47;
}

void sub_20B2176D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;
  char v21;

  sub_20AECFA60((uint64_t)&a20);
  if (a17 < 0)
  {
    operator delete(__p);
    sub_20AEC147C((uint64_t)&a10);
    sub_20AEC147C((uint64_t)&a18);
    if ((v21 & 0x80) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    sub_20AEC147C((uint64_t)&a10);
    sub_20AEC147C((uint64_t)&a18);
    if ((v21 & 0x80) == 0)
      goto LABEL_3;
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_20B217750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_20AEC147C((uint64_t)&a15);
    sub_20AEC147C((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  sub_20AEC147C((uint64_t)&a15);
  sub_20AEC147C((uint64_t)&a12);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B217798@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)v3 + 48))(a2);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20B217820@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)v3 + 56))(a2);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B2178A8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  int v7;
  BOOL v8;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 **v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 **v29;
  BOOL v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  BOOL v42;

  if (*(_QWORD *)*a2 != *(_QWORD *)*a3 || *(unsigned __int8 *)(*a2 + 8) != *(unsigned __int8 *)(*a3 + 8))
    return 0;
  v5 = (unsigned __int8 *)a2[1];
  v6 = (unsigned __int8 **)a3[1];
  v7 = *((unsigned __int8 *)v6 + 24);
  if (v5[24])
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if ((v5[24] != 0) != (v7 != 0))
      return 0;
  }
  else
  {
    v10 = v5[23];
    if ((v10 & 0x80u) == 0)
      v11 = (unsigned __int8 *)v5[23];
    else
      v11 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
    v12 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = v6[1];
    if (v11 != v12)
      return 0;
    if (v13 >= 0)
      v14 = (unsigned __int8 *)a3[1];
    else
      v14 = *v6;
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v5, v14, *((_QWORD *)v5 + 1)))
        return 0;
    }
    else if (v5[23])
    {
      while (*v5 == *v14)
      {
        ++v5;
        ++v14;
        if (!--v10)
          goto LABEL_26;
      }
      return 0;
    }
  }
LABEL_26:
  v15 = (unsigned __int8 *)a2[2];
  v16 = (unsigned __int8 **)a3[2];
  v17 = *((unsigned __int8 *)v16 + 24);
  if (v15[24])
    v18 = v17 == 0;
  else
    v18 = 1;
  if (v18)
  {
    if ((v15[24] != 0) != (v17 != 0))
      return 0;
  }
  else
  {
    v23 = v15[23];
    if ((v23 & 0x80u) == 0)
      v24 = (unsigned __int8 *)v15[23];
    else
      v24 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
    v25 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 23);
    v26 = (char)v25;
    if ((char)v25 < 0)
      v25 = v16[1];
    if (v24 != v25)
      return 0;
    if (v26 >= 0)
      v27 = (unsigned __int8 *)a3[2];
    else
      v27 = *v16;
    if ((v23 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v15, v27, *((_QWORD *)v15 + 1)))
        return 0;
    }
    else if (v15[23])
    {
      while (*v15 == *v27)
      {
        ++v15;
        ++v27;
        if (!--v23)
          goto LABEL_32;
      }
      return 0;
    }
  }
LABEL_32:
  v19 = a2[3];
  v20 = a3[3];
  v21 = *(unsigned __int8 *)(v20 + 16);
  if (*(_BYTE *)(v19 + 16))
    v22 = v21 == 0;
  else
    v22 = 1;
  if (v22)
  {
    if ((*(_BYTE *)(v19 + 16) != 0) == (v21 != 0))
      goto LABEL_55;
    return 0;
  }
  if (*(_QWORD *)v19 != *(_QWORD *)v20 || *(unsigned __int8 *)(v19 + 8) != *(unsigned __int8 *)(v20 + 8))
    return 0;
LABEL_55:
  v28 = (unsigned __int8 *)a2[4];
  v29 = (unsigned __int8 **)a3[4];
  if (v28[48])
    v30 = *((_BYTE *)v29 + 48) == 0;
  else
    v30 = 1;
  if (v30)
    return (v28[48] != 0) == (*((_BYTE *)v29 + 48) != 0);
  v31 = v28[23];
  if ((v31 & 0x80u) == 0)
    v32 = (unsigned __int8 *)v28[23];
  else
    v32 = (unsigned __int8 *)*((_QWORD *)v28 + 1);
  v33 = (unsigned __int8 *)*((unsigned __int8 *)v29 + 23);
  v34 = (char)v33;
  if ((char)v33 < 0)
    v33 = v29[1];
  if (v32 != v33)
    return 0;
  if (v34 >= 0)
    v35 = (unsigned __int8 *)a3[4];
  else
    v35 = *v29;
  if ((v31 & 0x80) != 0)
    return memcmp(*(const void **)v28, v35, *((_QWORD *)v28 + 1)) == 0;
  if (!v28[23])
    return 1;
  v36 = v31 - 1;
  do
  {
    v38 = *v28++;
    v37 = v38;
    v40 = *v35++;
    v39 = v40;
    v42 = v36-- != 0;
    result = v37 == v39;
  }
  while (v37 == v39 && v42);
  return result;
}

void sub_20B217B8C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B217BB0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20B217BC8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d3kit3viz5IDataEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d3kit3viz5IDataEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d3kit3viz5IDataEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d3kit3viz5IDataEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_20B217C38(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C3FA4C0;
  sub_20AF4EA3C((uint64_t)(a1 + 8));
  a1[1] = &off_24C3F2CB0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20B217CBC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C3FA4C0;
  sub_20AF4EA3C((uint64_t)(a1 + 8));
  a1[1] = &off_24C3F2CB0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

BOOL sub_20B217D40(uint64_t (***a1)(), uint64_t (***a2)())
{
  if (*a2 != &off_24C411FE8)
    return 0;
  if (a1 == a2)
    return 1;
  return sub_20B008864((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
}

uint64_t *sub_20B217D78(uint64_t *a1, uint64_t a2, void *__src, size_t __len, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  _QWORD *v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  int v20;
  char v21;
  void *v22;
  BOOL v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  unint64_t v27;
  int8x8_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  size_t v32;
  __int128 *p_dst;
  unint64_t v34;
  unint64_t v35;
  const void *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v47;
  __int128 v48;
  int v49;
  void *__p[3];
  __int128 *v51;
  __int128 *v52;
  void **v53;
  __int128 __dst;
  unint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  *a1 = a2;
  v6 = a1 + 1;
  if (__len > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (__len >= 0x17)
  {
    v14 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v14 = __len | 7;
    v15 = v14 + 1;
    v12 = operator new(v14 + 1);
    *(_QWORD *)&v48 = __len;
    *((_QWORD *)&v48 + 1) = v15 | 0x8000000000000000;
    v47 = v12;
  }
  else
  {
    HIBYTE(v48) = __len;
    v12 = &v47;
    if (!__len)
    {
      LOBYTE(v47) = 0;
      v13 = *a1;
      if (*a1)
        goto LABEL_5;
      goto LABEL_12;
    }
  }
  memmove(v12, __src, __len);
  *((_BYTE *)v12 + __len) = 0;
  v13 = *a1;
  if (*a1)
  {
LABEL_5:
    LOBYTE(__p[0]) = 0;
    LOBYTE(v51) = 0;
    if (*(_BYTE *)(v13 + 264))
    {
      if (*(char *)(v13 + 263) < 0)
      {
        sub_20AEC60F4(__p, *(void **)(v13 + 240), *(_QWORD *)(v13 + 248));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(v13 + 240);
        __p[2] = *(void **)(v13 + 256);
      }
      LOBYTE(v51) = 1;
    }
    goto LABEL_15;
  }
LABEL_12:
  LOBYTE(__p[0]) = 0;
  LOBYTE(v51) = 0;
LABEL_15:
  v16 = operator new();
  v17 = v16;
  v18 = v47;
  *(_QWORD *)&__dst = v48;
  *(_QWORD *)((char *)&__dst + 7) = *(_QWORD *)((char *)&v48 + 7);
  v19 = HIBYTE(v48);
  v20 = SHIBYTE(v48);
  v47 = 0;
  v48 = 0uLL;
  v21 = (char)v51;
  if ((_BYTE)v51)
  {
    v22 = __p[1];
    *(void **)(v16 + 24) = __p[0];
    *(_QWORD *)(v16 + 32) = v22;
    *(void **)(v16 + 39) = *(void **)((char *)&__p[1] + 7);
    LOBYTE(v22) = HIBYTE(__p[2]);
    memset(__p, 0, sizeof(__p));
    *(_QWORD *)(v16 + 8) = __dst;
    *(_QWORD *)(v16 + 15) = *(_QWORD *)((char *)&__dst + 7);
    v21 = 1;
    *(_BYTE *)(v16 + 47) = (_BYTE)v22;
  }
  else
  {
    *(_QWORD *)(v16 + 8) = __dst;
    *(_QWORD *)(v16 + 15) = *(_QWORD *)((char *)&__dst + 7);
    *(_BYTE *)(v16 + 24) = 0;
  }
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 23) = v20;
  *(_BYTE *)(v16 + 48) = v21;
  v23 = v20 < 0;
  if (v20 >= 0)
    v24 = (_BYTE *)v16;
  else
    v24 = v18;
  if (v23)
    v19 = *(_QWORD *)(v16 + 8);
  if (!v19)
    goto LABEL_45;
  v25 = v24;
  if (v19 < 8)
    goto LABEL_57;
  v25 = &v24[v19 & 0xFFFFFFFFFFFFFFF8];
  v26 = v24 + 3;
  v27 = v19 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v28 = vceq_s8(*(int8x8_t *)(v26 - 3), (int8x8_t)0x3A3A3A3A3A3A3A3ALL);
    if ((v28.i8[0] & 1) != 0)
    {
      *(v26 - 3) = 95;
      if ((v28.i8[1] & 1) == 0)
        goto LABEL_29;
    }
    else if ((v28.i8[1] & 1) == 0)
    {
LABEL_29:
      if ((v28.i8[2] & 1) != 0)
        goto LABEL_30;
      goto LABEL_38;
    }
    *(v26 - 2) = 95;
    if ((v28.i8[2] & 1) != 0)
    {
LABEL_30:
      *(v26 - 1) = 95;
      if ((v28.i8[3] & 1) == 0)
        goto LABEL_31;
      goto LABEL_39;
    }
LABEL_38:
    if ((v28.i8[3] & 1) == 0)
    {
LABEL_31:
      if ((v28.i8[4] & 1) != 0)
        goto LABEL_32;
      goto LABEL_40;
    }
LABEL_39:
    *v26 = 95;
    if ((v28.i8[4] & 1) != 0)
    {
LABEL_32:
      v26[1] = 95;
      if ((v28.i8[5] & 1) == 0)
        goto LABEL_33;
      goto LABEL_41;
    }
LABEL_40:
    if ((v28.i8[5] & 1) == 0)
    {
LABEL_33:
      if ((v28.i8[6] & 1) == 0)
        goto LABEL_42;
      goto LABEL_34;
    }
LABEL_41:
    v26[2] = 95;
    if ((v28.i8[6] & 1) == 0)
    {
LABEL_42:
      if ((v28.i8[7] & 1) == 0)
        goto LABEL_26;
      goto LABEL_43;
    }
LABEL_34:
    v26[3] = 95;
    if ((v28.i8[7] & 1) == 0)
      goto LABEL_26;
LABEL_43:
    v26[4] = 95;
LABEL_26:
    v26 += 8;
    v27 -= 8;
  }
  while (v27);
  if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_45;
LABEL_57:
  v37 = &v24[v19];
  do
  {
    if (*v25 == 58)
      *v25 = 95;
    ++v25;
  }
  while (v25 != v37);
LABEL_45:
  v53 = (void **)v16;
  *v6 = v16;
  v29 = (_QWORD *)operator new();
  *v29 = &off_24C412188;
  v29[1] = 0;
  v29[2] = 0;
  v29[3] = v17;
  a1[2] = (uint64_t)v29;
  if ((_BYTE)v51 && SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v49 = 0;
  v30 = operator new();
  *(_QWORD *)(v30 + 272) = 0;
  *(_OWORD *)(v30 + 240) = 0u;
  *(_OWORD *)(v30 + 256) = 0u;
  *(_OWORD *)(v30 + 208) = 0u;
  *(_OWORD *)(v30 + 224) = 0u;
  *(_OWORD *)(v30 + 176) = 0u;
  *(_OWORD *)(v30 + 192) = 0u;
  *(_OWORD *)(v30 + 144) = 0u;
  *(_OWORD *)(v30 + 160) = 0u;
  *(_OWORD *)(v30 + 112) = 0u;
  *(_OWORD *)(v30 + 128) = 0u;
  *(_OWORD *)(v30 + 80) = 0u;
  *(_OWORD *)(v30 + 96) = 0u;
  *(_OWORD *)(v30 + 48) = 0u;
  *(_OWORD *)(v30 + 64) = 0u;
  *(_OWORD *)(v30 + 16) = 0u;
  *(_OWORD *)(v30 + 32) = 0u;
  *(_OWORD *)v30 = 0u;
  sub_20AEC0BD8(v30);
  __p[0] = (void *)v30;
  std::ostream::operator<<();
  v31 = *(_DWORD *)(v30 + 120);
  if ((v31 & 0x10) != 0)
  {
    v34 = *(_QWORD *)(v30 + 112);
    v35 = *(_QWORD *)(v30 + 72);
    if (v34 < v35)
    {
      *(_QWORD *)(v30 + 112) = v35;
      v34 = v35;
    }
    v36 = *(const void **)(v30 + 64);
    v32 = v34 - (_QWORD)v36;
    if (v34 - (unint64_t)v36 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_80;
  }
  else
  {
    if ((v31 & 8) == 0)
    {
      v32 = 0;
      HIBYTE(v55) = 0;
      p_dst = &__dst;
      goto LABEL_65;
    }
    v36 = *(const void **)(v30 + 40);
    v32 = *(_QWORD *)(v30 + 56) - (_QWORD)v36;
    if (v32 > 0x7FFFFFFFFFFFFFF7)
LABEL_80:
      sub_20AEC0138();
  }
  if (v32 >= 0x17)
  {
    v38 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v38 = v32 | 7;
    v39 = v38 + 1;
    p_dst = (__int128 *)operator new(v38 + 1);
    *((_QWORD *)&__dst + 1) = v32;
    v55 = v39 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_64;
  }
  HIBYTE(v55) = v32;
  p_dst = &__dst;
  if (v32)
LABEL_64:
    memmove(p_dst, v36, v32);
LABEL_65:
  *((_BYTE *)p_dst + v32) = 0;
  v40 = (char *)__p[0];
  if (__p[0])
  {
    v41 = MEMORY[0x24BEDB7F0];
    v42 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)__p[0] = *MEMORY[0x24BEDB7F0];
    v43 = *(_QWORD *)(v41 + 72);
    *(_QWORD *)&v40[*(_QWORD *)(v42 - 24)] = *(_QWORD *)(v41 + 64);
    *((_QWORD *)v40 + 3) = MEMORY[0x24BEDB848] + 16;
    *((_QWORD *)v40 + 2) = v43;
    if (v40[111] < 0)
      operator delete(*((void **)v40 + 11));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v40 + 128);
    MEMORY[0x20BD3583C](v40, 0x10B2C40EED050F3);
  }
  __p[0] = &v47;
  __p[1] = &__dst;
  __p[2] = &v47;
  v51 = &__dst;
  v52 = &__dst;
  if (v49 == -1)
    sub_20AECFAB8();
  v53 = __p;
  ((void (*)(void ***, _QWORD **))off_24C4121C8[v49])(&v53, &v47);
  if (SHIBYTE(v55) < 0)
    operator delete((void *)__dst);
  if (v49 == -1)
    sub_20AECFAB8();
  __p[0] = &__dst;
  ((void (*)(void **, _QWORD **))off_24C4121F8[v49])(__p, &v47);
  if (v49 != -1)
    ((void (*)(void **, _QWORD **))off_24C4121E0[v49])(__p, &v47);
  v44 = (char *)a1[1];
  if (v44[23] < 0)
  {
    v44 = *(char **)v44;
    v45 = *(_QWORD *)(a1[1] + 8);
  }
  else
  {
    v45 = v44[23];
  }
  sub_20AF4E53C(v44, v45, ".", 1, 0, (uint64_t)(a1 + 6));
  a1[11] = 0;
  a1[10] = (uint64_t)(a1 + 11);
  a1[9] = a5;
  a1[12] = 0;
  sub_20B21D330(a1 + 10, *(_QWORD **)a6, (_QWORD *)(a6 + 8));
  return a1;
}

void sub_20B21839C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a22 && a21 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B218468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  sub_20AECFA60((uint64_t)&a9);
  sub_20AEC147C(v24);
  _Unwind_Resume(a1);
}

void sub_20B218480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B52CE84((uint64_t *)va);
  JUMPOUT(0x20B21848CLL);
}

uint64_t sub_20B2184A4(uint64_t a1)
{
  return a1 + 240;
}

uint64_t *sub_20B2184AC(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(v2 + 48) && *(char *)(v2 + 47) < 0)
    {
      operator delete(*(void **)(v2 + 24));
      if ((*(char *)(v2 + 23) & 0x80000000) == 0)
        goto LABEL_6;
    }
    else if ((*(char *)(v2 + 23) & 0x80000000) == 0)
    {
LABEL_6:
      MEMORY[0x20BD3583C](v2, 0x1012C4045E9F9B4);
      return a1;
    }
    operator delete(*(void **)v2);
    goto LABEL_6;
  }
  return a1;
}

void sub_20B218524(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  __int16 v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  void *v98;
  unint64_t v99;
  char *v100;
  void *v101;
  char *v102;
  char *v103;
  char *v104;
  void *v105;
  unint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  unint64_t v109;
  char *v110;
  int64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  unint64_t v124;
  char *v125;
  unint64_t v126;
  int64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 *v134;
  char *v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 *v149;
  _OWORD *v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  unint64_t v156;
  _BYTE *v157;
  unint64_t v158;
  char *v159;
  int64_t v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 *v167;
  _OWORD *v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  void **v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  char *v176;
  void *v177;
  _QWORD *v179;
  void *__p[2];
  __int128 v181;
  __int128 v182;
  void *v183;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD **)(v1 + 80);
  v3 = (_QWORD *)(v1 + 88);
  *(_OWORD *)__p = 0u;
  v181 = 0u;
  v182 = 0u;
  if (v2 == v3)
    goto LABEL_207;
  v4 = 0;
  v5 = v2;
  do
  {
    v6 = v4;
    v7 = (_QWORD *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v5[2];
        v9 = *v8 == (_QWORD)v5;
        v5 = v8;
      }
      while (!v9);
    }
    ++v4;
    v5 = v8;
  }
  while (v8 != v3);
  v10 = v6 + 2;
  v11 = (unint64_t)(v6 + 2) >> 9;
  if ((v10 & 0x1FF) != 0)
    v12 = v11 + 1;
  else
    v12 = v11;
  if (!v12)
  {
    v64 = 0;
    v15 = 0;
    v65 = v4 + ((uint64_t)-MEMORY[0] >> 3);
    if (v65 < 1)
      goto LABEL_74;
    goto LABEL_71;
  }
  v13 = (char *)operator new(8 * v12);
  v14 = &v13[8 * v12];
  v15 = v13;
  v16 = v13;
  do
  {
    v17 = operator new(0x1000uLL);
    if (v16 != v14)
      goto LABEL_16;
    if (v15 > v13)
    {
      v18 = (v15 - v13) >> 3;
      if (v18 >= -1)
        v19 = v18 + 1;
      else
        v19 = v18 + 2;
      v20 = v19 >> 1;
      v21 = &v15[-8 * (v19 >> 1)];
      v22 = v14;
      if (v14 != v15)
      {
        memmove(v21, v15, v14 - v15);
        v22 = v15;
      }
      v16 = &v21[v14 - v15];
      v15 = &v22[-8 * v20];
      goto LABEL_16;
    }
    if (v14 == v13)
      v23 = 1;
    else
      v23 = (v14 - v13) >> 2;
    if (v23 >> 61)
      sub_20AEC60CC();
    v24 = (char *)operator new(8 * v23);
    v25 = v13;
    v26 = v23 >> 2;
    v27 = &v24[8 * (v23 >> 2)];
    v16 = v27;
    v28 = v14 - v15;
    if (v14 != v15)
    {
      v16 = &v27[v28 & 0xFFFFFFFFFFFFFFF8];
      v29 = v28 - 8;
      if (v29 >= 0x38 && (v30 = 8 * v26, (unint64_t)(&v24[8 * v26] - v15) >= 0x20))
      {
        v34 = (v29 >> 3) + 1;
        v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
        v31 = &v27[v35];
        v32 = &v15[v35];
        v36 = (__int128 *)(v15 + 16);
        v37 = &v24[v30 + 16];
        v38 = v34 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v39 = *v36;
          *((_OWORD *)v37 - 1) = *(v36 - 1);
          *(_OWORD *)v37 = v39;
          v36 += 2;
          v37 += 32;
          v38 -= 4;
        }
        while (v38);
        if (v34 == (v34 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_33;
      }
      else
      {
        v31 = &v24[8 * (v23 >> 2)];
        v32 = v15;
      }
      do
      {
        v33 = *(_QWORD *)v32;
        v32 += 8;
        *(_QWORD *)v31 = v33;
        v31 += 8;
      }
      while (v31 != v16);
    }
LABEL_33:
    v14 = &v24[8 * v23];
    if (v25)
      operator delete(v25);
    v15 = &v24[8 * (v23 >> 2)];
    v13 = v24;
LABEL_16:
    *(_QWORD *)v16 = v17;
    v16 += 8;
    --v12;
  }
  while (v12);
  v40 = (char *)__p[1];
  v41 = (char *)v181;
  while (v41 != v40)
  {
    if (v15 == v13)
    {
      if (v16 >= v14)
      {
        if (v14 == v13)
          v47 = 1;
        else
          v47 = (v14 - v13) >> 2;
        if (v47 >> 61)
          sub_20AEC60CC();
        v48 = (char *)operator new(8 * v47);
        v49 = v48;
        v50 = (v47 + 3) >> 2;
        v15 = &v48[8 * v50];
        v51 = v16 - v13;
        v9 = v16 == v13;
        v16 = v15;
        if (!v9)
        {
          v16 = &v15[v51 & 0xFFFFFFFFFFFFFFF8];
          v52 = v51 - 8;
          v53 = &v48[8 * v50];
          v54 = v13;
          if (v52 < 0x38)
            goto LABEL_228;
          v55 = 8 * v50;
          v53 = &v48[8 * v50];
          v54 = v13;
          if ((unint64_t)(v53 - v13) < 0x20)
            goto LABEL_228;
          v56 = (v52 >> 3) + 1;
          v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
          v53 = &v15[v57];
          v54 = &v13[v57];
          v58 = (__int128 *)(v13 + 16);
          v59 = &v48[v55 + 16];
          v60 = v56 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v61 = *v58;
            *((_OWORD *)v59 - 1) = *(v58 - 1);
            *(_OWORD *)v59 = v61;
            v58 += 2;
            v59 += 32;
            v60 -= 4;
          }
          while (v60);
          if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_228:
            do
            {
              v62 = *(_QWORD *)v54;
              v54 += 8;
              *(_QWORD *)v53 = v62;
              v53 += 8;
            }
            while (v53 != v16);
          }
        }
        v14 = &v48[8 * v47];
        if (v13)
          operator delete(v13);
        v13 = v49;
      }
      else
      {
        v43 = (v14 - v16) >> 3;
        if (v43 >= -1)
          v44 = v43 + 1;
        else
          v44 = v43 + 2;
        v45 = v44 >> 1;
        v15 = &v13[8 * (v44 >> 1)];
        v46 = v13;
        if (v16 != v13)
        {
          memmove(v15, v13, v16 - v13);
          v46 = v16;
        }
        v16 = &v46[8 * v45];
      }
    }
    v42 = *((_QWORD *)v41 - 1);
    v41 -= 8;
    *((_QWORD *)v15 - 1) = v42;
    v15 -= 8;
    v40 = (char *)__p[1];
  }
  v63 = __p[0];
  __p[0] = v13;
  __p[1] = v15;
  *(_QWORD *)&v181 = v16;
  *((_QWORD *)&v181 + 1) = v14;
  *(_QWORD *)&v182 = 0;
  if (v63)
    operator delete(v63);
  if (v16 == v15)
  {
    v64 = 0;
    v65 = v4 + ((uint64_t)-*(_QWORD *)v15 >> 3);
    if (v65 < 1)
      goto LABEL_74;
    goto LABEL_71;
  }
  v64 = *(_QWORD **)v15;
  v65 = v4;
  if (v4 >= 1)
  {
LABEL_71:
    v66 = &v15[8 * ((unint64_t)v65 >> 9)];
    v67 = *(_QWORD *)v66 + 8 * (v65 & 0x1FF);
    if (v64 == (_QWORD *)v67)
      goto LABEL_207;
LABEL_75:
    v68 = 0;
    do
    {
      v69 = v67;
      if (v15 != v66)
        v69 = *(_QWORD *)v15 + 4096;
      if (v64 == (_QWORD *)v69)
      {
        v69 = (uint64_t)v64;
      }
      else
      {
        v70 = v64;
        do
        {
          *v70++ = v2[4];
          v71 = (_QWORD *)v2[1];
          v72 = v2;
          if (v71)
          {
            do
            {
              v2 = v71;
              v71 = (_QWORD *)*v71;
            }
            while (v71);
          }
          else
          {
            do
            {
              v2 = (_QWORD *)v72[2];
              v9 = *v2 == (_QWORD)v72;
              v72 = v2;
            }
            while (!v9);
          }
        }
        while (v70 != (_QWORD *)v69);
      }
      v68 += (v69 - (uint64_t)v64) >> 3;
      if (v15 == v66)
        break;
      v73 = (_QWORD *)*((_QWORD *)v15 + 1);
      v15 += 8;
      v64 = v73;
    }
    while (v73 != (_QWORD *)v67);
    *((_QWORD *)&v182 + 1) = v68;
    if (!v68)
      goto LABEL_207;
    v74 = 0;
    v75 = (void **)__p[1];
    while (1)
    {
      v76 = *(uint64_t *)((char *)v75 + ((v74 >> 6) & 0x3FFFFFFFFFFFFF8));
      v77 = *(_QWORD *)(v76 + 8 * (v74 & 0x1FF));
      if (!**(_BYTE **)(v77 + 32))
      {
        v79 = *(unint64_t **)(v77 + 40);
        v80 = atomic_load(*(unint64_t **)(a1 + 40));
        do
          __ldaxr(v79);
        while (__stlxr(v80, v79));
        v81 = *(_QWORD *)(*(_QWORD *)(v76 + 8 * (v74 & 0x1FF)) + 48);
        v82 = *(_QWORD **)(v81 + 80);
        v68 = *((_QWORD *)&v182 + 1);
        v74 = v182;
        v179 = (_QWORD *)(v81 + 88);
        if (v82 != (_QWORD *)(v81 + 88))
          break;
      }
LABEL_94:
      v75 = (void **)__p[1];
      --v68;
      v78 = v74 + 1;
      *(_QWORD *)&v182 = v74 + 1;
      *((_QWORD *)&v182 + 1) = v68;
      if (v74 + 1 >= 0x400)
      {
        v75 = (void **)((char *)__p[1] + 8);
        operator delete(*(void **)__p[1]);
        v78 = v74 - 511;
        __p[1] = v75;
        *(_QWORD *)&v182 = v74 - 511;
      }
      v74 = v78;
      if (!v68)
        goto LABEL_208;
    }
    while (1)
    {
      v84 = (char *)__p[1];
      v83 = (char *)v181;
      v85 = v181 - (unint64_t)__p[1];
      if ((void *)v181 == __p[1])
        v86 = 0;
      else
        v86 = (((_QWORD)v181 - (unint64_t)__p[1]) << 6) - 1;
      v87 = v74 + v68;
      if (v86 != v74 + v68)
        goto LABEL_187;
      if (v74 >= 0x200)
      {
        *(_QWORD *)&v182 = v74 - 512;
        v88 = (char *)__p[1] + 8;
        v89 = *(_QWORD *)__p[1];
        __p[1] = (char *)__p[1] + 8;
        if ((_QWORD)v181 != *((_QWORD *)&v181 + 1))
        {
LABEL_184:
          *(_QWORD *)v83 = v89;
          goto LABEL_185;
        }
        v90 = __p[0];
        if (v88 > __p[0])
        {
          v91 = (v88 - (char *)__p[0]) >> 3;
          if (v91 >= -1)
            v92 = v91 + 1;
          else
            v92 = v91 + 2;
          v93 = v92 >> 1;
          v94 = &v88[-8 * (v92 >> 1)];
          v95 = v181 - (_QWORD)v88;
          if ((char *)v181 != v88)
          {
            memmove(&v88[-8 * (v92 >> 1)], v84 + 8, v181 - (_QWORD)v88);
            v83 = v84 + 8;
          }
          v96 = &v83[-8 * v93];
          v83 = &v94[v95];
          __p[1] = v96;
          *(_QWORD *)&v181 = &v94[v95];
          goto LABEL_184;
        }
        if ((void *)v181 == __p[0])
          v107 = 1;
        else
          v107 = (uint64_t)(v181 - (unint64_t)__p[0]) >> 2;
        if (v107 >> 61)
          goto LABEL_222;
        v108 = operator new(8 * v107);
        v109 = v107 >> 2;
        v110 = &v108[8 * (v107 >> 2)];
        v111 = v83 - v88;
        v9 = v83 == v88;
        v83 = v110;
        if (!v9)
        {
          v83 = &v110[v111 & 0xFFFFFFFFFFFFFFF8];
          v112 = v111 - 8;
          if (v112 < 0x38)
          {
            v113 = &v108[8 * (v107 >> 2)];
            goto LABEL_181;
          }
          v145 = 8 * v109;
          v146 = &v108[8 * v109] - v88;
          v113 = &v108[8 * (v107 >> 2)];
          if (v146 < 0x20)
            goto LABEL_229;
          v147 = (v112 >> 3) + 1;
          v148 = 8 * (v147 & 0x3FFFFFFFFFFFFFFCLL);
          v113 = &v110[v148];
          v88 += v148;
          v149 = (__int128 *)(v84 + 24);
          v150 = &v108[v145 + 16];
          v151 = v147 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v152 = *v149;
            *(v150 - 1) = *(v149 - 1);
            *v150 = v152;
            v149 += 2;
            v150 += 2;
            v151 -= 4;
          }
          while (v151);
          if (v147 != (v147 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_229:
            do
            {
LABEL_181:
              v153 = *(_QWORD *)v88;
              v88 += 8;
              *(_QWORD *)v113 = v153;
              v113 += 8;
            }
            while (v113 != v83);
          }
        }
        __p[0] = v108;
        __p[1] = &v108[8 * (v107 >> 2)];
        *(_QWORD *)&v181 = v83;
        *((_QWORD *)&v181 + 1) = &v108[8 * v107];
        if (v90)
          operator delete(v90);
        goto LABEL_184;
      }
      v97 = v85 >> 3;
      v98 = __p[0];
      if (v85 >> 3 >= (unint64_t)((uint64_t)(*((_QWORD *)&v181 + 1) - (unint64_t)__p[0]) >> 3))
        break;
      if (*((_QWORD *)&v181 + 1) == (_QWORD)v181)
      {
        v183 = operator new(0x1000uLL);
        sub_20AEC6FD0(__p, &v183);
        v115 = (char *)__p[1];
        v114 = (char *)v181;
        v116 = (char *)__p[1] + 8;
        v117 = *(_QWORD *)__p[1];
        __p[1] = (char *)__p[1] + 8;
        if ((_QWORD)v181 != *((_QWORD *)&v181 + 1))
          goto LABEL_138;
        v139 = __p[0];
        if (v116 > __p[0])
        {
          v140 = (v116 - (char *)__p[0]) >> 3;
          if (v140 >= -1)
            v141 = v140 + 1;
          else
            v141 = v140 + 2;
          v142 = v141 >> 1;
          v143 = &v116[-8 * v142];
          v144 = v181 - (_QWORD)v116;
          if ((char *)v181 != v116)
            memmove(&v116[-8 * v142], v116, v181 - (_QWORD)v116);
          __p[1] = v143;
          *(_QWORD *)&v181 = &v143[v144];
          *(_QWORD *)&v143[v144] = v117;
          goto LABEL_185;
        }
        if ((void *)v181 == __p[0])
          v156 = 1;
        else
          v156 = (uint64_t)(v181 - (unint64_t)__p[0]) >> 2;
        if (v156 >> 61)
          goto LABEL_222;
        v157 = operator new(8 * v156);
        v158 = v156 >> 2;
        v159 = &v157[8 * (v156 >> 2)];
        v160 = v114 - v116;
        v9 = v114 == v116;
        v114 = v159;
        if (!v9)
        {
          v114 = &v159[v160 & 0xFFFFFFFFFFFFFFF8];
          v161 = v160 - 8;
          if (v161 < 0x38)
          {
            v162 = &v157[8 * (v156 >> 2)];
            goto LABEL_204;
          }
          v163 = 8 * v158;
          v164 = &v157[8 * v158] - v116;
          v162 = &v157[8 * (v156 >> 2)];
          if (v164 < 0x20)
            goto LABEL_230;
          v165 = (v161 >> 3) + 1;
          v166 = 8 * (v165 & 0x3FFFFFFFFFFFFFFCLL);
          v162 = &v159[v166];
          v116 += v166;
          v167 = (__int128 *)(v115 + 24);
          v168 = &v157[v163 + 16];
          v169 = v165 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v170 = *v167;
            *(v168 - 1) = *(v167 - 1);
            *v168 = v170;
            v167 += 2;
            v168 += 2;
            v169 -= 4;
          }
          while (v169);
          if (v165 != (v165 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_230:
            do
            {
LABEL_204:
              v171 = *(_QWORD *)v116;
              v116 += 8;
              *(_QWORD *)v162 = v171;
              v162 += 8;
            }
            while (v162 != v114);
          }
        }
        __p[0] = v157;
        __p[1] = &v157[8 * (v156 >> 2)];
        *(_QWORD *)&v181 = v114;
        *((_QWORD *)&v181 + 1) = &v157[8 * v156];
        if (v139)
          operator delete(v139);
LABEL_138:
        *(_QWORD *)v114 = v117;
LABEL_185:
        *(_QWORD *)&v181 = v181 + 8;
        goto LABEL_186;
      }
      v183 = operator new(0x1000uLL);
      sub_20AEC6E44((char **)__p, &v183);
LABEL_186:
      v68 = *((_QWORD *)&v182 + 1);
      v74 = v182;
      v84 = (char *)__p[1];
      v87 = v182 + *((_QWORD *)&v182 + 1);
LABEL_187:
      *(_QWORD *)(*(_QWORD *)&v84[(v87 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v87 & 0x1FF)) = v82[4];
      *((_QWORD *)&v182 + 1) = ++v68;
      v154 = (_QWORD *)v82[1];
      if (v154)
      {
        do
        {
          v155 = v154;
          v154 = (_QWORD *)*v154;
        }
        while (v154);
      }
      else
      {
        do
        {
          v155 = (_QWORD *)v82[2];
          v9 = *v155 == (_QWORD)v82;
          v82 = v155;
        }
        while (!v9);
      }
      v82 = v155;
      if (v155 == v179)
        goto LABEL_94;
    }
    if (*((void **)&v181 + 1) == __p[0])
      v99 = 1;
    else
      v99 = (uint64_t)(*((_QWORD *)&v181 + 1) - (unint64_t)__p[0]) >> 2;
    if (v99 >> 61)
LABEL_222:
      sub_20AEC60CC();
    v100 = (char *)operator new(8 * v99);
    v101 = operator new(0x1000uLL);
    v102 = &v100[8 * v97];
    v103 = &v100[8 * v99];
    if (v97 != v99)
    {
      *(_QWORD *)v102 = v101;
      v104 = v102 + 8;
      if (v83 == v84)
        goto LABEL_123;
      do
      {
LABEL_147:
        if (v102 == v100)
        {
          if (v104 >= v103)
          {
            if (v103 == v102)
              v124 = 1;
            else
              v124 = (v103 - v102) >> 2;
            if (v124 >> 61)
              sub_20AEC60CC();
            v125 = (char *)operator new(8 * v124);
            v100 = v125;
            v126 = (v124 + 3) >> 2;
            v119 = &v125[8 * v126];
            v127 = v104 - v102;
            v9 = v104 == v102;
            v104 = v119;
            if (!v9)
            {
              v104 = &v119[v127 & 0xFFFFFFFFFFFFFFF8];
              v128 = v127 - 8;
              v129 = &v125[8 * v126];
              v130 = v102;
              if (v128 < 0x38)
                goto LABEL_231;
              v131 = 8 * v126;
              v129 = &v125[8 * v126];
              v130 = v102;
              if ((unint64_t)(v129 - v102) < 0x20)
                goto LABEL_231;
              v132 = (v128 >> 3) + 1;
              v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
              v129 = &v119[v133];
              v130 = &v102[v133];
              v134 = (__int128 *)(v102 + 16);
              v135 = &v125[v131 + 16];
              v136 = v132 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v137 = *v134;
                *((_OWORD *)v135 - 1) = *(v134 - 1);
                *(_OWORD *)v135 = v137;
                v134 += 2;
                v135 += 32;
                v136 -= 4;
              }
              while (v136);
              if (v132 != (v132 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_231:
                do
                {
                  v138 = *(_QWORD *)v130;
                  v130 += 8;
                  *(_QWORD *)v129 = v138;
                  v129 += 8;
                }
                while (v129 != v104);
              }
            }
            v103 = &v125[8 * v124];
            operator delete(v102);
          }
          else
          {
            v121 = (v103 - v104) >> 3;
            if (v121 >= -1)
              v122 = v121 + 1;
            else
              v122 = v121 + 2;
            v123 = &v104[8 * (v122 >> 1)];
            v119 = &v102[8 * (v122 >> 1)];
            if (v104 == v102)
            {
              v100 = v104;
            }
            else
            {
              memmove(&v102[8 * (v122 >> 1)], v102, v104 - v102);
              v100 = v102;
            }
            v104 = v123;
          }
        }
        else
        {
          v119 = v102;
        }
        v120 = *((_QWORD *)v83 - 1);
        v83 -= 8;
        *((_QWORD *)v119 - 1) = v120;
        v102 = v119 - 8;
      }
      while (v83 != __p[1]);
      v98 = __p[0];
      __p[0] = v100;
      __p[1] = v102;
      *(_QWORD *)&v181 = v104;
      *((_QWORD *)&v181 + 1) = v103;
      if (!v98)
        goto LABEL_186;
LABEL_169:
      operator delete(v98);
      goto LABEL_186;
    }
    v105 = v101;
    if (v85 < 1)
    {
      if (v83 == v84)
        v118 = 1;
      else
        v118 = v85 >> 2;
      if (v118 >> 61)
        sub_20AEC60CC();
      v102 = (char *)operator new(8 * v118);
      v103 = &v102[8 * v118];
      operator delete(v100);
      v100 = v102;
      *(_QWORD *)v102 = v105;
      v104 = v102 + 8;
      if (v83 != v84)
        goto LABEL_147;
    }
    else
    {
      v106 = v97 + 2;
      if (v97 >= -1)
        v106 = v97 + 1;
      v102 -= 8 * (v106 >> 1);
      *(_QWORD *)v102 = v101;
      v104 = v102 + 8;
      if (v83 != v84)
        goto LABEL_147;
    }
LABEL_123:
    __p[0] = v100;
    __p[1] = v102;
    *(_QWORD *)&v181 = v104;
    *((_QWORD *)&v181 + 1) = v103;
    if (!v98)
      goto LABEL_186;
    goto LABEL_169;
  }
LABEL_74:
  v66 = &v15[-8 * ((unint64_t)(511 - v65) >> 9)];
  v67 = *(_QWORD *)v66 + 8 * (~(511 - (_WORD)v65) & 0x1FF);
  if (v64 != (_QWORD *)v67)
    goto LABEL_75;
LABEL_207:
  v75 = (void **)__p[1];
LABEL_208:
  v172 = (void **)v181;
  *((_QWORD *)&v182 + 1) = 0;
  v173 = v181 - (_QWORD)v75;
  if ((_QWORD)v181 - (_QWORD)v75 >= 0x11uLL)
  {
    do
    {
      v174 = *v75++;
      operator delete(v174);
      __p[1] = v75;
      v173 -= 8;
    }
    while (v173 > 0x10);
  }
  if (v173 >> 3 == 1)
  {
    v175 = 256;
LABEL_214:
    *(_QWORD *)&v182 = v175;
  }
  else if (v173 >> 3 == 2)
  {
    v175 = 512;
    goto LABEL_214;
  }
  v176 = (char *)((char *)v75 - (char *)v172);
  if (v75 != v172)
  {
    do
    {
      v177 = *v75++;
      operator delete(v177);
    }
    while (v75 != v172);
    *(_QWORD *)&v181 = (char *)v172 + ((unint64_t)(v176 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
}

void sub_20B219138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v14;

  if (a13 == a12)
  {
    v14 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v14 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

void sub_20B21914C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  void *v12;

  operator delete(v12);
  operator delete(v11);
  sub_20AECA898((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20B219174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13)
{
  void *v13;
  void *v15;

  if (v13)
  {
    operator delete(v13);
    if (a13 == a12)
    {
LABEL_3:
      v15 = a11;
      if (!a11)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if (a13 == a12)
  {
    goto LABEL_3;
  }
  v15 = a11;
  if (!a11)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_20B2191D8()
{
  __cxa_end_catch();
  JUMPOUT(0x20B2191E0);
}

void sub_20B219278(_QWORD *a1, uint64_t a2, int a3)
{
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  std::mutex *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;

  if (**(_BYTE **)(a2 + 32))
  {
    v6 = *(unint64_t **)(a2 + 40);
    v7 = atomic_load(*(unint64_t **)(a1[9] + 40));
    do
      __ldaxr(v6);
    while (__stlxr(v7, v6));
    sub_20B218524(a2);
    v8 = (_BYTE *)operator new();
    *v8 = 0;
    v9 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v8;
    if (v9)
      MEMORY[0x20BD3583C](v9, 0x1000C4077774924);
    if (a3)
    {
      v10 = *a1;
      v11 = *(std::mutex **)(*a1 + 8);
      std::mutex::lock(v11);
      v12 = *(_QWORD **)(v10 + 16);
      v13 = (_QWORD *)(v10 + 24);
      if (v12 != v13)
      {
        do
        {
          v14 = *(char *)(a2 + 31);
          if (v14 >= 0)
            v15 = a2 + 8;
          else
            v15 = *(_QWORD *)(a2 + 8);
          if (v14 >= 0)
            v16 = *(unsigned __int8 *)(a2 + 31);
          else
            v16 = *(_QWORD *)(a2 + 16);
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12[4] + 16))(v12[4], v15, v16, 0);
          v17 = (_QWORD *)v12[1];
          if (v17)
          {
            do
            {
              v18 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              v18 = (_QWORD *)v12[2];
              v19 = *v18 == (_QWORD)v12;
              v12 = v18;
            }
            while (!v19);
          }
          v12 = v18;
        }
        while (v18 != v13);
      }
      std::mutex::unlock(v11);
    }
  }
}

void sub_20B2193C8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B2193DC(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BYTE *v8;
  uint64_t v9;
  std::mutex *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;

  v8 = *(_BYTE **)(a2 + 32);
  if (*v8)
  {
    if (*v8 != (_DWORD)a3)
    {
      *v8 = a3;
      if (a4)
      {
        v9 = *a1;
        v10 = *(std::mutex **)(*a1 + 8);
        std::mutex::lock(v10);
        v11 = *(_QWORD **)(v9 + 16);
        v12 = (_QWORD *)(v9 + 24);
        if (v11 != v12)
        {
          do
          {
            v13 = *(char *)(a2 + 31);
            if (v13 >= 0)
              v14 = a2 + 8;
            else
              v14 = *(_QWORD *)(a2 + 8);
            if (v13 >= 0)
              v15 = *(unsigned __int8 *)(a2 + 31);
            else
              v15 = *(_QWORD *)(a2 + 16);
            (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[4] + 16))(v11[4], v14, v15, a3);
            v16 = (_QWORD *)v11[1];
            if (v16)
            {
              do
              {
                v17 = v16;
                v16 = (_QWORD *)*v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                v17 = (_QWORD *)v11[2];
                v18 = *v17 == (_QWORD)v11;
                v11 = v17;
              }
              while (!v18);
            }
            v11 = v17;
          }
          while (v17 != v12);
        }
LABEL_40:
        std::mutex::unlock(v10);
      }
    }
  }
  else
  {
    v19 = (_BYTE *)operator new();
    *v19 = a3;
    v20 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v19;
    if (v20)
    {
      MEMORY[0x20BD3583C](v20, 0x1000C4077774924);
      v19 = *(_BYTE **)(a2 + 32);
    }
    v21 = (unint64_t *)operator new();
    *v21 = (unint64_t)v19;
    v22 = *(unint64_t **)(a2 + 40);
    v23 = atomic_load(v21);
    do
      __ldaxr(v22);
    while (__stlxr(v23, v22));
    MEMORY[0x20BD3583C]();
    sub_20B218524(a2);
    if (a4)
    {
      v24 = *a1;
      v10 = *(std::mutex **)(*a1 + 8);
      std::mutex::lock(v10);
      v25 = *(_QWORD **)(v24 + 16);
      v26 = (_QWORD *)(v24 + 24);
      if (v25 != v26)
      {
        do
        {
          v27 = *(char *)(a2 + 31);
          if (v27 >= 0)
            v28 = a2 + 8;
          else
            v28 = *(_QWORD *)(a2 + 8);
          if (v27 >= 0)
            v29 = *(unsigned __int8 *)(a2 + 31);
          else
            v29 = *(_QWORD *)(a2 + 16);
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25[4] + 16))(v25[4], v28, v29, a3);
          v30 = (_QWORD *)v25[1];
          if (v30)
          {
            do
            {
              v31 = v30;
              v30 = (_QWORD *)*v30;
            }
            while (v30);
          }
          else
          {
            do
            {
              v31 = (_QWORD *)v25[2];
              v18 = *v31 == (_QWORD)v25;
              v25 = v31;
            }
            while (!v18);
          }
          v25 = v31;
        }
        while (v31 != v26);
      }
      goto LABEL_40;
    }
  }
}

void sub_20B2195FC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B219610(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B219624(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_mutex_base *v6;
  uint64_t v7;
  std::runtime_error *exception;

  if ((_DWORD)a3)
  {
    v6 = (std::__shared_mutex_base *)(*a1 + 72);
    std::__shared_mutex_base::lock(v6);
    sub_20B2193DC(a1, a2, a3, 1);
  }
  else
  {
    v7 = *(unsigned __int8 *)(a2 + 31);
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(a2 + 16);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Cannot set root context to inherit its enable-state");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v6 = (std::__shared_mutex_base *)(*a1 + 72);
    std::__shared_mutex_base::lock(v6);
    sub_20B219278(a1, a2, 1);
  }
  std::__shared_mutex_base::unlock(v6);
}

void sub_20B2196EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B219704(_Unwind_Exception *a1)
{
  std::__shared_mutex_base *v1;

  std::__shared_mutex_base::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B21971C(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_20B219724(uint64_t a1, void *__src, size_t __len, uint64_t *a4, char a5)
{
  void *v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  _QWORD *v14;
  uint64_t v15;

  *(_QWORD *)a1 = off_24C412038;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    v10 = operator new(v11 + 1);
    *(_QWORD *)(a1 + 16) = __len;
    *(_QWORD *)(a1 + 24) = v12 | 0x8000000000000000;
    *(_QWORD *)(a1 + 8) = v10;
  }
  else
  {
    *(_BYTE *)(a1 + 31) = __len;
    v10 = (void *)(a1 + 8);
    if (!__len)
      goto LABEL_9;
  }
  memmove(v10, __src, __len);
LABEL_9:
  *((_BYTE *)v10 + __len) = 0;
  v13 = (_BYTE *)operator new();
  *v13 = a5;
  *(_QWORD *)(a1 + 32) = v13;
  v14 = (_QWORD *)operator new();
  *v14 = v13;
  *(_QWORD *)(a1 + 40) = v14;
  v15 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 48) = v15;
  return a1;
}

void sub_20B21983C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v4)
  {
    MEMORY[0x20BD3583C](v4, 0x1000C4077774924);
    if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B219898(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    sub_20B21C5F4(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    MEMORY[0x20BD3583C](v3, 0x80C40B8603338);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    MEMORY[0x20BD3583C](v4, 0x1000C4077774924);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20B219928(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    sub_20B21C5F4(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    MEMORY[0x20BD3583C](v3, 0x80C40B8603338);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    MEMORY[0x20BD3583C](v4, 0x1000C4077774924);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B2199B8(uint64_t a1, uint64_t a2)
{
  sub_20B219624(*(uint64_t **)(a1 + 48), a1, a2);
}

uint64_t sub_20B2199C8(uint64_t a1)
{
  return **(_QWORD **)(a1 + 48);
}

uint64_t sub_20B2199D4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48) + 8;
}

uint64_t sub_20B2199E0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48) + 24;
}

uint64_t sub_20B2199EC(uint64_t a1, char *a2, uint64_t a3)
{
  std::__shared_mutex_base *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[5];
  char v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v6 = (std::__shared_mutex_base *)(**(_QWORD **)(a1 + 48) + 72);
  std::__shared_mutex_base::lock_shared(v6);
  v7 = &a2[a3];
  v8 = 0;
  if (a3)
  {
    while (a2[v8] != 46)
    {
      if (a3 == ++v8)
      {
        v8 = a3;
        break;
      }
    }
  }
  v9 = 0;
  v15[0] = (uint64_t)a2;
  v15[1] = (uint64_t)&a2[a3];
  v15[2] = (uint64_t)a2;
  v15[3] = (uint64_t)a2;
  v15[4] = v8;
  v16 = 46;
  v17 = &unk_20B5EE490;
  v18 = &unk_20B5EE490;
  v19 = &unk_20B5EE490;
  v20 = &unk_20B5EE490;
  v21 = 0;
  v22 = 0;
  if (a3 && a2 != (char *)&unk_20B5EE490)
  {
    v9 = 0;
    do
    {
      ++v9;
      v10 = &a2[v8];
      if (v10 == v7)
        break;
      a2 = v10 + 1;
      if (v10 + 1 == v7)
      {
        v8 = 0;
        a2 = v7;
      }
      else
      {
        v8 = 0;
        while (a2[v8] != 46)
        {
          if (v7 - a2 == ++v8)
          {
            v8 = v7 - a2;
            break;
          }
        }
      }
    }
    while (a2 != (char *)&unk_20B5EE490);
  }
  v23 = v9;
  v13 = a1;
  LOBYTE(v14) = 0;
  sub_20B21C6D0(a1, v15, 0, (uint64_t)&v13);
  v11 = v13;
  std::__shared_mutex_base::unlock_shared(v6);
  return v11;
}

void sub_20B219B3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B219B50((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B219B50(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    std::__shared_mutex_base::unlock_shared(*(std::__shared_mutex_base **)a1);
  return a1;
}

uint64_t **sub_20B219B84(uint64_t a1, char *a2, size_t a3)
{
  std::__shared_mutex_base *v6;
  uint64_t v7;
  uint64_t **v8;

  v6 = (std::__shared_mutex_base *)(a1 + 72);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 72));
  v8 = sub_20B219D2C(a1, v7, a2, a3, 1);
  std::__shared_mutex_base::unlock(v6);
  return v8;
}

void sub_20B219BE4(_Unwind_Exception *a1)
{
  std::__shared_mutex_base *v1;

  std::__shared_mutex_base::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20B219BFC(uint64_t a1, const void *a2, size_t a3)
{
  std::__shared_mutex_base *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;

  v6 = (std::__shared_mutex_base *)(a1 + 72);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 72));
  v9 = *(uint64_t **)(a1 + 56);
  v7 = (uint64_t *)(a1 + 56);
  v8 = v9;
  if (!v9)
    goto LABEL_32;
  v10 = v7;
  do
  {
    while (1)
    {
      v11 = *((char *)v8 + 55);
      v12 = v11 >= 0 ? v8 + 4 : (uint64_t *)v8[4];
      v13 = v11 >= 0 ? *((unsigned __int8 *)v8 + 55) : v8[5];
      v14 = v13 >= a3 ? a3 : v13;
      v15 = memcmp(a2, v12, v14);
      if (v15)
        break;
      if (a3 <= v13)
        goto LABEL_17;
LABEL_3:
      v8 = (uint64_t *)v8[1];
      if (!v8)
        goto LABEL_18;
    }
    if ((v15 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v10 = v8;
    v8 = (uint64_t *)*v8;
  }
  while (v8);
LABEL_18:
  if (v10 == v7)
    goto LABEL_32;
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= a3)
    v19 = a3;
  else
    v19 = v18;
  v20 = memcmp(a2, v17, v19);
  if (v20)
  {
    if ((v20 & 0x80000000) == 0)
      goto LABEL_30;
LABEL_32:
    v22 = 0;
    v21 = 0;
  }
  else
  {
    if (a3 < v18)
      goto LABEL_32;
LABEL_30:
    v21 = v10[7] & 0xFFFFFFFFFFFFFF00;
    v22 = v10[7];
  }
  std::__shared_mutex_base::unlock(v6);
  return v21 | v22;
}

uint64_t **sub_20B219D2C(uint64_t a1, uint64_t a2, char *a3, size_t a4, int a5)
{
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t **v11;
  char *v12;
  char *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t **v23;
  BOOL v24;
  char *v25;
  int v26;
  int64_t v27;
  void *v28;
  size_t v29;
  char *v30;
  char *v31;
  size_t v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  const void *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  int v58;
  _QWORD *v59;
  unint64_t v60;
  size_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t **v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  unint64_t *v77;
  unint64_t v78;
  std::mutex *v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t **v82;
  int v83;
  uint64_t *v84;
  uint64_t *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t **v89;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t **v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  __int128 v98;
  char *v99;
  __int128 v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  uint64_t v105;
  char v106;
  uint64_t v107;

  v8 = &a3[a4];
  v9 = 0;
  if (a4)
  {
    while (a3[v9] != 46)
    {
      if (a4 == ++v9)
      {
        v9 = a4;
        break;
      }
    }
  }
  v10 = 0;
  v11 = *(uint64_t ***)(a1 + 40);
  v97 = (uint64_t *)a3;
  *(_QWORD *)&v98 = &a3[a4];
  *((_QWORD *)&v98 + 1) = a3;
  v99 = a3;
  *(_QWORD *)&v100 = v9;
  BYTE8(v100) = 46;
  v101 = &unk_20B5EE490;
  v102 = &unk_20B5EE490;
  v103 = &unk_20B5EE490;
  v104 = &unk_20B5EE490;
  v105 = 0;
  v106 = 0;
  if (a4 && a3 != (char *)&unk_20B5EE490)
  {
    v10 = 0;
    v12 = a3;
    do
    {
      ++v10;
      v13 = &v12[v9];
      if (v13 == v8)
        break;
      v12 = v13 + 1;
      if (v13 + 1 == v8)
      {
        v9 = 0;
        v12 = &a3[a4];
      }
      else
      {
        v9 = 0;
        while (v12[v9] != 46)
        {
          if (v8 - v12 == ++v9)
          {
            v9 = v8 - v12;
            break;
          }
        }
      }
    }
    while (v12 != (char *)&unk_20B5EE490);
  }
  v91 = a1;
  v107 = v10;
  v94 = v11;
  LOBYTE(v95) = 0;
  sub_20B21C6D0((uint64_t)v11, (uint64_t *)&v97, 0, (uint64_t)&v94);
  v14 = v94;
  if ((_BYTE)v95)
    return v14;
  v89 = v94;
  v15 = v94[6];
  v95 = 0;
  v96 = 0;
  v92 = v15;
  v94 = &v95;
  v16 = (uint64_t *)v15[10];
  v17 = (uint64_t **)(v15 + 11);
  if (v16 != v15 + 11)
  {
    do
    {
      v19 = v16[4];
      if (*(char *)(v19 + 31) < 0)
      {
        v20 = *(char **)(v19 + 8);
        v21 = *(_QWORD *)(v19 + 16);
        if (v21 <= a4)
          goto LABEL_27;
      }
      else
      {
        v20 = (char *)(v19 + 8);
        v21 = *(unsigned __int8 *)(v19 + 31);
        if (v21 <= a4)
          goto LABEL_27;
      }
      if (!a4)
      {
LABEL_48:
        v33 = &v95;
        v34 = &v95;
        if (v95)
        {
          v35 = v95;
          while (1)
          {
            while (1)
            {
              v33 = (uint64_t **)v35;
              v36 = v35[4];
              if (v19 >= v36)
                break;
              v35 = *v33;
              v34 = v33;
              if (!*v33)
                goto LABEL_55;
            }
            if (v36 >= v19)
              break;
            v35 = v33[1];
            if (!v35)
            {
              v34 = v33 + 1;
              goto LABEL_55;
            }
          }
        }
        else
        {
LABEL_55:
          v37 = (uint64_t *)operator new(0x28uLL);
          v37[4] = v19;
          *v37 = 0;
          v37[1] = 0;
          v37[2] = (uint64_t)v33;
          *v34 = v37;
          if (*v94)
          {
            v94 = (uint64_t **)*v94;
            v37 = *v34;
          }
          sub_20AEC84C8(v95, v37);
          ++v96;
        }
        v38 = (uint64_t *)v16[1];
        v39 = v16;
        if (v38)
        {
          do
          {
            v23 = (uint64_t **)v38;
            v38 = (uint64_t *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            v23 = (uint64_t **)v39[2];
            v24 = *v23 == v39;
            v39 = (uint64_t *)v23;
          }
          while (!v24);
        }
        if ((uint64_t *)v92[10] == v16)
          v92[10] = (uint64_t)v23;
        v18 = (uint64_t *)v92[11];
        --v92[12];
        sub_20AEC867C(v18, v16);
        operator delete(v16);
        goto LABEL_20;
      }
      if ((uint64_t)v21 >= (uint64_t)a4)
      {
        v25 = &v20[v21];
        v26 = *a3;
        v27 = v21;
        v28 = v20;
        do
        {
          v29 = v27 - a4;
          if (v29 == -1)
            break;
          v30 = (char *)memchr(v28, v26, v29 + 1);
          if (!v30)
            break;
          v31 = v30;
          if (!memcmp(v30, a3, a4))
          {
            if (v31 == v25 || v20 != v31 || v21 <= a4 + 1 || v20[a4] != 46)
              break;
            v32 = a4;
            while (v20[v32 + 1] == 46)
            {
              if (v21 - 1 == ++v32)
                goto LABEL_27;
            }
            if (v32 == -2)
              break;
            goto LABEL_48;
          }
          v28 = v31 + 1;
          v27 = v25 - (v31 + 1);
        }
        while (v27 >= (uint64_t)a4);
      }
LABEL_27:
      v22 = (uint64_t *)v16[1];
      if (v22)
      {
        do
        {
          v23 = (uint64_t **)v22;
          v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (uint64_t **)v16[2];
          v24 = *v23 == v16;
          v16 = (uint64_t *)v23;
        }
        while (!v24);
      }
LABEL_20:
      v16 = (uint64_t *)v23;
    }
    while (v23 != v17);
  }
  v40 = (uint64_t *)operator new();
  v98 = 0uLL;
  v97 = (uint64_t *)&v98;
  sub_20B21D330((uint64_t *)&v97, v94, &v95);
  sub_20B217D78(v40, v91, a3, a4, (uint64_t)v89, (uint64_t)&v97);
  sub_20B1F7D90((_QWORD *)v98);
  v93 = v40;
  sub_20B219724((uint64_t)&v97, a3, a4, (uint64_t *)&v93, 0);
  v41 = operator new();
  *(_QWORD *)v41 = off_24C412038;
  *(_OWORD *)(v41 + 8) = v98;
  *(_QWORD *)(v41 + 24) = v99;
  v98 = 0uLL;
  *(_OWORD *)(v41 + 32) = v100;
  *(_QWORD *)(v41 + 48) = v101;
  v99 = 0;
  v100 = 0uLL;
  v101 = 0;
  v42 = (uint64_t)v93;
  v93 = 0;
  if (v42)
    sub_20B21C5F4(v42);
  v43 = (char *)operator new(0x40uLL);
  v44 = v43;
  v45 = (uint64_t *)(v91 + 56);
  v97 = (uint64_t *)v43;
  *(_QWORD *)&v98 = v91 + 56;
  BYTE8(v98) = 0;
  v46 = v43 + 32;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (a4 >= 0x17)
  {
    v50 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v50 = a4 | 7;
    v51 = v50 + 1;
    v46 = operator new(v50 + 1);
    v44[5] = a4;
    v44[6] = v51 | 0x8000000000000000;
    v44[4] = v46;
LABEL_75:
    memmove(v46, a3, a4);
    v46[a4] = 0;
    v44[7] = v41;
    v47 = (uint64_t)v97;
    v48 = (uint64_t *)*v45;
    v49 = (uint64_t *)(v91 + 56);
    if (!*v45)
    {
LABEL_102:
      *(_QWORD *)v47 = 0;
      *(_QWORD *)(v47 + 8) = 0;
      *(_QWORD *)(v47 + 16) = v49;
      *v45 = v47;
      v64 = **(_QWORD **)(v91 + 48);
      if (v64)
      {
        *(_QWORD *)(v91 + 48) = v64;
        v47 = *v45;
      }
      sub_20AEC84C8(*(uint64_t **)(v91 + 56), (uint64_t *)v47);
      ++*(_QWORD *)(v91 + 64);
      v49 = v97;
      goto LABEL_105;
    }
    goto LABEL_76;
  }
  v43[55] = a4;
  if (a4)
    goto LABEL_75;
  *v46 = 0;
  *((_QWORD *)v43 + 7) = v41;
  v47 = (uint64_t)v97;
  v48 = (uint64_t *)*v45;
  v49 = (uint64_t *)(v91 + 56);
  if (!*v45)
    goto LABEL_102;
LABEL_76:
  v52 = *(char *)(v47 + 55);
  if (v52 >= 0)
    v53 = (const void *)(v47 + 32);
  else
    v53 = *(const void **)(v47 + 32);
  if (v52 >= 0)
    v54 = *(unsigned __int8 *)(v47 + 55);
  else
    v54 = *(_QWORD *)(v47 + 40);
  while (1)
  {
    while (1)
    {
      v49 = v48;
      v57 = (_QWORD *)v48[4];
      v55 = v48 + 4;
      v56 = v57;
      v58 = *((char *)v55 + 23);
      v59 = v58 >= 0 ? v55 : v56;
      v60 = v58 >= 0 ? *((unsigned __int8 *)v55 + 23) : v55[1];
      v61 = v60 >= v54 ? v54 : v60;
      v62 = memcmp(v53, v59, v61);
      if (v62)
        break;
      if (v54 >= v60)
        goto LABEL_96;
LABEL_82:
      v48 = (uint64_t *)*v49;
      v45 = v49;
      if (!*v49)
        goto LABEL_102;
    }
    if (v62 < 0)
      goto LABEL_82;
LABEL_96:
    v63 = memcmp(v59, v53, v61);
    if (!v63)
      break;
    if ((v63 & 0x80000000) == 0)
      goto LABEL_107;
LABEL_100:
    v48 = (uint64_t *)v49[1];
    if (!v48)
    {
      v45 = v49 + 1;
      goto LABEL_102;
    }
  }
  if (v60 < v54)
    goto LABEL_100;
LABEL_107:
  if (!v47)
  {
LABEL_105:
    v65 = v89;
    v66 = v92;
    v14 = (uint64_t **)v49[7];
    v67 = *v17;
    v68 = v17;
    if (*v17)
      goto LABEL_123;
LABEL_127:
    v74 = (uint64_t *)operator new(0x28uLL);
    v74[4] = (uint64_t)v14;
    *v74 = 0;
    v74[1] = 0;
    v74[2] = (uint64_t)v68;
    *v17 = v74;
    v75 = *(_QWORD *)v66[10];
    if (v75)
    {
      v66[10] = v75;
      v74 = *v17;
    }
    sub_20AEC84C8((uint64_t *)v66[11], v74);
    ++v66[12];
    goto LABEL_130;
  }
  v69 = *(_QWORD *)(v47 + 56);
  *(_QWORD *)(v47 + 56) = 0;
  if (v69)
  {
    v70 = *(_QWORD *)(v69 + 48);
    *(_QWORD *)(v69 + 48) = 0;
    if (v70)
      sub_20B21C5F4(v70);
    v71 = *(_QWORD *)(v69 + 40);
    *(_QWORD *)(v69 + 40) = 0;
    if (v71)
      MEMORY[0x20BD3583C](v71, 0x80C40B8603338);
    v72 = *(_QWORD *)(v69 + 32);
    *(_QWORD *)(v69 + 32) = 0;
    if (v72)
      MEMORY[0x20BD3583C](v72, 0x1000C4077774924);
    if (*(char *)(v69 + 31) < 0)
      operator delete(*(void **)(v69 + 8));
    MEMORY[0x20BD3583C](v69, 0x10B3C406DCED8F8);
    LOBYTE(v52) = *(_BYTE *)(v47 + 55);
  }
  v65 = v89;
  v66 = v92;
  if ((v52 & 0x80) != 0)
    operator delete(*(void **)(v47 + 32));
  operator delete((void *)v47);
  v14 = (uint64_t **)v49[7];
  v67 = *v17;
  v68 = v17;
  if (!*v17)
    goto LABEL_127;
  while (1)
  {
LABEL_123:
    while (1)
    {
      v68 = (uint64_t **)v67;
      v73 = v67[4];
      if ((unint64_t)v14 >= v73)
        break;
      v67 = *v68;
      v17 = v68;
      if (!*v68)
        goto LABEL_127;
    }
    if (v73 >= (unint64_t)v14)
      break;
    v67 = v68[1];
    if (!v67)
    {
      v17 = v68 + 1;
      goto LABEL_127;
    }
  }
LABEL_130:
  v76 = (uint64_t *)v94;
  if (v94 != &v95)
  {
    do
    {
      *(_QWORD *)(*(_QWORD *)(v76[4] + 48) + 72) = v14;
      v81 = (uint64_t *)v76[1];
      if (v81)
      {
        do
        {
          v82 = (uint64_t **)v81;
          v81 = (uint64_t *)*v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          v82 = (uint64_t **)v76[2];
          v24 = *v82 == v76;
          v76 = (uint64_t *)v82;
        }
        while (!v24);
      }
      v76 = (uint64_t *)v82;
    }
    while (v82 != &v95);
  }
  v77 = (unint64_t *)v14[5];
  v78 = atomic_load((unint64_t *)v65[5]);
  do
    __ldaxr(v77);
  while (__stlxr(v78, v77));
  if (a5)
  {
    v79 = *(std::mutex **)(v91 + 8);
    std::mutex::lock(v79);
    v80 = *(_QWORD **)(v91 + 16);
    if (v80 != (_QWORD *)(v91 + 24))
    {
      do
      {
        v83 = *((char *)v14 + 31);
        if (v83 >= 0)
          v84 = (uint64_t *)(v14 + 1);
        else
          v84 = v14[1];
        if (v83 >= 0)
          v85 = (uint64_t *)*((unsigned __int8 *)v14 + 31);
        else
          v85 = v14[2];
        (*(void (**)(_QWORD, uint64_t *, uint64_t *, _QWORD))(*(_QWORD *)v80[4] + 16))(v80[4], v84, v85, 0);
        v86 = (_QWORD *)v80[1];
        if (v86)
        {
          do
          {
            v87 = v86;
            v86 = (_QWORD *)*v86;
          }
          while (v86);
        }
        else
        {
          do
          {
            v87 = (_QWORD *)v80[2];
            v24 = *v87 == (_QWORD)v80;
            v80 = v87;
          }
          while (!v24);
        }
        v80 = v87;
      }
      while (v87 != (_QWORD *)(v91 + 24));
    }
    std::mutex::unlock(v79);
  }
  sub_20B1F7D90(v95);
  return v14;
}

void sub_20B21A5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  sub_20B1F7D90(a17);
  _Unwind_Resume(a1);
}

void sub_20B21A644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20B21D4A4((uint64_t *)va);
  JUMPOUT(0x20B21A650);
}

void sub_20B21A66C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B1F7D90(v1);
  _Unwind_Resume(a1);
}

void sub_20B21A680()
{
  std::mutex *v0;

  std::mutex::unlock(v0);
  JUMPOUT(0x20B21A68CLL);
}

uint64_t sub_20B21A6A0(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  int v18;
  const void *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  unint64_t v26;
  size_t v27;
  int v28;
  int v29;
  char *v30;
  _BYTE *v31;
  __int128 v32;
  _QWORD *v33;
  _QWORD *v34;
  BOOL v35;
  uint64_t **v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v41;
  std::mutex *v43;
  std::__shared_mutex_base *v44;
  _QWORD *v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;

  v44 = (std::__shared_mutex_base *)(a1 + 72);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 72));
  v43 = *(std::mutex **)(a1 + 8);
  std::mutex::lock(v43);
  v47 = 0;
  v48 = 0;
  v3 = *(_QWORD **)(a1 + 48);
  v41 = a1;
  v45 = (_QWORD *)(a1 + 56);
  v46 = &v47;
  if (v3 == (_QWORD *)(a1 + 56))
    goto LABEL_2;
  while (2)
  {
    v13 = *(char **)(v3[7] + 32);
    if (!v13)
      goto LABEL_49;
    v14 = *v13;
    v15 = v47;
    v16 = &v47;
    v17 = &v47;
    if (!v47)
      goto LABEL_43;
    v18 = *((char *)v3 + 55);
    if (v18 >= 0)
      v19 = v3 + 4;
    else
      v19 = (const void *)v3[4];
    if (v18 >= 0)
      v20 = *((unsigned __int8 *)v3 + 55);
    else
      v20 = v3[5];
    do
    {
      while (1)
      {
        v17 = (uint64_t **)v15;
        v23 = v15[4];
        v21 = v15 + 4;
        v22 = (uint64_t *)v23;
        v24 = *((char *)v21 + 23);
        v25 = v24 >= 0 ? v21 : v22;
        v26 = v24 >= 0 ? *((unsigned __int8 *)v21 + 23) : v21[1];
        v27 = v26 >= v20 ? v20 : v26;
        v28 = memcmp(v19, v25, v27);
        if (v28)
          break;
        if (v20 >= v26)
          goto LABEL_37;
LABEL_23:
        v15 = *v17;
        v16 = v17;
        if (!*v17)
          goto LABEL_43;
      }
      if (v28 < 0)
        goto LABEL_23;
LABEL_37:
      v29 = memcmp(v25, v19, v27);
      if (v29)
      {
        if ((v29 & 0x80000000) == 0)
          goto LABEL_49;
      }
      else if (v26 >= v20)
      {
        goto LABEL_49;
      }
      v15 = v17[1];
    }
    while (v15);
    v16 = v17 + 1;
LABEL_43:
    v30 = (char *)operator new(0x40uLL);
    v31 = v30 + 32;
    if (*((char *)v3 + 55) < 0)
    {
      sub_20AEC60F4(v31, (void *)v3[4], v3[5]);
    }
    else
    {
      v32 = *((_OWORD *)v3 + 2);
      *((_QWORD *)v30 + 6) = v3[6];
      *(_OWORD *)v31 = v32;
    }
    v30[56] = v14;
    *(_QWORD *)v30 = 0;
    *((_QWORD *)v30 + 1) = 0;
    *((_QWORD *)v30 + 2) = v17;
    *v16 = (uint64_t *)v30;
    if (*v46)
    {
      v46 = (uint64_t **)*v46;
      v30 = (char *)*v16;
    }
    sub_20AEC84C8(v47, (uint64_t *)v30);
    ++v48;
LABEL_49:
    v33 = (_QWORD *)v3[1];
    if (v33)
    {
      do
      {
        v34 = v33;
        v33 = (_QWORD *)*v33;
      }
      while (v33);
    }
    else
    {
      do
      {
        v34 = (_QWORD *)v3[2];
        v35 = *v34 == (_QWORD)v3;
        v3 = v34;
      }
      while (!v35);
    }
    v3 = v34;
    if (v34 != v45)
      continue;
    break;
  }
LABEL_2:
  v5 = (uint64_t **)(v41 + 24);
  v4 = *(uint64_t **)(v41 + 24);
  if (!v4)
  {
    v36 = (uint64_t **)(v41 + 24);
    v8 = a2;
LABEL_61:
    v38 = (uint64_t *)operator new(0x28uLL);
    v38[4] = v8;
    *v38 = 0;
    v38[1] = 0;
    v38[2] = (uint64_t)v36;
    *v5 = v38;
    v39 = **(_QWORD **)(v41 + 16);
    if (v39)
    {
      *(_QWORD *)(v41 + 16) = v39;
      v38 = *v5;
    }
    sub_20AEC84C8(*(uint64_t **)(v41 + 24), v38);
    ++*(_QWORD *)(v41 + 32);
    goto LABEL_64;
  }
  v6 = (uint64_t **)(v41 + 24);
  v7 = *(_QWORD **)(v41 + 24);
  v8 = a2;
  do
  {
    v9 = v7[4];
    v10 = v9 >= a2;
    if (v9 >= a2)
      v11 = v7;
    else
      v11 = v7 + 1;
    if (v10)
      v6 = (uint64_t **)v7;
    v7 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v6 == v5 || (unint64_t)v6[4] > a2)
  {
    while (1)
    {
      while (1)
      {
        v36 = (uint64_t **)v4;
        v37 = v4[4];
        if (v37 <= a2)
          break;
        v4 = *v36;
        v5 = v36;
        if (!*v36)
          goto LABEL_61;
      }
      if (v37 >= a2)
        break;
      v4 = v36[1];
      if (!v4)
      {
        v5 = v36 + 1;
        goto LABEL_61;
      }
    }
LABEL_64:
    (*(void (**)(uint64_t, uint64_t ***))(*(_QWORD *)v8 + 32))(v8, &v46);
    v12 = 1;
    goto LABEL_65;
  }
  v12 = 0;
LABEL_65:
  sub_20AEC833C((uint64_t)&v46, (char *)v47);
  std::mutex::unlock(v43);
  std::__shared_mutex_base::unlock(v44);
  return v12;
}

void sub_20B21A9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, std::__shared_mutex_base *a12, uint64_t a13, char a14, uint64_t a15)
{
  std::__shared_mutex_base::unlock(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20B21A9F0(_QWORD *a1, unint64_t a2)
{
  std::mutex *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;

  v4 = (std::mutex *)a1[1];
  std::mutex::lock(v4);
  v6 = a1 + 3;
  v5 = (uint64_t *)a1[3];
  if (!v5)
    goto LABEL_12;
  v7 = a1 + 3;
  v8 = (_QWORD *)a1[3];
  do
  {
    v9 = v8[4];
    v10 = v9 >= a2;
    if (v9 >= a2)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v10)
      v7 = v8;
    v8 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v7 != v6 && v7[4] <= a2)
  {
    v14 = a1 + 3;
    v15 = (_QWORD *)a1[3];
    do
    {
      v16 = v15[4];
      v17 = v16 >= a2;
      if (v16 >= a2)
        v18 = v15;
      else
        v18 = v15 + 1;
      if (v17)
        v14 = v15;
      v15 = (_QWORD *)*v18;
    }
    while (*v18);
    if (v14 != v6 && v14[4] <= a2)
    {
      v19 = (uint64_t *)v14[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
      else
      {
        v21 = v14;
        do
        {
          v20 = (uint64_t *)v21[2];
          v22 = *v20 == (_QWORD)v21;
          v21 = v20;
        }
        while (!v22);
      }
      if ((uint64_t *)a1[2] == v14)
        a1[2] = v20;
      --a1[4];
      sub_20AEC867C(v5, v14);
      operator delete(v14);
    }
    v12 = 1;
  }
  else
  {
LABEL_12:
    v12 = 0;
  }
  std::mutex::unlock(v4);
  return v12;
}

void sub_20B21AB14(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  std::__shared_mutex_base *v8;
  uint64_t v9;
  _QWORD *v10;
  std::mutex *v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  size_t v15;
  uint64_t **v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  _QWORD *v32;
  _QWORD *v33;
  std::runtime_error *exception;
  void *__p[2];
  char v36;

  v36 = 0;
  LOBYTE(__p[0]) = 0;
  v4 = sub_20AFB10A4((uint64_t)a2, (const void **)__p);
  v5 = v4;
  if (v36 < 0)
  {
    operator delete(__p[0]);
    v6 = a2 + 1;
    if (a2 + 1 == v5)
      goto LABEL_8;
  }
  else
  {
    v6 = a2 + 1;
    if (a2 + 1 == v4)
      goto LABEL_8;
  }
  v36 = 0;
  LOBYTE(__p[0]) = 0;
  v7 = sub_20AFB10A4((uint64_t)a2, (const void **)__p);
  if (v36 < 0)
    operator delete(__p[0]);
  if (!*((_BYTE *)v7 + 56))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot set root context to inherit its enable-state");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
LABEL_8:
  v8 = (std::__shared_mutex_base *)(a1 + 72);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 72));
  v10 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != v6)
  {
    do
    {
      if (*((char *)v10 + 55) < 0)
      {
        v14 = (char *)v10[4];
        v15 = v10[5];
      }
      else
      {
        v14 = (char *)(v10 + 4);
        v15 = *((unsigned __int8 *)v10 + 55);
      }
      v16 = sub_20B219D2C(a1, v9, v14, v15, 0);
      v17 = (uint64_t)v16;
      v18 = *((unsigned __int8 *)v10 + 56);
      v19 = v16[4];
      if (*((_BYTE *)v10 + 56))
      {
        if (*(_BYTE *)v19)
        {
          if (*(unsigned __int8 *)v19 != v18)
            *(_BYTE *)v19 = v18;
        }
        else
        {
          v24 = (_BYTE *)operator new();
          *v24 = v18;
          v25 = *(_QWORD *)(v17 + 32);
          *(_QWORD *)(v17 + 32) = v24;
          if (v25)
          {
            MEMORY[0x20BD3583C](v25, 0x1000C4077774924);
            v24 = *(_BYTE **)(v17 + 32);
          }
          v26 = (unint64_t *)operator new();
          *v26 = (unint64_t)v24;
          v27 = *(unint64_t **)(v17 + 40);
          v28 = atomic_load(v26);
          do
            __ldaxr(v27);
          while (__stlxr(v28, v27));
          MEMORY[0x20BD3583C]();
          sub_20B218524(v17);
        }
      }
      else if (*(_BYTE *)v19)
      {
        v20 = (unint64_t *)v16[5];
        v21 = atomic_load(*(unint64_t **)(v16[6][9] + 40));
        do
          __ldaxr(v20);
        while (__stlxr(v21, v20));
        sub_20B218524((uint64_t)v16);
        v22 = (_BYTE *)operator new();
        *v22 = 0;
        v23 = *(_QWORD *)(v17 + 32);
        *(_QWORD *)(v17 + 32) = v22;
        if (v23)
          MEMORY[0x20BD3583C](v23, 0x1000C4077774924);
      }
      v29 = (_QWORD *)v10[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD *)v10[2];
          v31 = *v30 == (_QWORD)v10;
          v10 = v30;
        }
        while (!v31);
      }
      v10 = v30;
    }
    while (v30 != v6);
  }
  v11 = *(std::mutex **)(a1 + 8);
  std::mutex::lock(v11);
  v12 = *(_QWORD **)(a1 + 16);
  v13 = (_QWORD *)(a1 + 24);
  if (v12 != v13)
  {
    do
    {
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v12[4] + 24))(v12[4], a2);
      v32 = (_QWORD *)v12[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v12[2];
          v31 = *v33 == (_QWORD)v12;
          v12 = v33;
        }
        while (!v31);
      }
      v12 = v33;
    }
    while (v33 != v13);
  }
  std::mutex::unlock(v11);
  std::__shared_mutex_base::unlock(v8);
}

void sub_20B21AE10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B21AE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B21AE74(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _BYTE *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::mutex *v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  _OWORD *v58;
  _OWORD v59[3];
  _BYTE *v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  *a1 = &off_24C4120E8;
  v8 = (_QWORD *)operator new();
  v9 = (uint64_t)v8;
  v10 = *(unint64_t **)a3;
  v11 = *(unint64_t **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v56 = *((unsigned __int8 *)a4 + 24);
  if (*((_BYTE *)a4 + 24))
  {
    v55 = *a4;
    *(_QWORD *)&v59[1] = a4[1];
    *(_QWORD *)((char *)&v59[1] + 7) = *(uint64_t *)((char *)a4 + 15);
    v54 = *((_BYTE *)a4 + 23);
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
  }
  else
  {
    v55 = 0;
  }
  v57 = a1;
  *v8 = &off_24C412090;
  v12 = operator new();
  *(_QWORD *)v12 = 850045863;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_QWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 8) = v12;
  *(_QWORD *)(v9 + 16) = v9 + 24;
  if (v10 != v11)
  {
    v13 = 0;
    v14 = v10;
    v15 = *v10;
    v16 = (uint64_t **)(v9 + 24);
LABEL_11:
    if (v13)
      v20 = v16;
    else
      v20 = (uint64_t **)(v9 + 24);
    if (v13)
      v21 = v16 + 1;
    else
      v21 = (uint64_t **)(v9 + 24);
    if (*v21)
      goto LABEL_29;
LABEL_26:
    v24 = (uint64_t *)operator new(0x28uLL);
    v24[4] = v15;
    *v24 = 0;
    v24[1] = 0;
    v24[2] = (uint64_t)v20;
    *v21 = v24;
    v25 = **(_QWORD **)(v9 + 16);
    if (v25)
    {
      *(_QWORD *)(v9 + 16) = v25;
      v24 = *v21;
    }
    sub_20AEC84C8(*(uint64_t **)(v9 + 24), v24);
    ++*(_QWORD *)(v9 + 32);
LABEL_29:
    while (++v14 != v11)
    {
      v13 = *(_QWORD *)(v9 + 24);
      v15 = *v14;
      v16 = (uint64_t **)(v9 + 24);
      if (*(_QWORD *)(v9 + 16) == v9 + 24)
        goto LABEL_11;
      v17 = *(uint64_t ***)(v9 + 24);
      v18 = (uint64_t *)(v9 + 24);
      if (v13)
      {
        do
        {
          v16 = v17;
          v17 = (uint64_t **)v17[1];
        }
        while (v17);
      }
      else
      {
        do
        {
          v16 = (uint64_t **)v18[2];
          v19 = *v16 == v18;
          v18 = (uint64_t *)v16;
        }
        while (v19);
      }
      if ((unint64_t)v16[4] < v15)
        goto LABEL_11;
      v21 = (uint64_t **)(v9 + 24);
      v20 = (uint64_t **)(v9 + 24);
      if (!v13)
        goto LABEL_26;
      v22 = *(uint64_t **)(v9 + 24);
      while (1)
      {
        while (1)
        {
          v20 = (uint64_t **)v22;
          v23 = v22[4];
          if (v23 <= v15)
            break;
          v22 = *v20;
          v21 = v20;
          if (!*v20)
            goto LABEL_26;
        }
        if (v23 >= v15)
          break;
        v22 = v20[1];
        if (!v22)
        {
          v21 = v20 + 1;
          goto LABEL_26;
        }
      }
    }
  }
  *(_QWORD *)(v9 + 56) = 0;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 48) = v9 + 56;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(v9 + 72));
  *(_BYTE *)(v9 + 240) = 0;
  *(_BYTE *)(v9 + 264) = 0;
  if (v56)
  {
    v26 = *(_QWORD *)&v59[1];
    *(_QWORD *)(v9 + 240) = v55;
    *(_QWORD *)(v9 + 248) = v26;
    *(_QWORD *)(v9 + 255) = *(_QWORD *)((char *)&v59[1] + 7);
    *(_BYTE *)(v9 + 263) = v54;
    *(_BYTE *)(v9 + 264) = 1;
  }
  v57[1] = v9;
  if (v10)
  {
    operator delete(v10);
    v9 = v57[1];
  }
  v27 = (uint64_t *)operator new();
  v59[0] = 0uLL;
  v58 = v59;
  sub_20B217D78(v27, v9, "", 0, 0, (uint64_t)&v58);
  sub_20B1F7D90(*(_QWORD **)&v59[0]);
  *(_QWORD *)&v59[1] = off_24C412038;
  HIBYTE(v59[2]) = 0;
  BYTE8(v59[1]) = 0;
  v28 = (_BYTE *)operator new();
  *v28 = a2;
  v60 = v28;
  v29 = (_QWORD *)operator new();
  *v29 = v28;
  v61 = v29;
  v62 = v27;
  v30 = operator new();
  v31 = v30;
  *(_QWORD *)v30 = off_24C412038;
  *(_OWORD *)(v30 + 8) = *(_OWORD *)((char *)&v59[1] + 8);
  *(_QWORD *)(v30 + 24) = *((_QWORD *)&v59[2] + 1);
  *(_QWORD *)(v30 + 32) = v28;
  *(_QWORD *)(v30 + 40) = v29;
  *(_QWORD *)(v30 + 48) = v27;
  v32 = v57[1];
  if (v32)
  {
    *(_QWORD *)(v32 + 40) = v30;
    v33 = v57[1];
    if (v33)
      goto LABEL_38;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)(v57[1] + 40) = v31;
    v33 = v57[1];
    if (v33)
    {
LABEL_38:
      BYTE7(v59[2]) = 0;
      LOBYTE(v59[1]) = 0;
      *((_QWORD *)&v59[2] + 1) = v31;
      v35 = (_QWORD *)(v33 + 56);
      v34 = *(_QWORD *)(v33 + 56);
      if (v34)
        goto LABEL_39;
      goto LABEL_43;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v33 = v57[1];
  BYTE7(v59[2]) = 0;
  LOBYTE(v59[1]) = 0;
  *((_QWORD *)&v59[2] + 1) = v31;
  v35 = (_QWORD *)(v33 + 56);
  v34 = *(_QWORD *)(v33 + 56);
  if (v34)
  {
    while (1)
    {
LABEL_39:
      v35 = (_QWORD *)v34;
      v36 = *(unsigned __int8 *)(v34 + 55);
      if ((v36 & 0x80u) != 0)
        v36 = v35[5];
      if (!v36)
        break;
      v34 = *v35;
      if (!*v35)
        goto LABEL_43;
    }
    *((_QWORD *)&v59[2] + 1) = 0;
    v37 = v35;
    v41 = *(_QWORD *)(v31 + 48);
    *(_QWORD *)(v31 + 48) = 0;
    if (!v41)
      goto LABEL_48;
    goto LABEL_47;
  }
LABEL_43:
  v37 = operator new(0x40uLL);
  v37[2] = v59[1];
  v38 = *(_QWORD *)&v59[2];
  memset(&v59[1], 0, 32);
  *((_QWORD *)v37 + 6) = v38;
  *((_QWORD *)v37 + 7) = v31;
  *(_QWORD *)v37 = 0;
  *((_QWORD *)v37 + 1) = 0;
  *((_QWORD *)v37 + 2) = v35;
  *v35 = v37;
  v39 = **(_QWORD **)(v33 + 48);
  v40 = (uint64_t *)v37;
  if (v39)
  {
    *(_QWORD *)(v33 + 48) = v39;
    v40 = (uint64_t *)*v35;
  }
  sub_20AEC84C8(*(uint64_t **)(v33 + 56), v40);
  ++*(_QWORD *)(v33 + 64);
  v31 = *((_QWORD *)&v59[2] + 1);
  if (*((_QWORD *)&v59[2] + 1))
  {
    v41 = *(_QWORD *)(*((_QWORD *)&v59[2] + 1) + 48);
    *(_QWORD *)(*((_QWORD *)&v59[2] + 1) + 48) = 0;
    if (!v41)
    {
LABEL_48:
      v42 = *(_QWORD *)(v31 + 40);
      *(_QWORD *)(v31 + 40) = 0;
      if (v42)
        MEMORY[0x20BD3583C](v42, 0x80C40B8603338);
      v43 = *(_QWORD *)(v31 + 32);
      *(_QWORD *)(v31 + 32) = 0;
      if (v43)
        MEMORY[0x20BD3583C](v43, 0x1000C4077774924);
      if (*(char *)(v31 + 31) < 0)
        operator delete(*(void **)(v31 + 8));
      MEMORY[0x20BD3583C](v31, 0x10B3C406DCED8F8);
      goto LABEL_55;
    }
LABEL_47:
    sub_20B21C5F4(v41);
    goto LABEL_48;
  }
LABEL_55:
  if (SBYTE7(v59[2]) < 0)
  {
    operator delete(*(void **)&v59[1]);
    v44 = v57[1];
    if (v44)
      goto LABEL_66;
  }
  else
  {
    v44 = v57[1];
    if (v44)
      goto LABEL_66;
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v44 = v57[1];
LABEL_66:
  v45 = *((_QWORD *)v37 + 7);
  v46 = *(std::mutex **)(v44 + 8);
  std::mutex::lock(v46);
  v47 = *(_QWORD **)(v44 + 16);
  if (v47 != (_QWORD *)(v44 + 24))
  {
    do
    {
      v48 = *(char *)(v45 + 31);
      if (v48 >= 0)
        v49 = v45 + 8;
      else
        v49 = *(_QWORD *)(v45 + 8);
      if (v48 >= 0)
        v50 = *(unsigned __int8 *)(v45 + 31);
      else
        v50 = *(_QWORD *)(v45 + 16);
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47[4] + 16))(v47[4], v49, v50, a2);
      v51 = (_QWORD *)v47[1];
      if (v51)
      {
        do
        {
          v52 = v51;
          v51 = (_QWORD *)*v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          v52 = (_QWORD *)v47[2];
          v19 = *v52 == (_QWORD)v47;
          v47 = v52;
        }
        while (!v19);
      }
      v47 = v52;
    }
    while (v52 != (_QWORD *)(v44 + 24));
  }
  std::mutex::unlock(v46);
  return v57;
}

void sub_20B21B510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *__p, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v24;

  sub_20B21B65C((uint64_t)&a19);
  v24 = *(_QWORD *)(a15 + 8);
  *(_QWORD *)(a15 + 8) = 0;
  if (!v24)
    _Unwind_Resume(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  _Unwind_Resume(a1);
}

uint64_t sub_20B21B65C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0;
    if (v3)
      sub_20B21C5F4(v3);
    v4 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v4)
      MEMORY[0x20BD3583C](v4, 0x80C40B8603338);
    v5 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v2 + 32) = 0;
    if (v5)
      MEMORY[0x20BD3583C](v5, 0x1000C4077774924);
    if (*(char *)(v2 + 31) < 0)
      operator delete(*(void **)(v2 + 8));
    MEMORY[0x20BD3583C](v2, 0x10B3C406DCED8F8);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_20B21B720(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C4120E8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B21B760(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C4120E8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B21B7B0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    return sub_20B21A6A0(v4, a2);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return sub_20B21A6A0(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_20B21B828(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;

  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
    return sub_20B21A9F0(v4, a2);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return sub_20B21A9F0(*(_QWORD **)(a1 + 8), a2);
}

uint64_t sub_20B21B8A0(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6;
  std::__shared_mutex_base *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  size_t v14;
  size_t v15;
  int v16;
  int v17;
  const void *v18;
  size_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  _QWORD v27[6];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (std::__shared_mutex_base *)(v6 + 72);
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v6 + 72));
    v8 = *(_QWORD *)(a1 + 8);
    if (v8)
      goto LABEL_3;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v7 = (std::__shared_mutex_base *)(*(_QWORD *)(a1 + 8) + 72);
    std::__shared_mutex_base::lock(v7);
    v8 = *(_QWORD *)(a1 + 8);
    if (v8)
    {
LABEL_3:
      v9 = (uint64_t *)(v8 + 56);
      v10 = *(uint64_t **)(v8 + 56);
      if (!v10)
        goto LABEL_37;
      goto LABEL_9;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (uint64_t *)(v8 + 56);
  v10 = *(uint64_t **)(v8 + 56);
  if (!v10)
    goto LABEL_37;
LABEL_9:
  v11 = v9;
  do
  {
    while (1)
    {
      v12 = *((char *)v10 + 55);
      v13 = v12 >= 0 ? v10 + 4 : (uint64_t *)v10[4];
      v14 = v12 >= 0 ? *((unsigned __int8 *)v10 + 55) : v10[5];
      v15 = v14 >= a3 ? a3 : v14;
      v16 = memcmp(a2, v13, v15);
      if (v16)
        break;
      if (a3 <= v14)
        goto LABEL_24;
LABEL_10:
      v10 = (uint64_t *)v10[1];
      if (!v10)
        goto LABEL_25;
    }
    if ((v16 & 0x80000000) == 0)
      goto LABEL_10;
LABEL_24:
    v11 = v10;
    v10 = (uint64_t *)*v10;
  }
  while (v10);
LABEL_25:
  if (v11 == v9)
    goto LABEL_37;
  v17 = *((char *)v11 + 55);
  if (v17 >= 0)
    v18 = v11 + 4;
  else
    v18 = (const void *)v11[4];
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)v11 + 55);
  else
    v19 = v11[5];
  if (v19 >= a3)
    v20 = a3;
  else
    v20 = v19;
  v21 = memcmp(a2, v18, v20);
  if (!v21)
  {
    if (a3 >= v19)
      goto LABEL_38;
LABEL_37:
    v11 = v9;
    goto LABEL_38;
  }
  if (v21 < 0)
    goto LABEL_37;
LABEL_38:
  if (!v8)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v8 = *(_QWORD *)(a1 + 8);
  }
  if (v11 == (uint64_t *)(v8 + 56))
  {
    v27[0] = "Context with name ";
    v27[1] = 18;
    v27[2] = a2;
    v27[3] = a3;
    v27[4] = " not found";
    v27[5] = 10;
    sub_20AECFDF8((uint64_t)v27, (uint64_t)&v28, 0, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 645, (uint64_t)"", 0, (uint64_t)p_p, size, (void (*)(void **))sub_20B532360);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    abort();
  }
  v22 = v11[7];
  std::__shared_mutex_base::unlock(v7);
  return v22;
}

void sub_20B21BB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_mutex_base *v14;

  std::__shared_mutex_base::unlock(v14);
  _Unwind_Resume(a1);
}

uint64_t **sub_20B21BBDC(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t **v8;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v5 + 72));
  v8 = sub_20B219D2C(v5, v7, a2, a3, 1);
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)(v5 + 72));
  return v8;
}

void sub_20B21BC80(_Unwind_Exception *a1)
{
  std::__shared_mutex_base *v1;

  std::__shared_mutex_base::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20B21BC98(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
    return sub_20B219BFC(v6, a2, a3);
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return sub_20B219BFC(*(_QWORD *)(a1 + 8), a2, a3);
}

BOOL sub_20B21BD28(uint64_t a1, void *__s1, size_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  size_t v15;
  size_t v16;
  int v17;
  int v18;
  const void *v19;
  size_t v20;
  size_t v21;
  int v22;

  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v8 = *(uint64_t **)(v5 + 56);
    v6 = (uint64_t *)(v5 + 56);
    v7 = v8;
    if (!v8)
    {
LABEL_34:
      v12 = v6;
      return v12 != v6;
    }
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(uint64_t **)(v10 + 56);
    v6 = (uint64_t *)(v10 + 56);
    v7 = v11;
    if (!v11)
      goto LABEL_34;
  }
  v12 = v6;
  do
  {
    while (1)
    {
      v13 = *((char *)v7 + 55);
      v14 = v13 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v15 = v13 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v16 = v15 >= a3 ? a3 : v15;
      v17 = memcmp(__s1, v14, v16);
      if (v17)
        break;
      if (a3 <= v15)
        goto LABEL_21;
LABEL_7:
      v7 = (uint64_t *)v7[1];
      if (!v7)
        goto LABEL_22;
    }
    if ((v17 & 0x80000000) == 0)
      goto LABEL_7;
LABEL_21:
    v12 = v7;
    v7 = (uint64_t *)*v7;
  }
  while (v7);
LABEL_22:
  if (v12 == v6)
    goto LABEL_34;
  v18 = *((char *)v12 + 55);
  if (v18 >= 0)
    v19 = v12 + 4;
  else
    v19 = (const void *)v12[4];
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v12 + 55);
  else
    v20 = v12[5];
  if (v20 >= a3)
    v21 = a3;
  else
    v21 = v20;
  v22 = memcmp(__s1, v19, v21);
  if (!v22)
  {
    if (a3 >= v20)
      return v12 != v6;
    goto LABEL_34;
  }
  if (v22 < 0)
    goto LABEL_34;
  return v12 != v6;
}

void sub_20B21BE70(uint64_t a1, char *a2, size_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t **v10;

  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v7 = *(_QWORD *)(a1 + 8);
  }
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v7 + 72));
  v10 = sub_20B219D2C(v7, v9, a2, a3, 0);
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)(v7 + 72));
  sub_20B219624(v10[6], (uint64_t)v10, a4);
}

void sub_20B21BF28(_Unwind_Exception *a1)
{
  std::__shared_mutex_base *v1;

  std::__shared_mutex_base::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B21BF40(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    sub_20B21AB14(v4, a2);
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    sub_20B21AB14(*(_QWORD *)(a1 + 8), a2);
  }
}

uint64_t sub_20B21BFB8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    return v1 + 240;
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return *(_QWORD *)(a1 + 8) + 240;
}

void sub_20B21C02C(uint64_t a1, int a2, char a3)
{
  uint64_t v5;
  std::__shared_mutex_base *v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::mutex *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  char v33;
  _QWORD v34[2];

  v33 = a3;
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  v6 = (std::__shared_mutex_base *)(v5 + 72);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v5 + 72));
  v31 = 0;
  v32 = 0;
  v7 = operator new(0x40uLL);
  v7[55] = 0;
  v7[32] = 0;
  v7[56] = a2;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = &v31;
  v30 = v7;
  v31 = v7;
  sub_20AEC84C8((uint64_t *)v7, (uint64_t *)v7);
  ++v32;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(_QWORD **)(v8 + 40);
    v10 = (_BYTE *)v9[4];
    v11 = *v10;
    if (a2)
    {
LABEL_6:
      if (v11)
      {
        if (v11 != a2)
          *v10 = a2;
      }
      else
      {
        v16 = (_BYTE *)operator new();
        *v16 = a2;
        v17 = v9[4];
        v9[4] = v16;
        if (v17)
        {
          MEMORY[0x20BD3583C](v17, 0x1000C4077774924);
          v16 = (_BYTE *)v9[4];
        }
        v18 = (unint64_t *)operator new();
        *v18 = (unint64_t)v16;
        v19 = (unint64_t *)v9[5];
        v20 = atomic_load(v18);
        do
          __ldaxr(v19);
        while (__stlxr(v20, v19));
        MEMORY[0x20BD3583C](v18);
        sub_20B218524((uint64_t)v9);
      }
      goto LABEL_21;
    }
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v9 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 40);
    v10 = (_BYTE *)v9[4];
    v11 = *v10;
    if (a2)
      goto LABEL_6;
  }
  if (v11)
  {
    v12 = (unint64_t *)v9[5];
    v13 = atomic_load(*(unint64_t **)(*(_QWORD *)(v9[6] + 72) + 40));
    do
      __ldaxr(v12);
    while (__stlxr(v13, v12));
    sub_20B218524((uint64_t)v9);
    v14 = (_BYTE *)operator new();
    *v14 = 0;
    v15 = v9[4];
    v9[4] = v14;
    if (v15)
      MEMORY[0x20BD3583C](v15, 0x1000C4077774924);
  }
LABEL_21:
  v21 = *(_QWORD *)(a1 + 8);
  if (!v21)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      goto LABEL_36;
    }
    v21 = *(_QWORD *)(a1 + 8);
  }
  v22 = *(_QWORD *)(v21 + 40);
  v34[0] = &v33;
  v34[1] = &v30;
  sub_20B21CE44((uint64_t)v34, v22, (uint64_t)v34);
  v23 = *(_QWORD *)(a1 + 8);
  if (v23)
    goto LABEL_27;
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
LABEL_36:
    abort();
  }
  v23 = *(_QWORD *)(a1 + 8);
LABEL_27:
  v24 = *(std::mutex **)(v23 + 8);
  std::mutex::lock(v24);
  v25 = *(_QWORD **)(v23 + 16);
  v26 = (_QWORD *)(v23 + 24);
  if (v25 != v26)
  {
    do
    {
      (*(void (**)(_QWORD, _BYTE **))(*(_QWORD *)v25[4] + 24))(v25[4], &v30);
      v27 = (_QWORD *)v25[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v25[2];
          v29 = *v28 == (_QWORD)v25;
          v25 = v28;
        }
        while (!v29);
      }
      v25 = v28;
    }
    while (v28 != v26);
  }
  std::mutex::unlock(v24);
  sub_20AEC833C((uint64_t)&v30, v31);
  std::__shared_mutex_base::unlock(v6);
}

void sub_20B21C3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  std::__shared_mutex_base *v10;

  sub_20AEC833C((uint64_t)&a9, a10);
  std::__shared_mutex_base::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20B21C3DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_mutex_base *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  __int128 *v13;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 8);
  }
  v5 = (std::__shared_mutex_base *)(v4 + 72);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v4 + 72));
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD **)(v6 + 48);
  v8 = (_QWORD *)(v6 + 56);
  if (v7 != (_QWORD *)(v6 + 56))
  {
    do
    {
      v9 = **(_BYTE **)(v7[7] + 32);
      v13 = (__int128 *)(v7 + 4);
      *((_BYTE *)sub_20B21D658((uint64_t **)a2, (const void **)v7 + 4, (uint64_t)&unk_20B5EABF1, &v13) + 56) = v9;
      v10 = (_QWORD *)v7[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v7[2];
          v12 = *v11 == (_QWORD)v7;
          v7 = v11;
        }
        while (!v12);
      }
      v7 = v11;
    }
    while (v11 != v8);
  }
  std::__shared_mutex_base::unlock(v5);
}

void sub_20B21C508(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_mutex_base *v2;

  sub_20AEC833C(v1, *(char **)(v1 + 8));
  std::__shared_mutex_base::unlock(v2);
  _Unwind_Resume(a1);
}

BOOL sub_20B21C52C(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)atomic_load(*(unint64_t **)(a1 + 40));
  return *v1 == 1;
}

uint64_t sub_20B21C544(uint64_t a1)
{
  return **(unsigned __int8 **)(a1 + 32);
}

void sub_20B21C554(uint64_t a1)
{
  sub_20B21D190(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B21C578(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  return sub_20B2199EC(*(_QWORD *)(v5 + 40), a2, a3);
}

void sub_20B21C5F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  sub_20B1F7D90(*(_QWORD **)(a1 + 88));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = *(void **)(a1 + 48);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_17:
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B21C6D0(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unsigned __int8 *v10;
  int64_t v11;
  unsigned __int8 *v12;
  char *v13;
  char *v14;
  char *v15;
  size_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  unsigned __int8 *v22;
  char *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char v39[8];
  char *v40;
  char *v41;
  char *v42;
  size_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;

LABEL_1:
  while (2)
  {
    v37 = a1;
    v38 = a4;
    v36 = *(_QWORD **)(a1 + 48);
    v5 = v36[6];
    v4 = v36[7];
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
    v7 = a2[12];
    v33 = v7;
    v34 = a3;
    if (v7 >= v6)
      v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
    v32 = v7;
    v8 = v7 - a3;
    v9 = v6 - a3;
    if (v6 < a3)
      v9 = 0;
    if ((uint64_t)v6 < v9)
      v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
    v10 = (unsigned __int8 *)(v5 + 24 * (v6 - v9));
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v10) >> 3);
    if (v11 >= v8)
      v11 = v8;
    v12 = &v10[24 * v11];
    v35 = a2;
    sub_20B21C998((uint64_t)v39, a2, a3, v8);
    v13 = v40;
    v14 = v41;
    v15 = v42;
    v16 = v43;
    v17 = v44;
    v18 = v45;
    v19 = v46;
    v20 = v47;
LABEL_11:
    while (1)
    {
      if (v10 == v12)
      {
        v21 = v20 == v18 && v15 == v13;
        if (v21 || v14 == v19)
          break;
      }
      if ((char)v10[23] < 0)
      {
        v22 = *(unsigned __int8 **)v10;
        if (v16 != *((_QWORD *)v10 + 1))
          goto LABEL_28;
      }
      else
      {
        v22 = v10;
        if (v16 != v10[23])
          goto LABEL_28;
      }
      if (memcmp(v14, v22, v16))
      {
LABEL_28:
        a4 = v38;
        if (*(_QWORD *)v38 != v37)
          return 0;
        v25 = v36[9];
        if (v25)
        {
          *(_QWORD *)v38 = v25;
          a1 = v36[9];
          a3 = v34;
          a2 = v35;
          goto LABEL_1;
        }
        return 1;
      }
      v10 += 24;
      v15 = &v14[v16];
      v14 = v13;
      v16 = 0;
      if (v15 != v13)
      {
        v16 = 0;
        v23 = v15 + 1;
        v14 = v13;
        if (v15 + 1 != v13)
        {
          v16 = 0;
          do
          {
            if (v23[v16] == v17)
            {
              v14 = v15 + 1;
              goto LABEL_11;
            }
            ++v16;
          }
          while (v13 - v23 != v16);
          v14 = v15 + 1;
          v16 = v13 - v23;
        }
      }
    }
    if (v33 > v6)
    {
      *(_QWORD *)v38 = v37;
      v26 = *(_QWORD *)(v37 + 48);
      v27 = *(_QWORD **)(v26 + 80);
      v28 = (_QWORD *)(v26 + 88);
      if (v27 != (_QWORD *)(v26 + 88))
      {
        do
        {
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v27[4] + 48) + 56) - *(_QWORD *)(*(_QWORD *)(v27[4] + 48) + 48)) >> 3) <= v35[12]
            && (sub_20B21C6D0() & 1) != 0)
          {
            break;
          }
          v29 = (_QWORD *)v27[1];
          if (v29)
          {
            do
            {
              v30 = v29;
              v29 = (_QWORD *)*v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              v30 = (_QWORD *)v27[2];
              v21 = *v30 == (_QWORD)v27;
              v27 = v30;
            }
            while (!v21);
          }
          v27 = v30;
        }
        while (v30 != v28);
      }
      return 1;
    }
    if (v6 > v33)
    {
      v31 = v36[9];
      a4 = v38;
      if (v31)
      {
        *(_QWORD *)v38 = v31;
        a1 = v36[9];
        a2 = v35;
        a3 = v32;
        continue;
      }
      return 1;
    }
    break;
  }
  *(_QWORD *)v38 = v37;
  result = 1;
  *(_BYTE *)(v38 + 8) = 1;
  return result;
}

uint64_t sub_20B21C998(uint64_t result, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;

  v4 = 0;
  v5 = a2[1];
  v6 = a2[2];
  v8 = a2[3];
  v7 = a2[4];
  v9 = *((unsigned __int8 *)a2 + 40);
  v11 = a2[7];
  v10 = a2[8];
  v12 = a2[9];
  v13 = v8 == v5;
  v14 = v12 == v11;
  if (v12 != v11)
    v13 = 0;
  if (v13)
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    if (v6 != v10)
    {
      v4 = 0;
      v16 = a2[2];
      v17 = a2[4];
      do
      {
        v18 = v16 + v17;
        if (v18 == v5)
        {
          v17 = 0;
          v16 = a2[1];
          ++v4;
          if (v12 == v11)
            break;
        }
        else
        {
          v16 = v18 + 1;
          if (v16 == v5)
          {
            v17 = 0;
            v16 = a2[1];
            ++v4;
          }
          else
          {
            v19 = 0;
            v17 = v5 - v16;
            while (*(unsigned __int8 *)(v16 + v19) != v9)
            {
              if (v17 == ++v19)
              {
                ++v4;
                goto LABEL_16;
              }
            }
            v17 = v19;
            ++v4;
          }
        }
LABEL_16:
        ;
      }
      while (v16 != v10);
      v15 = 0;
      v20 = a2[4];
      v21 = a2[2];
      do
      {
        v22 = v21 + v20;
        if (v22 == v5)
        {
          v20 = 0;
          v21 = a2[1];
          ++v15;
          if (v12 == v11)
            break;
        }
        else
        {
          v21 = v22 + 1;
          if (v21 == v5)
          {
            v20 = 0;
            v21 = a2[1];
            ++v15;
          }
          else
          {
            v23 = 0;
            v20 = v5 - v21;
            while (*(unsigned __int8 *)(v21 + v23) != v9)
            {
              if (v20 == ++v23)
              {
                ++v15;
                goto LABEL_28;
              }
            }
            v20 = v23;
            ++v15;
          }
        }
LABEL_28:
        ;
      }
      while (v21 != v10);
    }
  }
  v24 = v4 >= a3;
  v25 = v4 - a3;
  if (!v24)
    v25 = 0;
  if (v15 < v25)
    v25 = v15;
  v26 = v15 - v25;
  if (v26 >= 1)
  {
    do
    {
      v8 = v6 + v7;
      if (v6 + v7 == v5 || (v6 = v8 + 1, v8 + 1 == v5))
      {
        v7 = 0;
        v6 = a2[1];
      }
      else
      {
        v7 = 0;
        while (*(unsigned __int8 *)(v6 + v7) != v9)
        {
          if (v5 - v6 == ++v7)
          {
            v7 = v5 - v6;
            break;
          }
        }
      }
      v39 = (unint64_t)v26-- > 1;
    }
    while (v39);
  }
  v27 = 0;
  v28 = v12 == v11 && v8 == v5;
  if (!v28 && v6 != v10)
  {
    v27 = 0;
    v29 = v7;
    v30 = v6;
    do
    {
      v31 = v30 + v29;
      if (v31 == v5)
      {
        v29 = 0;
        v30 = a2[1];
        ++v27;
        if (v14)
          break;
      }
      else
      {
        v30 = v31 + 1;
        if (v30 == v5)
        {
          v29 = 0;
          v30 = a2[1];
          ++v27;
        }
        else
        {
          v32 = 0;
          v29 = v5 - v30;
          while (*(unsigned __int8 *)(v30 + v32) != v9)
          {
            if (v29 == ++v32)
            {
              ++v27;
              goto LABEL_52;
            }
          }
          v29 = v32;
          ++v27;
        }
      }
LABEL_52:
      ;
    }
    while (v30 != v10);
  }
  v33 = (int *)((char *)a2 + 41);
  v34 = *a2;
  if (v27 >= a4)
    v35 = a4;
  else
    v35 = v27;
  v36 = v6;
  v37 = v8;
  v38 = v7;
  if (v35 >= 1)
  {
    v36 = v6;
    v38 = v7;
    do
    {
      v37 = v36 + v38;
      if (v36 + v38 == v5 || (v36 = v37 + 1, v37 + 1 == v5))
      {
        v38 = 0;
        v36 = v5;
      }
      else
      {
        v38 = 0;
        while (*(unsigned __int8 *)(v36 + v38) != v9)
        {
          if (v5 - v36 == ++v38)
          {
            v38 = v5 - v36;
            break;
          }
        }
      }
      v39 = (unint64_t)v35-- > 1;
    }
    while (v39);
  }
  v40 = 0;
  v41 = v8 == v5;
  *(_QWORD *)result = v34;
  *(_QWORD *)(result + 8) = v5;
  *(_QWORD *)(result + 16) = v6;
  *(_QWORD *)(result + 24) = v8;
  *(_QWORD *)(result + 32) = v7;
  *(_BYTE *)(result + 40) = v9;
  v42 = *v33;
  *(_DWORD *)(result + 41) = *v33;
  v43 = *(int *)((char *)v33 + 3);
  *(_DWORD *)(result + 44) = v43;
  *(_QWORD *)(result + 48) = v34;
  *(_QWORD *)(result + 56) = v5;
  *(_QWORD *)(result + 64) = v36;
  *(_QWORD *)(result + 72) = v37;
  *(_QWORD *)(result + 80) = v38;
  *(_BYTE *)(result + 88) = v9;
  *(_DWORD *)(result + 92) = v43;
  v44 = v37 == v5 && v41;
  *(_DWORD *)(result + 89) = v42;
  if (!v44 && v6 != v36)
  {
    v40 = 0;
    do
    {
      v45 = v6 + v7;
      if (v45 == v5)
      {
        v7 = 0;
        v6 = v5;
        ++v40;
        if (v37 == v5)
          break;
      }
      else
      {
        v6 = v45 + 1;
        if (v6 == v5)
        {
          v7 = 0;
          v6 = v5;
          ++v40;
        }
        else
        {
          v46 = 0;
          v7 = v5 - v6;
          while (*(unsigned __int8 *)(v6 + v46) != v9)
          {
            if (v7 == ++v46)
            {
              ++v40;
              goto LABEL_92;
            }
          }
          v7 = v46;
          ++v40;
        }
      }
LABEL_92:
      ;
    }
    while (v6 != v36);
  }
  *(_QWORD *)(result + 96) = v40;
  return result;
}

void sub_20B21CDB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    sub_20B21C5F4(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    MEMORY[0x20BD3583C](v3, 0x80C40B8603338);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    MEMORY[0x20BD3583C](v4, 0x1000C4077774924);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B21CE44(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned __int8 **v5;
  _QWORD *v6;
  int v7;
  _BYTE *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  const void *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  _QWORD *v30;
  unint64_t v31;
  size_t v32;
  int v33;
  int v34;
  _BYTE *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  unsigned __int8 **v42;
  _QWORD *v43;
  _BYTE *v45;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD **)(v3 + 80);
  v43 = (_QWORD *)(v3 + 88);
  if (v4 != (_QWORD *)(v3 + 88))
  {
    v5 = (unsigned __int8 **)result;
    v42 = (unsigned __int8 **)result;
    do
    {
      v6 = (_QWORD *)v4[4];
      v7 = **v5;
      v8 = (_BYTE *)v6[4];
      if (**v5)
      {
        if (*v8)
        {
          if (*v8 != v7)
            *v8 = v7;
        }
        else
        {
          v13 = (_BYTE *)operator new();
          *v13 = v7;
          v14 = v6[4];
          v6[4] = v13;
          if (v14)
          {
            MEMORY[0x20BD3583C](v14, 0x1000C4077774924);
            v13 = (_BYTE *)v6[4];
          }
          v15 = (unint64_t *)operator new();
          *v15 = (unint64_t)v13;
          v16 = (unint64_t *)v6[5];
          v17 = atomic_load(v15);
          do
            __ldaxr(v16);
          while (__stlxr(v17, v16));
          MEMORY[0x20BD3583C]();
          sub_20B218524((uint64_t)v6);
        }
      }
      else if (*v8)
      {
        v9 = (unint64_t *)v6[5];
        v10 = atomic_load(*(unint64_t **)(*(_QWORD *)(v6[6] + 72) + 40));
        do
          __ldaxr(v9);
        while (__stlxr(v10, v9));
        sub_20B218524((uint64_t)v6);
        v11 = (_BYTE *)operator new();
        *v11 = 0;
        v12 = v6[4];
        v6[4] = v11;
        if (v12)
          MEMORY[0x20BD3583C](v12, 0x1000C4077774924);
      }
      v18 = v4[4];
      v19 = v5[1];
      v45 = *v5;
      v21 = v19 + 8;
      v20 = (_QWORD *)*((_QWORD *)v19 + 1);
      if (!v20)
      {
        v25 = v19 + 8;
        v35 = operator new(0x40uLL);
        v36 = v35 + 32;
        if ((*(char *)(v18 + 31) & 0x80000000) == 0)
          goto LABEL_46;
LABEL_48:
        sub_20AEC60F4(v36, *(void **)(v18 + 8), *(_QWORD *)(v18 + 16));
        goto LABEL_49;
      }
      v22 = *(char *)(v18 + 31);
      if (v22 >= 0)
        v23 = (const void *)(v18 + 8);
      else
        v23 = *(const void **)(v18 + 8);
      if (v22 >= 0)
        v24 = *(unsigned __int8 *)(v18 + 31);
      else
        v24 = *(_QWORD *)(v18 + 16);
      do
      {
        while (1)
        {
          v25 = v20;
          v28 = (_QWORD *)v20[4];
          v26 = v20 + 4;
          v27 = v28;
          v29 = *((char *)v26 + 23);
          v30 = v29 >= 0 ? v26 : v27;
          v31 = v29 >= 0 ? *((unsigned __int8 *)v26 + 23) : v26[1];
          v32 = v31 >= v24 ? v24 : v31;
          v33 = memcmp(v23, v30, v32);
          if (v33)
            break;
          if (v24 >= v31)
            goto LABEL_39;
LABEL_25:
          v20 = (_QWORD *)*v25;
          v21 = v25;
          if (!*v25)
            goto LABEL_45;
        }
        if (v33 < 0)
          goto LABEL_25;
LABEL_39:
        v34 = memcmp(v30, v23, v32);
        if (v34)
        {
          if ((v34 & 0x80000000) == 0)
            goto LABEL_52;
        }
        else if (v31 >= v24)
        {
          goto LABEL_52;
        }
        v20 = (_QWORD *)v25[1];
      }
      while (v20);
      v21 = v25 + 1;
LABEL_45:
      v35 = operator new(0x40uLL);
      v36 = v35 + 32;
      if (*(char *)(v18 + 31) < 0)
        goto LABEL_48;
LABEL_46:
      v37 = *(_OWORD *)(v18 + 8);
      *((_QWORD *)v36 + 2) = *(_QWORD *)(v18 + 24);
      *(_OWORD *)v36 = v37;
LABEL_49:
      v35[56] = *v45;
      *(_QWORD *)v35 = 0;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = v25;
      *v21 = v35;
      v38 = **(_QWORD **)v19;
      if (v38)
      {
        *(_QWORD *)v19 = v38;
        v35 = (_BYTE *)*v21;
      }
      sub_20AEC84C8(*((uint64_t **)v19 + 1), (uint64_t *)v35);
      ++*((_QWORD *)v19 + 2);
      v18 = v4[4];
LABEL_52:
      v5 = v42;
      result = sub_20B21CE44(a3, v18, a3);
      v39 = (_QWORD *)v4[1];
      if (v39)
      {
        do
        {
          v40 = v39;
          v39 = (_QWORD *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v40 = (_QWORD *)v4[2];
          v41 = *v40 == (_QWORD)v4;
          v4 = v40;
        }
        while (!v41);
      }
      v4 = v40;
    }
    while (v40 != v43);
  }
  return result;
}

void sub_20B21D17C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B21D190(uint64_t a1)
{
  std::mutex *v2;

  *(_QWORD *)a1 = &off_24C412090;
  if (*(_BYTE *)(a1 + 264) && *(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 184));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 136));
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  sub_20B21D57C(*(char **)(a1 + 56));
  sub_20B1F7D90(*(_QWORD **)(a1 + 24));
  v2 = *(std::mutex **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    std::mutex::~mutex(v2);
    MEMORY[0x20BD3583C]();
  }
  return a1;
}

void sub_20B21D228(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B21D24C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 48) && *(char *)(v1 + 47) < 0)
    {
      operator delete(*(void **)(v1 + 24));
      if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_10:
        JUMPOUT(0x20BD3583CLL);
    }
    else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(*(void **)v1);
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_20B21D2C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d3kit3viz9ContextIDEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d3kit3viz9ContextIDEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d3kit3viz9ContextIDEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d3kit3viz9ContextIDEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t *sub_20B21D330(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      v7 = (uint64_t *)v5[1];
      v8 = v6;
      if ((uint64_t *)*v5 == v6)
        goto LABEL_10;
      v9 = (uint64_t *)v5[1];
      v10 = v6;
      if (v7)
      {
        do
        {
          v8 = v9;
          v9 = (uint64_t *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v10[2];
          v11 = *v8 == (_QWORD)v10;
          v10 = v8;
        }
        while (v11);
      }
      v12 = v4[4];
      if (v8[4] < v12)
      {
LABEL_10:
        if (v7)
          v13 = (uint64_t **)v8;
        else
          v13 = (uint64_t **)v6;
        if (v7)
          v14 = (uint64_t **)(v8 + 1);
        else
          v14 = (uint64_t **)v6;
        if (*v14)
          goto LABEL_29;
      }
      else
      {
        v14 = (uint64_t **)v6;
        v13 = (uint64_t **)v6;
        if (v7)
        {
          while (1)
          {
            while (1)
            {
              v13 = (uint64_t **)v7;
              v15 = v7[4];
              if (v15 <= v12)
                break;
              v7 = *v13;
              v14 = v13;
              if (!*v13)
                goto LABEL_25;
            }
            if (v15 >= v12)
              goto LABEL_29;
            v7 = v13[1];
            if (!v7)
            {
              v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_25:
      v16 = (uint64_t *)operator new(0x28uLL);
      v16[4] = v4[4];
      *v16 = 0;
      v16[1] = 0;
      v16[2] = (uint64_t)v13;
      *v14 = v16;
      v17 = *(_QWORD *)*v5;
      if (v17)
      {
        *v5 = v17;
        v18 = *v14;
      }
      else
      {
        v18 = v16;
      }
      result = sub_20AEC84C8((uint64_t *)v5[1], v18);
      ++v5[2];
LABEL_29:
      v19 = (_QWORD *)v4[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v4[2];
          v11 = *v20 == (_QWORD)v4;
          v4 = v20;
        }
        while (!v11);
      }
      v4 = v20;
    }
    while (v20 != a3);
  }
  return result;
}

uint64_t *sub_20B21D4A4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 56);
      *(_QWORD *)(v2 + 56) = 0;
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 48);
        *(_QWORD *)(v3 + 48) = 0;
        if (v4)
          sub_20B21C5F4(v4);
        v5 = *(_QWORD *)(v3 + 40);
        *(_QWORD *)(v3 + 40) = 0;
        if (v5)
          MEMORY[0x20BD3583C](v5, 0x80C40B8603338);
        v6 = *(_QWORD *)(v3 + 32);
        *(_QWORD *)(v3 + 32) = 0;
        if (v6)
          MEMORY[0x20BD3583C](v6, 0x1000C4077774924);
        if (*(char *)(v3 + 31) < 0)
          operator delete(*(void **)(v3 + 8));
        MEMORY[0x20BD3583C](v3, 0x10B3C406DCED8F8);
      }
      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_20B21D57C(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a1)
  {
    sub_20B21D57C(*(_QWORD *)a1);
    sub_20B21D57C(*((_QWORD *)a1 + 1));
    v2 = *((_QWORD *)a1 + 7);
    *((_QWORD *)a1 + 7) = 0;
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 48);
      *(_QWORD *)(v2 + 48) = 0;
      if (v3)
        sub_20B21C5F4(v3);
      v4 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v4)
        MEMORY[0x20BD3583C](v4, 0x80C40B8603338);
      v5 = *(_QWORD *)(v2 + 32);
      *(_QWORD *)(v2 + 32) = 0;
      if (v5)
        MEMORY[0x20BD3583C](v5, 0x1000C4077774924);
      if (*(char *)(v2 + 31) < 0)
        operator delete(*(void **)(v2 + 8));
      MEMORY[0x20BD3583C](v2, 0x10B3C406DCED8F8);
    }
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t **sub_20B21D658(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  char *v21;
  _BYTE *v22;
  __int128 *v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = (const void *)v6[4];
      v12 = v6 + 4;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v10)
        v18 = v10;
      else
        v18 = v17;
      v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            return v11;
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        v6 = v11[1];
        if (!v6)
        {
          v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17)
          goto LABEL_22;
LABEL_8:
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_29;
      }
    }
  }
  v11 = a1 + 1;
LABEL_29:
  v21 = (char *)operator new(0x40uLL);
  v22 = v21 + 32;
  v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_20AEC60F4(v22, *(void **)v23, *((_QWORD *)v23 + 1));
  }
  else
  {
    v24 = *v23;
    *((_QWORD *)v21 + 6) = *((_QWORD *)v23 + 2);
    *(_OWORD *)v22 = v24;
  }
  v21[56] = 0;
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = v11;
  *v7 = (uint64_t *)v21;
  v25 = (uint64_t *)**a1;
  v26 = (uint64_t *)v21;
  if (v25)
  {
    *a1 = v25;
    v26 = *v7;
  }
  sub_20AEC84C8(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_20B21D7D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B21D7E4(uint64_t a1, uint64_t a2)
{
  signed int v4;
  std::chrono::steady_clock::time_point v5;
  signed int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  _BOOL4 v10;
  unsigned __int8 v11;
  size_t v12;
  void **p_s1;
  std::unique_lock<std::mutex> *p_s2;
  uint64_t v15;
  uint64_t v16;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::steady_clock::time_point v18;
  std::chrono::system_clock::time_point v19;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v20;
  signed int v21;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v22;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v23;
  std::chrono::system_clock::time_point v24;
  std::unique_lock<std::mutex> __s2;
  char v26;
  int v27;
  char v28;
  void *__s1;
  size_t __n;
  unsigned __int8 v31;
  int v32;

  if (*(_BYTE *)(a1 + 104))
  {
    __s2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 184);
    __s2.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 184));
    if (*(_BYTE *)(a1 + 96))
    {
      v4 = atomic_load((unsigned int *)(a1 + 128));
      if (*(_QWORD *)(a1 + 88) <= (unint64_t)v4)
      {
        v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v6 = atomic_load((unsigned int *)(a1 + 128));
        if (!*(_BYTE *)(a1 + 96))
          goto LABEL_58;
        if (*(_QWORD *)(a1 + 88) > (unint64_t)v6)
          goto LABEL_6;
        rep = v5.__d_.__rep_;
        v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        std::chrono::steady_clock::now();
        v19.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        v20.__d_.__rep_ = 1000000000;
        if (v19.__d_.__rep_)
        {
          if (v19.__d_.__rep_ <= 0)
          {
            if ((unint64_t)v19.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
              v20.__d_.__rep_ = 1000 * v19.__d_.__rep_ + 1000000000;
            else
              v20.__d_.__rep_ = 0x800000003B9ACA00;
          }
          else if ((unint64_t)v19.__d_.__rep_ < 0x20C49BA5D411B8)
          {
            v20.__d_.__rep_ = 1000 * v19.__d_.__rep_ + 1000000000;
          }
          else
          {
            v20.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
          }
        }
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 136), &__s2, v20);
        std::chrono::steady_clock::now();
        v21 = atomic_load((unsigned int *)(a1 + 128));
        if (!*(_BYTE *)(a1 + 96))
LABEL_58:
          sub_20AF3FE2C();
        v22 = v18.__d_.__rep_ - rep;
        while (*(_QWORD *)(a1 + 88) <= (unint64_t)v21)
        {
          if (std::chrono::steady_clock::now().__d_.__rep_ - (v22 + rep) >= 500000000)
            v22 = std::chrono::steady_clock::now().__d_.__rep_ - rep;
          std::chrono::steady_clock::now();
          v24.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          v23.__d_.__rep_ = 1000000000;
          if (v24.__d_.__rep_)
          {
            if (v24.__d_.__rep_ < 1)
            {
              if ((unint64_t)v24.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
                v23.__d_.__rep_ = 1000 * v24.__d_.__rep_ + 1000000000;
              else
                v23.__d_.__rep_ = 0x800000003B9ACA00;
            }
            else if ((unint64_t)v24.__d_.__rep_ >= 0x20C49BA5D411B8)
            {
              v23.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              v23.__d_.__rep_ = 1000 * v24.__d_.__rep_ + 1000000000;
            }
          }
          std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 136), &__s2, v23);
          std::chrono::steady_clock::now();
          v21 = atomic_load((unsigned int *)(a1 + 128));
          if (!*(_BYTE *)(a1 + 96))
            goto LABEL_58;
        }
      }
    }
LABEL_6:
    v7 = (unsigned int *)(a1 + 128);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 72) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 72) + 88, a2);
    if (__s2.__owns_)
      std::mutex::unlock(__s2.__m_);
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_31;
    goto LABEL_13;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 72) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 72) + 88, a2);
  if (!*(_BYTE *)(a1 + 104))
  {
LABEL_31:
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 72) + 72);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 64))(v16);
    return;
  }
LABEL_13:
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v9 = *(_QWORD *)(a2 + 24);
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v9 + 48))(&__s1);
  v10 = 0;
  strcpy((char *)&__s2, "cv3d.net");
  v26 = 8;
  v27 = 2;
  v28 = 1;
  v11 = v31;
  if ((v31 & 0x80u) == 0)
    v12 = v31;
  else
    v12 = __n;
  if (v12 != 8)
  {
LABEL_29:
    if ((v11 & 0x80) != 0)
      goto LABEL_38;
LABEL_30:
    if (!v10)
      return;
    goto LABEL_31;
  }
  if ((v31 & 0x80) != 0)
  {
    if (memcmp(__s1, &__s2, __n))
    {
      operator delete(__s1);
      return;
    }
    goto LABEL_28;
  }
  if (!v31)
  {
LABEL_28:
    v10 = v32 == 2;
    goto LABEL_29;
  }
  p_s1 = &__s1;
  p_s2 = &__s2;
  v15 = v31;
  while (*(unsigned __int8 *)p_s1 == LOBYTE(p_s2->__m_))
  {
    p_s1 = (void **)((char *)p_s1 + 1);
    p_s2 = (std::unique_lock<std::mutex> *)((char *)p_s2 + 1);
    if (!--v15)
      goto LABEL_28;
  }
  v10 = 0;
  if ((v31 & 0x80) == 0)
    goto LABEL_30;
LABEL_38:
  operator delete(__s1);
  if (v10)
    goto LABEL_31;
}

void sub_20B21DBD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11)
{
  if (a11)
    std::mutex::unlock(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B21DBF4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    return a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t sub_20B21DC94(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[2];
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  mach_timebase_info info[2];
  int v29;
  __int128 __p;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  void *v35[2];
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  void *v39[2];
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43[2];
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v4 = mach_continuous_time();
  v5 = atomic_load((unsigned __int8 *)&qword_25463D170);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_25463D170))
  {
    mach_timebase_info(info);
    LODWORD(v15) = info[0].numer;
    LODWORD(v16) = info[0].denom;
    *(double *)&qword_25463D168 = (double)v15 / (double)v16;
    __cxa_guard_release(&qword_25463D170);
  }
  v17[0] = llround(*(double *)&qword_25463D168 * (double)v4);
  v17[1] = 2;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  *(_OWORD *)&info[0].numer = *(_OWORD *)a2;
  v29 = *(_DWORD *)(a2 + 16);
  LOBYTE(__p) = 0;
  v32 = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_20AEC60F4(&__p, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      __p = *(_OWORD *)(a2 + 24);
      v31 = *(_QWORD *)(a2 + 40);
    }
    v32 = 1;
  }
  LOBYTE(v33) = 0;
  v45 = 0;
  if (*(_BYTE *)(a2 + 200))
  {
    sub_20AF3FE60((char *)&v33, (__int128 *)(a2 + 56));
    v45 = 1;
  }
  v46 = *(_OWORD *)(a2 + 208);
  v47 = *(_QWORD *)(a2 + 224);
  v6 = operator new();
  v7 = (_QWORD *)v6;
  *(_QWORD *)v6 = off_24C40E278;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)&info[0].numer;
  *(_DWORD *)(v6 + 24) = v29;
  *(_BYTE *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  if (v32)
  {
    *(_OWORD *)(v6 + 32) = __p;
    *(_QWORD *)(v6 + 48) = v31;
    v31 = 0;
    __p = 0uLL;
    *(_BYTE *)(v6 + 56) = 1;
  }
  *(_BYTE *)(v6 + 64) = 0;
  *(_BYTE *)(v6 + 208) = 0;
  if (v45)
  {
    *(_OWORD *)(v6 + 64) = v33;
    *(_QWORD *)(v6 + 80) = v34;
    v34 = 0;
    v33 = 0uLL;
    *(_OWORD *)(v6 + 88) = *(_OWORD *)v35;
    v8 = v38;
    *(_QWORD *)(v6 + 104) = v36;
    v35[0] = 0;
    v35[1] = 0;
    *(_QWORD *)(v6 + 128) = v8;
    *(_OWORD *)(v6 + 112) = v37;
    v36 = 0;
    v37 = 0uLL;
    v38 = 0;
    v9 = *(_OWORD *)v39;
    v10 = v42;
    *(_QWORD *)(v6 + 152) = v40;
    *(_OWORD *)(v6 + 136) = v9;
    v39[0] = 0;
    v39[1] = 0;
    v11 = v41;
    *(_QWORD *)(v6 + 176) = v10;
    *(_OWORD *)(v6 + 160) = v11;
    v40 = 0;
    v41 = 0uLL;
    v42 = 0;
    v12 = *(_OWORD *)v43;
    *(_QWORD *)(v6 + 200) = v44;
    *(_OWORD *)(v6 + 184) = v12;
    v43[0] = 0;
    v43[1] = 0;
    v44 = 0;
    *(_BYTE *)(v6 + 208) = 1;
  }
  *(_OWORD *)(v6 + 216) = v46;
  *(_QWORD *)(v6 + 232) = v47;
  sub_20AF4CAF4(v6 + 240, (uint64_t)v17);
  *v7 = off_24C40E1F8;
  *a1 = &off_24C411E78;
  a1[1] = v7;
  v13 = (_QWORD *)operator new();
  *v13 = &off_24C411F70;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = v7;
  a1[2] = v13;
  if (!v45)
    goto LABEL_20;
  if (SHIBYTE(v44) < 0)
  {
    operator delete(v43[0]);
    if ((SHIBYTE(v42) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v40) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_26;
    }
  }
  else if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete((void *)v41);
  if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v38) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v39[0]);
  if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v36) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)v37);
  if (SHIBYTE(v36) < 0)
  {
LABEL_28:
    operator delete(v35[0]);
    if (SHIBYTE(v34) < 0)
      goto LABEL_29;
LABEL_20:
    if (!v32)
      return sub_20AF4EA3C((uint64_t)v17);
    goto LABEL_21;
  }
LABEL_19:
  if ((SHIBYTE(v34) & 0x80000000) == 0)
    goto LABEL_20;
LABEL_29:
  operator delete((void *)v33);
  if (!v32)
    return sub_20AF4EA3C((uint64_t)v17);
LABEL_21:
  if (SHIBYTE(v31) < 0)
    operator delete((void *)__p);
  return sub_20AF4EA3C((uint64_t)v17);
}

void sub_20B21E064(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D170);
  _Unwind_Resume(a1);
}

void sub_20B21E07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  if (a44)
  {
    if (a43 < 0)
    {
      operator delete(__p);
      sub_20AF4EA3C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_20AF4EA3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B21E114(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C412428;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t ***sub_20B21E154(uint64_t ***a1)
{
  uint64_t **v2;
  uint64_t *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      sub_20B4311DC((uint64_t)v2, v3);
    MEMORY[0x20BD3583C](v2, 0x20C4093837F09);
  }
  return a1;
}

uint64_t *sub_20B21E1AC(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 40);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    sub_20B227BC0(v2 + 8, *(_QWORD *)(v2 + 16));
    MEMORY[0x20BD3583C](v2, 0x1020C401722722ELL);
  }
  return a1;
}

uint64_t sub_20B21E23C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B21E2A4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B21E30C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
}

uint64_t *sub_20B21E320(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v3;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v1 + 24))
    return (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 24))(*(_QWORD *)(v1 + 16));
  v3 = atomic_load((unsigned __int8 *)&qword_25463B220);
  if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B220))
    return &qword_25463B248;
  qword_25463B248 = 0;
  unk_25463B250 = 0;
  __cxa_guard_release(&qword_25463B220);
  return &qword_25463B248;
}

void sub_20B21E3A8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_20B21D7E4(*(_QWORD *)(a1 + 8), a2);
  *(_BYTE *)(a3 + 120) = 1;
}

uint64_t sub_20B21E3D4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
}

uint64_t sub_20B21E3E8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
}

void sub_20B21E3FC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _WORD *v6;
  __n128 v7;
  char *v8;
  char *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *__p[2];
  void *v26[2];
  uint64_t v27;
  unsigned __int8 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36[4];
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  char v45;
  _QWORD v46[3];
  void *v47;
  void *__dst;
  char *v49;
  void *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  char v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  char v60;
  char v61;

  v46[0] = &off_24C41C2C8;
  v46[1] = 1;
  v46[2] = &unk_24C41C418;
  v6 = operator new(0xAuLL);
  *(_QWORD *)v6 = 0;
  v6[4] = 0;
  v47 = v6;
  __dst = v6 + 5;
  v49 = (char *)(v6 + 5);
  v50 = 0;
  v51 = 0;
  v52 = 0;
  sub_20B227C60(__p, a2);
  LOBYTE(v26[1]) = 1;
  v37 = 0x500000001;
  v38 = 0;
  v39 = 1;
  v40 = 0;
  v7.n128_f64[0] = sub_20B227D6C((uint64_t)&v41, (uint64_t)__p);
  if (LOBYTE(v26[1]))
  {
    v8 = (char *)__p[0];
    if (__p[0])
    {
      v9 = (char *)__p[1];
      v10 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v11 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
          if (v11)
          {
            p_shared_owners = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldaxr(p_shared_owners);
            while (__stlxr(v13 - 1, p_shared_owners));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v7);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v9 -= 24;
        }
        while (v9 != v8);
        v10 = __p[0];
      }
      __p[1] = v8;
      operator delete(v10);
    }
  }
  LODWORD(__p[0]) = 1;
  sub_20B42DB24((uint64_t)&v47, (char *)__dst, (char *)__p, (char *)__p + 4, 4);
  sub_20B42B554(v46);
  sub_20B22FCE8((uint64_t)v46, (uint64_t)v36);
  *(_QWORD *)((char *)v47 + *((_QWORD *)v51 - 1) + 10) = (_BYTE *)__dst - ((_BYTE *)v47 + *((_QWORD *)v51 - 1)) - 18;
  v51 -= 8;
  if (((*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 320) + 24))(*(_QWORD *)(a1 + 320), v46, 1) & 1) != 0)
  {
    *(_BYTE *)(a3 + 120) = 1;
    if (!v45)
      goto LABEL_48;
    goto LABEL_32;
  }
  sub_20AF55B94((uint64_t)&v53, "failed to broadcast command(s) to clients");
  v61 = 1;
  sub_20B0B4C58(3u, &v53, (uint64_t)__p);
  if (v61)
  {
    if (!v60)
      goto LABEL_20;
    if (v59 < 0)
    {
      operator delete(v58);
      if ((v57 & 0x80000000) == 0)
      {
LABEL_20:
        if (!v55)
          goto LABEL_23;
LABEL_21:
        if (v54 < 0)
          operator delete((void *)v53);
        goto LABEL_23;
      }
    }
    else if ((v57 & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete(v56);
    if (!v55)
      goto LABEL_23;
    goto LABEL_21;
  }
LABEL_23:
  *(_OWORD *)a3 = *(_OWORD *)__p;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v35)
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v45)
      goto LABEL_48;
    goto LABEL_32;
  }
  *(_BYTE *)(a3 + 40) = 0;
  v14 = v28;
  if (v28)
  {
    *(_OWORD *)(a3 + 16) = *(_OWORD *)v26;
    *(_QWORD *)(a3 + 32) = v27;
    v26[1] = 0;
    v27 = 0;
    v26[0] = 0;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v34)
  {
    v15 = v31;
    *(_QWORD *)(a3 + 64) = v30;
    *(_OWORD *)(a3 + 48) = v29;
    v29 = 0uLL;
    *(_QWORD *)(a3 + 72) = v15;
    *(_OWORD *)(a3 + 80) = v32;
    *(_QWORD *)(a3 + 96) = v33;
    v30 = 0;
    v32 = 0uLL;
    v33 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (v14 && SHIBYTE(v27) < 0)
    operator delete(v26[0]);
  if (v45)
  {
LABEL_32:
    v16 = (char *)v43;
    if (v43)
    {
      v17 = v44;
      v18 = v43;
      if (v44 != v43)
      {
        do
        {
          v19 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          v17 -= 16;
        }
        while (v17 != v16);
        v18 = v43;
      }
      v44 = v16;
      operator delete(v18);
    }
    v22 = v41;
    if (v41)
    {
      v23 = (uint64_t)v42;
      v24 = v41;
      if (v42 != v41)
      {
        do
        {
          v23 -= 88;
          sub_20B228408(v23);
        }
        while ((void *)v23 != v22);
        v24 = v41;
      }
      v42 = v22;
      operator delete(v24);
    }
  }
LABEL_48:
  if (v50)
  {
    v51 = (char *)v50;
    operator delete(v50);
  }
  if (v47)
  {
    __dst = v47;
    operator delete(v47);
  }
}

void sub_20B21E7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;

  sub_20AECCDB4(v36 - 168);
  sub_20B2284F8(v35);
  sub_20B42B438(&a35);
  _Unwind_Resume(a1);
}

void sub_20B21E808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  sub_20B2284F8(v35);
  sub_20B42B438(&a35);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B21E85C(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p;
  char *v20;
  _QWORD *v21;

  __p = 0;
  v20 = 0;
  v21 = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      sub_20AEC60B8();
    v5 = 3 * a3;
    v6 = operator new(24 * a3);
    __p = v6;
    v20 = (char *)v6;
    v21 = &v6[v5];
    v7 = a2 + v5 * 8;
    do
    {
      v9 = *(_QWORD *)(a2 + 8);
      v8 = *(_QWORD *)(a2 + 16);
      *v6 = &off_24C411E78;
      v6[1] = v9;
      v6[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      a2 += 24;
      v6 += 3;
    }
    while (a2 != v7);
    v20 = (char *)v6;
  }
  sub_20B227C60(a1, (uint64_t *)&__p);
  v12 = (char *)__p;
  if (__p)
  {
    v13 = v20;
    v14 = __p;
    if (v20 != __p)
    {
      do
      {
        v15 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = __p;
    }
    v20 = v12;
    operator delete(v14);
  }
  return a1;
}

void sub_20B21E9A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0B8EC0((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B21E9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11)
{
  void *v12;
  void *v13;

  if (__p)
  {
    v12 = a11;
    v13 = __p;
    if (a11 != __p)
    {
      do
        v12 = (void *)sub_20B216B00((uint64_t)v12 - 24);
      while (v12 != __p);
      v13 = __p;
    }
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_20B21E9F8(uint64_t a1)
{
  char *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  v2 = (char *)operator new(0x108uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24C4130D0;
  v2[24] = *(_BYTE *)a1;
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 8);
  *((_DWORD *)v2 + 12) = *(_DWORD *)(a1 + 24);
  v2[56] = 0;
  v2[80] = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    v2[80] = 1;
  }
  v2[88] = 0;
  v2[232] = 0;
  if (*(_BYTE *)(a1 + 208))
  {
    *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 64);
    *((_QWORD *)v2 + 13) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    v3 = *(_OWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *((_OWORD *)v2 + 7) = v3;
    *((_QWORD *)v2 + 16) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *((_QWORD *)v2 + 19) = *(_QWORD *)(a1 + 128);
    *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    v4 = *(_OWORD *)(a1 + 136);
    *((_QWORD *)v2 + 22) = *(_QWORD *)(a1 + 152);
    *((_OWORD *)v2 + 10) = v4;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    v5 = *(_OWORD *)(a1 + 160);
    *((_QWORD *)v2 + 25) = *(_QWORD *)(a1 + 176);
    *(_OWORD *)(v2 + 184) = v5;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    v6 = *(_OWORD *)(a1 + 184);
    *((_QWORD *)v2 + 28) = *(_QWORD *)(a1 + 200);
    *((_OWORD *)v2 + 13) = v6;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 200) = 0;
    v2[232] = 1;
  }
  result = *(__n128 *)(a1 + 216);
  *((__n128 *)v2 + 15) = result;
  *((_QWORD *)v2 + 32) = *(_QWORD *)(a1 + 232);
  qword_25463B258 = (uint64_t)(v2 + 24);
  unk_25463B260 = v2;
  return result;
}

uint64_t sub_20B21EB38(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B21EBA0(_QWORD *a1, uint64_t a2, const void **a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v7;
  std::mutex *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  const void *v17;
  size_t v18;
  unsigned int v19;
  uint64_t *v20;
  int v21;
  const void *v22;
  size_t v23;
  size_t v24;
  int v25;
  int v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  unsigned __int8 v33;
  unint64_t *v34;
  unint64_t v35;
  char v36[8];
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40[23];
  __int16 v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a2 + 240);
  v8 = (std::mutex *)(v7 + 24);
  v9 = a5;
  if (a5)
  {
    v12 = *(uint64_t **)(v7 + 8);
    v10 = (uint64_t *)(v7 + 8);
    v11 = v12;
    if (!v12)
      goto LABEL_49;
  }
  else
  {
    std::mutex::lock((std::mutex *)(v7 + 24));
    v14 = *(_QWORD *)(a2 + 240);
    v15 = *(uint64_t **)(v14 + 8);
    v10 = (uint64_t *)(v14 + 8);
    v11 = v15;
    if (!v15)
      goto LABEL_49;
  }
  v16 = *((char *)a3 + 23);
  if (v16 >= 0)
    v17 = a3;
  else
    v17 = *a3;
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)a3 + 23);
  else
    v18 = (size_t)a3[1];
  v19 = *((unsigned __int16 *)a3 + 12);
  v20 = v10;
  do
  {
    v21 = *((char *)v11 + 55);
    if (v21 >= 0)
      v22 = v11 + 4;
    else
      v22 = (const void *)v11[4];
    if (v21 >= 0)
      v23 = *((unsigned __int8 *)v11 + 55);
    else
      v23 = v11[5];
    if (v18 >= v23)
      v24 = v23;
    else
      v24 = v18;
    v25 = memcmp(v22, v17, v24);
    if (v25)
    {
      if (v25 < 0)
        goto LABEL_12;
LABEL_25:
      v20 = v11;
      goto LABEL_13;
    }
    if (v23 != v18)
    {
      if (v23 < v18)
      {
LABEL_12:
        ++v11;
        goto LABEL_13;
      }
      goto LABEL_25;
    }
    if (*((unsigned __int16 *)v11 + 28) < v19)
      ++v11;
    else
      v20 = v11;
LABEL_13:
    v11 = (uint64_t *)*v11;
  }
  while (v11);
  if (v20 == v10)
    goto LABEL_49;
  v26 = *((char *)v20 + 55);
  if (v26 >= 0)
    v27 = v20 + 4;
  else
    v27 = (const void *)v20[4];
  if (v26 >= 0)
    v28 = *((unsigned __int8 *)v20 + 55);
  else
    v28 = v20[5];
  if (v28 >= v18)
    v29 = v18;
  else
    v29 = v28;
  v30 = memcmp(v17, v27, v29);
  if (v30)
  {
    if ((v30 & 0x80000000) == 0)
      goto LABEL_44;
LABEL_49:
    v33 = atomic_load((unsigned __int8 *)&qword_25463B228);
    if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_25463B228))
    {
      v36[0] = 2;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v41 = 270;
      strcpy(v40, "unknown client");
      v42 = 0;
      v43 = 0;
      v45 = 0;
      v46 = 0;
      v44 = 0;
      sub_20B21E9F8((uint64_t)v36);
      sub_20B0A0DB8((uint64_t)v36);
      __cxa_atexit((void (*)(void *))sub_20B21EB38, &qword_25463B258, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463B228);
    }
    v31 = unk_25463B260;
    *a1 = qword_25463B258;
    a1[1] = v31;
    if (v31)
      goto LABEL_51;
  }
  else
  {
    v32 = v18 >= v28;
    if (v18 == v28)
      v32 = v19 >= *((unsigned __int16 *)v20 + 28);
    if (!v32)
      goto LABEL_49;
LABEL_44:
    *a1 = v20[8];
    v31 = v20[9];
    a1[1] = v31;
    if (v31)
    {
LABEL_51:
      v34 = (unint64_t *)(v31 + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
  }
  if (!v9)
    std::mutex::unlock(v8);
}

void sub_20B21EE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;
  uint64_t v10;

  sub_20B0A0DB8((uint64_t)&a9);
  __cxa_guard_abort(&qword_25463B228);
  if (!v10)
    std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void sub_20B21EE50(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v8;
  __n128 v9;
  char *v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::mutex *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40[2];
  uint64_t v41;
  __int16 v42;
  void *__p[2];
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54[4];
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  void *v59;
  void *v60;
  void *v61;
  char *v62;
  char v63;
  _QWORD v64[3];
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;

  v64[0] = &off_24C41C2C8;
  v64[1] = 1;
  v64[2] = &unk_24C41C418;
  v8 = (char *)operator new(0xAuLL);
  *(_QWORD *)v8 = 0;
  *((_WORD *)v8 + 4) = 0;
  v65 = v8;
  v66 = v8 + 10;
  v67 = v8 + 10;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  sub_20B227C60(__p, a2);
  BYTE8(v44) = 1;
  v55 = 0x500000001;
  v56 = 0;
  v57 = 1;
  v58 = 0;
  v9.n128_f64[0] = sub_20B227D6C((uint64_t)&v59, (uint64_t)__p);
  if (BYTE8(v44))
  {
    v10 = (char *)__p[0];
    if (__p[0])
    {
      v11 = (char *)__p[1];
      v12 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(p_shared_owners);
            while (__stlxr(v15 - 1, p_shared_owners));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v9);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v11 -= 24;
        }
        while (v11 != v10);
        v12 = __p[0];
      }
      __p[1] = v10;
      operator delete(v12);
    }
  }
  LODWORD(__p[0]) = 1;
  sub_20B42DB24((uint64_t)&v65, v66, (char *)__p, (char *)__p + 4, 4);
  sub_20B42B554(v64);
  sub_20B22FCE8((uint64_t)v64, (uint64_t)v54);
  *(_QWORD *)&v65[*((_QWORD *)v69 - 1) + 10] = v66 - &v65[*((_QWORD *)v69 - 1)] - 18;
  v69 -= 8;
  v16 = (std::mutex *)(*(_QWORD *)(a1 + 240) + 24);
  std::mutex::lock(v16);
  v17 = *(_QWORD **)(a1 + 240);
  v20 = (_QWORD *)*v17;
  v18 = v17 + 1;
  v19 = v20;
  if (v20 != v18)
  {
    while (1)
    {
      v21 = v19[8];
      v23 = *(_QWORD *)(v21 + 8);
      v22 = *(_QWORD *)(v21 + 16);
      v24 = v23 == *(_QWORD *)a3 && v22 == *(_QWORD *)(a3 + 8);
      if (v24)
        break;
      v25 = (_QWORD *)v19[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v19[2];
          v24 = *v26 == (_QWORD)v19;
          v19 = v26;
        }
        while (!v24);
      }
      v19 = v26;
      if (v26 == v18)
        goto LABEL_28;
    }
  }
  if (v19 == v18)
  {
LABEL_28:
    sub_20B1E3530((unsigned __int8 *)a3, 0xDu, (uint64_t)"client not found", (uint64_t)__p);
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (v53)
    {
      *(_BYTE *)(a4 + 40) = 0;
      v27 = v46;
      if (v46)
      {
        *(_OWORD *)(a4 + 16) = v44;
        *(_QWORD *)(a4 + 32) = v45;
        v45 = 0;
        v44 = 0uLL;
        *(_BYTE *)(a4 + 40) = 1;
      }
      *(_BYTE *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 104) = 0;
      if (v52)
      {
        v28 = v49;
        *(_QWORD *)(a4 + 64) = v48;
        *(_OWORD *)(a4 + 48) = v47;
        v47 = 0uLL;
        *(_QWORD *)(a4 + 72) = v28;
        *(_OWORD *)(a4 + 80) = v50;
        *(_QWORD *)(a4 + 96) = v51;
        v48 = 0;
        v50 = 0uLL;
        v51 = 0;
        *(_BYTE *)(a4 + 104) = 1;
      }
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 120) = 0;
      if (v27 && SHIBYTE(v45) < 0)
        operator delete((void *)v44);
    }
    else
    {
      *(_BYTE *)(a4 + 120) = 0;
    }
    std::mutex::unlock(v16);
  }
  else
  {
    if (*((char *)v19 + 55) < 0)
    {
      sub_20AEC60F4(v40, (void *)v19[4], v19[5]);
    }
    else
    {
      *(_OWORD *)v40 = *((_OWORD *)v19 + 2);
      v41 = v19[6];
    }
    v42 = *((_WORD *)v19 + 28);
    std::mutex::unlock(v16);
    if (((*(uint64_t (**)(_QWORD, void **, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320), v40, v64, 1) & 1) != 0)
    {
      *(_BYTE *)(a4 + 120) = 1;
      if ((SHIBYTE(v41) & 0x80000000) == 0)
        goto LABEL_52;
      goto LABEL_51;
    }
    sub_20B1E3530((unsigned __int8 *)a3, 3u, 0, (uint64_t)__p);
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (v53)
    {
      *(_BYTE *)(a4 + 40) = 0;
      v29 = v46;
      if (v46)
      {
        *(_OWORD *)(a4 + 16) = v44;
        *(_QWORD *)(a4 + 32) = v45;
        v45 = 0;
        v44 = 0uLL;
        *(_BYTE *)(a4 + 40) = 1;
      }
      *(_BYTE *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 104) = 0;
      if (v52)
      {
        v30 = v49;
        *(_QWORD *)(a4 + 64) = v48;
        *(_OWORD *)(a4 + 48) = v47;
        v47 = 0uLL;
        *(_QWORD *)(a4 + 72) = v30;
        *(_OWORD *)(a4 + 80) = v50;
        *(_QWORD *)(a4 + 96) = v51;
        v48 = 0;
        v50 = 0uLL;
        v51 = 0;
        *(_BYTE *)(a4 + 104) = 1;
      }
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 120) = 0;
      if (v29 && SHIBYTE(v45) < 0)
        operator delete((void *)v44);
      if (SHIBYTE(v41) < 0)
        goto LABEL_51;
    }
    else
    {
      *(_BYTE *)(a4 + 120) = 0;
      if (SHIBYTE(v41) < 0)
LABEL_51:
        operator delete(v40[0]);
    }
  }
LABEL_52:
  if (v63)
  {
    v31 = (char *)v61;
    if (v61)
    {
      v32 = v62;
      v33 = v61;
      if (v62 != v61)
      {
        do
        {
          v34 = (std::__shared_weak_count *)*((_QWORD *)v32 - 1);
          if (v34)
          {
            v35 = (unint64_t *)&v34->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          v32 -= 16;
        }
        while (v32 != v31);
        v33 = v61;
      }
      v62 = v31;
      operator delete(v33);
    }
    v37 = v59;
    if (v59)
    {
      v38 = (uint64_t)v60;
      v39 = v59;
      if (v60 != v59)
      {
        do
        {
          v38 -= 88;
          sub_20B228408(v38);
        }
        while ((void *)v38 != v37);
        v39 = v59;
      }
      v60 = v37;
      operator delete(v39);
    }
  }
  if (v68)
  {
    v69 = v68;
    operator delete(v68);
  }
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
}

void sub_20B21F390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  std::mutex *v15;
  uint64_t v16;

  std::mutex::unlock(v15);
  sub_20B2284F8(v14);
  sub_20B42B438((_QWORD *)(v16 - 152));
  _Unwind_Resume(a1);
}

void sub_20B21F3E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20B2284F8(v1);
  sub_20B42B438((_QWORD *)(v2 - 152));
  _Unwind_Resume(a1);
}

void sub_20B21F404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_20B21F450((char **)va);
  sub_20B42B438((_QWORD *)(v6 - 152));
  _Unwind_Resume(a1);
}

void sub_20B21F420(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B42B438((_QWORD *)(v1 - 152));
  _Unwind_Resume(a1);
}

char **sub_20B21F450(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*((_BYTE *)a1 + 24))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 != v2)
      {
        do
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = *a1;
      }
      a1[1] = v2;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_20B21F4F0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B21F500(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B21F510(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v3;
  v6 = *(_QWORD *)(a2 + 32);
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 56))(v2, v5);
}

void sub_20B21F54C(uint64_t a1, const void **a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string v12;
  std::string __dst;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  char v20;
  _BYTE v21[16];
  void *__p;
  char v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (!*(_BYTE *)(a1 + 200))
    return;
  sub_20B21EBA0(&v31, *(_QWORD *)a1, a2, 0, 0);
  v7 = v31;
  sub_20B5287D4(a3, &v12);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&__dst, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  else
    __dst = v12;
  v14 = 1;
  LOBYTE(v15) = 0;
  v19 = 0;
  v20 = 1;
  sub_20B0BAE8C((uint64_t)v21, a4, (__int128 *)&__dst);
  v8 = *(_QWORD *)(a1 + 192);
  if (!v8)
    sub_20AECABA4();
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v8 + 48))(v8, v7, v21);
  if (v30)
  {
    if (!v29)
      goto LABEL_10;
    if (v28 < 0)
    {
      operator delete(v27);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_10:
        if (!v24)
          goto LABEL_13;
LABEL_11:
        if (v23 < 0)
          operator delete(__p);
        goto LABEL_13;
      }
    }
    else if ((v26 & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v25);
    if (!v24)
      goto LABEL_13;
    goto LABEL_11;
  }
LABEL_13:
  if (!v20)
    goto LABEL_20;
  if (!v19)
    goto LABEL_17;
  if (v18 < 0)
  {
    operator delete(v17);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_17:
      if (v14)
        goto LABEL_18;
      goto LABEL_20;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(v15);
  if (v14)
  {
LABEL_18:
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
LABEL_20:
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  v9 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B21F740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (a15 < 0)
    operator delete(__p);
  sub_20B21EB38(v29 - 64);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B21F798@<X0>(int *a1@<X0>, unsigned __int16 *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, char *a10, _OWORD *a11)
{
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  std::__shared_count v31;
  std::__shared_weak_count *shared_owners;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  std::__shared_count_vtbl *v37;
  const void *v38;
  size_t v39;
  size_t v40;
  const void *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  char *v57;
  __int128 v58;
  char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  void *v66;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t *v88;
  unint64_t *v89;
  unint64_t v90;
  __int128 *v91;
  std::__shared_count *v92;
  _QWORD *v93;
  uint64_t v94;
  std::__shared_count *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  char *v100;
  char *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  std::__shared_count *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  std::__shared_count *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  unint64_t *v130;
  _QWORD *v131;
  uint64_t *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *result;
  uint64_t v143;
  char v144;
  unsigned int v146;
  int v147;
  std::__shared_count v148;
  void *v149;
  char v150;
  char v151;
  unsigned __int16 v152;
  _QWORD v153[3];
  _QWORD *v154;
  char v155;
  _QWORD v156[3];
  _QWORD *v157;
  _QWORD v158[3];
  _QWORD *v159;
  _QWORD v160[3];
  _QWORD *v161;
  _QWORD v162[3];
  _QWORD *v163;
  __int128 v164;
  _QWORD v165[3];
  _QWORD *v166;
  __int128 v167;
  void *__p;
  std::__shared_weak_count *v169;
  _QWORD *v170;
  std::__shared_weak_count *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  std::__shared_count *v174;
  _QWORD v175[3];
  _QWORD *v176;
  std::__shared_count v177;
  std::__shared_count *v178;
  _BYTE v179[24];
  _BYTE *v180;
  uint64_t v181;

  v181 = *MEMORY[0x24BDAC8D0];
  v19 = operator new();
  v146 = *a2;
  v147 = *a1;
  v20 = (_QWORD *)a3[3];
  if (v20)
  {
    if (v20 == a3)
    {
      v163 = v162;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v162);
    }
    else
    {
      v163 = (_QWORD *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    v163 = 0;
  }
  v21 = (_QWORD *)a4[3];
  if (v21)
  {
    if (v21 == a4)
    {
      v161 = v160;
      (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v160);
    }
    else
    {
      v161 = (_QWORD *)a4[3];
      a4[3] = 0;
    }
  }
  else
  {
    v161 = 0;
  }
  v22 = (_QWORD *)a5[3];
  if (v22)
  {
    if (v22 == a5)
    {
      v159 = v158;
      (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v158);
    }
    else
    {
      v159 = (_QWORD *)a5[3];
      a5[3] = 0;
    }
  }
  else
  {
    v159 = 0;
  }
  v23 = (_QWORD *)a6[3];
  if (v23)
  {
    if (v23 == a6)
    {
      v157 = v156;
      (*(void (**)(_QWORD *, _QWORD *))(*a6 + 24))(a6, v156);
    }
    else
    {
      v157 = (_QWORD *)a6[3];
      a6[3] = 0;
    }
  }
  else
  {
    v157 = 0;
  }
  LOBYTE(v153[0]) = 0;
  v155 = 0;
  if (*(_BYTE *)(a8 + 32))
  {
    v24 = *(_QWORD *)(a8 + 24);
    if (v24)
    {
      if (v24 == a8)
      {
        v154 = v153;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a8 + 24))(a8, v153);
      }
      else
      {
        v154 = *(_QWORD **)(a8 + 24);
        *(_QWORD *)(a8 + 24) = 0;
      }
    }
    else
    {
      v154 = 0;
    }
    v155 = 1;
  }
  v25 = *a10;
  *(_QWORD *)v19 = &off_24C412288;
  *(_OWORD *)(v19 + 8) = *a11;
  *(_QWORD *)(v19 + 24) = v19;
  *(_BYTE *)(v19 + 32) = 1;
  if (v163)
  {
    if (v163 == v162)
    {
      *(_QWORD *)(v19 + 64) = v19 + 40;
      (*(void (**)(_QWORD *, uint64_t))(v162[0] + 24))(v162, v19 + 40);
    }
    else
    {
      *(_QWORD *)(v19 + 64) = v163;
      v163 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v19 + 64) = 0;
  }
  if (v161)
  {
    if (v161 == v160)
    {
      *(_QWORD *)(v19 + 96) = v19 + 72;
      (*(void (**)(_QWORD *, uint64_t))(v160[0] + 24))(v160, v19 + 72);
    }
    else
    {
      *(_QWORD *)(v19 + 96) = v161;
      v161 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v19 + 96) = 0;
  }
  v26 = (uint64_t)v159;
  if (!v159)
    goto LABEL_41;
  if (v159 != v158)
  {
    v26 = (*(uint64_t (**)(void))(*v159 + 16))();
LABEL_41:
    *(_QWORD *)(v19 + 128) = v26;
    goto LABEL_43;
  }
  *(_QWORD *)(v19 + 128) = v19 + 104;
  (*(void (**)(_QWORD *, uint64_t))(v158[0] + 24))(v158, v19 + 104);
LABEL_43:
  v27 = (uint64_t)v157;
  if (!v157)
  {
LABEL_46:
    *(_QWORD *)(v19 + 160) = v27;
    goto LABEL_48;
  }
  if (v157 != v156)
  {
    v27 = (*(uint64_t (**)(void))(*v157 + 16))();
    goto LABEL_46;
  }
  *(_QWORD *)(v19 + 160) = v19 + 136;
  (*(void (**)(_QWORD *, uint64_t))(v156[0] + 24))(v156, v19 + 136);
LABEL_48:
  v28 = (void **)(v19 + 168);
  if (*(_BYTE *)(a7 + 24))
  {
    sub_20AF43774((_QWORD *)(v19 + 168), a7);
    v144 = v25;
    sub_20B229190(&__p);
    v29 = (std::__shared_weak_count *)__p;
    v30 = v169;
    if (__p == v169)
    {
      if (!__p)
        goto LABEL_128;
      goto LABEL_98;
    }
    do
    {
      v177 = v29->std::__shared_count;
      v31 = v177;
      shared_owners = (std::__shared_weak_count *)v177.__shared_owners_;
      if (v177.__shared_owners_)
      {
        v33 = (unint64_t *)(v177.__shared_owners_ + 8);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      v35 = *(_QWORD **)(v19 + 168);
      v36 = *(_QWORD **)(v19 + 176);
      v148 = v31;
      if (v35 != v36)
      {
        v37 = v31.__vftable;
        while (1)
        {
          v38 = (const void *)(*((uint64_t (**)(std::__shared_count_vtbl *))v37->~__shared_count + 2))(v37);
          v40 = v39;
          v41 = (const void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v35 + 16))(*v35);
          if (v40 == v42 && !memcmp(v38, v41, v40))
            break;
          v35 += 2;
          if (v35 == v36)
            goto LABEL_62;
        }
      }
      if (v35 == v36)
      {
LABEL_62:
        v44 = *(char **)(v19 + 176);
        v43 = *(_QWORD *)(v19 + 184);
        if ((unint64_t)v44 >= v43)
        {
          v48 = (char *)*v28;
          v49 = (v44 - (_BYTE *)*v28) >> 4;
          v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 60)
            sub_20AEC60B8();
          v51 = v43 - (_QWORD)v48;
          if (v51 >> 3 > v50)
            v50 = v51 >> 3;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
            v52 = 0xFFFFFFFFFFFFFFFLL;
          else
            v52 = v50;
          if (v52 >> 60)
            sub_20AEC60CC();
          v53 = (char *)operator new(16 * v52);
          v54 = &v53[16 * v49];
          *(std::__shared_count *)v54 = v148;
          if (shared_owners)
          {
            p_shared_owners = (unint64_t *)&shared_owners->__shared_owners_;
            do
              v56 = __ldxr(p_shared_owners);
            while (__stxr(v56 + 1, p_shared_owners));
            v48 = *(char **)(v19 + 168);
            v44 = *(char **)(v19 + 176);
          }
          v57 = &v53[16 * v52];
          v47 = v54 + 16;
          if (v44 == v48)
          {
            *(_QWORD *)(v19 + 168) = v54;
            *(_QWORD *)(v19 + 176) = v47;
            *(_QWORD *)(v19 + 184) = v57;
          }
          else
          {
            do
            {
              v58 = *((_OWORD *)v44 - 1);
              v44 -= 16;
              *((_OWORD *)v54 - 1) = v58;
              v54 -= 16;
              *(_QWORD *)v44 = 0;
              *((_QWORD *)v44 + 1) = 0;
            }
            while (v44 != v48);
            v48 = *(char **)(v19 + 168);
            v59 = *(char **)(v19 + 176);
            *(_QWORD *)(v19 + 168) = v54;
            *(_QWORD *)(v19 + 176) = v47;
            *(_QWORD *)(v19 + 184) = v57;
            while (v59 != v48)
            {
              v60 = (std::__shared_weak_count *)*((_QWORD *)v59 - 1);
              if (v60)
              {
                v61 = (unint64_t *)&v60->__shared_owners_;
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 - 1, v61));
                if (!v62)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
              v59 -= 16;
            }
          }
          if (v48)
            operator delete(v48);
        }
        else
        {
          *(_QWORD *)v44 = v148.__vftable;
          *((_QWORD *)v44 + 1) = shared_owners;
          if (shared_owners)
          {
            v45 = (unint64_t *)&shared_owners->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          v47 = v44 + 16;
        }
        *(_QWORD *)(v19 + 176) = v47;
        shared_owners = (std::__shared_weak_count *)v177.__shared_owners_;
      }
      if (shared_owners)
      {
        v63 = (unint64_t *)&shared_owners->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
          std::__shared_weak_count::__release_weak(shared_owners);
        }
      }
      v29 = (std::__shared_weak_count *)((char *)v29 + 16);
    }
    while (v29 != v30);
    v29 = (std::__shared_weak_count *)__p;
    v25 = v144;
    if (__p)
    {
LABEL_98:
      v65 = v169;
      v66 = v29;
      if (v169 != v29)
      {
        do
        {
          shared_weak_owners = (std::__shared_weak_count *)v65[-1].__shared_weak_owners_;
          if (shared_weak_owners)
          {
            v68 = (unint64_t *)&shared_weak_owners->__shared_owners_;
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
              std::__shared_weak_count::__release_weak(shared_weak_owners);
            }
          }
          v65 = (std::__shared_weak_count *)((char *)v65 - 16);
        }
        while (v65 != v29);
        v66 = __p;
      }
      v169 = v29;
      operator delete(v66);
    }
  }
  else
  {
    v70 = operator new(0x28uLL);
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = &off_24C4134E8;
    *v70 = &off_24C3FED48;
    *((_DWORD *)v70 + 8) = 0;
    __p = v70 + 3;
    v169 = (std::__shared_weak_count *)v70;
    v177 = (std::__shared_count)0;
    v71 = (std::__shared_weak_count *)operator new(0x20uLL);
    v71->__shared_owners_ = 0;
    v71->__shared_weak_owners_ = 0;
    v71[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C413188;
    v71->__vftable = (std::__shared_weak_count_vtbl *)&off_24C412CF8;
    v170 = &v71[1].__vftable;
    v171 = v71;
    v172 = 0;
    v173 = 0;
    sub_20AFF4C9C((_QWORD *)(v19 + 168), &__p, 2uLL);
    v72 = v171;
    if (v171)
    {
      v73 = (unint64_t *)&v171->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = v169;
    if (v169)
    {
      v76 = (unint64_t *)&v169->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    v78 = v173;
    if (v173)
    {
      v79 = (unint64_t *)&v173->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    v81 = (std::__shared_weak_count *)v177.__shared_owners_;
    if (v177.__shared_owners_)
    {
      v82 = (unint64_t *)(v177.__shared_owners_ + 8);
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
  }
LABEL_128:
  *(_BYTE *)(v19 + 192) = 0;
  *(_BYTE *)(v19 + 224) = 0;
  if (v155)
  {
    if (v154)
    {
      if (v154 == v153)
      {
        *(_QWORD *)(v19 + 216) = v19 + 192;
        (*(void (**)(_QWORD *))(v153[0] + 24))(v153);
      }
      else
      {
        *(_QWORD *)(v19 + 216) = v154;
        v154 = 0;
      }
    }
    else
    {
      *(_QWORD *)(v19 + 216) = 0;
    }
    *(_BYTE *)(v19 + 224) = 1;
  }
  *(_BYTE *)(v19 + 232) = v25;
  v84 = (char *)operator new(0x70uLL);
  *((_QWORD *)v84 + 1) = 0;
  *((_QWORD *)v84 + 2) = 0;
  *(_QWORD *)v84 = &off_24C412D48;
  *((_QWORD *)v84 + 4) = 0;
  *((_QWORD *)v84 + 3) = v84 + 32;
  *((_QWORD *)v84 + 5) = 0;
  *((_QWORD *)v84 + 6) = 850045863;
  *(_OWORD *)(v84 + 56) = 0u;
  *(_OWORD *)(v84 + 72) = 0u;
  *(_OWORD *)(v84 + 88) = 0u;
  *((_QWORD *)v84 + 13) = 0;
  *(_QWORD *)(v19 + 240) = v84 + 24;
  *(_QWORD *)(v19 + 248) = v84;
  *(_QWORD *)(v19 + 256) = v19;
  *(_BYTE *)(v19 + 264) = 1;
  v85 = v19 + 272;
  if (v159)
  {
    if (v159 == v158)
    {
      *(_QWORD *)(v19 + 296) = v85;
      (*(void (**)(_QWORD *, uint64_t))(v158[0] + 24))(v158, v19 + 272);
      v84 = *(char **)(v19 + 248);
      v87 = (_QWORD *)(v19 + 304);
      v88 = (uint64_t *)(v19 + 312);
      *(_QWORD *)(v19 + 304) = *(_QWORD *)(v19 + 240);
      *(_QWORD *)(v19 + 312) = v84;
      if (!v84)
        goto LABEL_142;
      goto LABEL_140;
    }
    v86 = &v159;
    *(_QWORD *)(v19 + 296) = v159;
  }
  else
  {
    v86 = (_QWORD *)(v19 + 296);
  }
  *v86 = 0;
  v87 = (_QWORD *)(v19 + 304);
  v88 = (uint64_t *)(v19 + 312);
  *(_QWORD *)(v19 + 304) = v84 + 24;
  *(_QWORD *)(v19 + 312) = v84;
LABEL_140:
  v89 = (unint64_t *)(v84 + 8);
  do
    v90 = __ldxr(v89);
  while (__stxr(v90 + 1, v89));
LABEL_142:
  v91 = (__int128 *)(v19 + 256);
  *(_QWORD *)(v19 + 320) = 0;
  if (v147)
  {
    sub_20B2293B0((uint64_t)&__p, v19 + 24);
    v174 = 0;
    v92 = (std::__shared_count *)operator new(0xE0uLL);
    v92->__vftable = (std::__shared_count_vtbl *)&off_24C412D98;
    sub_20B22B450((uint64_t)&v92->__shared_owners_, (uint64_t)&__p);
    v174 = v92;
    v164 = *v91;
    v93 = v165;
    v94 = *(_QWORD *)(v19 + 296);
    if (v94)
    {
      if (v94 == v85)
      {
        v166 = v165;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v85 + 24))(v19 + 272, v165);
LABEL_154:
        v97 = *v88;
        *(_QWORD *)&v167 = *v87;
        *((_QWORD *)&v167 + 1) = v97;
        if (v97)
        {
          v98 = (unint64_t *)(v97 + 8);
          do
            v99 = __ldxr(v98);
          while (__stxr(v99 + 1, v98));
        }
        v176 = 0;
        v100 = (char *)operator new(0x48uLL);
        v101 = v100;
        *(_QWORD *)v100 = &off_24C412E18;
        *(_OWORD *)(v100 + 8) = v164;
        if (v166)
        {
          if (v166 == v165)
          {
            *((_QWORD *)v100 + 6) = v100 + 24;
            (*(void (**)(_QWORD *))(v165[0] + 24))(v165);
          }
          else
          {
            *((_QWORD *)v100 + 6) = v166;
            v166 = 0;
          }
        }
        else
        {
          *((_QWORD *)v100 + 6) = 0;
        }
        *(_OWORD *)(v101 + 56) = v167;
        v167 = 0uLL;
        v176 = v101;
        v102 = (_QWORD *)operator new();
        if (v174)
        {
          if (v174 == (std::__shared_count *)&v172)
          {
            v178 = &v177;
            (*(void (**)(uint64_t *, std::__shared_count *))(v172 + 24))(&v172, &v177);
          }
          else
          {
            v178 = v174;
            v174 = 0;
          }
        }
        else
        {
          v178 = 0;
        }
        v103 = v175;
        v104 = v179;
        if (v176)
        {
          if (v176 == v175)
          {
            v180 = v179;
            (*(void (**)(_QWORD *, _BYTE *))(v175[0] + 24))(v175, v179);
          }
          else
          {
            v180 = v176;
            v176 = 0;
          }
        }
        else
        {
          v180 = 0;
        }
        LOBYTE(v149) = 0;
        v151 = 0;
        v152 = v146;
        *v102 = off_24C41C6B8;
        sub_20B42EF70(&v152, &v177, (uint64_t)&v149, v102 + 1);
        if (v151 && v150 < 0)
          operator delete(v149);
        if (v180 == v179)
        {
          v105 = 4;
        }
        else
        {
          if (!v180)
            goto LABEL_180;
          v105 = 5;
          v104 = v180;
        }
        (*(void (**)(_QWORD *))(*v104 + 8 * v105))(v104);
LABEL_180:
        v106 = v178;
        if (v178 == &v177)
        {
          v107 = 4;
          v106 = &v177;
        }
        else
        {
          if (!v178)
            goto LABEL_185;
          v107 = 5;
        }
        (*((void (**)(void))&v106->~__shared_count + v107))();
LABEL_185:
        v108 = *(_QWORD *)(v19 + 320);
        *(_QWORD *)(v19 + 320) = v102;
        if (v108)
          (*(void (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);
        if (v176 == v175)
        {
          v109 = 4;
        }
        else
        {
          if (!v176)
            goto LABEL_192;
          v109 = 5;
          v103 = v176;
        }
        (*(void (**)(_QWORD *))(*v103 + 8 * v109))(v103);
LABEL_192:
        v110 = (uint64_t *)v174;
        if (v174 == (std::__shared_count *)&v172)
        {
          v111 = 4;
          v110 = &v172;
        }
        else
        {
          if (!v174)
          {
LABEL_197:
            v112 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
            if (!*((_QWORD *)&v167 + 1))
              goto LABEL_246;
            v113 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
            do
              v114 = __ldaxr(v113);
            while (__stlxr(v114 - 1, v113));
            goto LABEL_245;
          }
          v111 = 5;
        }
        (*(void (**)(void))(*v110 + 8 * v111))();
        goto LABEL_197;
      }
      v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v94 + 16))(v94);
    }
    v166 = (_QWORD *)v94;
    goto LABEL_154;
  }
  sub_20B2293B0((uint64_t)&__p, v19 + 24);
  v174 = 0;
  v95 = (std::__shared_count *)operator new(0xE0uLL);
  v95->__vftable = (std::__shared_count_vtbl *)&off_24C412D98;
  sub_20B22B450((uint64_t)&v95->__shared_owners_, (uint64_t)&__p);
  v174 = v95;
  v164 = *v91;
  v93 = v165;
  v96 = *(_QWORD *)(v19 + 296);
  if (!v96)
    goto LABEL_150;
  if (v96 != v85)
  {
    v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 16))(v96);
LABEL_150:
    v166 = (_QWORD *)v96;
    goto LABEL_202;
  }
  v166 = v165;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v85 + 24))(v19 + 272, v165);
LABEL_202:
  v115 = *v88;
  *(_QWORD *)&v167 = *v87;
  *((_QWORD *)&v167 + 1) = v115;
  if (v115)
  {
    v116 = (unint64_t *)(v115 + 8);
    do
      v117 = __ldxr(v116);
    while (__stxr(v117 + 1, v116));
  }
  v176 = 0;
  v118 = (char *)operator new(0x48uLL);
  v119 = v118;
  *(_QWORD *)v118 = &off_24C412E18;
  *(_OWORD *)(v118 + 8) = v164;
  if (v166)
  {
    if (v166 == v165)
    {
      *((_QWORD *)v118 + 6) = v118 + 24;
      (*(void (**)(_QWORD *))(v165[0] + 24))(v165);
    }
    else
    {
      *((_QWORD *)v118 + 6) = v166;
      v166 = 0;
    }
  }
  else
  {
    *((_QWORD *)v118 + 6) = 0;
  }
  *(_OWORD *)(v119 + 56) = v167;
  v167 = 0uLL;
  v176 = v119;
  v120 = (_QWORD *)operator new();
  if (v174)
  {
    if (v174 == (std::__shared_count *)&v172)
    {
      v178 = &v177;
      (*(void (**)(uint64_t *, std::__shared_count *))(v172 + 24))(&v172, &v177);
    }
    else
    {
      v178 = v174;
      v174 = 0;
    }
  }
  else
  {
    v178 = 0;
  }
  v121 = v175;
  v122 = v179;
  if (v176)
  {
    if (v176 == v175)
    {
      v180 = v179;
      (*(void (**)(_QWORD *, _BYTE *))(v175[0] + 24))(v175, v179);
    }
    else
    {
      v180 = v176;
      v176 = 0;
    }
  }
  else
  {
    v180 = 0;
  }
  sub_20B42E860(v120, v146, &v177);
  if (v180 == v179)
  {
    v123 = 4;
  }
  else
  {
    if (!v180)
      goto LABEL_225;
    v123 = 5;
    v122 = v180;
  }
  (*(void (**)(_QWORD *))(*v122 + 8 * v123))(v122);
LABEL_225:
  v124 = v178;
  if (v178 == &v177)
  {
    v125 = 4;
    v124 = &v177;
  }
  else
  {
    if (!v178)
      goto LABEL_230;
    v125 = 5;
  }
  (*((void (**)(void))&v124->~__shared_count + v125))();
LABEL_230:
  v126 = *(_QWORD *)(v19 + 320);
  *(_QWORD *)(v19 + 320) = v120;
  if (v126)
    (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  if (v176 == v175)
  {
    v127 = 4;
  }
  else
  {
    if (!v176)
      goto LABEL_237;
    v127 = 5;
    v121 = v176;
  }
  (*(void (**)(_QWORD *))(*v121 + 8 * v127))(v121);
LABEL_237:
  v128 = (uint64_t *)v174;
  if (v174 == (std::__shared_count *)&v172)
  {
    v129 = 4;
    v128 = &v172;
    goto LABEL_241;
  }
  if (v174)
  {
    v129 = 5;
LABEL_241:
    (*(void (**)(void))(*v128 + 8 * v129))();
  }
  v112 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
  if (!*((_QWORD *)&v167 + 1))
    goto LABEL_246;
  v130 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
  do
    v114 = __ldaxr(v130);
  while (__stlxr(v114 - 1, v130));
LABEL_245:
  if (!v114)
  {
    ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
    std::__shared_weak_count::__release_weak(v112);
    v131 = v166;
    if (v166 != v165)
      goto LABEL_247;
LABEL_250:
    v133 = 4;
    v132 = a9;
    goto LABEL_251;
  }
LABEL_246:
  v131 = v166;
  if (v166 == v165)
    goto LABEL_250;
LABEL_247:
  v132 = a9;
  if (!v131)
    goto LABEL_252;
  v133 = 5;
  v93 = v131;
LABEL_251:
  (*(void (**)(_QWORD *))(*v93 + 8 * v133))(v93);
LABEL_252:
  sub_20B22BD4C((uint64_t)&__p);
  *v132 = v19;
  if (!v155)
    goto LABEL_258;
  v134 = v154;
  if (v154 == v153)
  {
    v135 = 4;
    v134 = v153;
  }
  else
  {
    if (!v154)
      goto LABEL_258;
    v135 = 5;
  }
  (*(void (**)(void))(*v134 + 8 * v135))();
LABEL_258:
  v136 = v157;
  if (v157 == v156)
  {
    v137 = 4;
    v136 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_263;
    v137 = 5;
  }
  (*(void (**)(void))(*v136 + 8 * v137))();
LABEL_263:
  v138 = v159;
  if (v159 == v158)
  {
    v139 = 4;
    v138 = v158;
  }
  else
  {
    if (!v159)
      goto LABEL_268;
    v139 = 5;
  }
  (*(void (**)(void))(*v138 + 8 * v139))();
LABEL_268:
  v140 = v161;
  if (v161 == v160)
  {
    v141 = 4;
    v140 = v160;
  }
  else
  {
    if (!v161)
      goto LABEL_273;
    v141 = 5;
  }
  (*(void (**)(void))(*v140 + 8 * v141))();
LABEL_273:
  result = v163;
  if (v163 == v162)
  {
    v143 = 4;
    result = v162;
  }
  else
  {
    if (!v163)
      return result;
    v143 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v143))();
}

void sub_20B220804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B220C20(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B220C58(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t *sub_20B220CA0(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v3;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v1 + 16))
    return (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 16))(*(_QWORD *)(v1 + 8));
  v3 = atomic_load((unsigned __int8 *)&qword_25463B240);
  if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B240))
    return &qword_25463B288;
  qword_25463B288 = 0;
  unk_25463B290 = 0;
  __cxa_guard_release(&qword_25463B240);
  return &qword_25463B288;
}

uint64_t *sub_20B220D28(uint64_t a1)
{
  unsigned __int8 v2;

  if (*(_BYTE *)(a1 + 16))
    return (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v2 = atomic_load((unsigned __int8 *)&qword_25463B240);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_25463B240))
    return &qword_25463B288;
  qword_25463B288 = 0;
  unk_25463B290 = 0;
  __cxa_guard_release(&qword_25463B240);
  return &qword_25463B288;
}

void sub_20B220DAC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_20B21EE50(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

void sub_20B220DB4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_20B21E3FC(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20B220DBC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
}

uint64_t sub_20B220DD0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
}

uint64_t sub_20B220DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v3;
  v6 = *(_QWORD *)(a2 + 32);
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 56))(v2, v5);
}

_QWORD *sub_20B220E24(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *a1 = &off_24C412288;
  v2 = a1[40];
  a1[40] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[39];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_7:
    v6 = a1 + 34;
    v7 = (_QWORD *)a1[37];
    if (v7 != a1 + 34)
      goto LABEL_8;
LABEL_11:
    v8 = 4;
    v7 = v6;
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  v6 = a1 + 34;
  v7 = (_QWORD *)a1[37];
  if (v7 == a1 + 34)
    goto LABEL_11;
LABEL_8:
  if (v7)
  {
    v8 = 5;
LABEL_12:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  v9 = (std::__shared_weak_count *)a1[31];
  if (!v9)
    goto LABEL_17;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    sub_20B22BD4C((uint64_t)(a1 + 3));
    return a1;
  }
  else
  {
LABEL_17:
    sub_20B22BD4C((uint64_t)(a1 + 3));
    return a1;
  }
}

void sub_20B220F38(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *a1 = &off_24C412288;
  v2 = a1[40];
  a1[40] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[39];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = a1 + 34;
    v7 = (_QWORD *)a1[37];
    if (v7 != a1 + 34)
      goto LABEL_8;
  }
  else
  {
LABEL_7:
    v6 = a1 + 34;
    v7 = (_QWORD *)a1[37];
    if (v7 != a1 + 34)
    {
LABEL_8:
      if (!v7)
      {
LABEL_13:
        v9 = (std::__shared_weak_count *)a1[31];
        if (v9)
        {
          v10 = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        sub_20B22BD4C((uint64_t)(a1 + 3));
        JUMPOUT(0x20BD3583CLL);
      }
      v8 = 5;
LABEL_12:
      (*(void (**)(void))(*v7 + 8 * v8))();
      goto LABEL_13;
    }
  }
  v8 = 4;
  v7 = v6;
  goto LABEL_12;
}

void **sub_20B221044(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 17) < 0)
          operator delete(*(v3 - 5));
        v3 -= 5;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20B2210B8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B2210DC(uint64_t result)
{
  uint64_t **v1;
  uint64_t *v2;

  v1 = *(uint64_t ***)(result + 24);
  if (v1)
  {
    v2 = *v1;
    *v1 = 0;
    if (v2)
      sub_20B4311DC((uint64_t)v1, v2);
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B221130(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit11concurrency17NodeTaskSchedulerEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit11concurrency17NodeTaskSchedulerEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit11concurrency17NodeTaskSchedulerEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit11concurrency17NodeTaskSchedulerEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B2211A4(uint64_t a1)
{
  sub_20B227A88(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B2211CC(uint64_t a1)
{
  sub_20B2278A4(a1);
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B2211F0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C4123B8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B221230(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C4123B8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B221280(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20B221290(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C4123F0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20B2212C8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C4123F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B221310(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C412428;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C412428;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20B2213E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B221410(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C412428;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B221460(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20B221470(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C412460;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20B2214A8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C412460;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B2214F0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20B221580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B221598(uint64_t a1)
{
  sub_20B223AF4(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B2215BC(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  std::mutex **v32;
  uint64_t **v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t **v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count_vtbl *v56;
  std::__shared_weak_count_vtbl *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count_vtbl *v60;
  std::__shared_weak_count_vtbl *v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  std::__shared_weak_count *v74;
  __int128 v75;
  uint64_t v76;
  __int128 *v77;
  _BYTE v78[24];
  _BYTE *v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  if (a1[18])
  {
    v4 = (std::__shared_weak_count *)operator new(0x40uLL);
    v5 = v4;
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__shared_weak_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F3C38;
    v7 = (uint64_t)a2[1];
    v4[1].__vftable = *a2;
    v8 = &v4[1].__vftable;
    v4[1].__shared_owners_ = v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v12 = a2[3];
    v11 = (uint64_t)a2[4];
    v4[1].__shared_weak_owners_ = (uint64_t)&off_24C411E78;
    v4[2].__vftable = v12;
    v4[2].__shared_owners_ = v11;
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v74 = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v17 = (uint64_t *)a1[18];
    v18 = (_QWORD *)operator new();
    *v18 = v17 + 7;
    std::mutex::lock((std::mutex *)(v17 + 7));
    *(_QWORD *)&v75 = v18;
    *((_QWORD *)&v75 + 1) = v17;
    if (!*((_BYTE *)v17 + 48))
      sub_20AF3FE2C();
    v19 = v17[4];
    v20 = *v17;
    v21 = (_QWORD *)(*v17 + 16 * v19);
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    *v21 = v8;
    v23 = v20 + 16 * v19;
    v24 = *(std::__shared_weak_count **)(v23 + 8);
    *(_QWORD *)(v23 + 8) = v5;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (v17[1] - *v17) >> 4;
    v28 = v17[5];
    v29 = v17[4] + 1;
    if (v29 >= v27)
      v30 = (v17[1] - *v17) >> 4;
    else
      v30 = 0;
    v17[4] = v29 - v30;
    if (v28 == v27)
    {
      v31 = v17[3] + 1;
      if (v31 < v27)
        v27 = 0;
      v17[3] = v31 - v27;
      v32 = (std::mutex **)v75;
      if (!(_QWORD)v75)
      {
LABEL_39:
        v42 = (uint64_t **)a1[9];
        v75 = 0uLL;
        v43 = (std::__shared_weak_count *)a1[5];
        if (v43)
        {
          v44 = std::__shared_weak_count::lock(v43);
          if (v44)
          {
            v45 = v44;
            v46 = a1[4];
            v47 = (unint64_t *)&v44->__shared_weak_owners_;
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
            *(_QWORD *)&v75 = v46;
            *((_QWORD *)&v75 + 1) = v44;
            v49 = (unint64_t *)&v44->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          else
          {
            v75 = 0uLL;
          }
        }
        v51 = (char *)operator new(0x30uLL);
        *(_QWORD *)v51 = &off_24C4126F8;
        *(_OWORD *)(v51 + 8) = v75;
        v75 = 0uLL;
        *((_QWORD *)v51 + 3) = v8;
        *((_QWORD *)v51 + 4) = v5;
        v76 = 0;
        v77 = 0;
        v79 = v51;
        sub_20B430B44(*v42, (uint64_t)v78);
        v52 = v79;
        if (v79 == v78)
        {
          v53 = 4;
          v52 = v78;
        }
        else
        {
          if (!v79)
            goto LABEL_53;
          v53 = 5;
        }
        (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_53:
        if (v74)
        {
          v54 = (unint64_t *)&v74->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v17[5] = v28 + 1;
      v32 = (std::mutex **)v75;
      if (!(_QWORD)v75)
        goto LABEL_39;
    }
    std::mutex::unlock(*v32);
    MEMORY[0x20BD3583C](v32, 0x20C4093837F09);
    goto LABEL_39;
  }
  v33 = (uint64_t **)a1[9];
  v73 = 0uLL;
  v34 = (std::__shared_weak_count *)a1[5];
  if (v34)
  {
    v35 = std::__shared_weak_count::lock(v34);
    if (v35)
    {
      v36 = v35;
      v37 = a1[4];
      v38 = (unint64_t *)&v35->__shared_weak_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      *(_QWORD *)&v73 = v37;
      *((_QWORD *)&v73 + 1) = v35;
      v40 = (unint64_t *)&v35->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    else
    {
      v73 = 0uLL;
    }
  }
  v56 = *a2;
  v57 = a2[1];
  if (v57)
  {
    v58 = (unint64_t *)&v57->~__shared_weak_count_0;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v61 = a2[3];
  v60 = a2[4];
  if (v60)
  {
    v62 = (unint64_t *)&v60->~__shared_weak_count_0;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = (char *)operator new(0x40uLL);
  *(_QWORD *)v64 = &off_24C4127D8;
  *(_OWORD *)(v64 + 8) = v73;
  *((_QWORD *)v64 + 3) = v56;
  *((_QWORD *)v64 + 4) = v57;
  *((_QWORD *)v64 + 5) = &off_24C411E78;
  *((_QWORD *)v64 + 6) = v61;
  *((_QWORD *)v64 + 7) = v60;
  v77 = (__int128 *)v64;
  sub_20B430B44(*v33, (uint64_t)&v75);
  v71 = v77;
  if (v77 == &v75)
  {
    v72 = 4;
    v71 = &v75;
  }
  else
  {
    if (!v77)
      return;
    v72 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v71 + 8 * v72))(v71, v65, v66, v67, v68, v69, v70);
}

