float sub_20AEBFE94(uint64_t a1)
{
  const float *v1;
  int8x16_t v2;
  int8x16_t v3;
  int8x16_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x2x2_t v13;

  v1 = (const float *)a1;
  v13 = vld2_f32(v1);
  v1 += 4;
  v2 = *(int8x16_t *)v1;
  v3 = *(int8x16_t *)(a1 + 32);
  v4 = *(int8x16_t *)(a1 + 48);
  v5 = (float32x4_t)vextq_s8(v3, v3, 8uLL);
  v6 = (float32x4_t)vextq_s8(v4, v4, 0xCuLL);
  v7 = (float32x4_t)vextq_s8(v3, v3, 0xCuLL);
  v8 = (float32x4_t)vextq_s8(v4, v4, 8uLL);
  v9 = (float32x4_t)vextq_s8(v4, v4, 4uLL);
  v10 = (float32x4_t)vextq_s8(v3, v3, 4uLL);
  v11 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v2, v2, 8uLL), vmlaq_f32(vmulq_f32(v6, vnegq_f32(v10)), v9, v7)), vmlaq_f32(vmulq_f32(v8, vnegq_f32(v7)), v6, v5), (float32x4_t)vextq_s8(v2, v2, 4uLL)), vmlaq_f32(vmulq_f32(v9, vnegq_f32(v5)), v8, v10), (float32x4_t)vextq_s8(v2, v2, 0xCuLL));
  v2.i64[0] = vextq_s8(v11, v11, 8uLL).u64[0];
  return vaddv_f32(vsub_f32(vmul_f32(v13.val[0], (float32x2_t)vzip1_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v2.i8)), vmul_f32(v13.val[1], (float32x2_t)vzip2_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v2.i8))));
}

double sub_20AEBFF18(float64x2_t *a1)
{
  float64x2_t v1;
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;

  v1 = a1[2];
  v2 = a1[4];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = (float64x2_t)vextq_s8((int8x16_t)v1, (int8x16_t)v3, 8uLL);
  v8 = (float64x2_t)vextq_s8((int8x16_t)v3, (int8x16_t)v1, 8uLL);
  v9 = (float64x2_t)vextq_s8((int8x16_t)v5, (int8x16_t)v6, 8uLL);
  v10 = (float64x2_t)vextq_s8((int8x16_t)v6, (int8x16_t)v5, 8uLL);
  v11 = (float64x2_t)vextq_s8((int8x16_t)v2, (int8x16_t)v4, 8uLL);
  v12 = (float64x2_t)vextq_s8((int8x16_t)v4, (int8x16_t)v2, 8uLL);
  v13 = vnegq_f64(v12);
  v14 = vnegq_f64(v11);
  v15 = (int64x2_t)vmulq_f64(a1[1], vmlaq_f64(vmlaq_f64(vmulq_f64(v1, vmlaq_f64(vmulq_f64(v9, v13), v10, v11)), vmlaq_f64(vmulq_f64(v5, v14), v9, v2), v8), vmlaq_f64(vmulq_f64(v10, vnegq_f64(v2)), v5, v12), v7));
  v16 = (int64x2_t)vmulq_f64(*a1, vmlaq_f64(vmlaq_f64(vmulq_f64(v3, vmlaq_f64(vmulq_f64(v10, v14), v9, v12)), vmlaq_f64(vmulq_f64(v6, v13), v10, v4), v7), vmlaq_f64(vmulq_f64(v9, vnegq_f64(v4)), v6, v11), v8));
  return vaddvq_f64(vsubq_f64((float64x2_t)vzip1q_s64(v16, v15), (float64x2_t)vzip2q_s64(v16, v15)));
}

void sub_20AEBFFE4(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_254637068);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_254637068))
  {
    *a1 = qword_254637060;
  }
  else
  {
    sub_20AEC006C();
    __cxa_guard_release(&qword_254637068);
    *a1 = qword_254637060;
  }
}

void sub_20AEC0054(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637068);
  _Unwind_Resume(a1);
}

void sub_20AEC006C()
{
  void *__p[2];
  char v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  sub_20AEC50C4(&qword_254637060);
  v4 = (_QWORD *)qword_254637060;
  sub_20AEC4B4C(&v4, &v5);
  v2 = (uint64_t *)qword_254637060;
  v1 = 7;
  strcpy((char *)__p, "cv3dapi");
  sub_20AEC4B5C(&v2, (uint64_t)__p, (uint64_t *)&v3);
  if (v1 < 0)
    operator delete(__p[0]);
  sub_20AEC3978((uint64_t)v5);
  sub_20AEC3E28(v5, 6);
  sub_20AEC3E28(v3, 6);
}

void sub_20AEC011C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20AEC0138()
{
  sub_20AEC014C("basic_string");
}

void sub_20AEC014C(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_20AEC019C(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C3F18D0, MEMORY[0x24BEDAAF0]);
}

void sub_20AEC0188(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_20AEC019C(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void sub_20AEC01C0(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

_QWORD *sub_20AEC01D0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x20BD351DC](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_20AEC0334(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x20BD351E8](v13);
  return a1;
}

void sub_20AEC02D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x20BD351E8](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x20AEC02B8);
}

void sub_20AEC0320(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20AEC0334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        sub_20AEC0138();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_20AEC04BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20AEC04D8(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 56));
    v3 = *(char **)(v2 + 32);
    if (v3)
    {
      do
      {
        v5 = *(char **)v3;
        v6 = *((_QWORD *)v3 + 5);
        *((_QWORD *)v3 + 5) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5);
    }
    v4 = *(void **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v4)
      operator delete(v4);
    sub_20AEC0590((uint64_t *)(v2 + 8));
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t *sub_20AEC0590(uint64_t *a1)
{
  uint64_t v2;
  char *v3;
  void *v4;
  char *v6;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 56));
    v3 = *(char **)(v2 + 32);
    if (v3)
    {
      do
      {
        v6 = *(char **)v3;
        v7 = *((_QWORD *)v3 + 5);
        *((_QWORD *)v3 + 5) = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v6;
      }
      while (v6);
    }
    v4 = *(void **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v4)
      operator delete(v4);
    sub_20AEC0590(v2 + 8);
    MEMORY[0x20BD3583C](v2, 0x10A0C400EF86968);
  }
  return a1;
}

uint64_t sub_20AEC0644(uint64_t result, char a2)
{
  *(_QWORD *)result = off_24C3F1EA8;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t sub_20AEC0664(uint64_t a1, char *__format, ...)
{
  uint64_t v3;
  char *v4;
  unsigned int v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char v22;
  _QWORD *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  __int128 v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  va_list *p_dst;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  va_list *v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  uint64_t v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  uint64_t v49;
  va_list __dst;
  size_t v51;
  int64_t v52;
  _QWORD *v53;
  char __str[512];
  uint64_t v55;
  va_list va;

  va_start(va, __format);
  v3 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 56))
  {
    v44 = operator new();
    sub_20AEC0BD8(v44);
    v45 = (_QWORD *)operator new();
    *v45 = &unk_24C3F2070;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
    v46 = *(std::__shared_weak_count **)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v44;
    *(_QWORD *)(a1 + 64) = v45;
    v3 = a1;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(p_shared_owners);
      while (__stlxr(v48 - 1, p_shared_owners));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  v53 = 0;
  va_copy(__dst, va);
  v4 = __str;
  v5 = vsnprintf(__str, 0x200uLL, __format, va);
  v6 = v5;
  if (v5 >= 0x200)
  {
    v49 = v3;
    v7 = 0;
    v8 = 512;
    while (1)
    {
      if ((int)v5 > 0)
        v8 = v6 + 1;
      else
        v8 *= 4;
      if (!v7)
      {
        v23 = (_QWORD *)operator new();
        v7 = v23;
        *v23 = 0;
        v23[1] = 0;
        v23[2] = 0;
        if (v8)
        {
          if ((v8 & 0x8000000000000000) != 0)
            sub_20AEC60B8();
          v9 = (char *)operator new(v8);
          *v7 = v9;
          v7[2] = &v9[v8];
          bzero(v9, v8);
          v7[1] = &v9[v8];
          v53 = v7;
          v12 = 1;
        }
        else
        {
          v9 = 0;
          v53 = v23;
          v12 = 1;
        }
LABEL_28:
        if (!v12)
          v7[1] = &v9[v8];
        goto LABEL_31;
      }
      v9 = (char *)*v7;
      v10 = (char *)v7[1];
      v11 = (unint64_t)&v10[-*v7];
      v12 = v8 >= v11;
      v13 = v8 - v11;
      if (v8 <= v11)
        goto LABEL_28;
      v14 = v7[2];
      if (v14 - (uint64_t)v10 < v13)
        break;
      bzero(v10, v13);
      v7[1] = &v10[v13];
LABEL_31:
      v7 = v53;
      v4 = (char *)*v53;
      va_copy(__dst, va);
      v5 = vsnprintf(v4, v8, __format, va);
      v6 = v5;
      if ((v5 & 0x80000000) == 0 && v8 > v5)
      {
        v3 = v49;
        goto LABEL_46;
      }
    }
    if ((v8 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v15 = v14 - (_QWORD)v9;
    v16 = 2 * v15;
    if (2 * v15 <= v8)
      v16 = v8;
    if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v18 = (char *)operator new(v17);
    v19 = &v18[v11];
    bzero(&v18[v11], v13);
    if (v10 == v9)
    {
LABEL_23:
      *v7 = v19;
      v7[1] = &v18[v8];
      v7[2] = &v18[v17];
      if (v9)
        operator delete(v9);
      goto LABEL_31;
    }
    if (v11 < 8 || (unint64_t)(v9 - v18) < 0x20)
    {
      v20 = v10;
      goto LABEL_20;
    }
    if (v11 >= 0x20)
    {
      v24 = v11 & 0xFFFFFFFFFFFFFFE0;
      v25 = &v18[v11 - 16];
      v26 = v10 - 16;
      v27 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v28 = *(_OWORD *)v26;
        *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
        *(_OWORD *)v25 = v28;
        v25 -= 32;
        v26 -= 32;
        v27 -= 32;
      }
      while (v27);
      if (v11 == v24)
        goto LABEL_22;
      if ((v11 & 0x18) == 0)
      {
        v19 -= v24;
        v20 = &v10[-v24];
LABEL_20:
        v21 = v19 - 1;
        do
        {
          v22 = *--v20;
          *v21-- = v22;
        }
        while (v20 != v9);
LABEL_22:
        v19 = v18;
        goto LABEL_23;
      }
    }
    else
    {
      v24 = 0;
    }
    v20 = &v10[-(v11 & 0xFFFFFFFFFFFFFFF8)];
    v19 -= v11 & 0xFFFFFFFFFFFFFFF8;
    v29 = &v18[&v10[-v24] - v9 - 8];
    v30 = &v10[-v24 - 8];
    v31 = v24 - (v11 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v32 = *(_QWORD *)v30;
      v30 -= 8;
      *(_QWORD *)v29 = v32;
      v29 -= 8;
      v31 += 8;
    }
    while (v31);
    if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_22;
    goto LABEL_20;
  }
LABEL_46:
  v33 = *(_QWORD *)(v3 + 56);
  if (v5 >= 0x17)
  {
    v35 = v3;
    v36 = (v6 & 0xFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v36 = v6 | 7;
    v37 = v36 + 1;
    p_dst = (va_list *)operator new(v36 + 1);
    v51 = v6;
    v52 = v37 | 0x8000000000000000;
    __dst = (va_list)p_dst;
    v3 = v35;
    goto LABEL_52;
  }
  HIBYTE(v52) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_52:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  if (v52 >= 0)
    v38 = &__dst;
  else
    v38 = (va_list *)__dst;
  if (v52 >= 0)
    v39 = HIBYTE(v52);
  else
    v39 = v51;
  sub_20AEC01D0((_QWORD *)(v33 + 16), (uint64_t)v38, v39);
  if (SHIBYTE(v52) < 0)
    operator delete(__dst);
  v40 = v53;
  if (v53)
  {
    v41 = (void *)*v53;
    if (*v53)
    {
      v53[1] = v41;
      operator delete(v41);
    }
    MEMORY[0x20BD3583C](v40, 0x10C402FEFCB83);
  }
  return v3;
}

void sub_20AEC0AE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20AEC0AFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B3C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20AEC0B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20AEC0D10((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20AEC0B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_20AEC0D10(&a17);
    _Unwind_Resume(a1);
  }
  sub_20AEC0D10(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEC0BD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_20AEC0CDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AEC0D10(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x20BD3583C](v2, 0x10C402FEFCB83);
  }
  return a1;
}

_QWORD *sub_20AEC0D64(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_20AEC0E14(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, *(void **)a2, *((_QWORD *)a2 + 1));
    v5 = a1 + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    v5 = a1 + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 5);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_20AEC60F4((_BYTE *)v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
LABEL_6:
  v7 = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v9 = *((_QWORD *)a2 + 7);
  v8 = *((_QWORD *)a2 + 8);
  if (v8 != v9)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 4) >= 0x333333333333334)
      sub_20AEC60B8();
    v10 = (char *)operator new(v8 - v9);
    v11 = 0;
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 72) = &v10[16 * ((v8 - v9) >> 4)];
    do
    {
      sub_20AEC0E14(&v10[v11], v9 + v11);
      v11 += 80;
    }
    while (v9 + v11 != v8);
    *(_QWORD *)(a1 + 64) = &v10[v11];
  }
  return a1;
}

void sub_20AEC0F50(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AEC0FC8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_20AEC0FC8(v3 - 80);
      while ((void *)v3 != v2);
      v4 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20AEC1058(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v18[2];

  v5 = *a2;
  *(_QWORD *)a1 = &off_24C3F1ED8;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = (_QWORD *)operator new();
  v7 = (_DWORD *)operator new();
  *v7 = 3;
  *v6 = v7;
  v8 = (_QWORD *)operator new();
  v8[1] = 0;
  v9 = v8 + 1;
  *v8 = &off_24C3F2020;
  v8[2] = 0;
  v8[3] = v7;
  v6[1] = v8;
  *(_QWORD *)(a1 + 56) = *v6;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = v8;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  *(_BYTE *)(a1 + 72) = 0;
  v11 = operator new();
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v11 + 48;
  *(_DWORD *)(v11 + 32) = 1065353216;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 850045863;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_QWORD *)(v11 + 144) = 0;
  *(_QWORD *)(v11 + 152) = 0;
  *(_QWORD *)(v11 + 136) = 0;
  *(_QWORD *)(v11 + 120) = 0;
  *(_QWORD *)(v11 + 128) = v11 + 136;
  *(_QWORD *)(a1 + 80) = v11;
  v12 = *(_QWORD **)a3;
  v13 = *(_QWORD **)(a3 + 8);
  while (v12 != v13)
  {
    v14 = (std::__shared_weak_count *)v12[1];
    v18[0] = *v12;
    v18[1] = v14;
    *v12 = 0;
    v12[1] = 0;
    sub_20AEC12B8(a1, v18, 0);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v12 += 2;
  }
  return a1;
}

void sub_20AEC1228(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  sub_20AEC147C(v3);
  sub_20AEC14E4(v2);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t sub_20AEC12B8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;

  v6 = (uint64_t **)(*(_QWORD *)(a1 + 80) + 40);
  v7 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)&v30 = *a2;
  *((_QWORD *)&v30 + 1) = v30;
  v31 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_20AEC839C(v6, &v30);
  v11 = v10;
  v12 = v31;
  if (!v31)
    goto LABEL_8;
  v13 = (unint64_t *)&v31->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((v11 & 1) == 0)
      return v11 & 1;
  }
  else
  {
LABEL_8:
    if ((v10 & 1) == 0)
      return v11 & 1;
  }
  v15 = *(_QWORD *)(a1 + 80);
  v16 = a2[1];
  *(_QWORD *)&v29 = *a2;
  *((_QWORD *)&v29 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_BYTE *)(a1 + 72) = sub_20AEC3380(v15, &v29, a3);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *a2;
  v23 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)&v30 = v22;
  *((_QWORD *)&v30 + 1) = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  sub_20AEC3594((uint64_t)&v30, a1);
  if (v23)
  {
    v26 = (unint64_t *)&v23->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v11 & 1;
}

void sub_20AEC1440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AEC1454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AEC1468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC3318((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEC147C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20AEC14E4(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x20BD3583C](v2, 0x30C40EEE2E2AFLL);
  }
  return a1;
}

uint64_t sub_20AEC1568(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;

  v8 = *a2;
  *(_QWORD *)a1 = &off_24C3F1ED8;
  *(_QWORD *)(a1 + 8) = v8;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20AEC60F4((_BYTE *)(a1 + 16), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 16) = v9;
  }
  v10 = *a4;
  v11 = *(_QWORD *)(*a4 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*a4 + 56);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 72) = 0;
  v14 = *a5;
  if (*a5)
  {
    *a5 = 0;
  }
  else
  {
    v14 = operator new();
    *(_QWORD *)(v14 + 48) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = v14 + 48;
    *(_DWORD *)(v14 + 32) = 1065353216;
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_QWORD *)(v14 + 56) = 0;
    *(_QWORD *)(v14 + 64) = 850045863;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 104) = 0u;
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 136) = 0;
    *(_QWORD *)(v14 + 120) = 0;
    *(_QWORD *)(v14 + 128) = v14 + 136;
  }
  *(_QWORD *)(a1 + 80) = v14;
  return a1;
}

void sub_20AEC1688(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t *v4;

  sub_20AEC147C(v3);
  sub_20AEC14E4(v4);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEC16B4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = &off_24C3F1ED8;
  sub_20AEC62BC((uint64_t *)(a1 + 80), 0);
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (!v5)
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (!v5)
      goto LABEL_12;
  }
  v6 = *(std::__shared_weak_count **)(v5 + 8);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  MEMORY[0x20BD3583C](v5, 0x30C40EEE2E2AFLL);
LABEL_12:
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20AEC17BC(uint64_t a1)
{
  sub_20AEC16B4(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AEC17E0(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v6;
  std::mutex *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 v14;
  _QWORD *v15;
  _OWORD *v16;
  __int128 v17;
  char *v18;
  std::string::size_type size;
  void **v20;
  std::string::size_type v21;
  char *v22;
  void *v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  char *v30;
  void **v31;
  void **v32;
  void *v33;
  _QWORD *v34;
  char **v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  void *v57[2];
  void *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  void *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  int v67;
  std::string v68;
  void *__p[2];
  uint64_t v70;
  void *v71[2];
  void *v72[2];
  int v73;
  void *v74;
  char v75;
  uint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  __int128 __dst;
  void *v81;

  v6 = *a1;
  v7 = (std::mutex *)(*a1 + 7);
  std::mutex::lock(v7);
  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = (_BYTE *)a2;
  else
    v9 = *(_BYTE **)a2;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    goto LABEL_15;
  v10 = 0;
  v11 = v6 + 2;
  while (v9[v10] == 46)
  {
    if (v8 == ++v10)
      goto LABEL_15;
  }
  if (v10 == -1)
  {
LABEL_15:
    *a3 = **a1;
  }
  else
  {
    if (sub_20AEC2078((_QWORD *)a2))
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_20AEC60F4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        __dst = *(_OWORD *)a2;
        v81 = *(void **)(a2 + 16);
      }
    }
    else
    {
      sub_20AEC2304(a2, &__dst);
    }
    v12 = sub_20AEC8B00(v11, (uint64_t)&__dst);
    if (v12)
    {
      *a3 = v12[5];
      if (SHIBYTE(v81) < 0)
LABEL_103:
        operator delete((void *)__dst);
    }
    else
    {
      v13 = (uint64_t *)operator new();
      *v13 = **a1;
      v57[0] = 0;
      v57[1] = 0;
      v58 = 0;
      v77 = 0;
      v78 = 0;
      v79 = 0;
      sub_20AEC2AE0((uint64_t)v71, &__dst, 24);
      __p[0] = 0;
      __p[1] = 0;
      v70 = 0;
      memset(&v68, 0, sizeof(v68));
      while (1)
      {
        v15 = sub_20AEC2C84(v71, (uint64_t)__p, 0x2Eu);
        if ((*((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 32) & 5) != 0)
          break;
        v16 = v57[1];
        if (v57[1] >= v58)
        {
          v18 = sub_20AEC63D0((char **)v57, (uint64_t)__p);
        }
        else
        {
          if (SHIBYTE(v70) < 0)
          {
            sub_20AEC60F4((_BYTE *)v57[1], __p[0], (unint64_t)__p[1]);
          }
          else
          {
            v17 = *(_OWORD *)__p;
            *((_QWORD *)v57[1] + 2) = v70;
            *v16 = v17;
          }
          v18 = (char *)v16 + 24;
        }
        v57[1] = v18;
        size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v68.__r_.__value_.__l.__size_;
        if (size)
          std::string::append(&v68, ".", 1uLL);
        if (v70 >= 0)
          v20 = __p;
        else
          v20 = (void **)__p[0];
        if (v70 >= 0)
          v21 = HIBYTE(v70);
        else
          v21 = (std::string::size_type)__p[1];
        std::string::append(&v68, (const std::string::value_type *)v20, v21);
        v22 = v78;
        if ((unint64_t)v78 < v79)
        {
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_20AEC60F4(v78, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
          }
          else
          {
            v14 = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
            *((_QWORD *)v78 + 2) = *((_QWORD *)&v68.__r_.__value_.__l + 2);
            *(_OWORD *)v22 = v14;
          }
          v78 = v22 + 24;
        }
        else
        {
          v78 = sub_20AEC63D0(&v77, (uint64_t)&v68);
        }
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(v70) < 0)
        operator delete(__p[0]);
      v71[0] = *(void **)MEMORY[0x24BEDB7F0];
      v23 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
      *(void **)((char *)v71 + *((_QWORD *)v71[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      v72[0] = v23;
      v72[1] = (void *)(MEMORY[0x24BEDB848] + 16);
      if (v75 < 0)
        operator delete(v74);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x20BD35758](&v76);
      v24 = ((int)v78 - (int)v77) / 24 + 1;
      v25 = 24 * (((int)v78 - (int)v77) / 24) - 24;
      while (--v24 > 0)
      {
        v26 = sub_20AEC8B00(v11, (uint64_t)&v77[v25]);
        v25 -= 24;
        if (v26)
        {
          v27 = (uint64_t *)operator new();
          *v27 = v26[5];
          MEMORY[0x20BD3583C](v13, 0x60C4044C4A2DFLL);
          v13 = v27;
          break;
        }
      }
      v28 = v77;
      if (v77)
      {
        v29 = v78;
        v30 = v77;
        if (v78 != v77)
        {
          do
          {
            if (*(v29 - 1) < 0)
              operator delete(*((void **)v29 - 3));
            v29 -= 24;
          }
          while (v29 != v28);
          v30 = v77;
        }
        v78 = v28;
        operator delete(v30);
      }
      v31 = (void **)v57[0];
      if (v57[0])
      {
        v32 = (void **)v57[1];
        v33 = v57[0];
        if (v57[1] != v57[0])
        {
          do
          {
            if (*((char *)v32 - 1) < 0)
              operator delete(*(v32 - 3));
            v32 -= 3;
          }
          while (v32 != v31);
          v33 = v57[0];
        }
        v57[1] = v31;
        operator delete(v33);
      }
      *(_OWORD *)v71 = 0u;
      *(_OWORD *)v72 = 0u;
      v73 = 1065353216;
      v34 = *(_QWORD **)(*(_QWORD *)(*v13 + 80) + 16);
      if (v34)
      {
        do
        {
          while (1)
          {
            v35 = (char **)v34[2];
            if (sub_20AEC2F00((char *)&__dst, v35 + 2))
              break;
            v34 = (_QWORD *)*v34;
            if (!v34)
              goto LABEL_79;
          }
          v57[0] = v35;
          sub_20AEC8E94((uint64_t)v71, (uint64_t *)v57, v57);
          v36 = (_QWORD *)*v34;
          sub_20AEC9398(*(_QWORD **)(*v13 + 80), v34, (uint64_t)v57);
          v37 = v57[0];
          v57[0] = 0;
          if (v37)
            operator delete(v37);
          v34 = v36;
        }
        while (v36);
      }
LABEL_79:
      v38 = operator new();
      sub_20AEC94CC((uint64_t)&v63, (uint64_t)v71);
      v39 = v63;
      v40 = v64;
      v63 = 0;
      v64 = 0;
      *(_QWORD *)v38 = v39;
      *(_QWORD *)(v38 + 8) = v40;
      v41 = v65;
      v42 = v66;
      *(_QWORD *)(v38 + 16) = v65;
      *(_QWORD *)(v38 + 24) = v42;
      *(_DWORD *)(v38 + 32) = v67;
      if (v42)
      {
        v43 = v41[1];
        if ((v40 & (v40 - 1)) != 0)
        {
          if (v43 >= v40)
            v43 %= v40;
        }
        else
        {
          v43 &= v40 - 1;
        }
        v41 = 0;
        v39[v43] = v38 + 16;
        v65 = 0;
        v66 = 0;
      }
      *(_QWORD *)(v38 + 48) = 0;
      *(_QWORD *)(v38 + 40) = v38 + 48;
      *(_QWORD *)(v38 + 56) = 0;
      *(_QWORD *)(v38 + 64) = 850045863;
      *(_OWORD *)(v38 + 72) = 0u;
      *(_OWORD *)(v38 + 88) = 0u;
      *(_OWORD *)(v38 + 104) = 0u;
      *(_QWORD *)(v38 + 144) = 0;
      *(_QWORD *)(v38 + 152) = 0;
      *(_QWORD *)(v38 + 136) = 0;
      *(_QWORD *)(v38 + 120) = 0;
      *(_QWORD *)(v38 + 128) = v38 + 136;
      v77 = (char *)v38;
      if (v41)
      {
        do
        {
          v44 = (_QWORD *)*v41;
          operator delete(v41);
          v41 = v44;
        }
        while (v44);
      }
      v45 = v63;
      v63 = 0;
      if (v45)
        operator delete(v45);
      v46 = operator new();
      v47 = *a1;
      v61 = *v13;
      v62 = v47;
      v48 = v77;
      v77 = 0;
      v60 = v48;
      sub_20AEC1568(v46, (uint64_t *)&v62, &__dst, &v61, (uint64_t *)&v60);
      sub_20AEC62BC((uint64_t *)&v60, 0);
      if (SHIBYTE(v81) < 0)
      {
        sub_20AEC60F4(v57, (void *)__dst, *((unint64_t *)&__dst + 1));
      }
      else
      {
        *(_OWORD *)v57 = __dst;
        v58 = v81;
      }
      v59 = v46;
      v49 = sub_20AEC9964((uint64_t)v11, (uint64_t)v57, (__int128 *)v57);
      v50 = v59;
      v59 = 0;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
      if (SHIBYTE(v58) < 0)
        operator delete(v57[0]);
      v51 = *((_QWORD *)v49 + 5);
      v52 = *(_QWORD *)(*v13 + 80);
      v57[0] = (void *)v51;
      sub_20AEC8E94(v52, (uint64_t *)v57, v57);
      v53 = v72[0];
      if (v72[0])
      {
        do
        {
          *(_QWORD *)(v53[2] + 40) = v51;
          v53 = (_QWORD *)*v53;
        }
        while (v53);
      }
      *(_BYTE *)(v51 + 72) = sub_20AEC30E4(*(_QWORD *)(v51 + 80), *v13);
      *a3 = v51;
      sub_20AEC62BC((uint64_t *)&v77, 0);
      v54 = v72[0];
      if (v72[0])
      {
        do
        {
          v55 = (_QWORD *)*v54;
          operator delete(v54);
          v54 = v55;
        }
        while (v55);
      }
      v56 = v71[0];
      v71[0] = 0;
      if (v56)
        operator delete(v56);
      MEMORY[0x20BD3583C](v13, 0x60C4044C4A2DFLL);
      if (SHIBYTE(v81) < 0)
        goto LABEL_103;
    }
  }
  std::mutex::unlock(v7);
}

void sub_20AEC1F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  std::mutex *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  sub_20AEC62BC((uint64_t *)(v36 - 136), 0);
  sub_20AEC309C((uint64_t)&a33);
  MEMORY[0x20BD3583C](v34, 0x60C4044C4A2DFLL);
  if (*(char *)(v36 - 89) < 0)
    operator delete(*(void **)(v36 - 112));
  std::mutex::unlock(v33);
  _Unwind_Resume(a1);
}

BOOL sub_20AEC2078(_QWORD *__s)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  int v11;
  char *v12;
  void *v13;
  char *v14;
  unsigned __int8 v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  size_t v21;
  char *v22;

  v2 = *((unsigned __int8 *)__s + 23);
  if (*((char *)__s + 23) < 0)
  {
    v4 = __s[1];
    if (v4)
    {
      v3 = (_QWORD *)*__s;
      goto LABEL_6;
    }
    return 1;
  }
  if (!*((_BYTE *)__s + 23))
    return 1;
  v3 = __s;
  v4 = *((unsigned __int8 *)__s + 23);
LABEL_6:
  v5 = 0;
  while (*((_BYTE *)v3 + v5) != 46)
  {
    if (v4 == ++v5)
      goto LABEL_12;
  }
  if (v4 != v5 && !v5)
    return 0;
LABEL_12:
  v7 = (_QWORD *)*__s;
  v6 = __s[1];
  if ((v2 & 0x80u) == 0)
    v8 = __s;
  else
    v8 = (_QWORD *)*__s;
  if ((v2 & 0x80u) == 0)
    v9 = *((unsigned __int8 *)__s + 23);
  else
    v9 = __s[1];
  v10 = (char *)v8 - 1;
  while (v9)
  {
    v11 = v10[v9--];
    if (v11 == 46)
    {
      if ((v2 & 0x80) == 0)
        goto LABEL_22;
      goto LABEL_25;
    }
  }
  v9 = -1;
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    v7 = __s;
    v6 = *((unsigned __int8 *)__s + 23);
    if (v9 == v2 - 1)
      return 0;
    goto LABEL_27;
  }
LABEL_25:
  if (v9 == v6 - 1)
    return 0;
LABEL_27:
  if (v6 >= 2)
  {
    v12 = (char *)v7 + v6;
    v13 = v7;
    do
    {
      v14 = (char *)memchr(v13, 46, v6 - 1);
      if (!v14)
        break;
      if (*(_WORD *)v14 == 11822)
      {
        if (v14 == v12 || v14 - (char *)v7 == -1)
          break;
        return 0;
      }
      v13 = v14 + 1;
      v6 = v12 - (_BYTE *)v13;
    }
    while (v12 - (_BYTE *)v13 >= 2);
  }
  v16 = atomic_load((unsigned __int8 *)qword_254637078);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(qword_254637078))
  {
    sub_20AEC0D64(&qword_254637158, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254637158, &dword_20AEBB000);
    __cxa_guard_release(qword_254637078);
  }
  v17 = *((char *)__s + 23);
  if (v17 >= 0)
    v18 = (char *)__s;
  else
    v18 = (char *)*__s;
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)__s + 23);
  else
    v19 = __s[1];
  if (byte_25463716F >= 0)
    v20 = &qword_254637158;
  else
    v20 = (uint64_t *)qword_254637158;
  if (byte_25463716F >= 0)
    v21 = byte_25463716F;
  else
    v21 = qword_254637160;
  if (!v19)
    return 1;
  v22 = v18;
  if (v21)
  {
    while (memchr(v20, *v22, v21))
    {
      ++v22;
      if (!--v19)
        return 1;
    }
  }
  return v22 - v18 == -1;
}

void sub_20AEC22EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_254637078);
  _Unwind_Resume(a1);
}

void sub_20AEC2304(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *p_dst;
  char *v10;
  uint64_t v11;
  __int128 *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  char *v40;
  uint64_t v41;
  void **v42;
  char *i;
  __int128 v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  size_t v48;
  unint64_t v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  char *v55;
  void *__p[2];
  uint64_t v57;
  _QWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  const void *v61;
  uint64_t v62;
  const void *v63;
  unint64_t v64;
  void *v65;
  char v66;
  unint64_t v67;
  int v68;
  _BYTE v69[152];
  char *v70;
  char *v71;
  unint64_t v72;
  __int128 __dst;
  uint64_t v74;

  if (sub_20AEC2078((_QWORD *)a1))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20AEC60F4(a2, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      a2[2] = *(_QWORD *)(a1 + 16);
    }
    return;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    __dst = *(_OWORD *)a1;
    v74 = *(_QWORD *)(a1 + 16);
  }
  v4 = 1;
LABEL_9:
  v5 = HIBYTE(v74);
  v6 = *((_QWORD *)&__dst + 1);
  v7 = (__int128 *)__dst;
  if (v74 >= 0)
    v8 = HIBYTE(v74);
  else
    v8 = *((_QWORD *)&__dst + 1);
  if (v74 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  if (v8 < 2)
  {
    v4 = v8;
  }
  else
  {
    v10 = (char *)p_dst + v8;
    v11 = v8;
    v12 = p_dst;
    do
    {
      v13 = (char *)memchr(v12, 46, v11 - 1);
      if (!v13)
        break;
      if (*(_WORD *)v13 == 11822)
      {
        if (v13 == v10)
          break;
        v14 = v13 - (char *)p_dst;
        if (v13 - (char *)p_dst == -1)
          break;
        if (v8 < v14)
          sub_20AEC73F8();
        sub_20AEC740C(&__dst, v14, 1uLL);
        goto LABEL_9;
      }
      v12 = (__int128 *)(v13 + 1);
      v11 = v10 - (char *)v12;
    }
    while (v10 - (char *)v12 >= 2);
  }
  if (v4)
  {
    v15 = 0;
    while (*((_BYTE *)p_dst + v15) != 46)
    {
      if (v8 == ++v15)
        goto LABEL_34;
    }
    if (v8 != v15 && !v15)
    {
      sub_20AEC740C(&__dst, 0, 1uLL);
      v5 = HIBYTE(v74);
      v6 = *((_QWORD *)&__dst + 1);
      v7 = (__int128 *)__dst;
    }
  }
LABEL_34:
  if ((v5 & 0x80u) == 0)
    v16 = &__dst;
  else
    v16 = v7;
  if ((v5 & 0x80u) == 0)
    v17 = v5;
  else
    v17 = v6;
  v18 = (char *)v16 - 1;
  do
  {
    if (!v17)
    {
      v17 = -1;
      if ((v5 & 0x80) != 0)
        goto LABEL_47;
LABEL_44:
      v6 = v5;
      if (v17 == v5 - 1)
      {
LABEL_48:
        sub_20AEC740C(&__dst, v6, 1uLL);
        LODWORD(v5) = HIBYTE(v74);
        if (SHIBYTE(v74) < 0)
          goto LABEL_51;
      }
      if (!(_DWORD)v5)
        goto LABEL_57;
      v20 = v5;
      v21 = &__dst;
LABEL_53:
      v22 = (__int128 *)((char *)v21 + v20);
      v23 = v20 - 1;
      while (!sub_20AEC7510(*(char *)v21))
      {
        v21 = (__int128 *)((char *)v21 + 1);
        --v23;
        if (v21 == v22)
          goto LABEL_66;
      }
      if (v21 == v22 || (__int128 *)((char *)v21 + 1) == v22)
      {
        v22 = v21;
      }
      else
      {
        v24 = 1;
        v22 = v21;
        do
        {
          if (!sub_20AEC7510(*((char *)v21 + v24)))
          {
            *(_BYTE *)v22 = *((_BYTE *)v21 + v24);
            v22 = (__int128 *)((char *)v22 + 1);
          }
          ++v24;
          --v23;
        }
        while (v23);
      }
LABEL_66:
      v25 = HIBYTE(v74);
      v26 = (__int128 *)__dst;
      v27 = (char *)(__dst + *((_QWORD *)&__dst + 1));
      v28 = &__dst;
      if (v74 < 0)
      {
        v25 = *((_QWORD *)&__dst + 1);
        v28 = (__int128 *)__dst;
      }
      else
      {
        v27 = (char *)&__dst + HIBYTE(v74);
      }
      v29 = (char *)v22 - (char *)v28;
      if (v25 < (char *)v22 - (char *)v28)
        sub_20AEC73F8();
      if (v27 - (char *)v22 == -1)
      {
        if (SHIBYTE(v74) < 0)
        {
          *((_QWORD *)&__dst + 1) = (char *)v22 - (char *)v28;
        }
        else
        {
          HIBYTE(v74) = v29 & 0x7F;
          v26 = &__dst;
        }
        *((_BYTE *)v26 + v29) = 0;
      }
      else
      {
        sub_20AEC740C(&__dst, v29, v27 - (char *)v22);
      }
      v70 = 0;
      v71 = 0;
      v72 = 0;
      sub_20AEC2AE0((uint64_t)v58, &__dst, 24);
      __p[0] = 0;
      __p[1] = 0;
      v57 = 0;
      while (1)
      {
        v31 = sub_20AEC2C84(v58, (uint64_t)__p, 0x2Eu);
        if ((*((_BYTE *)v31 + *(_QWORD *)(*v31 - 24) + 32) & 5) != 0)
          break;
        v32 = v71;
        if ((unint64_t)v71 < v72)
        {
          if (SHIBYTE(v57) < 0)
          {
            sub_20AEC60F4(v71, __p[0], (unint64_t)__p[1]);
          }
          else
          {
            v30 = *(_OWORD *)__p;
            *((_QWORD *)v71 + 2) = v57;
            *(_OWORD *)v32 = v30;
          }
          v71 = v32 + 24;
        }
        else
        {
          v71 = sub_20AEC63D0(&v70, (uint64_t)__p);
        }
      }
      if (SHIBYTE(v57) < 0)
        operator delete(__p[0]);
      v33 = *MEMORY[0x24BEDB7F0];
      v58[0] = v33;
      v35 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v34 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)((char *)v58 + *(_QWORD *)(v33 - 24)) = v35;
      v59 = v34;
      v60 = MEMORY[0x24BEDB848] + 16;
      if (v66 < 0)
        operator delete(v65);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x20BD35758](v69);
      v36 = HIBYTE(v74);
      if (v74 < 0)
        v36 = *((_QWORD *)&__dst + 1);
      if (!v36)
      {
        *((_BYTE *)a2 + 23) = 1;
        *(_WORD *)a2 = 95;
        v40 = v70;
        if (!v70)
          goto LABEL_148;
        goto LABEL_141;
      }
      sub_20AEC0BD8((uint64_t)v58);
      v37 = v70;
      v38 = v71;
      if (v70 != v71)
      {
        if (v70[23] < 0)
        {
          sub_20AEC60F4(__p, *(void **)v70, *((_QWORD *)v70 + 1));
        }
        else
        {
          v39 = *(_OWORD *)v70;
          v57 = *((_QWORD *)v70 + 2);
          *(_OWORD *)__p = v39;
        }
        if (v57 >= 0)
          v41 = HIBYTE(v57);
        else
          v41 = (uint64_t)__p[1];
        if (v41)
        {
          if (v57 >= 0)
            v42 = __p;
          else
            v42 = (void **)__p[0];
          sub_20AEC01D0(&v59, (uint64_t)v42, v41);
        }
        else
        {
          sub_20AEC01D0(&v59, (uint64_t)"_", 1);
        }
        if (SHIBYTE(v57) < 0)
          operator delete(__p[0]);
        for (i = v37 + 24; i != v38; i += 24)
        {
          if (i[23] < 0)
          {
            sub_20AEC60F4(__p, *(void **)i, *((_QWORD *)i + 1));
          }
          else
          {
            v44 = *(_OWORD *)i;
            v57 = *((_QWORD *)i + 2);
            *(_OWORD *)__p = v44;
          }
          sub_20AEC01D0(&v59, (uint64_t)".", 1);
          if (v57 >= 0)
            v45 = HIBYTE(v57);
          else
            v45 = (uint64_t)__p[1];
          if (v45)
          {
            if (v57 >= 0)
              v46 = __p;
            else
              v46 = (void **)__p[0];
            sub_20AEC01D0(&v59, (uint64_t)v46, v45);
          }
          else
          {
            sub_20AEC01D0(&v59, (uint64_t)"_", 1);
          }
          if (SHIBYTE(v57) < 0)
            operator delete(__p[0]);
        }
      }
      if ((v68 & 0x10) != 0)
      {
        v49 = v67;
        v47 = v34;
        if (v67 < v64)
        {
          v67 = v64;
          v49 = v64;
        }
        v50 = v63;
        v48 = v49 - (_QWORD)v63;
        if (v49 - (unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_152;
      }
      else
      {
        v47 = v34;
        if ((v68 & 8) == 0)
        {
          v48 = 0;
          *((_BYTE *)a2 + 23) = 0;
          goto LABEL_138;
        }
        v50 = v61;
        v48 = v62 - (_QWORD)v61;
        if ((unint64_t)(v62 - (_QWORD)v61) >= 0x7FFFFFFFFFFFFFF8)
LABEL_152:
          sub_20AEC0138();
      }
      if (v48 >= 0x17)
      {
        v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v48 | 7) != 0x17)
          v51 = v48 | 7;
        v52 = v51 + 1;
        v53 = operator new(v51 + 1);
        a2[1] = v48;
        a2[2] = v52 | 0x8000000000000000;
        *a2 = v53;
        a2 = v53;
      }
      else
      {
        *((_BYTE *)a2 + 23) = v48;
        if (!v48)
        {
LABEL_138:
          *((_BYTE *)a2 + v48) = 0;
          v58[0] = v33;
          *(_QWORD *)((char *)v58 + *(_QWORD *)(v33 - 24)) = v35;
          v59 = v47;
          v60 = MEMORY[0x24BEDB848] + 16;
          if (v66 < 0)
            operator delete(v65);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x20BD35758](v69);
          v40 = v70;
          if (!v70)
          {
LABEL_148:
            if (v74 < 0)
              goto LABEL_149;
            return;
          }
LABEL_141:
          v54 = v71;
          v55 = v40;
          if (v71 != v40)
          {
            do
            {
              if (*(v54 - 1) < 0)
                operator delete(*((void **)v54 - 3));
              v54 -= 24;
            }
            while (v54 != v40);
            v55 = v70;
          }
          v71 = v40;
          operator delete(v55);
          goto LABEL_148;
        }
      }
      memmove(a2, v50, v48);
      goto LABEL_138;
    }
    v19 = v18[v17--];
  }
  while (v19 != 46);
  if ((v5 & 0x80) == 0)
    goto LABEL_44;
LABEL_47:
  if (v17 == v6 - 1)
    goto LABEL_48;
LABEL_51:
  v20 = *((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v21 = (__int128 *)__dst;
    goto LABEL_53;
  }
LABEL_57:
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  if ((v5 & 0x80) != 0)
LABEL_149:
    operator delete((void *)__dst);
}

void sub_20AEC2A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  sub_20AEC2E08((uint64_t)&a18);
  sub_20AEC2E90((void **)(v18 - 136));
  if (*(char *)(v18 - 89) < 0)
    operator delete(*(void **)(v18 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_20AEC2AE0(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v6 = MEMORY[0x24BEDB858];
  v7 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v6 + 64;
  v8 = a1 + 16;
  v9 = a1 + 24;
  v10 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v12;
  *(_QWORD *)(a1 + 8) = 0;
  v13 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v13, (void *)(a1 + 24));
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v14 = v10[4];
  v15 = v10[5];
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v8 + *(_QWORD *)(v14 - 24)) = v15;
  v16 = v10[1];
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + *(_QWORD *)(v16 - 24)) = v10[6];
  *(_QWORD *)a1 = v6 + 24;
  *(_QWORD *)(a1 + 128) = v7;
  *(_QWORD *)(a1 + 16) = v6 + 64;
  std::streambuf::basic_streambuf();
  v17 = MEMORY[0x24BEDB848];
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 24) = v17 + 16;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = a3;
  if ((__int128 *)(a1 + 88) != a2)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20AEC7FCC((_QWORD *)(a1 + 88), *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v18 = *a2;
      *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 88) = v18;
    }
  }
  sub_20AEC8D2C(v9);
  return a1;
}

void sub_20AEC2C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20AEC2C84(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x20BD3511C](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_20AEC2DB0(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x20AEC2D7CLL);
  }
  __cxa_rethrow();
}

void sub_20AEC2DF4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20AEC2E08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](a1 + 128);
  return a1;
}

void **sub_20AEC2E90(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20AEC2F00(char *a1, char **a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  char *v7;
  char *v8;
  int64_t v9;
  char *v10;
  int v11;
  int64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;

  v2 = *((char *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (unint64_t)a2[1];
  v4 = a1[23];
  if (a1[23] < 0)
  {
    v5 = *((_QWORD *)a1 + 1);
    if (v3 <= v5)
      return 0;
  }
  else
  {
    v5 = a1[23];
    if (v3 <= v4)
      return 0;
  }
  if (!v5)
    return 1;
  if (v2 >= 0)
    v7 = (char *)a2;
  else
    v7 = *a2;
  if ((v4 & 0x80u) == 0)
    v8 = a1;
  else
    v8 = *(char **)a1;
  if ((v4 & 0x80u) == 0)
    v9 = a1[23];
  else
    v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    if ((uint64_t)v3 >= v9)
    {
      v10 = &v7[v3];
      v11 = *v8;
      v12 = v3;
      v13 = v7;
      while (1)
      {
        v14 = v12 - v9;
        if (v14 == -1)
          break;
        result = (uint64_t)memchr(v13, v11, v14 + 1);
        if (!result)
          return result;
        v15 = result;
        result = memcmp((const void *)result, v8, v9);
        if (!(_DWORD)result)
        {
          if ((char *)v15 == v10 || (char *)v15 != v7)
            return result;
          goto LABEL_30;
        }
        result = 0;
        v13 = (char *)(v15 + 1);
        v12 = (int64_t)&v10[-v15 - 1];
        if (v12 < v9)
          return result;
      }
    }
    return 0;
  }
LABEL_30:
  if (v7[v9] != 46 || v3 <= v9 + 1)
    return 0;
  while (v7[v9 + 1] == 46)
  {
    result = 0;
    if (v3 - 1 == ++v9)
      return result;
  }
  return v9 != -2;
}

uint64_t sub_20AEC309C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

BOOL sub_20AEC30E4(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  std::mutex *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _BOOL8 v18;
  __int128 v20;
  std::mutex *v21;

  v4 = (std::mutex *)(*(_QWORD *)(a2 + 80) + 64);
  std::mutex::lock(v4);
  v5 = (std::mutex *)(a1 + 64);
  v21 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v6 = *(_QWORD *)(a2 + 80);
  v7 = *(_QWORD **)(v6 + 128);
  v8 = (_QWORD *)(v6 + 136);
  if (v7 != (_QWORD *)(v6 + 136))
  {
    while (1)
    {
      v9 = v7[6];
      *(_QWORD *)&v20 = v7[5];
      *((_QWORD *)&v20 + 1) = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      sub_20AEC3380(a1, &v20, (uint64_t)&v21);
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (!*((_QWORD *)&v20 + 1))
        goto LABEL_11;
      v13 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        v15 = (_QWORD *)v7[1];
        if (!v15)
        {
          do
          {
LABEL_15:
            v16 = (_QWORD *)v7[2];
            v17 = *v16 == (_QWORD)v7;
            v7 = v16;
          }
          while (!v17);
          goto LABEL_3;
        }
      }
      else
      {
LABEL_11:
        v15 = (_QWORD *)v7[1];
        if (!v15)
          goto LABEL_15;
      }
      do
      {
        v16 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
LABEL_3:
      v7 = v16;
      if (v16 == v8)
      {
        v5 = v21;
        break;
      }
    }
  }
  v18 = *(_QWORD *)(a1 + 152) != 0;
  std::mutex::unlock(v5);
  std::mutex::unlock(v4);
  return v18;
}

void sub_20AEC3224(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20AEC3238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::mutex *a12)
{
  std::mutex *v12;

  sub_20AEC147C((uint64_t)&a10);
  std::mutex::unlock(a12);
  std::mutex::unlock(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEC325C(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v9[2];
  std::mutex *v10;

  v10 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v10);
  v4 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = v4;
  *a2 = 0;
  a2[1] = 0;
  v5 = sub_20AEC12B8(a1, v9, (uint64_t)&v10);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::mutex::unlock(v10);
  return v5;
}

void sub_20AEC32FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::mutex *a12)
{
  sub_20AEC147C((uint64_t)&a10);
  std::mutex::unlock(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEC3318(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20AEC3380(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t **v6;
  char v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::mutex *v13;
  __int128 v14;
  uint64_t **v15;
  char v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22;
  __int128 v23;

  if (a3)
  {
    v5 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v22 = v5;
    v23 = v5;
    v6 = sub_20AEC839C((uint64_t **)(a1 + 128), (__int128 *)&v22);
    v8 = v7;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (v8 && *((_BYTE *)v6[4] + 8))
      ++*(_QWORD *)(a1 + 152);
    v12 = *(_QWORD *)(a1 + 152);
  }
  else
  {
    v13 = (std::mutex *)(a1 + 64);
    std::mutex::lock((std::mutex *)(a1 + 64));
    v14 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v22 = v14;
    v23 = v14;
    v15 = sub_20AEC839C((uint64_t **)(a1 + 128), (__int128 *)&v22);
    v17 = v16;
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v17 && *((_BYTE *)v15[4] + 8))
      ++*(_QWORD *)(a1 + 152);
    v12 = *(_QWORD *)(a1 + 152);
    std::mutex::unlock(v13);
  }
  return v12 != 0;
}

void sub_20AEC3554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::mutex *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20AEC3318((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  std::mutex::unlock(v4);
  _Unwind_Resume(a1);
}

void sub_20AEC3578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC3318((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEC3594(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  v2 = *(_QWORD **)(*(_QWORD *)(a2 + 80) + 16);
  if (v2)
  {
    v3 = (_QWORD *)result;
    do
    {
      v4 = v2[2];
      v5 = v3[1];
      v6 = *(_QWORD *)(v4 + 80);
      *(_QWORD *)&v12 = *v3;
      *((_QWORD *)&v12 + 1) = v5;
      if (v5)
      {
        v7 = (unint64_t *)(v5 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      *(_BYTE *)(v4 + 72) = sub_20AEC3380(v6, &v12, 0);
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
      if (*((_QWORD *)&v12 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      result = sub_20AEC3594(v3, v2[2]);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_20AEC3658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_20B5325EC(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20AEC3670(uint64_t a1, unint64_t a2)
{
  std::mutex *v4;
  uint64_t *v5;
  std::mutex *v7;

  v4 = (std::mutex *)(*(_QWORD *)(a1 + 8) + 56);
  std::mutex::lock(v4);
  v7 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v7);
  v5 = sub_20AEC3718(a1, a2, (uint64_t)&v7);
  std::mutex::unlock(v7);
  std::mutex::unlock(v4);
  return v5;
}

void sub_20AEC36E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex *v10;

  std::mutex::unlock(a10);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20AEC3704(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AEC3718(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t *result;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::mutex *v22;
  unint64_t v23;

  v4 = *(_QWORD **)(a1 + 80);
  result = (uint64_t *)v4[6];
  if (result)
  {
    v8 = v4 + 6;
    v9 = (_QWORD *)v4[6];
    do
    {
      v10 = v9[4];
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = v9;
      else
        v12 = v9 + 1;
      if (v11)
        v8 = v9;
      v9 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v8 == v4 + 6)
    {
      return 0;
    }
    else if (v8[4] <= a2)
    {
      v13 = (uint64_t *)v8[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        v15 = v8;
        do
        {
          v14 = (uint64_t *)v15[2];
          v16 = *v14 == (_QWORD)v15;
          v15 = v14;
        }
        while (!v16);
      }
      if ((uint64_t *)v4[5] == v8)
        v4[5] = v14;
      --v4[7];
      sub_20AEC867C(result, v8);
      v17 = (std::__shared_weak_count *)v8[6];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      operator delete(v8);
      v20 = *(_QWORD *)(a1 + 80);
      if (a3)
      {
        sub_20AEC6608(*(_QWORD **)(a1 + 80), a2);
        v21 = *(_QWORD *)(v20 + 152);
      }
      else
      {
        v22 = (std::mutex *)(v20 + 64);
        std::mutex::lock((std::mutex *)(v20 + 64));
        sub_20AEC6608((_QWORD *)v20, a2);
        v21 = *(_QWORD *)(v20 + 152);
        std::mutex::unlock(v22);
      }
      *(_BYTE *)(a1 + 72) = v21 != 0;
      v23 = a2;
      sub_20AEC38DC((uint64_t)&v23, a1);
      return (uint64_t *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_20AEC38C8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEC38DC(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;

  v2 = *(_QWORD **)(*(_QWORD *)(a2 + 80) + 16);
  if (v2)
  {
    v3 = (unint64_t *)result;
    do
    {
      v4 = v2[2];
      v5 = *v3;
      v6 = *(_QWORD *)(v4 + 80);
      v7 = (std::mutex *)(v6 + 64);
      std::mutex::lock((std::mutex *)(v6 + 64));
      sub_20AEC6608((_QWORD *)v6, v5);
      v8 = *(_QWORD *)(v6 + 152);
      std::mutex::unlock(v7);
      *(_BYTE *)(v4 + 72) = v8 != 0;
      result = sub_20AEC38DC(v3, v2[2]);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_20AEC3964(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20AEC3978(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  std::mutex *v4;

  v2 = (std::mutex *)(*(_QWORD *)(a1 + 8) + 56);
  std::mutex::lock(v2);
  v4 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v4);
  while (1)
  {
    v3 = *(_QWORD *)(a1 + 80);
    if (!*(_QWORD *)(v3 + 56))
      break;
    sub_20AEC3718(a1, *(_QWORD *)(*(_QWORD *)(v3 + 40) + 32), (uint64_t)&v4);
  }
  std::mutex::unlock(v4);
  std::mutex::unlock(v2);
}

void sub_20AEC39F0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20AEC3A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex *v10;

  std::mutex::unlock(a10);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20AEC3A20(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::mutex *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;

  v4 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v4);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_20AEC3B30((uint64_t)a2, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 56));
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD **)(v5 + 40);
  v7 = (_QWORD *)(v5 + 48);
  if (v6 != (_QWORD *)(v5 + 48))
  {
    v8 = (_QWORD *)a2[1];
    do
    {
      if ((unint64_t)v8 >= a2[2])
      {
        v8 = sub_20AEC6728((uint64_t)a2, (__int128 *)(v6 + 5));
      }
      else
      {
        v9 = v6[6];
        *v8 = v6[5];
        v8[1] = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        v8 += 2;
      }
      a2[1] = v8;
      v12 = (_QWORD *)v6[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v6[2];
          v14 = *v13 == (_QWORD)v6;
          v6 = v13;
        }
        while (!v14);
      }
      v6 = v13;
    }
    while (v13 != v7);
  }
  std::mutex::unlock(v4);
}

void sub_20AEC3B10(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void **v2;

  sub_20AEC3C38(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20AEC3B30(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      sub_20AEC60B8();
    v4 = *(char **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_16:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v11 = *(char **)a1;
      v2 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2 != v11)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v2 - 1);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v2 -= 16;
        }
        while (v2 != v11);
        v2 = v11;
      }
      if (v2)
        goto LABEL_16;
    }
  }
}

void **sub_20AEC3C38(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

unint64_t sub_20AEC3CD0(uint64_t a1, const char *a2, int a3, unint64_t a4)
{
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;

  v8 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v8);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = v9 + 128;
  v11 = 40;
  if (a3)
    v11 = 128;
  else
    v10 = v9 + 40;
  if (!a4)
    goto LABEL_28;
  v12 = *(_QWORD **)(v10 + 8);
  if (!v12)
    goto LABEL_28;
  v13 = (_QWORD *)(v10 + 8);
  do
  {
    v14 = v12[4];
    v15 = v14 >= a4;
    if (v14 >= a4)
      v16 = v12;
    else
      v16 = v12 + 1;
    if (v15)
      v13 = v12;
    v12 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 == (_QWORD *)(v10 + 8) || (v17 = v13[4], v17 > a4))
  {
LABEL_28:
    if (!a2)
      goto LABEL_30;
    v18 = *(_QWORD **)(v9 + v11);
    v19 = (_QWORD *)(v10 + 8);
    if (v18 == (_QWORD *)(v10 + 8))
      goto LABEL_30;
    while (1)
    {
      v20 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v18[4] + 24))(v18[4]);
      if (v20 == a2 || !strcmp(v20, a2))
        break;
      v21 = (_QWORD *)v18[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v18[2];
          v23 = *v22 == (_QWORD)v18;
          v18 = v22;
        }
        while (!v23);
      }
      v18 = v22;
      if (v22 == v19)
        goto LABEL_30;
    }
    if (v18 == v19)
LABEL_30:
      v17 = 0;
    else
      v17 = v18[4];
  }
  std::mutex::unlock(v8);
  return v17;
}

void sub_20AEC3E14(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20AEC3E28(_QWORD *a1, int a2)
{
  _DWORD **v3;
  std::mutex *v5;
  uint64_t *v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t i;
  void **v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  void **v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  void *__p[2];
  __int128 v49;
  __int128 v50;

  v3 = (_DWORD **)a1[6];
  if (v3)
  {
    **v3 = a2;
    return;
  }
  v5 = (std::mutex *)(a1[1] + 56);
  std::mutex::lock(v5);
  v6 = (uint64_t *)operator new();
  v7 = (std::__shared_weak_count_vtbl *)operator new();
  LODWORD(v7->~__shared_weak_count) = a2;
  *v6 = (uint64_t)v7;
  v8 = (std::__shared_weak_count *)operator new();
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F2020;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = v7;
  v6[1] = (uint64_t)v8;
  v9 = a1[6];
  a1[6] = v6;
  if (!v9)
  {
    v13 = *v6;
    goto LABEL_13;
  }
  v10 = *(std::__shared_weak_count **)(v9 + 8);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  MEMORY[0x20BD3583C](v9, 0x30C40EEE2E2AFLL);
  v13 = *(_QWORD *)a1[6];
  v8 = *(std::__shared_weak_count **)(a1[6] + 8);
  if (v8)
  {
LABEL_13:
    v16 = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    v14 = 0;
    v15 = (std::__shared_weak_count *)a1[8];
    a1[7] = v13;
    a1[8] = v8;
    if (!v15)
      goto LABEL_21;
    goto LABEL_17;
  }
  v14 = 1;
  v15 = (std::__shared_weak_count *)a1[8];
  a1[7] = v13;
  a1[8] = 0;
  if (!v15)
    goto LABEL_21;
LABEL_17:
  v19 = (unint64_t *)&v15->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_21:
  if ((v14 & 1) == 0)
  {
    v21 = (unint64_t *)&v8->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v23 = *(_QWORD **)(a1[10] + 16);
  *(_OWORD *)__p = 0u;
  v49 = 0u;
  v50 = 0u;
  v24 = 0;
  if (v23)
  {
    v25 = v23;
    do
    {
      ++v24;
      v25 = (_QWORD *)*v25;
    }
    while (v25);
  }
  sub_20AEC9DE8(__p, v23, v24);
  i = *((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v27 = (void **)__p[1];
    v28 = v50;
    while (1)
    {
      v29 = *(uint64_t *)((char *)v27 + ((v28 >> 6) & 0x3FFFFFFFFFFFFF8));
      v30 = v28 & 0x1FF;
      v31 = *(_QWORD **)(v29 + 8 * v30);
      if (!v31[6])
      {
        v33 = a1[7];
        v32 = a1[8];
        if (v32)
        {
          v34 = (unint64_t *)(v32 + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        v36 = (std::__shared_weak_count *)v31[8];
        v31[7] = v33;
        v31[8] = v32;
        if (!v36)
          goto LABEL_42;
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
          v39 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v29 + 8 * v30) + 80) + 16);
          for (i = *((_QWORD *)&v50 + 1); v39; v39 = (_QWORD *)*v39)
          {
LABEL_47:
            v40 = (char *)__p[1];
            if ((void *)v49 == __p[1])
              v41 = 0;
            else
              v41 = (((_QWORD)v49 - (unint64_t)__p[1]) << 6) - 1;
            v42 = v50 + i;
            if (v41 == v42)
            {
              sub_20AEC6888((uint64_t)__p);
              v40 = (char *)__p[1];
              v42 = *((_QWORD *)&v50 + 1) + v50;
            }
            *(_QWORD *)(*(_QWORD *)&v40[(v42 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v42 & 0x1FF)) = v39[2];
            i = ++*((_QWORD *)&v50 + 1);
          }
        }
        else
        {
LABEL_42:
          v39 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v29 + 8 * v30) + 80) + 16);
          i = *((_QWORD *)&v50 + 1);
          if (v39)
            goto LABEL_47;
        }
      }
      v27 = (void **)__p[1];
      --i;
      v28 = v50 + 1;
      *(_QWORD *)&v50 = v28;
      *((_QWORD *)&v50 + 1) = i;
      if (v28 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        v27 = (void **)((char *)__p[1] + 8);
        v28 = v50 - 512;
        __p[1] = (char *)__p[1] + 8;
        *(_QWORD *)&v50 = v50 - 512;
        i = *((_QWORD *)&v50 + 1);
      }
      if (!i)
        goto LABEL_53;
    }
  }
  v27 = (void **)__p[1];
LABEL_53:
  v43 = (void **)v49;
  *((_QWORD *)&v50 + 1) = 0;
  v44 = v49 - (_QWORD)v27;
  if ((_QWORD)v49 - (_QWORD)v27 >= 0x11uLL)
  {
    do
    {
      operator delete(*v27);
      v43 = (void **)v49;
      v27 = (void **)((char *)__p[1] + 8);
      __p[1] = v27;
      v44 = v49 - (_QWORD)v27;
    }
    while ((_QWORD)v49 - (_QWORD)v27 > 0x10uLL);
  }
  v45 = v44 >> 3;
  if (v45 == 1)
  {
    v46 = 256;
  }
  else
  {
    if (v45 != 2)
      goto LABEL_60;
    v46 = 512;
  }
  *(_QWORD *)&v50 = v46;
LABEL_60:
  if (v27 != v43)
  {
    do
    {
      v47 = *v27++;
      operator delete(v47);
    }
    while (v27 != v43);
    if ((void *)v49 != __p[1])
      *(_QWORD *)&v49 = v49 + (((unint64_t)__p[1] - v49 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  std::mutex::unlock(v5);
}

void sub_20AEC4270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  std::mutex *v11;
  void *v13;

  if (a11 == a10)
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v13 = __p;
    if (!__p)
    {
LABEL_3:
      std::mutex::unlock(v11);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v13);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_20AEC42C8(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x20BD3583C](v3, 0x1000C4052888210);
  MEMORY[0x20BD3583C](v2, 0x30C40EEE2E2AFLL);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20AEC4314(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20AEC4328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_20AECA898((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEC4344(_QWORD *a1)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t i;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void **v35;
  void **v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v41;
  void *__p[2];
  __int128 v43;
  __int128 v44;

  if (a1[6])
  {
    if (!a1[5])
      return 0;
    v2 = (std::mutex *)(a1[1] + 56);
    std::mutex::lock(v2);
    v3 = a1[5];
    v5 = *(_QWORD *)(v3 + 56);
    v4 = *(_QWORD *)(v3 + 64);
    if (v4)
    {
      v6 = (unint64_t *)(v4 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v8 = (std::__shared_weak_count *)a1[8];
    a1[7] = v5;
    a1[8] = v4;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = *(_QWORD **)(a1[10] + 16);
    *(_OWORD *)__p = 0u;
    v43 = 0u;
    v44 = 0u;
    v12 = 0;
    if (v11)
    {
      v13 = v11;
      do
      {
        ++v12;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    sub_20AEC9DE8(__p, v11, v12);
    i = *((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v15 = (char *)__p[1];
      v16 = v44;
      do
      {
        v17 = *(_QWORD *)&v15[(v16 >> 6) & 0x3FFFFFFFFFFFFF8];
        v18 = v16 & 0x1FF;
        v19 = *(_QWORD **)(v17 + 8 * v18);
        if (!v19[6])
        {
          v21 = a1[7];
          v20 = a1[8];
          if (v20)
          {
            v22 = (unint64_t *)(v20 + 8);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          v24 = (std::__shared_weak_count *)v19[8];
          v19[7] = v21;
          v19[8] = v20;
          if (!v24)
            goto LABEL_27;
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
            v27 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v17 + 8 * v18) + 80) + 16);
            for (i = *((_QWORD *)&v44 + 1); v27; v27 = (_QWORD *)*v27)
            {
LABEL_32:
              v28 = (char *)__p[1];
              if ((void *)v43 == __p[1])
                v29 = 0;
              else
                v29 = (((_QWORD)v43 - (unint64_t)__p[1]) << 6) - 1;
              v30 = v44 + i;
              if (v29 == v30)
              {
                sub_20AEC6888((uint64_t)__p);
                v28 = (char *)__p[1];
                v30 = *((_QWORD *)&v44 + 1) + v44;
              }
              *(_QWORD *)(*(_QWORD *)&v28[(v30 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v30 & 0x1FF)) = v27[2];
              i = ++*((_QWORD *)&v44 + 1);
            }
          }
          else
          {
LABEL_27:
            v27 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v17 + 8 * v18) + 80) + 16);
            i = *((_QWORD *)&v44 + 1);
            if (v27)
              goto LABEL_32;
          }
        }
        v15 = (char *)__p[1];
        --i;
        v16 = v44 + 1;
        *(_QWORD *)&v44 = v16;
        *((_QWORD *)&v44 + 1) = i;
        if (v16 >= 0x400)
        {
          operator delete(*(void **)__p[1]);
          v15 = (char *)__p[1] + 8;
          v16 = v44 - 512;
          __p[1] = (char *)__p[1] + 8;
          *(_QWORD *)&v44 = v44 - 512;
          i = *((_QWORD *)&v44 + 1);
        }
      }
      while (i);
    }
    v31 = a1[6];
    a1[6] = 0;
    if (v31)
    {
      v32 = *(std::__shared_weak_count **)(v31 + 8);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      MEMORY[0x20BD3583C](v31, 0x30C40EEE2E2AFLL);
    }
    v35 = (void **)__p[1];
    v36 = (void **)v43;
    *((_QWORD *)&v44 + 1) = 0;
    v37 = v43 - (unint64_t)__p[1];
    if ((unint64_t)v43 - (unint64_t)__p[1] >= 0x11)
    {
      do
      {
        operator delete(*v35);
        v36 = (void **)v43;
        v35 = (void **)((char *)__p[1] + 8);
        __p[1] = v35;
        v37 = v43 - (_QWORD)v35;
      }
      while ((_QWORD)v43 - (_QWORD)v35 > 0x10uLL);
    }
    v38 = v37 >> 3;
    if (v38 == 1)
    {
      v39 = 256;
    }
    else
    {
      if (v38 != 2)
        goto LABEL_52;
      v39 = 512;
    }
    *(_QWORD *)&v44 = v39;
LABEL_52:
    if (v35 != v36)
    {
      do
      {
        v41 = *v35++;
        operator delete(v41);
      }
      while (v35 != v36);
      if ((void *)v43 != __p[1])
        *(_QWORD *)&v43 = v43 + (((unint64_t)__p[1] - v43 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    if (__p[0])
      operator delete(__p[0]);
    std::mutex::unlock(v2);
  }
  return 1;
}

void sub_20AEC46BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  std::mutex *v11;
  void *v13;

  if (a11 == a10)
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v13 = __p;
    if (!__p)
    {
LABEL_3:
      std::mutex::unlock(v11);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v13);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_20AEC4714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_20AECA898((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void sub_20AEC4730(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::mutex *v4;

  v4 = (std::mutex *)(*(_QWORD *)(a1 + 8) + 56);
  std::mutex::lock(v4);
  sub_20AEC478C(a1, a2);
  std::mutex::unlock(v4);
}

void sub_20AEC4778(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20AEC478C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD **v4;
  unsigned int v5;
  const char *v6;
  size_t v7;
  size_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  _QWORD *i;
  void *v16;
  unint64_t v17;
  __int128 v18;
  _BYTE *v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v4 = *(_DWORD ***)(a1 + 48);
  if (v4)
  {
    v5 = **v4 - 1;
    if (v5 > 5)
    {
      v6 = "{error}";
      v7 = strlen("{error}");
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_31;
    }
    else
    {
      v6 = off_24C3F2140[v5];
      v7 = strlen(v6);
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_31:
        sub_20AEC0138();
    }
  }
  else
  {
    v6 = "NONE";
    v7 = strlen("NONE");
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_31;
  }
  v8 = v7;
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    v9 = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&v21 + 1) = v8;
    v22 = v12 | 0x8000000000000000;
    *(_QWORD *)&v21 = v9;
LABEL_13:
    memcpy(v9, v6, v8);
    *((_BYTE *)v9 + v8) = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 56);
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_14;
  }
  HIBYTE(v22) = v7;
  v9 = &v21;
  if (v7)
    goto LABEL_13;
  LOBYTE(v21) = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 56);
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
LABEL_9:
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 32);
    goto LABEL_15;
  }
LABEL_14:
  sub_20AEC60F4((_BYTE *)a2, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
LABEL_15:
  v13 = (_BYTE *)(a2 + 24);
  if (SHIBYTE(v22) < 0)
  {
    v16 = (void *)v21;
    sub_20AEC60F4(v13, (void *)v21, *((unint64_t *)&v21 + 1));
    *(_QWORD *)(a2 + 56) = 0;
    v14 = (_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 48) = v10;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    operator delete(v16);
    for (i = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 16); i; i = (_QWORD *)*i)
    {
LABEL_21:
      while (1)
      {
        sub_20AEC478C(&v21, i[2]);
        v17 = *(_QWORD *)(a2 + 64);
        if (v17 < *(_QWORD *)(a2 + 72))
          break;
        *(_QWORD *)(a2 + 64) = sub_20AEC7168(v14, (uint64_t)&v21);
        sub_20AEC0FC8((uint64_t)&v21);
        i = (_QWORD *)*i;
        if (!i)
          return;
      }
      if (SHIBYTE(v22) < 0)
      {
        sub_20AEC60F4(*(_BYTE **)(a2 + 64), (void *)v21, *((unint64_t *)&v21 + 1));
      }
      else
      {
        v18 = v21;
        *(_QWORD *)(v17 + 16) = v22;
        *(_OWORD *)v17 = v18;
      }
      v19 = (_BYTE *)(v17 + 24);
      if (SHIBYTE(v24) < 0)
      {
        sub_20AEC60F4(v19, (void *)v23, *((unint64_t *)&v23 + 1));
      }
      else
      {
        v20 = v23;
        *(_QWORD *)(v17 + 40) = v24;
        *(_OWORD *)v19 = v20;
      }
      *(_QWORD *)(v17 + 48) = v25;
      *(_QWORD *)(v17 + 56) = 0;
      *(_QWORD *)(v17 + 64) = 0;
      *(_QWORD *)(v17 + 72) = 0;
      *(_OWORD *)(v17 + 56) = v26;
      *(_QWORD *)(v17 + 72) = v27;
      v26 = 0uLL;
      v27 = 0;
      *(_QWORD *)(a2 + 64) = v17 + 80;
      *(_QWORD *)(a2 + 64) = v17 + 80;
      sub_20AEC0FC8((uint64_t)&v21);
    }
  }
  else
  {
    *(_OWORD *)v13 = v21;
    *(_QWORD *)(a2 + 40) = v22;
    *(_QWORD *)(a2 + 56) = 0;
    v14 = (_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 48) = v10;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    i = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 16);
    if (i)
      goto LABEL_21;
  }
}

void sub_20AEC4A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 + 23) < 0)
  {
    operator delete(*(void **)v14);
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AEC4A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  *(_QWORD *)(v9 + 64) = v10;
  sub_20AEC0FC8((uint64_t)&a9);
  sub_20AEC0FC8(v9);
  JUMPOUT(0x20AEC4AB0);
}

uint64_t sub_20AEC4AB8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = *(_QWORD *)(result + 80);
  v3 = *(_QWORD **)(v2 + 128);
  v4 = (_QWORD *)(v2 + 136);
  if (v3 != (_QWORD *)(v2 + 136))
  {
    do
    {
      result = v3[5];
      if (*(_BYTE *)(result + 8))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a2);
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  return result;
}

_QWORD **sub_20AEC4B4C@<X0>(_QWORD **result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = **result;
  return result;
}

void sub_20AEC4B5C(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;

  v3 = *a1;
  sub_20AEC17E0(&v3, a2, a3);
}

void sub_20AEC4B84(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *__p;
  char *v23;
  uint64_t v24[2];
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_DWORD *)(v2 + 48) = 1065353216;
  *(_QWORD *)(v2 + 56) = 850045863;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 112) = 0;
  v3 = operator new();
  sub_20AEC4F0C();
  *(_BYTE *)(v3 + 8) = 1;
  *(_QWORD *)v3 = &off_24C3F1F78;
  v4 = (_QWORD *)operator new();
  *v4 = off_24C3F1EF8;
  v5 = v4 + 1;
  if (byte_254637257 < 0)
  {
    sub_20AEC60F4(v5, (void *)xmmword_254637240, *((unint64_t *)&xmmword_254637240 + 1));
  }
  else
  {
    *(_OWORD *)v5 = xmmword_254637240;
    v4[3] = unk_254637250;
  }
  *(_QWORD *)(v3 + 16) = v4;
  *(_DWORD *)(v3 + 24) = 63;
  v24[1] = v3;
  v6 = (std::__shared_weak_count *)operator new();
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F20C0;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  v25 = v6;
  v8 = operator new();
  v24[0] = v2;
  v26 = v3;
  v27 = v6;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  sub_20AEC5000(&__p, &v26, 1uLL);
  sub_20AEC1058(v8, v24, (uint64_t)&__p);
  v10 = (char *)__p;
  if (__p)
  {
    v11 = v23;
    v12 = __p;
    if (v23 != __p)
    {
      do
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 16;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v23 = v10;
    operator delete(v12);
  }
  v16 = v27;
  if (v27)
  {
    v17 = (unint64_t *)&v27->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)v2 = v8;
  sub_20AEC04D8((uint64_t *)(v2 + 8), v2);
  *a1 = v2;
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20AEC4E50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x20BD3583C](v1, 0x1093C402D7449D9);
  MEMORY[0x20BD3583C](v2, 0x10A1C40503A8522);
  _Unwind_Resume(a1);
}

_QWORD *sub_20AEC4F0C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)qword_254637098);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(qword_254637098))
    return &qword_254637238;
  sub_20AEC0D64(__p, "%d [%t] %p %c: %m%n");
  sub_20AEC5104(&qword_254637238, (__int128 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))sub_20AEC51AC, &qword_254637238, &dword_20AEBB000);
  __cxa_guard_release(qword_254637098);
  return &qword_254637238;
}

void sub_20AEC4FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(qword_254637098);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(qword_254637098);
  _Unwind_Resume(a1);
}

_QWORD *sub_20AEC5000(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60)
      sub_20AEC60B8();
    v5 = 2 * a3;
    v6 = operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    v7 = &a2[v5];
    do
    {
      v8 = a2[1];
      *v6 = *a2;
      v6[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v6 += 2;
    }
    while (a2 != v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_20AEC50A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    sub_20B532634((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20AEC50C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 48))(&v4);
  *a2 = v4;
  return result;
}

_QWORD *sub_20AEC5104(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;
  unsigned __int8 v5;
  unsigned __int8 v7;

  *a1 = off_24C3F1EF8;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20AEC60F4(v3, *(void **)a2, *((_QWORD *)a2 + 1));
    v7 = atomic_load((unsigned __int8 *)&qword_2546370B8);
    if ((v7 & 1) != 0)
      return a1;
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
    v5 = atomic_load((unsigned __int8 *)&qword_2546370B8);
    if ((v5 & 1) != 0)
      return a1;
  }
  if (!__cxa_guard_acquire(&qword_2546370B8))
    return a1;
  qword_2546370B0 = std::chrono::steady_clock::now().__d_.__rep_;
  __cxa_guard_release(&qword_2546370B8);
  return a1;
}

uint64_t sub_20AEC51AC(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_24C3F1EF8;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_20AEC51F8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C3F1EF8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x20BD3583CLL);
}

char *sub_20AEC5244()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637070);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254637070))
    return aPatternlayout;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], aPatternlayout, &dword_20AEBB000);
  __cxa_guard_release(&qword_254637070);
  return aPatternlayout;
}

uint64_t sub_20AEC52B4(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  tm *v5;
  size_t v6;
  size_t v7;
  size_t v8;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  void **__dst;
  size_t v18;
  int64_t v19;
  tm __t;
  time_t v21;
  char __s[24];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = *a2 / 1000 % 1000;
  if (v3 >= 0)
    v4 = *a2 / 1000 % 1000;
  else
    v4 = v3 + 1000;
  *(_QWORD *)&__t.tm_sec = *a2 - 1000 * v4;
  v21 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&__t);
  v5 = localtime_r(&v21, &__t);
  strcpy(__s, "yyyy.mm.dd.HH-MM.SS.fff");
  v6 = strlen(__s);
  strftime(__s, v6, "%Y-%m-%d %H:%M:%S", v5);
  v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    v18 = v8;
    v19 = v11 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v19) = v7;
  p_dst = (void **)&__dst;
  if (v7)
LABEL_11:
    memcpy(p_dst, __s, v8);
  v12 = (_QWORD *)(a1 + 16);
  *((_BYTE *)p_dst + v8) = 0;
  if (v19 >= 0)
    v13 = (void **)&__dst;
  else
    v13 = __dst;
  if (v19 >= 0)
    v14 = HIBYTE(v19);
  else
    v14 = v18;
  v15 = sub_20AEC01D0(v12, (uint64_t)v13, v14);
  sub_20AEC01D0(v15, (uint64_t)",", 1);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__dst);
    if (v4 <= 9)
      goto LABEL_20;
  }
  else if (v4 <= 9)
  {
LABEL_20:
    sub_20AEC01D0(v12, (uint64_t)"00", 2);
    return std::ostream::operator<<();
  }
  if (v4 <= 0x63)
    sub_20AEC01D0(v12, (uint64_t)"0", 1);
  return std::ostream::operator<<();
}

void sub_20AEC54CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20AEC54F4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637070);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254637070))
    return aPatternlayout;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], aPatternlayout, &dword_20AEBB000);
  __cxa_guard_release(&qword_254637070);
  return aPatternlayout;
}

void sub_20AEC5564(int a1, void **a2)
{
  unsigned __int8 v2;
  void **v3;
  int v4;
  void *v5[2];
  uint64_t v6;
  void *__p[2];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2546370A8);
  if ((v2 & 1) == 0)
  {
    v3 = a2;
    v4 = __cxa_guard_acquire(&qword_2546370A8);
    a2 = v3;
    if (v4)
    {
      sub_20AEC5244();
      if (byte_2546300E7 < 0)
      {
        sub_20AEC60F4(v5, *(void **)aPatternlayout, *(unint64_t *)&aPatternlayout[8]);
      }
      else
      {
        *(_OWORD *)v5 = *(_OWORD *)aPatternlayout;
        v6 = unk_2546300E0;
      }
      v8 = 0x700000000000000;
      *(_OWORD *)__p = *(_OWORD *)"ILayout";
      sub_20AEC7620(qword_254637170, (uint64_t)v5, 2uLL);
      if (SHIBYTE(v8) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v6) < 0)
        operator delete(v5[0]);
      __cxa_atexit((void (*)(void *))sub_20AEC2E90, qword_254637170, &dword_20AEBB000);
      __cxa_guard_release(&qword_2546370A8);
      a2 = v3;
    }
  }
  if (a2 != (void **)qword_254637170)
    sub_20AEC77DC(a2, (void **)qword_254637170[0], unk_254637178, 0xAAAAAAAAAAAAAAABLL * ((unk_254637178 - qword_254637170[0]) >> 3));
}

void sub_20AEC56C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546370A8);
  _Unwind_Resume(a1);
}

void sub_20AEC56DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      __cxa_guard_abort(&qword_2546370A8);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  __cxa_guard_abort(&qword_2546370A8);
  _Unwind_Resume(a1);
}

_BYTE *sub_20AEC5734@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _BYTE *result;

  v4 = (_QWORD *)operator new();
  *v4 = off_24C3F1EF8;
  result = v4 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    result = sub_20AEC60F4(result, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 8);
    v4[3] = *(_QWORD *)(a1 + 24);
  }
  *a2 = v4;
  return result;
}

void sub_20AEC57C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEC57E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  size_t v10;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned __int8 v18;
  const char *v19;
  uint64_t v20;
  int v21;
  size_t v22;
  void **p_dst;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  size_t v32;
  unint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _QWORD v41[2];
  _QWORD v42[3];
  const void *v43;
  uint64_t v44;
  const void *v45;
  unint64_t v46;
  void *__p;
  char v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  void **__dst;
  size_t v53;
  int64_t v54;

  sub_20AEC0BD8((uint64_t)v41);
  if (*(char *)(a1 + 31) < 0)
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (v5 < 2)
      goto LABEL_65;
    goto LABEL_5;
  }
  v5 = *(unsigned __int8 *)(a1 + 31);
  if (v5 >= 2)
  {
LABEL_5:
    v6 = 0;
    v7 = (_QWORD *)(a1 + 8);
    v8 = 1;
    while (1)
    {
      if (*(char *)(a1 + 31) < 0)
      {
        v11 = *(char *)(a1 + 31);
        if (*(_BYTE *)(*v7 + v6) != 37)
        {
LABEL_21:
          v16 = a1 + 8;
          if (v11 < 0)
            v16 = *v7;
          LOBYTE(__dst) = *(_BYTE *)(v16 + v6);
          sub_20AEC01D0(v42, (uint64_t)&__dst, 1);
          v8 = v6;
          goto LABEL_8;
        }
      }
      else
      {
        v11 = *(char *)(a1 + 31);
        if (*((_BYTE *)v7 + v6) != 37)
          goto LABEL_21;
      }
      v12 = a1 + 8;
      if (v11 < 0)
        v12 = *v7;
      v13 = (_BYTE *)(v12 + v8);
      if (v5 <= v8 + 1)
        v14 = v8 + 1;
      else
        v14 = v5;
      while (2)
      {
        switch(*v13)
        {
          case '%':
            v19 = "%";
            goto LABEL_33;
          case 'F':
            v9 = *(char **)(a2 + 32);
            v17 = strrchr(v9, 47);
            if (v17)
            {
              v9 = v17 + 1;
            }
            else
            {
              v27 = strrchr(v9, 92);
              if (v27)
                v9 = v27 + 1;
            }
            goto LABEL_7;
          case 'L':
            std::ostream::operator<<();
            goto LABEL_8;
          case 'c':
            v9 = *(char **)a2;
            goto LABEL_7;
          case 'd':
            sub_20AEC52B4((uint64_t)v41, (_QWORD *)(a2 + 16));
            goto LABEL_8;
          case 'f':
            v9 = *(char **)(a2 + 48);
            goto LABEL_7;
          case 'm':
            v20 = *(_QWORD *)(a2 + 56);
            v21 = *(_DWORD *)(v20 + 120);
            if ((v21 & 0x10) != 0)
            {
              v24 = *(_QWORD *)(v20 + 112);
              v25 = *(_QWORD *)(v20 + 72);
              if (v24 < v25)
              {
                *(_QWORD *)(v20 + 112) = v25;
                v24 = v25;
              }
              v26 = *(const void **)(v20 + 64);
              v22 = v24 - (_QWORD)v26;
              if (v24 - (unint64_t)v26 > 0x7FFFFFFFFFFFFFF7)
LABEL_83:
                sub_20AEC0138();
            }
            else
            {
              if ((v21 & 8) == 0)
              {
                v22 = 0;
                HIBYTE(v54) = 0;
                p_dst = (void **)&__dst;
                goto LABEL_55;
              }
              v26 = *(const void **)(v20 + 40);
              v22 = *(_QWORD *)(v20 + 56) - (_QWORD)v26;
              if (v22 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_83;
            }
            if (v22 >= 0x17)
            {
              v28 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v22 | 7) != 0x17)
                v28 = v22 | 7;
              v29 = v28 + 1;
              p_dst = (void **)operator new(v28 + 1);
              v53 = v22;
              v54 = v29 | 0x8000000000000000;
              __dst = p_dst;
LABEL_54:
              memmove(p_dst, v26, v22);
              goto LABEL_55;
            }
            HIBYTE(v54) = v22;
            p_dst = (void **)&__dst;
            if (v22)
              goto LABEL_54;
LABEL_55:
            *((_BYTE *)p_dst + v22) = 0;
            if (v54 >= 0)
              v30 = (void **)&__dst;
            else
              v30 = __dst;
            if (v54 >= 0)
              v31 = HIBYTE(v54);
            else
              v31 = v53;
            sub_20AEC01D0(v42, (uint64_t)v30, v31);
            if (SHIBYTE(v54) < 0)
              operator delete(__dst);
LABEL_8:
            v6 = v8 + 1;
            v8 += 2;
            if (v8 >= v5)
              goto LABEL_65;
            break;
          case 'n':
            v19 = "\n";
LABEL_33:
            sub_20AEC01D0(v42, (uint64_t)v19, 1);
            goto LABEL_8;
          case 'p':
            v9 = off_24C3F1F30[*(unsigned int *)(a2 + 24)];
LABEL_7:
            v10 = strlen(v9);
            sub_20AEC01D0(v42, (uint64_t)v9, v10);
            goto LABEL_8;
          case 'r':
            v18 = atomic_load((unsigned __int8 *)&qword_2546370B8);
            if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_2546370B8))
            {
              qword_2546370B0 = std::chrono::steady_clock::now().__d_.__rep_;
              __cxa_guard_release(&qword_2546370B8);
            }
            std::ostream::operator<<();
            goto LABEL_8;
          case 't':
            pthread_self();
            std::ostream::operator<<();
            goto LABEL_8;
          default:
            v15 = a1 + 8;
            if (*(char *)(a1 + 31) < 0)
              v15 = *v7;
            v13 = (_BYTE *)(v15 + v8++ + 1);
            if (v8 < v5)
              continue;
            v8 = v14;
            goto LABEL_8;
        }
        break;
      }
    }
  }
LABEL_65:
  if ((v50 & 0x10) != 0)
  {
    v33 = v49;
    if (v49 < v46)
    {
      v49 = v46;
      v33 = v46;
    }
    v34 = v45;
    v32 = v33 - (_QWORD)v45;
    if (v33 - (unint64_t)v45 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_82;
  }
  else
  {
    if ((v50 & 8) == 0)
    {
      v32 = 0;
      a3[23] = 0;
      goto LABEL_78;
    }
    v34 = v43;
    v32 = v44 - (_QWORD)v43;
    if ((unint64_t)(v44 - (_QWORD)v43) > 0x7FFFFFFFFFFFFFF7)
LABEL_82:
      sub_20AEC0138();
  }
  if (v32 >= 0x17)
  {
    v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v35 = v32 | 7;
    v36 = v35 + 1;
    v37 = operator new(v35 + 1);
    *((_QWORD *)a3 + 1) = v32;
    *((_QWORD *)a3 + 2) = v36 | 0x8000000000000000;
    *(_QWORD *)a3 = v37;
    a3 = v37;
    goto LABEL_77;
  }
  a3[23] = v32;
  if (v32)
LABEL_77:
    memmove(a3, v34, v32);
LABEL_78:
  a3[v32] = 0;
  v41[0] = *MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v41 + *(_QWORD *)(v41[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v42[0] = v38;
  v42[1] = MEMORY[0x24BEDB848] + 16;
  if (v48 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD35758](&v51);
}

void sub_20AEC5D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC2E08((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20AEC5D90(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C3F1F78;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20AEC5DD4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C3F1F78;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD3583CLL);
}

const char *sub_20AEC5E28()
{
  return "ConsoleAppender";
}

void sub_20AEC5E34(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  int v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  void *p_p;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  int v14;
  void *__p;
  uint64_t v16;
  unsigned __int8 v17;

  if (((1 << (*(_DWORD *)(a2 + 24) - 1)) | *(_DWORD *)(a1 + 24)) == *(_DWORD *)(a1 + 24))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_2546370C0);
    if ((v3 & 1) == 0)
    {
      v13 = a1;
      v14 = __cxa_guard_acquire(&qword_2546370C0);
      a1 = v13;
      if (v14)
      {
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_2546300E8, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546370C0);
        a1 = v13;
      }
    }
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(&__p, *(_QWORD *)(a1 + 16), a2);
    std::mutex::lock(&stru_2546300E8);
    v4 = *(_DWORD *)(a2 + 24);
    if ((v4 - 1) < 3)
    {
      v9 = atomic_load((unsigned __int8 *)qword_2546370C8);
      if ((v9 & 1) == 0 && __cxa_guard_acquire(qword_2546370C8))
      {
        qword_254637148 = MEMORY[0x24BEDB318];
        qword_254637150 = MEMORY[0x24BEDB310];
        __cxa_guard_release(qword_2546370C8);
      }
      if ((v17 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v17 & 0x80u) == 0)
        v11 = v17;
      else
        v11 = v16;
      sub_20AEC01D0((_QWORD *)qword_254637148, (uint64_t)p_p, v11);
      v12 = atomic_load((unsigned __int8 *)qword_2546370C8);
      if ((v12 & 1) != 0)
        goto LABEL_22;
    }
    else
    {
      if ((v4 - 4) >= 3)
        goto LABEL_23;
      v5 = atomic_load((unsigned __int8 *)qword_2546370C8);
      if ((v5 & 1) == 0 && __cxa_guard_acquire(qword_2546370C8))
      {
        qword_254637148 = MEMORY[0x24BEDB318];
        qword_254637150 = MEMORY[0x24BEDB310];
        __cxa_guard_release(qword_2546370C8);
      }
      if ((v17 & 0x80u) == 0)
        v6 = &__p;
      else
        v6 = __p;
      if ((v17 & 0x80u) == 0)
        v7 = v17;
      else
        v7 = v16;
      sub_20AEC01D0((_QWORD *)qword_254637150, (uint64_t)v6, v7);
      v8 = atomic_load((unsigned __int8 *)qword_2546370C8);
      if ((v8 & 1) != 0)
      {
LABEL_22:
        std::ostream::flush();
LABEL_23:
        std::mutex::unlock(&stru_2546300E8);
        if ((char)v17 < 0)
          operator delete(__p);
        return;
      }
    }
    if (__cxa_guard_acquire(qword_2546370C8))
    {
      qword_254637148 = MEMORY[0x24BEDB318];
      qword_254637150 = MEMORY[0x24BEDB310];
      __cxa_guard_release(qword_2546370C8);
    }
    goto LABEL_22;
  }
}

void sub_20AEC6070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *sub_20AEC60A0()
{
  return "";
}

const char *sub_20AEC60AC()
{
  return "ConsoleAppender";
}

void sub_20AEC60B8()
{
  sub_20AEC014C("vector");
}

void sub_20AEC60CC()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void *sub_20AEC60F4(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void ***sub_20AEC6180(void ***result)
{
  void ***v1;
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          v4 = sub_20AEC0FC8(v4 - 80);
        while ((void *)v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_20AEC6208(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AEC622C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x20BD3583CLL);
  return result;
}

uint64_t sub_20AEC624C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t *sub_20AEC62BC(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_20AEC6348(v2 + 128, *(_QWORD **)(v2 + 136));
    std::mutex::~mutex((std::mutex *)(v2 + 64));
    sub_20AEC6348(v2 + 40, *(_QWORD **)(v2 + 48));
    v3 = *(_QWORD **)(v2 + 16);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)v2;
    *(_QWORD *)v2 = 0;
    if (v5)
      operator delete(v5);
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

void sub_20AEC6348(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    sub_20AEC6348(a1, *a2);
    sub_20AEC6348(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[6];
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      operator delete(a2);
    }
    else
    {
LABEL_6:
      operator delete(a2);
    }
  }
}

char *sub_20AEC63D0(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20AEC60F4(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_20AEC6590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEC65A4(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20AEC6608(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v4 = a1 + 17;
  v3 = (uint64_t *)a1[17];
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4)
    {
      v10 = v5[4];
      if (v10 <= a2)
      {
        if (*(_BYTE *)(v10 + 8))
          --a1[19];
        v11 = (uint64_t *)v5[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          v13 = v5;
          do
          {
            v12 = (uint64_t *)v13[2];
            v14 = *v12 == (_QWORD)v13;
            v13 = v12;
          }
          while (!v14);
        }
        if ((uint64_t *)a1[16] == v5)
          a1[16] = v12;
        --a1[18];
        sub_20AEC867C(v3, v5);
        v15 = (std::__shared_weak_count *)v5[6];
        if (!v15)
          goto LABEL_27;
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          operator delete(v5);
        }
        else
        {
LABEL_27:
          operator delete(v5);
        }
      }
    }
  }
}

_OWORD *sub_20AEC6728(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  _OWORD *v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_20AEC60B8();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_20AEC60CC();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = *a2;
  *(_OWORD *)v11 = *a2;
  if (*((_QWORD *)&v12 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v3 = *(_QWORD **)a1;
    v4 = *(_QWORD **)(a1 + 8);
  }
  v15 = &v10[v9];
  v16 = v11 + 16;
  if (v4 == v3)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    if (!v3)
      return v16;
    goto LABEL_23;
  }
  do
  {
    v17 = *((_OWORD *)v4 - 1);
    v4 -= 2;
    *((_OWORD *)v11 - 1) = v17;
    v11 -= 16;
    *v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  v18 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v15;
  if (v3 != v18)
  {
    do
    {
      v19 = (std::__shared_weak_count *)*(v3 - 1);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v3 -= 2;
    }
    while (v3 != v18);
    v3 = v18;
  }
  if (v3)
LABEL_23:
    operator delete(v3);
  return v16;
}

void sub_20AEC6888(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_20AEC60CC();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_20AEC6E44((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_20AEC6FD0((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_20AEC60CC();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_20AEC60CC();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_20AEC6DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_20AEC6E00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20AEC6E14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20AEC6E2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20AEC6E44(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    sub_20AEC60CC();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_20AEC6FD0(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        sub_20AEC60CC();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

uint64_t sub_20AEC7168(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _BYTE *v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  void *v15;
  char *v17;
  __int128 v18;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_20AEC60B8();
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      sub_20AEC60CC();
    v7 = operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[80 * v3];
  v17 = v8;
  *((_QWORD *)&v18 + 1) = &v7[80 * v6];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20AEC60F4(&v7[80 * v3], *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  }
  v9 = &v7[80 * v3 + 24];
  if (*(char *)(a2 + 47) < 0)
  {
    sub_20AEC60F4(v9, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)&v7[80 * v3 + 40] = *(_QWORD *)(a2 + 40);
  }
  v10 = 0;
  v11 = &v7[80 * v3];
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)&v18 = v11 + 80;
  v13 = (void *)*a1;
  for (i = a1[1]; (void *)(i + v10) != v13; sub_20AEC0E14((uint64_t)&v17[v10], (__int128 *)(v10 + i)))
    v10 -= 80;
  v15 = (void *)*a1;
  v14 = a1[1];
  *a1 = &v17[v10];
  for (*(_OWORD *)(a1 + 1) = v18; (void *)v14 != v15; v14 = sub_20AEC0FC8(v14 - 80))
    ;
  if (v15)
    operator delete(v15);
  return v18;
}

void sub_20AEC7340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 + 23) < 0)
  {
    operator delete(*(void **)v4);
    sub_20AEC73A8((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_20AEC73A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEC73A8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    sub_20AEC0FC8(i - 80);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20AEC73F8()
{
  sub_20AEC749C("basic_string");
}

_QWORD *sub_20AEC740C(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!a3)
    return result;
  v3 = result;
  v4 = *((char *)result + 23);
  if (v4 < 0)
  {
    v6 = (_QWORD *)*result;
    v5 = result[1];
    v7 = v5 - a2;
    if (v5 - a2 >= a3)
      v8 = a3;
    else
      v8 = v5 - a2;
    if (v5 - a2 <= a3)
      goto LABEL_8;
  }
  else
  {
    v5 = *((unsigned __int8 *)result + 23);
    v6 = result;
    v7 = v5 - a2;
    if (v5 - a2 >= a3)
      v8 = a3;
    else
      v8 = *((unsigned __int8 *)result + 23) - a2;
    if (v7 <= a3)
      goto LABEL_8;
  }
  result = memmove((char *)v6 + a2, (char *)v6 + a2 + v8, v7 - v8);
  LOBYTE(v4) = *((_BYTE *)v3 + 23);
LABEL_8:
  v9 = v5 - v8;
  if ((v4 & 0x80) != 0)
    v3[1] = v9;
  else
    *((_BYTE *)v3 + 23) = v9 & 0x7F;
  *((_BYTE *)v6 + v9) = 0;
  return result;
}

void sub_20AEC749C(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_20AEC74EC(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
}

void sub_20AEC74D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_20AEC74EC(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

BOOL sub_20AEC7510(int __c)
{
  unsigned __int8 v2;
  size_t v3;
  uint64_t *v4;
  _BYTE *v5;

  v2 = atomic_load((unsigned __int8 *)qword_254637078);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_254637078))
  {
    qword_254637158 = (uint64_t)operator new(0x48uLL);
    *(_OWORD *)&qword_254637160 = xmmword_20B5B03E0;
    strcpy((char *)qword_254637158, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254637158, &dword_20AEBB000);
    __cxa_guard_release(qword_254637078);
  }
  if (byte_25463716F >= 0)
    v3 = byte_25463716F;
  else
    v3 = qword_254637160;
  if (!v3)
    return 1;
  if (byte_25463716F >= 0)
    v4 = &qword_254637158;
  else
    v4 = (uint64_t *)qword_254637158;
  v5 = memchr(v4, __c, v3);
  return !v5 || v5 - (_BYTE *)v4 == -1;
}

void sub_20AEC7608(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_254637078);
  _Unwind_Resume(a1);
}

_QWORD *sub_20AEC7620(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  __int128 *v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      sub_20AEC60B8();
    v5 = 24 * a3;
    v6 = (char *)operator new(24 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v9 = &v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_20AEC60F4(v9, *(void **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v8 = *v10;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v9 = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_20AEC76F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20AEC7748(&a9);
  _Unwind_Resume(a1);
}

void sub_20AEC770C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_20AEC7748(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20AEC7748(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_20AEC77DC(void **a1, void **a2, void **a3, size_t __sz)
{
  void **v6;
  uint64_t v8;
  void **v9;
  void **v10;
  void *v11;
  void **v12;
  void **v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  char v17;
  __int128 v18;
  void **v19;
  void *v20;
  size_t v21;
  char v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void **v31;
  void **v32;
  uint64_t v33;
  __int128 v34;
  void **v35;
  void **v36;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = (void **)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)*a1) >> 3) >= __sz)
  {
    v12 = (void **)a1[1];
    if (0xAAAAAAAAAAAAAAABLL * (v12 - v9) >= __sz)
    {
      if (a2 == a3)
      {
        v19 = (void **)*a1;
      }
      else
      {
        v19 = (void **)*a1;
        do
        {
          if (v6 != v9)
          {
            v22 = *((_BYTE *)v6 + 23);
            if (*((char *)v9 + 23) < 0)
            {
              if (v22 >= 0)
                v20 = v6;
              else
                v20 = *v6;
              if (v22 >= 0)
                v21 = *((unsigned __int8 *)v6 + 23);
              else
                v21 = (size_t)v6[1];
              sub_20AEC8090(v9, v20, v21);
            }
            else if ((*((_BYTE *)v6 + 23) & 0x80) != 0)
            {
              sub_20AEC7FCC(v9, *v6, (size_t)v6[1]);
            }
            else
            {
              v23 = *(_OWORD *)v6;
              v9[2] = v6[2];
              *(_OWORD *)v9 = v23;
            }
          }
          v6 += 3;
          v9 += 3;
          v19 += 3;
        }
        while (v6 != a3);
        v12 = (void **)a1[1];
      }
      while (v12 != v19)
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
      a1[1] = v19;
    }
    else
    {
      v13 = &a2[v12 - v9];
      if (v12 != v9)
      {
        v14 = 8 * (v12 - v9);
        do
        {
          if (v6 != v9)
          {
            v17 = *((_BYTE *)v6 + 23);
            if (*((char *)v9 + 23) < 0)
            {
              if (v17 >= 0)
                v15 = v6;
              else
                v15 = *v6;
              if (v17 >= 0)
                v16 = *((unsigned __int8 *)v6 + 23);
              else
                v16 = (size_t)v6[1];
              sub_20AEC8090(v9, v15, v16);
            }
            else if ((*((_BYTE *)v6 + 23) & 0x80) != 0)
            {
              sub_20AEC7FCC(v9, *v6, (size_t)v6[1]);
            }
            else
            {
              v18 = *(_OWORD *)v6;
              v9[2] = v6[2];
              *(_OWORD *)v9 = v18;
            }
          }
          v6 += 3;
          v9 += 3;
          v14 -= 24;
        }
        while (v14);
        v9 = (void **)a1[1];
      }
      v32 = v9;
      if (v13 != a3)
      {
        v33 = 0;
        do
        {
          v35 = &v9[v33];
          v36 = &v13[v33];
          if (SHIBYTE(v13[v33 + 2]) < 0)
          {
            sub_20AEC60F4(v35, *v36, (unint64_t)v36[1]);
          }
          else
          {
            v34 = *(_OWORD *)v36;
            v35[2] = v36[2];
            *(_OWORD *)v35 = v34;
          }
          v33 += 3;
        }
        while (&v13[v33] != a3);
        v32 = &v9[v33];
      }
      a1[1] = v32;
    }
  }
  else
  {
    if (v9)
    {
      v10 = (void **)a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 1) < 0)
            operator delete(*(v10 - 3));
          v10 -= 3;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_72;
    v24 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v25 = 2 * v24;
    if (2 * v24 <= __sz)
      v25 = __sz;
    v26 = v24 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v25;
    if (v26 > 0xAAAAAAAAAAAAAAALL)
LABEL_72:
      sub_20AEC60B8();
    v27 = 24 * v26;
    v28 = (char *)operator new(24 * v26);
    *a1 = v28;
    a1[1] = v28;
    a1[2] = &v28[v27];
    if (v6 != a3)
    {
      v29 = 0;
      do
      {
        v30 = &v28[v29 * 8];
        v31 = &v6[v29];
        if (SHIBYTE(v6[v29 + 2]) < 0)
        {
          sub_20AEC60F4(v30, *v31, (unint64_t)v31[1]);
        }
        else
        {
          *(_OWORD *)v30 = *(_OWORD *)v31;
          *((_QWORD *)v30 + 2) = v31[2];
        }
        v29 += 3;
      }
      while (&v6[v29] != a3);
      v28 += v29 * 8;
    }
    a1[1] = v28;
  }
}

unint64_t sub_20AEC7B80(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v27 + a3 + v26 + v23;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v36 + v25 + v28;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v58 + v49 + v47 + v48;
        v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

_QWORD *sub_20AEC7FCC(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      sub_20AEC0138();
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      v6 = __dst;
    }
  }
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void **sub_20AEC8090(void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v13;
  uint64_t v14;

  v6 = (unint64_t)a1[2];
  v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    v8 = *a1;
    a1[1] = (void *)__len;
    if (__len)
      memmove(v8, __src, __len);
    goto LABEL_12;
  }
  v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1)
    sub_20AEC0138();
  v10 = v7 - 1;
  v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2)
      goto LABEL_7;
LABEL_14:
    v13 = 2 * v10;
    if (__len > 2 * v10)
      v13 = __len;
    v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v14 = v13 | 7;
    if (v13 >= 0x17)
      v9 = v14 + 1;
    else
      v9 = 23;
    v8 = operator new(v9);
    if (!__len)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2)
    goto LABEL_14;
LABEL_7:
  v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len)
LABEL_8:
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22)
    operator delete(v11);
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

char *sub_20AEC81D4(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12)
      return v10;
    goto LABEL_20;
  }
  do
  {
    v13 = *(_OWORD *)(v12 - 24);
    *((_QWORD *)v8 - 1) = *((_QWORD *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((_QWORD *)v12 - 2) = 0;
    *((_QWORD *)v12 - 1) = 0;
    *((_QWORD *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  v14 = (char *)*a1;
  v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0)
        operator delete(*((void **)v12 - 3));
      v12 -= 24;
    }
    while (v12 != v14);
    v12 = v14;
  }
  if (v12)
LABEL_20:
    operator delete(v12);
  return v10;
}

void sub_20AEC833C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_20AEC833C(a1, *(_QWORD *)a2);
    sub_20AEC833C(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t **sub_20AEC839C(uint64_t **a1, __int128 *a2)
{
  _QWORD *v4;
  void *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v4 = operator new(0x38uLL);
  v5 = v4;
  v6 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v8 = a1 + 1;
  v9 = a1[1];
  *((_OWORD *)v4 + 2) = v6;
  v4[6] = v7;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v9;
        v11 = v9[4];
        if ((unint64_t)v6 >= v11)
          break;
        v9 = (uint64_t *)*v9;
        v8 = v10;
        if (!*v10)
          goto LABEL_9;
      }
      if (v11 >= (unint64_t)v6)
        break;
      v9 = (uint64_t *)v9[1];
      if (!v9)
      {
        v8 = v10 + 1;
        goto LABEL_9;
      }
    }
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    operator delete(v5);
    return v10;
  }
  else
  {
    v10 = a1 + 1;
LABEL_9:
    *v4 = 0;
    v4[1] = 0;
    v4[2] = v10;
    *v8 = v4;
    v12 = (uint64_t *)**a1;
    v13 = v4;
    if (v12)
    {
      *a1 = v12;
      v13 = *v8;
    }
    sub_20AEC84C8(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return (uint64_t **)v5;
  }
}

uint64_t *sub_20AEC84C8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

uint64_t *sub_20AEC867C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_10;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (!v2)
  {
    v5 = 1;
    v6 = (uint64_t **)v3[2];
    v7 = *v6;
    if (*v6 == v3)
      goto LABEL_6;
LABEL_11:
    v6[1] = (uint64_t *)v2;
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_10:
  v5 = 0;
  *(_QWORD *)(v2 + 16) = v3[2];
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 != v3)
    goto LABEL_11;
LABEL_6:
  *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    v7 = v6[1];
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
LABEL_12:
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
    goto LABEL_16;
  }
  v7 = 0;
  result = (uint64_t *)v2;
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
    goto LABEL_12;
LABEL_16:
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 == v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v17 = v14[1];
      v18 = (uint64_t *)*v17;
      v14[1] = (uint64_t *)*v17;
      if (v18)
        v18[2] = (uint64_t)v14;
      v17[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
      *v17 = (uint64_t)v14;
      v14[2] = v17;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    if (!*((_BYTE *)v15 + 24))
    {
      v19 = (uint64_t *)v7[1];
      if (!v19)
        goto LABEL_64;
LABEL_63:
      if (*((_BYTE *)v19 + 24))
      {
LABEL_64:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v23 = v15[1];
        *v7 = v23;
        if (v23)
          *(_QWORD *)(v23 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v19 = v7;
      }
      else
      {
        v15 = v7;
      }
      v27 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v27 + 24);
      *(_BYTE *)(v27 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v28 = *(uint64_t **)(v27 + 8);
      v29 = *v28;
      *(_QWORD *)(v27 + 8) = *v28;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      v28[2] = *(_QWORD *)(v27 + 16);
      *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * (**(_QWORD **)(v27 + 16) != v27)) = v28;
      *v28 = v27;
      *(_QWORD *)(v27 + 16) = v28;
      return result;
    }
LABEL_38:
    v19 = (uint64_t *)v7[1];
    if (v19 && !*((_BYTE *)v19 + 24))
      goto LABEL_63;
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (v12 == result)
    {
      v12 = result;
LABEL_61:
      *((_BYTE *)v12 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v12 + 24))
      goto LABEL_61;
LABEL_24:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v16 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_49;
LABEL_48:
    if (!*((_BYTE *)v16 + 24))
      goto LABEL_67;
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v20 = (uint64_t *)v7[1];
    *v14 = v20;
    if (v20)
      v20[2] = (uint64_t)v14;
    v7[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
    v7[1] = (uint64_t)v14;
    v14[2] = v7;
    if (result == (uint64_t *)v14)
      result = v7;
    v7 = *v14;
    v16 = (_QWORD *)**v14;
    if (v16)
      goto LABEL_48;
  }
LABEL_49:
  v21 = (uint64_t *)v7[1];
  if (!v21 || *((_BYTE *)v21 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
    goto LABEL_24;
  }
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_67:
    v21 = v7;
  }
  else
  {
    *((_BYTE *)v21 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = *v21;
    v7[1] = *v21;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v21[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
    *v21 = (uint64_t)v7;
    v7[2] = (uint64_t)v21;
    v16 = v7;
  }
  v24 = (uint64_t *)v21[2];
  *((_BYTE *)v21 + 24) = *((_BYTE *)v24 + 24);
  *((_BYTE *)v24 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v25 = *v24;
  v26 = *(_QWORD *)(*v24 + 8);
  *v24 = v26;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  *(_QWORD *)(v25 + 16) = v24[2];
  *(_QWORD *)(v24[2] + 8 * (*(_QWORD *)v24[2] != (_QWORD)v24)) = v25;
  *(_QWORD *)(v25 + 8) = v24;
  v24[2] = v25;
  return result;
}

void sub_20AEC8A44(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AEC8A68(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20AEC8A80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000020B5B0251)
    return a1 + 24;
  if (((v3 & 0x800000020B5B0251 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000020B5B0251))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020B5B0251 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t *sub_20AEC8B00(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_20AEC7B80((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

std::string *sub_20AEC8D2C(uint64_t a1)
{
  std::string *result;
  unint64_t v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;

  *(_QWORD *)(a1 + 88) = 0;
  result = (std::string *)(a1 + 64);
  v3 = *(unsigned __int8 *)(a1 + 87);
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    v4 = result;
    v5 = *(unsigned __int8 *)(a1 + 87);
    v6 = *(_DWORD *)(a1 + 96);
    if ((v6 & 8) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = *(std::string **)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
LABEL_3:
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
LABEL_4:
  if ((v6 & 0x10) == 0)
    return result;
  *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
  if ((v3 & 0x80) == 0)
  {
    v7 = 22;
    if (v3 > 0x15)
    {
      *(_BYTE *)(a1 + 87) = 22;
      goto LABEL_15;
    }
LABEL_11:
    result = std::string::append(result, v7 - v3, 0);
    v8 = *(char *)(a1 + 87);
    if (v8 < 0)
      goto LABEL_16;
    goto LABEL_12;
  }
  v3 = *(_QWORD *)(a1 + 72);
  v7 = (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v3 < v7)
    goto LABEL_11;
  result = *(std::string **)(a1 + 64);
  *(_QWORD *)(a1 + 72) = v7;
LABEL_15:
  result->__r_.__value_.__s.__data_[v7] = 0;
  v8 = *(char *)(a1 + 87);
  if (v8 < 0)
  {
LABEL_16:
    v9 = (char *)v4 + *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = v9;
    if ((*(_BYTE *)(a1 + 96) & 3) == 0)
      return result;
    goto LABEL_17;
  }
LABEL_12:
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
  if ((*(_BYTE *)(a1 + 96) & 3) == 0)
    return result;
LABEL_17:
  if (v5 >> 31)
  {
    v10 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
    v11 = 0x7FFFFFFF * ((v10 + ((v5 - 0x80000000 - v10) >> 1)) >> 30);
    v4 = (std::string *)((char *)v4 + v11 + 0x7FFFFFFF);
    v5 = v5 - v11 - 0x7FFFFFFF;
    *(_QWORD *)(a1 + 48) = v4;
  }
  if (v5)
    *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
  return result;
}

_QWORD *sub_20AEC8E94(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x18uLL);
  *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v17 = *v21;
LABEL_61:
      *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        sub_20AEC91EC(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_20AEC91D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20AEC91EC(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    sub_20AEC60CC();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

_QWORD *sub_20AEC9398@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_20AEC94CC(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_20AEC91EC(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_20AEC960C(a1, i + 2, i + 2);
  return a1;
}

void sub_20AEC95E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AEC309C(v1);
  _Unwind_Resume(a1);
}

void sub_20AEC95F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AEC309C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20AEC960C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x18uLL);
  *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v17 = *v21;
LABEL_61:
      *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        sub_20AEC91EC(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_20AEC9950(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20AEC9964(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_20AEC7B80((uint64_t)v44, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = *((_QWORD *)v14 + 1);
            if (v21 == v10)
            {
              v22 = v14[39];
              if ((v22 & 0x80u) == 0)
                v23 = v14[39];
              else
                v23 = *((_QWORD *)v14 + 3);
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                    return v14;
                }
                else
                {
                  if (!v14[39])
                    return v14;
                  v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = *((_QWORD *)v14 + 1);
          if (v17 == v10)
          {
            v18 = v14[39];
            if ((v18 & 0x80u) == 0)
              v19 = v14[39];
            else
              v19 = *((_QWORD *)v14 + 3);
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                  return v14;
              }
              else
              {
                if (!v14[39])
                  return v14;
                v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v14 = (unsigned __int8 *)operator new(0x30uLL);
  v26 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v27 = *((_QWORD *)a3 + 2);
  v28 = *((_QWORD *)a3 + 3);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v44[0] = v14;
  v44[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = v26;
  *((_QWORD *)v14 + 4) = v27;
  *((_QWORD *)v14 + 5) = v28;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v11 && (float)(v30 * (float)v11) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v14 = *v32;
LABEL_89:
      *v32 = v14;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v11 >= 3)
      v33 = (v11 & (v11 - 1)) != 0;
    v34 = v33 | (2 * v11);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        sub_20AEC91EC(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v41 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v41 & v10;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v10));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v14 = *v25;
  *v25 = v14;
  *(_QWORD *)(v31 + 8 * v3) = v25;
  if (*(_QWORD *)v14)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v42 >= v11)
        v42 %= v11;
    }
    else
    {
      v42 &= v11 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20AEC9D6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC9D84((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AEC9D84(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_20AEC9DE8(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = a1[1];
  v7 = a1[2];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = ((v7 - v6) << 6) - 1;
  v9 = a1[5];
  v10 = v9 + a1[4];
  v11 = v8 - v10;
  if (a3 > v11)
  {
    sub_20AEC9F40((uint64_t)a1, a3 - v11);
    v9 = a1[5];
    v6 = a1[1];
    v7 = a1[2];
    v10 = a1[4] + v9;
  }
  v12 = (_QWORD *)(v6 + 8 * (v10 >> 9));
  if (v7 == v6)
  {
    v13 = 0;
    if (a3)
      goto LABEL_8;
LABEL_11:
    v16 = v13;
    v15 = v12;
    goto LABEL_23;
  }
  v13 = *v12 + 8 * (v10 & 0x1FF);
  if (!a3)
    goto LABEL_11;
LABEL_8:
  v14 = a3 + ((v13 - *v12) >> 3);
  if (v14 < 1)
  {
    v17 = 511 - v14;
    LOWORD(v14) = ~(511 - v14);
    v15 = &v12[-(v17 >> 9)];
  }
  else
  {
    v15 = &v12[(unint64_t)v14 >> 9];
  }
  v16 = *v15 + 8 * (v14 & 0x1FF);
LABEL_23:
  while (v13 != v16)
  {
    v18 = v16;
    if (v12 != v15)
      v18 = *v12 + 4096;
    if (v13 == v18)
    {
      a1[5] = v9;
      if (v12 == v15)
        return;
    }
    else
    {
      v19 = (_QWORD *)v13;
      do
      {
        *v19++ = a2[2];
        a2 = (_QWORD *)*a2;
      }
      while (v19 != (_QWORD *)v18);
      v9 = a1[5] + ((v18 - v13) >> 3);
      a1[5] = v9;
      if (v12 == v15)
        return;
    }
    v20 = v12[1];
    ++v12;
    v13 = v20;
  }
}

void sub_20AEC9F40(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t i;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  int64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    *(_QWORD *)(a1 + 32) = v7 - (v8 << 9);
    if (!v8)
      return;
    while (1)
    {
      v15 = *(_QWORD **)(a1 + 8);
      v16 = (char *)(v15 + 1);
      v17 = *v15;
      *(_QWORD *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(_QWORD *)a1)
        {
          v24 = (v3 - v18) >> 2;
          if (v3 == v18)
            v24 = 1;
          if (v24 >> 61)
            goto LABEL_159;
          v25 = v24 >> 2;
          v26 = 8 * v24;
          v27 = (char *)operator new(8 * v24);
          v28 = &v27[8 * v25];
          v30 = v3 - v16;
          v29 = v3 == v16;
          v3 = v28;
          if (!v29)
          {
            v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20)
              goto LABEL_165;
            v33 = (v31 >> 3) + 1;
            v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            v32 = &v28[v34];
            v16 += v34;
            v35 = (__int128 *)(v15 + 3);
            v36 = &v27[8 * v25 + 16];
            v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_165:
              do
              {
LABEL_39:
                v39 = *(_QWORD *)v16;
                v16 += 8;
                *(_QWORD *)v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(_QWORD *)a1 = v27;
          *(_QWORD *)(a1 + 8) = v28;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        v19 = (uint64_t)&v16[-*(_QWORD *)a1] >> 3;
        if (v19 >= -1)
          v20 = v19 + 1;
        else
          v20 = v19 + 2;
        v21 = v20 >> 1;
        v22 = &v16[-8 * (v20 >> 1)];
        v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          v3 = *(char **)(a1 + 8);
        }
        v14 = &v3[-8 * v21];
        v3 = &v22[v23];
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(_QWORD *)v3 = v17;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
      if (!--v8)
        return;
    }
  }
  v9 = v6 - v8;
  v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
      {
        v145 = operator new(0x1000uLL);
        sub_20AEC6E44((char **)a1, &v145);
        --v6;
        if (!--v9)
          goto LABEL_134;
      }
      for (i = 0; i != v9; ++i)
      {
        v145 = operator new(0x1000uLL);
        sub_20AEC6FD0((void **)a1, &v145);
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
          v116 = 511;
        else
          v116 = 512;
        v117 = v116 + *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v117;
      }
      v8 = v6;
      *(_QWORD *)(a1 + 32) = v117 - (v6 << 9);
      if (!v6)
        return;
    }
    else
    {
LABEL_134:
      *(_QWORD *)(a1 + 32) -= v8 << 9;
      if (!v8)
        return;
    }
    v118 = *(char **)(a1 + 16);
    while (1)
    {
      v120 = *(_QWORD **)(a1 + 8);
      v121 = (char *)(v120 + 1);
      v122 = *v120;
      *(_QWORD *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(_QWORD *)a1)
        {
          v129 = (v118 - v123) >> 2;
          if (v118 == v123)
            v129 = 1;
          if (v129 >> 61)
            goto LABEL_159;
          v130 = v129 >> 2;
          v131 = 8 * v129;
          v132 = (char *)operator new(8 * v129);
          v133 = &v132[8 * v130];
          v134 = v118 - v121;
          v29 = v118 == v121;
          v118 = v133;
          if (!v29)
          {
            v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              v136 = &v132[8 * v130];
              goto LABEL_155;
            }
            v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20)
              goto LABEL_166;
            v137 = (v135 >> 3) + 1;
            v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            v136 = &v133[v138];
            v121 += v138;
            v139 = (__int128 *)(v120 + 3);
            v140 = &v132[8 * v130 + 16];
            v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_166:
              do
              {
LABEL_155:
                v143 = *(_QWORD *)v121;
                v121 += 8;
                *(_QWORD *)v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(_QWORD *)a1 = v132;
          *(_QWORD *)(a1 + 8) = v133;
          *(_QWORD *)(a1 + 16) = v118;
          *(_QWORD *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            v118 = *(char **)(a1 + 16);
          }
          goto LABEL_137;
        }
        v124 = (uint64_t)&v121[-*(_QWORD *)a1] >> 3;
        if (v124 >= -1)
          v125 = v124 + 1;
        else
          v125 = v124 + 2;
        v126 = v125 >> 1;
        v127 = &v121[-8 * (v125 >> 1)];
        v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          v118 = *(char **)(a1 + 8);
        }
        v119 = &v118[-8 * v126];
        v118 = &v127[v128];
        *(_QWORD *)(a1 + 8) = v119;
        *(_QWORD *)(a1 + 16) = &v127[v128];
      }
LABEL_137:
      *(_QWORD *)v118 = v122;
      v118 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v118;
      if (!--v8)
        return;
    }
  }
  if (v10 >> 2 <= v9 + v11)
    v12 = v9 + v11;
  else
    v12 = v10 >> 2;
  if (v12)
  {
    if (v12 >> 61)
LABEL_159:
      sub_20AEC60CC();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v144 = v8 << 9;
  v40 = &v13[8 * (v11 - v8)];
  v41 = &v13[8 * v12];
  v42 = v40;
  v43 = v13;
  do
  {
    v44 = operator new(0x1000uLL);
    if (v42 != v41)
      goto LABEL_49;
    if (v40 > v43)
    {
      v45 = v43;
      v46 = (v40 - v43) >> 3;
      if (v46 >= -1)
        v47 = v46 + 1;
      else
        v47 = v46 + 2;
      v48 = v47 >> 1;
      v49 = &v40[-8 * (v47 >> 1)];
      v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        v50 = v40;
      }
      v42 = &v49[v41 - v40];
      v40 = &v50[-8 * v48];
      v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43)
      v51 = 1;
    else
      v51 = (v41 - v43) >> 2;
    if (v51 >> 61)
      sub_20AEC60CC();
    v52 = (char *)operator new(8 * v51);
    v53 = v43;
    v54 = v51 >> 2;
    v55 = &v52[8 * (v51 >> 2)];
    v42 = v55;
    v56 = v41 - v40;
    if (v41 != v40)
    {
      v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      if (v57 >= 0x38 && (v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        v62 = (v57 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v59 = &v55[v63];
        v60 = &v40[v63];
        v64 = (__int128 *)(v40 + 16);
        v65 = &v52[v58 + 16];
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
      else
      {
        v59 = &v52[8 * (v51 >> 2)];
        v60 = v40;
      }
      do
      {
        v61 = *(_QWORD *)v60;
        v60 += 8;
        *(_QWORD *)v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    v41 = &v52[8 * v51];
    if (v53)
      operator delete(v53);
    v40 = &v52[8 * (v51 >> 2)];
    v43 = v52;
LABEL_49:
    *(_QWORD *)v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  v68 = *(_QWORD **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43)
            v78 = 1;
          else
            v78 = (v41 - v43) >> 2;
          if (v78 >> 61)
            sub_20AEC60CC();
          v79 = (char *)operator new(8 * v78);
          v80 = v79;
          v81 = v78 >> 2;
          v69 = &v79[8 * (v78 >> 2)];
          v42 = v69;
          v82 = v41 - v40;
          if (v41 != v40)
          {
            v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            v83 = v82 - 8;
            if (v83 < 0x38 || (v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              v85 = &v79[8 * (v78 >> 2)];
              v86 = v40;
              goto LABEL_96;
            }
            v88 = (v83 >> 3) + 1;
            v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            v85 = &v69[v89];
            v86 = &v40[v89];
            v90 = (__int128 *)(v40 + 16);
            v91 = &v79[v84 + 16];
            v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_96:
                v87 = *(_QWORD *)v86;
                v86 += 8;
                *(_QWORD *)v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          v41 = &v79[8 * v78];
          if (v43)
            operator delete(v43);
          v43 = v80;
          goto LABEL_79;
        }
        v72 = v43;
        v73 = (v40 - v43) >> 3;
        if (v73 >= -1)
          v74 = v73 + 1;
        else
          v74 = v73 + 2;
        v75 = v74 >> 1;
        v76 = &v40[-8 * (v74 >> 1)];
        v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          v77 = v40;
        }
        v42 = &v76[v41 - v40];
        v69 = &v77[-8 * v75];
        v43 = v72;
      }
      else
      {
        v69 = v40;
      }
LABEL_79:
      *(_QWORD *)v42 = *v68;
      v42 += 8;
      v68 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v68;
      v40 = v69;
      if (!--v8)
        goto LABEL_75;
    }
  }
  v69 = v40;
LABEL_75:
  v70 = *(_QWORD **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43)
            v100 = 1;
          else
            v100 = (v41 - v43) >> 2;
          if (v100 >> 61)
            sub_20AEC60CC();
          v101 = (char *)operator new(8 * v100);
          v97 = v101;
          v102 = (v100 + 3) >> 2;
          v69 = &v101[8 * v102];
          v103 = v42 - v43;
          v29 = v42 == v43;
          v42 = v69;
          if (!v29)
          {
            v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            v104 = v103 - 8;
            v105 = &v101[8 * v102];
            v106 = v43;
            if (v104 < 0x38)
              goto LABEL_167;
            v107 = 8 * v102;
            v105 = &v101[8 * v102];
            v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20)
              goto LABEL_167;
            v108 = (v104 >> 3) + 1;
            v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            v105 = &v69[v109];
            v106 = &v43[v109];
            v110 = (__int128 *)(v43 + 16);
            v111 = &v101[v107 + 16];
            v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
                v114 = *(_QWORD *)v106;
                v106 += 8;
                *(_QWORD *)v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          v41 = &v101[8 * v100];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v95 = (v41 - v42) >> 3;
          if (v95 >= -1)
            v96 = v95 + 1;
          else
            v96 = v95 + 2;
          v97 = v43;
          v98 = v96 >> 1;
          v69 = &v97[8 * (v96 >> 1)];
          v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            v99 = v42;
          }
          v42 = &v99[8 * v98];
        }
        v43 = v97;
      }
      v94 = *--v70;
      *((_QWORD *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(_QWORD **)(a1 + 8));
  }
  v71 = *(char **)a1;
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 8) = v69;
  *(_QWORD *)(a1 + 16) = v42;
  *(_QWORD *)(a1 + 24) = v41;
  *(_QWORD *)(a1 + 32) -= v144;
  if (v71)
    operator delete(v71);
}

void sub_20AECA82C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20AECA878()
{
  __cxa_end_catch();
  JUMPOUT(0x20AECA880);
}

uint64_t sub_20AECA898(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20AECA960(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AECA984(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20AECA99C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t *sub_20AECAA0C(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return (uint64_t *)v10;
        }
        else if (v16 >= v9)
        {
          return (uint64_t *)v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
LABEL_28:
          v20 = (uint64_t *)operator new(0x38uLL);
          v21 = v20 + 4;
          if (*(char *)(a3 + 23) < 0)
            goto LABEL_31;
LABEL_29:
          *(_OWORD *)v21 = *(_OWORD *)a3;
          v21[2] = *(_QWORD *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_28;
      }
    }
  }
  v10 = a1 + 1;
  v20 = (uint64_t *)operator new(0x38uLL);
  v21 = v20 + 4;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_31:
  sub_20AEC60F4(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
LABEL_32:
  *v20 = 0;
  v20[1] = 0;
  v20[2] = (uint64_t)v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_20AEC84C8(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v20;
}

void sub_20AECAB90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20AECABA4()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C3F2128;
  __cxa_throw(exception, (struct type_info *)&unk_24C3F2100, (void (*)(void *))std::exception::~exception);
}

void sub_20AECABDC(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AECAC08(uint64_t a1, uint64_t a2)
{
  const void **v2;
  BOOL v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  v2 = (const void **)(a1 + 8);
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  if (*(_BYTE *)(a1 + 32))
    v3 = *(_BYTE *)(a2 + 32) == 0;
  else
    v3 = 1;
  if (v3)
    return (*(_BYTE *)(a1 + 32) != 0) == (*(_BYTE *)(a2 + 32) != 0);
  v5 = *(unsigned __int8 *)(a1 + 31);
  if ((v5 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a1 + 31);
  else
    v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned __int8 *)(a2 + 31);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 16);
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = (unsigned __int8 *)(a2 + 8);
  else
    v9 = *(unsigned __int8 **)(a2 + 8);
  if ((v5 & 0x80) != 0)
    return memcmp(*v2, v9, *(_QWORD *)(a1 + 16)) == 0;
  if (!*(_BYTE *)(a1 + 31))
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *(unsigned __int8 *)v2;
    v2 = (const void **)((char *)v2 + 1);
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

int *sub_20AECACFC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637430);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254637430))
    return &dword_254637438;
  sub_20AECAD90();
  __cxa_atexit((void (*)(void *))sub_20AECAF80, &dword_254637438, &dword_20AEBB000);
  __cxa_guard_release(&qword_254637430);
  return &dword_254637438;
}

void sub_20AECAD78(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637430);
  _Unwind_Resume(a1);
}

double sub_20AECAD90()
{
  void *v0;
  id v1;
  const char *v2;
  size_t v3;
  void *v4;
  void *v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  unint64_t v10;

  LOBYTE(xmmword_254637440) = 0;
  byte_254637458 = 0;
  dword_254637438 = getpid();
  objc_msgSend(MEMORY[0x24BDD1760], "processInfo");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "processName");
  v1 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v2 = (const char *)objc_msgSend(v1, "UTF8String");
  v3 = strlen(v2);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v7 = v3 | 7;
    v8 = v7 + 1;
    v5 = operator new(v7 + 1);
    __p[1] = v4;
    v10 = v8 | 0x8000000000000000;
    __p[0] = v5;
LABEL_12:
    memmove(v5, v2, (size_t)v4);
    *((_BYTE *)v4 + (_QWORD)v5) = 0;

    if (byte_254637458)
      goto LABEL_5;
LABEL_13:
    result = *(double *)__p;
    xmmword_254637440 = *(_OWORD *)__p;
    unk_254637450 = v10;
    __p[1] = 0;
    v10 = 0;
    __p[0] = 0;
    byte_254637458 = 1;
    return result;
  }
  HIBYTE(v10) = v3;
  v5 = __p;
  if (v3)
    goto LABEL_12;
  LOBYTE(__p[0]) = 0;

  if (!byte_254637458)
    goto LABEL_13;
LABEL_5:
  if (byte_254637457 < 0)
    operator delete((void *)xmmword_254637440);
  result = *(double *)__p;
  xmmword_254637440 = *(_OWORD *)__p;
  unk_254637450 = v10;
  HIBYTE(v10) = 0;
  LOBYTE(__p[0]) = 0;
  return result;
}

void sub_20AECAF34(_Unwind_Exception *a1)
{
  void *v1;

  if (byte_254637458)
  {
    if (byte_254637457 < 0)
      operator delete((void *)xmmword_254637440);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20AECAF80(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 32))
  {
    if (*(char *)(result + 31) < 0)
    {
      operator delete(*(void **)(result + 8));
      return v1;
    }
  }
  return result;
}

void sub_20AECAFC8(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;

  v2 = atomic_load((unsigned __int8 *)&qword_25463CC98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463CC98))
  {
    sub_20AEC0D64(__p, "cv3dapi.visual_logger");
    sub_20AECB098((uint64_t)__p, &qword_25463CC90);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_25463CC98);
  }
  *a1 = qword_25463CC90;
}

void sub_20AECB058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25463CC98);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25463CC98);
  _Unwind_Resume(a1);
}

void sub_20AECB098(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t *v5;

  v4 = atomic_load((unsigned __int8 *)&qword_25463CD80);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463CD80))
  {
    sub_20AEBFFE4(&qword_25463CD78);
    __cxa_guard_release(&qword_25463CD80);
  }
  v5 = (uint64_t *)qword_25463CD78;
  sub_20AEC4B5C(&v5, a1, a2);
}

void sub_20AECB118(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CD80);
  _Unwind_Resume(a1);
}

uint64_t sub_20AECB130()
{
  unsigned __int8 v0;
  uint64_t v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CCA8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25463CCA8))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_254630128, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CCA8);
  }
  std::mutex::lock(&stru_254630128);
  v1 = qword_25463CCA0++;
  std::mutex::unlock(&stru_254630128);
  return v1;
}

void VZErrorSetGlobalErrorHandlerFunction_0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  std::mutex::lock(&stru_254630218);
  if (a2)
    v5 = a1;
  else
    v5 = 0;
  qword_2546301F0 = v5;
  *(_QWORD *)algn_2546301F8 = a2;
  byte_254630200 = a2 != 0;
  v6 = (std::__shared_weak_count *)off_254630210;
  qword_254630208 = 0;
  off_254630210 = 0;
  if (!v6)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    std::mutex::unlock(&stru_254630218);
  }
  else
  {
LABEL_9:
    std::mutex::unlock(&stru_254630218);
  }
}

void sub_20AECB2BC(uint64_t *a1)
{
  unsigned __int8 v2;
  char *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  v4 = *a1;
  v3 = (char *)a1[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  std::mutex::lock(&stru_254630218);
  if (v3)
  {
    v7 = (unint64_t *)(v3 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)off_254630210;
  qword_254630208 = v4;
  off_254630210 = v3;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (byte_254630200)
    byte_254630200 = 0;
  std::mutex::unlock(&stru_254630218);
  if (v3)
  {
    v12 = (unint64_t *)(v3 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      (*(void (**)(char *))(*(_QWORD *)v3 + 16))(v3);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
    }
  }
}

void sub_20AECB410(__int128 *a1, CFErrorRef *a2)
{
  std::__shared_weak_count *v4;
  CFErrorRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned __int8 v8;
  CFErrorRef v9[2];

  if (a2)
  {
    sub_20B4F56E0(v9, (uint64_t)a1);
    v5 = v9[0];
    v4 = (std::__shared_weak_count *)v9[1];
    if (v9[0])
      CFRetain(v9[0]);
    *a2 = v5;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  v8 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, a1);
}

void sub_20AECB4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AECB50C(uint64_t a1, __int128 *a2)
{
  std::mutex *v4;
  int v5;
  std::string *v6;
  std::string::size_type size;
  size_t v8;
  void **p_dst;
  int v10;
  std::string *v11;
  std::string::size_type v12;
  size_t v13;
  void **v14;
  unint64_t v15;
  const void **v16;
  unint64_t v17;
  const void **v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  int v26;
  unsigned __int8 v27;
  const char *v28;
  size_t v29;
  std::string::size_type *p_size;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  std::string::size_type v38;
  _QWORD *v39;
  size_t v40;
  size_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  char *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  void **v63;
  uint64_t v64;
  const char *v65;
  size_t v66;
  int v67;
  unsigned __int8 v68;
  const char *v69;
  size_t v70;
  std::string::size_type *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  std::string::size_type v79;
  _QWORD *v80;
  size_t v81;
  size_t v82;
  _QWORD *v83;
  void *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::string::size_type v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  __int128 v95;
  std::string::size_type v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  _QWORD *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  const char *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  char v123;
  _QWORD *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  char *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::string::size_type v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  const char *v144;
  uint64_t v145;
  __int128 v146;
  std::string::size_type v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  _QWORD *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  const char *v167;
  unint64_t *v168;
  void *v169;
  std::__shared_weak_count *v170;
  uint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  const char *v178;
  const char *v179;
  char *__s;
  char *__sa;
  unint64_t v182;
  unint64_t v183;
  uint64_t *v184;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v186;
  int v187;
  const char *v188;
  int v189;
  const char *v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  void **__dst;
  size_t v194;
  int64_t v195;
  __int128 v196;
  void *__p[2];
  char v198;
  char v199;
  void *v200;
  unint64_t v201;
  _BYTE v202[7];
  char v203;
  unint64_t v204;
  void *v205;
  void *v206;
  char v207;
  char v208;
  char v209;
  unint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  std::recursive_mutex ***v214[2];
  std::string v215;
  char *v216;
  std::__shared_weak_count *v217;
  _QWORD *v218;
  __int128 v219;
  std::string v220;
  __int128 v221;
  char *v222;
  size_t v223;
  unint64_t v224;
  char v225;
  _QWORD v226[5];

  v226[2] = *MEMORY[0x24BDAC8D0];
  v4 = (std::mutex *)(a1 + 176);
  std::mutex::lock((std::mutex *)(a1 + 176));
  if (!*(_BYTE *)(a1 + 128))
  {
    if (!*(_BYTE *)(a1 + 129))
      goto LABEL_308;
    sub_20B0A53E8((uint64_t *)v214);
    sub_20B0A64B4(v214[0], 3);
    if (sub_20B099A18((uint64_t)a2))
    {
      sub_20AECAFC8(&v213);
      if (**(int **)(v213 + 56) <= 4)
      {
        v5 = *(unsigned __int8 *)(v213 + 72);
        v182 = sub_20AEC3CD0(v213, "OSLogSurrogateAppender", 1, 0);
        if (v5 || v182)
        {
          sub_20AEC0BD8((uint64_t)&v196);
          sub_20B5287D4((uint64_t)a2, &v220);
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v6 = &v220;
          else
            v6 = (std::string *)v220.__r_.__value_.__r.__words[0];
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v220.__r_.__value_.__r.__words[2]);
          else
            size = v220.__r_.__value_.__l.__size_;
          sub_20AEC01D0(__p, (uint64_t)v6, size);
          if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v220.__r_.__value_.__l.__data_);
          if ((v211 & 0x10) != 0)
          {
            v15 = v210;
            if (v210 < v204)
            {
              v210 = v204;
              v15 = v204;
            }
            v16 = (const void **)v202;
          }
          else
          {
            if ((v211 & 8) == 0)
            {
              v8 = 0;
              HIBYTE(v195) = 0;
              p_dst = (void **)&__dst;
              goto LABEL_60;
            }
            v16 = (const void **)&v199;
            v15 = v201;
          }
          v19 = *v16;
          v8 = v15 - (_QWORD)*v16;
          if (v8 <= 0x7FFFFFFFFFFFFFF7)
          {
            if (v8 >= 0x17)
            {
              v20 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v8 | 7) != 0x17)
                v20 = v8 | 7;
              v21 = v20 + 1;
              p_dst = (void **)operator new(v20 + 1);
              v194 = v8;
              v195 = v21 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v195) = v15 - *(_BYTE *)v16;
              p_dst = (void **)&__dst;
              if (!v8)
              {
LABEL_60:
                *((_BYTE *)p_dst + v8) = 0;
                v184 = &v213;
                rep = std::chrono::steady_clock::now().__d_.__rep_;
                v186 = std::chrono::system_clock::now().__d_.__rep_;
                v187 = 4;
                v188 = "unknown file";
                v189 = 75;
                v191 = 0;
                v192 = 0;
                v190 = "unknown function";
                if (v195 >= 0)
                  v22 = (void **)&__dst;
                else
                  v22 = __dst;
                v23 = *v184;
                v24 = (const char *)(*v184 + 16);
                v176 = *v184;
                v178 = v24;
                __s = (char *)v22;
                if (*(char *)(*v184 + 39) < 0)
                {
                  v24 = *(const char **)(v23 + 16);
                  v25 = *(_QWORD *)(v23 + 24);
                }
                else
                {
                  v25 = *(unsigned __int8 *)(*v184 + 39);
                }
                v26 = v5;
                v27 = atomic_load((unsigned __int8 *)&qword_254630278);
                if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254630278))
                {
                  sub_20B5271B0((uint64_t)&v220);
                  sub_20AECF058("com.apple.cv3d", (unint64_t)&v220, &qword_254630260);
                  if ((_BYTE)v221 && SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v220.__r_.__value_.__l.__data_);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630260, &dword_20AEBB000);
                  __cxa_guard_release(&qword_254630278);
                }
                if (byte_254630277 >= 0)
                  v28 = (const char *)&qword_254630260;
                else
                  v28 = (const char *)qword_254630260;
                if (byte_254630277 >= 0)
                  v29 = byte_254630277;
                else
                  v29 = unk_254630268;
                v220.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v28, v24);
                p_size = &v220.__r_.__value_.__l.__size_;
                if (v29 > 0x7FFFFFFFFFFFFFF7)
                  sub_20AEC0138();
                if (v29 >= 0x17)
                {
                  v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v29 | 7) != 0x17)
                    v31 = v29 | 7;
                  v32 = v31 + 1;
                  p_size = (std::string::size_type *)operator new(v31 + 1);
                  v220.__r_.__value_.__r.__words[2] = v29;
                  *(_QWORD *)&v221 = v32 | 0x8000000000000000;
                  v220.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
                }
                else
                {
                  BYTE7(v221) = v29;
                  if (!v29)
                  {
LABEL_81:
                    *((_BYTE *)p_size + v29) = 0;
                    BYTE8(v221) = 1;
                    v33 = (char *)&v222;
                    if (v25 > 0x7FFFFFFFFFFFFFF7)
                      sub_20AEC0138();
                    v34 = v26;
                    if (v25 >= 0x17)
                    {
                      v35 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v25 | 7) != 0x17)
                        v35 = v25 | 7;
                      v36 = v35 + 1;
                      v33 = (char *)operator new(v35 + 1);
                      v223 = v25;
                      v224 = v36 | 0x8000000000000000;
                      v222 = v33;
                    }
                    else
                    {
                      HIBYTE(v224) = v25;
                      if (!v25)
                      {
LABEL_89:
                        v33[v25] = 0;
                        v225 = 1;
                        v37 = v220.__r_.__value_.__r.__words[0];
                        if (SHIBYTE(v224) < 0)
                          operator delete(v222);
                        if (BYTE8(v221) && SBYTE7(v221) < 0)
                          operator delete((void *)v220.__r_.__value_.__l.__size_);
                        if (v220.__r_.__value_.__r.__words[0])
                          os_release(v220.__r_.__value_.__l.__data_);
                        if (!v182 || !*(_QWORD *)(v182 + 24))
                        {
                          os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
                          LODWORD(v220.__r_.__value_.__l.__data_) = 136315138;
                          *(std::string::size_type *)((char *)v220.__r_.__value_.__r.__words + 4) = (std::string::size_type)__s;
                          v43 = (void *)_os_log_send_and_compose_impl();
                          if (v43)
                            free(v43);
                          goto LABEL_221;
                        }
                        _os_log_pack_size();
                        v38 = MEMORY[0x20BD35848]();
                        v39 = (_QWORD *)operator new();
                        *v39 = &off_24C3F21E0;
                        v39[1] = 0;
                        v39[2] = 0;
                        v39[3] = v38;
                        v215.__r_.__value_.__r.__words[0] = v38;
                        v215.__r_.__value_.__l.__size_ = v38;
                        v216 = 0;
                        v217 = 0;
                        v215.__r_.__value_.__r.__words[2] = (std::string::size_type)v39;
                        v40 = strlen(__s);
                        if (v40 > 0x7FFFFFFFFFFFFFF7)
                          sub_20AEC0138();
                        v41 = v40;
                        if (v40 >= 0x17)
                        {
                          v44 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v40 | 7) != 0x17)
                            v44 = v40 | 7;
                          v45 = v44 + 1;
                          v42 = operator new(v44 + 1);
                          *(_QWORD *)&v219 = v41;
                          *((_QWORD *)&v219 + 1) = v45 | 0x8000000000000000;
                          v218 = v42;
                        }
                        else
                        {
                          HIBYTE(v219) = v40;
                          v42 = &v218;
                          if (!v40)
                          {
LABEL_108:
                            *((_BYTE *)v42 + v41) = 0;
                            v46 = v218;
                            v226[0] = v219;
                            *(_QWORD *)((char *)v226 + 7) = *(_QWORD *)((char *)&v219 + 7);
                            v47 = HIBYTE(v219);
                            v48 = operator new(0x38uLL);
                            v48[1] = 0;
                            v48[2] = 0;
                            v48[3] = off_24C3F2280;
                            *v48 = &off_24C3F2230;
                            v49 = v226[0];
                            v48[4] = v46;
                            v48[5] = v49;
                            *(_QWORD *)((char *)v48 + 47) = *(_QWORD *)((char *)v226 + 7);
                            *((_BYTE *)v48 + 55) = v47;
                            v226[0] = 0;
                            *(_QWORD *)((char *)v226 + 7) = 0;
                            v50 = v217;
                            v216 = (char *)(v48 + 3);
                            v217 = (std::__shared_weak_count *)v48;
                            if (v50)
                            {
                              p_shared_owners = (unint64_t *)&v50->__shared_owners_;
                              do
                                v52 = __ldaxr(p_shared_owners);
                              while (__stlxr(v52 - 1, p_shared_owners));
                              if (!v52)
                              {
                                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                                std::__shared_weak_count::__release_weak(v50);
                              }
                            }
                            v220 = v215;
                            v53 = v216;
                            if (v215.__r_.__value_.__r.__words[2])
                            {
                              v54 = (unint64_t *)(v215.__r_.__value_.__r.__words[2] + 8);
                              do
                                v55 = __ldxr(v54);
                              while (__stxr(v55 + 1, v54));
                            }
                            v56 = v217;
                            *(_QWORD *)&v221 = v53;
                            *((_QWORD *)&v221 + 1) = v217;
                            if (v217)
                            {
                              v57 = (unint64_t *)&v217->__shared_owners_;
                              do
                                v58 = __ldxr(v57);
                              while (__stxr(v58 + 1, v57));
                              v222 = v53;
                              do
                                v59 = __ldaxr(v57);
                              while (__stlxr(v59 - 1, v57));
                              if (!v59)
                              {
                                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                                std::__shared_weak_count::__release_weak(v56);
                              }
                            }
                            else
                            {
                              v222 = v53;
                            }
                            v85 = (std::__shared_weak_count *)v215.__r_.__value_.__r.__words[2];
                            if (v215.__r_.__value_.__r.__words[2])
                            {
                              v86 = (unint64_t *)(v215.__r_.__value_.__r.__words[2] + 8);
                              do
                                v87 = __ldaxr(v86);
                              while (__stlxr(v87 - 1, v86));
                              if (!v87)
                              {
                                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                                std::__shared_weak_count::__release_weak(v85);
                              }
                            }
                            v88 = v220.__r_.__value_.__r.__words[0];
                            if (v222[31] >= 0)
                              v89 = v222 + 8;
                            else
                              v89 = (char *)*((_QWORD *)v222 + 1);
                            v90 = _os_log_pack_fill();
                            *(_DWORD *)v90 = 136315138;
                            *(_QWORD *)(v90 + 4) = v89;
                            v91 = operator new();
                            v92 = *(unsigned __int8 *)(v176 + 39);
                            v93 = *(const char **)(v176 + 16);
                            v94 = *(_QWORD *)(v176 + 24);
                            v95 = v221;
                            *(_OWORD *)(v91 + 8) = *(_OWORD *)&v220.__r_.__value_.__r.__words[1];
                            if ((v92 & 0x80u) != 0)
                              v92 = v94;
                            else
                              v93 = v178;
                            *(_QWORD *)v91 = v88;
                            *(_OWORD *)&v220.__r_.__value_.__r.__words[1] = 0uLL;
                            *(_OWORD *)(v91 + 24) = v95;
                            v221 = 0uLL;
                            *(_QWORD *)(v91 + 40) = v93;
                            *(_QWORD *)(v91 + 48) = v92;
                            *(_BYTE *)(v91 + 56) = 16;
                            v218 = 0;
                            v215.__r_.__value_.__r.__words[0] = v91;
                            (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v182 + 24) + 40))(*(_QWORD *)(v182 + 24), &v215);
                            v96 = v215.__r_.__value_.__r.__words[0];
                            v215.__r_.__value_.__r.__words[0] = 0;
                            if (v96)
                            {
                              v97 = *(std::__shared_weak_count **)(v96 + 32);
                              if (v97)
                              {
                                v98 = (unint64_t *)&v97->__shared_owners_;
                                do
                                  v99 = __ldaxr(v98);
                                while (__stlxr(v99 - 1, v98));
                                if (!v99)
                                {
                                  ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                                  std::__shared_weak_count::__release_weak(v97);
                                }
                              }
                              v100 = *(std::__shared_weak_count **)(v96 + 16);
                              if (v100)
                              {
                                v101 = (unint64_t *)&v100->__shared_owners_;
                                do
                                  v102 = __ldaxr(v101);
                                while (__stlxr(v102 - 1, v101));
                                if (!v102)
                                {
                                  ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                                  std::__shared_weak_count::__release_weak(v100);
                                }
                              }
                              MEMORY[0x20BD3583C](v96, 0x10F0C40B62ED6C6);
                              v103 = v218;
                              v218 = 0;
                              if (v103)
                              {
                                v104 = (std::__shared_weak_count *)v103[4];
                                if (v104)
                                {
                                  v105 = (unint64_t *)&v104->__shared_owners_;
                                  do
                                    v106 = __ldaxr(v105);
                                  while (__stlxr(v106 - 1, v105));
                                  if (!v106)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                                    std::__shared_weak_count::__release_weak(v104);
                                  }
                                }
                                v107 = (std::__shared_weak_count *)v103[2];
                                if (v107)
                                {
                                  v108 = (unint64_t *)&v107->__shared_owners_;
                                  do
                                    v109 = __ldaxr(v108);
                                  while (__stlxr(v109 - 1, v108));
                                  if (!v109)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                                    std::__shared_weak_count::__release_weak(v107);
                                  }
                                }
                                MEMORY[0x20BD3583C](v103, 0x10F0C40B62ED6C6);
                              }
                            }
                            v110 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
                            if (*((_QWORD *)&v221 + 1))
                            {
                              v111 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
                              do
                                v112 = __ldaxr(v111);
                              while (__stlxr(v112 - 1, v111));
                              if (!v112)
                              {
                                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                                std::__shared_weak_count::__release_weak(v110);
                              }
                            }
                            v113 = (std::__shared_weak_count *)v220.__r_.__value_.__r.__words[2];
                            if (v220.__r_.__value_.__r.__words[2])
                            {
                              v114 = (unint64_t *)(v220.__r_.__value_.__r.__words[2] + 8);
                              do
                                v115 = __ldaxr(v114);
                              while (__stlxr(v115 - 1, v114));
                              if (!v115)
                              {
                                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                                std::__shared_weak_count::__release_weak(v113);
                              }
                            }
LABEL_221:
                            if (v34)
                            {
                              v116 = (const char *)&__dst;
                              if (v195 < 0)
                                v116 = (const char *)__dst;
                              sub_20AEC0664((uint64_t)&v184, "%s", v116);
                              sub_20AECED58((uint64_t)&v184);
                            }
                            sub_20AECED58((uint64_t)&v184);
                            v117 = v192;
                            if (!v192)
                              goto LABEL_302;
                            v118 = (unint64_t *)&v192->__shared_owners_;
                            do
                              v119 = __ldaxr(v118);
                            while (__stlxr(v119 - 1, v118));
LABEL_300:
                            if (!v119)
                            {
                              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                              std::__shared_weak_count::__release_weak(v117);
                            }
LABEL_302:
                            if (SHIBYTE(v195) < 0)
                              operator delete(__dst);
                            *(_QWORD *)&v196 = *MEMORY[0x24BEDB7F0];
                            v169 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
                            *(void **)((char *)&__p[-2] + *(_QWORD *)(v196 - 24)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                            __p[0] = v169;
                            __p[1] = (void *)(MEMORY[0x24BEDB848] + 16);
                            if (v209 < 0)
                              operator delete(v206);
                            std::streambuf::~streambuf();
                            std::iostream::~basic_iostream();
                            MEMORY[0x20BD35758](&v212);
                            goto LABEL_307;
                          }
                        }
                        memcpy(v42, __s, v41);
                        goto LABEL_108;
                      }
                    }
                    memmove(v33, v24, v25);
                    goto LABEL_89;
                  }
                }
                memmove(p_size, v28, v29);
                goto LABEL_81;
              }
            }
            memmove(p_dst, v19, v8);
            goto LABEL_60;
          }
LABEL_325:
          sub_20AEC0138();
        }
      }
LABEL_307:
      sub_20B0A5250((uint64_t)v214);
LABEL_308:
      if (*(_QWORD *)(a1 + 160))
      {
        sub_20B4F56E0((CFErrorRef *)&v196, (uint64_t)a2);
        v170 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
        v171 = v196;
        if ((_QWORD)v196)
          CFRetain((CFTypeRef)v196);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 160) + 16))(**(_QWORD **)(a1 + 160), v171);
        if (!v170)
          goto LABEL_323;
        v172 = (unint64_t *)&v170->__shared_owners_;
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
      }
      else
      {
        if (!*(_BYTE *)(a1 + 152))
          goto LABEL_323;
        sub_20B4F56E0((CFErrorRef *)&v196, (uint64_t)a2);
        v170 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
        v174 = v196;
        if ((_QWORD)v196)
          CFRetain((CFTypeRef)v196);
        (*(void (**)(_QWORD, uint64_t))(a1 + 144))(*(_QWORD *)(a1 + 136), v174);
        if (!v170)
          goto LABEL_323;
        v175 = (unint64_t *)&v170->__shared_owners_;
        do
          v173 = __ldaxr(v175);
        while (__stlxr(v173 - 1, v175));
      }
      if (!v173)
      {
        ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
        std::__shared_weak_count::__release_weak(v170);
      }
      goto LABEL_323;
    }
    sub_20AECAFC8(&v213);
    if (**(int **)(v213 + 56) > 5)
      goto LABEL_307;
    v10 = *(unsigned __int8 *)(v213 + 72);
    v183 = sub_20AEC3CD0(v213, "OSLogSurrogateAppender", 1, 0);
    if (!v10 && !v183)
      goto LABEL_307;
    sub_20AEC0BD8((uint64_t)&v196);
    sub_20B5287D4((uint64_t)a2, &v220);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v220;
    else
      v11 = (std::string *)v220.__r_.__value_.__r.__words[0];
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
    else
      v12 = v220.__r_.__value_.__l.__size_;
    sub_20AEC01D0(__p, (uint64_t)v11, v12);
    if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v220.__r_.__value_.__l.__data_);
    if ((v211 & 0x10) != 0)
    {
      v17 = v210;
      if (v210 < v204)
      {
        v210 = v204;
        v17 = v204;
      }
      v18 = (const void **)v202;
    }
    else
    {
      if ((v211 & 8) == 0)
      {
        v13 = 0;
        HIBYTE(v195) = 0;
        v14 = (void **)&__dst;
        goto LABEL_132;
      }
      v18 = (const void **)&v199;
      v17 = v201;
    }
    v60 = *v18;
    v13 = v17 - (_QWORD)*v18;
    if (v13 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_325;
    if (v13 >= 0x17)
    {
      v61 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v61 = v13 | 7;
      v62 = v61 + 1;
      v14 = (void **)operator new(v61 + 1);
      v194 = v13;
      v195 = v62 | 0x8000000000000000;
      __dst = v14;
    }
    else
    {
      HIBYTE(v195) = v17 - *(_BYTE *)v18;
      v14 = (void **)&__dst;
      if (!v13)
      {
LABEL_132:
        *((_BYTE *)v14 + v13) = 0;
        v184 = &v213;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v186 = std::chrono::system_clock::now().__d_.__rep_;
        v187 = 5;
        v188 = "unknown file";
        v189 = 72;
        v191 = 0;
        v192 = 0;
        v190 = "unknown function";
        if (v195 >= 0)
          v63 = (void **)&__dst;
        else
          v63 = __dst;
        v64 = *v184;
        v65 = (const char *)(*v184 + 16);
        v177 = *v184;
        v179 = v65;
        __sa = (char *)v63;
        if (*(char *)(*v184 + 39) < 0)
        {
          v65 = *(const char **)(v64 + 16);
          v66 = *(_QWORD *)(v64 + 24);
        }
        else
        {
          v66 = *(unsigned __int8 *)(*v184 + 39);
        }
        v67 = v10;
        v68 = atomic_load((unsigned __int8 *)&qword_254630278);
        if ((v68 & 1) == 0 && __cxa_guard_acquire(&qword_254630278))
        {
          sub_20B5271B0((uint64_t)&v220);
          sub_20AECF058("com.apple.cv3d", (unint64_t)&v220, &qword_254630260);
          if ((_BYTE)v221 && SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v220.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630260, &dword_20AEBB000);
          __cxa_guard_release(&qword_254630278);
        }
        if (byte_254630277 >= 0)
          v69 = (const char *)&qword_254630260;
        else
          v69 = (const char *)qword_254630260;
        if (byte_254630277 >= 0)
          v70 = byte_254630277;
        else
          v70 = unk_254630268;
        v220.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v69, v65);
        v71 = &v220.__r_.__value_.__l.__size_;
        if (v70 > 0x7FFFFFFFFFFFFFF7)
          sub_20AEC0138();
        if (v70 >= 0x17)
        {
          v72 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v70 | 7) != 0x17)
            v72 = v70 | 7;
          v73 = v72 + 1;
          v71 = (std::string::size_type *)operator new(v72 + 1);
          v220.__r_.__value_.__r.__words[2] = v70;
          *(_QWORD *)&v221 = v73 | 0x8000000000000000;
          v220.__r_.__value_.__l.__size_ = (std::string::size_type)v71;
        }
        else
        {
          BYTE7(v221) = v70;
          if (!v70)
          {
LABEL_153:
            *((_BYTE *)v71 + v70) = 0;
            BYTE8(v221) = 1;
            v74 = (char *)&v222;
            if (v66 > 0x7FFFFFFFFFFFFFF7)
              sub_20AEC0138();
            v75 = v67;
            if (v66 >= 0x17)
            {
              v76 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v66 | 7) != 0x17)
                v76 = v66 | 7;
              v77 = v76 + 1;
              v74 = (char *)operator new(v76 + 1);
              v223 = v66;
              v224 = v77 | 0x8000000000000000;
              v222 = v74;
            }
            else
            {
              HIBYTE(v224) = v66;
              if (!v66)
              {
LABEL_161:
                v74[v66] = 0;
                v225 = 1;
                v78 = v220.__r_.__value_.__r.__words[0];
                if (SHIBYTE(v224) < 0)
                  operator delete(v222);
                if (BYTE8(v221) && SBYTE7(v221) < 0)
                  operator delete((void *)v220.__r_.__value_.__l.__size_);
                if (v220.__r_.__value_.__r.__words[0])
                  os_release(v220.__r_.__value_.__l.__data_);
                if (!v183 || !*(_QWORD *)(v183 + 24))
                {
                  os_log_type_enabled(v78, OS_LOG_TYPE_ERROR);
                  LODWORD(v220.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v220.__r_.__value_.__r.__words + 4) = (std::string::size_type)__sa;
                  v84 = (void *)_os_log_send_and_compose_impl();
                  if (v84)
                    free(v84);
                  goto LABEL_293;
                }
                _os_log_pack_size();
                v79 = MEMORY[0x20BD35848]();
                v80 = (_QWORD *)operator new();
                *v80 = &off_24C3F21E0;
                v80[1] = 0;
                v80[2] = 0;
                v80[3] = v79;
                v215.__r_.__value_.__r.__words[0] = v79;
                v215.__r_.__value_.__l.__size_ = v79;
                v216 = 0;
                v217 = 0;
                v215.__r_.__value_.__r.__words[2] = (std::string::size_type)v80;
                v81 = strlen(__sa);
                if (v81 > 0x7FFFFFFFFFFFFFF7)
                  sub_20AEC0138();
                v82 = v81;
                if (v81 >= 0x17)
                {
                  v120 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v81 | 7) != 0x17)
                    v120 = v81 | 7;
                  v121 = v120 + 1;
                  v83 = operator new(v120 + 1);
                  *(_QWORD *)&v219 = v82;
                  *((_QWORD *)&v219 + 1) = v121 | 0x8000000000000000;
                  v218 = v83;
                }
                else
                {
                  HIBYTE(v219) = v81;
                  v83 = &v218;
                  if (!v81)
                  {
LABEL_233:
                    *((_BYTE *)v83 + v82) = 0;
                    v122 = v218;
                    v226[0] = v219;
                    *(_QWORD *)((char *)v226 + 7) = *(_QWORD *)((char *)&v219 + 7);
                    v123 = HIBYTE(v219);
                    v124 = operator new(0x38uLL);
                    v124[1] = 0;
                    v124[2] = 0;
                    v124[3] = off_24C3F2280;
                    *v124 = &off_24C3F2230;
                    v125 = v226[0];
                    v124[4] = v122;
                    v124[5] = v125;
                    *(_QWORD *)((char *)v124 + 47) = *(_QWORD *)((char *)v226 + 7);
                    *((_BYTE *)v124 + 55) = v123;
                    v226[0] = 0;
                    *(_QWORD *)((char *)v226 + 7) = 0;
                    v126 = v217;
                    v216 = (char *)(v124 + 3);
                    v217 = (std::__shared_weak_count *)v124;
                    if (v126)
                    {
                      v127 = (unint64_t *)&v126->__shared_owners_;
                      do
                        v128 = __ldaxr(v127);
                      while (__stlxr(v128 - 1, v127));
                      if (!v128)
                      {
                        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                        std::__shared_weak_count::__release_weak(v126);
                      }
                    }
                    v220 = v215;
                    v129 = v216;
                    if (v215.__r_.__value_.__r.__words[2])
                    {
                      v130 = (unint64_t *)(v215.__r_.__value_.__r.__words[2] + 8);
                      do
                        v131 = __ldxr(v130);
                      while (__stxr(v131 + 1, v130));
                    }
                    v132 = v217;
                    *(_QWORD *)&v221 = v129;
                    *((_QWORD *)&v221 + 1) = v217;
                    if (v217)
                    {
                      v133 = (unint64_t *)&v217->__shared_owners_;
                      do
                        v134 = __ldxr(v133);
                      while (__stxr(v134 + 1, v133));
                      v222 = v129;
                      do
                        v135 = __ldaxr(v133);
                      while (__stlxr(v135 - 1, v133));
                      if (!v135)
                      {
                        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                        std::__shared_weak_count::__release_weak(v132);
                      }
                    }
                    else
                    {
                      v222 = v129;
                    }
                    v136 = (std::__shared_weak_count *)v215.__r_.__value_.__r.__words[2];
                    if (v215.__r_.__value_.__r.__words[2])
                    {
                      v137 = (unint64_t *)(v215.__r_.__value_.__r.__words[2] + 8);
                      do
                        v138 = __ldaxr(v137);
                      while (__stlxr(v138 - 1, v137));
                      if (!v138)
                      {
                        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                        std::__shared_weak_count::__release_weak(v136);
                      }
                    }
                    v139 = v220.__r_.__value_.__r.__words[0];
                    if (v222[31] >= 0)
                      v140 = v222 + 8;
                    else
                      v140 = (char *)*((_QWORD *)v222 + 1);
                    v141 = _os_log_pack_fill();
                    *(_DWORD *)v141 = 136315138;
                    *(_QWORD *)(v141 + 4) = v140;
                    v142 = operator new();
                    v143 = *(unsigned __int8 *)(v177 + 39);
                    v144 = *(const char **)(v177 + 16);
                    v145 = *(_QWORD *)(v177 + 24);
                    v146 = v221;
                    *(_OWORD *)(v142 + 8) = *(_OWORD *)&v220.__r_.__value_.__r.__words[1];
                    if ((v143 & 0x80u) != 0)
                      v143 = v145;
                    else
                      v144 = v179;
                    *(_QWORD *)v142 = v139;
                    *(_OWORD *)&v220.__r_.__value_.__r.__words[1] = 0uLL;
                    *(_OWORD *)(v142 + 24) = v146;
                    v221 = 0uLL;
                    *(_QWORD *)(v142 + 40) = v144;
                    *(_QWORD *)(v142 + 48) = v143;
                    *(_BYTE *)(v142 + 56) = 16;
                    v218 = 0;
                    v215.__r_.__value_.__r.__words[0] = v142;
                    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v183 + 24) + 40))(*(_QWORD *)(v183 + 24), &v215);
                    v147 = v215.__r_.__value_.__r.__words[0];
                    v215.__r_.__value_.__r.__words[0] = 0;
                    if (v147)
                    {
                      v148 = *(std::__shared_weak_count **)(v147 + 32);
                      if (v148)
                      {
                        v149 = (unint64_t *)&v148->__shared_owners_;
                        do
                          v150 = __ldaxr(v149);
                        while (__stlxr(v150 - 1, v149));
                        if (!v150)
                        {
                          ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                          std::__shared_weak_count::__release_weak(v148);
                        }
                      }
                      v151 = *(std::__shared_weak_count **)(v147 + 16);
                      if (v151)
                      {
                        v152 = (unint64_t *)&v151->__shared_owners_;
                        do
                          v153 = __ldaxr(v152);
                        while (__stlxr(v153 - 1, v152));
                        if (!v153)
                        {
                          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                          std::__shared_weak_count::__release_weak(v151);
                        }
                      }
                      MEMORY[0x20BD3583C](v147, 0x10F0C40B62ED6C6);
                      v154 = v218;
                      v218 = 0;
                      if (v154)
                      {
                        v155 = (std::__shared_weak_count *)v154[4];
                        if (v155)
                        {
                          v156 = (unint64_t *)&v155->__shared_owners_;
                          do
                            v157 = __ldaxr(v156);
                          while (__stlxr(v157 - 1, v156));
                          if (!v157)
                          {
                            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                            std::__shared_weak_count::__release_weak(v155);
                          }
                        }
                        v158 = (std::__shared_weak_count *)v154[2];
                        if (v158)
                        {
                          v159 = (unint64_t *)&v158->__shared_owners_;
                          do
                            v160 = __ldaxr(v159);
                          while (__stlxr(v160 - 1, v159));
                          if (!v160)
                          {
                            ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                            std::__shared_weak_count::__release_weak(v158);
                          }
                        }
                        MEMORY[0x20BD3583C](v154, 0x10F0C40B62ED6C6);
                      }
                    }
                    v161 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
                    if (*((_QWORD *)&v221 + 1))
                    {
                      v162 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
                      do
                        v163 = __ldaxr(v162);
                      while (__stlxr(v163 - 1, v162));
                      if (!v163)
                      {
                        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                        std::__shared_weak_count::__release_weak(v161);
                      }
                    }
                    v164 = (std::__shared_weak_count *)v220.__r_.__value_.__r.__words[2];
                    if (v220.__r_.__value_.__r.__words[2])
                    {
                      v165 = (unint64_t *)(v220.__r_.__value_.__r.__words[2] + 8);
                      do
                        v166 = __ldaxr(v165);
                      while (__stlxr(v166 - 1, v165));
                      if (!v166)
                      {
                        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                        std::__shared_weak_count::__release_weak(v164);
                      }
                    }
LABEL_293:
                    if (v75)
                    {
                      v167 = (const char *)&__dst;
                      if (v195 < 0)
                        v167 = (const char *)__dst;
                      sub_20AEC0664((uint64_t)&v184, "%s", v167);
                      sub_20AECED58((uint64_t)&v184);
                    }
                    sub_20AECED58((uint64_t)&v184);
                    v117 = v192;
                    if (!v192)
                      goto LABEL_302;
                    v168 = (unint64_t *)&v192->__shared_owners_;
                    do
                      v119 = __ldaxr(v168);
                    while (__stlxr(v119 - 1, v168));
                    goto LABEL_300;
                  }
                }
                memcpy(v83, __sa, v82);
                goto LABEL_233;
              }
            }
            memmove(v74, v65, v66);
            goto LABEL_161;
          }
        }
        memmove(v71, v69, v70);
        goto LABEL_153;
      }
    }
    memmove(v14, v60, v13);
    goto LABEL_132;
  }
  if (*(_BYTE *)(a1 + 120))
  {
    sub_20AECF498(a1);
  }
  else if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/VisualLogger/src/Return.cpp", 89, (uint64_t)"(last == kSuccess)", 18, (uint64_t)"More than one error occurred", 28, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v196 = *a2;
  sub_20AECEBD0(__p, a2 + 1);
  sub_20AECEEFC(a1, &v196);
  if ((_BYTE)v210)
  {
    if (!v208)
      goto LABEL_25;
    if (v207 < 0)
    {
      operator delete(v205);
      if ((v203 & 0x80000000) == 0)
      {
LABEL_25:
        if (!v199)
          goto LABEL_323;
        goto LABEL_26;
      }
    }
    else if ((v203 & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v200);
    if (!v199)
      goto LABEL_323;
LABEL_26:
    if (v198 < 0)
      operator delete(__p[0]);
  }
LABEL_323:
  std::mutex::unlock(v4);
}

void sub_20AECCA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;

  if (a2)
  {
    if (*(_BYTE *)(v63 - 168))
    {
      if (*(char *)(v63 - 169) < 0)
      {
        operator delete(*(void **)(v63 - 192));
        __cxa_guard_abort(&qword_254630278);
        sub_20AEC01C0(exception_object);
      }
    }
    __cxa_guard_abort(&qword_254630278);
    sub_20AEC01C0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20AECCC3C(unsigned int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 __p;
  uint64_t v18;
  unsigned __int8 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char v26;

  sub_20AECEBD0(v7, a2);
  sub_20AECF6E0((uint64_t)&v16, a1, (__int128 *)v7);
  *(_OWORD *)a3 = v16;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v26)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v19;
    if (v19)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v18;
      v18 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v25)
    {
      v6 = v22;
      *(_QWORD *)(a3 + 64) = v21;
      *(_OWORD *)(a3 + 48) = v20;
      v20 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v23;
      *(_QWORD *)(a3 + 96) = v24;
      v21 = 0;
      v23 = 0uLL;
      v24 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    if (v5 && SHIBYTE(v18) < 0)
      operator delete((void *)__p);
  }
  if (v15)
  {
    if (!v14)
      goto LABEL_13;
    if (v13 < 0)
    {
      operator delete(v12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v9)
          return;
        goto LABEL_14;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v10);
    if (!v9)
      return;
LABEL_14:
    if (v8 < 0)
      operator delete(v7[0]);
  }
}

void sub_20AECCDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCDB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AECCDB4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 96))
    return a1;
  if (*(_BYTE *)(a1 + 88))
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(*(void **)(a1 + 32));
      if (!*(_BYTE *)(a1 + 24))
        return a1;
      goto LABEL_6;
    }
    operator delete(*(void **)(a1 + 64));
    if (*(char *)(a1 + 55) < 0)
      goto LABEL_9;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 24))
    return a1;
LABEL_6:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20AECCE40(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (*(_BYTE *)(a1 + 104))
  {
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(*(void **)(a1 + 48));
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_6;
    }
    operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      goto LABEL_9;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_6:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20AECCECC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v4;
  uint64_t v5;
  void *v6[2];
  uint64_t v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  std::string __p;
  void *v16[2];
  uint64_t v17;
  uint64_t v18;
  std::string __dst;
  int v20;
  std::string **p_p_dst;
  std::string *p_dst;
  const char *v23;
  std::string *v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v18 = a1;
  if (*(_BYTE *)(a2 + 24))
  {
    p_dst = (std::string *)"argument '";
    v23 = (const char *)10;
    v4 = (const char *)*(unsigned __int8 *)(a2 + 23);
    if ((char)v4 >= 0)
      v5 = a2;
    else
      v5 = *(_QWORD *)a2;
    if ((char)v4 < 0)
      v4 = *(const char **)(a2 + 8);
    v24 = (std::string *)v5;
    v25 = v4;
    v26 = "' ";
    v27 = 2;
    sub_20AECFDF8((uint64_t)&p_dst, (uint64_t)&v28, 0, 0, &__p);
    v20 = -1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20AEC60F4(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      goto LABEL_11;
    }
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v20 = -1;
  }
  __dst = __p;
LABEL_11:
  v20 = 1;
  p_dst = &__dst;
  v23 = "in function ";
  v24 = &__dst;
  v25 = "in function ";
  v26 = "in function ";
  sub_20AECFF5C((uint64_t *)&v24, (uint64_t)&__dst);
  if (v18)
  {
    p_dst = &__dst;
    v23 = (const char *)&v18;
    v24 = &__dst;
    v25 = (const char *)&v18;
    v26 = (const char *)&v18;
    if (v20 != -1)
    {
      p_p_dst = &p_dst;
      ((void (*)(std::string ***, std::string *))off_24C3F2348[v20])(&p_p_dst, &__dst);
      goto LABEL_16;
    }
LABEL_37:
    sub_20AECFAB8();
  }
  p_dst = &__dst;
  v23 = "nullptr";
  v24 = &__dst;
  v25 = "nullptr";
  v26 = "nullptr";
  if (v20 == -1)
    goto LABEL_37;
  p_p_dst = &p_dst;
  ((void (*)(std::string ***, std::string *))off_24C3F2330[v20])(&p_p_dst, &__dst);
LABEL_16:
  if (v20 == -1)
    sub_20AECFAB8();
  p_dst = (std::string *)&p_p_dst;
  ((void (*)(void **__return_ptr, std::string **, std::string *))off_24C3F2318[v20])(v16, &p_dst, &__dst);
  if (v20 != -1)
    ((void (*)(std::string **, std::string *))off_24C3F2300[v20])(&p_dst, &__dst);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      goto LABEL_21;
  }
  else if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_21:
    *(_OWORD *)v6 = *(_OWORD *)v16;
    v7 = v17;
    goto LABEL_24;
  }
  sub_20AEC60F4(v6, v16[0], (unint64_t)v16[1]);
LABEL_24:
  v8 = 1;
  LOBYTE(v9) = 0;
  v13 = 0;
  v14 = 1;
  sub_20AECCC3C(0xBu, (__int128 *)v6, a3);
  if (!v14)
    goto LABEL_31;
  if (v13)
  {
    if ((v12 & 0x80000000) == 0)
    {
      if ((v10 & 0x80000000) == 0)
        goto LABEL_28;
LABEL_35:
      operator delete(v9);
      if (!v8)
        goto LABEL_31;
      goto LABEL_29;
    }
    operator delete(v11);
    if (v10 < 0)
      goto LABEL_35;
  }
LABEL_28:
  if (!v8)
    goto LABEL_31;
LABEL_29:
  if (SHIBYTE(v7) < 0)
    operator delete(v6[0]);
LABEL_31:
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
}

void sub_20AECD1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  sub_20AECFA60(v33 - 112);
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AECD224(std::string::size_type a1, const void **a2, CFErrorRef *a3)
{
  char v3;
  int v6;
  std::string::size_type size;
  size_t v8;
  unint64_t v9;
  std::string *p_p;
  std::string::size_type v12;
  uint64_t v13;
  uint64_t v14;
  std::string::value_type *v15;
  const void *v16;
  uint64_t v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  void *v24[2];
  uint64_t v25;
  uint64_t v26;
  void *v27[2];
  uint64_t v28;
  char v29;
  char v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  std::string __p;
  std::string v44;
  std::string v45;
  std::string __dst;
  uint64_t v47;
  std::string *v48;
  std::string::size_type v49;
  uint64_t v50;
  void *v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v6 = *((char *)a2 + 23);
  size = (std::string::size_type)a2[1];
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  if (v8)
  {
    v9 = v8 + 2;
    if (v8 + 2 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v9 > 0x16)
    {
      v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v13 = v9 | 7;
      v14 = v13 + 1;
      p_p = (std::string *)operator new(v13 + 1);
      __p.__r_.__value_.__l.__size_ = v8 + 2;
      __p.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      p_p = &__p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v8 + 2;
    }
    LOWORD(p_p->__r_.__value_.__l.__data_) = 8250;
    v15 = &p_p->__r_.__value_.__s.__data_[2];
    if (v6 >= 0)
      v16 = a2;
    else
      v16 = *a2;
    memmove(v15, v16, v8);
    v15[v8] = 0;
    LODWORD(v47) = -1;
    v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      sub_20AEC60F4(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      __dst = __p;
    v44 = __dst;
    v12 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    size = __dst.__r_.__value_.__l.__size_;
  }
  else
  {
    LODWORD(v12) = 0;
    *((_BYTE *)&v44.__r_.__value_.__s + 23) = 0;
    v44.__r_.__value_.__s.__data_[0] = 0;
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected runtime exception during operation on ";
  __dst.__r_.__value_.__l.__size_ = 49;
  v17 = *(unsigned __int8 *)(a1 + 23);
  if ((v17 & 0x80u) == 0)
    v18 = a1;
  else
    v18 = *(_QWORD *)a1;
  if ((v17 & 0x80u) != 0)
    v17 = *(_QWORD *)(a1 + 8);
  __dst.__r_.__value_.__r.__words[2] = v18;
  v47 = v17;
  v12 = v12;
  v19 = &v44;
  if ((v12 & 0x80u) != 0)
  {
    v19 = (std::string *)v44.__r_.__value_.__r.__words[0];
    v12 = size;
  }
  v48 = v19;
  v49 = v12;
  sub_20AECFDF8((uint64_t)&__dst, (uint64_t)&v50, 0, 0, &v45);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if (!v8)
      goto LABEL_31;
  }
  else if (!v8)
  {
    goto LABEL_31;
  }
  if (v3 < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_34;
  }
LABEL_31:
  if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_32:
    __dst = v45;
    goto LABEL_35;
  }
LABEL_34:
  sub_20AEC60F4(&__dst, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
LABEL_35:
  LOBYTE(v47) = 1;
  LOBYTE(v48) = 0;
  v53 = 0;
  v54 = 1;
  sub_20AECCC3C(4u, (__int128 *)&__dst, (uint64_t)&v20);
  if (!v54)
    goto LABEL_42;
  if (v53)
  {
    if ((v52 & 0x80000000) == 0)
    {
      if ((SHIBYTE(v50) & 0x80000000) == 0)
        goto LABEL_39;
LABEL_67:
      operator delete(v48);
      if (!(_BYTE)v47)
        goto LABEL_42;
      goto LABEL_40;
    }
    operator delete(v51);
    if (SHIBYTE(v50) < 0)
      goto LABEL_67;
  }
LABEL_39:
  if (!(_BYTE)v47)
    goto LABEL_42;
LABEL_40:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_42:
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v31 = v20;
  LOBYTE(v32) = 0;
  v41 = 0;
  if (v30)
  {
    v34 = 0;
    if (v23)
    {
      v32 = v21;
      v33 = v22;
      v22 = 0;
      v21 = 0uLL;
      v34 = 1;
    }
    LOBYTE(v35) = 0;
    v40 = 0;
    if (v29)
    {
      v36 = v25;
      v35 = *(_OWORD *)v24;
      v24[0] = 0;
      v24[1] = 0;
      v38 = *(_OWORD *)v27;
      v37 = v26;
      v39 = v28;
      v25 = 0;
      v27[0] = 0;
      v27[1] = 0;
      v28 = 0;
      v40 = 1;
    }
    v41 = 1;
  }
  v42 = 0;
  sub_20AECB410(&v31, a3);
  if (!v42 && v41)
  {
    if (!v40)
      goto LABEL_55;
    if (SHIBYTE(v39) < 0)
    {
      operator delete((void *)v38);
      if ((SHIBYTE(v36) & 0x80000000) == 0)
      {
LABEL_55:
        if (!v34)
          goto LABEL_58;
LABEL_56:
        if (SHIBYTE(v33) < 0)
          operator delete((void *)v32);
        goto LABEL_58;
      }
    }
    else if ((SHIBYTE(v36) & 0x80000000) == 0)
    {
      goto LABEL_55;
    }
    operator delete((void *)v35);
    if (!v34)
      goto LABEL_58;
    goto LABEL_56;
  }
LABEL_58:
  if (!v30)
    return;
  if (v29)
  {
    if ((SHIBYTE(v28) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v25) & 0x80000000) == 0)
        goto LABEL_62;
LABEL_70:
      operator delete(v24[0]);
      if (!v23)
        return;
      goto LABEL_63;
    }
    operator delete(v27[0]);
    if (SHIBYTE(v25) < 0)
      goto LABEL_70;
  }
LABEL_62:
  if (!v23)
    return;
LABEL_63:
  if (SHIBYTE(v22) < 0)
    operator delete((void *)v21);
}

void sub_20AECD66C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_20AECFA60(v2 - 192);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20AECD688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p)
{
  uint64_t v42;

  if (*(char *)(v42 - 193) < 0)
  {
    operator delete(*(void **)(v42 - 216));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AECD704(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120) || !*(_BYTE *)(a1 + 112))
    return a1;
  if (*(_BYTE *)(a1 + 104))
  {
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_7;
LABEL_11:
      operator delete(*(void **)(a1 + 48));
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_8;
    }
    operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      goto LABEL_11;
  }
LABEL_7:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_8:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20AECD798(uint64_t *a1, __int128 **a2, uint64_t a3, CFErrorRef *a4)
{
  unint64_t v7;
  int64x2_t v8;
  int8x16_t v9;
  uint64_t *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  void **v16;
  void **v17;
  uint64_t v18;
  uint64_t *v19;
  std::string::size_type size;
  std::string *v21;
  int v22;
  int v23;
  int v24;
  char v25[16];
  void *v26;
  char v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  char v33;
  char v34;
  char v35;
  __int128 v36;
  __int128 v37;
  const char *v38;
  char v39;
  void *v40[2];
  const char *v41;
  uint64_t v42;
  void *v43[2];
  uint64_t v44;
  char v45;
  char v46;
  __int128 v47;
  __int128 v48;
  const char *v49;
  char v50;
  __int128 v51;
  const char *v52;
  uint64_t *v53;
  void *v54[2];
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  uint64_t v59;
  __int128 v60;
  std::string v61;
  std::string v62;
  std::string __p;
  char v64;
  void *v65;
  char v66;
  void *v67;
  char v68;
  char v69;
  char v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 __s;
  __int128 v76;
  const char *v77;
  uint64_t v78;
  __int128 v79;
  const char *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char v84;
  unsigned __int8 v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  sub_20AECF9B0(v25, a3);
  v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3);
  v72 = 0uLL;
  v71 = 0;
  sub_20AECF88C((uint64_t)&v71, v7);
  v10 = &v59;
  v11 = *a2;
  v12 = a2[1];
  if (*a2 != v12)
  {
    do
    {
      if (*((char *)v11 + 23) < 0)
      {
        sub_20AEC60F4(&__p, *(void **)v11, *((_QWORD *)v11 + 1));
      }
      else
      {
        v14 = *v11;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
      }
      sub_20B52B814(&__p, "cv3d::", 6, "", 0, 0, 0, (uint64_t)&__s);
      sub_20B52B814((std::string *)&__s, "kit::", 5, "", 0, 0, 0, (uint64_t)&v73);
      if (SBYTE7(v76) < 0)
      {
        operator delete((void *)__s);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_10:
          v15 = v72;
          if ((unint64_t)v72 >= *((_QWORD *)&v72 + 1))
            goto LABEL_14;
          goto LABEL_3;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_10;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      v15 = v72;
      if ((unint64_t)v72 >= *((_QWORD *)&v72 + 1))
      {
LABEL_14:
        *(_QWORD *)&v72 = sub_20AEC81D4((void **)&v71, (uint64_t)&v73);
        if (SHIBYTE(v74) < 0)
          operator delete((void *)v73);
        goto LABEL_4;
      }
LABEL_3:
      v13 = v73;
      *(_QWORD *)(v15 + 16) = v74;
      *(_OWORD *)v15 = v13;
      *(_QWORD *)&v72 = v15 + 24;
LABEL_4:
      v11 = (__int128 *)((char *)v11 + 24);
    }
    while (v11 != v12);
  }
  v59 = v71;
  v16 = (void **)v71;
  v60 = v72;
  v17 = (void **)v72;
  sub_20AECFBC8(v71, v72, ", ", 2uLL, &v61, v8, v9);
  *(_QWORD *)&__s = "while trying to create ";
  *((_QWORD *)&__s + 1) = 23;
  v18 = *((unsigned __int8 *)a1 + 23);
  if ((v18 & 0x80u) == 0)
    v19 = a1;
  else
    v19 = (uint64_t *)*a1;
  if ((v18 & 0x80u) != 0)
    v18 = a1[1];
  *(_QWORD *)&v76 = v19;
  *((_QWORD *)&v76 + 1) = v18;
  v77 = " with arguments (";
  v78 = 17;
  size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &v61;
  else
    v21 = (std::string *)v61.__r_.__value_.__r.__words[0];
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v61.__r_.__value_.__l.__size_;
  *(_QWORD *)&v79 = v21;
  *((_QWORD *)&v79 + 1) = size;
  v80 = ")";
  v81 = 1;
  sub_20AECFDF8((uint64_t)&__s, (uint64_t)&v82, 0, 0, &v62);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v61.__r_.__value_.__l.__data_);
    if (!v16)
      goto LABEL_30;
LABEL_38:
    while (v17 != v16)
    {
      if (*((char *)v17 - 1) < 0)
        operator delete(*(v17 - 3));
      v17 -= 3;
    }
    operator delete(v16);
    if (v35)
      goto LABEL_31;
    goto LABEL_42;
  }
  if (v16)
    goto LABEL_38;
LABEL_30:
  if (v35)
  {
LABEL_31:
    sub_20B529470(v25, (void **)&v62.__r_.__value_.__l.__data_, (uint64_t)&__s);
    goto LABEL_32;
  }
LABEL_42:
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&__p, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    __p = v62;
  v64 = 1;
  LOBYTE(v65) = 0;
  v69 = 0;
  v70 = 1;
  sub_20AECF6E0((uint64_t)&__s, 2u, (__int128 *)&__p);
  if (v70)
  {
    if (v69)
    {
      if (v68 < 0)
        operator delete(v67);
      if (v66 < 0)
        operator delete(v65);
    }
    if (v64 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_32:
  v36 = __s;
  LOBYTE(v37) = 0;
  v46 = 0;
  v22 = v85;
  if (!v85)
  {
    v24 = 0;
    v23 = 0;
    goto LABEL_49;
  }
  v39 = 0;
  if ((_BYTE)v78)
  {
    v37 = v76;
    v38 = v77;
    v77 = 0;
    v76 = 0uLL;
    v23 = 1;
    v39 = 1;
    LOBYTE(v40[0]) = 0;
    v45 = 0;
    if (v84)
      goto LABEL_35;
  }
  else
  {
    v23 = 0;
    LOBYTE(v40[0]) = 0;
    v45 = 0;
    if (v84)
    {
LABEL_35:
      v10 = (uint64_t *)v81;
      v41 = v80;
      *(_OWORD *)v40 = v79;
      v79 = 0uLL;
      v42 = v81;
      *(_OWORD *)v43 = v82;
      v44 = v83;
      v80 = 0;
      v82 = 0uLL;
      v83 = 0;
      v24 = 1;
      v45 = 1;
      v46 = 1;
      if (!(_BYTE)v78)
        goto LABEL_49;
      goto LABEL_47;
    }
  }
  v24 = 0;
  v46 = 1;
  if (!(_BYTE)v78)
    goto LABEL_49;
LABEL_47:
  if (SHIBYTE(v77) < 0)
    operator delete((void *)v76);
LABEL_49:
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  v47 = v36;
  LOBYTE(v48) = 0;
  v57 = 0;
  if (v22)
  {
    v50 = 0;
    if (v23)
    {
      v48 = v37;
      v49 = v38;
      v38 = 0;
      v37 = 0uLL;
      v50 = 1;
    }
    LOBYTE(v51) = 0;
    v56 = 0;
    if (v24)
    {
      v51 = *(_OWORD *)v40;
      v52 = v41;
      v40[0] = 0;
      v40[1] = 0;
      v53 = v10;
      *(_OWORD *)v54 = *(_OWORD *)v43;
      v55 = v44;
      v41 = 0;
      v43[0] = 0;
      v43[1] = 0;
      v44 = 0;
      v56 = 1;
    }
    v57 = 1;
  }
  v58 = 0;
  sub_20AECB410(&v47, a4);
  if (!v58 && v57)
  {
    if (!v56)
      goto LABEL_62;
    if (SHIBYTE(v55) < 0)
    {
      operator delete(v54[0]);
      if ((SHIBYTE(v52) & 0x80000000) == 0)
      {
LABEL_62:
        if (!v50)
          goto LABEL_65;
LABEL_63:
        if (SHIBYTE(v49) < 0)
          operator delete((void *)v48);
        goto LABEL_65;
      }
    }
    else if ((SHIBYTE(v52) & 0x80000000) == 0)
    {
      goto LABEL_62;
    }
    operator delete((void *)v51);
    if (!v50)
      goto LABEL_65;
    goto LABEL_63;
  }
LABEL_65:
  if (!v22)
    goto LABEL_72;
  if (!v24)
    goto LABEL_69;
  if (SHIBYTE(v44) < 0)
  {
    operator delete(v43[0]);
    if ((SHIBYTE(v41) & 0x80000000) == 0)
    {
LABEL_69:
      if (!v23)
        goto LABEL_72;
      goto LABEL_70;
    }
  }
  else if ((SHIBYTE(v41) & 0x80000000) == 0)
  {
    goto LABEL_69;
  }
  operator delete(v40[0]);
  if (!v23)
    goto LABEL_72;
LABEL_70:
  if (SHIBYTE(v38) < 0)
    operator delete((void *)v37);
LABEL_72:
  if (v35 && v34)
  {
    if (!v33)
      goto LABEL_77;
    if (v32 < 0)
    {
      operator delete(v31);
      if ((v30 & 0x80000000) == 0)
      {
LABEL_77:
        if (!v28)
          return;
        goto LABEL_78;
      }
    }
    else if ((v30 & 0x80000000) == 0)
    {
      goto LABEL_77;
    }
    operator delete(v29);
    if (!v28)
      return;
LABEL_78:
    if (v27 < 0)
      operator delete(v26);
  }
}

void sub_20AECDDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a69;
  uint64_t a70;

  sub_20AECCDB4((uint64_t)&a70);
  if (a69 < 0)
  {
    operator delete(__p);
    sub_20AECDEE0((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_20AECDEE0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AECDEE0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 120) || !*(_BYTE *)(a1 + 112))
    return a1;
  if (*(_BYTE *)(a1 + 104))
  {
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_6;
LABEL_10:
      operator delete(*(void **)(a1 + 48));
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_7;
    }
    operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      goto LABEL_10;
  }
LABEL_6:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_7:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20AECDF74(std::string::size_type a1, uint64_t *a2, CFErrorRef *a3)
{
  uint64_t v4;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  void *v12[2];
  uint64_t v13;
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  char v17;
  char v18;
  __int128 v19;
  __int128 __p;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  std::string v31;
  std::string __dst;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _BYTE v40[8];
  char v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"while trying to convert from '";
  __dst.__r_.__value_.__l.__size_ = 30;
  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = a1;
  else
    v5 = *(_QWORD *)a1;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  __dst.__r_.__value_.__r.__words[2] = v5;
  v33 = v4;
  v34 = "' to '";
  v35 = 6;
  v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  if ((v6 & 0x80u) != 0)
    v6 = a2[1];
  v36 = v7;
  v37 = v6;
  v38 = "'";
  v39 = 1;
  sub_20AECFDF8((uint64_t)&__dst, (uint64_t)v40, 0, 0, &v31);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&__dst, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  else
    __dst = v31;
  LOBYTE(v33) = 1;
  LOBYTE(v34) = 0;
  v41 = 0;
  v42 = 1;
  sub_20AECCC3C(3u, (__int128 *)&__dst, (uint64_t)&v8);
  if (v42)
  {
    if (!v41)
      goto LABEL_18;
    if ((v40[7] & 0x80000000) != 0)
    {
      operator delete(v38);
      if ((SHIBYTE(v36) & 0x80000000) == 0)
      {
LABEL_18:
        if (!(_BYTE)v33)
          goto LABEL_21;
LABEL_19:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v36) & 0x80000000) == 0)
    {
      goto LABEL_18;
    }
    operator delete(v34);
    if (!(_BYTE)v33)
      goto LABEL_21;
    goto LABEL_19;
  }
LABEL_21:
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  v19 = v8;
  LOBYTE(__p) = 0;
  v29 = 0;
  if (v18)
  {
    v22 = 0;
    if (v11)
    {
      __p = v9;
      v21 = v10;
      v10 = 0;
      v9 = 0uLL;
      v22 = 1;
    }
    LOBYTE(v23) = 0;
    v28 = 0;
    if (v17)
    {
      v24 = v13;
      v23 = *(_OWORD *)v12;
      v12[0] = 0;
      v12[1] = 0;
      v26 = *(_OWORD *)v15;
      v25 = v14;
      v27 = v16;
      v13 = 0;
      v15[0] = 0;
      v15[1] = 0;
      v16 = 0;
      v28 = 1;
    }
    v29 = 1;
  }
  v30 = 0;
  sub_20AECB410(&v19, a3);
  if (!v30 && v29)
  {
    if (!v28)
      goto LABEL_34;
    if (SHIBYTE(v27) < 0)
    {
      operator delete((void *)v26);
      if ((SHIBYTE(v24) & 0x80000000) == 0)
      {
LABEL_34:
        if (!v22)
          goto LABEL_37;
LABEL_35:
        if (SHIBYTE(v21) < 0)
          operator delete((void *)__p);
        goto LABEL_37;
      }
    }
    else if ((SHIBYTE(v24) & 0x80000000) == 0)
    {
      goto LABEL_34;
    }
    operator delete((void *)v23);
    if (!v22)
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_37:
  if (!v18)
    return;
  if (v17)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v13) & 0x80000000) == 0)
        goto LABEL_41;
LABEL_49:
      operator delete(v12[0]);
      if (!v11)
        return;
      goto LABEL_42;
    }
    operator delete(v15[0]);
    if (SHIBYTE(v13) < 0)
      goto LABEL_49;
  }
LABEL_41:
  if (!v11)
    return;
LABEL_42:
  if (SHIBYTE(v10) < 0)
    operator delete((void *)v9);
}

void sub_20AECE284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  if (*(char *)(v25 - 145) < 0)
  {
    operator delete(*(void **)(v25 - 168));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AECE2D8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  std::mutex::~mutex((std::mutex *)(a1 + 176));
  v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (!v2)
    goto LABEL_20;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (*(_BYTE *)(a1 + 120))
      return a1;
  }
  else
  {
LABEL_20:
    if (*(_BYTE *)(a1 + 120))
      return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_12;
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_16:
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
    goto LABEL_13;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_16;
LABEL_12:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_13:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20AECE3B4(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  BOOL v7;
  void **v10;
  int v11;
  void *v12;
  int v13;
  uint64_t v14;
  void **v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  char v20;
  void *v21;
  __int128 v22;
  _BYTE v23[15];
  _BYTE v24[15];
  _BYTE v25[15];

  if (*(_BYTE *)(a1 + 120))
    v7 = *(_BYTE *)(a2 + 120) == 0;
  else
    v7 = 1;
  if (!v7)
    return;
  if (!*(_BYTE *)(a1 + 120))
  {
    if (*(_BYTE *)(a2 + 120))
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 112) = 0;
      if (*(_BYTE *)(a1 + 112))
      {
        v15 = (void **)(a1 + 16);
        *(_BYTE *)(a2 + 40) = 0;
        if (*(_BYTE *)(a1 + 40))
        {
          v16 = *(_OWORD *)v15;
          *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
          *(_OWORD *)(a2 + 16) = v16;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *v15 = 0;
          *(_BYTE *)(a2 + 40) = 1;
        }
        *(_BYTE *)(a2 + 48) = 0;
        *(_BYTE *)(a2 + 104) = 0;
        if (*(_BYTE *)(a1 + 104))
        {
          v17 = *(_OWORD *)(a1 + 48);
          *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
          *(_OWORD *)(a2 + 48) = v17;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
          v18 = *(_OWORD *)(a1 + 80);
          *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
          *(_OWORD *)(a2 + 80) = v18;
          *(_QWORD *)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 96) = 0;
          *(_QWORD *)(a1 + 80) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        *(_BYTE *)(a2 + 112) = 1;
        if (*(_BYTE *)(a1 + 112))
        {
          if (*(_BYTE *)(a1 + 104))
          {
            if (*(char *)(a1 + 103) < 0)
              operator delete(*(void **)(a1 + 80));
            if (*(char *)(a1 + 71) < 0)
              operator delete(*(void **)(a1 + 48));
          }
          if (*(_BYTE *)(a1 + 40) && *(char *)(a1 + 39) < 0)
            operator delete(*v15);
        }
      }
      v19 = *(_BYTE *)(a1 + 120);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      goto LABEL_31;
    }
LABEL_29:
    sub_20AECE70C((__int128 *)a1, (__int128 *)a2);
    return;
  }
  if (*(_BYTE *)(a2 + 120))
    goto LABEL_29;
  v22 = *(_OWORD *)a2;
  if (!*(_BYTE *)(a2 + 112))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    v19 = 1;
LABEL_31:
    *(_BYTE *)(a2 + 120) = v19;
    return;
  }
  v10 = (void **)(a2 + 16);
  v11 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a2 + 40))
  {
    v12 = *(void **)(a2 + 16);
    *(_QWORD *)v25 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)&v25[7] = *(_QWORD *)(a2 + 31);
    v2 = *(_BYTE *)(a2 + 39);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *v10 = 0;
    v13 = *(unsigned __int8 *)(a2 + 104);
    if (*(_BYTE *)(a2 + 104))
      goto LABEL_11;
  }
  else
  {
    v12 = 0;
    v13 = *(unsigned __int8 *)(a2 + 104);
    if (*(_BYTE *)(a2 + 104))
    {
LABEL_11:
      v14 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)v24 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)&v24[7] = *(_QWORD *)(a2 + 63);
      v5 = *(_BYTE *)(a2 + 71);
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      v6 = *(_QWORD *)(a2 + 72);
      v3 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)v23 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)&v23[7] = *(_QWORD *)(a2 + 95);
      v4 = *(_BYTE *)(a2 + 103);
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      if (!v11)
        goto LABEL_37;
      goto LABEL_35;
    }
  }
  v14 = 0;
  if (!v11)
    goto LABEL_37;
LABEL_35:
  if (*(char *)(a2 + 39) < 0)
  {
    v21 = v12;
    operator delete(*v10);
    v12 = v21;
    *(_OWORD *)a1 = v22;
    *(_BYTE *)(a1 + 112) = 0;
LABEL_38:
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)v25;
    *(_QWORD *)(a1 + 31) = *(_QWORD *)&v25[7];
    *(_BYTE *)(a1 + 39) = v2;
    *(_BYTE *)(a1 + 40) = 1;
    v12 = 0;
    v2 = 0;
    goto LABEL_39;
  }
LABEL_37:
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (v11)
    goto LABEL_38;
LABEL_39:
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (v13)
  {
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)v24;
    *(_QWORD *)(a1 + 63) = *(_QWORD *)&v24[7];
    *(_BYTE *)(a1 + 71) = v5;
    *(_QWORD *)(a1 + 72) = v6;
    *(_QWORD *)(a1 + 80) = v3;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)v23;
    *(_QWORD *)(a1 + 95) = *(_QWORD *)&v23[7];
    *(_BYTE *)(a1 + 103) = v4;
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 1;
  v20 = *(_BYTE *)(a1 + 120);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a2 + 120) = v20;
  if (v11)
  {
    if (v2 < 0)
      operator delete(v12);
  }
}

void sub_20AECE70C(__int128 *a1, __int128 *a2)
{
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 __p;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  char v14;
  char v15;

  v5 = *a1;
  v3 = a1 + 1;
  LOBYTE(__p) = 0;
  v15 = 0;
  if (*((_BYTE *)a1 + 112))
  {
    v8 = 0;
    if (*((_BYTE *)a1 + 40))
    {
      __p = *v3;
      v7 = *((_QWORD *)a1 + 4);
      *((_QWORD *)a1 + 3) = 0;
      *((_QWORD *)a1 + 4) = 0;
      *(_QWORD *)v3 = 0;
      v8 = 1;
    }
    LOBYTE(v9) = 0;
    v14 = 0;
    if (*((_BYTE *)a1 + 104))
    {
      v4 = *((_QWORD *)a1 + 9);
      v10 = *((_QWORD *)a1 + 8);
      v9 = a1[3];
      *((_QWORD *)a1 + 7) = 0;
      *((_QWORD *)a1 + 8) = 0;
      *((_QWORD *)a1 + 6) = 0;
      v11 = v4;
      *(_OWORD *)v12 = a1[5];
      v13 = *((_QWORD *)a1 + 12);
      *((_QWORD *)a1 + 10) = 0;
      *((_QWORD *)a1 + 11) = 0;
      *((_QWORD *)a1 + 12) = 0;
      v14 = 1;
    }
    v15 = 1;
  }
  *a1 = *a2;
  sub_20AECE874((uint64_t)(a1 + 1), a2 + 1);
  *a2 = v5;
  sub_20AECE874((uint64_t)(a2 + 1), &__p);
  if (v15)
  {
    if (!v14)
      goto LABEL_11;
    if (SHIBYTE(v13) < 0)
    {
      operator delete(v12[0]);
      if ((SHIBYTE(v10) & 0x80000000) == 0)
      {
LABEL_11:
        if (!v8)
          return;
        goto LABEL_12;
      }
    }
    else if ((SHIBYTE(v10) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete((void *)v9);
    if (!v8)
      return;
LABEL_12:
    if (SHIBYTE(v7) < 0)
      operator delete((void *)__p);
  }
}

void sub_20AECE874(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (*(unsigned __int8 *)(a1 + 96) != *((unsigned __int8 *)a2 + 96))
  {
    if (!*(_BYTE *)(a1 + 96))
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 0;
      if (*((_BYTE *)a2 + 24))
      {
        v6 = *a2;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = v6;
        *((_QWORD *)a2 + 1) = 0;
        *((_QWORD *)a2 + 2) = 0;
        *(_QWORD *)a2 = 0;
        *(_BYTE *)(a1 + 24) = 1;
      }
      *(_BYTE *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 88) = 0;
      v5 = 1;
      if (*((_BYTE *)a2 + 88))
      {
        v7 = a2[2];
        *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
        *(_OWORD *)(a1 + 32) = v7;
        *((_QWORD *)a2 + 5) = 0;
        *((_QWORD *)a2 + 6) = 0;
        *((_QWORD *)a2 + 4) = 0;
        *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
        v8 = a2[4];
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        *(_OWORD *)(a1 + 64) = v8;
        *((_QWORD *)a2 + 9) = 0;
        *((_QWORD *)a2 + 10) = 0;
        *((_QWORD *)a2 + 8) = 0;
        *(_BYTE *)(a1 + 88) = 1;
        *(_BYTE *)(a1 + 96) = 1;
        return;
      }
      goto LABEL_16;
    }
    if (!*(_BYTE *)(a1 + 88))
      goto LABEL_12;
    if (*(char *)(a1 + 87) < 0)
    {
      operator delete(*(void **)(a1 + 64));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_12:
        v5 = *(_BYTE *)(a1 + 24);
        if (v5)
        {
LABEL_13:
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v5 = 0;
        }
LABEL_16:
        *(_BYTE *)(a1 + 96) = v5;
        return;
      }
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(*(void **)(a1 + 32));
    v5 = *(_BYTE *)(a1 + 24);
    if (v5)
      goto LABEL_13;
    goto LABEL_16;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (*(unsigned __int8 *)(a1 + 24) == *((unsigned __int8 *)a2 + 24))
    {
      if (*(_BYTE *)(a1 + 24))
      {
        if (*(char *)(a1 + 23) < 0)
          operator delete(*(void **)a1);
        v4 = *a2;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = v4;
        *((_BYTE *)a2 + 23) = 0;
        *(_BYTE *)a2 = 0;
      }
    }
    else if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      *(_BYTE *)(a1 + 24) = 0;
    }
    else
    {
      v9 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v9;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a1 + 24) = 1;
    }
    sub_20AECEA34(a1 + 32, a2 + 2);
  }
}

void sub_20AECEA34(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*(unsigned __int8 *)(a1 + 56) != *((unsigned __int8 *)a2 + 56))
  {
    if (!*(_BYTE *)(a1 + 56))
    {
      v7 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v7;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      v8 = a2[2];
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = v8;
      *((_QWORD *)a2 + 5) = 0;
      *((_QWORD *)a2 + 6) = 0;
      *((_QWORD *)a2 + 4) = 0;
      *(_BYTE *)(a1 + 56) = 1;
      return;
    }
    if (*(char *)(a1 + 55) < 0)
    {
      operator delete(*(void **)(a1 + 32));
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        goto LABEL_12;
    }
    else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
LABEL_12:
      *(_BYTE *)(a1 + 56) = 0;
      return;
    }
    operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 56) = 0;
    return;
  }
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    v5 = (void **)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      operator delete(*v5);
    v6 = a2[2];
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)v5 = v6;
    *((_BYTE *)a2 + 55) = 0;
    *((_BYTE *)a2 + 32) = 0;
  }
}

uint64_t sub_20AECEB70(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 56))
    return a1;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

_BYTE *sub_20AECEBD0(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;

  *__dst = 0;
  __dst[96] = 0;
  if (*((_BYTE *)a2 + 96))
  {
    *__dst = 0;
    __dst[24] = 0;
    if (*((_BYTE *)a2 + 24))
    {
      if (*((char *)a2 + 23) < 0)
      {
        sub_20AEC60F4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v4 = *a2;
        *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
        *(_OWORD *)__dst = v4;
      }
      __dst[24] = 1;
    }
    sub_20AECEC88(__dst + 32, a2 + 2);
    __dst[96] = 1;
  }
  return __dst;
}

void sub_20AECEC58(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  sub_20AECCDB4(v1);
  _Unwind_Resume(a1);
}

char *sub_20AECEC88(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  *__dst = 0;
  __dst[56] = 0;
  if (*((_BYTE *)a2 + 56))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    *((_QWORD *)__dst + 3) = *((_QWORD *)a2 + 3);
    v5 = __dst + 32;
    if (*((char *)a2 + 55) < 0)
    {
      sub_20AEC60F4(v5, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
    }
    else
    {
      v6 = a2[2];
      *((_QWORD *)__dst + 6) = *((_QWORD *)a2 + 6);
      *(_OWORD *)v5 = v6;
    }
    __dst[56] = 1;
  }
  return __dst;
}

void sub_20AECED20(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    sub_20AECEB70(v1);
    _Unwind_Resume(a1);
  }
  sub_20AECEB70(v1);
  _Unwind_Resume(a1);
}

void sub_20AECED58(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  _QWORD *v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v1 = *(uint64_t **)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *(_QWORD *)(a1 + 56);
    if (v3)
    {
      v4 = (_QWORD *)(*v1 + 16);
      if (*(char *)(*v1 + 39) < 0)
        v4 = (_QWORD *)*v4;
      v5 = *(_OWORD *)(a1 + 8);
      v6 = *(_DWORD *)(a1 + 24);
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(_DWORD *)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(std::__shared_weak_count **)(a1 + 64);
      v22 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v23 = v4;
      v24 = v5;
      v25 = v6;
      v26 = v7;
      v27 = v8;
      v28 = v9;
      v29 = v3;
      v30 = v10;
      if (v10)
      {
        v13 = (unint64_t *)&v10->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      if (v6 >= **(_DWORD **)(*v1 + 56))
      {
        sub_20AEC4AB8(*v1, (uint64_t)&v23);
        v10 = v30;
      }
      if (v10)
      {
        v15 = (unint64_t *)&v10->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (v22)
      {
        v17 = (unint64_t *)&v22->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v19 = *(std::__shared_weak_count **)(a1 + 64);
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
}

void sub_20AECEEE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20AECF430((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20AECEEFC(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  BOOL v4;
  __int128 v6;
  void *__p[2];
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  char v16;
  char v17;

  v6 = *a2;
  LOBYTE(__p[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 112))
  {
    v9 = 0;
    if (*((_BYTE *)a2 + 40))
    {
      *(_OWORD *)__p = a2[1];
      v8 = *((_QWORD *)a2 + 4);
      *((_QWORD *)a2 + 3) = 0;
      *((_QWORD *)a2 + 4) = 0;
      *((_QWORD *)a2 + 2) = 0;
      v9 = 1;
    }
    LOBYTE(v10) = 0;
    v15 = 0;
    if (*((_BYTE *)a2 + 104))
    {
      v3 = *((_QWORD *)a2 + 9);
      v11 = *((_QWORD *)a2 + 8);
      v10 = a2[3];
      *((_QWORD *)a2 + 7) = 0;
      *((_QWORD *)a2 + 8) = 0;
      *((_QWORD *)a2 + 6) = 0;
      v12 = v3;
      *(_OWORD *)v13 = a2[5];
      v14 = *((_QWORD *)a2 + 12);
      *((_QWORD *)a2 + 10) = 0;
      *((_QWORD *)a2 + 11) = 0;
      *((_QWORD *)a2 + 12) = 0;
      v15 = 1;
    }
    v16 = 1;
  }
  v17 = 0;
  sub_20AECE3B4((uint64_t)&v6, a1);
  if (v17)
    v4 = 1;
  else
    v4 = v16 == 0;
  if (!v4)
  {
    if (!v15)
      goto LABEL_14;
    if (SHIBYTE(v14) < 0)
    {
      operator delete(v13[0]);
      if ((SHIBYTE(v11) & 0x80000000) == 0)
      {
LABEL_14:
        if (!v9)
          return a1;
        goto LABEL_15;
      }
    }
    else if ((SHIBYTE(v11) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete((void *)v10);
    if (!v9)
      return a1;
LABEL_15:
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20AECF044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_20AECF058@<X0>(char *__s@<X1>, unint64_t result@<X0>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = a3;
  if (*(_BYTE *)(result + 24))
  {
    *(_OWORD *)a3 = *(_OWORD *)result;
    a3[2] = *(_QWORD *)(result + 16);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = 0;
    return result;
  }
  result = strlen(__s);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v3[1] = v5;
    v3[2] = v7 | 0x8000000000000000;
    *v3 = v8;
    v3 = v8;
  }
  else
  {
    *((_BYTE *)v3 + 23) = result;
    if (!result)
    {
      *(_BYTE *)v3 = 0;
      return result;
    }
  }
  result = (unint64_t)memcpy(v3, __s, v5);
  *((_BYTE *)v3 + v5) = 0;
  return result;
}

uint64_t sub_20AECF138(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_20AECF1E4(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_20AECF228(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AECF24C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x20BD3583CLL);
  return result;
}

uint64_t sub_20AECF26C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIvE27__shared_ptr_default_deleteIv13os_log_pack_sEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIvE27__shared_ptr_default_deleteIv13os_log_pack_sEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIvE27__shared_ptr_default_deleteIv13os_log_pack_sEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIvE27__shared_ptr_default_deleteIv13os_log_pack_sEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20AECF2DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F2230;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20AECF2EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F2230;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AECF31C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_20AECF334(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x20BD3583CLL);
}

uint64_t *sub_20AECF374(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(std::__shared_weak_count **)(v2 + 16);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    MEMORY[0x20BD3583C](v2, 0x10F0C40B62ED6C6);
  }
  return a1;
}

uint64_t sub_20AECF430(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20AECF498(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_20AECEBD0(v4, v1 + 1);
    sub_20AECF558((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22C0, (void (*)(void *))sub_20AECF5A8);
  }
  return result;
}

void sub_20AECF514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCE40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AECF528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_20AECCE40((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_20AECF544(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20AECF558(uint64_t a1, _OWORD *a2)
{
  *(_QWORD *)a1 = off_24C3F22E8;
  *(_OWORD *)(a1 + 8) = *a2;
  sub_20AECEBD0((_BYTE *)(a1 + 24), a2 + 1);
  return a1;
}

void sub_20AECF594(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_20AECF5A8(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_24C3F22E8;
  if (!LOBYTE(this[15].__vftable))
    goto LABEL_7;
  if (!LOBYTE(this[14].__vftable))
    goto LABEL_5;
  if (SHIBYTE(this[13].__vftable) < 0)
  {
    operator delete(this[11].__vftable);
    if (SHIBYTE(this[9].__vftable) < 0)
      goto LABEL_10;
LABEL_5:
    if (!LOBYTE(this[6].__vftable))
      goto LABEL_7;
    goto LABEL_6;
  }
  if ((SHIBYTE(this[9].__vftable) & 0x80000000) == 0)
    goto LABEL_5;
LABEL_10:
  operator delete(this[7].__vftable);
  if (!LOBYTE(this[6].__vftable))
    goto LABEL_7;
LABEL_6:
  if (SHIBYTE(this[5].__vftable) < 0)
  {
    operator delete(this[3].__vftable);
    std::exception::~exception(this);
    return;
  }
LABEL_7:
  std::exception::~exception(this);
}

void sub_20AECF640(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_24C3F22E8;
  if (!LOBYTE(this[15].__vftable))
    goto LABEL_10;
  if (!LOBYTE(this[14].__vftable))
    goto LABEL_5;
  if (SHIBYTE(this[13].__vftable) < 0)
  {
    operator delete(this[11].__vftable);
    if ((SHIBYTE(this[9].__vftable) & 0x80000000) == 0)
    {
LABEL_5:
      if (!LOBYTE(this[6].__vftable))
        goto LABEL_10;
      goto LABEL_6;
    }
  }
  else if ((SHIBYTE(this[9].__vftable) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(this[7].__vftable);
  if (!LOBYTE(this[6].__vftable))
    goto LABEL_10;
LABEL_6:
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
LABEL_10:
  std::exception::~exception(this);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AECF6E0(uint64_t a1, unsigned int a2, __int128 *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  unsigned int v9;
  __int128 *v10;
  void *__dst[2];
  uint64_t v12;
  char v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  char v19;
  char v20;

  v4 = atomic_load((unsigned __int8 *)&qword_25463CD30);
  if ((v4 & 1) == 0)
  {
    v10 = a3;
    v9 = a2;
    v8 = __cxa_guard_acquire(&qword_25463CD30);
    a2 = v9;
    a3 = v10;
    if (v8)
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253EC3188, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CD30);
      a2 = v9;
      a3 = v10;
    }
  }
  v5 = a2;
  sub_20AECEBD0(__dst, a3);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = &off_253EC3188;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (!v20)
    return a1;
  *(_BYTE *)(a1 + 40) = 0;
  if (v13)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 32) = v12;
    __dst[1] = 0;
    v12 = 0;
    __dst[0] = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (!v19)
  {
    *(_BYTE *)(a1 + 112) = 1;
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  v6 = v16;
  *(_QWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v14;
  v14[0] = 0;
  v14[1] = 0;
  *(_QWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 96) = v18;
  __p[1] = 0;
  v18 = 0;
  v15 = 0;
  __p[0] = 0;
  *(_BYTE *)(a1 + 104) = 1;
  *(_BYTE *)(a1 + 112) = 1;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_13:
    operator delete(v14[0]);
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    goto LABEL_13;
LABEL_8:
  if (!v13)
    return a1;
LABEL_14:
  if ((SHIBYTE(v12) & 0x80000000) == 0)
    return a1;
  operator delete(__dst[0]);
  return a1;
}

void sub_20AECF88C(uint64_t a1, unint64_t a2)
{
  void **v2;
  void **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  void **v11;

  v2 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20AEC60B8();
    v4 = *(void ***)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * (((char *)v4 - (char *)v2) / 24)];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[24 * (((char *)v4 - (char *)v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 3);
        *((_QWORD *)v9 - 1) = *(v4 - 1);
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *(v4 - 2) = 0;
        *(v4 - 1) = 0;
        *(v4 - 3) = 0;
        v4 -= 3;
      }
      while (v4 != v2);
      v2 = *(void ***)a1;
      v11 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v11 != v2)
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

_BYTE *sub_20AECF9B0(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[120] = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    sub_20AECEBD0(a1 + 16, (__int128 *)(a2 + 16));
    a1[120] = 1;
  }
  return a1;
}

void sub_20AECFA04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 120) && *(_BYTE *)(v1 + 112))
  {
    if (*(_BYTE *)(v1 + 104))
    {
      if (*(char *)(v1 + 103) < 0)
        operator delete(*(void **)(v1 + 80));
      if (*(char *)(v1 + 71) < 0)
        operator delete(*(void **)(v1 + 48));
    }
    if (*(_BYTE *)(v1 + 40))
    {
      if (*(char *)(v1 + 39) < 0)
        operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AECFA60(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C3F2300[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_20AECFAB8()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8D8] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB738], (void (*)(void *))std::exception::~exception);
}

void sub_20AECFAF4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_20AECFB08(uint64_t a1, void **a2)
{
  void **v2;
  void **v4;
  void *v5;
  void *v6;

  v2 = (void **)*a2;
  if (*a2)
  {
    v4 = (void **)a2[1];
    v5 = *a2;
    if (v4 == v2)
    {
      a2[1] = v2;
      operator delete(v5);
    }
    else
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v6 = *a2;
      a2[1] = v2;
      operator delete(v6);
    }
  }
}

void sub_20AECFB90(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

__n128 sub_20AECFB9C@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

void sub_20AECFBB8(uint64_t *a1@<X1>, std::string *a2@<X8>, int64x2_t a3@<Q3>, int8x16_t a4@<Q5>)
{
  sub_20AECFBC8(*a1, a1[1], 0, 0, a2, a3, a4);
}

void sub_20AECFBC8(uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>, int64x2_t a6@<Q3>, int8x16_t a7@<Q5>)
{
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int64x2_t v22;
  int8x16_t v23;
  int64x2_t v24;
  const double *v25;
  const double *v26;
  unsigned __int128 v27;
  unsigned __int128 v28;
  int32x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int32x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  uint64_t i;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;

  v12 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  v14 = (v13 - 1) * a4;
  v15 = a2 - a1;
  if (a2 == a1)
  {
    v16 = 0;
  }
  else
  {
    if ((unint64_t)(v15 - 24) >= 0x60)
    {
      v18 = (v15 - 24) / 0x18uLL + 1;
      v19 = v18 & 3;
      if ((v18 & 3) == 0)
        v19 = 4;
      v20 = v18 - v19;
      v17 = a1 + 24 * v20;
      v21 = (unsigned __int8 *)(a1 + 47);
      v22 = 0uLL;
      v23.i64[0] = 255;
      v23.i64[1] = 255;
      v24 = 0uLL;
      do
      {
        a6.i8[0] = *(v21 - 24);
        a6.i8[4] = *v21;
        a7.i8[0] = v21[24];
        a7.i8[4] = v21[48];
        v25 = (const double *)(v21 - 39);
        v26 = (const double *)(v21 + 9);
        v27 = (unsigned __int128)vld3q_f64(v25);
        v28 = (unsigned __int128)vld3q_f64(v26);
        v29 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a6.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v29.i32[0];
        v30.i64[1] = v29.i32[1];
        v31 = v30;
        v32 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a7.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v32.i32[0];
        v30.i64[1] = v32.i32[1];
        v33 = v30;
        v30.i64[0] = a6.u32[0];
        v30.i64[1] = a6.u32[1];
        v34 = vbicq_s8(v30, v31);
        v30.i64[0] = a7.u32[0];
        v30.i64[1] = a7.u32[1];
        a6 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v27, v31), vandq_s8(v34, v23));
        a7 = vandq_s8((int8x16_t)v28, v33);
        v22 = vaddq_s64(a6, v22);
        v24 = vaddq_s64((int64x2_t)vorrq_s8(a7, vandq_s8(vbicq_s8(v30, v33), v23)), v24);
        v21 += 96;
        v20 -= 4;
      }
      while (v20);
      v16 = vaddvq_s64(vaddq_s64(v24, v22));
    }
    else
    {
      v16 = 0;
      v17 = a1;
    }
    do
    {
      v35 = *(unsigned __int8 *)(v17 + 23);
      if ((v35 & 0x80u) != 0)
        v35 = *(_QWORD *)(v17 + 8);
      v16 += v35;
      v17 += 24;
    }
    while (v17 != a2);
  }
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v16 + v14);
  if (v15 >= 1)
  {
    v36 = *(char *)(a1 + 23);
    v37 = v36 >= 0 ? (const std::string::value_type *)a1 : *(const std::string::value_type **)a1;
    v38 = v36 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(_QWORD *)(a1 + 8);
    std::string::append(a5, v37, v38);
    if ((unint64_t)v12 >= 2)
    {
      for (i = a1 + 24; i != a2; i += 24)
      {
        std::string::append(a5, a3, a4);
        v40 = *(char *)(i + 23);
        if (v40 >= 0)
          v41 = (const std::string::value_type *)i;
        else
          v41 = *(const std::string::value_type **)i;
        if (v40 >= 0)
          v42 = *(unsigned __int8 *)(i + 23);
        else
          v42 = *(_QWORD *)(i + 8);
        std::string::append(a5, v41, v42);
      }
    }
  }
}

void sub_20AECFDD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20AECFDF8(uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const double *v18;
  int64x2_t v19;
  int64x2_t v20;
  const double *v21;
  unsigned __int128 v22;
  unsigned __int128 v23;
  uint64_t i;
  const std::string::value_type *v25;
  std::string::size_type v26;

  v10 = (a2 - a1) >> 4;
  if (v10 <= 1)
    v10 = 1;
  v11 = (v10 - 1) * a4;
  v12 = a2 - a1;
  if (a2 == a1)
  {
    v13 = 0;
  }
  else
  {
    if ((unint64_t)(v12 - 16) >= 0x40)
    {
      v15 = ((unint64_t)(v12 - 16) >> 4) + 1;
      v16 = v15 & 3;
      if ((v15 & 3) == 0)
        v16 = 4;
      v17 = v15 - v16;
      v14 = a1 + 16 * v17;
      v18 = (const double *)(a1 + 40);
      v19 = 0uLL;
      v20 = 0uLL;
      do
      {
        v21 = v18 - 4;
        v22 = (unsigned __int128)vld2q_f64(v21);
        v23 = (unsigned __int128)vld2q_f64(v18);
        v19 = vaddq_s64((int64x2_t)v22, v19);
        v20 = vaddq_s64((int64x2_t)v23, v20);
        v18 += 8;
        v17 -= 4;
      }
      while (v17);
      v13 = vaddvq_s64(vaddq_s64(v20, v19));
    }
    else
    {
      v13 = 0;
      v14 = a1;
    }
    do
    {
      v13 += *(_QWORD *)(v14 + 8);
      v14 += 16;
    }
    while (v14 != a2);
  }
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v13 + v11);
  if (v12 >= 1)
  {
    std::string::append(a5, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    if ((unint64_t)v12 >= 0x20)
    {
      for (i = a1 + 16; i != a2; i += 16)
      {
        std::string::append(a5, a3, a4);
        v25 = *(const std::string::value_type **)i;
        v26 = *(_QWORD *)(i + 8);
        std::string::append(a5, v25, v26);
      }
    }
  }
}

void sub_20AECFF38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20AECFF5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C3F2300[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20AED0110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20AED0154(_DWORD ***a1)
{
  return sub_20AED0170(**a1, (char *)(*a1)[1]);
}

void sub_20AED0160(uint64_t a1, uint64_t a2)
{
  sub_20AED0260((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20AED0170(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C3F2300[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20AED0260(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C3F2300[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20AED0414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20AED0458(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20AED0550((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20AED0548(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20AED0550(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20AED074C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20AED0760(_DWORD ***a1)
{
  return sub_20AED077C(**a1, (const char **)(*a1)[1]);
}

void sub_20AED076C(uint64_t a1, uint64_t a2)
{
  sub_20AED0870((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20AED077C(_DWORD *a1, const char **a2)
{
  uint64_t v4;
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C3F2300[v4])(&v12, a1);
  a1[6] = -1;
  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *((_QWORD *)a1 + 1) = v7;
    *((_QWORD *)a1 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v6;
    v8 = a1;
    if (!v6)
      goto LABEL_11;
  }
  memmove(v8, v5, v7);
LABEL_11:
  *((_BYTE *)v8 + v7) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20AED0870(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = *(const char **)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C3F2300[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20AED0A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20AED0A6C(uint64_t a1, uint64_t a2)
{
  const char **v3;
  char *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  char *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(const char ***)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20AED0B64((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = *v3;
  v6 = strlen(*v3);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v10 = v6 | 7;
    v11 = v10 + 1;
    v8 = operator new(v10 + 1);
    *((_QWORD *)v4 + 1) = v7;
    *((_QWORD *)v4 + 2) = v11 | 0x8000000000000000;
    *(_QWORD *)v4 = v8;
  }
  else
  {
    v4[23] = v6;
    v8 = v4;
    if (!v6)
      goto LABEL_11;
  }
  memmove(v8, v5, v7);
LABEL_11:
  *((_BYTE *)v8 + v7) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20AED0B5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20AED0B64(void **a1, const char **a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  const char *v9;
  size_t v10;
  size_t v11;
  char *v12;
  char *v13;
  void **v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  void **v20;
  char *v22;
  char *v23;
  char *v24;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v22 = v8;
  v23 = v8;
  v24 = &v7[24 * v6];
  v9 = *a2;
  v10 = strlen(*a2);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v16 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v16 = v10 | 7;
    v17 = v16 + 1;
    v18 = (char *)operator new(v16 + 1);
    *((_QWORD *)v8 + 1) = v11;
    *((_QWORD *)v8 + 2) = v17 | 0x8000000000000000;
    *(_QWORD *)v8 = v18;
    v8 = v18;
  }
  else
  {
    v8[23] = v10;
    if (!v10)
    {
      *v8 = 0;
      v12 = v8;
      v13 = v8 + 24;
      v14 = (void **)*a1;
      v15 = (void **)a1[1];
      if (v15 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, v9, v11);
  v8[v11] = 0;
  v12 = v22;
  v13 = v23 + 24;
  v14 = (void **)*a1;
  v15 = (void **)a1[1];
  if (v15 == *a1)
  {
LABEL_26:
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v24;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v19 = *(_OWORD *)(v15 - 3);
    *((_QWORD *)v12 - 1) = *(v15 - 1);
    *(_OWORD *)(v12 - 24) = v19;
    v12 -= 24;
    *(v15 - 2) = 0;
    *(v15 - 1) = 0;
    *(v15 - 3) = 0;
    v15 -= 3;
  }
  while (v15 != v14);
  v15 = (void **)*a1;
  v20 = (void **)a1[1];
  *a1 = v12;
  a1[1] = v13;
  a1[2] = v24;
  while (v20 != v15)
  {
    if (*((char *)v20 - 1) < 0)
      operator delete(*(v20 - 3));
    v20 -= 3;
  }
LABEL_27:
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_20AED0D64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t VZRetain(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t VZRelease(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t VZGetTypeID(uint64_t a1)
{
  if (!a1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/VisualLogger/src/VZBase.cpp", 43, (uint64_t)"vz", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t VZEqual(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  else
    return (a1 | a2) == 0;
}

uint64_t VZCopyDescription(uint64_t a1)
{
  CFTypeRef v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *__p[2];
  char v7;
  CFTypeRef cf;
  std::__shared_weak_count *v9;

  if (a1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v7 = 4;
  strcpy((char *)__p, "null");
  sub_20B4EE2F0((uint64_t)__p, (CFStringRef *)&cf);
  v2 = cf;
  if (cf)
    CFRetain(cf);
  v3 = v9;
  if (!v9)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((v7 & 0x80000000) == 0)
      return (uint64_t)v2;
  }
  else
  {
LABEL_9:
    if ((v7 & 0x80000000) == 0)
      return (uint64_t)v2;
  }
  operator delete(__p[0]);
  return (uint64_t)v2;
}

void sub_20AED0F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_20AEC147C((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t VZGetRetainCount(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

uint64_t sub_20AED0F40(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AED0FA8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AED1004(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AED106C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t VZBlobGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637468);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254637468))
    return qword_254637460;
  qword_254637460 = sub_20AECB130();
  __cxa_guard_release(&qword_254637468);
  return qword_254637460;
}

void (**VZDataCreateWithBlob(uint64_t a1, __int128 *a2, CFErrorRef *a3))(uint64_t)
{
  void (**v5)(uint64_t);
  int v6;
  __int128 *v7;
  void (**v8)(uint64_t);
  __int128 v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  CFErrorRef **v21;
  CFErrorRef *v22;
  char v23[208];
  void *v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  char v29;
  void *v30;
  char v31;
  char v32;
  char v33;
  char v34;
  __int128 v35[13];
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  void *__p;
  char v43;
  char v44;
  char v45;
  char v46;
  __int128 v47;
  __int128 v48;
  char v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  char v55;
  char v56;
  unsigned __int8 v57;
  uint64_t v58;

  v5 = (void (**)(uint64_t))a1;
  v58 = *MEMORY[0x24BDAC8D0];
  if (sub_20AED16A8((uint64_t)"VZDataCreateWithBlob", a1, a3))
    return 0;
  sub_20AED18DC(a2, v23);
  v21 = &v22;
  v22 = a3;
  sub_20AED4D3C(v35, (uint64_t)v23);
  sub_20AF4AE94(v5 + 2, v35, (uint64_t)&v47);
  if (v46)
  {
    if (v45)
    {
      if (v44 && v43 < 0)
        operator delete(__p);
      if (v41 && v40 < 0)
        operator delete(v39);
      if (v38 && v37 < 0)
        operator delete(v36);
    }
    sub_20AED30E0((uint64_t)v35);
  }
  v6 = v57;
  if (!v57)
  {
    v10 = v47;
    sub_20AECEBD0(&v11, &v48);
    v20 = 1;
    sub_20AED4874(&v21, (uint64_t)&v10);
    if (!v20 || !v19)
      goto LABEL_39;
    if (v18)
    {
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
    }
    if (!v13 || (v12 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_37;
  }
  v7 = (__int128 *)sub_20AED4AC0((uint64_t)&v47);
  v8 = (void (**)(uint64_t))operator new(0x240uLL, MEMORY[0x24BEDB6B8]);
  if (!v8)
  {
    LOBYTE(v10) = 0;
    v20 = 0;
    sub_20AED4874(&v21, (uint64_t)&v10);
    if (!v20 || !v19)
      goto LABEL_38;
    if (v18)
    {
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
    }
    v5 = 0;
    if (!v13 || (v12 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_37:
    operator delete(v11);
LABEL_38:
    v5 = 0;
    goto LABEL_39;
  }
  v5 = v8;
  *v8 = (void (*)(uint64_t))off_24C3F2180;
  sub_20AED5300((uint64_t)(v8 + 2), v7);
  *v5 = (void (*)(uint64_t))&off_24C3F2BA0;
  v5[2] = (void (*)(uint64_t))&unk_24C3F2BF0;
  *((_OWORD *)v5 + 35) = 0u;
LABEL_39:
  if (v57)
  {
    sub_20AED5474((uint64_t)&v47);
  }
  else if (v56)
  {
    if (v55)
    {
      if (v54 < 0)
        operator delete(v53);
      if (v52 < 0)
        operator delete(v51);
    }
    if (v50 && v49 < 0)
      operator delete((void *)v48);
  }
  if (!v6)
    v5 = 0;
  if (v34)
  {
    if (v33)
    {
      if (v32 && v31 < 0)
        operator delete(v30);
      if (v29 && v28 < 0)
        operator delete(v27);
      if (v26 && v25 < 0)
        operator delete(v24);
    }
    sub_20AED30E0((uint64_t)v23);
  }
  return v5;
}

void sub_20AED14AC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AED14B4);
  _Unwind_Resume(a1);
}

void sub_20AED14C4(_Unwind_Exception *a1, int a2)
{
  const std::logic_error *exception_ptr;
  void *v5;
  std::string *p_what;
  std::string *v7;
  std::logic_error v8;
  char v9;
  char v10;
  __int128 v11;
  __int128 v12[6];
  std::__fs::filesystem::filesystem_error v13[3];
  CFErrorRef **v14[102];
  __int128 v15;
  _BYTE v16[104];
  char v17;

  if (a2)
  {
    sub_20AED1998((uint64_t)&STACK[0x2F0]);
    if (a2 == 3)
    {
      exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
      std::logic_error::logic_error(&v8, exception_ptr);
      v8.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_begin_catch(a1);
      v7 = (std::string *)std::logic_error::what(&v8);
      sub_20AED4C84(v13, (const char **)&v7);
      sub_20B099E24((__int128 *)v13, (uint64_t)&v11);
      v15 = v11;
      sub_20AECEBD0(v16, v12);
      v17 = 1;
      sub_20AED4874(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      sub_20AECCE40((uint64_t)&v11);
      if (LOBYTE(v13[0].__ec_.__cat_))
      {
        if (*((char *)&v13[0].__ec_.__val_ + 7) < 0)
          operator delete(v13[0].__vftable);
      }
      MEMORY[0x20BD35020](&v8);
      __cxa_end_catch();
    }
    else if (a2 == 2)
    {
      v5 = __cxa_get_exception_ptr(a1);
      sub_20AED4C1C(&v13[0], (uint64_t)v5);
      __cxa_begin_catch(a1);
      p_what = &v13[0].__storage_.__ptr_->__what_;
      if (SHIBYTE(v13[0].__storage_.__ptr_->__what_.__r_.__value_.__r.__words[2]) < 0)
        p_what = (std::string *)p_what->__r_.__value_.__r.__words[0];
      v7 = p_what;
      sub_20AED4C84(&v8, (const char **)&v7);
      sub_20B09A738((__int128 *)&v8, (uint64_t)&v11);
      v15 = v11;
      sub_20AECEBD0(v16, v12);
      v17 = 1;
      sub_20AED4874(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      sub_20AECCE40((uint64_t)&v11);
      if (v10 && v9 < 0)
        operator delete(v8.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error(v13);
      __cxa_end_catch();
    }
    else
    {
      __cxa_begin_catch(a1);
      LOBYTE(v15) = 0;
      v17 = 0;
      sub_20AED4874(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      __cxa_end_catch();
    }
    JUMPOUT(0x20AED13ACLL);
  }
  _Unwind_Resume(a1);
}

void sub_20AED14DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AED14E8);
  _Unwind_Resume(a1);
}

void sub_20AED1690(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20AED1698);
  sub_20AEC01C0(a1);
}

BOOL sub_20AED16A8(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t *v6;
  __int128 v7;
  void *v9[2];
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  void *v16[2];
  uint64_t v17;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  char v32;
  char v33;
  char v34;

  if (!a2)
  {
    v6 = sub_20AED31EC();
    if (*((char *)v6 + 23) < 0)
    {
      sub_20AEC60F4(v9, (void *)*v6, v6[1]);
    }
    else
    {
      v7 = *(_OWORD *)v6;
      v10 = v6[2];
      *(_OWORD *)v9 = v7;
    }
    v11 = 1;
    sub_20AECCECC(a1, (uint64_t)v9, (uint64_t)&v12);
    v23 = v12;
    LOBYTE(v24) = 0;
    v33 = 0;
    if (v22)
    {
      v26 = 0;
      if (v15)
      {
        v24 = v13;
        v25 = v14;
        v14 = 0;
        v13 = 0uLL;
        v26 = 1;
      }
      LOBYTE(v27) = 0;
      v32 = 0;
      if (v21)
      {
        v28 = v17;
        v27 = *(_OWORD *)v16;
        v16[0] = 0;
        v16[1] = 0;
        v29 = v18;
        *(_OWORD *)__p = *(_OWORD *)v19;
        v31 = v20;
        v17 = 0;
        v19[0] = 0;
        v19[1] = 0;
        v20 = 0;
        v32 = 1;
      }
      v33 = 1;
    }
    v34 = 0;
    sub_20AECB410(&v23, a3);
    if (!v34 && v33)
    {
      if (v32)
      {
        if (SHIBYTE(v31) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v28) < 0)
          operator delete((void *)v27);
      }
      if (v26 && SHIBYTE(v25) < 0)
        operator delete((void *)v24);
    }
    if (v22)
    {
      if (v21)
      {
        if (SHIBYTE(v20) < 0)
          operator delete(v19[0]);
        if (SHIBYTE(v17) < 0)
          operator delete(v16[0]);
      }
      if (v15 && SHIBYTE(v14) < 0)
        operator delete((void *)v13);
    }
    if (v11 && SHIBYTE(v10) < 0)
      operator delete(v9[0]);
  }
  return a2 == 0;
}

void sub_20AED18A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECD704((uint64_t)&a32);
  sub_20AECCE40((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__int128 *sub_20AED18DC@<X0>(__int128 *result@<X0>, char *a2@<X8>)
{
  __int128 *v3;

  if (result)
  {
    v3 = result;
    sub_20AED36A4(a2, result + 2);
    result = (__int128 *)sub_20AED3C28(a2 + 208, (uint64_t)(v3 + 15));
    a2[384] = 1;
  }
  else
  {
    *a2 = 0;
    a2[384] = 0;
  }
  return result;
}

void sub_20AED1944(void *a1)
{
  _BYTE *v1;
  __int128 *v3;
  uint64_t *v4;

  sub_20AED30E0((uint64_t)v1);
  __cxa_begin_catch(a1);
  v3 = sub_20AED3DA0();
  v4 = (uint64_t *)sub_20AED3F9C();
  sub_20AECDF74((std::string::size_type)v3, v4, 0);
  *v1 = 0;
  v1[384] = 0;
  __cxa_end_catch();
  JUMPOUT(0x20AED1918);
}

uint64_t sub_20AED1998(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 384))
  {
    if (*(_BYTE *)(a1 + 368))
    {
      if (*(_BYTE *)(a1 + 328) && *(char *)(a1 + 327) < 0)
        operator delete(*(void **)(a1 + 304));
      if (*(_BYTE *)(a1 + 288) && *(char *)(a1 + 263) < 0)
        operator delete(*(void **)(a1 + 240));
      if (*(_BYTE *)(a1 + 232) && *(char *)(a1 + 231) < 0)
        operator delete(*(void **)(a1 + 208));
    }
    sub_20AED30E0(a1);
  }
  return a1;
}

char *VZDataGetBlob(uint64_t a1, CFErrorRef *a2)
{
  char *v4;
  int v5;
  uint64_t v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char v12;
  __int128 v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  char v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 v25;
  char v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  char v32;
  char v33;
  unsigned __int8 v34;
  CFErrorRef **v35;
  CFErrorRef *v36;

  if (sub_20AED21B4((uint64_t)"VZDataGetBlob", a1, a2))
    return 0;
  v4 = *(char **)(a1 + 568);
  if (v4)
    return v4;
  v4 = &v12;
  v35 = &v36;
  v36 = a2;
  sub_20AF4B45C(a1 + 32, (uint64_t)&v24);
  v5 = v34;
  if (!v34)
  {
    v13 = v24;
    sub_20AECEBD0(&v14, &v25);
    v23 = 1;
    sub_20AED6C48(&v35, (uint64_t)&v13);
    if (v23 && v22)
    {
      if (v21)
      {
        if (v20 < 0)
          operator delete(__p);
        if (v18 < 0)
          operator delete(v17);
      }
      if (v16 && v15 < 0)
        operator delete(v14);
    }
    goto LABEL_28;
  }
  v6 = sub_20AED6E14((uint64_t)&v24);
  v7 = (char *)operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  if (v7)
  {
    v4 = v7;
    *((_OWORD *)v7 + 1) = *(_OWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *((_DWORD *)v7 + 8) = 1;
    *(_QWORD *)v7 = &off_24C3F2370;
    *((_QWORD *)v7 + 1) = &unk_24C3F23C0;
  }
  else
  {
    LOBYTE(v13) = 0;
    v23 = 0;
    sub_20AED6C48(&v35, (uint64_t)&v13);
    if (v23 && v22)
    {
      if (v21)
      {
        if (v20 < 0)
          operator delete(__p);
        if (v18 < 0)
          operator delete(v17);
      }
      v4 = 0;
      if (!v16 || (v15 & 0x80000000) == 0)
        goto LABEL_28;
      operator delete(v14);
    }
    v4 = 0;
  }
LABEL_28:
  if (v34)
  {
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else if (v33)
  {
    if (v32)
    {
      if (v31 < 0)
        operator delete(v30);
      if (v29 < 0)
        operator delete(v28);
    }
    if (v27 && v26 < 0)
      operator delete((void *)v25);
  }
  if (!v5)
    v4 = 0;
  *(_QWORD *)(a1 + 568) = v4;
  return v4;
}

void sub_20AED1C70(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a68;
  uint64_t v68;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  const std::logic_error *exception_ptr;
  const char *v75;
  size_t v76;
  size_t v77;
  void **p_dst;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  const char *v84;
  size_t v85;
  const char *v86;
  std::logic_error_vtbl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (*(_BYTE *)(v68 - 72))
  {
    v71 = *(std::__shared_weak_count **)(v68 - 184);
    if (v71)
    {
      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(p_shared_owners);
      while (__stlxr(v73 - 1, p_shared_owners));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  else if (*(_BYTE *)(v68 - 80))
  {
    if (*(_BYTE *)(v68 - 88))
    {
      if (*(char *)(v68 - 89) < 0)
        operator delete(*(void **)(v68 - 112));
      if (*(char *)(v68 - 121) < 0)
        operator delete(*(void **)(v68 - 144));
    }
    if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
      operator delete(*(void **)(v68 - 176));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v75 = std::logic_error::what(&a10);
    v76 = strlen(v75);
    if (v76 <= 0x7FFFFFFFFFFFFFF7)
    {
      v77 = v76;
      if (v76 >= 0x17)
      {
        v88 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v88 = v76 | 7;
        v89 = v88 + 1;
        p_dst = (void **)operator new(v88 + 1);
        __dst_8 = v77;
        *(_QWORD *)&a38 = v89 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v76;
        p_dst = (void **)&__dst;
        if (!v76)
        {
LABEL_56:
          *((_BYTE *)p_dst + v77) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a68 = a13;
          sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
          *(_BYTE *)(v68 - 72) = 1;
          sub_20AED6C48((CFErrorRef ***)(v68 - 64), v68 - 192);
          if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
          {
            if (*(_BYTE *)(v68 - 88))
            {
              if (*(char *)(v68 - 89) < 0)
                operator delete(*(void **)(v68 - 112));
              if (*(char *)(v68 - 121) < 0)
                operator delete(*(void **)(v68 - 144));
            }
            if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
              operator delete(*(void **)(v68 - 176));
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_107;
        }
      }
      memmove(p_dst, v75, v77);
      goto LABEL_56;
    }
LABEL_106:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v68 - 192) = 0;
    *(_BYTE *)(v68 - 72) = 0;
    sub_20AED6C48((CFErrorRef ***)(v68 - 64), v68 - 192);
    if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
    {
      if (*(_BYTE *)(v68 - 88))
      {
        if (*(char *)(v68 - 89) < 0)
          operator delete(*(void **)(v68 - 112));
        if (*(char *)(v68 - 121) < 0)
          operator delete(*(void **)(v68 - 144));
      }
      if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
        operator delete(*(void **)(v68 - 176));
    }
    __cxa_end_catch();
LABEL_107:
    JUMPOUT(0x20AED1C4CLL);
  }
  v79 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v79);
  a38 = *((_OWORD *)v79 + 1);
  v81 = *((_QWORD *)v79 + 4);
  v80 = *((_QWORD *)v79 + 5);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  a39 = v81;
  a40 = v80;
  if (v80)
  {
    v82 = (unint64_t *)(v80 + 8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  __cxa_begin_catch(a1);
  v84 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v84 = *(const char **)v84;
  v85 = strlen(v84);
  if (v85 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_106;
  v86 = (const char *)v85;
  if (v85 >= 0x17)
  {
    v90 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v90 = v85 | 7;
    v91 = v90 + 1;
    v87 = (std::logic_error_vtbl *)operator new(v90 + 1);
    a10.__imp_.__imp_ = v86;
    a11 = v91 | 0x8000000000000000;
    a10.__vftable = v87;
  }
  else
  {
    HIBYTE(a11) = v85;
    v87 = (std::logic_error_vtbl *)&a10;
    if (!v85)
    {
LABEL_83:
      v86[(_QWORD)v87] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a68 = a13;
      sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
      *(_BYTE *)(v68 - 72) = 1;
      sub_20AED6C48((CFErrorRef ***)(v68 - 64), v68 - 192);
      if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
      {
        if (*(_BYTE *)(v68 - 88))
        {
          if (*(char *)(v68 - 89) < 0)
            operator delete(*(void **)(v68 - 112));
          if (*(char *)(v68 - 121) < 0)
            operator delete(*(void **)(v68 - 144));
        }
        if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
          operator delete(*(void **)(v68 - 176));
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_107;
    }
  }
  memmove(v87, v84, (size_t)v86);
  goto LABEL_83;
}

BOOL sub_20AED21B4(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t *v6;
  __int128 v7;
  void *v9[2];
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  void *v16[2];
  uint64_t v17;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  char v32;
  char v33;
  char v34;

  if (!a2)
  {
    v6 = sub_20AED698C();
    if (*((char *)v6 + 23) < 0)
    {
      sub_20AEC60F4(v9, (void *)*v6, v6[1]);
    }
    else
    {
      v7 = *(_OWORD *)v6;
      v10 = v6[2];
      *(_OWORD *)v9 = v7;
    }
    v11 = 1;
    sub_20AECCECC(a1, (uint64_t)v9, (uint64_t)&v12);
    v23 = v12;
    LOBYTE(v24) = 0;
    v33 = 0;
    if (v22)
    {
      v26 = 0;
      if (v15)
      {
        v24 = v13;
        v25 = v14;
        v14 = 0;
        v13 = 0uLL;
        v26 = 1;
      }
      LOBYTE(v27) = 0;
      v32 = 0;
      if (v21)
      {
        v28 = v17;
        v27 = *(_OWORD *)v16;
        v16[0] = 0;
        v16[1] = 0;
        v29 = v18;
        *(_OWORD *)__p = *(_OWORD *)v19;
        v31 = v20;
        v17 = 0;
        v19[0] = 0;
        v19[1] = 0;
        v20 = 0;
        v32 = 1;
      }
      v33 = 1;
    }
    v34 = 0;
    sub_20AECB410(&v23, a3);
    if (!v34 && v33)
    {
      if (v32)
      {
        if (SHIBYTE(v31) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v28) < 0)
          operator delete((void *)v27);
      }
      if (v26 && SHIBYTE(v25) < 0)
        operator delete((void *)v24);
    }
    if (v22)
    {
      if (v21)
      {
        if (SHIBYTE(v20) < 0)
          operator delete(v19[0]);
        if (SHIBYTE(v17) < 0)
          operator delete(v16[0]);
      }
      if (v15 && SHIBYTE(v14) < 0)
        operator delete((void *)v13);
    }
    if (v11 && SHIBYTE(v10) < 0)
      operator delete(v9[0]);
  }
  return a2 == 0;
}

void sub_20AED23AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECD704((uint64_t)&a32);
  sub_20AECCE40((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *VZBlobCreateWithBytes(const void *a1, size_t a2, uint64_t a3)
{
  char *v3;
  int v4;
  uint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char v11;
  __int128 v12;
  void *v13;
  char v14;
  char v15;
  void *v16;
  char v17;
  void *__p;
  char v19;
  char v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  char v31;
  char v32;
  unsigned __int8 v33;
  CFErrorRef **v34;
  uint64_t v35;

  v3 = &v11;
  v34 = (CFErrorRef **)&v35;
  v35 = a3;
  sub_20AF4A988(a1, a2, (uint64_t)&v23);
  v4 = v33;
  if (v33)
  {
    v5 = sub_20AED6E14((uint64_t)&v23);
    v6 = (char *)operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
    if (v6)
    {
      v3 = v6;
      *((_OWORD *)v6 + 1) = *(_OWORD *)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *((_DWORD *)v6 + 8) = 1;
      *(_QWORD *)v6 = &off_24C3F2370;
      *((_QWORD *)v6 + 1) = &unk_24C3F23C0;
      goto LABEL_25;
    }
    LOBYTE(v12) = 0;
    v22 = 0;
    sub_20AED70F4(&v34, (uint64_t)&v12);
    if (!v22 || !v21)
      goto LABEL_24;
    if (v20)
    {
      if (v19 < 0)
        operator delete(__p);
      if (v17 < 0)
        operator delete(v16);
    }
    v3 = 0;
    if (v15 && v14 < 0)
    {
      operator delete(v13);
LABEL_24:
      v3 = 0;
    }
  }
  else
  {
    v12 = v23;
    sub_20AECEBD0(&v13, &v24);
    v22 = 1;
    sub_20AED70F4(&v34, (uint64_t)&v12);
    if (v22 && v21)
    {
      if (v20)
      {
        if (v19 < 0)
          operator delete(__p);
        if (v17 < 0)
          operator delete(v16);
      }
      if (v15 && v14 < 0)
        operator delete(v13);
    }
  }
LABEL_25:
  if (v33)
  {
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else if (v32)
  {
    if (v31)
    {
      if (v30 < 0)
        operator delete(v29);
      if (v28 < 0)
        operator delete(v27);
    }
    if (v26 && v25 < 0)
      operator delete((void *)v24);
  }
  if (!v4)
    return 0;
  return v3;
}

void sub_20AED2608(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a68;
  uint64_t v68;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  const std::logic_error *exception_ptr;
  const char *v75;
  size_t v76;
  size_t v77;
  void **p_dst;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  const char *v84;
  size_t v85;
  const char *v86;
  std::logic_error_vtbl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (*(_BYTE *)(v68 - 72))
  {
    v71 = *(std::__shared_weak_count **)(v68 - 184);
    if (v71)
    {
      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(p_shared_owners);
      while (__stlxr(v73 - 1, p_shared_owners));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  else if (*(_BYTE *)(v68 - 80))
  {
    if (*(_BYTE *)(v68 - 88))
    {
      if (*(char *)(v68 - 89) < 0)
        operator delete(*(void **)(v68 - 112));
      if (*(char *)(v68 - 121) < 0)
        operator delete(*(void **)(v68 - 144));
    }
    if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
      operator delete(*(void **)(v68 - 176));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v75 = std::logic_error::what(&a10);
    v76 = strlen(v75);
    if (v76 <= 0x7FFFFFFFFFFFFFF7)
    {
      v77 = v76;
      if (v76 >= 0x17)
      {
        v88 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v88 = v76 | 7;
        v89 = v88 + 1;
        p_dst = (void **)operator new(v88 + 1);
        __dst_8 = v77;
        *(_QWORD *)&a38 = v89 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v76;
        p_dst = (void **)&__dst;
        if (!v76)
        {
LABEL_56:
          *((_BYTE *)p_dst + v77) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a68 = a13;
          sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
          *(_BYTE *)(v68 - 72) = 1;
          sub_20AED70F4((CFErrorRef ***)(v68 - 64), v68 - 192);
          if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
          {
            if (*(_BYTE *)(v68 - 88))
            {
              if (*(char *)(v68 - 89) < 0)
                operator delete(*(void **)(v68 - 112));
              if (*(char *)(v68 - 121) < 0)
                operator delete(*(void **)(v68 - 144));
            }
            if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
              operator delete(*(void **)(v68 - 176));
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_107;
        }
      }
      memmove(p_dst, v75, v77);
      goto LABEL_56;
    }
LABEL_106:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v68 - 192) = 0;
    *(_BYTE *)(v68 - 72) = 0;
    sub_20AED70F4((CFErrorRef ***)(v68 - 64), v68 - 192);
    if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
    {
      if (*(_BYTE *)(v68 - 88))
      {
        if (*(char *)(v68 - 89) < 0)
          operator delete(*(void **)(v68 - 112));
        if (*(char *)(v68 - 121) < 0)
          operator delete(*(void **)(v68 - 144));
      }
      if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
        operator delete(*(void **)(v68 - 176));
    }
    __cxa_end_catch();
LABEL_107:
    JUMPOUT(0x20AED25E8);
  }
  v79 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v79);
  a38 = *((_OWORD *)v79 + 1);
  v81 = *((_QWORD *)v79 + 4);
  v80 = *((_QWORD *)v79 + 5);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  a39 = v81;
  a40 = v80;
  if (v80)
  {
    v82 = (unint64_t *)(v80 + 8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  __cxa_begin_catch(a1);
  v84 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v84 = *(const char **)v84;
  v85 = strlen(v84);
  if (v85 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_106;
  v86 = (const char *)v85;
  if (v85 >= 0x17)
  {
    v90 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v90 = v85 | 7;
    v91 = v90 + 1;
    v87 = (std::logic_error_vtbl *)operator new(v90 + 1);
    a10.__imp_.__imp_ = v86;
    a11 = v91 | 0x8000000000000000;
    a10.__vftable = v87;
  }
  else
  {
    HIBYTE(a11) = v85;
    v87 = (std::logic_error_vtbl *)&a10;
    if (!v85)
    {
LABEL_83:
      v86[(_QWORD)v87] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a68 = a13;
      sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
      *(_BYTE *)(v68 - 72) = 1;
      sub_20AED70F4((CFErrorRef ***)(v68 - 64), v68 - 192);
      if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
      {
        if (*(_BYTE *)(v68 - 88))
        {
          if (*(char *)(v68 - 89) < 0)
            operator delete(*(void **)(v68 - 112));
          if (*(char *)(v68 - 121) < 0)
            operator delete(*(void **)(v68 - 144));
        }
        if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
          operator delete(*(void **)(v68 - 176));
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_107;
    }
  }
  memmove(v87, v84, (size_t)v86);
  goto LABEL_83;
}

uint64_t VZBlobGetBytePtr(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = 0;
  if (!sub_20AED16A8((uint64_t)"VZBlobGetBytePtr", a1, 0))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v2 = *(_QWORD *)(v3 + 24);
    if (*(_QWORD *)(v3 + 16))
      v4 = v2 == 0;
    else
      v4 = 0;
    if (v4
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
  }
  return v2;
}

uint64_t VZBlobGetByteCount(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AED16A8((uint64_t)"VZBlobGetByteCount", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
  return result;
}

uint64_t sub_20AED2C18(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 32);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AED2C30(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 32);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AED2C58()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637468);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254637468))
    return qword_254637460;
  qword_254637460 = sub_20AECB130();
  __cxa_guard_release(&qword_254637468);
  return qword_254637460;
}

_QWORD *sub_20AED2CB8(uint64_t a1, void *lpsrc)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t i;
  uint64_t v12;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F2408, 0);
  if (result)
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = result[2];
    v6 = *(_QWORD *)(v4 + 16);
    if (v6 != *(_QWORD *)(v5 + 16))
      return 0;
    v7 = *(unsigned __int8 **)(v4 + 24);
    v8 = *(unsigned __int8 **)(v5 + 24);
    v9 = &v7[v6];
    v10 = &v8[v6];
    if (v6)
    {
      for (i = v6 - 1; ; --i)
      {
        v12 = i;
        if (*v7 != *v8)
          break;
        ++v7;
        ++v8;
        if (!v12)
        {
          v8 = v10;
          v7 = v9;
          return (_QWORD *)(v7 == v9 && v8 == v10);
        }
      }
      return 0;
    }
    return (_QWORD *)(v7 == v9 && v8 == v10);
  }
  return result;
}

CFTypeRef sub_20AED2D70(uint64_t a1)
{
  __int128 *v2;
  uint64_t v3;
  int v4;
  size_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  char v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  void *__dst[2];
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v2 = sub_20AED34A8();
  v27 = a1;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_20AEC0BD8(v3);
  v28 = (_QWORD *)v3;
  sub_20B4341A0((_QWORD *)(v3 + 16), *(_QWORD *)(a1 + 16));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(v3 + 112);
    v8 = *(_QWORD *)(v3 + 72);
    if (v7 < v8)
    {
      *(_QWORD *)(v3 + 112) = v8;
      v7 = v8;
    }
    v9 = *(const void **)(v3 + 64);
    v5 = v7 - (_QWORD)v9;
    if (v7 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v4 & 8) == 0)
    {
      v5 = 0;
      HIBYTE(v26) = 0;
      v6 = __dst;
      goto LABEL_14;
    }
    v9 = *(const void **)(v3 + 40);
    v5 = *(_QWORD *)(v3 + 56) - (_QWORD)v9;
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v6 = (void **)operator new(v10 + 1);
    __dst[1] = (void *)v5;
    v26 = v11 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_13;
  }
  HIBYTE(v26) = v5;
  v6 = __dst;
  if (v5)
LABEL_13:
    memmove(v6, v9, v5);
LABEL_14:
  *((_BYTE *)v6 + v5) = 0;
  v12 = v28;
  if (v28)
  {
    v13 = MEMORY[0x24BEDB7F0];
    v14 = *MEMORY[0x24BEDB7F0];
    *v28 = *MEMORY[0x24BEDB7F0];
    v15 = *(_QWORD *)(v13 + 72);
    *(_QWORD *)((char *)v12 + *(_QWORD *)(v14 - 24)) = *(_QWORD *)(v13 + 64);
    v12[3] = MEMORY[0x24BEDB848] + 16;
    v12[2] = v15;
    if (*((char *)v12 + 111) < 0)
      operator delete((void *)v12[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v12 + 16);
    MEMORY[0x20BD3583C](v12, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)v2, (uint64_t)" ", &v27, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v16 = cf;
  if (cf)
    CFRetain(cf);
  v17 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if ((v22 & 0x80000000) == 0)
        return v16;
      goto LABEL_27;
    }
  }
  if (v22 < 0)
LABEL_27:
    operator delete(__p);
  return v16;
}

void sub_20AED3010(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __int128 *v23;

  sub_20AEC147C((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  v23 = sub_20AED34A8();
  sub_20AEC0D64(&__p, "failed to create description");
  sub_20AECD224((std::string::size_type)v23, (const void **)&__p, 0);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20AED2FF4);
}

uint64_t sub_20AED30D4(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 32));
}

uint64_t sub_20AED30E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*(_BYTE *)(a1 + 200))
  {
    v2 = *(_QWORD *)(a1 + 176);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 184);
      v4 = *(void **)(a1 + 176);
      if (v3 == v2)
      {
LABEL_14:
        *(_QWORD *)(a1 + 184) = v2;
        operator delete(v4);
        goto LABEL_15;
      }
      while (1)
      {
        if (*(_BYTE *)(v3 - 16) && *(char *)(v3 - 41) < 0)
        {
          operator delete(*(void **)(v3 - 64));
          if (*(_BYTE *)(v3 - 72))
          {
LABEL_9:
            if (*(char *)(v3 - 73) < 0)
              operator delete(*(void **)(v3 - 96));
          }
        }
        else if (*(_BYTE *)(v3 - 72))
        {
          goto LABEL_9;
        }
        v3 -= 96;
        if (v3 == v2)
        {
          v4 = *(void **)(a1 + 176);
          goto LABEL_14;
        }
      }
    }
  }
LABEL_15:
  if (*(_BYTE *)(a1 + 120) && *(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if (!*(_BYTE *)(a1 + 80))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(a1 + 80))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
LABEL_21:
  if (!*(_BYTE *)(a1 + 24) || (*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_20AED31EC()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630298);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630298))
  {
    v2 = sub_20AED3330();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v7 = &qword_254630280;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254630288 = v5 + 1;
      unk_254630290 = v9 | 0x8000000000000000;
      qword_254630280 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254630288 = 0;
      unk_254630290 = 0;
      qword_254630280 = 0;
      byte_254630297 = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630280, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630298);
        return &qword_254630280;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630280;
}

void sub_20AED3318(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630298);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AED3330()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_2546302B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546302B8))
  {
    v2 = sub_20AED34A8();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_2546302A8 = v5 + 6;
      unk_2546302B0 = v9 | 0x8000000000000000;
      qword_2546302A0 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_2546302A8 = 0;
      unk_2546302B0 = 0;
      qword_2546302A0 = 0x2074736E6F63;
      byte_2546302B7 = v5 + 6;
      v7 = (char *)&qword_2546302A0 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2546302A0, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546302B8);
        return &qword_2546302A0;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_2546302A0;
}

void sub_20AED3490(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546302B8);
  _Unwind_Resume(a1);
}

__int128 *sub_20AED34A8()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546302D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546302D8))
    return &xmmword_2546302C0;
  v2 = (char *)sub_20AED3584();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_2546302C0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_2546302D0 = *((_QWORD *)v2 + 2);
    xmmword_2546302C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546302C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546302D8);
  return &xmmword_2546302C0;
}

void sub_20AED356C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546302D8);
  _Unwind_Resume(a1);
}

void *sub_20AED3584()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2546302F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546302F8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZBlob]", qword_2546302E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546302E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546302F8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254630318);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254630318))
    return &unk_254630300;
  sub_20B531658((uint64_t)qword_2546302E0, (uint64_t)&unk_254630300);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254630300, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630318);
  return &unk_254630300;
}

void sub_20AED3674(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630318);
  _Unwind_Resume(a1);
}

void sub_20AED368C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546302F8);
  _Unwind_Resume(a1);
}

char *sub_20AED36A4(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *__dst = 0;
  __dst[24] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    __dst[24] = 1;
  }
  __dst[32] = 0;
  __dst[80] = 0;
  if (*((_BYTE *)a2 + 80))
  {
    if (*((char *)a2 + 55) < 0)
    {
      sub_20AEC60F4(__dst + 32, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
    }
    else
    {
      v5 = a2[2];
      *((_QWORD *)__dst + 6) = *((_QWORD *)a2 + 6);
      *((_OWORD *)__dst + 2) = v5;
    }
    v6 = (unsigned __int128 *)(a2 + 4);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *((_OWORD *)__dst + 4) = v7;
    __dst[80] = 1;
  }
  __dst[96] = 0;
  __dst[120] = 0;
  if (*((_BYTE *)a2 + 120))
  {
    if (*((char *)a2 + 119) < 0)
    {
      sub_20AEC60F4(__dst + 96, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
    }
    else
    {
      v8 = a2[6];
      *((_QWORD *)__dst + 14) = *((_QWORD *)a2 + 14);
      *((_OWORD *)__dst + 6) = v8;
    }
    __dst[120] = 1;
  }
  v9 = a2[8];
  v10 = a2[9];
  *(_OWORD *)(__dst + 153) = *(__int128 *)((char *)a2 + 153);
  *((_OWORD *)__dst + 8) = v9;
  *((_OWORD *)__dst + 9) = v10;
  sub_20AED3838((uint64_t)(__dst + 176), (uint64_t)(a2 + 11));
  return __dst;
}

void sub_20AED37D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(_BYTE *)(v1 + 120) && *(char *)(v1 + 119) < 0)
    operator delete(*v3);
  if (*(_BYTE *)(v1 + 80) && *(char *)(v1 + 55) < 0)
    operator delete(*v2);
  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AED3838(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    sub_20AED3920((_QWORD *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5));
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_20AED38A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v3;
  void **v4;
  void **v5;

  if (*(_BYTE *)(v1 + 24))
  {
    v3 = *(void ***)v1;
    if (*(_QWORD *)v1)
    {
      v4 = *(void ***)(v1 + 8);
      v5 = *(void ***)v1;
      if (v4 != v3)
      {
        do
        {
          if (*((_BYTE *)v4 - 16) && *((char *)v4 - 41) < 0)
            operator delete(*(v4 - 8));
          if (*((_BYTE *)v4 - 72))
          {
            if (*((char *)v4 - 73) < 0)
              operator delete(*(v4 - 12));
          }
          v4 -= 12;
        }
        while (v4 != v3);
        v5 = *(void ***)v1;
      }
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v5);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20AED3920(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x2AAAAAAAAAAAAABLL)
      sub_20AEC60B8();
    result = operator new(96 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[12 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_20AED3B1C(&v8[v9 / 8], (__int128 *)(a2 + v9));
        v9 += 96;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20AED39DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20AED3A5C(&a9);
  _Unwind_Resume(a1);
}

void sub_20AED39F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (!v11)
  {
LABEL_2:
    *(_QWORD *)(v9 + 8) = v10;
    sub_20AED3A5C(&a9);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v13 = v10 + v11;
    if (*(_BYTE *)(v10 + v11 - 16) && *(char *)(v13 - 41) < 0)
    {
      operator delete(*(void **)(v13 - 64));
      if (*(_BYTE *)(v13 - 72))
      {
LABEL_7:
        if (*(char *)(v10 + v11 - 73) < 0)
          operator delete(*(void **)(v13 - 96));
      }
    }
    else if (*(_BYTE *)(v13 - 72))
    {
      goto LABEL_7;
    }
    v11 -= 96;
    if (!v11)
      goto LABEL_2;
  }
}

void ***sub_20AED3A5C(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 == v3)
      {
LABEL_15:
        v2[1] = v3;
        operator delete(v5);
        return v1;
      }
      while (1)
      {
        if (*((_BYTE *)v4 - 16) && *((char *)v4 - 41) < 0)
        {
          operator delete(*(v4 - 8));
          if (*((_BYTE *)v4 - 72))
          {
LABEL_10:
            if (*((char *)v4 - 73) < 0)
              operator delete(*(v4 - 12));
          }
        }
        else if (*((_BYTE *)v4 - 72))
        {
          goto LABEL_10;
        }
        v4 -= 12;
        if (v4 == v3)
        {
          v5 = **v1;
          goto LABEL_15;
        }
      }
    }
  }
  return result;
}

_BYTE *sub_20AED3B1C(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;

  *__dst = 0;
  __dst[24] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    __dst[24] = 1;
  }
  __dst[32] = 0;
  __dst[80] = 0;
  if (*((_BYTE *)a2 + 80))
  {
    if (*((char *)a2 + 55) < 0)
    {
      sub_20AEC60F4(__dst + 32, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
    }
    else
    {
      v5 = a2[2];
      *((_QWORD *)__dst + 6) = *((_QWORD *)a2 + 6);
      *((_OWORD *)__dst + 2) = v5;
    }
    v6 = (unsigned __int128 *)(a2 + 4);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *((_OWORD *)__dst + 4) = v7;
    __dst[80] = 1;
  }
  return __dst;
}

void sub_20AED3BE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 80) && *(char *)(v1 + 55) < 0)
    operator delete(*v2);
  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20AED3C28(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[160] = 0;
  if (*(_BYTE *)(a2 + 160))
  {
    sub_20AED3CC4((uint64_t)a1, a2);
    a1[160] = 1;
  }
  return a1;
}

void sub_20AED3C68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 160))
  {
    if (*(_BYTE *)(v1 + 120) && *(char *)(v1 + 119) < 0)
      operator delete(*(void **)(v1 + 96));
    if (*(_BYTE *)(v1 + 80) && *(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    if (*(_BYTE *)(v1 + 24))
    {
      if (*(char *)(v1 + 23) < 0)
        operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AED3CC4(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __int128 v6;

  v4 = sub_20AED3B1C((_BYTE *)a1, (__int128 *)a2);
  v4[96] = 0;
  v4[120] = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    if (*(char *)(a2 + 119) < 0)
    {
      sub_20AEC60F4(v4 + 96, *(void **)(a2 + 96), *(_QWORD *)(a2 + 104));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 96);
      *((_QWORD *)v4 + 14) = *(_QWORD *)(a2 + 112);
      *((_OWORD *)v4 + 6) = v5;
    }
    *(_BYTE *)(a1 + 120) = 1;
  }
  v6 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v6;
  return a1;
}

void sub_20AED3D4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 120) && *(char *)(v1 + 119) < 0)
    operator delete(*v2);
  if (*(_BYTE *)(v1 + 80) && *(char *)(v1 + 55) < 0)
    operator delete(*(void **)(v1 + 32));
  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

__int128 *sub_20AED3DA0()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546304F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546304F8))
    return &xmmword_2546304E0;
  v2 = (char *)sub_20AED3E7C();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_2546304E0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_2546304F0 = *((_QWORD *)v2 + 2);
    xmmword_2546304E0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546304E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546304F8);
  return &xmmword_2546304E0;
}

void sub_20AED3E64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546304F8);
  _Unwind_Resume(a1);
}

void *sub_20AED3E7C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254630518);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630518))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZDataInfo]", qword_254630500);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630500, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630518);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254630538);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254630538))
    return &unk_254630520;
  sub_20B531658((uint64_t)qword_254630500, (uint64_t)&unk_254630520);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254630520, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630538);
  return &unk_254630520;
}

void sub_20AED3F6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630538);
  _Unwind_Resume(a1);
}

void sub_20AED3F84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630518);
  _Unwind_Resume(a1);
}

__int128 *sub_20AED3F9C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630338);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630338))
    return &xmmword_254630320;
  v2 = sub_20AED4078();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254630320, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254630330 = v2->__r_.__value_.__r.__words[2];
    xmmword_254630320 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630320, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630338);
  return &xmmword_254630320;
}

void sub_20AED4060(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630338);
  _Unwind_Resume(a1);
}

std::string *sub_20AED4078()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630358);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630358))
    return &stru_254630340;
  sub_20AED429C((uint64_t)__p);
  sub_20AED4168((char *)__p, &stru_254630340);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254630340, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630358);
  return &stru_254630340;
}

void sub_20AED4128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254630358);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254630358);
  _Unwind_Resume(a1);
}

void sub_20AED4168(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AED4480();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v14 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AED4264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90((void **)&a9);
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AED429C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254630378);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254630378))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::optional<cv3d::vl::visual_logger::DataInfo>]", qword_254630360);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630360, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630378);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254630398);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254630398))
  {
    v5 = sub_20AED4780(qword_254630360, "<", 0);
    sub_20AED467C(qword_254630360, 0, v5, qword_254630380);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630380, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630398);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546303B8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546303B8))
  {
    sub_20B531658((uint64_t)qword_254630380, (uint64_t)&xmmword_2546303A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546303A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546303B8);
  }
  if (byte_2546303B7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546303A0, *((unint64_t *)&xmmword_2546303A0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546303A0;
    *(_QWORD *)(a1 + 16) = unk_2546303B0;
  }
}

void sub_20AED4438(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546303B8);
  _Unwind_Resume(a1);
}

void sub_20AED4450(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630398);
  _Unwind_Resume(a1);
}

void sub_20AED4468(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630378);
  _Unwind_Resume(a1);
}

__int128 *sub_20AED4480()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630558);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630558))
    return &xmmword_254630540;
  v2 = (char *)sub_20AED455C();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254630540, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254630550 = *((_QWORD *)v2 + 2);
    xmmword_254630540 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630540, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630558);
  return &xmmword_254630540;
}

void sub_20AED4544(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630558);
  _Unwind_Resume(a1);
}

void *sub_20AED455C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254630578);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630578))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vl::visual_logger::DataInfo]", qword_254630560);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630560, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630578);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254630598);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254630598))
    return &unk_254630580;
  sub_20B531658((uint64_t)qword_254630560, (uint64_t)&unk_254630580);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254630580, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630598);
  return &unk_254630580;
}

void sub_20AED464C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630598);
  _Unwind_Resume(a1);
}

void sub_20AED4664(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630578);
  _Unwind_Resume(a1);
}

_QWORD *sub_20AED467C@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, size_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  unint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  size_t v14;

  v5 = result;
  if ((*((char *)result + 23) & 0x80000000) == 0)
  {
    v7 = *((unsigned __int8 *)result + 23);
    if (v7 >= a2)
    {
      v8 = v7 - a2;
      if (v8 >= a3)
        v9 = a3;
      else
        v9 = v8;
      if (v9 < 0x7FFFFFFFFFFFFFF8)
        goto LABEL_7;
LABEL_19:
      sub_20AEC0138();
    }
LABEL_20:
    sub_20AEC73F8();
  }
  v13 = result[1];
  if (v13 < a2)
    goto LABEL_20;
  v5 = (_QWORD *)*result;
  v14 = v13 - a2;
  if (v14 >= a3)
    v9 = a3;
  else
    v9 = v14;
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_19;
LABEL_7:
  if (v9 >= 0x17)
  {
    v10 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v10 = v9 | 7;
    v11 = v10 + 1;
    v12 = operator new(v10 + 1);
    a4[1] = v9;
    a4[2] = v11 | 0x8000000000000000;
    *a4 = v12;
    a4 = v12;
  }
  else
  {
    *((_BYTE *)a4 + 23) = v9;
    if (!v9)
    {
      *(_BYTE *)a4 = 0;
      return result;
    }
  }
  result = memmove(a4, (char *)v5 + a2, v9);
  *((_BYTE *)a4 + v9) = 0;
  return result;
}

unint64_t sub_20AED4780(uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  int64_t v9;
  void *v10;
  char *v11;
  int64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  char *v16;

  v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = strlen(__s);
    if (v6 < a3)
      return -1;
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
    v7 = strlen(__s);
    if (v6 < a3)
      return -1;
  }
  v9 = v7;
  if (v7)
  {
    v10 = (void *)(v5 + a3);
    v11 = (char *)(v5 + v6);
    v12 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v9)
    {
      v14 = *__s;
      do
      {
        v15 = v12 - v9;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v10, v14, v15 + 1);
        if (!v16)
          break;
        v13 = v16;
        if (!memcmp(v16, __s, v9))
          goto LABEL_9;
        v10 = v13 + 1;
        v12 = v11 - (v13 + 1);
      }
      while (v12 >= v9);
    }
    v13 = v11;
LABEL_9:
    if (v13 == v11)
      return -1;
    else
      return (unint64_t)&v13[-v5];
  }
  return a3;
}

void sub_20AED4874(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  __int128 v6;
  __int128 *v7;
  __int128 v8;
  void **v9;
  void **v10;
  void *v11;
  _BYTE v12[16];
  void *__p;
  char v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  char v20;
  char v21;
  char v22;
  void *v23;
  void **v24;
  __int128 __dst;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AED5104();
  v5 = sub_20AED4FC0();
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)*v5, v5[1]);
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v26 = v5[2];
    __dst = v6;
  }
  v7 = sub_20AED3F9C();
  if (*((char *)v7 + 23) < 0)
  {
    sub_20AEC60F4(&v27, *(void **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v8 = *v7;
    v28 = *((_QWORD *)v7 + 2);
    v27 = v8;
  }
  sub_20AEC7620(&v23, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v12, a2);
  sub_20AECD798(v4, (__int128 **)&v23, (uint64_t)v12, **a1);
  if (!v22 || !v21)
    goto LABEL_15;
  if (!v20)
    goto LABEL_12;
  if ((v19 & 0x80000000) == 0)
  {
    if ((v17 & 0x80000000) == 0)
      goto LABEL_12;
LABEL_29:
    operator delete(v16);
    if (!v15)
      goto LABEL_15;
    goto LABEL_13;
  }
  operator delete(v18);
  if (v17 < 0)
    goto LABEL_29;
LABEL_12:
  if (!v15)
    goto LABEL_15;
LABEL_13:
  if (v14 < 0)
    operator delete(__p);
LABEL_15:
  v9 = (void **)v23;
  if (v23)
  {
    v10 = v24;
    v11 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v10 - 1) < 0)
          operator delete(*(v10 - 3));
        v10 -= 3;
      }
      while (v10 != v9);
      v11 = v23;
    }
    v24 = v9;
    operator delete(v11);
  }
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      return;
LABEL_27:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v27);
  if (SHIBYTE(v26) < 0)
    goto LABEL_27;
}

void sub_20AED4A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  sub_20AECDEE0((uint64_t)&a9);
  sub_20AEC2E90(&a25);
  if (*(char *)(v25 - 49) < 0)
    operator delete(*(void **)(v25 - 72));
  if (*(char *)(v25 - 73) < 0)
  {
    operator delete(*(void **)(v25 - 96));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20AED4AC0(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 528))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_20AECEBD0(v4, v1 + 1);
    sub_20AECF558((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22C0, (void (*)(void *))sub_20AECF5A8);
  }
  return result;
}

void sub_20AED4B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCE40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AED4B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_20AECCE40((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_20AED4B6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20AED4B80(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 528))
  {
    sub_20AED5474(a1);
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_8;
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_12:
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_12;
LABEL_8:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_9:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

std::runtime_error *sub_20AED4C1C(std::runtime_error *a1, uint64_t a2)
{
  std::runtime_error *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = std::runtime_error::runtime_error(a1, (const std::runtime_error *)a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB818] + 16);
  result[1] = *(std::runtime_error *)(a2 + 16);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB878] + 16);
  v4 = *(_QWORD *)(a2 + 40);
  result[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  result[2].__imp_.__imp_ = (const char *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

_BYTE *sub_20AED4C84(_BYTE *a1, const char **a2)
{
  const char *v3;
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = strlen(*a2);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)a1 + 1) = v5;
    *((_QWORD *)a1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    a1[23] = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, v3, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  a1[24] = 1;
  return a1;
}

_BYTE *sub_20AED4D3C(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[384] = 0;
  if (*(_BYTE *)(a2 + 384))
  {
    sub_20AED4DE8((uint64_t)a1, (__int128 *)a2);
    a1[384] = 1;
  }
  return a1;
}

void sub_20AED4D7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 384))
  {
    if (*(_BYTE *)(v1 + 368))
    {
      if (*(_BYTE *)(v1 + 328) && *(char *)(v1 + 327) < 0)
        operator delete(*(void **)(v1 + 304));
      if (*(_BYTE *)(v1 + 288) && *(char *)(v1 + 263) < 0)
        operator delete(*(void **)(v1 + 240));
      if (*(_BYTE *)(v1 + 232))
      {
        if (*(char *)(v1 + 231) < 0)
          operator delete(*(void **)(v1 + 208));
      }
    }
    sub_20AED30E0(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_20AED4DE8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  unsigned __int128 *v4;
  unsigned __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unsigned __int128 *v12;
  unsigned __int128 v13;
  __int128 v14;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v2 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*((_BYTE *)a2 + 80))
  {
    v3 = a2[2];
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(a1 + 32) = v3;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 4) = 0;
    v4 = (unsigned __int128 *)(a2 + 4);
    do
      v5 = __ldaxp(v4);
    while (__stlxp(v5, v4));
    *(_OWORD *)(a1 + 64) = v5;
    *(_BYTE *)(a1 + 80) = 1;
  }
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*((_BYTE *)a2 + 120))
  {
    v6 = a2[6];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *(_OWORD *)(a1 + 96) = v6;
    *((_QWORD *)a2 + 13) = 0;
    *((_QWORD *)a2 + 14) = 0;
    *((_QWORD *)a2 + 12) = 0;
    *(_BYTE *)(a1 + 120) = 1;
  }
  result = (__n128)a2[8];
  v8 = a2[9];
  v9 = *(__int128 *)((char *)a2 + 153);
  *(_BYTE *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 153) = v9;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v8;
  *(_BYTE *)(a1 + 200) = 0;
  if (*((_BYTE *)a2 + 200))
  {
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    result = (__n128)a2[11];
    *(__n128 *)(a1 + 176) = result;
    *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
    *((_QWORD *)a2 + 22) = 0;
    *((_QWORD *)a2 + 23) = 0;
    *((_QWORD *)a2 + 24) = 0;
    *(_BYTE *)(a1 + 200) = 1;
  }
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  if (*((_BYTE *)a2 + 368))
  {
    *(_BYTE *)(a1 + 208) = 0;
    *(_BYTE *)(a1 + 232) = 0;
    if (*((_BYTE *)a2 + 232))
    {
      v10 = a2[13];
      *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
      *(_OWORD *)(a1 + 208) = v10;
      *((_QWORD *)a2 + 27) = 0;
      *((_QWORD *)a2 + 28) = 0;
      *((_QWORD *)a2 + 26) = 0;
      *(_BYTE *)(a1 + 232) = 1;
    }
    *(_BYTE *)(a1 + 240) = 0;
    *(_BYTE *)(a1 + 288) = 0;
    if (*((_BYTE *)a2 + 288))
    {
      v11 = a2[15];
      *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 32);
      *(_OWORD *)(a1 + 240) = v11;
      *((_QWORD *)a2 + 31) = 0;
      *((_QWORD *)a2 + 32) = 0;
      *((_QWORD *)a2 + 30) = 0;
      v12 = (unsigned __int128 *)(a2 + 17);
      do
        v13 = __ldaxp(v12);
      while (__stlxp(v13, v12));
      *(_OWORD *)(a1 + 272) = v13;
      *(_BYTE *)(a1 + 288) = 1;
    }
    *(_BYTE *)(a1 + 304) = 0;
    *(_BYTE *)(a1 + 328) = 0;
    if (*((_BYTE *)a2 + 328))
    {
      v14 = a2[19];
      *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 40);
      *(_OWORD *)(a1 + 304) = v14;
      *((_QWORD *)a2 + 39) = 0;
      *((_QWORD *)a2 + 40) = 0;
      *((_QWORD *)a2 + 38) = 0;
      *(_BYTE *)(a1 + 328) = 1;
    }
    result = (__n128)a2[21];
    *(_QWORD *)(a1 + 352) = *((_QWORD *)a2 + 44);
    *(__n128 *)(a1 + 336) = result;
    *(_BYTE *)(a1 + 368) = 1;
  }
  return result;
}

uint64_t *sub_20AED4FC0()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_2546303D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546303D8))
  {
    v2 = sub_20AED3330();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v7 = &qword_2546303C0;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_2546303C8 = v5 + 1;
      unk_2546303D0 = v9 | 0x8000000000000000;
      qword_2546303C0 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_2546303C8 = 0;
      unk_2546303D0 = 0;
      qword_2546303C0 = 0;
      byte_2546303D7 = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2546303C0, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546303D8);
        return &qword_2546303C0;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_2546303C0;
}

void sub_20AED50EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546303D8);
  _Unwind_Resume(a1);
}

__int128 *sub_20AED5104()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546305F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546305F8))
    return &xmmword_2546305E0;
  v2 = (char *)sub_20AED51E0();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_2546305E0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_2546305F0 = *((_QWORD *)v2 + 2);
    xmmword_2546305E0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546305E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546305F8);
  return &xmmword_2546305E0;
}

void sub_20AED51C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546305F8);
  _Unwind_Resume(a1);
}

void *sub_20AED51E0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254630618);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630618))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZData]", qword_254630600);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630600, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630618);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254630638);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254630638))
    return &unk_254630620;
  sub_20B531658((uint64_t)qword_254630600, (uint64_t)&unk_254630620);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254630620, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630638);
  return &unk_254630620;
}

void sub_20AED52D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630638);
  _Unwind_Resume(a1);
}

void sub_20AED52E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630618);
  _Unwind_Resume(a1);
}

uint64_t sub_20AED5300(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, __n128);

  v4 = *a2;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 6);
  v5 = sub_20AED4DE8(a1 + 48, a2 + 2);
  v6 = *((_QWORD *)a2 + 53);
  v7 = *((_QWORD *)a2 + 54);
  *(_QWORD *)(a1 + 432) = &off_24C411E78;
  *(_QWORD *)(a1 + 440) = v6;
  *(_QWORD *)(a1 + 448) = v7;
  *((_QWORD *)a2 + 53) = 0;
  *((_QWORD *)a2 + 54) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  if (*((_BYTE *)a2 + 480))
  {
    *(_QWORD *)(a1 + 464) = 0;
    *(_QWORD *)(a1 + 472) = 0;
    v8 = (void (*)(uint64_t, __n128))*((_QWORD *)a2 + 56);
    if (v8)
      v8(2, v5);
    *(_BYTE *)(a1 + 496) = 1;
  }
  *(_BYTE *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 528) = 0;
  if (*((_BYTE *)a2 + 512))
  {
    *(_QWORD *)(a1 + 504) = &off_24C41E150;
    *(_OWORD *)(a1 + 512) = a2[31];
    *((_QWORD *)a2 + 62) = 0;
    *((_QWORD *)a2 + 63) = 0;
    *(_BYTE *)(a1 + 528) = 1;
  }
  *(_QWORD *)a1 = &off_24C3F2468;
  *(_DWORD *)(a1 + 536) = 1;
  return a1;
}

void sub_20AED53F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AED5414(uint64_t a1)
{
  sub_20AED5474(a1 + 16);
  return a1;
}

void sub_20AED543C(uint64_t a1)
{
  sub_20AED5474(a1 + 16);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AED5474(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void (*v5)(_QWORD);
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  if (!*(_BYTE *)(a1 + 512))
    goto LABEL_6;
  *(_QWORD *)(a1 + 488) = &off_24C41E150;
  v2 = *(std::__shared_weak_count **)(a1 + 504);
  if (!v2)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 480))
      goto LABEL_9;
  }
  else
  {
LABEL_6:
    if (!*(_BYTE *)(a1 + 480))
      goto LABEL_9;
  }
  v5 = *(void (**)(_QWORD))(a1 + 448);
  if (v5)
    v5(0);
LABEL_9:
  v6 = *(std::__shared_weak_count **)(a1 + 432);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (!*(_BYTE *)(a1 + 400))
    goto LABEL_23;
  if (*(_BYTE *)(a1 + 360) && *(char *)(a1 + 359) < 0)
    operator delete(*(void **)(a1 + 336));
  if (*(_BYTE *)(a1 + 320) && *(char *)(a1 + 295) < 0)
    operator delete(*(void **)(a1 + 272));
  if (*(_BYTE *)(a1 + 264) && *(char *)(a1 + 263) < 0)
  {
    operator delete(*(void **)(a1 + 240));
    sub_20AED30E0(a1 + 32);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_23:
    sub_20AED30E0(a1 + 32);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20AED55DC(char *__s, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  _DWORD v13[6];
  int v14;
  _QWORD **v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v14 = 0;
  sub_20AED5B5C(v13, __s);
  v15 = (_QWORD **)v13;
  v16 = a2;
  v17 = v13;
  v18 = a2;
  v19 = a2;
  if (v14 == -1)
    sub_20AECFAB8();
  v20 = &v15;
  ((void (*)(_QWORD **, _DWORD *))off_24C3F24C0[v14])(&v20, v13);
  v15 = (_QWORD **)v13;
  v16 = a3;
  v17 = v13;
  v18 = a3;
  v19 = a3;
  if (v14 == -1)
    sub_20AECFAB8();
  v20 = &v15;
  ((void (*)(_QWORD **, _DWORD *))off_24C3F2478[v14])(&v20, v13);
  sub_20AED5838((uint64_t)&v12, (uint64_t)v13, a4);
  v15 = (_QWORD **)v13;
  v16 = a5;
  v17 = v13;
  v18 = a5;
  v19 = a5;
  if (v14 == -1)
    sub_20AECFAB8();
  v20 = &v15;
  ((void (*)(_QWORD **, _DWORD *))off_24C3F2478[v14])(&v20, v13);
  v15 = (_QWORD **)v13;
  v16 = a6;
  v17 = v13;
  v18 = a6;
  v19 = a6;
  if (v14 == -1)
    sub_20AECFAB8();
  v20 = &v15;
  ((void (*)(_QWORD **, _DWORD *))off_24C3F24C0[v14])(&v20, v13);
  if (v14 == -1)
    sub_20AECFAB8();
  v15 = &v20;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C3F24F0[v14])(&v15, v13);
  if (v14 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C3F2490[v14])(&v15, v13);
  return result;
}

void sub_20AED57AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AED57C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AED57D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AED57E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AED57FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AED5810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AED5824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AED5838(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  int v5;
  size_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD **v21;
  _QWORD *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  const char *v26;

  if (*a3)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 208) = 0u;
    *(_OWORD *)(v4 + 224) = 0u;
    *(_OWORD *)(v4 + 240) = 0u;
    *(_OWORD *)(v4 + 256) = 0u;
    *(_QWORD *)(v4 + 272) = 0;
    sub_20AEC0BD8(v4);
    v22 = (_QWORD *)v4;
    std::ostream::operator<<();
    v5 = *(_DWORD *)(v4 + 120);
    if ((v5 & 0x10) != 0)
    {
      v9 = *(_QWORD *)(v4 + 112);
      v10 = *(_QWORD *)(v4 + 72);
      if (v9 < v10)
      {
        *(_QWORD *)(v4 + 112) = v10;
        v9 = v10;
      }
      v11 = *(const void **)(v4 + 64);
      v6 = v9 - (_QWORD)v11;
      if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_25;
    }
    else
    {
      if ((v5 & 8) == 0)
      {
        v6 = 0;
        HIBYTE(v20) = 0;
        v7 = __dst;
        goto LABEL_17;
      }
      v11 = *(const void **)(v4 + 40);
      v6 = *(_QWORD *)(v4 + 56) - (_QWORD)v11;
      if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_25:
        sub_20AEC0138();
    }
    if (v6 >= 0x17)
    {
      v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v12 = v6 | 7;
      v13 = v12 + 1;
      v7 = (void **)operator new(v12 + 1);
      __dst[1] = (void *)v6;
      v20 = v13 | 0x8000000000000000;
      __dst[0] = v7;
    }
    else
    {
      HIBYTE(v20) = v6;
      v7 = __dst;
      if (!v6)
        goto LABEL_17;
    }
    memmove(v7, v11, v6);
LABEL_17:
    *((_BYTE *)v7 + v6) = 0;
    v14 = v22;
    if (v22)
    {
      v15 = MEMORY[0x24BEDB7F0];
      v16 = *MEMORY[0x24BEDB7F0];
      *v22 = *MEMORY[0x24BEDB7F0];
      v17 = *(_QWORD *)(v15 + 72);
      *(_QWORD *)((char *)v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
      v14[3] = MEMORY[0x24BEDB848] + 16;
      v14[2] = v17;
      if (*((char *)v14 + 111) < 0)
        operator delete((void *)v14[11]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x20BD35758](v14 + 16);
      MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
    }
    v22 = (_QWORD *)a2;
    v23 = (const char *)__dst;
    v24 = a2;
    v25 = (const char *)__dst;
    v26 = (const char *)__dst;
    v18 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v18 == -1)
      sub_20AECFAB8();
    v21 = &v22;
    ((void (*)(_QWORD ***, uint64_t))off_24C3F24D8[v18])(&v21, a2);
    if (SHIBYTE(v20) < 0)
      operator delete(__dst[0]);
    return;
  }
  v22 = (_QWORD *)a2;
  v23 = "nullptr";
  v24 = a2;
  v25 = "nullptr";
  v26 = "nullptr";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    sub_20AECFAB8();
  __dst[0] = &v22;
  ((void (*)(void **, uint64_t))off_24C3F24A8[v8])(__dst, a2);
}

void sub_20AED5AEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20AED5B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20AED5B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20AED5B40(_DWORD ***a1)
{
  return sub_20AED5B5C(**a1, (char *)(*a1)[1]);
}

void sub_20AED5B4C(uint64_t a1, uint64_t a2)
{
  sub_20AED5C4C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20AED5B5C(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C3F2490[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20AED5C4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C3F2490[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20AED5E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20AED5E44(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20AED5F3C((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20AED5F34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20AED5F3C(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20AED6138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_20AED614C(uint64_t **result)
{
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  char v5;

  v1 = **result;
  v2 = (__int128 *)(*result)[1];
  v3 = *(unsigned int *)(v1 + 24);
  if ((_DWORD)v3 != -1)
    result = (uint64_t **)((uint64_t (*)(char *, uint64_t))off_24C3F2490[v3])(&v5, v1);
  *(_DWORD *)(v1 + 24) = -1;
  if (*((char *)v2 + 23) < 0)
  {
    result = (uint64_t **)sub_20AEC60F4((_BYTE *)v1, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v4 = *v2;
    *(_QWORD *)(v1 + 16) = *((_QWORD *)v2 + 2);
    *(_OWORD *)v1 = v4;
  }
  *(_DWORD *)(v1 + 24) = 1;
  return result;
}

void sub_20AED61E8(uint64_t a1, uint64_t a2)
{
  sub_20AED6290((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

char *sub_20AED61F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  __int128 v5;
  char *result;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20AED6414((char **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
  }
  else
  {
    if (*(char *)(v3 + 23) < 0)
    {
      sub_20AEC60F4(*(_BYTE **)(a2 + 8), *(void **)v3, *(_QWORD *)(v3 + 8));
    }
    else
    {
      v5 = *(_OWORD *)v3;
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
      *(_OWORD *)v4 = v5;
    }
    result = (char *)(v4 + 24);
    *(_QWORD *)(a2 + 8) = v4 + 24;
    *(_QWORD *)(a2 + 8) = v4 + 24;
  }
  return result;
}

void sub_20AED6288(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20AED6290(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  void *v9;
  _BYTE v10[15];
  char v11;
  __int128 __p;
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v14 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v14[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = v3;
  *(_QWORD *)v10 = v14[0];
  *(_QWORD *)&v10[7] = *(_QWORD *)((char *)v14 + 7);
  v11 = v4;
  memset(v14, 0, 15);
  v5 = (__int128 *)a1[1];
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(&__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    v13 = *((_QWORD *)v5 + 2);
    __p = v6;
  }
  v7 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_24C3F2490[v7])(&v8, v2);
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v9, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v9);
    return;
  }
  operator delete((void *)__p);
  if (v11 < 0)
    goto LABEL_10;
}

void sub_20AED63D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20AED6414(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20AEC60F4(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_20AED65D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20AED65E8(__n128 ***a1)
{
  __n128 *v1;
  __n128 *v2;
  uint64_t v3;
  __n128 result;
  char v5;

  v1 = **a1;
  v2 = (*a1)[1];
  v3 = v1[1].n128_u32[2];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, __n128 *))off_24C3F2490[v3])(&v5, v1);
  v1[1].n128_u32[2] = -1;
  result = *v2;
  v1[1].n128_u64[0] = v2[1].n128_u64[0];
  *v1 = result;
  v2->n128_u64[1] = 0;
  v2[1].n128_u64[0] = 0;
  v2->n128_u64[0] = 0;
  v1[1].n128_u32[2] = 1;
  return result;
}

void sub_20AED6660(uint64_t a1, uint64_t a2)
{
  sub_20AED66D4((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

char *sub_20AED666C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  __int128 v5;
  char *result;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20AED6838((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
  }
  else
  {
    v5 = *(_OWORD *)v3;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = 0;
    result = (char *)(v4 + 24);
    *(_QWORD *)(a2 + 8) = v4 + 24;
  }
  return result;
}

void sub_20AED66D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  _BYTE v10[15];
  char v11;
  void *__p[2];
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v14 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v14[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = v3;
  *(_QWORD *)v10 = v14[0];
  *(_QWORD *)&v10[7] = *(_QWORD *)((char *)v14 + 7);
  v11 = v4;
  memset(v14, 0, 15);
  v5 = a1[1];
  v6 = *(_QWORD *)(v5 + 16);
  *(_OWORD *)__p = *(_OWORD *)v5;
  v13 = v6;
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  v7 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_24C3F2490[v7])(&v8, v2);
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v9, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0)
      return;
LABEL_7:
    operator delete(v9);
    return;
  }
  operator delete(__p[0]);
  if (v11 < 0)
    goto LABEL_7;
}

void sub_20AED67FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20AED6838(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  void **v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

uint64_t *sub_20AED698C()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_2546305B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546305B8))
  {
    v2 = sub_20AED6AD0();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v7 = &qword_2546305A0;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_2546305A8 = v5 + 1;
      unk_2546305B0 = v9 | 0x8000000000000000;
      qword_2546305A0 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_2546305A8 = 0;
      unk_2546305B0 = 0;
      qword_2546305A0 = 0;
      byte_2546305B7 = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2546305A0, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546305B8);
        return &qword_2546305A0;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_2546305A0;
}

void sub_20AED6AB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546305B8);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AED6AD0()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_2546305D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546305D8))
  {
    v2 = sub_20AED5104();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_2546305C8 = v5 + 6;
      unk_2546305D0 = v9 | 0x8000000000000000;
      qword_2546305C0 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_2546305C8 = 0;
      unk_2546305D0 = 0;
      qword_2546305C0 = 0x2074736E6F63;
      byte_2546305D7 = v5 + 6;
      v7 = (char *)&qword_2546305C0 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2546305C0, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546305D8);
        return &qword_2546305C0;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_2546305C0;
}

void sub_20AED6C30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546305D8);
  _Unwind_Resume(a1);
}

void sub_20AED6C48(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  __int128 v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  _BYTE v10[16];
  void *__p;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  __int128 *v21;
  __int128 *v22;
  __int128 __dst;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AED34A8();
  v5 = sub_20AED6ED4();
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)*v5, v5[1]);
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v24 = v5[2];
    __dst = v6;
  }
  sub_20AEC7620(&v21, (uint64_t)&__dst, 1uLL);
  sub_20AECF9B0(v10, a2);
  sub_20AECD798(v4, &v21, (uint64_t)v10, **a1);
  if (!v20 || !v19)
    goto LABEL_12;
  if (!v18)
    goto LABEL_9;
  if ((v17 & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_24:
    operator delete(v14);
    if (!v13)
      goto LABEL_12;
    goto LABEL_10;
  }
  operator delete(v16);
  if (v15 < 0)
    goto LABEL_24;
LABEL_9:
  if (!v13)
    goto LABEL_12;
LABEL_10:
  if (v12 < 0)
    operator delete(__p);
LABEL_12:
  v7 = v21;
  if (v21)
  {
    v8 = v22;
    v9 = v21;
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*((void **)v8 - 3));
        v8 = (__int128 *)((char *)v8 - 24);
      }
      while (v8 != v7);
      v9 = v21;
    }
    v22 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v24) < 0)
    operator delete((void *)__dst);
}

void sub_20AED6DCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECDEE0((uint64_t)va);
  sub_20AEC2E90((void **)(v2 - 88));
  if (*(char *)(v2 - 41) < 0)
  {
    operator delete(*(void **)(v2 - 64));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20AED6E14(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_20AECEBD0(v4, v1 + 1);
    sub_20AECF558((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22C0, (void (*)(void *))sub_20AECF5A8);
  }
  return result;
}

void sub_20AED6E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCE40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AED6EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_20AECCE40((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_20AED6EC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AED6ED4()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_2546303F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546303F8))
  {
    v2 = sub_20AED6AD0();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v7 = &qword_2546303E0;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_2546303E8 = v5 + 1;
      unk_2546303F0 = v9 | 0x8000000000000000;
      qword_2546303E0 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_2546303E8 = 0;
      unk_2546303F0 = 0;
      qword_2546303E0 = 0;
      byte_2546303F7 = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2546303E0, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546303F8);
        return &qword_2546303E0;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_2546303E0;
}

void sub_20AED7000(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546303F8);
  _Unwind_Resume(a1);
}

uint64_t sub_20AED7018(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (!*(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_11;
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_11:
        if (!*(_BYTE *)(a1 + 40))
          return a1;
        goto LABEL_12;
      }
    }
    else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
LABEL_12:
    if (*(char *)(a1 + 39) < 0)
    {
      operator delete(*(void **)(a1 + 16));
      return a1;
    }
    return a1;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20AED70F4(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  __int128 v6;
  uint64_t *v7;
  __int128 v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  _BYTE v12[16];
  void *__p;
  char v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  char v20;
  char v21;
  char v22;
  __int128 *v23;
  __int128 *v24;
  __int128 __dst;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AED34A8();
  v5 = sub_20AED733C();
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)*v5, v5[1]);
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v26 = v5[2];
    __dst = v6;
  }
  v7 = sub_20AED7480();
  if (*((char *)v7 + 23) < 0)
  {
    sub_20AEC60F4(&v27, (void *)*v7, v7[1]);
  }
  else
  {
    v8 = *(_OWORD *)v7;
    v28 = v7[2];
    v27 = v8;
  }
  sub_20AEC7620(&v23, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v12, a2);
  sub_20AECD798(v4, &v23, (uint64_t)v12, **a1);
  if (!v22 || !v21)
    goto LABEL_15;
  if (!v20)
    goto LABEL_12;
  if ((v19 & 0x80000000) == 0)
  {
    if ((v17 & 0x80000000) == 0)
      goto LABEL_12;
LABEL_29:
    operator delete(v16);
    if (!v15)
      goto LABEL_15;
    goto LABEL_13;
  }
  operator delete(v18);
  if (v17 < 0)
    goto LABEL_29;
LABEL_12:
  if (!v15)
    goto LABEL_15;
LABEL_13:
  if (v14 < 0)
    operator delete(__p);
LABEL_15:
  v9 = v23;
  if (v23)
  {
    v10 = v24;
    v11 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v10 - 1) < 0)
          operator delete(*((void **)v10 - 3));
        v10 = (__int128 *)((char *)v10 - 24);
      }
      while (v10 != v9);
      v11 = v23;
    }
    v24 = v9;
    operator delete(v11);
  }
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      return;
LABEL_27:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v27);
  if (SHIBYTE(v26) < 0)
    goto LABEL_27;
}

void sub_20AED72DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECDEE0((uint64_t)va);
  sub_20AEC2E90((void **)(v2 - 120));
  if (*(char *)(v2 - 49) < 0)
    operator delete(*(void **)(v2 - 72));
  if (*(char *)(v2 - 73) < 0)
  {
    operator delete(*(void **)(v2 - 96));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20AED733C()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630418);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630418))
  {
    v2 = sub_20AED75D0();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v7 = &qword_254630400;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254630408 = v5 + 1;
      unk_254630410 = v9 | 0x8000000000000000;
      qword_254630400 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254630408 = 0;
      unk_254630410 = 0;
      qword_254630400 = 0;
      byte_254630417 = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630400, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630418);
        return &qword_254630400;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630400;
}

void sub_20AED7468(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630418);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AED7480()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630478);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630478))
  {
    v2 = sub_20AED7794();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v7 = &qword_254630460;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254630468 = v5 + 1;
      unk_254630470 = v9 | 0x8000000000000000;
      qword_254630460 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254630468 = 0;
      unk_254630470 = 0;
      qword_254630460 = 0;
      byte_254630477 = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630460, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630478);
        return &qword_254630460;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630460;
}

void sub_20AED75B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630478);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AED75D0()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  int v3;
  size_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;

  v0 = atomic_load((unsigned __int8 *)&qword_254630438);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630438))
  {
    v2 = atomic_load((unsigned __int8 *)&qword_254630458);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254630458))
    {
      qword_254630448 = 0;
      unk_254630450 = 0xA00000000000000;
      LODWORD(qword_254630440) = 1936617315;
      WORD2(qword_254630440) = 8308;
      *(_DWORD *)((char *)&qword_254630440 + 6) = 1684631414;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630440, &dword_20AEBB000);
      __cxa_guard_release(&qword_254630458);
    }
    v3 = byte_254630457;
    if (byte_254630457 >= 0)
      v4 = byte_254630457;
    else
      v4 = qword_254630448;
    v5 = v4 + 1;
    if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v6 = &qword_254630420;
    if (v5 >= 0x17)
    {
      v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v7 = v5 | 7;
      v8 = v7 + 1;
      v9 = (uint64_t *)operator new(v7 + 1);
      qword_254630428 = v4 + 1;
      unk_254630430 = v8 | 0x8000000000000000;
      qword_254630420 = (uint64_t)v9;
      v6 = v9;
    }
    else
    {
      qword_254630428 = 0;
      unk_254630430 = 0;
      qword_254630420 = 0;
      byte_254630437 = v4 + 1;
      if (!v4)
      {
LABEL_19:
        *(_WORD *)((char *)v6 + v4) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630420, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630438);
        return &qword_254630420;
      }
    }
    if (v3 >= 0)
      v10 = &qword_254630440;
    else
      v10 = (uint64_t *)qword_254630440;
    memmove(v6, v10, v4);
    goto LABEL_19;
  }
  return &qword_254630420;
}

void sub_20AED777C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630438);
  _Unwind_Resume(a1);
}

__int128 *sub_20AED7794()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630498);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630498))
    return &xmmword_254630480;
  v2 = (char *)sub_20AED7870();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254630480, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254630490 = *((_QWORD *)v2 + 2);
    xmmword_254630480 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630480, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630498);
  return &xmmword_254630480;
}

void sub_20AED7858(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630498);
  _Unwind_Resume(a1);
}

void *sub_20AED7870()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2546304B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546304B8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = unsigned long]", qword_2546304A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546304A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546304B8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546304D8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_2546304D8))
    return &unk_2546304C0;
  sub_20B531658((uint64_t)qword_2546304A0, (uint64_t)&unk_2546304C0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_2546304C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546304D8);
  return &unk_2546304C0;
}

void sub_20AED7960(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546304D8);
  _Unwind_Resume(a1);
}

void sub_20AED7978(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546304B8);
  _Unwind_Resume(a1);
}

uint64_t sub_20AED7990(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *(_QWORD *)(result + 16) = &off_24C41D808;
  v2 = *(std::__shared_weak_count **)(result + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AED7A04(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)(a1 + 8) = &off_24C41D808;
  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AED7A6C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)(a1 + 16) = &off_24C41D808;
  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AED7AE0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)(a1 + 8) = &off_24C41D808;
  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t VZCameraGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637478);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254637478))
    return qword_254637470;
  qword_254637470 = sub_20AECB130();
  __cxa_guard_release(&qword_254637478);
  return qword_254637470;
}

_QWORD *VZDataCreateWithCamera(uint64_t a1, __int128 *a2, CFErrorRef *a3)
{
  _QWORD *v5;
  int v6;
  __int128 *v7;
  _QWORD *v8;
  __int128 v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  CFErrorRef **v21;
  CFErrorRef *v22;
  char v23[208];
  void *v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  char v29;
  void *v30;
  char v31;
  char v32;
  char v33;
  char v34;
  __int128 v35[13];
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  void *__p;
  char v43;
  char v44;
  char v45;
  char v46;
  __int128 v47;
  __int128 v48;
  char v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  char v55;
  char v56;
  unsigned __int8 v57;
  uint64_t v58;

  v5 = (_QWORD *)a1;
  v58 = *MEMORY[0x24BDAC8D0];
  if (sub_20AED8128((uint64_t)"VZDataCreateWithCamera", a1, a3))
    return 0;
  sub_20AED18DC(a2, v23);
  v21 = &v22;
  v22 = a3;
  sub_20AED4D3C(v35, (uint64_t)v23);
  sub_20AF5417C((uint64_t)(v5 + 2), v35, (uint64_t)&v47);
  if (v46)
  {
    if (v45)
    {
      if (v44 && v43 < 0)
        operator delete(__p);
      if (v41 && v40 < 0)
        operator delete(v39);
      if (v38 && v37 < 0)
        operator delete(v36);
    }
    sub_20AED30E0((uint64_t)v35);
  }
  v6 = v57;
  if (!v57)
  {
    v10 = v47;
    sub_20AECEBD0(&v11, &v48);
    v20 = 1;
    sub_20AEDB09C(&v21, (uint64_t)&v10);
    if (!v20 || !v19)
      goto LABEL_39;
    if (v18)
    {
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
    }
    if (!v13 || (v12 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_37;
  }
  v7 = (__int128 *)sub_20AED4AC0((uint64_t)&v47);
  v8 = operator new(0x240uLL, MEMORY[0x24BEDB6B8]);
  if (!v8)
  {
    LOBYTE(v10) = 0;
    v20 = 0;
    sub_20AEDB09C(&v21, (uint64_t)&v10);
    if (!v20 || !v19)
      goto LABEL_38;
    if (v18)
    {
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
    }
    v5 = 0;
    if (!v13 || (v12 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_37:
    operator delete(v11);
LABEL_38:
    v5 = 0;
    goto LABEL_39;
  }
  v5 = v8;
  *v8 = off_24C3F2180;
  sub_20AED5300((uint64_t)(v8 + 2), v7);
  *v5 = &off_24C3F2BA0;
  v5[2] = &unk_24C3F2BF0;
  *((_OWORD *)v5 + 35) = 0u;
LABEL_39:
  if (v57)
  {
    sub_20AED5474((uint64_t)&v47);
  }
  else if (v56)
  {
    if (v55)
    {
      if (v54 < 0)
        operator delete(v53);
      if (v52 < 0)
        operator delete(v51);
    }
    if (v50 && v49 < 0)
      operator delete((void *)v48);
  }
  if (!v6)
    v5 = 0;
  if (v34)
  {
    if (v33)
    {
      if (v32 && v31 < 0)
        operator delete(v30);
      if (v29 && v28 < 0)
        operator delete(v27);
      if (v26 && v25 < 0)
        operator delete(v24);
    }
    sub_20AED30E0((uint64_t)v23);
  }
  return v5;
}

void sub_20AED7F2C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AED7F34);
  _Unwind_Resume(a1);
}

void sub_20AED7F44(_Unwind_Exception *a1, int a2)
{
  const std::logic_error *exception_ptr;
  void *v5;
  std::string *p_what;
  std::string *v7;
  std::logic_error v8;
  char v9;
  char v10;
  __int128 v11;
  __int128 v12[6];
  std::__fs::filesystem::filesystem_error v13[3];
  CFErrorRef **v14[102];
  __int128 v15;
  _BYTE v16[104];
  char v17;

  if (a2)
  {
    sub_20AED1998((uint64_t)&STACK[0x2F0]);
    if (a2 == 3)
    {
      exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
      std::logic_error::logic_error(&v8, exception_ptr);
      v8.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_begin_catch(a1);
      v7 = (std::string *)std::logic_error::what(&v8);
      sub_20AED4C84(v13, (const char **)&v7);
      sub_20B099E24((__int128 *)v13, (uint64_t)&v11);
      v15 = v11;
      sub_20AECEBD0(v16, v12);
      v17 = 1;
      sub_20AEDB09C(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      sub_20AECCE40((uint64_t)&v11);
      if (LOBYTE(v13[0].__ec_.__cat_))
      {
        if (*((char *)&v13[0].__ec_.__val_ + 7) < 0)
          operator delete(v13[0].__vftable);
      }
      MEMORY[0x20BD35020](&v8);
      __cxa_end_catch();
    }
    else if (a2 == 2)
    {
      v5 = __cxa_get_exception_ptr(a1);
      sub_20AED4C1C(&v13[0], (uint64_t)v5);
      __cxa_begin_catch(a1);
      p_what = &v13[0].__storage_.__ptr_->__what_;
      if (SHIBYTE(v13[0].__storage_.__ptr_->__what_.__r_.__value_.__r.__words[2]) < 0)
        p_what = (std::string *)p_what->__r_.__value_.__r.__words[0];
      v7 = p_what;
      sub_20AED4C84(&v8, (const char **)&v7);
      sub_20B09A738((__int128 *)&v8, (uint64_t)&v11);
      v15 = v11;
      sub_20AECEBD0(v16, v12);
      v17 = 1;
      sub_20AEDB09C(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      sub_20AECCE40((uint64_t)&v11);
      if (v10 && v9 < 0)
        operator delete(v8.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error(v13);
      __cxa_end_catch();
    }
    else
    {
      __cxa_begin_catch(a1);
      LOBYTE(v15) = 0;
      v17 = 0;
      sub_20AEDB09C(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      __cxa_end_catch();
    }
    JUMPOUT(0x20AED7E2CLL);
  }
  _Unwind_Resume(a1);
}

void sub_20AED7F5C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AED7F68);
  _Unwind_Resume(a1);
}

void sub_20AED8110(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20AED8118);
  sub_20AEC01C0(a1);
}

BOOL sub_20AED8128(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  unsigned __int8 v6;
  int v8;
  size_t v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15[2];
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  void *v22[2];
  uint64_t v23;
  uint64_t v24;
  void *v25[2];
  uint64_t v26;
  char v27;
  char v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  uint64_t v37;
  char v38;
  char v39;
  char v40;

  if (a2)
    return a2 == 0;
  v6 = atomic_load((unsigned __int8 *)&qword_254637480);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254637480))
  {
    sub_20AEDAD64();
    v8 = byte_2546374FF;
    if (byte_2546374FF >= 0)
      v9 = byte_2546374FF;
    else
      v9 = qword_2546374F0;
    v10 = v9 + 1;
    if (v9 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v10 >= 0x17)
    {
      v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v12 = v10 | 7;
      v13 = v12 + 1;
      v11 = (__int128 *)operator new(v12 + 1);
      *((_QWORD *)&xmmword_2546374D0 + 1) = v9 + 1;
      unk_2546374E0 = v13 | 0x8000000000000000;
      *(_QWORD *)&xmmword_2546374D0 = v11;
    }
    else
    {
      unk_2546374E0 = 0;
      xmmword_2546374D0 = 0uLL;
      v11 = &xmmword_2546374D0;
      byte_2546374E7 = v9 + 1;
      if (!v9)
      {
LABEL_50:
        *(_WORD *)((char *)v11 + v9) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546374D0, &dword_20AEBB000);
        __cxa_guard_release(&qword_254637480);
        goto LABEL_3;
      }
    }
    if (v8 >= 0)
      v14 = &qword_2546374E8;
    else
      v14 = (uint64_t *)qword_2546374E8;
    memmove(v11, v14, v9);
    goto LABEL_50;
  }
LABEL_3:
  if (byte_2546374E7 < 0)
  {
    sub_20AEC60F4(v15, (void *)xmmword_2546374D0, *((unint64_t *)&xmmword_2546374D0 + 1));
  }
  else
  {
    *(_OWORD *)v15 = xmmword_2546374D0;
    v16 = unk_2546374E0;
  }
  v17 = 1;
  sub_20AECCECC(a1, (uint64_t)v15, (uint64_t)&v18);
  v29 = v18;
  LOBYTE(v30) = 0;
  v39 = 0;
  if (v28)
  {
    v32 = 0;
    if (v21)
    {
      v30 = v19;
      v31 = v20;
      v20 = 0;
      v19 = 0uLL;
      v32 = 1;
    }
    LOBYTE(v33) = 0;
    v38 = 0;
    if (v27)
    {
      v34 = v23;
      v33 = *(_OWORD *)v22;
      v22[0] = 0;
      v22[1] = 0;
      v35 = v24;
      *(_OWORD *)__p = *(_OWORD *)v25;
      v37 = v26;
      v23 = 0;
      v25[0] = 0;
      v25[1] = 0;
      v26 = 0;
      v38 = 1;
    }
    v39 = 1;
  }
  v40 = 0;
  sub_20AECB410(&v29, a3);
  if (!v40 && v39)
  {
    if (v38)
    {
      if (SHIBYTE(v37) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34) < 0)
        operator delete((void *)v33);
    }
    if (v32 && SHIBYTE(v31) < 0)
      operator delete((void *)v30);
  }
  if (v28)
  {
    if (v27)
    {
      if (SHIBYTE(v26) < 0)
        operator delete(v25[0]);
      if (SHIBYTE(v23) < 0)
        operator delete(v22[0]);
    }
    if (v21 && SHIBYTE(v20) < 0)
      operator delete((void *)v19);
  }
  if (v17 && SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  return a2 == 0;
}

void sub_20AED8450(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637480);
  _Unwind_Resume(a1);
}

void sub_20AED8468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECD704((uint64_t)&a32);
  sub_20AECCE40((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *VZDataGetCamera(uint64_t a1, CFErrorRef *a2)
{
  char *v4;
  int v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  char v19;
  char v20;
  char v21;
  _BYTE v22[24];
  char v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  char v29;
  char v30;
  unsigned __int8 v31;
  CFErrorRef **v32;
  CFErrorRef *v33;

  if (sub_20AED21B4((uint64_t)"VZDataGetCamera", a1, a2))
    return 0;
  v4 = *(char **)(a1 + 568);
  if (v4)
    return v4;
  v32 = &v33;
  v33 = a2;
  sub_20AF54668(a1 + 32, (uint64_t)v22);
  v5 = v31;
  if (!v31)
  {
    v11 = *(_OWORD *)v22;
    sub_20AECEBD0(&v12, (__int128 *)&v22[16]);
    v21 = 1;
    sub_20AEDB434(&v32, (uint64_t)&v11);
    if (v21 && v20)
    {
      if (v19)
      {
        if (v18 < 0)
          operator delete(__p);
        if (v16 < 0)
          operator delete(v15);
      }
      if (v14 && v13 < 0)
        operator delete(v12);
    }
    goto LABEL_28;
  }
  sub_20AEDB5EC((uint64_t)v22);
  v6 = (char *)operator new(0x30uLL, MEMORY[0x24BEDB6B8]);
  if (v6)
  {
    v4 = v6;
    *(_OWORD *)(v6 + 24) = *(_OWORD *)&v22[8];
    *(_QWORD *)&v22[8] = 0;
    *(_QWORD *)&v22[16] = 0;
    *((_DWORD *)v6 + 10) = 1;
    *(_QWORD *)v6 = &off_24C3F2550;
    *((_QWORD *)v6 + 1) = &unk_24C3F25A0;
    *((_QWORD *)v6 + 2) = &off_24C41D808;
  }
  else
  {
    LOBYTE(v11) = 0;
    v21 = 0;
    sub_20AEDB434(&v32, (uint64_t)&v11);
    if (v21 && v20)
    {
      if (v19)
      {
        if (v18 < 0)
          operator delete(__p);
        if (v16 < 0)
          operator delete(v15);
      }
      v4 = 0;
      if (!v14 || (v13 & 0x80000000) == 0)
        goto LABEL_28;
      operator delete(v12);
    }
    v4 = 0;
  }
LABEL_28:
  if (v31)
  {
    *(_QWORD *)v22 = &off_24C41D808;
    v7 = *(std::__shared_weak_count **)&v22[16];
    if (*(_QWORD *)&v22[16])
    {
      v8 = (unint64_t *)(*(_QWORD *)&v22[16] + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else if (v30)
  {
    if (v29)
    {
      if (v28 < 0)
        operator delete(v27);
      if (v26 < 0)
        operator delete(v25);
    }
    if (v24 && v23 < 0)
      operator delete(*(void **)&v22[16]);
  }
  if (!v5)
    v4 = 0;
  *(_QWORD *)(a1 + 568) = v4;
  return v4;
}

void sub_20AED8710(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a68;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  const std::logic_error *exception_ptr;
  const char *v76;
  size_t v77;
  size_t v78;
  void **p_dst;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  const char *v85;
  size_t v86;
  const char *v87;
  std::logic_error_vtbl *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (*(_BYTE *)(v69 - 88))
  {
    *(_QWORD *)(v69 - 208) = v68;
    v72 = *(std::__shared_weak_count **)(v69 - 192);
    if (v72)
    {
      p_shared_owners = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(p_shared_owners);
      while (__stlxr(v74 - 1, p_shared_owners));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
  }
  else if (*(_BYTE *)(v69 - 96))
  {
    if (*(_BYTE *)(v69 - 104))
    {
      if (*(char *)(v69 - 105) < 0)
        operator delete(*(void **)(v69 - 128));
      if (*(char *)(v69 - 137) < 0)
        operator delete(*(void **)(v69 - 160));
    }
    if (*(_BYTE *)(v69 - 168) && *(char *)(v69 - 169) < 0)
      operator delete(*(void **)(v69 - 192));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v76 = std::logic_error::what(&a10);
    v77 = strlen(v76);
    if (v77 <= 0x7FFFFFFFFFFFFFF7)
    {
      v78 = v77;
      if (v77 >= 0x17)
      {
        v89 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v77 | 7) != 0x17)
          v89 = v77 | 7;
        v90 = v89 + 1;
        p_dst = (void **)operator new(v89 + 1);
        __dst_8 = v78;
        *(_QWORD *)&a38 = v90 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v77;
        p_dst = (void **)&__dst;
        if (!v77)
        {
LABEL_56:
          *((_BYTE *)p_dst + v78) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a68 = a13;
          sub_20AECEBD0((_BYTE *)(v69 - 192), &a14);
          *(_BYTE *)(v69 - 88) = 1;
          sub_20AEDB434((CFErrorRef ***)(v69 - 80), v69 - 208);
          if (*(_BYTE *)(v69 - 88) && *(_BYTE *)(v69 - 96))
          {
            if (*(_BYTE *)(v69 - 104))
            {
              if (*(char *)(v69 - 105) < 0)
                operator delete(*(void **)(v69 - 128));
              if (*(char *)(v69 - 137) < 0)
                operator delete(*(void **)(v69 - 160));
            }
            if (*(_BYTE *)(v69 - 168) && *(char *)(v69 - 169) < 0)
              operator delete(*(void **)(v69 - 192));
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_107;
        }
      }
      memmove(p_dst, v76, v78);
      goto LABEL_56;
    }
LABEL_106:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v69 - 208) = 0;
    *(_BYTE *)(v69 - 88) = 0;
    sub_20AEDB434((CFErrorRef ***)(v69 - 80), v69 - 208);
    if (*(_BYTE *)(v69 - 88) && *(_BYTE *)(v69 - 96))
    {
      if (*(_BYTE *)(v69 - 104))
      {
        if (*(char *)(v69 - 105) < 0)
          operator delete(*(void **)(v69 - 128));
        if (*(char *)(v69 - 137) < 0)
          operator delete(*(void **)(v69 - 160));
      }
      if (*(_BYTE *)(v69 - 168) && *(char *)(v69 - 169) < 0)
        operator delete(*(void **)(v69 - 192));
    }
    __cxa_end_catch();
LABEL_107:
    JUMPOUT(0x20AED86E8);
  }
  v80 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v80);
  a38 = *((_OWORD *)v80 + 1);
  v82 = *((_QWORD *)v80 + 4);
  v81 = *((_QWORD *)v80 + 5);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  a39 = v82;
  a40 = v81;
  if (v81)
  {
    v83 = (unint64_t *)(v81 + 8);
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  __cxa_begin_catch(a1);
  v85 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v85 = *(const char **)v85;
  v86 = strlen(v85);
  if (v86 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_106;
  v87 = (const char *)v86;
  if (v86 >= 0x17)
  {
    v91 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v86 | 7) != 0x17)
      v91 = v86 | 7;
    v92 = v91 + 1;
    v88 = (std::logic_error_vtbl *)operator new(v91 + 1);
    a10.__imp_.__imp_ = v87;
    a11 = v92 | 0x8000000000000000;
    a10.__vftable = v88;
  }
  else
  {
    HIBYTE(a11) = v86;
    v88 = (std::logic_error_vtbl *)&a10;
    if (!v86)
    {
LABEL_83:
      v87[(_QWORD)v88] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a68 = a13;
      sub_20AECEBD0((_BYTE *)(v69 - 192), &a14);
      *(_BYTE *)(v69 - 88) = 1;
      sub_20AEDB434((CFErrorRef ***)(v69 - 80), v69 - 208);
      if (*(_BYTE *)(v69 - 88) && *(_BYTE *)(v69 - 96))
      {
        if (*(_BYTE *)(v69 - 104))
        {
          if (*(char *)(v69 - 105) < 0)
            operator delete(*(void **)(v69 - 128));
          if (*(char *)(v69 - 137) < 0)
            operator delete(*(void **)(v69 - 160));
        }
        if (*(_BYTE *)(v69 - 168) && *(char *)(v69 - 169) < 0)
          operator delete(*(void **)(v69 - 192));
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_107;
    }
  }
  memmove(v88, v85, (size_t)v87);
  goto LABEL_83;
}

_BYTE *VZCameraCreate(char a1)
{
  _BYTE *v1;
  int v2;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE v8[153];
  __int128 v9;
  void *v10;
  char v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  char v18;
  char v19;
  _BYTE v20[24];
  char v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  char v27;
  char v28;
  unsigned __int8 v29;
  CFErrorRef **v30;
  uint64_t v31;

  v8[0] = a1;
  v30 = (CFErrorRef **)&v31;
  v31 = 0;
  v1 = v20;
  sub_20AF531F4(v8, (uint64_t)v20);
  v2 = v29;
  if (v29)
  {
    sub_20AEDB5EC((uint64_t)v20);
    v3 = (char *)operator new(0x30uLL, MEMORY[0x24BEDB6B8]);
    if (v3)
    {
      v1 = v3;
      *(_OWORD *)(v3 + 24) = *(_OWORD *)&v20[8];
      *(_QWORD *)&v20[8] = 0;
      *(_QWORD *)&v20[16] = 0;
      *((_DWORD *)v3 + 10) = 1;
      *(_QWORD *)v3 = &off_24C3F2550;
      *((_QWORD *)v3 + 1) = &unk_24C3F25A0;
      *((_QWORD *)v3 + 2) = &off_24C41D808;
      goto LABEL_25;
    }
    LOBYTE(v9) = 0;
    v19 = 0;
    sub_20AEDB6AC(&v30, (uint64_t)&v9);
    if (!v19 || !v18)
      goto LABEL_24;
    if (v17)
    {
      if (v16 < 0)
        operator delete(v15);
      if (v14 < 0)
        operator delete(v13);
    }
    v1 = 0;
    if (v12 && v11 < 0)
    {
      operator delete(v10);
LABEL_24:
      v1 = 0;
    }
  }
  else
  {
    v9 = *(_OWORD *)v20;
    sub_20AECEBD0(&v10, (__int128 *)&v20[16]);
    v19 = 1;
    sub_20AEDB6AC(&v30, (uint64_t)&v9);
    if (v19 && v18)
    {
      if (v17)
      {
        if (v16 < 0)
          operator delete(v15);
        if (v14 < 0)
          operator delete(v13);
      }
      if (v12 && v11 < 0)
        operator delete(v10);
    }
  }
LABEL_25:
  if (v29)
  {
    *(_QWORD *)v20 = &off_24C41D808;
    v4 = *(std::__shared_weak_count **)&v20[16];
    if (*(_QWORD *)&v20[16])
    {
      v5 = (unint64_t *)(*(_QWORD *)&v20[16] + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else if (v28)
  {
    if (v27)
    {
      if (v26 < 0)
        operator delete(v25);
      if (v24 < 0)
        operator delete(v23);
    }
    if (v22 && v21 < 0)
      operator delete(*(void **)&v20[16]);
  }
  if (!v2)
    return 0;
  return v1;
}

void sub_20AED8E8C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,std::runtime_error a38,std::runtime_error_vtbl *a39,const char *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a68;
  std::__shared_weak_count *a69;
  void *a71;
  void *a72;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  const std::logic_error *exception_ptr;
  const char *v80;
  size_t v81;
  size_t v82;
  void **p_dst;
  const std::runtime_error *v84;
  const char *imp;
  unint64_t *v86;
  unint64_t v87;
  const char *v88;
  size_t v89;
  const char *v90;
  std::logic_error_vtbl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(a57);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (*(_BYTE *)(v73 - 72))
  {
    *(_QWORD *)&a68 = v72;
    v76 = a69;
    if (a69)
    {
      p_shared_owners = (unint64_t *)&a69->__shared_owners_;
      do
        v78 = __ldaxr(p_shared_owners);
      while (__stlxr(v78 - 1, p_shared_owners));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
  }
  else if (*(_BYTE *)(v73 - 80))
  {
    if (*(_BYTE *)(v73 - 88))
    {
      if (*(char *)(v73 - 89) < 0)
        operator delete(a72);
      if (*(char *)(v73 - 121) < 0)
        operator delete(a71);
    }
    if (*(_BYTE *)(v73 - 152) && *(char *)(v73 - 153) < 0)
      operator delete(a69);
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v80 = std::logic_error::what(&a10);
    v81 = strlen(v80);
    if (v81 <= 0x7FFFFFFFFFFFFFF7)
    {
      v82 = v81;
      if (v81 >= 0x17)
      {
        v92 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v81 | 7) != 0x17)
          v92 = v81 | 7;
        v93 = v92 + 1;
        p_dst = (void **)operator new(v92 + 1);
        __dst_8 = v82;
        a38.__vftable = (std::runtime_error_vtbl *)(v93 | 0x8000000000000000);
        __dst = p_dst;
      }
      else
      {
        HIBYTE(a38.__vftable) = v81;
        p_dst = (void **)&__dst;
        if (!v81)
        {
LABEL_56:
          *((_BYTE *)p_dst + v82) = 0;
          LOBYTE(a38.__imp_.__imp_) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a68 = a13;
          sub_20AECEBD0((_BYTE *)(v73 - 176), &a14);
          *(_BYTE *)(v73 - 72) = 1;
          sub_20AEDB6AC((CFErrorRef ***)(v73 - 64), v73 - 192);
          if (*(_BYTE *)(v73 - 72) && *(_BYTE *)(v73 - 80))
          {
            if (*(_BYTE *)(v73 - 88))
            {
              if (*(char *)(v73 - 89) < 0)
                operator delete(a72);
              if (*(char *)(v73 - 121) < 0)
                operator delete(a71);
            }
            if (*(_BYTE *)(v73 - 152) && *(char *)(v73 - 153) < 0)
              operator delete(a69);
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(__p);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (LOBYTE(a38.__imp_.__imp_))
          {
            if (SHIBYTE(a38.__vftable) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_107;
        }
      }
      memmove(p_dst, v80, v82);
      goto LABEL_56;
    }
LABEL_106:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v73 - 192) = 0;
    *(_BYTE *)(v73 - 72) = 0;
    sub_20AEDB6AC((CFErrorRef ***)(v73 - 64), v73 - 192);
    if (*(_BYTE *)(v73 - 72) && *(_BYTE *)(v73 - 80))
    {
      if (*(_BYTE *)(v73 - 88))
      {
        if (*(char *)(v73 - 89) < 0)
          operator delete(a72);
        if (*(char *)(v73 - 121) < 0)
          operator delete(a71);
      }
      if (*(_BYTE *)(v73 - 152) && *(char *)(v73 - 153) < 0)
        operator delete(a69);
    }
    __cxa_end_catch();
LABEL_107:
    JUMPOUT(0x20AED8E6CLL);
  }
  v84 = (const std::runtime_error *)__cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, v84);
  a38 = v84[1];
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  imp = v84[2].__imp_.__imp_;
  a39 = v84[2].__vftable;
  a40 = imp;
  if (imp)
  {
    v86 = (unint64_t *)(imp + 8);
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
  }
  __cxa_begin_catch(a1);
  v88 = (const char *)&a39[2];
  if (SHIBYTE(a39[2].what) < 0)
    v88 = *(const char **)v88;
  v89 = strlen(v88);
  if (v89 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_106;
  v90 = (const char *)v89;
  if (v89 >= 0x17)
  {
    v94 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v89 | 7) != 0x17)
      v94 = v89 | 7;
    v95 = v94 + 1;
    v91 = (std::logic_error_vtbl *)operator new(v94 + 1);
    a10.__imp_.__imp_ = v90;
    a11 = v95 | 0x8000000000000000;
    a10.__vftable = v91;
  }
  else
  {
    HIBYTE(a11) = v89;
    v91 = (std::logic_error_vtbl *)&a10;
    if (!v89)
    {
LABEL_83:
      v90[(_QWORD)v91] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a68 = a13;
      sub_20AECEBD0((_BYTE *)(v73 - 176), &a14);
      *(_BYTE *)(v73 - 72) = 1;
      sub_20AEDB6AC((CFErrorRef ***)(v73 - 64), v73 - 192);
      if (*(_BYTE *)(v73 - 72) && *(_BYTE *)(v73 - 80))
      {
        if (*(_BYTE *)(v73 - 88))
        {
          if (*(char *)(v73 - 89) < 0)
            operator delete(a72);
          if (*(char *)(v73 - 121) < 0)
            operator delete(a71);
        }
        if (*(_BYTE *)(v73 - 152) && *(char *)(v73 - 153) < 0)
          operator delete(a69);
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(__p);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_107;
    }
  }
  memmove(v91, v88, (size_t)v90);
  goto LABEL_83;
}

uint64_t VZCameraSetPinholeLensParametersF(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v10;
  char v12[16];
  void *v13;
  char v14;
  char v15;
  void *v16;
  char v17;
  void *__p;
  char v19;
  char v20;
  char v21;
  char v22;

  if (sub_20AED94F0((uint64_t)"VZCameraSetPinholeLensParametersF", a1))
    return 0;
  sub_20AF4EB48(a1 + 16, (uint64_t)v12, a2, a3, a4, a5);
  v10 = sub_20AED98A0((uint64_t)"VZCameraSetPinholeLensParametersF", v12, 0, 0);
  if (!v22 && v21)
  {
    if (v20)
    {
      if (v19 < 0)
        operator delete(__p);
      if (v17 < 0)
        operator delete(v16);
    }
    if (v15 && v14 < 0)
      operator delete(v13);
  }
  return v10;
}

void sub_20AED94DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20AED94F0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v7;
  size_t v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  char v37;
  char v38;
  char v39;

  if (a2)
    return a2 == 0;
  v4 = atomic_load((unsigned __int8 *)&qword_2546374C8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546374C8))
  {
    sub_20AEDAEE4();
    v7 = byte_254637517;
    if (byte_254637517 >= 0)
      v8 = byte_254637517;
    else
      v8 = *((_QWORD *)&xmmword_254637500 + 1);
    v9 = v8 + 1;
    if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v9 >= 0x17)
    {
      v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v11 = v9 | 7;
      v12 = v11 + 1;
      v10 = (__int128 *)operator new(v11 + 1);
      *((_QWORD *)&xmmword_2546375A8 + 1) = v8 + 1;
      unk_2546375B8 = v12 | 0x8000000000000000;
      *(_QWORD *)&xmmword_2546375A8 = v10;
    }
    else
    {
      unk_2546375B8 = 0;
      xmmword_2546375A8 = 0uLL;
      v10 = &xmmword_2546375A8;
      byte_2546375BF = v8 + 1;
      if (!v8)
      {
LABEL_53:
        *(_WORD *)((char *)v10 + v8) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546375A8, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546374C8);
        goto LABEL_3;
      }
    }
    if (v7 >= 0)
      v13 = &xmmword_254637500;
    else
      v13 = (__int128 *)xmmword_254637500;
    memmove(v10, v13, v8);
    goto LABEL_53;
  }
LABEL_3:
  if (byte_2546375BF < 0)
  {
    sub_20AEC60F4(v14, (void *)xmmword_2546375A8, *((unint64_t *)&xmmword_2546375A8 + 1));
  }
  else
  {
    *(_OWORD *)v14 = xmmword_2546375A8;
    v15 = unk_2546375B8;
  }
  v16 = 1;
  sub_20AECCECC(a1, (uint64_t)v14, (uint64_t)&v17);
  v28 = v17;
  LOBYTE(v29) = 0;
  v38 = 0;
  if (v27)
  {
    v31 = 0;
    if (v20)
    {
      v29 = v18;
      v30 = v19;
      v19 = 0;
      v18 = 0uLL;
      v31 = 1;
    }
    LOBYTE(v32) = 0;
    v37 = 0;
    if (v26)
    {
      v33 = v22;
      v32 = *(_OWORD *)v21;
      v21[0] = 0;
      v21[1] = 0;
      v34 = v23;
      *(_OWORD *)__p = *(_OWORD *)v24;
      v36 = v25;
      v22 = 0;
      v24[0] = 0;
      v24[1] = 0;
      v25 = 0;
      v37 = 1;
    }
    v38 = 1;
  }
  v39 = 0;
  v5 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v28);
  if (!v39 && v38)
  {
    if (v37)
    {
      if (SHIBYTE(v36) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
    }
    if (v31 && SHIBYTE(v30) < 0)
      operator delete((void *)v29);
  }
  if (v27)
  {
    if (v26)
    {
      if (SHIBYTE(v25) < 0)
        operator delete(v24[0]);
      if (SHIBYTE(v22) < 0)
        operator delete(v21[0]);
    }
    if (v20 && SHIBYTE(v19) < 0)
      operator delete((void *)v18);
  }
  if (v16 && SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  return a2 == 0;
}

void sub_20AED9864(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546374C8);
  _Unwind_Resume(a1);
}

void sub_20AED987C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AED98A0(uint64_t a1, char *a2, uint64_t a3, CFErrorRef *a4)
{
  uint64_t v4;
  void *v8;
  char v9;
  __int128 v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  char v18;
  char v19;
  uint64_t v20;

  v20 = a1;
  if (a2[120])
    return 1;
  v4 = a3;
  sub_20AEDBA04("in function ", (const char *)&v20);
  sub_20B529470(a2, &v8, (uint64_t)&v10);
  sub_20AECB410(&v10, a4);
  if (v19)
  {
    if (v18)
    {
      if (v17 < 0)
        operator delete(__p);
      if (v15 < 0)
        operator delete(v14);
    }
    if (v13)
    {
      if (v12 < 0)
        operator delete(v11);
    }
  }
  if ((v9 & 0x80000000) == 0)
    return v4;
  operator delete(v8);
  return v4;
}

void sub_20AED9988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_20AECCE40((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t VZCameraSetPinholeLensParametersD(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v10;
  char v12[16];
  void *v13;
  char v14;
  char v15;
  void *v16;
  char v17;
  void *__p;
  char v19;
  char v20;
  char v21;
  char v22;

  if (sub_20AED94F0((uint64_t)"VZCameraSetPinholeLensParametersD", a1))
    return 0;
  sub_20AF503EC(a1 + 16, (uint64_t)v12, a2, a3, a4, a5);
  v10 = sub_20AED98A0((uint64_t)"VZCameraSetPinholeLensParametersD", v12, 0, 0);
  if (!v22 && v21)
  {
    if (v20)
    {
      if (v19 < 0)
        operator delete(__p);
      if (v17 < 0)
        operator delete(v16);
    }
    if (v15 && v14 < 0)
      operator delete(v13);
  }
  return v10;
}

void sub_20AED9AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t VZCameraSetHeikkilaLensParametersF(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  uint64_t v26;
  char v28[16];
  void *v29;
  char v30;
  char v31;
  void *v32;
  char v33;
  void *__p;
  char v35;
  char v36;
  char v37;
  char v38;

  if (sub_20AED94F0((uint64_t)"VZCameraSetHeikkilaLensParametersF", a1))
    return 0;
  sub_20AF5051C(a1 + 16, (uint64_t)v28, a2, a3, a4, a5, a6, a7, a8, a9, a17);
  v26 = sub_20AED98A0((uint64_t)"VZCameraSetHeikkilaLensParametersF", v28, 0, 0);
  if (!v38 && v37)
  {
    if (v36)
    {
      if (v35 < 0)
        operator delete(__p);
      if (v33 < 0)
        operator delete(v32);
    }
    if (v31 && v30 < 0)
      operator delete(v29);
  }
  return v26;
}

void sub_20AED9BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECD704((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t VZCameraSetHeikkilaLensParametersD(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v26;
  char v28[16];
  void *v29;
  char v30;
  char v31;
  void *v32;
  char v33;
  void *__p;
  char v35;
  char v36;
  char v37;
  char v38;

  if (sub_20AED94F0((uint64_t)"VZCameraSetHeikkilaLensParametersD", a1))
    return 0;
  sub_20AF516A8(a1 + 16, (uint64_t)v28, a2, a3, a4, a5, a6, a7, a8, a9, a17);
  v26 = sub_20AED98A0((uint64_t)"VZCameraSetHeikkilaLensParametersD", v28, 0, 0);
  if (!v38 && v37)
  {
    if (v36)
    {
      if (v35 < 0)
        operator delete(__p);
      if (v33 < 0)
        operator delete(v32);
    }
    if (v31 && v30 < 0)
      operator delete(v29);
  }
  return v26;
}

void sub_20AED9D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECD704((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL VZCameraSetImageSize(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL4 v6;

  v6 = sub_20AED94F0((uint64_t)"VZCameraSetImageSize", a1);
  if (!v6)
    sub_20AF535F0(a1 + 16, a2, a3);
  return !v6;
}

uint64_t VZCameraGetLensModelType(uint64_t a1)
{
  if (sub_20AED8128((uint64_t)"VZCameraGetLensModelType", a1, 0))
    return 255;
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
}

uint64_t VZCameraGetValueType(uint64_t a1)
{
  if (sub_20AED8128((uint64_t)"VZCameraGetValueType", a1, 0))
    return 255;
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t VZCameraGetPixelOrigin(uint64_t a1)
{
  if (sub_20AED8128((uint64_t)"VZCameraGetPixelOrigin", a1, 0))
    return 255;
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

uint64_t VZCameraGetFocalLengthF(uint64_t a1)
{
  uint64_t v2;
  char v4[16];
  void *v5;
  char v6;
  char v7;
  void *v8;
  char v9;
  void *__p;
  char v11;
  char v12;
  char v13;
  char v14;

  v2 = 0;
  if (sub_20AED8128((uint64_t)"VZCameraGetFocalLengthF", a1, 0))
    return v2;
  sub_20AF51888(a1 + 16, (uint64_t)v4);
  v2 = sub_20AED9F54((uint64_t)"VZCameraGetFocalLengthF", v4);
  if (v14 || !v13)
    return v2;
  if (v12)
  {
    if (v11 < 0)
      operator delete(__p);
    if (v9 < 0)
      operator delete(v8);
  }
  if (!v7 || (v6 & 0x80000000) == 0)
    return v2;
  operator delete(v5);
  return v2;
}

void sub_20AED9F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AED9F54(uint64_t a1, char *a2)
{
  unsigned __int8 v4;
  void *v5;
  char v6;
  __int128 v7;
  void *v8;
  char v9;
  char v10;
  void *v11;
  char v12;
  void *__p;
  char v14;
  char v15;
  char v16;
  uint64_t v17;

  v17 = a1;
  if (a2[120])
    return *(_QWORD *)a2;
  sub_20AEDBA04("in function ", (const char *)&v17);
  sub_20B529470(a2, &v5, (uint64_t)&v7);
  v4 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v7);
  if (v16)
  {
    if (v15)
    {
      if (v14 < 0)
        operator delete(__p);
      if (v12 < 0)
        operator delete(v11);
    }
    if (v10 && v9 < 0)
      operator delete(v8);
  }
  if (v6 < 0)
    operator delete(v5);
  return 0;
}

void sub_20AEDA088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t VZCameraGetFocalLengthD(uint64_t a1)
{
  uint64_t v2;
  char v4[16];
  void *v5;
  char v6;
  char v7;
  void *v8;
  char v9;
  void *__p;
  char v11;
  char v12;
  char v13;
  char v14;

  v2 = 0;
  if (sub_20AED8128((uint64_t)"VZCameraGetFocalLengthD", a1, 0))
    return v2;
  sub_20AF51BE0(a1 + 16, (uint64_t)v4);
  v2 = sub_20AEDA180((uint64_t)"VZCameraGetFocalLengthD", v4);
  if (v14 || !v13)
    return v2;
  if (v12)
  {
    if (v11 < 0)
      operator delete(__p);
    if (v9 < 0)
      operator delete(v8);
  }
  if (!v7 || (v6 & 0x80000000) == 0)
    return v2;
  operator delete(v5);
  return v2;
}

void sub_20AEDA16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEDA180(uint64_t a1, char *a2)
{
  unsigned __int8 v4;
  void *v5;
  char v6;
  __int128 v7;
  void *v8;
  char v9;
  char v10;
  void *v11;
  char v12;
  void *__p;
  char v14;
  char v15;
  char v16;
  uint64_t v17;

  v17 = a1;
  if (a2[120])
    return *(_QWORD *)a2;
  sub_20AEDBA04("in function ", (const char *)&v17);
  sub_20B529470(a2, &v5, (uint64_t)&v7);
  v4 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v7);
  if (v16)
  {
    if (v15)
    {
      if (v14 < 0)
        operator delete(__p);
      if (v12 < 0)
        operator delete(v11);
    }
    if (v10 && v9 < 0)
      operator delete(v8);
  }
  if (v6 < 0)
    operator delete(v5);
  return 0;
}

void sub_20AEDA2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t VZCameraGetPrincipalPointF(uint64_t a1)
{
  uint64_t v2;
  char v4[16];
  void *v5;
  char v6;
  char v7;
  void *v8;
  char v9;
  void *__p;
  char v11;
  char v12;
  char v13;
  char v14;

  v2 = 0;
  if (sub_20AED8128((uint64_t)"VZCameraGetPrincipalPointF", a1, 0))
    return v2;
  sub_20AF51F38(a1 + 16, (uint64_t)v4);
  v2 = sub_20AED9F54((uint64_t)"VZCameraGetPrincipalPointF", v4);
  if (v14 || !v13)
    return v2;
  if (v12)
  {
    if (v11 < 0)
      operator delete(__p);
    if (v9 < 0)
      operator delete(v8);
  }
  if (!v7 || (v6 & 0x80000000) == 0)
    return v2;
  operator delete(v5);
  return v2;
}

void sub_20AEDA398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t VZCameraGetPrincipalPointD(uint64_t a1)
{
  uint64_t v2;
  char v4[16];
  void *v5;
  char v6;
  char v7;
  void *v8;
  char v9;
  void *__p;
  char v11;
  char v12;
  char v13;
  char v14;

  v2 = 0;
  if (sub_20AED8128((uint64_t)"VZCameraGetPrincipalPointD", a1, 0))
    return v2;
  sub_20AF52290(a1 + 16, (uint64_t)v4);
  v2 = sub_20AEDA180((uint64_t)"VZCameraGetPrincipalPointD", v4);
  if (v14 || !v13)
    return v2;
  if (v12)
  {
    if (v11 < 0)
      operator delete(__p);
    if (v9 < 0)
      operator delete(v8);
  }
  if (!v7 || (v6 & 0x80000000) == 0)
    return v2;
  operator delete(v5);
  return v2;
}

void sub_20AEDA474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t VZCameraGetHeikkilaLensDistortionCoefficientsF(uint64_t a1)
{
  BOOL v2;
  uint64_t result;
  unsigned __int8 v4;
  _QWORD v5[4];
  char v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  __int128 v17;
  void *v18;
  char v19;
  char v20;
  void *v21;
  char v22;
  void *__p;
  char v24;
  char v25;
  char v26;
  const char *v27;

  v2 = sub_20AED8128((uint64_t)"VZCameraGetHeikkilaLensDistortionCoefficientsF", a1, 0);
  result = 0;
  if (!v2)
  {
    sub_20AF525E8(a1 + 16, (uint64_t)v5);
    v27 = "VZCameraGetHeikkilaLensDistortionCoefficientsF";
    if (v14)
      return v5[0];
    sub_20AEDBA04("in function ", (const char *)&v27);
    sub_20B529470((char *)v5, &v15, (uint64_t)&v17);
    v4 = atomic_load((unsigned __int8 *)&qword_254630258);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
    {
      __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
      __cxa_guard_release(&qword_254630258);
    }
    sub_20AECB50C((uint64_t)&unk_254630168, &v17);
    if (v26)
    {
      if (v25)
      {
        if (v24 < 0)
          operator delete(__p);
        if (v22 < 0)
          operator delete(v21);
      }
      if (v20 && v19 < 0)
        operator delete(v18);
    }
    if (v16 < 0)
    {
      operator delete(v15);
      if (v14)
        return 0;
    }
    else if (v14)
    {
      return 0;
    }
    if (!v13)
      return 0;
    if (v12)
    {
      if (v11 < 0)
        operator delete(v10);
      if (v9 < 0)
        operator delete(v8);
    }
    result = 0;
    if (v7)
    {
      if (v6 < 0)
      {
        operator delete((void *)v5[2]);
        return 0;
      }
    }
  }
  return result;
}

void sub_20AEDA658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    sub_20AECD704((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_20AECD704((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t VZCameraGetHeikkilaLensDistortionCoefficientsD(uint64_t a1)
{
  BOOL v2;
  uint64_t result;
  unsigned __int8 v4;
  _QWORD v5[4];
  char v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  __int128 v17;
  void *v18;
  char v19;
  char v20;
  void *v21;
  char v22;
  void *__p;
  char v24;
  char v25;
  char v26;
  const char *v27;

  v2 = sub_20AED8128((uint64_t)"VZCameraGetHeikkilaLensDistortionCoefficientsD", a1, 0);
  result = 0;
  if (!v2)
  {
    sub_20AF52CBC(a1 + 16, (uint64_t)v5);
    v27 = "VZCameraGetHeikkilaLensDistortionCoefficientsD";
    if (v14)
      return v5[0];
    sub_20AEDBA04("in function ", (const char *)&v27);
    sub_20B529470((char *)v5, &v15, (uint64_t)&v17);
    v4 = atomic_load((unsigned __int8 *)&qword_254630258);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
    {
      __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
      __cxa_guard_release(&qword_254630258);
    }
    sub_20AECB50C((uint64_t)&unk_254630168, &v17);
    if (v26)
    {
      if (v25)
      {
        if (v24 < 0)
          operator delete(__p);
        if (v22 < 0)
          operator delete(v21);
      }
      if (v20 && v19 < 0)
        operator delete(v18);
    }
    if (v16 < 0)
    {
      operator delete(v15);
      if (v14)
        return 0;
    }
    else if (v14)
    {
      return 0;
    }
    if (!v13)
      return 0;
    if (v12)
    {
      if (v11 < 0)
        operator delete(v10);
      if (v9 < 0)
        operator delete(v8);
    }
    result = 0;
    if (v7)
    {
      if (v6 < 0)
      {
        operator delete((void *)v5[2]);
        return 0;
      }
    }
  }
  return result;
}

void sub_20AEDA860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    sub_20AECD704((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_20AECD704((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t VZCameraGetImageSize(uint64_t a1)
{
  if (sub_20AED8128((uint64_t)"VZCameraGetImageSize", a1, 0))
    return 0;
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_20AEDA8E8(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 40);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AEDA900(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 40);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AEDA928()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637478);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254637478))
    return qword_254637470;
  qword_254637470 = sub_20AECB130();
  __cxa_guard_release(&qword_254637478);
  return qword_254637470;
}

void *sub_20AEDA988(uint64_t a1, void *lpsrc)
{
  void *result;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F25E8, 0);
  if (result)
    return (void *)sub_20B4488FC(a1 + 16, (uint64_t)result + 16);
  return result;
}

CFTypeRef sub_20AEDA9DC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  size_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  char v21;
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  void *__dst[2];
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  sub_20AEDAEE4();
  v26 = a1;
  v2 = operator new();
  *(_QWORD *)(v2 + 272) = 0;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  sub_20AEC0BD8(v2);
  v27 = (_QWORD *)v2;
  sub_20AF54054((_QWORD *)(v2 + 16), a1 + 16);
  v3 = *(_DWORD *)(v2 + 120);
  if ((v3 & 0x10) != 0)
  {
    v6 = *(_QWORD *)(v2 + 112);
    v7 = *(_QWORD *)(v2 + 72);
    if (v6 < v7)
    {
      *(_QWORD *)(v2 + 112) = v7;
      v6 = v7;
    }
    v8 = *(const void **)(v2 + 64);
    v4 = v6 - (_QWORD)v8;
    if (v6 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      HIBYTE(v25) = 0;
      v5 = __dst;
      goto LABEL_14;
    }
    v8 = *(const void **)(v2 + 40);
    v4 = *(_QWORD *)(v2 + 56) - (_QWORD)v8;
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v5 = (void **)operator new(v9 + 1);
    __dst[1] = (void *)v4;
    v25 = v10 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_13;
  }
  HIBYTE(v25) = v4;
  v5 = __dst;
  if (v4)
LABEL_13:
    memmove(v5, v8, v4);
LABEL_14:
  *((_BYTE *)v5 + v4) = 0;
  v11 = v27;
  if (v27)
  {
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *v27 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)((char *)v11 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    v11[3] = MEMORY[0x24BEDB848] + 16;
    v11[2] = v14;
    if (*((char *)v11 + 111) < 0)
      operator delete((void *)v11[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v11 + 16);
    MEMORY[0x20BD3583C](v11, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)&xmmword_254637500, (uint64_t)" ", &v26, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v15 = cf;
  if (cf)
    CFRetain(cf);
  v16 = v23;
  if (!v23)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if ((v21 & 0x80000000) == 0)
      return v15;
  }
  else
  {
LABEL_26:
    if ((v21 & 0x80000000) == 0)
      return v15;
  }
  operator delete(__p);
  return v15;
}

uint64_t sub_20AEDAC84(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  const void *v32[2];
  char v33;
  uint64_t v34;

  sub_20AEC147C((uint64_t)&v34);
  if (v33 < 0)
    operator delete((void *)v32[0]);
  __cxa_begin_catch(a1);
  sub_20AEDAEE4();
  sub_20AEC0D64(v32, "failed to create description");
  sub_20AECD224((std::string::size_type)&xmmword_254637500, v32, 0);
  if (v33 < 0)
    operator delete((void *)v32[0]);
  __cxa_end_catch();
  return 0;
}

uint64_t sub_20AEDAD58(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 40));
}

void sub_20AEDAD64()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254637488);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637488))
  {
    sub_20AEDAEE4();
    v1 = byte_254637517;
    if (byte_254637517 >= 0)
      v2 = byte_254637517;
    else
      v2 = *((_QWORD *)&xmmword_254637500 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_2546374F0 = v2 + 6;
      unk_2546374F8 = v6 | 0x8000000000000000;
      qword_2546374E8 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_2546374F0 = 0;
      unk_2546374F8 = 0;
      qword_2546374E8 = 0x2074736E6F63;
      byte_2546374FF = v2 + 6;
      v4 = (char *)&qword_2546374E8 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2546374E8, &dword_20AEBB000);
        __cxa_guard_release(&qword_254637488);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254637500;
    else
      v8 = (__int128 *)xmmword_254637500;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20AEDAECC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637488);
  _Unwind_Resume(a1);
}

void sub_20AEDAEE4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637490);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637490))
  {
    sub_20AEDAF9C();
    if (byte_254637547 < 0)
    {
      sub_20AEC60F4(&xmmword_254637500, (void *)xmmword_254637530, *((unint64_t *)&xmmword_254637530 + 1));
    }
    else
    {
      xmmword_254637500 = xmmword_254637530;
      unk_254637510 = unk_254637540;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637500, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637490);
  }
}

void sub_20AEDAF84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637490);
  _Unwind_Resume(a1);
}

void sub_20AEDAF9C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254637498);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637498))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZCamera]", qword_254637518);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637518, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637498);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546374A0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2546374A0))
    {
      sub_20B531658((uint64_t)qword_254637518, (uint64_t)&xmmword_254637530);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637530, &dword_20AEBB000);
      __cxa_guard_release(&qword_2546374A0);
    }
  }
}

void sub_20AEDB06C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546374A0);
  _Unwind_Resume(a1);
}

void sub_20AEDB084(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637498);
  _Unwind_Resume(a1);
}

void sub_20AEDB09C(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  __int128 *v6;
  __int128 v7;
  void **v8;
  void **v9;
  void *v10;
  int v11;
  size_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _BYTE v18[16];
  void *__p;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  char v28;
  void *v29;
  void **v30;
  __int128 __dst;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AED5104();
  v5 = atomic_load((unsigned __int8 *)&qword_2546374A8);
  if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_2546374A8))
    goto LABEL_2;
  sub_20AEDAD64();
  v11 = byte_2546374FF;
  if (byte_2546374FF >= 0)
    v12 = byte_2546374FF;
  else
    v12 = qword_2546374F0;
  v13 = v12 + 1;
  if (v12 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    v14 = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&xmmword_254637548 + 1) = v12 + 1;
    unk_254637558 = v16 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254637548 = v14;
    goto LABEL_43;
  }
  v14 = &xmmword_254637548;
  unk_254637558 = 0;
  xmmword_254637548 = 0uLL;
  byte_25463755F = v12 + 1;
  if (v12)
  {
LABEL_43:
    if (v11 >= 0)
      v17 = &qword_2546374E8;
    else
      v17 = (uint64_t *)qword_2546374E8;
    memmove(v14, v17, v12);
  }
  *(_WORD *)((char *)v14 + v12) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637548, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546374A8);
LABEL_2:
  if (byte_25463755F < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_254637548, *((unint64_t *)&xmmword_254637548 + 1));
  }
  else
  {
    __dst = xmmword_254637548;
    v32 = unk_254637558;
  }
  v6 = sub_20AED3F9C();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v33, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v34 = *((_QWORD *)v6 + 2);
    v33 = v7;
  }
  sub_20AEC7620(&v29, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v18, a2);
  sub_20AECD798(v4, (__int128 **)&v29, (uint64_t)v18, **a1);
  if (!v28 || !v27)
    goto LABEL_16;
  if (!v26)
    goto LABEL_13;
  if ((v25 & 0x80000000) == 0)
  {
    if ((v23 & 0x80000000) == 0)
      goto LABEL_13;
LABEL_30:
    operator delete(v22);
    if (!v21)
      goto LABEL_16;
    goto LABEL_14;
  }
  operator delete(v24);
  if (v23 < 0)
    goto LABEL_30;
LABEL_13:
  if (!v21)
    goto LABEL_16;
LABEL_14:
  if (v20 < 0)
    operator delete(__p);
LABEL_16:
  v8 = (void **)v29;
  if (v29)
  {
    v9 = v30;
    v10 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = v29;
    }
    v30 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v33);
  if (SHIBYTE(v32) < 0)
    goto LABEL_28;
}

void sub_20AEDB3BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546374A8);
  _Unwind_Resume(a1);
}

void sub_20AEDB3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  sub_20AECDEE0((uint64_t)&a9);
  sub_20AEC2E90(&a25);
  if (*(char *)(v25 - 97) < 0)
    operator delete(*(void **)(v25 - 120));
  if (*(char *)(v25 - 121) < 0)
  {
    operator delete(*(void **)(v25 - 144));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AEDB434(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  _BYTE v9[16];
  void *__p;
  char v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  char v18;
  char v19;
  __int128 *v20;
  __int128 *v21;
  __int128 __dst;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  sub_20AEDAEE4();
  v4 = sub_20AED6ED4();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v23 = v4[2];
    __dst = v5;
  }
  sub_20AEC7620(&v20, (uint64_t)&__dst, 1uLL);
  sub_20AECF9B0(v9, a2);
  sub_20AECD798((uint64_t *)&xmmword_254637500, &v20, (uint64_t)v9, **a1);
  if (!v19 || !v18)
    goto LABEL_12;
  if (!v17)
    goto LABEL_9;
  if ((v16 & 0x80000000) == 0)
  {
    if ((v14 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_24:
    operator delete(v13);
    if (!v12)
      goto LABEL_12;
    goto LABEL_10;
  }
  operator delete(v15);
  if (v14 < 0)
    goto LABEL_24;
LABEL_9:
  if (!v12)
    goto LABEL_12;
LABEL_10:
  if (v11 < 0)
    operator delete(__p);
LABEL_12:
  v6 = v20;
  if (v20)
  {
    v7 = v21;
    v8 = v20;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*((void **)v7 - 3));
        v7 = (__int128 *)((char *)v7 - 24);
      }
      while (v7 != v6);
      v8 = v20;
    }
    v21 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__dst);
}

void sub_20AEDB5B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECDEE0((uint64_t)va);
  sub_20AEC2E90((void **)(v2 - 72));
  if (*(char *)(v2 - 25) < 0)
    operator delete(*(void **)(v2 - 48));
  _Unwind_Resume(a1);
}

uint64_t sub_20AEDB5EC(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_20AECEBD0(v4, v1 + 1);
    sub_20AECF558((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22C0, (void (*)(void *))sub_20AECF5A8);
  }
  return result;
}

void sub_20AEDB668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCE40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AEDB67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_20AECCE40((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_20AEDB698(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20AEDB6AC(CFErrorRef ***a1, uint64_t a2)
{
  unsigned __int8 v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  _BYTE v8[16];
  void *__p;
  char v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  char v16;
  char v17;
  char v18;
  __int128 *v19;
  __int128 *v20;
  __int128 __dst;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  sub_20AEDAEE4();
  v4 = atomic_load((unsigned __int8 *)&qword_2546374B0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546374B0))
  {
    sub_20AEDB904();
    if (byte_2546375A7 < 0)
    {
      sub_20AEC60F4(&xmmword_254637560, (void *)xmmword_254637590, *((unint64_t *)&xmmword_254637590 + 1));
    }
    else
    {
      xmmword_254637560 = xmmword_254637590;
      unk_254637570 = unk_2546375A0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637560, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546374B0);
  }
  if (byte_254637577 < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_254637560, *((unint64_t *)&xmmword_254637560 + 1));
  }
  else
  {
    __dst = xmmword_254637560;
    v22 = unk_254637570;
  }
  sub_20AEC7620(&v19, (uint64_t)&__dst, 1uLL);
  sub_20AECF9B0(v8, a2);
  sub_20AECD798((uint64_t *)&xmmword_254637500, &v19, (uint64_t)v8, **a1);
  if (v18 && v17)
  {
    if (!v16)
      goto LABEL_10;
    if (v15 < 0)
    {
      operator delete(v14);
      if ((v13 & 0x80000000) == 0)
      {
LABEL_10:
        if (!v11)
          goto LABEL_13;
LABEL_11:
        if (v10 < 0)
          operator delete(__p);
        goto LABEL_13;
      }
    }
    else if ((v13 & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v12);
    if (!v11)
      goto LABEL_13;
    goto LABEL_11;
  }
LABEL_13:
  v5 = v19;
  if (v19)
  {
    v6 = v20;
    v7 = v19;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*((void **)v6 - 3));
        v6 = (__int128 *)((char *)v6 - 24);
      }
      while (v6 != v5);
      v7 = v19;
    }
    v20 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v22) < 0)
    operator delete((void *)__dst);
}

void sub_20AEDB8AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546374B0);
  _Unwind_Resume(a1);
}

void sub_20AEDB8C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECDEE0((uint64_t)va);
  sub_20AEC2E90((void **)(v2 - 88));
  if (*(char *)(v2 - 41) < 0)
    operator delete(*(void **)(v2 - 64));
  _Unwind_Resume(a1);
}

void sub_20AEDB904()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2546374B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546374B8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::PixelOrigin]", qword_254637578);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637578, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546374B8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546374C0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2546374C0))
    {
      sub_20B531658((uint64_t)qword_254637578, (uint64_t)&xmmword_254637590);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637590, &dword_20AEBB000);
      __cxa_guard_release(&qword_2546374C0);
    }
  }
}

void sub_20AEDB9D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546374C0);
  _Unwind_Resume(a1);
}

void sub_20AEDB9EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546374B8);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEDBA04(char *__s, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_20AEDBB6C(v4, __s);
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24C3F2680[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_10:
    sub_20AECFAB8();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_10;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C3F2650[v5])(&v11, v4);
LABEL_6:
  if (v5 == -1)
    sub_20AECFAB8();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C3F2668[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C3F2638[v5])(&v6, v4);
  return result;
}

void sub_20AEDBB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AEDBB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AEDBB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20AEDBB6C(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C3F2638[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t sub_20AEDBC5C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 168))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 160);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 120))
  {
    v5 = *(_QWORD **)(a1 + 112);
    if (v5 == (_QWORD *)(a1 + 88))
    {
      v6 = 4;
      v5 = (_QWORD *)(a1 + 88);
      goto LABEL_12;
    }
    if (v5)
    {
      v6 = 5;
LABEL_12:
      (*(void (**)(void))(*v5 + 8 * v6))();
    }
  }
  if (!*(_BYTE *)(a1 + 56) || (*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20AEDBD1C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 160))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 152);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 112))
  {
    v5 = *(_QWORD **)(a1 + 104);
    if (v5 == (_QWORD *)(a1 + 80))
    {
      v6 = 4;
      v5 = (_QWORD *)(a1 + 80);
    }
    else
    {
      if (!v5)
        goto LABEL_13;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
LABEL_13:
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
  }
}

void sub_20AEDBDD4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 168))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 160);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 120))
  {
    v5 = *(_QWORD **)(a1 + 112);
    if (v5 == (_QWORD *)(a1 + 88))
    {
      v6 = 4;
      v5 = (_QWORD *)(a1 + 88);
    }
    else
    {
      if (!v5)
        goto LABEL_13;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
LABEL_13:
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 39) < 0)
      operator delete(*(void **)(a1 + 16));
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AEDBE94(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 160))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 152);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 112))
  {
    v5 = *(_QWORD **)(a1 + 104);
    if (v5 == (_QWORD *)(a1 + 80))
    {
      v6 = 4;
      v5 = (_QWORD *)(a1 + 80);
    }
    else
    {
      if (!v5)
        goto LABEL_13;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
LABEL_13:
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AEDBF54(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = (std::__shared_weak_count *)a1[11];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = a1[9];
      a1[9] = 0;
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = a1[9];
  a1[9] = 0;
  if (v5)
LABEL_6:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[7];
  if (!v6)
    goto LABEL_11;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = (std::__shared_weak_count *)a1[5];
    if (!v9)
      goto LABEL_19;
  }
  else
  {
LABEL_11:
    v9 = (std::__shared_weak_count *)a1[5];
    if (!v9)
      goto LABEL_19;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_19:
  v12 = (std::__shared_weak_count *)a1[3];
  if (!v12)
    return a1;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_20AEDC098(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = (std::__shared_weak_count *)a1[10];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = a1[8];
      a1[8] = 0;
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = a1[8];
  a1[8] = 0;
  if (v5)
LABEL_6:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[6];
  if (!v6)
    goto LABEL_11;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = (std::__shared_weak_count *)a1[4];
    if (!v9)
      goto LABEL_19;
  }
  else
  {
LABEL_11:
    v9 = (std::__shared_weak_count *)a1[4];
    if (!v9)
      goto LABEL_19;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_19:
  v12 = (std::__shared_weak_count *)a1[2];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20AEDC1D4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = (std::__shared_weak_count *)a1[11];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = a1[9];
    a1[9] = 0;
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = a1[9];
    a1[9] = 0;
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[7];
      if (!v6)
        goto LABEL_11;
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        v9 = (std::__shared_weak_count *)a1[5];
        if (!v9)
          goto LABEL_19;
      }
      else
      {
LABEL_11:
        v9 = (std::__shared_weak_count *)a1[5];
        if (!v9)
          goto LABEL_19;
      }
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
LABEL_19:
      v12 = (std::__shared_weak_count *)a1[3];
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      JUMPOUT(0x20BD3583CLL);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  goto LABEL_7;
}

void sub_20AEDC318(uint64_t a1)
{
  sub_20AEDC1D4((_QWORD *)(a1 - 8));
}

uint64_t sub_20AEDC320(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t VZClientOptionsGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546375C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546375C8))
    return qword_2546375C0;
  qword_2546375C0 = sub_20AECB130();
  __cxa_guard_release(&qword_2546375C8);
  return qword_2546375C0;
}

_QWORD *VZClientOptionsCreate()
{
  _QWORD *result;
  __int128 *v1;
  __int128 *v2;
  __int128 *v3;
  _BYTE v4[16];
  void *v5;
  char v6;
  char v7;
  void *v8;
  char v9;
  void *__p;
  char v11;
  char v12;
  char v13;
  char v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;

  result = operator new(0xB8uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[22] = 0;
    *((_OWORD *)result + 9) = 0u;
    *((_OWORD *)result + 10) = 0u;
    *((_OWORD *)result + 7) = 0u;
    *((_OWORD *)result + 8) = 0u;
    *((_OWORD *)result + 5) = 0u;
    *((_OWORD *)result + 6) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *((_OWORD *)result + 4) = 0u;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((_BYTE *)result + 168) = 1;
    *((_DWORD *)result + 44) = 1;
    *result = off_24C3F26A8;
    result[1] = &unk_24C3F26F8;
  }
  else
  {
    sub_20AEDFDC4();
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v4[0] = 0;
    v14 = 0;
    sub_20AECD798((uint64_t *)&xmmword_254637670, &v15, (uint64_t)v4, 0);
    if (v14 && v13)
    {
      if (v12)
      {
        if (v11 < 0)
          operator delete(__p);
        if (v9 < 0)
          operator delete(v8);
      }
      if (v7 && v6 < 0)
        operator delete(v5);
    }
    v1 = v15;
    if (v15)
    {
      v2 = v16;
      v3 = v15;
      if (v16 != v15)
      {
        do
        {
          if (*((char *)v2 - 1) < 0)
            operator delete(*((void **)v2 - 3));
          v2 = (__int128 *)((char *)v2 - 24);
        }
        while (v2 != v1);
        v3 = v15;
      }
      v16 = v1;
      operator delete(v3);
    }
    return 0;
  }
  return result;
}

void VZClientOptionsSetControlledLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (sub_20AEDC690((uint64_t)"VZClientOptionsSetControlledLogger", a1)
    || sub_20AEDCA40((uint64_t)"VZClientOptionsSetControlledLogger", a2, 0))
  {
    return;
  }
  if (a2)
  {
    v5 = *(_QWORD *)(a2 + 16);
    v4 = *(_QWORD *)(a2 + 24);
    if (v4)
    {
      v6 = (unint64_t *)(v4 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v8 = *(unsigned __int8 *)(a1 + 168);
    *(_QWORD *)(a1 + 152) = v5;
    if (!v8)
    {
      *(_QWORD *)(a1 + 160) = v4;
      *(_BYTE *)(a1 + 168) = 1;
      return;
    }
    v9 = *(std::__shared_weak_count **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v4;
    if (!v9)
      return;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
      return;
LABEL_18:
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    return;
  }
  if (!*(_BYTE *)(a1 + 168))
  {
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 168) = 1;
    return;
  }
  v9 = *(std::__shared_weak_count **)(a1 + 160);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      goto LABEL_18;
  }
}

BOOL sub_20AEDC690(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v7;
  size_t v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  char v37;
  char v38;
  char v39;

  if (a2)
    return a2 == 0;
  v4 = atomic_load((unsigned __int8 *)&qword_2546375E8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546375E8))
  {
    sub_20AEDFDC4();
    v7 = byte_254637687;
    if (byte_254637687 >= 0)
      v8 = byte_254637687;
    else
      v8 = *((_QWORD *)&xmmword_254637670 + 1);
    v9 = v8 + 1;
    if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v9 >= 0x17)
    {
      v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v11 = v9 | 7;
      v12 = v11 + 1;
      v10 = (__int128 *)operator new(v11 + 1);
      *((_QWORD *)&xmmword_2546376B8 + 1) = v8 + 1;
      unk_2546376C8 = v12 | 0x8000000000000000;
      *(_QWORD *)&xmmword_2546376B8 = v10;
    }
    else
    {
      unk_2546376C8 = 0;
      xmmword_2546376B8 = 0uLL;
      v10 = &xmmword_2546376B8;
      byte_2546376CF = v8 + 1;
      if (!v8)
      {
LABEL_53:
        *(_WORD *)((char *)v10 + v8) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546376B8, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546375E8);
        goto LABEL_3;
      }
    }
    if (v7 >= 0)
      v13 = &xmmword_254637670;
    else
      v13 = (__int128 *)xmmword_254637670;
    memmove(v10, v13, v8);
    goto LABEL_53;
  }
LABEL_3:
  if (byte_2546376CF < 0)
  {
    sub_20AEC60F4(v14, (void *)xmmword_2546376B8, *((unint64_t *)&xmmword_2546376B8 + 1));
  }
  else
  {
    *(_OWORD *)v14 = xmmword_2546376B8;
    v15 = unk_2546376C8;
  }
  v16 = 1;
  sub_20AECCECC(a1, (uint64_t)v14, (uint64_t)&v17);
  v28 = v17;
  LOBYTE(v29) = 0;
  v38 = 0;
  if (v27)
  {
    v31 = 0;
    if (v20)
    {
      v29 = v18;
      v30 = v19;
      v19 = 0;
      v18 = 0uLL;
      v31 = 1;
    }
    LOBYTE(v32) = 0;
    v37 = 0;
    if (v26)
    {
      v33 = v22;
      v32 = *(_OWORD *)v21;
      v21[0] = 0;
      v21[1] = 0;
      v34 = v23;
      *(_OWORD *)__p = *(_OWORD *)v24;
      v36 = v25;
      v22 = 0;
      v24[0] = 0;
      v24[1] = 0;
      v25 = 0;
      v37 = 1;
    }
    v38 = 1;
  }
  v39 = 0;
  v5 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v28);
  if (!v39 && v38)
  {
    if (v37)
    {
      if (SHIBYTE(v36) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
    }
    if (v31 && SHIBYTE(v30) < 0)
      operator delete((void *)v29);
  }
  if (v27)
  {
    if (v26)
    {
      if (SHIBYTE(v25) < 0)
        operator delete(v24[0]);
      if (SHIBYTE(v22) < 0)
        operator delete(v21[0]);
    }
    if (v20 && SHIBYTE(v19) < 0)
      operator delete((void *)v18);
  }
  if (v16 && SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  return a2 == 0;
}

void sub_20AEDCA04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546375E8);
  _Unwind_Resume(a1);
}

void sub_20AEDCA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20AEDCA40(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t *v6;
  __int128 v7;
  void *v9[2];
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  void *v16[2];
  uint64_t v17;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  char v32;
  char v33;
  char v34;

  if (!a2)
  {
    v6 = sub_20AEDFF7C();
    if (*((char *)v6 + 23) < 0)
    {
      sub_20AEC60F4(v9, (void *)*v6, v6[1]);
    }
    else
    {
      v7 = *(_OWORD *)v6;
      v10 = v6[2];
      *(_OWORD *)v9 = v7;
    }
    v11 = 1;
    sub_20AECCECC(a1, (uint64_t)v9, (uint64_t)&v12);
    v23 = v12;
    LOBYTE(v24) = 0;
    v33 = 0;
    if (v22)
    {
      v26 = 0;
      if (v15)
      {
        v24 = v13;
        v25 = v14;
        v14 = 0;
        v13 = 0uLL;
        v26 = 1;
      }
      LOBYTE(v27) = 0;
      v32 = 0;
      if (v21)
      {
        v28 = v17;
        v27 = *(_OWORD *)v16;
        v16[0] = 0;
        v16[1] = 0;
        v29 = v18;
        *(_OWORD *)__p = *(_OWORD *)v19;
        v31 = v20;
        v17 = 0;
        v19[0] = 0;
        v19[1] = 0;
        v20 = 0;
        v32 = 1;
      }
      v33 = 1;
    }
    v34 = 0;
    sub_20AECB410(&v23, a3);
    if (!v34 && v33)
    {
      if (v32)
      {
        if (SHIBYTE(v31) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v28) < 0)
          operator delete((void *)v27);
      }
      if (v26 && SHIBYTE(v25) < 0)
        operator delete((void *)v24);
    }
    if (v22)
    {
      if (v21)
      {
        if (SHIBYTE(v20) < 0)
          operator delete(v19[0]);
        if (SHIBYTE(v17) < 0)
          operator delete(v16[0]);
      }
      if (v15 && SHIBYTE(v14) < 0)
        operator delete((void *)v13);
    }
    if (v11 && SHIBYTE(v10) < 0)
      operator delete(v9[0]);
  }
  return a2 == 0;
}

void sub_20AEDCC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECD704((uint64_t)&a32);
  sub_20AECCE40((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void VZClientOptionsDisableLogControl(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (!sub_20AEDC690((uint64_t)"VZClientOptionsDisableLogControl", a1) && *(_BYTE *)(a1 + 168))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 160);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    *(_BYTE *)(a1 + 168) = 0;
  }
}

double VZClientOptionsSetTcpIpAddress(uint64_t a1, char *a2, __int16 a3)
{
  double result;

  if (!sub_20AEDC690((uint64_t)"VZClientOptionsSetTcpIpAddress", a1))
    return sub_20AF5DD34(a1 + 16, a2, a3);
  return result;
}

BOOL VZClientOptionsSetServer(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  char v5;

  result = sub_20AEDC690((uint64_t)"VZClientOptionsSetServer", a1);
  if (!result)
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 16);
      v5 = 1;
    }
    else
    {
      v5 = 0;
      *(_BYTE *)(a1 + 72) = 0;
    }
    *(_BYTE *)(a1 + 80) = v5;
  }
  return result;
}

BOOL VZClientOptionsSetAsyncQueueMaxElementCount(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_20AEDC690((uint64_t)"VZClientOptionsSetAsyncQueueMaxElementCount", a1);
  if (!result)
  {
    if (a2)
    {
      if (!*(_BYTE *)(a1 + 144))
      {
        *(_QWORD *)(a1 + 136) = 0;
        *(_BYTE *)(a1 + 144) = 1;
      }
      *(_QWORD *)(a1 + 128) = a2;
      *(_BYTE *)(a1 + 136) = 1;
    }
    else if (*(_BYTE *)(a1 + 144))
    {
      *(_BYTE *)(a1 + 144) = 0;
    }
  }
  return result;
}

void VZClientOptionsSetSyncType(uint64_t a1, unsigned int a2)
{
  char v4[16];
  void *v5;
  char v6;
  char v7;
  void *v8;
  char v9;
  void *__p;
  char v11;
  char v12;
  char v13;
  char v14;

  if (!sub_20AEDC690((uint64_t)"VZClientOptionsSetSyncType", a1))
  {
    sub_20AF5DE9C(a1 + 16, a2, (uint64_t)v4);
    sub_20AEDCEDC((uint64_t)"VZClientOptionsSetSyncType", v4, 0);
    if (!v14)
    {
      if (v13)
      {
        if (v12)
        {
          if (v11 < 0)
            operator delete(__p);
          if (v9 < 0)
            operator delete(v8);
        }
        if (v7)
        {
          if (v6 < 0)
            operator delete(v5);
        }
      }
    }
  }
}

void sub_20AEDCEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AEDCEDC(uint64_t a1, char *a2, CFErrorRef *a3)
{
  void *v5;
  char v6;
  __int128 v7;
  void *v8;
  char v9;
  char v10;
  void *v11;
  char v12;
  void *__p;
  char v14;
  char v15;
  char v16;
  uint64_t v17;

  v17 = a1;
  if (!a2[120])
  {
    sub_20AEDBA04("in function ", (const char *)&v17);
    sub_20B529470(a2, &v5, (uint64_t)&v7);
    sub_20AECB410(&v7, a3);
    if (v16)
    {
      if (v15)
      {
        if (v14 < 0)
          operator delete(__p);
        if (v12 < 0)
          operator delete(v11);
      }
      if (v10 && v9 < 0)
        operator delete(v8);
    }
    if (v6 < 0)
      operator delete(v5);
  }
}

void sub_20AEDCFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_20AECCE40((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t VZClientGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546375F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546375F8))
    return qword_2546375F0;
  qword_2546375F0 = sub_20AECB130();
  __cxa_guard_release(&qword_2546375F8);
  return qword_2546375F0;
}

std::__shared_weak_count *VZClientCreate(uint64_t a1, std::__shared_weak_count *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  std::__shared_weak_count *v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *shared_owners;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v28;
  void *v29;
  char v30;
  char v31;
  void *v32;
  char v33;
  void *__p;
  char v35;
  char v36;
  char v37;
  char v38;
  __int128 v39;
  __int128 v40;
  std::__shared_count v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  char v46;
  char v47;
  unsigned __int8 v48;
  CFErrorRef **v49;
  std::__shared_weak_count *v50;
  void *__dst[2];
  uint64_t v52;
  __int16 v53;
  int v54;
  char v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[3];
  _QWORD *v59;
  char v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  char v64;
  char v65;
  _QWORD v66[3];
  _QWORD *v67;
  char v68;
  __int128 v69;
  uint64_t v70;
  __int16 v71;
  int v72;
  char v73;
  __int128 v74;
  uint64_t v75;
  _BYTE v76[24];
  _BYTE *v77;
  char v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  char v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  sub_20AEDD7F0((char *)__dst, a1);
  v49 = (CFErrorRef **)&v50;
  v50 = a2;
  LOBYTE(v69) = 0;
  v83 = 0;
  if (v65)
  {
    v73 = 0;
    if (v55)
    {
      v69 = *(_OWORD *)__dst;
      v70 = v52;
      __dst[1] = 0;
      v52 = 0;
      __dst[0] = 0;
      v71 = v53;
      v72 = v54;
      v73 = 1;
    }
    v74 = v56;
    v75 = v57;
    v76[0] = 0;
    v78 = 0;
    if (v60)
    {
      if (v59)
      {
        if (v59 == v58)
        {
          v77 = v76;
          (*(void (**)(void))(v58[0] + 24))();
        }
        else
        {
          v77 = v59;
          v59 = 0;
        }
      }
      else
      {
        v77 = 0;
      }
      v78 = 1;
    }
    v79 = v61;
    v80 = v62;
    LOBYTE(v81) = 0;
    v82 = 0;
    if (v64)
    {
      v81 = v63;
      v63 = 0uLL;
      v82 = 1;
    }
    v83 = 1;
  }
  v66[0] = &off_24C3F2898;
  v66[1] = sub_20AEDD8BC;
  v67 = v66;
  v68 = 1;
  sub_20AF5E498((uint64_t)&v69, (uint64_t)v66, (uint64_t)&v39);
  if (v68)
  {
    v3 = v67;
    if (v67 == v66)
    {
      v4 = 4;
      v3 = v66;
    }
    else
    {
      if (!v67)
        goto LABEL_20;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
LABEL_20:
  if (!v83)
    goto LABEL_36;
  if (v82)
  {
    a2 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
    if (*((_QWORD *)&v81 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))a2->__on_zero_shared)(a2);
        std::__shared_weak_count::__release_weak(a2);
      }
    }
  }
  if (v78)
  {
    v7 = v77;
    if (v77 == v76)
    {
      v8 = 4;
      v7 = v76;
      goto LABEL_32;
    }
    if (v77)
    {
      v8 = 5;
LABEL_32:
      (*(void (**)(void))(*v7 + 8 * v8))();
    }
  }
  if (v73 && SHIBYTE(v70) < 0)
    operator delete((void *)v69);
LABEL_36:
  v9 = v48;
  if (v48)
  {
    v10 = (std::__shared_weak_count *)operator new(0x60uLL, MEMORY[0x24BEDB6B8]);
    if (v10)
    {
      a2 = v10;
      v11 = v39;
      v12 = v40;
      v39 = 0uLL;
      *(_OWORD *)&v10->__shared_weak_owners_ = v11;
      *(_OWORD *)&v10[1].__shared_owners_ = v12;
      v40 = 0uLL;
      v10[2].std::__shared_count = v41;
      v41 = (std::__shared_count)0;
      LODWORD(v10[2].__shared_weak_owners_) = 1;
      v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F27A0;
      v10->__shared_owners_ = (uint64_t)&unk_24C3F27F0;
      v10[3].__shared_owners_ = 0;
      v10[3].__shared_weak_owners_ = 0;
      v10[3].__vftable = 0;
    }
    else
    {
      LOBYTE(v28) = 0;
      v38 = 0;
      sub_20AEE0A60(&v49, (uint64_t)&v28);
      if (v38 && v37)
      {
        if (v36)
        {
          if (v35 < 0)
            operator delete(__p);
          if (v33 < 0)
            operator delete(v32);
        }
        a2 = 0;
        if (v31 && v30 < 0)
        {
          operator delete(v29);
          a2 = 0;
        }
      }
      else
      {
        a2 = 0;
      }
    }
  }
  else
  {
    v28 = v39;
    sub_20AECEBD0(&v29, &v40);
    v38 = 1;
    sub_20AEE0A60(&v49, (uint64_t)&v28);
    if (v38 && v37)
    {
      if (v36)
      {
        if (v35 < 0)
          operator delete(__p);
        if (v33 < 0)
          operator delete(v32);
      }
      if (v31 && v30 < 0)
        operator delete(v29);
    }
  }
  if (v48)
  {
    shared_owners = (std::__shared_weak_count *)v41.__shared_owners_;
    if (v41.__shared_owners_)
    {
      v14 = (unint64_t *)(v41.__shared_owners_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
        std::__shared_weak_count::__release_weak(shared_owners);
      }
    }
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else if (v47)
  {
    if (v46)
    {
      if (v45 < 0)
        operator delete(v44);
      if (v43 < 0)
        operator delete(v42);
    }
    if (LOBYTE(v41.__shared_owners_) && SHIBYTE(v41.__vftable) < 0)
      operator delete((void *)v40);
  }
  if (!v9)
    a2 = 0;
  if (v65)
  {
    if (v64)
    {
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
      if (*((_QWORD *)&v63 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    if (!v60)
      goto LABEL_100;
    v25 = v59;
    if (v59 == v58)
    {
      v26 = 4;
      v25 = v58;
    }
    else
    {
      if (!v59)
      {
LABEL_100:
        if (v55 && SHIBYTE(v52) < 0)
          operator delete(__dst[0]);
        return a2;
      }
      v26 = 5;
    }
    (*(void (**)(void))(*v25 + 8 * v26))();
    goto LABEL_100;
  }
  return a2;
}

void sub_20AEDD5A8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20AEC01C0(a1);
}

char *sub_20AEDD7F0(char *__dst, uint64_t a2)
{
  char *v2;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = __dst;
  if (a2)
  {
    __dst = sub_20AEE02C8(__dst, (__int128 *)(a2 + 16));
    v2[136] = 0;
    v2[152] = 0;
    if (*(_BYTE *)(a2 + 168))
    {
      v4 = *(_QWORD *)(a2 + 160);
      *((_QWORD *)v2 + 17) = *(_QWORD *)(a2 + 152);
      *((_QWORD *)v2 + 18) = v4;
      if (v4)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
      }
      v2[152] = 1;
      v2[160] = 1;
    }
    else
    {
      v2[160] = 1;
    }
  }
  else
  {
    *__dst = 0;
    __dst[160] = 0;
  }
  return __dst;
}

void sub_20AEDD888(void *a1)
{
  _BYTE *v1;

  __cxa_begin_catch(a1);
  sub_20AEDFDC4();
  sub_20AEE0424();
  sub_20AECDF74((std::string::size_type)&xmmword_254637670, (uint64_t *)&xmmword_2546376D0, 0);
  *v1 = 0;
  v1[160] = 0;
  __cxa_end_catch();
  JUMPOUT(0x20AEDD850);
}

void sub_20AEDD8BC(__int128 *a1)
{
  __int128 *v1;
  unsigned __int8 v2;
  int v3;

  v1 = a1;
  v2 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v2 & 1) != 0 || (v3 = __cxa_guard_acquire(&qword_254630258), v1 = a1, !v3))
  {
    sub_20AECB50C((uint64_t)&unk_254630168, v1);
  }
  else
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
    sub_20AECB50C((uint64_t)&unk_254630168, a1);
  }
}

uint64_t sub_20AEDD948(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 160))
    return a1;
  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 144);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_14;
  v5 = *(_QWORD **)(a1 + 96);
  if (v5 == (_QWORD *)(a1 + 72))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 72);
    goto LABEL_13;
  }
  if (v5)
  {
    v6 = 5;
LABEL_13:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
LABEL_14:
  if (!*(_BYTE *)(a1 + 40) || (*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t VZClientSync(uint64_t a1, CFErrorRef *a2)
{
  uint64_t result;
  unsigned __int8 v4;
  void *v5;
  int v6;
  size_t v7;
  unint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  void *v23[2];
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  void *v32[2];
  uint64_t v33;
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  char v37;
  char v38;
  const char *v39;

  if (!a1)
  {
    v4 = atomic_load((unsigned __int8 *)&qword_254637658);
    if ((v4 & 1) != 0 || !__cxa_guard_acquire(&qword_254637658))
    {
LABEL_5:
      if (byte_2546377EF < 0)
      {
        sub_20AEC60F4(v13, (void *)xmmword_2546377D8, *((unint64_t *)&xmmword_2546377D8 + 1));
      }
      else
      {
        *(_OWORD *)v13 = xmmword_2546377D8;
        v14 = unk_2546377E8;
      }
      v15 = 1;
      sub_20AECCECC((uint64_t)"VZClientSync", (uint64_t)v13, (uint64_t)&v28);
      v16 = v28;
      LOBYTE(v17) = 0;
      v26 = 0;
      if (v38)
      {
        v19 = 0;
        if (v31)
        {
          v17 = v29;
          v18 = v30;
          v30 = 0;
          v29 = 0uLL;
          v19 = 1;
        }
        LOBYTE(v20) = 0;
        v25 = 0;
        if (v37)
        {
          v21 = v33;
          v20 = *(_OWORD *)v32;
          v32[0] = 0;
          v32[1] = 0;
          v22 = v34;
          *(_OWORD *)v23 = *(_OWORD *)__p;
          v24 = v36;
          v33 = 0;
          __p[0] = 0;
          __p[1] = 0;
          v36 = 0;
          v25 = 1;
        }
        v26 = 1;
      }
      v27 = 0;
      sub_20AECB410(&v16, a2);
      if (!v27 && v26)
      {
        if (v25)
        {
          if (SHIBYTE(v24) < 0)
            operator delete(v23[0]);
          if (SHIBYTE(v21) < 0)
            operator delete((void *)v20);
        }
        if (v19 && SHIBYTE(v18) < 0)
          operator delete((void *)v17);
      }
      if (v38)
      {
        if (v37)
        {
          if (SHIBYTE(v36) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v33) < 0)
            operator delete(v32[0]);
        }
        if (v31 && SHIBYTE(v30) < 0)
          operator delete((void *)v29);
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        return 0;
      v5 = v13[0];
      goto LABEL_48;
    }
    sub_20AEE114C();
    v6 = byte_2546377A7;
    if (byte_2546377A7 >= 0)
      v7 = byte_2546377A7;
    else
      v7 = *((_QWORD *)&xmmword_254637790 + 1);
    v8 = v7 + 1;
    if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v8 >= 0x17)
    {
      v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v10 = v8 | 7;
      v11 = v10 + 1;
      v9 = (__int128 *)operator new(v10 + 1);
      *((_QWORD *)&xmmword_2546377D8 + 1) = v7 + 1;
      unk_2546377E8 = v11 | 0x8000000000000000;
      *(_QWORD *)&xmmword_2546377D8 = v9;
    }
    else
    {
      unk_2546377E8 = 0;
      xmmword_2546377D8 = 0uLL;
      v9 = &xmmword_2546377D8;
      byte_2546377EF = v7 + 1;
      if (!v7)
      {
LABEL_76:
        *(_WORD *)((char *)v9 + v7) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546377D8, &dword_20AEBB000);
        __cxa_guard_release(&qword_254637658);
        goto LABEL_5;
      }
    }
    if (v6 >= 0)
      v12 = &xmmword_254637790;
    else
      v12 = (__int128 *)xmmword_254637790;
    memmove(v9, v12, v7);
    goto LABEL_76;
  }
  sub_20AF5EA18(a1 + 16, (uint64_t)&v16);
  v39 = "VZClientSync";
  if (v27)
    return v16;
  sub_20AEDBA04("in function ", (const char *)&v39);
  sub_20B529470((char *)&v16, v13, (uint64_t)&v28);
  sub_20AECB410(&v28, a2);
  if (v38)
  {
    if (v37)
    {
      if (SHIBYTE(v36) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33) < 0)
        operator delete(v32[0]);
    }
    if (v31 && SHIBYTE(v30) < 0)
      operator delete((void *)v29);
  }
  if (SHIBYTE(v14) < 0)
  {
    operator delete(v13[0]);
    if (v27)
      return 0;
  }
  else if (v27)
  {
    return 0;
  }
  if (!v26)
    return 0;
  if (v25)
  {
    if (SHIBYTE(v24) < 0)
      operator delete(v23[0]);
    if (SHIBYTE(v21) < 0)
      operator delete((void *)v20);
  }
  result = 0;
  if (v19 && SHIBYTE(v18) < 0)
  {
    v5 = (void *)v17;
LABEL_48:
    operator delete(v5);
    return 0;
  }
  return result;
}

void sub_20AEDDE3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637658);
  _Unwind_Resume(a1);
}

void sub_20AEDDE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECCE40((uint64_t)&a32);
  if (a14 < 0)
    operator delete(__p);
  sub_20AECD704((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_20AEDDE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20AECD704((uint64_t)&a17);
  sub_20AECCE40((uint64_t)&a35);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t VZClientGetUUID(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  CFUUIDBytes *v23;
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  __int128 v39;

  if (sub_20AEDE19C((uint64_t)"VZClientGetUUID", a1))
    return 0;
  v5 = *(_QWORD *)(a1 + 80);
  v4 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      goto LABEL_10;
  }
  else
  {
LABEL_9:
    if (v5)
      goto LABEL_10;
  }
  v23 = (CFUUIDBytes *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Default = CFAllocatorGetDefault();
  v25 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *v23);
  sub_20B4F6FB4((std::__shared_weak_count_vtbl **)&v39, v25, 0);
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  sub_20AEDF888(&v39, (CFTypeRef)v39);
  v26 = v39;
  if (*((_QWORD *)&v39 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  v32 = *(std::__shared_weak_count **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = v26;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v38)
  {
    v35 = (unint64_t *)&v38->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
LABEL_10:
  v9 = *(const void **)(a1 + 80);
  v10 = *(std::__shared_weak_count **)(a1 + 88);
  v37 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  sub_20AEDF888(&v39, v9);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  v2 = v39;
  if (*((_QWORD *)&v39 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  if (v37)
  {
    v19 = (unint64_t *)&v37->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (!v13)
    return v2;
  v21 = (unint64_t *)&v13->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
    return v2;
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return v2;
}

void sub_20AEDE174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AEDE188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20AEDE19C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v7;
  size_t v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  char v37;
  char v38;
  char v39;

  if (a2)
    return a2 == 0;
  v4 = atomic_load((unsigned __int8 *)&qword_254637660);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254637660))
  {
    sub_20AEE1500();
    v7 = byte_25463781F;
    if (byte_25463781F >= 0)
      v8 = byte_25463781F;
    else
      v8 = qword_254637810;
    v9 = v8 + 1;
    if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v9 >= 0x17)
    {
      v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v11 = v9 | 7;
      v12 = v11 + 1;
      v10 = (__int128 *)operator new(v11 + 1);
      *((_QWORD *)&xmmword_2546377F0 + 1) = v8 + 1;
      unk_254637800 = v12 | 0x8000000000000000;
      *(_QWORD *)&xmmword_2546377F0 = v10;
    }
    else
    {
      unk_254637800 = 0;
      xmmword_2546377F0 = 0uLL;
      v10 = &xmmword_2546377F0;
      byte_254637807 = v8 + 1;
      if (!v8)
      {
LABEL_53:
        *(_WORD *)((char *)v10 + v8) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546377F0, &dword_20AEBB000);
        __cxa_guard_release(&qword_254637660);
        goto LABEL_3;
      }
    }
    if (v7 >= 0)
      v13 = &qword_254637808;
    else
      v13 = (uint64_t *)qword_254637808;
    memmove(v10, v13, v8);
    goto LABEL_53;
  }
LABEL_3:
  if (byte_254637807 < 0)
  {
    sub_20AEC60F4(v14, (void *)xmmword_2546377F0, *((unint64_t *)&xmmword_2546377F0 + 1));
  }
  else
  {
    *(_OWORD *)v14 = xmmword_2546377F0;
    v15 = unk_254637800;
  }
  v16 = 1;
  sub_20AECCECC(a1, (uint64_t)v14, (uint64_t)&v17);
  v28 = v17;
  LOBYTE(v29) = 0;
  v38 = 0;
  if (v27)
  {
    v31 = 0;
    if (v20)
    {
      v29 = v18;
      v30 = v19;
      v19 = 0;
      v18 = 0uLL;
      v31 = 1;
    }
    LOBYTE(v32) = 0;
    v37 = 0;
    if (v26)
    {
      v33 = v22;
      v32 = *(_OWORD *)v21;
      v21[0] = 0;
      v21[1] = 0;
      v34 = v23;
      *(_OWORD *)__p = *(_OWORD *)v24;
      v36 = v25;
      v22 = 0;
      v24[0] = 0;
      v24[1] = 0;
      v25 = 0;
      v37 = 1;
    }
    v38 = 1;
  }
  v39 = 0;
  v5 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v28);
  if (!v39 && v38)
  {
    if (v37)
    {
      if (SHIBYTE(v36) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
    }
    if (v31 && SHIBYTE(v30) < 0)
      operator delete((void *)v29);
  }
  if (v27)
  {
    if (v26)
    {
      if (SHIBYTE(v25) < 0)
        operator delete(v24[0]);
      if (SHIBYTE(v22) < 0)
        operator delete(v21[0]);
    }
    if (v20 && SHIBYTE(v19) < 0)
      operator delete((void *)v18);
  }
  if (v16 && SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  return a2 == 0;
}

void sub_20AEDE510(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637660);
  _Unwind_Resume(a1);
}

void sub_20AEDE528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VZClientGetAsDestination(_QWORD *a1)
{
  uint64_t result;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  __int128 *v20;
  __int128 v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  char v25[16];
  void *v26;
  char v27;
  char v28;
  void *v29;
  char v30;
  void *__p;
  char v32;
  char v33;
  char v34;
  char v35;
  __int128 *v36;
  __int128 *v37;
  __int128 __dst;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_20AEDE19C((uint64_t)"VZClientGetAsDestination", (uint64_t)a1))
    return 0;
  result = a1[9];
  if (!result)
  {
    v4 = a1[4];
    v3 = (std::__shared_weak_count *)a1[5];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v8 = a1[6];
    v7 = (std::__shared_weak_count *)a1[7];
    if (v7)
    {
      v9 = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = operator new(0x38uLL, MEMORY[0x24BEDB6B8]);
    v12 = v11;
    if (v11)
    {
      v11[2] = v4;
      v11[3] = v3;
      v11[4] = v8;
      v11[5] = v7;
      *((_DWORD *)v11 + 12) = 1;
      *v11 = &off_24C3F2D90;
      v11[1] = &unk_24C3F2DE0;
      sub_20AEF631C((uint64_t)v11);
      v3 = 0;
      v7 = 0;
      v13 = v12;
      v14 = a1[9];
      a1[9] = v12;
      if (!v14)
      {
LABEL_13:
        if (v12)
          (*(void (**)(_QWORD *))(*v13 + 24))(v13);
        if (v7)
        {
          v15 = (unint64_t *)&v7->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        if (v3)
        {
          v17 = (unint64_t *)&v3->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        return a1[9];
      }
    }
    else
    {
      v19 = (uint64_t *)sub_20AEDF9CC();
      v20 = sub_20AEDFBC8();
      if (*((char *)v20 + 23) < 0)
      {
        sub_20AEC60F4(&__dst, *(void **)v20, *((_QWORD *)v20 + 1));
      }
      else
      {
        v21 = *v20;
        v39 = *((_QWORD *)v20 + 2);
        __dst = v21;
      }
      sub_20AEC7620(&v36, (uint64_t)&__dst, 1uLL);
      v25[0] = 0;
      v35 = 0;
      sub_20AECD798(v19, &v36, (uint64_t)v25, 0);
      if (v35 && v34)
      {
        if (v33)
        {
          if (v32 < 0)
            operator delete(__p);
          if (v30 < 0)
            operator delete(v29);
        }
        if (v28 && v27 < 0)
          operator delete(v26);
      }
      v22 = v36;
      if (v36)
      {
        v23 = v37;
        v24 = v36;
        if (v37 != v36)
        {
          do
          {
            if (*((char *)v23 - 1) < 0)
              operator delete(*((void **)v23 - 3));
            v23 = (__int128 *)((char *)v23 - 24);
          }
          while (v23 != v22);
          v24 = v36;
        }
        v37 = v22;
        operator delete(v24);
      }
      if (SHIBYTE(v39) < 0)
        operator delete((void *)__dst);
      v13 = 0;
      v14 = a1[9];
      a1[9] = 0;
      if (!v14)
        goto LABEL_13;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
    goto LABEL_13;
  }
  return result;
}

void sub_20AEDE818(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20AEC01C0(a1);
}

_OWORD *VZDestinationCreateWithClient(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v21;
  void *v22;
  char v23;
  char v24;
  void *v25;
  char v26;
  void *__p;
  char v28;
  char v29;
  char v30;
  char v31;
  __int128 v32;
  __int128 v33;
  char v34;
  CFErrorRef **v35;
  uint64_t v36;
  void *__dst[2];
  uint64_t v38;
  __int16 v39;
  int v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  _QWORD v44[3];
  _QWORD *v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  char v50;
  char v51;
  _QWORD v52[3];
  _QWORD *v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  __int16 v57;
  int v58;
  char v59;
  __int128 v60;
  uint64_t v61;
  _BYTE v62[24];
  _BYTE *v63;
  char v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  char v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  sub_20AEDD7F0((char *)__dst, a1);
  v35 = (CFErrorRef **)&v36;
  v36 = a2;
  LOBYTE(v55) = 0;
  v69 = 0;
  if (v51)
  {
    v59 = 0;
    if (v41)
    {
      v55 = *(_OWORD *)__dst;
      v56 = v38;
      __dst[1] = 0;
      v38 = 0;
      __dst[0] = 0;
      v57 = v39;
      v58 = v40;
      v59 = 1;
    }
    v60 = v42;
    v61 = v43;
    v62[0] = 0;
    v64 = 0;
    if (v46)
    {
      if (v45)
      {
        if (v45 == v44)
        {
          v63 = v62;
          (*(void (**)(void))(v44[0] + 24))();
        }
        else
        {
          v63 = v45;
          v45 = 0;
        }
      }
      else
      {
        v63 = 0;
      }
      v64 = 1;
    }
    v65 = v47;
    v66 = v48;
    LOBYTE(v67) = 0;
    v68 = 0;
    if (v50)
    {
      v67 = v49;
      v49 = 0uLL;
      v68 = 1;
    }
    v69 = 1;
  }
  v52[0] = &off_24C3F2898;
  v52[1] = sub_20AEDD8BC;
  v53 = v52;
  v54 = 1;
  sub_20AF5EC50(&v55, (uint64_t)v52, (uint64_t)&v32);
  if (v54)
  {
    v3 = v53;
    if (v53 == v52)
    {
      v4 = 4;
      v3 = v52;
    }
    else
    {
      if (!v53)
        goto LABEL_20;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
LABEL_20:
  if (!v69)
    goto LABEL_36;
  if (v68)
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
    if (*((_QWORD *)&v67 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (v64)
  {
    v8 = v63;
    if (v63 == v62)
    {
      v9 = 4;
      v8 = v62;
      goto LABEL_32;
    }
    if (v63)
    {
      v9 = 5;
LABEL_32:
      (*(void (**)(void))(*v8 + 8 * v9))();
    }
  }
  if (v59 && SHIBYTE(v56) < 0)
    operator delete((void *)v55);
LABEL_36:
  if (v34)
  {
    v10 = sub_20AEE18DC((uint64_t)&v32);
    v11 = operator new(0x38uLL, MEMORY[0x24BEDB6B8]);
    v12 = v11;
    if (v11)
    {
      v13 = *(_OWORD *)v10;
      v14 = *(_OWORD *)(v10 + 16);
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      v11[1] = v13;
      v11[2] = v14;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *((_DWORD *)v11 + 12) = 1;
      *(_QWORD *)v11 = &off_24C3F2D90;
      *((_QWORD *)v11 + 1) = &unk_24C3F2DE0;
    }
    else
    {
      LOBYTE(v21) = 0;
      v31 = 0;
      sub_20AEE1680(&v35, (uint64_t)&v21);
      if (v31 && v30)
      {
        if (v29)
        {
          if (v28 < 0)
            operator delete(__p);
          if (v26 < 0)
            operator delete(v25);
        }
        if (v24 && v23 < 0)
        {
          operator delete(v22);
          sub_20AEE199C((uint64_t)&v32);
          if (!v51)
            return v12;
          goto LABEL_52;
        }
      }
    }
    sub_20AEE199C((uint64_t)&v32);
    if (!v51)
      return v12;
LABEL_52:
    if (v50)
    {
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      if (*((_QWORD *)&v49 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    if (!v46)
      goto LABEL_75;
    v18 = v45;
    if (v45 == v44)
    {
      v19 = 4;
      v18 = v44;
    }
    else
    {
      if (!v45)
      {
LABEL_75:
        if (v41 && SHIBYTE(v38) < 0)
          operator delete(__dst[0]);
        return v12;
      }
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
    goto LABEL_75;
  }
  v21 = v32;
  sub_20AECEBD0(&v22, &v33);
  v31 = 1;
  sub_20AEE1680(&v35, (uint64_t)&v21);
  if (v31 && v30)
  {
    if (v29)
    {
      if (v28 < 0)
        operator delete(__p);
      if (v26 < 0)
        operator delete(v25);
    }
    if (v24 && v23 < 0)
      operator delete(v22);
  }
  sub_20AEE199C((uint64_t)&v32);
  v12 = 0;
  if (v51)
    goto LABEL_52;
  return v12;
}

void sub_20AEDECA8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20AEC01C0(a1);
}

uint64_t sub_20AEDEEFC(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 176);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AEDEF14(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 176);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AEDEF3C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546375C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546375C8))
    return qword_2546375C0;
  qword_2546375C0 = sub_20AECB130();
  __cxa_guard_release(&qword_2546375C8);
  return qword_2546375C0;
}

uint64_t sub_20AEDEF9C(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F2740, 0);
  if (result)
  {
    v4 = result;
    result = sub_20B0B97EC((unsigned __int8 *)(a1 + 16), (unsigned __int8 *)(result + 16));
    if ((_DWORD)result)
    {
      result = (*(_BYTE *)(a1 + 168) != 0) == (*(_BYTE *)(v4 + 168) != 0);
      if (*(_BYTE *)(a1 + 168))
      {
        if (*(_BYTE *)(v4 + 168))
          return *(_QWORD *)(a1 + 152) == *(_QWORD *)(v4 + 152);
      }
    }
  }
  return result;
}

uint64_t sub_20AEDF030(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  const void *v20[2];
  char v21;

  __cxa_begin_catch(a1);
  sub_20AEDFDC4();
  sub_20AEC0D64(v20, "failed to compare equal");
  sub_20AECD224((std::string::size_type)&xmmword_254637670, v20, 0);
  if (v21 < 0)
    operator delete((void *)v20[0]);
  __cxa_end_catch();
  return 0;
}

CFTypeRef sub_20AEDF088(uint64_t a1)
{
  uint64_t v2;
  int v3;
  size_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  char v21;
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  void *__dst[2];
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  sub_20AEDFDC4();
  v26 = a1;
  v2 = operator new();
  *(_QWORD *)(v2 + 272) = 0;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  sub_20AEC0BD8(v2);
  v27 = (_QWORD *)v2;
  sub_20AF5E1FC((_QWORD *)(v2 + 16), a1 + 16);
  v3 = *(_DWORD *)(v2 + 120);
  if ((v3 & 0x10) != 0)
  {
    v6 = *(_QWORD *)(v2 + 112);
    v7 = *(_QWORD *)(v2 + 72);
    if (v6 < v7)
    {
      *(_QWORD *)(v2 + 112) = v7;
      v6 = v7;
    }
    v8 = *(const void **)(v2 + 64);
    v4 = v6 - (_QWORD)v8;
    if (v6 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      HIBYTE(v25) = 0;
      v5 = __dst;
      goto LABEL_14;
    }
    v8 = *(const void **)(v2 + 40);
    v4 = *(_QWORD *)(v2 + 56) - (_QWORD)v8;
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v5 = (void **)operator new(v9 + 1);
    __dst[1] = (void *)v4;
    v25 = v10 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_13;
  }
  HIBYTE(v25) = v4;
  v5 = __dst;
  if (v4)
LABEL_13:
    memmove(v5, v8, v4);
LABEL_14:
  *((_BYTE *)v5 + v4) = 0;
  v11 = v27;
  if (v27)
  {
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *v27 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)((char *)v11 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    v11[3] = MEMORY[0x24BEDB848] + 16;
    v11[2] = v14;
    if (*((char *)v11 + 111) < 0)
      operator delete((void *)v11[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v11 + 16);
    MEMORY[0x20BD3583C](v11, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)&xmmword_254637670, (uint64_t)" ", &v26, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v15 = cf;
  if (cf)
    CFRetain(cf);
  v16 = v23;
  if (!v23)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if ((v21 & 0x80000000) == 0)
      return v15;
  }
  else
  {
LABEL_26:
    if ((v21 & 0x80000000) == 0)
      return v15;
  }
  operator delete(__p);
  return v15;
}

uint64_t sub_20AEDF330(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  const void *v32[2];
  char v33;
  uint64_t v34;

  sub_20AEC147C((uint64_t)&v34);
  if (v33 < 0)
    operator delete((void *)v32[0]);
  __cxa_begin_catch(a1);
  sub_20AEDFDC4();
  sub_20AEC0D64(v32, "failed to create description");
  sub_20AECD224((std::string::size_type)&xmmword_254637670, v32, 0);
  if (v33 < 0)
    operator delete((void *)v32[0]);
  __cxa_end_catch();
  return 0;
}

uint64_t sub_20AEDF404(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 176));
}

uint64_t sub_20AEDF410(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 64);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AEDF428(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 64);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AEDF450()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546375F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546375F8))
    return qword_2546375F0;
  qword_2546375F0 = sub_20AECB130();
  __cxa_guard_release(&qword_2546375F8);
  return qword_2546375F0;
}

_QWORD *sub_20AEDF4B0(uint64_t a1, void *lpsrc)
{
  _QWORD *result;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F2838, 0);
  if (result)
    return (_QWORD *)(*(_QWORD *)(a1 + 16) == result[2]);
  return result;
}

CFTypeRef sub_20AEDF500(uint64_t a1)
{
  uint64_t v2;
  int v3;
  size_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  char v21;
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  void *__dst[2];
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  sub_20AEE114C();
  v26 = a1;
  v2 = operator new();
  *(_QWORD *)(v2 + 272) = 0;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  sub_20AEC0BD8(v2);
  v27 = (_QWORD *)v2;
  sub_20B0BA3A8((_QWORD *)(v2 + 16), *(_QWORD *)(a1 + 16));
  v3 = *(_DWORD *)(v2 + 120);
  if ((v3 & 0x10) != 0)
  {
    v6 = *(_QWORD *)(v2 + 112);
    v7 = *(_QWORD *)(v2 + 72);
    if (v6 < v7)
    {
      *(_QWORD *)(v2 + 112) = v7;
      v6 = v7;
    }
    v8 = *(const void **)(v2 + 64);
    v4 = v6 - (_QWORD)v8;
    if (v6 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      HIBYTE(v25) = 0;
      v5 = __dst;
      goto LABEL_14;
    }
    v8 = *(const void **)(v2 + 40);
    v4 = *(_QWORD *)(v2 + 56) - (_QWORD)v8;
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v5 = (void **)operator new(v9 + 1);
    __dst[1] = (void *)v4;
    v25 = v10 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_13;
  }
  HIBYTE(v25) = v4;
  v5 = __dst;
  if (v4)
LABEL_13:
    memmove(v5, v8, v4);
LABEL_14:
  *((_BYTE *)v5 + v4) = 0;
  v11 = v27;
  if (v27)
  {
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *v27 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)((char *)v11 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    v11[3] = MEMORY[0x24BEDB848] + 16;
    v11[2] = v14;
    if (*((char *)v11 + 111) < 0)
      operator delete((void *)v11[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v11 + 16);
    MEMORY[0x20BD3583C](v11, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)&xmmword_254637790, (uint64_t)" ", &v26, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v15 = cf;
  if (cf)
    CFRetain(cf);
  v16 = v23;
  if (!v23)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if ((v21 & 0x80000000) == 0)
      return v15;
  }
  else
  {
LABEL_26:
    if ((v21 & 0x80000000) == 0)
      return v15;
  }
  operator delete(__p);
  return v15;
}

uint64_t sub_20AEDF7A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  const void *v32[2];
  char v33;
  uint64_t v34;

  sub_20AEC147C((uint64_t)&v34);
  if (v33 < 0)
    operator delete((void *)v32[0]);
  __cxa_begin_catch(a1);
  sub_20AEE114C();
  sub_20AEC0D64(v32, "failed to create description");
  sub_20AECD224((std::string::size_type)&xmmword_254637790, v32, 0);
  if (v33 < 0)
    operator delete((void *)v32[0]);
  __cxa_end_catch();
  return 0;
}

uint64_t sub_20AEDF87C(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 64));
}

_QWORD *sub_20AEDF888(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C3F2938;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20AEDF8E8(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20AEDF900(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20AEDF918(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AEDF93C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20AEDF95C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK8__CFUUIDEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK8__CFUUIDEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK8__CFUUIDEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK8__CFUUIDEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

__int128 *sub_20AEDF9CC()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546306D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546306D8))
    return &xmmword_2546306C0;
  v2 = (char *)sub_20AEDFAA8();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_2546306C0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_2546306D0 = *((_QWORD *)v2 + 2);
    xmmword_2546306C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546306C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546306D8);
  return &xmmword_2546306C0;
}

void sub_20AEDFA90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546306D8);
  _Unwind_Resume(a1);
}

void *sub_20AEDFAA8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2546306F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546306F8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZDestination]", qword_2546306E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546306E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546306F8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254630718);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254630718))
    return &unk_254630700;
  sub_20B531658((uint64_t)qword_2546306E0, (uint64_t)&unk_254630700);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254630700, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630718);
  return &unk_254630700;
}

void sub_20AEDFB98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630718);
  _Unwind_Resume(a1);
}

void sub_20AEDFBB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546306F8);
  _Unwind_Resume(a1);
}

__int128 *sub_20AEDFBC8()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630738);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630738))
    return &xmmword_254630720;
  v2 = (char *)sub_20AEDFCA4();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254630720, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254630730 = *((_QWORD *)v2 + 2);
    xmmword_254630720 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630720, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630738);
  return &xmmword_254630720;
}

void sub_20AEDFC8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630738);
  _Unwind_Resume(a1);
}

void *sub_20AEDFCA4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254630758);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630758))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vl::visual_logger::SharedDestination]", qword_254630740);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630740, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630758);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254630778);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254630778))
    return &unk_254630760;
  sub_20B531658((uint64_t)qword_254630740, (uint64_t)&unk_254630760);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254630760, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630778);
  return &unk_254630760;
}

void sub_20AEDFD94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630778);
  _Unwind_Resume(a1);
}

void sub_20AEDFDAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630758);
  _Unwind_Resume(a1);
}

void sub_20AEDFDC4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546375D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546375D0))
  {
    sub_20AEDFE7C();
    if (byte_2546376B7 < 0)
    {
      sub_20AEC60F4(&xmmword_254637670, (void *)xmmword_2546376A0, *((unint64_t *)&xmmword_2546376A0 + 1));
    }
    else
    {
      xmmword_254637670 = xmmword_2546376A0;
      unk_254637680 = unk_2546376B0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637670, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546375D0);
  }
}

void sub_20AEDFE64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546375D0);
  _Unwind_Resume(a1);
}

void sub_20AEDFE7C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2546375D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546375D8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZClientOptions]", qword_254637688);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637688, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546375D8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546375E0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2546375E0))
    {
      sub_20B531658((uint64_t)qword_254637688, (uint64_t)&xmmword_2546376A0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546376A0, &dword_20AEBB000);
      __cxa_guard_release(&qword_2546375E0);
    }
  }
}

void sub_20AEDFF4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546375E0);
  _Unwind_Resume(a1);
}

void sub_20AEDFF64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546375D8);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AEDFF7C()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630658);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630658))
  {
    v2 = sub_20AEE00CC();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v7 = &qword_254630640;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254630648 = v5 + 1;
      unk_254630650 = v9 | 0x8000000000000000;
      qword_254630640 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254630648 = 0;
      unk_254630650 = 0;
      qword_254630640 = 0;
      byte_254630657 = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630640, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630658);
        return &qword_254630640;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630640;
}

void sub_20AEE00B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630658);
  _Unwind_Resume(a1);
}

__int128 *sub_20AEE00CC()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630678);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630678))
    return &xmmword_254630660;
  v2 = (char *)sub_20AEE01A8();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254630660, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254630670 = *((_QWORD *)v2 + 2);
    xmmword_254630660 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630660, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630678);
  return &xmmword_254630660;
}

void sub_20AEE0190(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630678);
  _Unwind_Resume(a1);
}

void *sub_20AEE01A8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254630698);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630698))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZLogger]", qword_254630680);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630680, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630698);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546306B8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_2546306B8))
    return &unk_2546306A0;
  sub_20B531658((uint64_t)qword_254630680, (uint64_t)&unk_2546306A0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_2546306A0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546306B8);
  return &unk_2546306A0;
}

void sub_20AEE0298(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546306B8);
  _Unwind_Resume(a1);
}

void sub_20AEE02B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630698);
  _Unwind_Resume(a1);
}

char *sub_20AEE02C8(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *__dst = 0;
  __dst[40] = 0;
  if (*((_BYTE *)a2 + 40))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    *((_WORD *)__dst + 12) = *((_WORD *)a2 + 12);
    *((_DWORD *)__dst + 8) = *((_DWORD *)a2 + 8);
    __dst[40] = 1;
  }
  v5 = a2[3];
  v6 = *((_QWORD *)a2 + 8);
  __dst[72] = 0;
  *((_QWORD *)__dst + 8) = v6;
  *((_OWORD *)__dst + 3) = v5;
  __dst[104] = 0;
  if (*((_BYTE *)a2 + 104))
  {
    v7 = *((_QWORD *)a2 + 12);
    if (v7)
    {
      if ((__int128 *)v7 == (__int128 *)((char *)a2 + 72))
      {
        *((_QWORD *)__dst + 12) = __dst + 72;
        (*(void (**)(_QWORD, char *))(**((_QWORD **)a2 + 12) + 24))(*((_QWORD *)a2 + 12), __dst + 72);
        goto LABEL_12;
      }
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
    *((_QWORD *)__dst + 12) = v7;
LABEL_12:
    __dst[104] = 1;
  }
  v8 = a2[7];
  *((_QWORD *)__dst + 16) = *((_QWORD *)a2 + 16);
  *((_OWORD *)__dst + 7) = v8;
  return __dst;
}

void sub_20AEE03C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 40))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20AEE0424()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637600);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637600))
  {
    sub_20AEE04DC();
    if (byte_2546376FF < 0)
    {
      sub_20AEC60F4(&xmmword_2546376D0, (void *)qword_2546376E8, unk_2546376F0);
    }
    else
    {
      xmmword_2546376D0 = *(_OWORD *)&qword_2546376E8;
      qword_2546376E0 = unk_2546376F8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546376D0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637600);
  }
}

void sub_20AEE04C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637600);
  _Unwind_Resume(a1);
}

void sub_20AEE04DC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254637608);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637608))
  {
    sub_20AEE0784(__p);
    sub_20AEE05B0((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2546376E8, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637608);
  }
}

void sub_20AEE0570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254637608);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254637608);
  _Unwind_Resume(a1);
}

void sub_20AEE05B0(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254637610);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254637610))
  {
    sub_20AEE0960();
    if (byte_254637747 < 0)
    {
      sub_20AEC60F4(&xmmword_254637700, (void *)xmmword_254637730, *((unint64_t *)&xmmword_254637730 + 1));
    }
    else
    {
      xmmword_254637700 = xmmword_254637730;
      unk_254637710 = unk_254637740;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637700, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637610);
  }
  if (byte_254637717 < 0)
  {
    sub_20AEC60F4(__dst, (void *)xmmword_254637700, *((unint64_t *)&xmmword_254637700 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254637700;
    v11 = unk_254637710;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, (std::string *)&qword_2546376E8, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20AEE073C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637610);
  _Unwind_Resume(a1);
}

void sub_20AEE0758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AEE0784(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254637628);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254637628))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::optional<cv3d::vl::visual_logger::ClientOptions>]", qword_254637748);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637748, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637628);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254637630);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254637630))
  {
    v5 = sub_20AED4780(qword_254637748, "<", 0);
    sub_20AED467C(qword_254637748, 0, v5, qword_254637760);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637760, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637630);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254637638);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254637638))
  {
    sub_20B531658((uint64_t)qword_254637760, (uint64_t)&xmmword_254637778);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637778, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637638);
  }
  if (byte_25463778F < 0)
  {
    sub_20AEC60F4(__dst, (void *)xmmword_254637778, *((unint64_t *)&xmmword_254637778 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254637778;
    __dst[2] = unk_254637788;
  }
}

void sub_20AEE0918(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637638);
  _Unwind_Resume(a1);
}

void sub_20AEE0930(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637630);
  _Unwind_Resume(a1);
}

void sub_20AEE0948(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637628);
  _Unwind_Resume(a1);
}

void sub_20AEE0960()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254637618);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637618))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vl::visual_logger::ClientOptions]", qword_254637718);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637718, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637618);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254637620);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254637620))
    {
      sub_20B531658((uint64_t)qword_254637718, (uint64_t)&xmmword_254637730);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637730, &dword_20AEBB000);
      __cxa_guard_release(&qword_254637620);
    }
  }
}

void sub_20AEE0A30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637620);
  _Unwind_Resume(a1);
}

void sub_20AEE0A48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637618);
  _Unwind_Resume(a1);
}

void sub_20AEE0A60(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  _BYTE v9[16];
  void *__p;
  char v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  char v18;
  char v19;
  __int128 *v20;
  __int128 *v21;
  __int128 __dst;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  sub_20AEE114C();
  sub_20AEE0424();
  if (SHIBYTE(qword_2546376E0) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_2546376D0, *((unint64_t *)&xmmword_2546376D0 + 1));
  }
  else
  {
    __dst = xmmword_2546376D0;
    v23 = qword_2546376E0;
  }
  v4 = sub_20AEE0FFC();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(&v24, (void *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v25 = v4[2];
    v24 = v5;
  }
  sub_20AEC7620(&v20, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v9, a2);
  sub_20AECD798((uint64_t *)&xmmword_254637790, &v20, (uint64_t)v9, **a1);
  if (!v19 || !v18)
    goto LABEL_15;
  if (!v17)
    goto LABEL_12;
  if ((v16 & 0x80000000) == 0)
  {
    if ((v14 & 0x80000000) == 0)
      goto LABEL_12;
LABEL_29:
    operator delete(v13);
    if (!v12)
      goto LABEL_15;
    goto LABEL_13;
  }
  operator delete(v15);
  if (v14 < 0)
    goto LABEL_29;
LABEL_12:
  if (!v12)
    goto LABEL_15;
LABEL_13:
  if (v11 < 0)
    operator delete(__p);
LABEL_15:
  v6 = v20;
  if (v20)
  {
    v7 = v21;
    v8 = v20;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*((void **)v7 - 3));
        v7 = (__int128 *)((char *)v7 - 24);
      }
      while (v7 != v6);
      v8 = v20;
    }
    v21 = v6;
    operator delete(v8);
  }
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v23) & 0x80000000) == 0)
      return;
LABEL_27:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v24);
  if (SHIBYTE(v23) < 0)
    goto LABEL_27;
}

void sub_20AEE0C54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECDEE0((uint64_t)va);
  sub_20AEC2E90((void **)(v2 - 104));
  if (*(char *)(v2 - 33) < 0)
    operator delete(*(void **)(v2 - 56));
  if (*(char *)(v2 - 57) < 0)
    operator delete(*(void **)(v2 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_20AEE0CA8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  if (!*(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_21;
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_21:
        if (!*(_BYTE *)(a1 + 40))
          return a1;
        goto LABEL_22;
      }
    }
    else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
LABEL_22:
    if (*(char *)(a1 + 39) < 0)
    {
      operator delete(*(void **)(a1 + 16));
      return a1;
    }
    return a1;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

uint64_t sub_20AEE0DF4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 *v8;
  __int128 v9;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 160) = 0;
  if (!*((_BYTE *)a2 + 160))
    return a1;
  *(_BYTE *)(a1 + 40) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    *(_BYTE *)(a1 + 40) = 1;
  }
  v5 = a2[3];
  v6 = *((_QWORD *)a2 + 8);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 104) = 0;
  if (*((_BYTE *)a2 + 104))
  {
    v7 = a2 + 6;
    v8 = (__int128 *)*((_QWORD *)a2 + 12);
    if (v8)
    {
      if (v8 == (__int128 *)((char *)a2 + 72))
      {
        *(_QWORD *)(a1 + 96) = a1 + 72;
        (*(void (**)(_QWORD))(*(_QWORD *)*v7 + 24))(*v7);
        goto LABEL_11;
      }
      *(_QWORD *)(a1 + 96) = v8;
    }
    else
    {
      v7 = (_QWORD *)(a1 + 96);
    }
    *v7 = 0;
LABEL_11:
    *(_BYTE *)(a1 + 104) = 1;
  }
  v9 = a2[7];
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  *(_OWORD *)(a1 + 112) = v9;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (*((_BYTE *)a2 + 152))
  {
    *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
    *((_QWORD *)a2 + 17) = 0;
    *((_QWORD *)a2 + 18) = 0;
    *(_BYTE *)(a1 + 152) = 1;
  }
  *(_BYTE *)(a1 + 160) = 1;
  return a1;
}

void sub_20AEE0F14()
{
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AEE0F28(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C3F2898;
  result[1] = v3;
  return result;
}

uint64_t sub_20AEE0F5C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C3F2898;
  a2[1] = v2;
  return result;
}

uint64_t sub_20AEE0F78(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_20AEE0F84(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFvRKN4cv3d3esn5ErrorEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFvRKN4cv3d3esn5ErrorEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFvRKN4cv3d3esn5ErrorEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFvRKN4cv3d3esn5ErrorEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AEE0FF0()
{
  return &unk_24C3F2908;
}

uint64_t *sub_20AEE0FFC()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630798);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630798))
  {
    v2 = sub_20AEE1304();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v7 = &qword_254630780;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254630788 = v5 + 1;
      unk_254630790 = v9 | 0x8000000000000000;
      qword_254630780 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254630788 = 0;
      unk_254630790 = 0;
      qword_254630780 = 0;
      byte_254630797 = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630780, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630798);
        return &qword_254630780;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630780;
}

void sub_20AEE1134(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630798);
  _Unwind_Resume(a1);
}

void sub_20AEE114C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637640);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637640))
  {
    sub_20AEE1204();
    if (byte_2546377D7 < 0)
    {
      sub_20AEC60F4(&xmmword_254637790, (void *)xmmword_2546377C0, *((unint64_t *)&xmmword_2546377C0 + 1));
    }
    else
    {
      xmmword_254637790 = xmmword_2546377C0;
      unk_2546377A0 = unk_2546377D0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637790, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637640);
  }
}

void sub_20AEE11EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637640);
  _Unwind_Resume(a1);
}

void sub_20AEE1204()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254637648);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637648))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZClient]", qword_2546377A8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546377A8, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637648);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254637650);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254637650))
    {
      sub_20B531658((uint64_t)qword_2546377A8, (uint64_t)&xmmword_2546377C0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546377C0, &dword_20AEBB000);
      __cxa_guard_release(&qword_254637650);
    }
  }
}

void sub_20AEE12D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637650);
  _Unwind_Resume(a1);
}

void sub_20AEE12EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637648);
  _Unwind_Resume(a1);
}

__int128 *sub_20AEE1304()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546307B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546307B8))
    return &xmmword_2546307A0;
  v2 = (char *)sub_20AEE13E0();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_2546307A0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_2546307B0 = *((_QWORD *)v2 + 2);
    xmmword_2546307A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546307A0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546307B8);
  return &xmmword_2546307A0;
}

void sub_20AEE13C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546307B8);
  _Unwind_Resume(a1);
}

void *sub_20AEE13E0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2546307D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546307D8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::esn::Error &)]", qword_2546307C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546307C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546307D8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546307F8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_2546307F8))
    return &unk_2546307E0;
  sub_20B531658((uint64_t)qword_2546307C0, (uint64_t)&unk_2546307E0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_2546307E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546307F8);
  return &unk_2546307E0;
}

void sub_20AEE14D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546307F8);
  _Unwind_Resume(a1);
}

void sub_20AEE14E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546307D8);
  _Unwind_Resume(a1);
}

void sub_20AEE1500()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254637668);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637668))
  {
    sub_20AEE114C();
    v1 = byte_2546377A7;
    if (byte_2546377A7 >= 0)
      v2 = byte_2546377A7;
    else
      v2 = *((_QWORD *)&xmmword_254637790 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254637810 = v2 + 6;
      unk_254637818 = v6 | 0x8000000000000000;
      qword_254637808 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254637810 = 0;
      unk_254637818 = 0;
      qword_254637808 = 0x2074736E6F63;
      byte_25463781F = v2 + 6;
      v4 = (char *)&qword_254637808 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254637808, &dword_20AEBB000);
        __cxa_guard_release(&qword_254637668);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254637790;
    else
      v8 = (__int128 *)xmmword_254637790;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20AEE1668(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637668);
  _Unwind_Resume(a1);
}

void sub_20AEE1680(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  __int128 v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  _BYTE v10[16];
  void *__p;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  __int128 *v21;
  __int128 *v22;
  __int128 __dst;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AEDF9CC();
  sub_20AEE0424();
  if (SHIBYTE(qword_2546376E0) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_2546376D0, *((unint64_t *)&xmmword_2546376D0 + 1));
  }
  else
  {
    __dst = xmmword_2546376D0;
    v24 = qword_2546376E0;
  }
  v5 = sub_20AEE0FFC();
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(&v25, (void *)*v5, v5[1]);
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v26 = v5[2];
    v25 = v6;
  }
  sub_20AEC7620(&v21, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v10, a2);
  sub_20AECD798(v4, &v21, (uint64_t)v10, **a1);
  if (!v20 || !v19)
    goto LABEL_15;
  if (!v18)
    goto LABEL_12;
  if ((v17 & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      goto LABEL_12;
LABEL_29:
    operator delete(v14);
    if (!v13)
      goto LABEL_15;
    goto LABEL_13;
  }
  operator delete(v16);
  if (v15 < 0)
    goto LABEL_29;
LABEL_12:
  if (!v13)
    goto LABEL_15;
LABEL_13:
  if (v12 < 0)
    operator delete(__p);
LABEL_15:
  v7 = v21;
  if (v21)
  {
    v8 = v22;
    v9 = v21;
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*((void **)v8 - 3));
        v8 = (__int128 *)((char *)v8 - 24);
      }
      while (v8 != v7);
      v9 = v21;
    }
    v22 = v7;
    operator delete(v9);
  }
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      return;
LABEL_27:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v25);
  if (SHIBYTE(v24) < 0)
    goto LABEL_27;
}

void sub_20AEE187C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECDEE0((uint64_t)va);
  sub_20AEC2E90((void **)(v2 - 120));
  if (*(char *)(v2 - 49) < 0)
    operator delete(*(void **)(v2 - 72));
  if (*(char *)(v2 - 73) < 0)
  {
    operator delete(*(void **)(v2 - 96));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20AEE18DC(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_20AECEBD0(v4, v1 + 1);
    sub_20AECF558((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22C0, (void (*)(void *))sub_20AECF5A8);
  }
  return result;
}

void sub_20AEE1958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCE40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AEE196C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_20AECCE40((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_20AEE1988(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEE199C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (!*(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_16;
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_16:
        if (!*(_BYTE *)(a1 + 40))
          return a1;
        goto LABEL_17;
      }
    }
    else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
LABEL_17:
    if (*(char *)(a1 + 39) < 0)
    {
      operator delete(*(void **)(a1 + 16));
      return a1;
    }
    return a1;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_20AEE1AB0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 152) && *(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if (!*(_BYTE *)(a1 + 112))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 112))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
LABEL_7:
  if (!*(_BYTE *)(a1 + 56) || (*(char *)(a1 + 55) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_20AEE1B34(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 136) && *(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if (!*(_BYTE *)(a1 + 96))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 96))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
LABEL_7:
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(char *)(a1 + 39) < 0)
      operator delete(*(void **)(a1 + 16));
  }
}

void sub_20AEE1BB0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 152) && *(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if (!*(_BYTE *)(a1 + 112))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 112))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
LABEL_7:
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AEE1C34(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 136) && *(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if (!*(_BYTE *)(a1 + 96))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 96))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
LABEL_7:
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(char *)(a1 + 39) < 0)
      operator delete(*(void **)(a1 + 16));
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AEE1CB8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD **)(a1 + 448);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 456);
    v4 = *(void **)(a1 + 448);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 448);
    }
    *(_QWORD *)(a1 + 456) = v2;
    operator delete(v4);
  }
  v7 = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 440) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  v8 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 432) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  v9 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  if (*(_BYTE *)(a1 + 400))
  {
    if (*(_BYTE *)(a1 + 360) && *(char *)(a1 + 359) < 0)
      operator delete(*(void **)(a1 + 336));
    if (*(_BYTE *)(a1 + 320) && *(char *)(a1 + 295) < 0)
      operator delete(*(void **)(a1 + 272));
    if (*(_BYTE *)(a1 + 264) && *(char *)(a1 + 263) < 0)
      operator delete(*(void **)(a1 + 240));
  }
  sub_20AED30E0(a1 + 32);
  return a1;
}

uint64_t sub_20AEE1DD0(uint64_t a1)
{
  return sub_20AEE1CB8(a1 - 16);
}

void sub_20AEE1DD8(uint64_t a1)
{
  sub_20AEE1CB8(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AEE1DFC(uint64_t a1)
{
  sub_20AEE1CB8(a1 - 16);
  JUMPOUT(0x20BD3583CLL);
}

_BYTE *sub_20AEE1E24(void **a1, uint64_t *a2, void **a3)
{
  _BYTE *result;
  uint64_t v7;
  uint64_t *v8;
  unsigned __int8 v9;
  void **v10;
  void **v11;
  void *v12;
  int v13;
  size_t v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char v20[16];
  void *v21;
  char v22;
  char v23;
  void *v24;
  char v25;
  void *__p;
  char v27;
  char v28;
  char v29;
  char v30;
  void *v31;
  void **v32;
  __int128 __dst;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  result = *a3;
  if (*a3)
  {
    if (*((_BYTE *)a2 + 16))
    {
      v7 = *a2;
      result[24] = *((_BYTE *)a2 + 8);
      *((_QWORD *)result + 2) = v7;
      result = *a3;
      *a1 = *a3;
      if (!result)
        return result;
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 16))(result);
    }
    *a3 = 0;
LABEL_9:
    (*(void (**)(_BYTE *))(*(_QWORD *)result + 24))(result);
    result = *a3;
    *a1 = *a3;
    if (!result)
      return result;
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 16))(result);
  }
  *a3 = 0;
  if (!*((_BYTE *)a2 + 16))
  {
LABEL_37:
    *a1 = 0;
    return result;
  }
  result = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  if (!result)
  {
    v8 = (uint64_t *)sub_20AEE78D4();
    v9 = atomic_load((unsigned __int8 *)&qword_254637820);
    if ((v9 & 1) != 0 || !__cxa_guard_acquire(&qword_254637820))
      goto LABEL_13;
    sub_20AEE7AD0();
    v13 = byte_254637927;
    if (byte_254637927 >= 0)
      v14 = byte_254637927;
    else
      v14 = qword_254637918;
    v15 = v14 + 1;
    if (v14 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v15 >= 0x17)
    {
      v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v17 = v15 | 7;
      v18 = v17 + 1;
      v16 = (__int128 *)operator new(v17 + 1);
      *((_QWORD *)&xmmword_2546378F8 + 1) = v14 + 1;
      unk_254637908 = v18 | 0x8000000000000000;
      *(_QWORD *)&xmmword_2546378F8 = v16;
    }
    else
    {
      unk_254637908 = 0;
      xmmword_2546378F8 = 0uLL;
      v16 = &xmmword_2546378F8;
      byte_25463790F = v14 + 1;
      if (!v14)
      {
LABEL_53:
        *(_WORD *)((char *)v16 + v14) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546378F8, &dword_20AEBB000);
        __cxa_guard_release(&qword_254637820);
LABEL_13:
        if (byte_25463790F < 0)
        {
          sub_20AEC60F4(&__dst, (void *)xmmword_2546378F8, *((unint64_t *)&xmmword_2546378F8 + 1));
        }
        else
        {
          __dst = xmmword_2546378F8;
          v34 = unk_254637908;
        }
        sub_20AEC7620(&v31, (uint64_t)&__dst, 1uLL);
        v20[0] = 0;
        v30 = 0;
        sub_20AECD798(v8, (__int128 **)&v31, (uint64_t)v20, 0);
        if (v30 && v29)
        {
          if (v28)
          {
            if (v27 < 0)
              operator delete(__p);
            if (v25 < 0)
              operator delete(v24);
          }
          if (v23 && v22 < 0)
            operator delete(v21);
        }
        v10 = (void **)v31;
        if (v31)
        {
          v11 = v32;
          v12 = v31;
          if (v32 != v31)
          {
            do
            {
              if (*((char *)v11 - 1) < 0)
                operator delete(*(v11 - 3));
              v11 -= 3;
            }
            while (v11 != v10);
            v12 = v31;
          }
          v32 = v10;
          operator delete(v12);
        }
        if (SHIBYTE(v34) < 0)
          operator delete((void *)__dst);
        result = *a3;
        *a3 = 0;
        if (result)
          goto LABEL_9;
        goto LABEL_37;
      }
    }
    if (v13 >= 0)
      v19 = &qword_254637910;
    else
      v19 = (uint64_t *)qword_254637910;
    memmove(v16, v19, v14);
    goto LABEL_53;
  }
  *((_OWORD *)result + 1) = *(_OWORD *)a2;
  *((_DWORD *)result + 7) = 1;
  *(_QWORD *)result = &off_24C3F50F0;
  *((_QWORD *)result + 1) = &unk_24C3F5140;
  *a3 = result;
  *a1 = result;
  return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 16))(result);
}

void sub_20AEE2194(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_guard_abort(&qword_254637820);
    sub_20AEC01C0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AEE21C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 568);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *(_QWORD *)(a1 + 560);
  *(_QWORD *)(a1 + 560) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  sub_20AED5474(a1 + 32);
  return a1;
}

uint64_t sub_20AEE221C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 552);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *(_QWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 544) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return sub_20AED5474(a1 + 16);
}

void sub_20AEE2268(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 568);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *(_QWORD *)(a1 + 560);
  *(_QWORD *)(a1 + 560) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  sub_20AED5474(a1 + 32);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AEE22CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 552);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *(_QWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 544) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  sub_20AED5474(a1 + 16);
  JUMPOUT(0x20BD3583CLL);
}

__int128 *VZDataGetImageDataPackageID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
  {
    v2 = xmmword_20B5B0AE0;
    sub_20B1DFBA8((uint64_t *)&v2);
    __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CF48);
  }
  if (byte_25463CDBF >= 0)
    return &xmmword_25463CDA8;
  else
    return (__int128 *)xmmword_25463CDA8;
}

void sub_20AEE23CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

uint64_t VZDataGetImageDataTypeID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CF48))
    return dword_25463CDC0;
  v2 = xmmword_20B5B0AE0;
  sub_20B1DFBA8((uint64_t *)&v2);
  __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463CF48);
  return dword_25463CDC0;
}

void sub_20AEE2480(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

__int128 *VZDataGetNumbersDataPackageID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
  {
    v2 = xmmword_20B5B0AE0;
    sub_20B1DFBA8((uint64_t *)&v2);
    __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CF48);
  }
  if (byte_25463CDDF >= 0)
    return &xmmword_25463CDC8;
  else
    return (__int128 *)xmmword_25463CDC8;
}

void sub_20AEE2530(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

uint64_t VZDataGetNumbersDataTypeID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CF48))
    return dword_25463CDE0;
  v2 = xmmword_20B5B0AE0;
  sub_20B1DFBA8((uint64_t *)&v2);
  __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463CF48);
  return dword_25463CDE0;
}

void sub_20AEE25E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

__int128 *VZDataGetPoints2DataPackageID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
  {
    v2 = xmmword_20B5B0AE0;
    sub_20B1DFBA8((uint64_t *)&v2);
    __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CF48);
  }
  if (byte_25463CDFF >= 0)
    return &xmmword_25463CDE8;
  else
    return (__int128 *)xmmword_25463CDE8;
}

void sub_20AEE2694(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

uint64_t VZDataGetPoints2DataTypeID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CF48))
    return dword_25463CE00;
  v2 = xmmword_20B5B0AE0;
  sub_20B1DFBA8((uint64_t *)&v2);
  __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463CF48);
  return dword_25463CE00;
}

void sub_20AEE2748(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

__int128 *VZDataGetPoints3DataPackageID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
  {
    v2 = xmmword_20B5B0AE0;
    sub_20B1DFBA8((uint64_t *)&v2);
    __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CF48);
  }
  if (byte_25463CE1F >= 0)
    return &xmmword_25463CE08;
  else
    return (__int128 *)xmmword_25463CE08;
}

void sub_20AEE27F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

uint64_t VZDataGetPoints3DataTypeID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CF48))
    return dword_25463CE20;
  v2 = xmmword_20B5B0AE0;
  sub_20B1DFBA8((uint64_t *)&v2);
  __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463CF48);
  return dword_25463CE20;
}

void sub_20AEE28AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

__int128 *VZDataGetCameraDataPackageID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
  {
    v2 = xmmword_20B5B0AE0;
    sub_20B1DFBA8((uint64_t *)&v2);
    __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CF48);
  }
  if (byte_25463CE3F >= 0)
    return &xmmword_25463CE28;
  else
    return (__int128 *)xmmword_25463CE28;
}

void sub_20AEE295C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

uint64_t VZDataGetCameraDataTypeID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CF48))
    return dword_25463CE40;
  v2 = xmmword_20B5B0AE0;
  sub_20B1DFBA8((uint64_t *)&v2);
  __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463CF48);
  return dword_25463CE40;
}

void sub_20AEE2A10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

__int128 *VZDataGetDictionaryDataPackageID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
  {
    v2 = xmmword_20B5B0AE0;
    sub_20B1DFBA8((uint64_t *)&v2);
    __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CF48);
  }
  if (byte_25463CE5F >= 0)
    return &xmmword_25463CE48;
  else
    return (__int128 *)xmmword_25463CE48;
}

void sub_20AEE2AC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

uint64_t VZDataGetDictionaryDataTypeID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CF48))
    return dword_25463CE60;
  v2 = xmmword_20B5B0AE0;
  sub_20B1DFBA8((uint64_t *)&v2);
  __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463CF48);
  return dword_25463CE60;
}

void sub_20AEE2B74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

__int128 *VZDataGetMeshDataPackageID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
  {
    v2 = xmmword_20B5B0AE0;
    sub_20B1DFBA8((uint64_t *)&v2);
    __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CF48);
  }
  if (byte_25463CE7F >= 0)
    return &xmmword_25463CE68;
  else
    return (__int128 *)xmmword_25463CE68;
}

void sub_20AEE2C24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

uint64_t VZDataGetMeshDataTypeID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CF48))
    return dword_25463CE80;
  v2 = xmmword_20B5B0AE0;
  sub_20B1DFBA8((uint64_t *)&v2);
  __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463CF48);
  return dword_25463CE80;
}

void sub_20AEE2CD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

__int128 *VZDataGetNumberDataPackageID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
  {
    v2 = xmmword_20B5B0AE0;
    sub_20B1DFBA8((uint64_t *)&v2);
    __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CF48);
  }
  if (byte_25463CE9F >= 0)
    return &xmmword_25463CE88;
  else
    return (__int128 *)xmmword_25463CE88;
}

void sub_20AEE2D88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

uint64_t VZDataGetNumberDataTypeID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CF48))
    return dword_25463CEA0;
  v2 = xmmword_20B5B0AE0;
  sub_20B1DFBA8((uint64_t *)&v2);
  __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463CF48);
  return dword_25463CEA0;
}

void sub_20AEE2E3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

__int128 *VZDataGetBlobDataPackageID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
  {
    v2 = xmmword_20B5B0AE0;
    sub_20B1DFBA8((uint64_t *)&v2);
    __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CF48);
  }
  if (byte_25463CEBF >= 0)
    return &xmmword_25463CEA8;
  else
    return (__int128 *)xmmword_25463CEA8;
}

void sub_20AEE2EEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

uint64_t VZDataGetBlobDataTypeID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CF48))
    return dword_25463CEC0;
  v2 = xmmword_20B5B0AE0;
  sub_20B1DFBA8((uint64_t *)&v2);
  __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463CF48);
  return dword_25463CEC0;
}

void sub_20AEE2FA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

__int128 *VZDataGetTransform3DataPackageID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
  {
    v2 = xmmword_20B5B0AE0;
    sub_20B1DFBA8((uint64_t *)&v2);
    __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CF48);
  }
  if (byte_25463CEFF >= 0)
    return &xmmword_25463CEE8;
  else
    return (__int128 *)xmmword_25463CEE8;
}

void sub_20AEE3050(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

uint64_t VZDataGetTransform3DataTypeID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CF48))
    return dword_25463CF00;
  v2 = xmmword_20B5B0AE0;
  sub_20B1DFBA8((uint64_t *)&v2);
  __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463CF48);
  return dword_25463CF00;
}

void sub_20AEE3104(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

__int128 *VZDataGetLines2DataPackageID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
  {
    v2 = xmmword_20B5B0AE0;
    sub_20B1DFBA8((uint64_t *)&v2);
    __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CF48);
  }
  if (byte_25463CF1F >= 0)
    return &xmmword_25463CF08;
  else
    return (__int128 *)xmmword_25463CF08;
}

void sub_20AEE31B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

uint64_t VZDataGetLines2DataTypeID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CF48))
    return dword_25463CF20;
  v2 = xmmword_20B5B0AE0;
  sub_20B1DFBA8((uint64_t *)&v2);
  __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463CF48);
  return dword_25463CF20;
}

void sub_20AEE3268(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

__int128 *VZDataGetLines3DataPackageID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
  {
    v2 = xmmword_20B5B0AE0;
    sub_20B1DFBA8((uint64_t *)&v2);
    __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CF48);
  }
  if (byte_25463CF3F >= 0)
    return &xmmword_25463CF28;
  else
    return (__int128 *)xmmword_25463CF28;
}

void sub_20AEE3318(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

uint64_t VZDataGetLines3DataTypeID()
{
  unsigned __int8 v0;
  __int128 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CF48))
    return dword_25463CF40;
  v2 = xmmword_20B5B0AE0;
  sub_20B1DFBA8((uint64_t *)&v2);
  __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463CF48);
  return dword_25463CF40;
}

void sub_20AEE33CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CF48);
  _Unwind_Resume(a1);
}

uint64_t VZReferenceIDGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546378A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546378A0))
    return qword_254637898;
  qword_254637898 = sub_20AECB130();
  __cxa_guard_release(&qword_2546378A0);
  return qword_254637898;
}

_BYTE *VZReferenceIDCreateFromString(uint64_t a1)
{
  if (sub_20AEE3494((uint64_t)"VZReferenceIDCreateFromString", a1, 0))
    return 0;
  else
    return sub_20AEE85A0((void (*)(void **__return_ptr, uint64_t))sub_20AFA550C, a1);
}

BOOL sub_20AEE3494(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t *v6;
  __int128 v7;
  void *v9[2];
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  void *v16[2];
  uint64_t v17;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  char v32;
  char v33;
  char v34;

  if (!a2)
  {
    v6 = sub_20AEE83DC();
    if (*((char *)v6 + 23) < 0)
    {
      sub_20AEC60F4(v9, (void *)*v6, v6[1]);
    }
    else
    {
      v7 = *(_OWORD *)v6;
      v10 = v6[2];
      *(_OWORD *)v9 = v7;
    }
    v11 = 1;
    sub_20AECCECC(a1, (uint64_t)v9, (uint64_t)&v12);
    v23 = v12;
    LOBYTE(v24) = 0;
    v33 = 0;
    if (v22)
    {
      v26 = 0;
      if (v15)
      {
        v24 = v13;
        v25 = v14;
        v14 = 0;
        v13 = 0uLL;
        v26 = 1;
      }
      LOBYTE(v27) = 0;
      v32 = 0;
      if (v21)
      {
        v28 = v17;
        v27 = *(_OWORD *)v16;
        v16[0] = 0;
        v16[1] = 0;
        v29 = v18;
        *(_OWORD *)__p = *(_OWORD *)v19;
        v31 = v20;
        v17 = 0;
        v19[0] = 0;
        v19[1] = 0;
        v20 = 0;
        v32 = 1;
      }
      v33 = 1;
    }
    v34 = 0;
    sub_20AECB410(&v23, a3);
    if (!v34 && v33)
    {
      if (v32)
      {
        if (SHIBYTE(v31) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v28) < 0)
          operator delete((void *)v27);
      }
      if (v26 && SHIBYTE(v25) < 0)
        operator delete((void *)v24);
    }
    if (v22)
    {
      if (v21)
      {
        if (SHIBYTE(v20) < 0)
          operator delete(v19[0]);
        if (SHIBYTE(v17) < 0)
          operator delete(v16[0]);
      }
      if (v15 && SHIBYTE(v14) < 0)
        operator delete((void *)v13);
    }
    if (v11 && SHIBYTE(v10) < 0)
      operator delete(v9[0]);
  }
  return a2 == 0;
}

void sub_20AEE368C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECD704((uint64_t)&a32);
  sub_20AECCE40((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_BYTE *VZReferenceIDCreateWithDataName(uint64_t a1)
{
  return sub_20AEE85A0((void (*)(void **__return_ptr, uint64_t))sub_20AFA56E4, a1);
}

_BYTE *VZReferenceIDCreateWithInstanceID(char *a1, char *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  unsigned __int128 v4;
  int v5;
  uint64_t *v6;
  __int128 v7;
  uint64_t *v8;
  __int128 v9;
  void **v10;
  void **v11;
  void *v12;
  void *v14;
  void **v15;
  void *__dst[2];
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  void *v20[2];
  void *v21;
  char v22;
  void *v23[2];
  void *v24;
  unsigned __int128 v25;
  void *v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  sub_20AFA5988(a1, a2, (uint64_t)v20);
  v2 = operator new(0xC0uLL, MEMORY[0x24BEDB6B8]);
  v3 = v2;
  if (!v2)
  {
    if (!v29)
      goto LABEL_15;
    goto LABEL_13;
  }
  *(_QWORD *)v2 = off_24C3F2180;
  v2[32] = 0;
  v2[56] = 0;
  if (v22)
  {
    *((_OWORD *)v2 + 2) = *(_OWORD *)v20;
    *((_QWORD *)v2 + 6) = v21;
    v20[1] = 0;
    v21 = 0;
    v20[0] = 0;
    v2[56] = 1;
  }
  v2[64] = 0;
  v2[112] = 0;
  if ((_BYTE)v26)
  {
    *((_OWORD *)v2 + 4) = *(_OWORD *)v23;
    *((_QWORD *)v2 + 10) = v24;
    v23[1] = 0;
    v24 = 0;
    v23[0] = 0;
    do
      v4 = __ldaxp(&v25);
    while (__stlxp(v4, &v25));
    *((_OWORD *)v2 + 6) = v4;
    v2[112] = 1;
  }
  v2[128] = 0;
  v2[152] = 0;
  v5 = v29;
  if (v29)
  {
    *((_OWORD *)v2 + 8) = __p;
    *((_QWORD *)v2 + 18) = v28;
    v28 = 0;
    __p = 0uLL;
    v2[152] = 1;
  }
  *((_OWORD *)v2 + 10) = v30;
  *((_QWORD *)v2 + 22) = v31;
  *((_DWORD *)v2 + 46) = 1;
  *(_QWORD *)v2 = off_24C3F2998;
  *((_QWORD *)v2 + 2) = &unk_24C3F29E8;
  if (v5)
  {
LABEL_13:
    if (SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
LABEL_15:
  if ((_BYTE)v26 && SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  if (v22 && SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  if (!v3)
  {
    sub_20AEE7EE4();
    v6 = sub_20AEE888C();
    if (*((char *)v6 + 23) < 0)
    {
      sub_20AEC60F4(__dst, (void *)*v6, v6[1]);
    }
    else
    {
      v7 = *(_OWORD *)v6;
      v17 = v6[2];
      *(_OWORD *)__dst = v7;
    }
    v8 = sub_20AEE888C();
    if (*((char *)v8 + 23) < 0)
    {
      sub_20AEC60F4(&v18, (void *)*v8, v8[1]);
    }
    else
    {
      v9 = *(_OWORD *)v8;
      v19 = v8[2];
      v18 = v9;
    }
    sub_20AEC7620(&v14, (uint64_t)__dst, 2uLL);
    LOBYTE(v20[0]) = 0;
    v29 = 0;
    sub_20AECD798((uint64_t *)&xmmword_254637970, (__int128 **)&v14, (uint64_t)v20, 0);
    if (v29 && (_BYTE)v28)
    {
      if (BYTE8(__p))
      {
        if (SBYTE7(__p) < 0)
          operator delete(v26);
        if (SBYTE7(v25) < 0)
          operator delete(v24);
      }
      if (LOBYTE(v23[1]) && SHIBYTE(v23[0]) < 0)
        operator delete(v21);
    }
    v10 = (void **)v14;
    if (v14)
    {
      v11 = v15;
      v12 = v14;
      if (v15 != v14)
      {
        do
        {
          if (*((char *)v11 - 1) < 0)
            operator delete(*(v11 - 3));
          v11 -= 3;
        }
        while (v11 != v10);
        v12 = v14;
      }
      v15 = v10;
      operator delete(v12);
    }
    if (SHIBYTE(v19) < 0)
    {
      operator delete((void *)v18);
      if ((SHIBYTE(v17) & 0x80000000) == 0)
        return 0;
    }
    else if ((SHIBYTE(v17) & 0x80000000) == 0)
    {
      return 0;
    }
    operator delete(__dst[0]);
    return 0;
  }
  return v3;
}

void sub_20AEE39F0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x20AEE3860);
  }
  _Unwind_Resume(a1);
}

_BYTE *VZReferenceIDCreateWithIntegerInstanceID(char *a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  unsigned __int128 v4;
  int v5;
  uint64_t *v6;
  __int128 v7;
  unsigned __int8 v8;
  void **v9;
  void **v10;
  void *v11;
  void *v13;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void *v19[2];
  void *v20;
  char v21;
  void *v22[2];
  void *v23;
  unsigned __int128 v24;
  void *v25;
  __int128 __p;
  uint64_t v27;
  unsigned __int8 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  sub_20AFA5E30(a1, a2, (uint64_t)v19);
  v2 = operator new(0xC0uLL, MEMORY[0x24BEDB6B8]);
  v3 = v2;
  if (!v2)
  {
    if (!v28)
      goto LABEL_15;
    goto LABEL_13;
  }
  *(_QWORD *)v2 = off_24C3F2180;
  v2[32] = 0;
  v2[56] = 0;
  if (v21)
  {
    *((_OWORD *)v2 + 2) = *(_OWORD *)v19;
    *((_QWORD *)v2 + 6) = v20;
    v19[1] = 0;
    v20 = 0;
    v19[0] = 0;
    v2[56] = 1;
  }
  v2[64] = 0;
  v2[112] = 0;
  if ((_BYTE)v25)
  {
    *((_OWORD *)v2 + 4) = *(_OWORD *)v22;
    *((_QWORD *)v2 + 10) = v23;
    v22[1] = 0;
    v23 = 0;
    v22[0] = 0;
    do
      v4 = __ldaxp(&v24);
    while (__stlxp(v4, &v24));
    *((_OWORD *)v2 + 6) = v4;
    v2[112] = 1;
  }
  v2[128] = 0;
  v2[152] = 0;
  v5 = v28;
  if (v28)
  {
    *((_OWORD *)v2 + 8) = __p;
    *((_QWORD *)v2 + 18) = v27;
    v27 = 0;
    __p = 0uLL;
    v2[152] = 1;
  }
  *((_OWORD *)v2 + 10) = v29;
  *((_QWORD *)v2 + 22) = v30;
  *((_DWORD *)v2 + 46) = 1;
  *(_QWORD *)v2 = off_24C3F2998;
  *((_QWORD *)v2 + 2) = &unk_24C3F29E8;
  if (v5)
  {
LABEL_13:
    if (SHIBYTE(v27) < 0)
      operator delete((void *)__p);
  }
LABEL_15:
  if ((_BYTE)v25 && SHIBYTE(v23) < 0)
    operator delete(v22[0]);
  if (v21 && SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  if (!v3)
  {
    sub_20AEE7EE4();
    v6 = sub_20AEE888C();
    if (*((char *)v6 + 23) < 0)
    {
      sub_20AEC60F4(__dst, (void *)*v6, v6[1]);
    }
    else
    {
      v7 = *(_OWORD *)v6;
      v16 = v6[2];
      *(_OWORD *)__dst = v7;
    }
    v8 = atomic_load((unsigned __int8 *)&qword_2546378A8);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2546378A8))
    {
      unk_254637A70 = 0x600000000000000;
      xmmword_254637A60 = 0x263436746E69uLL;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637A60, &dword_20AEBB000);
      __cxa_guard_release(&qword_2546378A8);
    }
    if (byte_254637A77 < 0)
    {
      sub_20AEC60F4(&v17, (void *)xmmword_254637A60, *((unint64_t *)&xmmword_254637A60 + 1));
    }
    else
    {
      v17 = xmmword_254637A60;
      v18 = unk_254637A70;
    }
    sub_20AEC7620(&v13, (uint64_t)__dst, 2uLL);
    LOBYTE(v19[0]) = 0;
    v28 = 0;
    sub_20AECD798((uint64_t *)&xmmword_254637970, (__int128 **)&v13, (uint64_t)v19, 0);
    if (v28 && (_BYTE)v27)
    {
      if (BYTE8(__p))
      {
        if (SBYTE7(__p) < 0)
          operator delete(v25);
        if (SBYTE7(v24) < 0)
          operator delete(v23);
      }
      if (LOBYTE(v22[1]) && SHIBYTE(v22[0]) < 0)
        operator delete(v20);
    }
    v9 = (void **)v13;
    if (v13)
    {
      v10 = v14;
      v11 = v13;
      if (v14 != v13)
      {
        do
        {
          if (*((char *)v10 - 1) < 0)
            operator delete(*(v10 - 3));
          v10 -= 3;
        }
        while (v10 != v9);
        v11 = v13;
      }
      v14 = v9;
      operator delete(v11);
    }
    if (SHIBYTE(v18) < 0)
    {
      operator delete((void *)v17);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        return 0;
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      return 0;
    }
    operator delete(__dst[0]);
    return 0;
  }
  return v3;
}

void sub_20AEE3DA0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x20AEE3B98);
  }
  _Unwind_Resume(a1);
}

_QWORD *VZReferenceIDGetAsString(uint64_t a1)
{
  if (sub_20AEE3E04((uint64_t)"VZReferenceIDGetAsString", a1))
    return 0;
  else
    return sub_20AFA6214(a1 + 32);
}

BOOL sub_20AEE3E04(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v7;
  size_t v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  char v37;
  char v38;
  char v39;

  if (a2)
    return a2 == 0;
  v4 = atomic_load((unsigned __int8 *)&qword_2546378B0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546378B0))
  {
    sub_20AEE89D0();
    v7 = byte_254637AA7;
    if (byte_254637AA7 >= 0)
      v8 = byte_254637AA7;
    else
      v8 = qword_254637A98;
    v9 = v8 + 1;
    if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v9 >= 0x17)
    {
      v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v11 = v9 | 7;
      v12 = v11 + 1;
      v10 = (__int128 *)operator new(v11 + 1);
      *((_QWORD *)&xmmword_254637A78 + 1) = v8 + 1;
      unk_254637A88 = v12 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254637A78 = v10;
    }
    else
    {
      unk_254637A88 = 0;
      xmmword_254637A78 = 0uLL;
      v10 = &xmmword_254637A78;
      byte_254637A8F = v8 + 1;
      if (!v8)
      {
LABEL_53:
        *(_WORD *)((char *)v10 + v8) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637A78, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546378B0);
        goto LABEL_3;
      }
    }
    if (v7 >= 0)
      v13 = &qword_254637A90;
    else
      v13 = (uint64_t *)qword_254637A90;
    memmove(v10, v13, v8);
    goto LABEL_53;
  }
LABEL_3:
  if (byte_254637A8F < 0)
  {
    sub_20AEC60F4(v14, (void *)xmmword_254637A78, *((unint64_t *)&xmmword_254637A78 + 1));
  }
  else
  {
    *(_OWORD *)v14 = xmmword_254637A78;
    v15 = unk_254637A88;
  }
  v16 = 1;
  sub_20AECCECC(a1, (uint64_t)v14, (uint64_t)&v17);
  v28 = v17;
  LOBYTE(v29) = 0;
  v38 = 0;
  if (v27)
  {
    v31 = 0;
    if (v20)
    {
      v29 = v18;
      v30 = v19;
      v19 = 0;
      v18 = 0uLL;
      v31 = 1;
    }
    LOBYTE(v32) = 0;
    v37 = 0;
    if (v26)
    {
      v33 = v22;
      v32 = *(_OWORD *)v21;
      v21[0] = 0;
      v21[1] = 0;
      v34 = v23;
      *(_OWORD *)__p = *(_OWORD *)v24;
      v36 = v25;
      v22 = 0;
      v24[0] = 0;
      v24[1] = 0;
      v25 = 0;
      v37 = 1;
    }
    v38 = 1;
  }
  v39 = 0;
  v5 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v28);
  if (!v39 && v38)
  {
    if (v37)
    {
      if (SHIBYTE(v36) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
    }
    if (v31 && SHIBYTE(v30) < 0)
      operator delete((void *)v29);
  }
  if (v27)
  {
    if (v26)
    {
      if (SHIBYTE(v25) < 0)
        operator delete(v24[0]);
      if (SHIBYTE(v22) < 0)
        operator delete(v21[0]);
    }
    if (v20 && SHIBYTE(v19) < 0)
      operator delete((void *)v18);
  }
  if (v16 && SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  return a2 == 0;
}

void sub_20AEE4178(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546378B0);
  _Unwind_Resume(a1);
}

void sub_20AEE4190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VZReferenceIDGetName(uint64_t a1)
{
  if (sub_20AEE3E04((uint64_t)"VZReferenceIDGetName", a1) || !*(_BYTE *)(a1 + 56))
    return 0;
  if (*(char *)(a1 + 55) < 0)
  {
    if (*(_QWORD *)(a1 + 40))
      return *(_QWORD *)(a1 + 32);
    return 0;
  }
  if (*(_BYTE *)(a1 + 55))
    return a1 + 32;
  else
    return 0;
}

uint64_t VZReferenceIDGetInstanceID(uint64_t a1)
{
  uint64_t v2;
  int v3;

  if (sub_20AEE3E04((uint64_t)"VZReferenceIDGetInstanceID", a1) || !*(_BYTE *)(a1 + 112))
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 87);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a1 + 72);
  if (!v2)
    return 0;
  if (v3 >= 0)
    return a1 + 64;
  return *(_QWORD *)(a1 + 64);
}

uint64_t VZReferenceIDGetInstanceIDAsInteger(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if (sub_20AEE3E04((uint64_t)"VZReferenceIDGetInstanceIDAsInteger", a1) || !*(_BYTE *)(a1 + 112))
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 87);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a1 + 72);
  if (!v2)
    return 0;
  if (*(_BYTE *)(a1 + 176))
  {
    if (*(_BYTE *)(a1 + 168))
      return a1 + 160;
    else
      return 0;
  }
  else
  {
    *(_QWORD *)(a1 + 160) = sub_20B2161D0((std::string *)(a1 + 64));
    *(_QWORD *)(a1 + 168) = v4;
    *(_BYTE *)(a1 + 176) = 1;
    if ((_BYTE)v4)
      return a1 + 160;
    else
      return 0;
  }
}

uint64_t VZDataInfoGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546378C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546378C8))
    return qword_2546378C0;
  qword_2546378C0 = sub_20AECB130();
  __cxa_guard_release(&qword_2546378C8);
  return qword_2546378C0;
}

_OWORD *VZDataInfoCreate()
{
  _OWORD *result;
  uint64_t *v1;
  __int128 *v2;
  __int128 *v3;
  __int128 *v4;
  _BYTE v5[16];
  void *v6;
  char v7;
  char v8;
  void *v9;
  char v10;
  void *__p;
  char v12;
  char v13;
  char v14;
  char v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;

  result = operator new(0x1E0uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[28] = 0u;
    result[29] = 0u;
    result[26] = 0u;
    result[27] = 0u;
    result[24] = 0u;
    result[25] = 0u;
    result[22] = 0u;
    result[23] = 0u;
    result[20] = 0u;
    result[21] = 0u;
    result[18] = 0u;
    result[19] = 0u;
    result[16] = 0u;
    result[17] = 0u;
    result[14] = 0u;
    result[15] = 0u;
    result[12] = 0u;
    result[13] = 0u;
    result[10] = 0u;
    result[11] = 0u;
    result[8] = 0u;
    result[9] = 0u;
    result[6] = 0u;
    result[7] = 0u;
    result[4] = 0u;
    result[5] = 0u;
    result[2] = 0u;
    result[3] = 0u;
    *result = 0u;
    result[1] = 0u;
    *((_DWORD *)result + 104) = 1;
    *(_QWORD *)result = &off_24C3F2AA8;
    *((_QWORD *)result + 2) = &unk_24C3F2AF8;
    *(_OWORD *)((char *)result + 424) = 0u;
    *(_OWORD *)((char *)result + 440) = 0u;
    *(_OWORD *)((char *)result + 456) = 0u;
  }
  else
  {
    v1 = (uint64_t *)sub_20AED3DA0();
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v5[0] = 0;
    v15 = 0;
    sub_20AECD798(v1, &v16, (uint64_t)v5, 0);
    if (v15 && v14)
    {
      if (v13)
      {
        if (v12 < 0)
          operator delete(__p);
        if (v10 < 0)
          operator delete(v9);
      }
      if (v8 && v7 < 0)
        operator delete(v6);
    }
    v2 = v16;
    if (v16)
    {
      v3 = v17;
      v4 = v16;
      if (v17 != v16)
      {
        do
        {
          if (*((char *)v3 - 1) < 0)
            operator delete(*((void **)v3 - 3));
          v3 = (__int128 *)((char *)v3 - 24);
        }
        while (v3 != v2);
        v4 = v16;
      }
      v17 = v2;
      operator delete(v4);
    }
    return 0;
  }
  return result;
}

double VZDataInfoSetName(uint64_t a1, const char *a2)
{
  double result;

  if (!sub_20AEE4558((uint64_t)"VZDataInfoSetName", a1))
    return sub_20AEE4900(a2, a1 + 32);
  return result;
}

BOOL sub_20AEE4558(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  __int128 *v7;
  const void **v8;
  int v9;
  size_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  void *v16[2];
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  void *v23[2];
  uint64_t v24;
  uint64_t v25;
  void *v26[2];
  uint64_t v27;
  char v28;
  char v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  void *__p[2];
  uint64_t v38;
  char v39;
  char v40;
  char v41;

  if (a2)
    return a2 == 0;
  v4 = atomic_load((unsigned __int8 *)&qword_2546378D0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546378D0))
  {
    v7 = sub_20AED3DA0();
    v8 = (const void **)v7;
    v9 = *((char *)v7 + 23);
    if (v9 >= 0)
      v10 = *((unsigned __int8 *)v7 + 23);
    else
      v10 = *((_QWORD *)v7 + 1);
    v11 = v10 + 1;
    if (v10 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v11 >= 0x17)
    {
      v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v13 = v11 | 7;
      v14 = v13 + 1;
      v12 = (__int128 *)operator new(v13 + 1);
      *((_QWORD *)&xmmword_254637AA8 + 1) = v10 + 1;
      unk_254637AB8 = v14 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254637AA8 = v12;
    }
    else
    {
      unk_254637AB8 = 0;
      xmmword_254637AA8 = 0uLL;
      v12 = &xmmword_254637AA8;
      byte_254637ABF = v10 + 1;
      if (!v10)
      {
LABEL_53:
        *(_WORD *)((char *)v12 + v10) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637AA8, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546378D0);
        goto LABEL_3;
      }
    }
    if (v9 >= 0)
      v15 = v8;
    else
      v15 = *v8;
    memmove(v12, v15, v10);
    goto LABEL_53;
  }
LABEL_3:
  if (byte_254637ABF < 0)
  {
    sub_20AEC60F4(v16, (void *)xmmword_254637AA8, *((unint64_t *)&xmmword_254637AA8 + 1));
  }
  else
  {
    *(_OWORD *)v16 = xmmword_254637AA8;
    v17 = unk_254637AB8;
  }
  v18 = 1;
  sub_20AECCECC(a1, (uint64_t)v16, (uint64_t)&v19);
  v30 = v19;
  LOBYTE(v31) = 0;
  v40 = 0;
  if (v29)
  {
    v33 = 0;
    if (v22)
    {
      v31 = v20;
      v32 = v21;
      v21 = 0;
      v20 = 0uLL;
      v33 = 1;
    }
    LOBYTE(v34) = 0;
    v39 = 0;
    if (v28)
    {
      v35 = v24;
      v34 = *(_OWORD *)v23;
      v23[0] = 0;
      v23[1] = 0;
      v36 = v25;
      *(_OWORD *)__p = *(_OWORD *)v26;
      v38 = v27;
      v24 = 0;
      v26[0] = 0;
      v26[1] = 0;
      v27 = 0;
      v39 = 1;
    }
    v40 = 1;
  }
  v41 = 0;
  v5 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v30);
  if (!v41 && v40)
  {
    if (v39)
    {
      if (SHIBYTE(v38) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v35) < 0)
        operator delete((void *)v34);
    }
    if (v33 && SHIBYTE(v32) < 0)
      operator delete((void *)v31);
  }
  if (v29)
  {
    if (v28)
    {
      if (SHIBYTE(v27) < 0)
        operator delete(v26[0]);
      if (SHIBYTE(v24) < 0)
        operator delete(v23[0]);
    }
    if (v22 && SHIBYTE(v21) < 0)
      operator delete((void *)v20);
  }
  if (v18 && SHIBYTE(v17) < 0)
    operator delete(v16[0]);
  return a2 == 0;
}

void sub_20AEE48C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546378D0);
  _Unwind_Resume(a1);
}

void sub_20AEE48DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_20AEE4900(const char *a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  double result;
  uint64_t v8;
  uint64_t v9;
  __int128 __dst;
  unint64_t v11;

  if (a1)
  {
    v4 = strlen(a1);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v8 = v4 | 7;
      v9 = v8 + 1;
      p_dst = (__int128 *)operator new(v8 + 1);
      *((_QWORD *)&__dst + 1) = v5;
      v11 = v9 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v11) = v4;
      p_dst = &__dst;
      if (!v4)
      {
        LOBYTE(__dst) = 0;
        if (!*(_BYTE *)(a2 + 24))
          goto LABEL_18;
        goto LABEL_16;
      }
    }
    memcpy(p_dst, a1, v5);
    *((_BYTE *)p_dst + v5) = 0;
    if (!*(_BYTE *)(a2 + 24))
    {
LABEL_18:
      result = *(double *)&__dst;
      *(_OWORD *)a2 = __dst;
      *(_QWORD *)(a2 + 16) = v11;
      *(_BYTE *)(a2 + 24) = 1;
      return result;
    }
LABEL_16:
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    goto LABEL_18;
  }
  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_BYTE *)(a2 + 24) = 0;
  }
  return result;
}

void sub_20AEE4A28(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;

  __cxa_begin_catch(a1);
  v1 = sub_20AEE83DC();
  v2 = (uint64_t *)sub_20AEE8B50();
  sub_20AECDF74((std::string::size_type)v1, v2, 0);
  __cxa_end_catch();
  JUMPOUT(0x20AEE4978);
}

uint64_t VZDataInfoGetName(uint64_t a1)
{
  uint64_t result;

  if (sub_20AEE4AC0((uint64_t)"VZDataInfoGetName", a1))
    return 0;
  if (!*(_BYTE *)(a1 + 56))
    return 0;
  result = a1 + 32;
  if (*(char *)(a1 + 55) < 0)
    return *(_QWORD *)result;
  return result;
}

BOOL sub_20AEE4AC0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v7;
  size_t v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  char v37;
  char v38;
  char v39;

  if (a2)
    return a2 == 0;
  v4 = atomic_load((unsigned __int8 *)&qword_2546378D8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546378D8))
  {
    sub_20AEE9010();
    v7 = byte_254637AEF;
    if (byte_254637AEF >= 0)
      v8 = byte_254637AEF;
    else
      v8 = qword_254637AE0;
    v9 = v8 + 1;
    if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v9 >= 0x17)
    {
      v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v11 = v9 | 7;
      v12 = v11 + 1;
      v10 = (__int128 *)operator new(v11 + 1);
      *((_QWORD *)&xmmword_254637AC0 + 1) = v8 + 1;
      unk_254637AD0 = v12 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254637AC0 = v10;
    }
    else
    {
      unk_254637AD0 = 0;
      xmmword_254637AC0 = 0uLL;
      v10 = &xmmword_254637AC0;
      byte_254637AD7 = v8 + 1;
      if (!v8)
      {
LABEL_53:
        *(_WORD *)((char *)v10 + v8) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637AC0, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546378D8);
        goto LABEL_3;
      }
    }
    if (v7 >= 0)
      v13 = &qword_254637AD8;
    else
      v13 = (uint64_t *)qword_254637AD8;
    memmove(v10, v13, v8);
    goto LABEL_53;
  }
LABEL_3:
  if (byte_254637AD7 < 0)
  {
    sub_20AEC60F4(v14, (void *)xmmword_254637AC0, *((unint64_t *)&xmmword_254637AC0 + 1));
  }
  else
  {
    *(_OWORD *)v14 = xmmword_254637AC0;
    v15 = unk_254637AD0;
  }
  v16 = 1;
  sub_20AECCECC(a1, (uint64_t)v14, (uint64_t)&v17);
  v28 = v17;
  LOBYTE(v29) = 0;
  v38 = 0;
  if (v27)
  {
    v31 = 0;
    if (v20)
    {
      v29 = v18;
      v30 = v19;
      v19 = 0;
      v18 = 0uLL;
      v31 = 1;
    }
    LOBYTE(v32) = 0;
    v37 = 0;
    if (v26)
    {
      v33 = v22;
      v32 = *(_OWORD *)v21;
      v21[0] = 0;
      v21[1] = 0;
      v34 = v23;
      *(_OWORD *)__p = *(_OWORD *)v24;
      v36 = v25;
      v22 = 0;
      v24[0] = 0;
      v24[1] = 0;
      v25 = 0;
      v37 = 1;
    }
    v38 = 1;
  }
  v39 = 0;
  v5 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v28);
  if (!v39 && v38)
  {
    if (v37)
    {
      if (SHIBYTE(v36) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
    }
    if (v31 && SHIBYTE(v30) < 0)
      operator delete((void *)v29);
  }
  if (v27)
  {
    if (v26)
    {
      if (SHIBYTE(v25) < 0)
        operator delete(v24[0]);
      if (SHIBYTE(v22) < 0)
        operator delete(v21[0]);
    }
    if (v20 && SHIBYTE(v19) < 0)
      operator delete((void *)v18);
  }
  if (v16 && SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  return a2 == 0;
}

void sub_20AEE4E34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546378D8);
  _Unwind_Resume(a1);
}

void sub_20AEE4E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VZDataInfoGetInstanceID(uint64_t a1)
{
  char v2;
  uint64_t v3;
  int v4;

  if (sub_20AEE4AC0((uint64_t)"VZDataInfoGetInstanceID", a1))
    return 0;
  if (!*(_BYTE *)(a1 + 112))
    return 0;
  if (!*(_BYTE *)(a1 + 400))
  {
    sub_20AFA69B8(a1 + 32);
    if (!v2)
      return 0;
  }
  if (!*(_BYTE *)(a1 + 320))
    return 0;
  v3 = *(unsigned __int8 *)(a1 + 295);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 280);
  if (!v3)
    return 0;
  if (v4 >= 0)
    return a1 + 272;
  return *(_QWORD *)(a1 + 272);
}

unint64_t VZDataInfoGetInstanceIDAsInteger(uint64_t a1)
{
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;

  if (sub_20AEE4AC0((uint64_t)"VZDataInfoGetInstanceIDAsInteger", a1))
    return 0;
  if (!*(_BYTE *)(a1 + 112))
    return 0;
  if (!*(_BYTE *)(a1 + 400))
  {
    sub_20AFA69B8(a1 + 32);
    if (!v2)
      return 0;
  }
  if (!*(_BYTE *)(a1 + 320))
    return 0;
  v3 = *(unsigned __int8 *)(a1 + 295);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 280);
  if (!v3)
    return v3;
  if (*(_BYTE *)(a1 + 384))
  {
    v4 = *(unsigned __int8 *)(a1 + 376);
  }
  else
  {
    *(_QWORD *)(a1 + 368) = sub_20B2161D0((std::string *)(a1 + 272));
    *(_QWORD *)(a1 + 376) = v6;
    *(_BYTE *)(a1 + 384) = 1;
    v4 = v6;
  }
  v7 = (a1 + 368) & 0xFFFFFFFFFFFFFF00;
  v8 = v4 == 0;
  if (v4)
    v9 = (a1 + 112);
  else
    v9 = 0;
  if (v8)
    v7 = 0;
  return v7 | v9;
}

void VZDataInfoSetInstanceID(uint64_t a1, char *a2)
{
  if (!sub_20AEE4558((uint64_t)"VZDataInfoSetInstanceID", a1))
    sub_20AFA7320(a1 + 32, a2);
}

void VZDataInfoSetInstanceIDFromInteger(uint64_t a1, uint64_t a2)
{
  if (!sub_20AEE4558((uint64_t)"VZDataInfoSetInstanceIDFromInteger", a1))
    sub_20AFA750C(a1 + 32, a2);
}

void VZDataInfoSetReferenceIDFromString(uint64_t a1, char *a2)
{
  if (!sub_20AEE4558((uint64_t)"VZDataInfoSetReferenceIDFromString", a1))
    sub_20AFA674C(a1 + 32, a2);
}

void VZDataInfoSetReferenceID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (!sub_20AEE4558((uint64_t)"VZDataInfoSetReferenceID", a1))
  {
    if (a2)
      v4 = a2 + 32;
    else
      v4 = 0;
    sub_20AFA6538(a1 + 32, v4, a2 != 0);
  }
}

uint64_t VZDataInfoGetReferenceID(uint64_t a1)
{
  unint64_t v3;
  unsigned __int8 *v4;
  char v5;
  _BYTE *v6;
  _BYTE *v7;
  __int128 v8;
  __int128 v9;
  unsigned int *v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  unsigned __int8 v14;
  void **v15;
  void **v16;
  void *v17;
  unsigned __int8 v18;
  int v19;
  size_t v20;
  unint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  size_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  char v34[16];
  void *v35;
  char v36;
  char v37;
  void *v38;
  char v39;
  void *__p;
  char v41;
  char v42;
  char v43;
  char v44;
  void *v45;
  void **v46;
  __int128 __dst;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (sub_20AEE4AC0((uint64_t)"VZDataInfoGetReferenceID", a1))
    return 0;
  v3 = sub_20AFA69B8(a1 + 32);
  v4 = *(unsigned __int8 **)(a1 + 424);
  if (!v5)
  {
    *(_QWORD *)(a1 + 424) = 0;
    if (v4)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v4 + 24))(v4);
    return *(_QWORD *)(a1 + 424);
  }
  if (!v4 || (sub_20B2167B8(v4 + 32, (unsigned __int8 *)v3) & 1) == 0)
  {
    v6 = operator new(0xC0uLL, MEMORY[0x24BEDB6B8]);
    if (v6)
    {
      v7 = v6;
      *(_QWORD *)v6 = off_24C3F2180;
      sub_20AED3B1C(v6 + 32, (__int128 *)v3);
      v7[128] = 0;
      v7[152] = 0;
      if (*(_BYTE *)(v3 + 120))
      {
        if (*(char *)(v3 + 119) < 0)
        {
          sub_20AEC60F4(v7 + 128, *(void **)(v3 + 96), *(_QWORD *)(v3 + 104));
        }
        else
        {
          v8 = *(_OWORD *)(v3 + 96);
          *((_QWORD *)v7 + 18) = *(_QWORD *)(v3 + 112);
          *((_OWORD *)v7 + 8) = v8;
        }
        v7[152] = 1;
      }
      v9 = *(_OWORD *)(v3 + 128);
      *((_QWORD *)v7 + 22) = *(_QWORD *)(v3 + 144);
      *((_DWORD *)v7 + 46) = 1;
      v10 = (unsigned int *)(v7 + 184);
      *((_OWORD *)v7 + 10) = v9;
      *(_QWORD *)v7 = off_24C3F2998;
      *((_QWORD *)v7 + 2) = &unk_24C3F29E8;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = 0;
      v13 = *(_QWORD *)(a1 + 424);
      *(_QWORD *)(a1 + 424) = v7;
      if (!v13)
        goto LABEL_18;
      goto LABEL_17;
    }
    sub_20AEE7EE4();
    v14 = atomic_load((unsigned __int8 *)&qword_254637860);
    if ((v14 & 1) != 0 || !__cxa_guard_acquire(&qword_254637860))
    {
LABEL_22:
      if (byte_2546379CF < 0)
      {
        sub_20AEC60F4(&__dst, (void *)xmmword_2546379B8, *((unint64_t *)&xmmword_2546379B8 + 1));
      }
      else
      {
        __dst = xmmword_2546379B8;
        v48 = unk_2546379C8;
      }
      sub_20AEC7620(&v45, (uint64_t)&__dst, 1uLL);
      v34[0] = 0;
      v44 = 0;
      sub_20AECD798((uint64_t *)&xmmword_254637970, (__int128 **)&v45, (uint64_t)v34, 0);
      if (v44 && v43)
      {
        if (v42)
        {
          if (v41 < 0)
            operator delete(__p);
          if (v39 < 0)
            operator delete(v38);
        }
        if (v37 && v36 < 0)
          operator delete(v35);
      }
      v15 = (void **)v45;
      if (v45)
      {
        v16 = v46;
        v17 = v45;
        if (v46 != v45)
        {
          do
          {
            if (*((char *)v16 - 1) < 0)
              operator delete(*(v16 - 3));
            v16 -= 3;
          }
          while (v16 != v15);
          v17 = v45;
        }
        v46 = v15;
        operator delete(v17);
      }
      if (SHIBYTE(v48) < 0)
      {
        operator delete((void *)__dst);
        v7 = 0;
        v12 = 1;
        v13 = *(_QWORD *)(a1 + 424);
        *(_QWORD *)(a1 + 424) = 0;
        if (!v13)
        {
LABEL_18:
          if ((v12 & 1) == 0)
            (*(void (**)(_BYTE *))(*(_QWORD *)v7 + 24))(v7);
          return *(_QWORD *)(a1 + 424);
        }
      }
      else
      {
        v7 = 0;
        v12 = 1;
        v13 = *(_QWORD *)(a1 + 424);
        *(_QWORD *)(a1 + 424) = 0;
        if (!v13)
          goto LABEL_18;
      }
LABEL_17:
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      goto LABEL_18;
    }
    v18 = atomic_load((unsigned __int8 *)&qword_254637868);
    if ((v18 & 1) != 0 || !__cxa_guard_acquire(&qword_254637868))
    {
LABEL_50:
      v19 = byte_2546379E7;
      if (byte_2546379E7 >= 0)
        v20 = byte_2546379E7;
      else
        v20 = qword_2546379D8;
      v21 = v20 + 1;
      if (v20 + 1 > 0x7FFFFFFFFFFFFFF7)
        sub_20AEC0138();
      if (v21 >= 0x17)
      {
        v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17)
          v23 = v21 | 7;
        v24 = v23 + 1;
        v22 = (__int128 *)operator new(v23 + 1);
        *((_QWORD *)&xmmword_2546379B8 + 1) = v20 + 1;
        unk_2546379C8 = v24 | 0x8000000000000000;
        *(_QWORD *)&xmmword_2546379B8 = v22;
      }
      else
      {
        v22 = &xmmword_2546379B8;
        unk_2546379C8 = 0;
        xmmword_2546379B8 = 0uLL;
        byte_2546379CF = v20 + 1;
        if (!v20)
        {
LABEL_64:
          *(_WORD *)((char *)v22 + v20) = 38;
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546379B8, &dword_20AEBB000);
          __cxa_guard_release(&qword_254637860);
          goto LABEL_22;
        }
      }
      if (v19 >= 0)
        v25 = &qword_2546379D0;
      else
        v25 = (uint64_t *)qword_2546379D0;
      memmove(v22, v25, v20);
      goto LABEL_64;
    }
    sub_20AEE809C();
    v26 = byte_2546379FF;
    if (byte_2546379FF >= 0)
      v27 = byte_2546379FF;
    else
      v27 = *((_QWORD *)&xmmword_2546379E8 + 1);
    v28 = v27 + 6;
    if (v27 + 6 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    if (v28 >= 0x17)
    {
      v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17)
        v30 = v28 | 7;
      v31 = v30 + 1;
      v32 = (char *)operator new(v30 + 1);
      qword_2546379D8 = v27 + 6;
      unk_2546379E0 = v31 | 0x8000000000000000;
      qword_2546379D0 = (uint64_t)v32;
      *(_DWORD *)v32 = 1936617315;
      *((_WORD *)v32 + 2) = 8308;
      v29 = v32 + 6;
    }
    else
    {
      qword_2546379D8 = 0;
      unk_2546379E0 = 0;
      qword_2546379D0 = 0x2074736E6F63;
      byte_2546379E7 = v27 + 6;
      v29 = (char *)&qword_2546379D0 + 6;
      if (!v27)
      {
LABEL_81:
        v29[v27] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2546379D0, &dword_20AEBB000);
        __cxa_guard_release(&qword_254637868);
        goto LABEL_50;
      }
    }
    if (v26 >= 0)
      v33 = &xmmword_2546379E8;
    else
      v33 = (__int128 *)xmmword_2546379E8;
    memmove(v29, v33, v27);
    goto LABEL_81;
  }
  return *(_QWORD *)(a1 + 424);
}

void sub_20AEE56C0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_guard_abort(&qword_254637868);
    __cxa_guard_abort(&qword_254637860);
    sub_20AEC01C0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AEE56F0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20AEE56FCLL);
  sub_20AEC01C0(a1);
}

_QWORD *VZDataInfoGetReferenceIDAsString(uint64_t a1)
{
  unint64_t v2;
  char v3;

  if (sub_20AEE4AC0((uint64_t)"VZDataInfoGetReferenceIDAsString", a1))
    return 0;
  v2 = sub_20AFA69B8(a1 + 32);
  if (!v3)
    return 0;
  else
    return sub_20AFA6214(v2);
}

double VZDataInfoSetSpace(uint64_t a1, const char *a2)
{
  double result;

  if (!sub_20AEE4558((uint64_t)"VZDataInfoSetSpace", a1))
    return sub_20AEE4900(a2, a1 + 128);
  return result;
}

uint64_t VZDataInfoGetSpace(uint64_t a1)
{
  uint64_t result;

  if (sub_20AEE4AC0((uint64_t)"VZDataInfoGetSpace", a1))
    return 0;
  if (!*(_BYTE *)(a1 + 152))
    return 0;
  result = a1 + 128;
  if (*(char *)(a1 + 151) < 0)
    return *(_QWORD *)result;
  return result;
}

char *VZDataInfoGetAssociatedSpace(char *a1)
{
  char *result;

  if (sub_20AEE4AC0((uint64_t)"VZDataInfoGetAssociatedSpace", (uint64_t)a1))
    return 0;
  if (a1[152])
  {
    result = a1 + 128;
    if (a1[151] < 0)
      return *(char **)result;
  }
  else
  {
    if (!a1[56])
      return 0;
    result = a1 + 32;
    if (a1[55] < 0)
      return *(char **)result;
  }
  return result;
}

BOOL VZDataInfoSetTimestampMachContinuousNanoseconds(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_20AEE4558((uint64_t)"VZDataInfoSetTimestampMachContinuousNanoseconds", a1);
  if (!result)
  {
    if (!*(_BYTE *)(a1 + 176))
      *(_BYTE *)(a1 + 176) = 1;
    *(_QWORD *)(a1 + 160) = a2;
    *(_BYTE *)(a1 + 168) = 2;
  }
  return result;
}

BOOL VZDataInfoSetTimestampSteadyNanoseconds(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_20AEE4558((uint64_t)"VZDataInfoSetTimestampSteadyNanoseconds", a1);
  if (!result)
  {
    if (!*(_BYTE *)(a1 + 176))
      *(_BYTE *)(a1 + 176) = 1;
    *(_QWORD *)(a1 + 160) = a2;
    *(_BYTE *)(a1 + 168) = 4;
  }
  return result;
}

BOOL VZDataInfoSetTimestampChronologicalNanoseconds(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_20AEE4558((uint64_t)"VZDataInfoSetTimestampChronologicalNanoseconds", a1);
  if (!result)
  {
    if (!*(_BYTE *)(a1 + 176))
      *(_BYTE *)(a1 + 176) = 1;
    *(_QWORD *)(a1 + 160) = a2;
    *(_BYTE *)(a1 + 168) = 1;
  }
  return result;
}

BOOL VZDataInfoSetTimestamp(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  char v5;

  result = sub_20AEE4558((uint64_t)"VZDataInfoSetTimestamp", a1);
  if (!result)
  {
    if (a2)
    {
      if (*(_BYTE *)(a1 + 176))
        *(_BYTE *)(a1 + 176) = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 16);
      v5 = 1;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 176))
        return result;
      v5 = 0;
    }
    *(_BYTE *)(a1 + 176) = v5;
  }
  return result;
}

BOOL VZDataInfoSetLogTimestampNanoseconds(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_20AEE4558((uint64_t)"VZDataInfoSetLogTimestampNanoseconds", a1);
  if (!result)
  {
    if (!*(_BYTE *)(a1 + 200))
      *(_BYTE *)(a1 + 200) = 1;
    *(_QWORD *)(a1 + 184) = a2;
    *(_BYTE *)(a1 + 192) = 2;
  }
  return result;
}

void *VZDataInfoGetTimestamp(uint64_t a1)
{
  void *v2;
  void *v4;

  if (sub_20AEE4AC0((uint64_t)"VZDataInfoGetTimestamp", a1))
    return 0;
  sub_20AEE1E24(&v4, (uint64_t *)(a1 + 160), (void **)(a1 + 440));
  v2 = v4;
  if (!v4)
    return v2;
  (*(void (**)(void *))(*(_QWORD *)v4 + 24))(v4);
  return v2;
}

void *VZDataInfoGetLogTimestamp(uint64_t a1)
{
  void *v2;
  void *v4;

  if (sub_20AEE4AC0((uint64_t)"VZDataInfoGetLogTimestamp", a1))
    return 0;
  sub_20AEE1E24(&v4, (uint64_t *)(a1 + 184), (void **)(a1 + 432));
  v2 = v4;
  if (!v4)
    return v2;
  (*(void (**)(void *))(*(_QWORD *)v4 + 24))(v4);
  return v2;
}

uint64_t VZDataInfoAddReferenceFromString(uint64_t a1, char *a2)
{
  if (sub_20AEE4558((uint64_t)"VZDataInfoAddReferenceFromString", a1)
    || sub_20AEE3494((uint64_t)"VZDataInfoAddReferenceFromString", (uint64_t)a2, 0))
  {
    return 0;
  }
  else
  {
    return sub_20AFA77DC(a1 + 32, a2);
  }
}

uint64_t VZDataInfoAddReference(uint64_t a1, uint64_t a2)
{
  if (sub_20AEE4558((uint64_t)"VZDataInfoAddReference", a1) || sub_20AEE3E04((uint64_t)"VZDataInfoAddReference", a2))
    return 0;
  else
    return sub_20AFA7690(a1 + 32, a2 + 32);
}

unint64_t VZDataInfoGetReferenceCount(uint64_t a1)
{
  if (sub_20AEE4AC0((uint64_t)"VZDataInfoGetReferenceCount", a1) || !*(_BYTE *)(a1 + 232))
    return 0;
  else
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 5);
}

uint64_t VZDataInfoGetReferenceAt(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unsigned __int128 v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  unsigned __int8 v17;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  size_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  void **v46;
  void *v47;
  char v48[16];
  void *v49;
  char v50;
  char v51;
  void *v52;
  char v53;
  void *__p;
  char v55;
  char v56;
  char v57;
  char v58;
  void *v59;
  void **v60;
  __int128 v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  uint64_t v65;
  unsigned __int128 v66;
  char v67;
  __int128 v68;
  uint64_t v69;
  char v70;
  __int128 v71;
  uint64_t v72;
  char v73;
  __int128 __dst;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  if (!sub_20AEE4AC0((uint64_t)"VZDataInfoGetReferenceAt", a1))
  {
    sub_20AFA7988(a1 + 32, a2, (uint64_t)&v61);
    if (!v73)
    {
      v17 = atomic_load((unsigned __int8 *)&qword_254630258);
      if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
      {
        __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630258);
      }
      sub_20AECB50C((uint64_t)&unk_254630168, &v61);
      v4 = 0;
      goto LABEL_24;
    }
    v6 = *(char **)(a1 + 448);
    v5 = *(char **)(a1 + 456);
    v7 = (v5 - v6) >> 3;
    if (v7 <= a2)
    {
      v19 = a2 + 1;
      v20 = a2 + 1 - v7;
      if (a2 + 1 <= v7)
      {
        if (a2 + 1 < v7)
        {
          v42 = &v6[8 * v19];
          while (v5 != v42)
          {
            v44 = *((_QWORD *)v5 - 1);
            v5 -= 8;
            v43 = v44;
            *(_QWORD *)v5 = 0;
            if (v44)
              (*(void (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
          }
          *(_QWORD *)(a1 + 456) = v42;
        }
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 464);
        if (v20 <= (v21 - (uint64_t)v5) >> 3)
        {
          bzero(*(void **)(a1 + 456), 8 * v20);
          *(_QWORD *)(a1 + 456) = &v5[8 * v20];
        }
        else
        {
          if (v19 >> 61)
            sub_20AEC60B8();
          v22 = v21 - (_QWORD)v6;
          if (v22 >> 2 > v19)
            v19 = v22 >> 2;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
            v23 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v23 = v19;
          if (v23 >> 61)
            sub_20AEC60CC();
          v24 = (char *)operator new(8 * v23);
          v25 = &v24[8 * v7];
          v26 = 8 * v20;
          v27 = &v24[8 * v23];
          bzero(v25, v26);
          v28 = &v25[v26];
          if (v5 == v6)
          {
            *(_QWORD *)(a1 + 448) = v25;
            *(_QWORD *)(a1 + 456) = v28;
            *(_QWORD *)(a1 + 464) = v27;
          }
          else
          {
            v29 = v5 - v6 - 8;
            if (v29 < 0x78
              || &v5[-(v29 & 0xFFFFFFFFFFFFFFF8) - 8] < v25 && &v24[v5 - v6 - (v29 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
            {
              goto LABEL_88;
            }
            v30 = (v29 >> 3) + 1;
            v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
            v25 -= v31;
            v32 = &v5[-v31];
            v33 = v5 - 16;
            v34 = &v24[8 * v7 - 16];
            v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v37 = *((_OWORD *)v33 - 1);
              v36 = *(_OWORD *)v33;
              *((_OWORD *)v33 - 1) = 0uLL;
              *(_OWORD *)v33 = 0uLL;
              *((_OWORD *)v34 - 1) = v37;
              *(_OWORD *)v34 = v36;
              v33 -= 32;
              v34 -= 32;
              v35 -= 4;
            }
            while (v35);
            v5 = v32;
            if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_88:
              do
              {
                v38 = *((_QWORD *)v5 - 1);
                v5 -= 8;
                *(_QWORD *)v5 = 0;
                *((_QWORD *)v25 - 1) = v38;
                v25 -= 8;
              }
              while (v5 != v6);
            }
            v5 = *(char **)(a1 + 448);
            v39 = *(char **)(a1 + 456);
            *(_QWORD *)(a1 + 448) = v25;
            *(_QWORD *)(a1 + 456) = v28;
            *(_QWORD *)(a1 + 464) = v27;
            while (v39 != v5)
            {
              v41 = *((_QWORD *)v39 - 1);
              v39 -= 8;
              v40 = v41;
              *(_QWORD *)v39 = 0;
              if (v41)
                (*(void (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
            }
          }
          if (v5)
            operator delete(v5);
        }
      }
    }
    v8 = *(_QWORD *)(a1 + 448);
    v4 = *(_QWORD *)(v8 + 8 * a2);
    if (v4)
    {
LABEL_24:
      sub_20AEE7E08((uint64_t)&v61);
      return v4;
    }
    v9 = (char *)operator new(0xC0uLL, MEMORY[0x24BEDB6B8]);
    v10 = v9;
    if (v9)
    {
      *(_QWORD *)v9 = off_24C3F2180;
      v9[32] = 0;
      v9[56] = 0;
      if (v63)
      {
        *((_OWORD *)v9 + 2) = v61;
        *((_QWORD *)v9 + 6) = v62;
        v62 = 0;
        v61 = 0uLL;
        v9[56] = 1;
      }
      v9[64] = 0;
      v9[112] = 0;
      if (v67)
      {
        *((_OWORD *)v9 + 4) = v64;
        *((_QWORD *)v9 + 10) = v65;
        v65 = 0;
        v64 = 0uLL;
        do
          v11 = __ldaxp(&v66);
        while (__stlxp(v11, &v66));
        *((_OWORD *)v9 + 6) = v11;
        v9[112] = 1;
      }
      v9[128] = 0;
      v9[152] = 0;
      if (v70)
      {
        *((_OWORD *)v9 + 8) = v68;
        *((_QWORD *)v9 + 18) = v69;
        v69 = 0;
        v68 = 0uLL;
        v9[152] = 1;
      }
      *((_OWORD *)v9 + 10) = v71;
      v12 = v72;
      *((_DWORD *)v9 + 46) = 1;
      v13 = (unsigned int *)(v9 + 184);
      *((_QWORD *)v9 + 22) = v12;
      *(_QWORD *)v9 = off_24C3F2998;
      *((_QWORD *)v9 + 2) = &unk_24C3F29E8;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      v15 = v9;
      v16 = *(_QWORD *)(v8 + 8 * a2);
      *(_QWORD *)(v8 + 8 * a2) = v10;
      if (!v16)
        goto LABEL_19;
    }
    else
    {
      sub_20AEE7EE4();
      sub_20AEE809C();
      if (byte_2546379FF < 0)
      {
        sub_20AEC60F4(&__dst, (void *)xmmword_2546379E8, *((unint64_t *)&xmmword_2546379E8 + 1));
      }
      else
      {
        __dst = xmmword_2546379E8;
        v75 = unk_2546379F8;
      }
      sub_20AEC7620(&v59, (uint64_t)&__dst, 1uLL);
      v48[0] = 0;
      v58 = 0;
      sub_20AECD798((uint64_t *)&xmmword_254637970, (__int128 **)&v59, (uint64_t)v48, 0);
      if (v58 && v57)
      {
        if (v56)
        {
          if (v55 < 0)
            operator delete(__p);
          if (v53 < 0)
            operator delete(v52);
        }
        if (v51 && v50 < 0)
          operator delete(v49);
      }
      v45 = (void **)v59;
      if (v59)
      {
        v46 = v60;
        v47 = v59;
        if (v60 != v59)
        {
          do
          {
            if (*((char *)v46 - 1) < 0)
              operator delete(*(v46 - 3));
            v46 -= 3;
          }
          while (v46 != v45);
          v47 = v59;
        }
        v60 = v45;
        operator delete(v47);
      }
      if (SHIBYTE(v75) < 0)
        operator delete((void *)__dst);
      v15 = 0;
      v16 = *(_QWORD *)(v8 + 8 * a2);
      *(_QWORD *)(v8 + 8 * a2) = 0;
      if (!v16)
        goto LABEL_19;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
LABEL_19:
    if (v10)
      (*(void (**)(char *))(*(_QWORD *)v15 + 24))(v15);
    v4 = *(_QWORD *)(v8 + 8 * a2);
    goto LABEL_24;
  }
  return 0;
}

void sub_20AEE61C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20AEE7E08((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20AEE61D8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t VZDataGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546378F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546378F0))
    return qword_2546378E8;
  qword_2546378E8 = sub_20AECB130();
  __cxa_guard_release(&qword_2546378F0);
  return qword_2546378E8;
}

uint64_t VZDataGetPackageID(uint64_t a1)
{
  BOOL v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_20AED21B4((uint64_t)"VZDataGetPackageID", a1, 0);
  result = 0;
  if (!v2)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v5 = a1 + 32;
    v4 = v6;
    if (*(char *)(v5 + 23) >= 0)
      return v5;
    else
      return v4;
  }
  return result;
}

uint64_t VZDataGetDataTypeID(uint64_t a1)
{
  if (sub_20AED21B4((uint64_t)"VZDataGetDataTypeID", a1, 0))
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(a1 + 56);
}

char *VZDataGetDataInfo(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned __int8 v7;
  void **v8;
  void **v9;
  void *v10;
  int v11;
  size_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char v18[16];
  void *v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;
  char v26;
  char v27;
  char v28;
  void *v29;
  void **v30;
  __int128 __dst;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = 0;
  if (sub_20AED21B4((uint64_t)"VZDataGetDataInfo", a1, 0))
    return v2;
  v2 = *(char **)(a1 + 560);
  if (v2)
    return v2;
  v3 = (char *)operator new(0x1E0uLL, MEMORY[0x24BEDB6B8]);
  if (!v3)
  {
    v6 = (uint64_t *)sub_20AED3DA0();
    v7 = atomic_load((unsigned __int8 *)&qword_254637888);
    if ((v7 & 1) != 0 || !__cxa_guard_acquire(&qword_254637888))
      goto LABEL_8;
    sub_20AEE8254();
    v11 = byte_254637A5F;
    if (byte_254637A5F >= 0)
      v12 = byte_254637A5F;
    else
      v12 = qword_254637A50;
    v13 = v12 + 1;
    if (v12 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v13 >= 0x17)
    {
      v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v15 = v13 | 7;
      v16 = v15 + 1;
      v14 = (__int128 *)operator new(v15 + 1);
      *((_QWORD *)&xmmword_254637A30 + 1) = v12 + 1;
      unk_254637A40 = v16 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254637A30 = v14;
    }
    else
    {
      v14 = &xmmword_254637A30;
      unk_254637A40 = 0;
      xmmword_254637A30 = 0uLL;
      byte_254637A47 = v12 + 1;
      if (!v12)
      {
LABEL_48:
        *(_WORD *)((char *)v14 + v12) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637A30, &dword_20AEBB000);
        __cxa_guard_release(&qword_254637888);
LABEL_8:
        if (byte_254637A47 < 0)
        {
          sub_20AEC60F4(&__dst, (void *)xmmword_254637A30, *((unint64_t *)&xmmword_254637A30 + 1));
        }
        else
        {
          __dst = xmmword_254637A30;
          v32 = unk_254637A40;
        }
        sub_20AEC7620(&v29, (uint64_t)&__dst, 1uLL);
        v18[0] = 0;
        v28 = 0;
        sub_20AECD798(v6, (__int128 **)&v29, (uint64_t)v18, 0);
        if (v28 && v27)
        {
          if (v26)
          {
            if (v25 < 0)
              operator delete(__p);
            if (v23 < 0)
              operator delete(v22);
          }
          if (v21 && v20 < 0)
            operator delete(v19);
        }
        v8 = (void **)v29;
        if (v29)
        {
          v9 = v30;
          v10 = v29;
          if (v30 != v29)
          {
            do
            {
              if (*((char *)v9 - 1) < 0)
                operator delete(*(v9 - 3));
              v9 -= 3;
            }
            while (v9 != v8);
            v10 = v29;
          }
          v30 = v8;
          operator delete(v10);
        }
        if (SHIBYTE(v32) < 0)
          operator delete((void *)__dst);
        v2 = 0;
        v4 = *(_QWORD *)(a1 + 560);
        *(_QWORD *)(a1 + 560) = 0;
        if (v4)
          goto LABEL_5;
        return v2;
      }
    }
    if (v11 >= 0)
      v17 = &qword_254637A48;
    else
      v17 = (uint64_t *)qword_254637A48;
    memmove(v14, v17, v12);
    goto LABEL_48;
  }
  v2 = v3;
  *(_QWORD *)v3 = off_24C3F2180;
  sub_20AED36A4(v3 + 32, (__int128 *)(a1 + 64));
  sub_20AED3C28(v2 + 240, a1 + 272);
  *((_DWORD *)v2 + 104) = 1;
  *(_QWORD *)v2 = &off_24C3F2AA8;
  *((_QWORD *)v2 + 2) = &unk_24C3F2AF8;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  v4 = *(_QWORD *)(a1 + 560);
  *(_QWORD *)(a1 + 560) = v2;
  if (v4)
  {
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    return *(char **)(a1 + 560);
  }
  return v2;
}

void sub_20AEE667C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_guard_abort(&qword_254637888);
    sub_20AEC01C0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AEE6694(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20AEE66A0);
  sub_20AEC01C0(a1);
}

uint64_t VZDataGetTimestampNanosecondsSinceEpoch(uint64_t a1)
{
  if (sub_20AED21B4((uint64_t)"VZDataGetTimestampNanosecondsSinceEpoch", a1, 0))
    return 0;
  else
    return sub_20AFA72C0(a1 + 64);
}

uint64_t VZDataGetTimestampClockType(uint64_t a1)
{
  if (sub_20AED21B4((uint64_t)"VZDataGetTimestampClockType", a1, 0))
    return 0;
  else
    return sub_20AFA72F0((unsigned __int8 *)(a1 + 64));
}

uint64_t VZDataGetLogTimestampNanosecondsSinceEpoch(uint64_t a1)
{
  BOOL v2;
  uint64_t result;
  unsigned __int8 v4;
  _QWORD v5[4];
  char v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  __int128 v17;
  void *v18;
  char v19;
  char v20;
  void *v21;
  char v22;
  void *__p;
  char v24;
  char v25;
  char v26;
  const char *v27;

  v2 = sub_20AED21B4((uint64_t)"VZDataGetLogTimestampNanosecondsSinceEpoch", a1, 0);
  result = 0;
  if (!v2)
  {
    sub_20AFA70DC(a1 + 64, (uint64_t)v5);
    v27 = "VZDataGetLogTimestampNanosecondsSinceEpoch";
    if (v14)
      return v5[0];
    sub_20AEDBA04("in function ", (const char *)&v27);
    sub_20B529470((char *)v5, &v15, (uint64_t)&v17);
    v4 = atomic_load((unsigned __int8 *)&qword_254630258);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
    {
      __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
      __cxa_guard_release(&qword_254630258);
    }
    sub_20AECB50C((uint64_t)&unk_254630168, &v17);
    if (v26)
    {
      if (v25)
      {
        if (v24 < 0)
          operator delete(__p);
        if (v22 < 0)
          operator delete(v21);
      }
      if (v20 && v19 < 0)
        operator delete(v18);
    }
    if (v16 < 0)
    {
      operator delete(v15);
      if (v14)
        return 1;
    }
    else if (v14)
    {
      return 1;
    }
    if (!v13)
      return 1;
    if (v12)
    {
      if (v11 < 0)
        operator delete(v10);
      if (v9 < 0)
        operator delete(v8);
    }
    result = 1;
    if (v7)
    {
      if (v6 < 0)
      {
        operator delete((void *)v5[2]);
        return 1;
      }
    }
  }
  return result;
}

void sub_20AEE6910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    sub_20AECD704((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_20AECD704((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEE6948(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 184);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AEE6960(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 184);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 8))(result + 16);
  return result;
}

uint64_t sub_20AEE6988()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546378A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546378A0))
    return qword_254637898;
  qword_254637898 = sub_20AECB130();
  __cxa_guard_release(&qword_2546378A0);
  return qword_254637898;
}

unsigned __int8 *sub_20AEE69E8(uint64_t a1, void *lpsrc)
{
  unsigned __int8 *result;

  result = (unsigned __int8 *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F2A48, 0);
  if (result)
    return (unsigned __int8 *)sub_20B2167B8((unsigned __int8 *)(a1 + 32), result + 32);
  return result;
}

CFTypeRef sub_20AEE6A40(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  size_t v14;
  void **v15;
  unint64_t v16;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CFTypeRef v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void *__p;
  char v31;
  CFTypeRef cf;
  std::__shared_weak_count *v33;
  void *__dst[2];
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  sub_20AEE7EE4();
  v36 = a1;
  v2 = operator new();
  *(_QWORD *)(v2 + 272) = 0;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  sub_20AEC0BD8(v2);
  v37 = (_QWORD *)v2;
  if (*(_BYTE *)(a1 + 56))
  {
    v3 = *(char *)(a1 + 55);
    if (v3 >= 0)
      v4 = a1 + 32;
    else
      v4 = *(_QWORD *)(a1 + 32);
    if (v3 >= 0)
      v5 = *(unsigned __int8 *)(a1 + 55);
    else
      v5 = *(_QWORD *)(a1 + 40);
    sub_20AEC01D0((_QWORD *)(v2 + 16), v4, v5);
  }
  if (*(_BYTE *)(a1 + 112))
  {
    v6 = sub_20AEC01D0((_QWORD *)(v2 + 16), (uint64_t)"#", 1);
    v9 = *(_QWORD *)(a1 + 64);
    v8 = a1 + 64;
    v7 = v9;
    v10 = *(char *)(v8 + 23);
    if (v10 >= 0)
      v11 = v8;
    else
      v11 = v7;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v8 + 23);
    else
      v12 = *(_QWORD *)(v8 + 8);
    sub_20AEC01D0(v6, v11, v12);
  }
  v13 = *(_DWORD *)(v2 + 120);
  if ((v13 & 0x10) != 0)
  {
    v16 = *(_QWORD *)(v2 + 112);
    v17 = *(_QWORD *)(v2 + 72);
    if (v16 < v17)
    {
      *(_QWORD *)(v2 + 112) = v17;
      v16 = v17;
    }
    v18 = *(const void **)(v2 + 64);
    v14 = v16 - (_QWORD)v18;
    if (v16 - (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_45;
  }
  else
  {
    if ((v13 & 8) == 0)
    {
      v14 = 0;
      HIBYTE(v35) = 0;
      v15 = __dst;
      goto LABEL_30;
    }
    v18 = *(const void **)(v2 + 40);
    v14 = *(_QWORD *)(v2 + 56) - (_QWORD)v18;
    if (v14 >= 0x7FFFFFFFFFFFFFF8)
LABEL_45:
      sub_20AEC0138();
  }
  if (v14 >= 0x17)
  {
    v19 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v19 = v14 | 7;
    v20 = v19 + 1;
    v15 = (void **)operator new(v19 + 1);
    __dst[1] = (void *)v14;
    v35 = v20 | 0x8000000000000000;
    __dst[0] = v15;
    goto LABEL_29;
  }
  HIBYTE(v35) = v14;
  v15 = __dst;
  if (v14)
LABEL_29:
    memmove(v15, v18, v14);
LABEL_30:
  *((_BYTE *)v15 + v14) = 0;
  v21 = v37;
  if (v37)
  {
    v22 = MEMORY[0x24BEDB7F0];
    v23 = *MEMORY[0x24BEDB7F0];
    *v37 = *MEMORY[0x24BEDB7F0];
    v24 = *(_QWORD *)(v22 + 72);
    *(_QWORD *)((char *)v21 + *(_QWORD *)(v23 - 24)) = *(_QWORD *)(v22 + 64);
    v21[3] = MEMORY[0x24BEDB848] + 16;
    v21[2] = v24;
    if (*((char *)v21 + 111) < 0)
      operator delete((void *)v21[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v21 + 16);
    MEMORY[0x20BD3583C](v21, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)&xmmword_254637970, (uint64_t)" ", &v36, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v35) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v25 = cf;
  if (cf)
    CFRetain(cf);
  v26 = v33;
  if (!v33)
    goto LABEL_42;
  p_shared_owners = (unint64_t *)&v33->__shared_owners_;
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    if ((v31 & 0x80000000) == 0)
      return v25;
  }
  else
  {
LABEL_42:
    if ((v31 & 0x80000000) == 0)
      return v25;
  }
  operator delete(__p);
  return v25;
}

uint64_t sub_20AEE6D4C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  const void *v32[2];
  char v33;
  uint64_t v34;

  sub_20AEC147C((uint64_t)&v34);
  if (v33 < 0)
    operator delete((void *)v32[0]);
  __cxa_begin_catch(a1);
  sub_20AEE7EE4();
  sub_20AEC0D64(v32, "failed to create description");
  sub_20AECD224((std::string::size_type)&xmmword_254637970, v32, 0);
  if (v33 < 0)
    operator delete((void *)v32[0]);
  __cxa_end_catch();
  return 0;
}

uint64_t sub_20AEE6E20(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 184));
}

uint64_t sub_20AEE6E2C(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 416);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AEE6E44(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 416);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 8))(result + 16);
  return result;
}

uint64_t sub_20AEE6E6C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546378C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546378C8))
    return qword_2546378C0;
  qword_2546378C0 = sub_20AECB130();
  __cxa_guard_release(&qword_2546378C8);
  return qword_2546378C0;
}

char *sub_20AEE6ECC(uint64_t a1, void *lpsrc)
{
  char *result;
  _QWORD v4[6];
  _QWORD v5[6];
  char v6;

  result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F2B40, 0);
  if (result)
  {
    v5[0] = a1 + 32;
    v5[1] = a1 + 64;
    v5[2] = a1 + 128;
    v5[3] = a1 + 160;
    v5[4] = a1 + 184;
    v5[5] = a1 + 208;
    v4[0] = result + 32;
    v4[1] = result + 64;
    v4[2] = result + 128;
    v4[3] = result + 160;
    v4[4] = result + 184;
    v4[5] = result + 208;
    return (char *)sub_20AEE9198((uint64_t)&v6, v5, v4);
  }
  return result;
}

uint64_t sub_20AEE6F6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  __int128 *v31;
  const void *v33[2];
  char v34;

  __cxa_begin_catch(a1);
  v31 = sub_20AED3DA0();
  sub_20AEC0D64(v33, "failed to compare equal");
  sub_20AECD224((std::string::size_type)v31, v33, 0);
  if (v34 < 0)
    operator delete((void *)v33[0]);
  __cxa_end_catch();
  return 0;
}

CFTypeRef sub_20AEE6FC8(uint64_t a1)
{
  __int128 *v2;
  uint64_t v3;
  int v4;
  size_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  char v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  void *__dst[2];
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int *v29[3];
  uint64_t v30[6];
  int v31;
  _OWORD v32[6];

  v2 = sub_20AED3DA0();
  v27 = a1;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_20AEC0BD8(v3);
  v28 = (_QWORD *)v3;
  v32[2] = xmmword_24C3FA5D0;
  v32[3] = *(_OWORD *)&off_24C3FA5E0;
  v32[4] = xmmword_24C3FA5F0;
  v32[5] = *(_OWORD *)&off_24C3FA600;
  v32[0] = xmmword_24C3FA5B0;
  v32[1] = *(_OWORD *)&off_24C3FA5C0;
  v31 = 0;
  sub_20AEC01D0((_QWORD *)(v3 + 16), (uint64_t)"{", 1);
  v30[0] = a1 + 32;
  v30[1] = a1 + 64;
  v30[2] = a1 + 128;
  v30[3] = a1 + 160;
  v30[4] = a1 + 184;
  v30[5] = a1 + 208;
  v29[0] = &v31;
  v29[1] = (int *)(v3 + 16);
  v29[2] = (int *)v32;
  sub_20AFA9BFC(v30, v29);
  sub_20AEC01D0((_QWORD *)(v3 + 16), (uint64_t)"}", 1);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(v3 + 112);
    v8 = *(_QWORD *)(v3 + 72);
    if (v7 < v8)
    {
      *(_QWORD *)(v3 + 112) = v8;
      v7 = v8;
    }
    v9 = *(const void **)(v3 + 64);
    v5 = v7 - (_QWORD)v9;
    if (v7 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v4 & 8) == 0)
    {
      v5 = 0;
      HIBYTE(v26) = 0;
      v6 = __dst;
      goto LABEL_14;
    }
    v9 = *(const void **)(v3 + 40);
    v5 = *(_QWORD *)(v3 + 56) - (_QWORD)v9;
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v6 = (void **)operator new(v10 + 1);
    __dst[1] = (void *)v5;
    v26 = v11 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_13;
  }
  HIBYTE(v26) = v5;
  v6 = __dst;
  if (v5)
LABEL_13:
    memmove(v6, v9, v5);
LABEL_14:
  *((_BYTE *)v6 + v5) = 0;
  v12 = v28;
  if (v28)
  {
    v13 = MEMORY[0x24BEDB7F0];
    v14 = *MEMORY[0x24BEDB7F0];
    *v28 = *MEMORY[0x24BEDB7F0];
    v15 = *(_QWORD *)(v13 + 72);
    *(_QWORD *)((char *)v12 + *(_QWORD *)(v14 - 24)) = *(_QWORD *)(v13 + 64);
    v12[3] = MEMORY[0x24BEDB848] + 16;
    v12[2] = v15;
    if (*((char *)v12 + 111) < 0)
      operator delete((void *)v12[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v12 + 16);
    MEMORY[0x20BD3583C](v12, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)v2, (uint64_t)" ", &v27, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v16 = cf;
  if (cf)
    CFRetain(cf);
  v17 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if ((v22 & 0x80000000) == 0)
        return v16;
      goto LABEL_27;
    }
  }
  if (v22 < 0)
LABEL_27:
    operator delete(__p);
  return v16;
}

void sub_20AEE72EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  __int128 *v25;

  sub_20AEC147C((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  v25 = sub_20AED3DA0();
  sub_20AEC0D64(&__p, "failed to create description");
  sub_20AECD224((std::string::size_type)v25, (const void **)&__p, 0);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20AEE72D0);
}

uint64_t sub_20AEE73B0(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 416));
}

uint64_t sub_20AEE73BC(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 552);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AEE73D4(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 552);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 8))(result + 16);
  return result;
}

uint64_t sub_20AEE73FC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546378F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546378F0))
    return qword_2546378E8;
  qword_2546378E8 = sub_20AECB130();
  __cxa_guard_release(&qword_2546378F0);
  return qword_2546378E8;
}

unsigned __int8 *sub_20AEE745C(uint64_t a1, void *lpsrc)
{
  unsigned __int8 *result;

  result = (unsigned __int8 *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F2C00, 0);
  if (result)
    return (unsigned __int8 *)sub_20AFA80FC((unsigned __int8 *)(a1 + 32), result + 32);
  return result;
}

uint64_t sub_20AEE74B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  __int128 *v19;
  const void *v21[2];
  char v22;

  __cxa_begin_catch(a1);
  v19 = sub_20AED5104();
  sub_20AEC0D64(v21, "failed to compare equal");
  sub_20AECD224((std::string::size_type)v19, v21, 0);
  if (v22 < 0)
    operator delete((void *)v21[0]);
  __cxa_end_catch();
  return 0;
}

CFTypeRef sub_20AEE7510(uint64_t a1)
{
  __int128 *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFTypeRef v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *__p;
  char v24;
  CFTypeRef cf;
  std::__shared_weak_count *v26;
  void *__dst[2];
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31[2];
  unsigned __int8 v32;

  v2 = sub_20AED5104();
  v29 = a1;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_20AEC0BD8(v3);
  v30 = (_QWORD *)v3;
  sub_20AFA823C(a1 + 32, v31);
  if ((v32 & 0x80u) == 0)
    v4 = v31;
  else
    v4 = (void **)v31[0];
  if ((v32 & 0x80u) == 0)
    v5 = v32;
  else
    v5 = (uint64_t)v31[1];
  sub_20AEC01D0((_QWORD *)(v3 + 16), (uint64_t)v4, v5);
  if (((char)v32 & 0x80000000) == 0)
  {
    v6 = *(_DWORD *)(v3 + 120);
    if ((v6 & 0x10) == 0)
      goto LABEL_9;
LABEL_12:
    v9 = *(_QWORD *)(v3 + 112);
    v10 = *(_QWORD *)(v3 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v3 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v3 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_37;
    goto LABEL_15;
  }
  operator delete(v31[0]);
  v6 = *(_DWORD *)(v3 + 120);
  if ((v6 & 0x10) != 0)
    goto LABEL_12;
LABEL_9:
  if ((v6 & 8) == 0)
  {
    v7 = 0;
    HIBYTE(v28) = 0;
    v8 = __dst;
    goto LABEL_22;
  }
  v11 = *(const void **)(v3 + 40);
  v7 = *(_QWORD *)(v3 + 56) - (_QWORD)v11;
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_37:
    sub_20AEC0138();
LABEL_15:
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v28 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_21;
  }
  HIBYTE(v28) = v7;
  v8 = __dst;
  if (v7)
LABEL_21:
    memmove(v8, v11, v7);
LABEL_22:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v30;
  if (v30)
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *v30 = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)((char *)v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    v14[3] = MEMORY[0x24BEDB848] + 16;
    v14[2] = v17;
    if (*((char *)v14 + 111) < 0)
      operator delete((void *)v14[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 16);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)v2, (uint64_t)" ", &v29, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v28) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v18 = cf;
  if (cf)
    CFRetain(cf);
  v19 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if ((v24 & 0x80000000) == 0)
        return v18;
      goto LABEL_35;
    }
  }
  if (v24 < 0)
LABEL_35:
    operator delete(__p);
  return v18;
}

void sub_20AEE77EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  __int128 *v26;

  sub_20AEC147C((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  v26 = sub_20AED5104();
  sub_20AEC0D64(&__p, "failed to create description");
  sub_20AECD224((std::string::size_type)v26, (const void **)&__p, 0);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20AEE77D0);
}

uint64_t sub_20AEE78C8(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 552));
}

__int128 *sub_20AEE78D4()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630918);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630918))
    return &xmmword_254630900;
  v2 = (char *)sub_20AEE79B0();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254630900, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254630910 = *((_QWORD *)v2 + 2);
    xmmword_254630900 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630900, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630918);
  return &xmmword_254630900;
}

void sub_20AEE7998(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630918);
  _Unwind_Resume(a1);
}

void *sub_20AEE79B0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254630938);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630938))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZTimestamp]", qword_254630920);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630920, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630938);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254630958);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254630958))
    return &unk_254630940;
  sub_20B531658((uint64_t)qword_254630920, (uint64_t)&unk_254630940);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254630940, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630958);
  return &unk_254630940;
}

void sub_20AEE7AA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630958);
  _Unwind_Resume(a1);
}

void sub_20AEE7AB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630938);
  _Unwind_Resume(a1);
}

void sub_20AEE7AD0()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254637828);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637828))
  {
    sub_20AEE7C50();
    v1 = byte_25463793F;
    if (byte_25463793F >= 0)
      v2 = byte_25463793F;
    else
      v2 = *((_QWORD *)&xmmword_254637928 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254637918 = v2 + 6;
      unk_254637920 = v6 | 0x8000000000000000;
      qword_254637910 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254637918 = 0;
      unk_254637920 = 0;
      qword_254637910 = 0x2074736E6F63;
      byte_254637927 = v2 + 6;
      v4 = (char *)&qword_254637910 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254637910, &dword_20AEBB000);
        __cxa_guard_release(&qword_254637828);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254637928;
    else
      v8 = (__int128 *)xmmword_254637928;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20AEE7C38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637828);
  _Unwind_Resume(a1);
}

void sub_20AEE7C50()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637830);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637830))
  {
    sub_20AEE7D08();
    if (byte_25463796F < 0)
    {
      sub_20AEC60F4(&xmmword_254637928, (void *)xmmword_254637958, *((unint64_t *)&xmmword_254637958 + 1));
    }
    else
    {
      xmmword_254637928 = xmmword_254637958;
      unk_254637938 = unk_254637968;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637928, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637830);
  }
}

void sub_20AEE7CF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637830);
  _Unwind_Resume(a1);
}

void sub_20AEE7D08()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254637838);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637838))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vl::visual_logger::Timestamp]", qword_254637940);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637940, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637838);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254637840);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254637840))
    {
      sub_20B531658((uint64_t)qword_254637940, (uint64_t)&xmmword_254637958);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637958, &dword_20AEBB000);
      __cxa_guard_release(&qword_254637840);
    }
  }
}

void sub_20AEE7DD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637840);
  _Unwind_Resume(a1);
}

void sub_20AEE7DF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637838);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEE7E08(uint64_t a1)
{
  void **v2;

  if (!*(_BYTE *)(a1 + 160))
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_15;
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_15:
        if (!*(_BYTE *)(a1 + 40))
          return a1;
        goto LABEL_16;
      }
    }
    else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
LABEL_16:
    if (*(char *)(a1 + 39) < 0)
    {
      v2 = (void **)(a1 + 16);
      goto LABEL_18;
    }
    return a1;
  }
  if (*(_BYTE *)(a1 + 120) && *(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (!*(_BYTE *)(a1 + 24))
    return a1;
  v2 = (void **)a1;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_18:
  operator delete(*v2);
  return a1;
}

void sub_20AEE7EE4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637848);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637848))
  {
    sub_20AEE7F9C();
    if (byte_2546379B7 < 0)
    {
      sub_20AEC60F4(&xmmword_254637970, (void *)xmmword_2546379A0, *((unint64_t *)&xmmword_2546379A0 + 1));
    }
    else
    {
      xmmword_254637970 = xmmword_2546379A0;
      qword_254637980 = unk_2546379B0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637970, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637848);
  }
}

void sub_20AEE7F84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637848);
  _Unwind_Resume(a1);
}

void sub_20AEE7F9C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254637850);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637850))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZReferenceID]", qword_254637988);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637988, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637850);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254637858);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254637858))
    {
      sub_20B531658((uint64_t)qword_254637988, (uint64_t)&xmmword_2546379A0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546379A0, &dword_20AEBB000);
      __cxa_guard_release(&qword_254637858);
    }
  }
}

void sub_20AEE806C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637858);
  _Unwind_Resume(a1);
}

void sub_20AEE8084(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637850);
  _Unwind_Resume(a1);
}

void sub_20AEE809C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637870);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637870))
  {
    sub_20AEE8154();
    if (byte_254637A2F < 0)
    {
      sub_20AEC60F4(&xmmword_2546379E8, (void *)xmmword_254637A18, *((unint64_t *)&xmmword_254637A18 + 1));
    }
    else
    {
      xmmword_2546379E8 = xmmword_254637A18;
      unk_2546379F8 = unk_254637A28;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546379E8, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637870);
  }
}

void sub_20AEE813C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637870);
  _Unwind_Resume(a1);
}

void sub_20AEE8154()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254637878);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637878))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vl::visual_logger::ReferenceID]", qword_254637A00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637A00, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637878);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254637880);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254637880))
    {
      sub_20B531658((uint64_t)qword_254637A00, (uint64_t)&xmmword_254637A18);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637A18, &dword_20AEBB000);
      __cxa_guard_release(&qword_254637880);
    }
  }
}

void sub_20AEE8224(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637880);
  _Unwind_Resume(a1);
}

void sub_20AEE823C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637878);
  _Unwind_Resume(a1);
}

void sub_20AEE8254()
{
  unsigned __int8 v0;
  __int128 *v1;
  const void **v2;
  int v3;
  size_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const void *v10;

  v0 = atomic_load((unsigned __int8 *)&qword_254637890);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637890))
  {
    v1 = sub_20AED4480();
    v2 = (const void **)v1;
    v3 = *((char *)v1 + 23);
    if (v3 >= 0)
      v4 = *((unsigned __int8 *)v1 + 23);
    else
      v4 = *((_QWORD *)v1 + 1);
    v5 = v4 + 6;
    if (v4 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v5 >= 0x17)
    {
      v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v7 = v5 | 7;
      v8 = v7 + 1;
      v9 = (char *)operator new(v7 + 1);
      qword_254637A50 = v4 + 6;
      unk_254637A58 = v8 | 0x8000000000000000;
      qword_254637A48 = (uint64_t)v9;
      *(_DWORD *)v9 = 1936617315;
      *((_WORD *)v9 + 2) = 8308;
      v6 = v9 + 6;
    }
    else
    {
      qword_254637A50 = 0;
      unk_254637A58 = 0;
      qword_254637A48 = 0x2074736E6F63;
      byte_254637A5F = v4 + 6;
      v6 = (char *)&qword_254637A48 + 6;
      if (!v4)
      {
LABEL_18:
        v6[v4] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254637A48, &dword_20AEBB000);
        __cxa_guard_release(&qword_254637890);
        return;
      }
    }
    if (v3 >= 0)
      v10 = v2;
    else
      v10 = *v2;
    memmove(v6, v10, v4);
    goto LABEL_18;
  }
}

void sub_20AEE83C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637890);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AEE83DC()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  int v3;
  size_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;

  v0 = atomic_load((unsigned __int8 *)&qword_254630818);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630818))
  {
    v2 = atomic_load((unsigned __int8 *)&qword_254630838);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254630838))
    {
      qword_254630828 = 0;
      unk_254630830 = 0xA00000000000000;
      LODWORD(qword_254630820) = 1936617315;
      WORD2(qword_254630820) = 8308;
      *(_DWORD *)((char *)&qword_254630820 + 6) = 1918986339;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630820, &dword_20AEBB000);
      __cxa_guard_release(&qword_254630838);
    }
    v3 = byte_254630837;
    if (byte_254630837 >= 0)
      v4 = byte_254630837;
    else
      v4 = qword_254630828;
    v5 = v4 + 1;
    if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v6 = &qword_254630800;
    if (v5 >= 0x17)
    {
      v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v7 = v5 | 7;
      v8 = v7 + 1;
      v9 = (uint64_t *)operator new(v7 + 1);
      qword_254630808 = v4 + 1;
      unk_254630810 = v8 | 0x8000000000000000;
      qword_254630800 = (uint64_t)v9;
      v6 = v9;
    }
    else
    {
      qword_254630808 = 0;
      unk_254630810 = 0;
      qword_254630800 = 0;
      byte_254630817 = v4 + 1;
      if (!v4)
      {
LABEL_19:
        *(_WORD *)((char *)v6 + v4) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630800, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630818);
        return &qword_254630800;
      }
    }
    if (v3 >= 0)
      v10 = &qword_254630820;
    else
      v10 = (uint64_t *)qword_254630820;
    memmove(v6, v10, v4);
    goto LABEL_19;
  }
  return &qword_254630800;
}

void sub_20AEE8588(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630818);
  _Unwind_Resume(a1);
}

_BYTE *sub_20AEE85A0(void (*a1)(void **__return_ptr, uint64_t), uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  unsigned __int128 v4;
  int v5;
  uint64_t *v6;
  __int128 v7;
  void **v8;
  void **v9;
  void *v10;
  char v12[16];
  void *v13;
  char v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  char v20;
  char v21;
  char v22;
  void *__dst[2];
  uint64_t v24;
  void *v25[2];
  uint64_t v26;
  char v27;
  void *v28[2];
  uint64_t v29;
  unsigned __int128 v30;
  char v31;
  void *__p[2];
  uint64_t v33;
  unsigned __int8 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  a1(v25, a2);
  v2 = operator new(0xC0uLL, MEMORY[0x24BEDB6B8]);
  v3 = v2;
  if (!v2)
  {
    if (!v34)
      goto LABEL_15;
    goto LABEL_13;
  }
  *(_QWORD *)v2 = off_24C3F2180;
  v2[32] = 0;
  v2[56] = 0;
  if (v27)
  {
    *((_OWORD *)v2 + 2) = *(_OWORD *)v25;
    *((_QWORD *)v2 + 6) = v26;
    v25[1] = 0;
    v26 = 0;
    v25[0] = 0;
    v2[56] = 1;
  }
  v2[64] = 0;
  v2[112] = 0;
  if (v31)
  {
    *((_OWORD *)v2 + 4) = *(_OWORD *)v28;
    *((_QWORD *)v2 + 10) = v29;
    v28[1] = 0;
    v29 = 0;
    v28[0] = 0;
    do
      v4 = __ldaxp(&v30);
    while (__stlxp(v4, &v30));
    *((_OWORD *)v2 + 6) = v4;
    v2[112] = 1;
  }
  v2[128] = 0;
  v2[152] = 0;
  v5 = v34;
  if (v34)
  {
    *((_OWORD *)v2 + 8) = *(_OWORD *)__p;
    *((_QWORD *)v2 + 18) = v33;
    __p[1] = 0;
    v33 = 0;
    __p[0] = 0;
    v2[152] = 1;
  }
  *((_OWORD *)v2 + 10) = v35;
  *((_QWORD *)v2 + 22) = v36;
  *((_DWORD *)v2 + 46) = 1;
  *(_QWORD *)v2 = off_24C3F2998;
  *((_QWORD *)v2 + 2) = &unk_24C3F29E8;
  if (v5)
  {
LABEL_13:
    if (SHIBYTE(v33) < 0)
      operator delete(__p[0]);
  }
LABEL_15:
  if (v31 && SHIBYTE(v29) < 0)
    operator delete(v28[0]);
  if (v27 && SHIBYTE(v26) < 0)
    operator delete(v25[0]);
  if (!v3)
  {
    sub_20AEE7EE4();
    v6 = sub_20AEE888C();
    if (*((char *)v6 + 23) < 0)
    {
      sub_20AEC60F4(__dst, (void *)*v6, v6[1]);
    }
    else
    {
      v7 = *(_OWORD *)v6;
      v24 = v6[2];
      *(_OWORD *)__dst = v7;
    }
    sub_20AEC7620(v25, (uint64_t)__dst, 1uLL);
    v12[0] = 0;
    v22 = 0;
    sub_20AECD798((uint64_t *)&xmmword_254637970, (__int128 **)v25, (uint64_t)v12, 0);
    if (v22 && v21)
    {
      if (v20)
      {
        if (v19 < 0)
          operator delete(v18);
        if (v17 < 0)
          operator delete(v16);
      }
      if (v15 && v14 < 0)
        operator delete(v13);
    }
    v8 = (void **)v25[0];
    if (v25[0])
    {
      v9 = (void **)v25[1];
      v10 = v25[0];
      if (v25[1] != v25[0])
      {
        do
        {
          if (*((char *)v9 - 1) < 0)
            operator delete(*(v9 - 3));
          v9 -= 3;
        }
        while (v9 != v8);
        v10 = v25[0];
      }
      v25[1] = v8;
      operator delete(v10);
    }
    if (SHIBYTE(v24) < 0)
      operator delete(__dst[0]);
    return 0;
  }
  return v3;
}

void sub_20AEE886C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x20AEE872CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20AEE888C()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630858);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630858))
  {
    v2 = sub_20AEE83DC();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v7 = &qword_254630840;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254630848 = v5 + 1;
      unk_254630850 = v9 | 0x8000000000000000;
      qword_254630840 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254630848 = 0;
      unk_254630850 = 0;
      qword_254630840 = 0;
      byte_254630857 = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630840, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630858);
        return &qword_254630840;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630840;
}

void sub_20AEE89B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630858);
  _Unwind_Resume(a1);
}

void sub_20AEE89D0()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2546378B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546378B8))
  {
    sub_20AEE7EE4();
    v1 = SHIBYTE(qword_254637980);
    if (qword_254637980 >= 0)
      v2 = HIBYTE(qword_254637980);
    else
      v2 = *((_QWORD *)&xmmword_254637970 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254637A98 = v2 + 6;
      unk_254637AA0 = v6 | 0x8000000000000000;
      qword_254637A90 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254637A98 = 0;
      unk_254637AA0 = 0;
      qword_254637A90 = 0x2074736E6F63;
      byte_254637AA7 = v2 + 6;
      v4 = (char *)&qword_254637A90 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254637A90, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546378B8);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254637970;
    else
      v8 = (__int128 *)xmmword_254637970;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20AEE8B38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546378B8);
  _Unwind_Resume(a1);
}

__int128 *sub_20AEE8B50()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630878);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630878))
    return &xmmword_254630860;
  v2 = sub_20AEE8C2C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254630860, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254630870 = v2->__r_.__value_.__r.__words[2];
    xmmword_254630860 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630860, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630878);
  return &xmmword_254630860;
}

void sub_20AEE8C14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630878);
  _Unwind_Resume(a1);
}

std::string *sub_20AEE8C2C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630898);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630898))
    return &stru_254630880;
  sub_20AEE8E2C((uint64_t)__p);
  sub_20AEE8D1C((char *)__p, &stru_254630880);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254630880, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630898);
  return &stru_254630880;
}

void sub_20AEE8CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254630898);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254630898);
  _Unwind_Resume(a1);
}

void sub_20AEE8D1C(char *a1@<X0>, std::string *a2@<X8>)
{
  int64x2_t v4;
  int8x16_t v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;
  void *v11[2];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v11 = *(_OWORD *)"std::string";
  v12 = 0xB00000000000000;
  sub_20AEC7620(&__p, (uint64_t)v11, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v4, v5);
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
}

void sub_20AEE8E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AEE8E2C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546308B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546308B8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::optional<std::string>]", qword_2546308A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546308A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546308B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2546308D8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2546308D8))
  {
    v5 = sub_20AED4780(qword_2546308A0, "<", 0);
    sub_20AED467C(qword_2546308A0, 0, v5, qword_2546308C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546308C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546308D8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546308F8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546308F8))
  {
    sub_20B531658((uint64_t)qword_2546308C0, (uint64_t)&xmmword_2546308E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546308E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546308F8);
  }
  if (byte_2546308F7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546308E0, *((unint64_t *)&xmmword_2546308E0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546308E0;
    *(_QWORD *)(a1 + 16) = unk_2546308F0;
  }
}

void sub_20AEE8FC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546308F8);
  _Unwind_Resume(a1);
}

void sub_20AEE8FE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546308D8);
  _Unwind_Resume(a1);
}

void sub_20AEE8FF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546308B8);
  _Unwind_Resume(a1);
}

void sub_20AEE9010()
{
  unsigned __int8 v0;
  __int128 *v1;
  const void **v2;
  int v3;
  size_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const void *v10;

  v0 = atomic_load((unsigned __int8 *)&qword_2546378E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546378E0))
  {
    v1 = sub_20AED3DA0();
    v2 = (const void **)v1;
    v3 = *((char *)v1 + 23);
    if (v3 >= 0)
      v4 = *((unsigned __int8 *)v1 + 23);
    else
      v4 = *((_QWORD *)v1 + 1);
    v5 = v4 + 6;
    if (v4 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v5 >= 0x17)
    {
      v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v7 = v5 | 7;
      v8 = v7 + 1;
      v9 = (char *)operator new(v7 + 1);
      qword_254637AE0 = v4 + 6;
      unk_254637AE8 = v8 | 0x8000000000000000;
      qword_254637AD8 = (uint64_t)v9;
      *(_DWORD *)v9 = 1936617315;
      *((_WORD *)v9 + 2) = 8308;
      v6 = v9 + 6;
    }
    else
    {
      qword_254637AE0 = 0;
      unk_254637AE8 = 0;
      qword_254637AD8 = 0x2074736E6F63;
      byte_254637AEF = v4 + 6;
      v6 = (char *)&qword_254637AD8 + 6;
      if (!v4)
      {
LABEL_18:
        v6[v4] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254637AD8, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546378E0);
        return;
      }
    }
    if (v3 >= 0)
      v10 = v2;
    else
      v10 = *v2;
    memmove(v6, v10, v4);
    goto LABEL_18;
  }
}

void sub_20AEE9180(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546378E0);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEE9198(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  char v16;

  if (!sub_20AEE92E8((uint64_t)&v16, a2, a3))
    return 0;
  v5 = a2[4];
  v6 = a3[4];
  v7 = *(unsigned __int8 *)(v6 + 16);
  if (*(_BYTE *)(v5 + 16))
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (*(_QWORD *)v5 == *(_QWORD *)v6 && *(unsigned __int8 *)(v5 + 8) == *(unsigned __int8 *)(v6 + 8))
      goto LABEL_12;
    return 0;
  }
  if ((*(_BYTE *)(v5 + 16) != 0) != (v7 != 0))
    return 0;
LABEL_12:
  v10 = a2[5];
  v11 = a3[5];
  if (*(_BYTE *)(v10 + 24))
    v12 = *(_BYTE *)(v11 + 24) == 0;
  else
    v12 = 1;
  if (v12)
    return (*(_BYTE *)(v10 + 24) != 0) == (*(_BYTE *)(v11 + 24) != 0);
  v13 = *(unsigned __int8 **)v10;
  v14 = *(unsigned __int8 **)(v10 + 8);
  v15 = *(unsigned __int8 **)v11;
  if (&v14[-*(_QWORD *)v10] != (unsigned __int8 *)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11))
    return 0;
  if (v13 == v14)
    return 1;
  do
  {
    result = sub_20B2167B8(v13, v15);
    if (!(_DWORD)result)
      break;
    v13 += 96;
    v15 += 96;
  }
  while (v13 != v14);
  return result;
}

BOOL sub_20AEE92E8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  char v18;

  if (!sub_20AEE943C((uint64_t)&v18, a2, a3))
    return 0;
  v5 = (unsigned __int8 *)a2[2];
  v6 = (unsigned __int8 **)a3[2];
  v7 = *((unsigned __int8 *)v6 + 24);
  if (v5[24])
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if ((v5[24] != 0) != (v7 != 0))
      return 0;
  }
  else
  {
    v13 = v5[23];
    if ((v13 & 0x80u) == 0)
      v14 = (unsigned __int8 *)v5[23];
    else
      v14 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
    v15 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
    v16 = (char)v15;
    if ((char)v15 < 0)
      v15 = v6[1];
    if (v14 != v15)
      return 0;
    if (v16 >= 0)
      v17 = (unsigned __int8 *)a3[2];
    else
      v17 = *v6;
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v5, v17, *((_QWORD *)v5 + 1)))
        return 0;
    }
    else if (v5[23])
    {
      while (*v5 == *v17)
      {
        ++v5;
        ++v17;
        if (!--v13)
          goto LABEL_8;
      }
      return 0;
    }
  }
LABEL_8:
  v9 = a2[3];
  v10 = a3[3];
  if (*(_BYTE *)(v9 + 16))
    v11 = *(_BYTE *)(v10 + 16) == 0;
  else
    v11 = 1;
  if (v11)
    return (*(_BYTE *)(v9 + 16) != 0) == (*(_BYTE *)(v10 + 16) != 0);
  if (*(_QWORD *)v9 == *(_QWORD *)v10)
    return *(unsigned __int8 *)(v9 + 8) == *(unsigned __int8 *)(v10 + 8);
  return 0;
}

uint64_t sub_20AEE943C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  int v7;
  BOOL v8;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 **v16;
  BOOL v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v29;

  v5 = (unsigned __int8 *)*a2;
  v6 = (unsigned __int8 **)*a3;
  v7 = *(unsigned __int8 *)(*a3 + 24);
  if (*(_BYTE *)(*a2 + 24))
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if ((*(_BYTE *)(*a2 + 24) != 0) != (v7 != 0))
      return 0;
  }
  else
  {
    v10 = v5[23];
    if ((v10 & 0x80u) == 0)
      v11 = (unsigned __int8 *)v5[23];
    else
      v11 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
    v12 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = v6[1];
    if (v11 != v12)
      return 0;
    if (v13 >= 0)
      v14 = (unsigned __int8 *)*a3;
    else
      v14 = *v6;
    if ((v10 & 0x80) == 0)
    {
      if (v5[23])
      {
        while (*v5 == *v14)
        {
          ++v5;
          ++v14;
          if (!--v10)
            goto LABEL_24;
        }
        return 0;
      }
      goto LABEL_24;
    }
    if (memcmp(*(const void **)v5, v14, *((_QWORD *)v5 + 1)))
      return 0;
  }
LABEL_24:
  v15 = (unsigned __int8 *)a2[1];
  v16 = (unsigned __int8 **)a3[1];
  if (v15[48])
    v17 = *((_BYTE *)v16 + 48) == 0;
  else
    v17 = 1;
  if (v17)
    return (v15[48] != 0) == (*((_BYTE *)v16 + 48) != 0);
  v18 = v15[23];
  if ((v18 & 0x80u) == 0)
    v19 = (unsigned __int8 *)v15[23];
  else
    v19 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
  v20 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 23);
  v21 = (char)v20;
  if ((char)v20 < 0)
    v20 = v16[1];
  if (v19 != v20)
    return 0;
  if (v21 >= 0)
    v22 = (unsigned __int8 *)a3[1];
  else
    v22 = *v16;
  if ((v18 & 0x80) != 0)
    return memcmp(*(const void **)v15, v22, *((_QWORD *)v15 + 1)) == 0;
  if (!v15[23])
    return 1;
  v23 = v18 - 1;
  do
  {
    v25 = *v15++;
    v24 = v25;
    v27 = *v22++;
    v26 = v27;
    v29 = v23-- != 0;
    result = v24 == v26;
  }
  while (v24 == v26 && v29);
  return result;
}

_QWORD *VZDataCreateNumbersWithCFData(CFTypeRef cf, unsigned __int8 a2, __int128 *a3, uint64_t a4)
{
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v17;
  __int128 v18;
  _OWORD v19[13];
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  sub_20B4EED40(v19, cf);
  v18 = v19[0];
  if (*((_QWORD *)&v19[0] + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v19[0] + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v19[0] + 1);
    if (*((_QWORD *)&v19[0] + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v19[0] + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v17 = a2;
  sub_20AED18DC(a3, (char *)v19);
  v12 = sub_20AEE9790((void (*)(__int128 *__return_ptr, __int128 *, _QWORD *, _BYTE *))sub_20AF66B1C, a4, &v18, &v17, (uint64_t)v19);
  if (v30)
  {
    if (v29)
    {
      if (v28 && v27 < 0)
        operator delete(v26);
      if (v25 && v24 < 0)
        operator delete(v23);
      if (v22 && v21 < 0)
        operator delete(v20);
    }
    sub_20AED30E0((uint64_t)v19);
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

_QWORD *sub_20AEE9790(void (*a1)(__int128 *__return_ptr, __int128 *, _QWORD *, _BYTE *), uint64_t a2, __int128 *a3, unsigned __int8 *a4, uint64_t a5)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  __int128 *v11;
  _QWORD *v12;
  void **v13;
  char v15[16];
  _BYTE v16[32];
  void *v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  char v22;
  char v23;
  __int128 v24;
  _BYTE v25[32];
  void *v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  char v31;
  char v32;
  __int128 v33;
  CFErrorRef **v34;
  uint64_t v35;
  _BYTE v36[208];
  void *v37;
  char v38;
  char v39;
  void *v40;
  char v41;
  char v42;
  void *__p;
  char v44;
  char v45;
  char v46;
  char v47;
  __int128 v48;
  __int128 v49;
  char v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  char v56;
  char v57;
  unsigned __int8 v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v35 = a2;
  v34 = (CFErrorRef **)&v35;
  v33 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6 = (_QWORD *)*a4;
  sub_20AED4D3C(v36, a5);
  a1(&v48, &v33, v6, v36);
  if (v47)
  {
    if (v46)
    {
      if (v45 && v44 < 0)
        operator delete(__p);
      if (v42 && v41 < 0)
        operator delete(v40);
      if (v39 && v38 < 0)
        operator delete(v37);
    }
    sub_20AED30E0((uint64_t)v36);
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (!*((_QWORD *)&v33 + 1))
    goto LABEL_17;
  v8 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_17:
    v10 = v58;
    if (v58)
      goto LABEL_18;
LABEL_21:
    v24 = v48;
    v13 = (void **)v25;
    sub_20AECEBD0(v25, &v49);
    v32 = 1;
    sub_20AEEC52C(&v34, (uint64_t)&v24);
    if (v32 && v31)
    {
      if (v30)
      {
        if (v29 < 0)
          operator delete(v28);
        if (v27 < 0)
          operator delete(v26);
      }
      if (v25[24] && (v25[23] & 0x80000000) != 0)
        goto LABEL_41;
    }
    goto LABEL_43;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  v10 = v58;
  if (!v58)
    goto LABEL_21;
LABEL_18:
  v11 = (__int128 *)sub_20AED4AC0((uint64_t)&v48);
  v12 = operator new(0x240uLL, MEMORY[0x24BEDB6B8]);
  if (v12)
  {
    v6 = v12;
    *v12 = off_24C3F2180;
    sub_20AED5300((uint64_t)(v12 + 2), v11);
    *v6 = &off_24C3F2BA0;
    v6[2] = &unk_24C3F2BF0;
    *((_OWORD *)v6 + 35) = 0u;
    goto LABEL_43;
  }
  v15[0] = 0;
  v23 = 0;
  sub_20AEEC52C(&v34, (uint64_t)v15);
  if (!v23 || !v22)
    goto LABEL_42;
  if (v21)
  {
    if (v20 < 0)
      operator delete(v19);
    if (v18 < 0)
      operator delete(v17);
  }
  v6 = 0;
  if (v16[24] && (v16[23] & 0x80000000) != 0)
  {
    v13 = (void **)v16;
LABEL_41:
    operator delete(*v13);
LABEL_42:
    v6 = 0;
  }
LABEL_43:
  if (v58)
  {
    sub_20AED5474((uint64_t)&v48);
  }
  else if (v57)
  {
    if (v56)
    {
      if (v55 < 0)
        operator delete(v54);
      if (v53 < 0)
        operator delete(v52);
    }
    if (v51 && v50 < 0)
      operator delete((void *)v49);
  }
  if (!v10)
    return 0;
  return v6;
}

void sub_20AEE9AC8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AEE9AD8);
  _Unwind_Resume(a1);
}

void sub_20AEE9AE0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AEE9AE8);
  _Unwind_Resume(a1);
}

void sub_20AEE9AF8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    sub_20AED1998((uint64_t)&STACK[0x320]);
    sub_20AEC147C((uint64_t)&STACK[0x300]);
    JUMPOUT(0x20AEE9B24);
  }
  _Unwind_Resume(a1);
}

void sub_20AEE9CCC(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20AEE9CD4);
  sub_20AEC01C0(a1);
}

_QWORD *VZDataCreatePoints2WithCFData(CFTypeRef cf, unsigned __int8 a2, __int128 *a3, uint64_t a4)
{
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v17;
  __int128 v18;
  _OWORD v19[13];
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  sub_20B4EED40(v19, cf);
  v18 = v19[0];
  if (*((_QWORD *)&v19[0] + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v19[0] + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v19[0] + 1);
    if (*((_QWORD *)&v19[0] + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v19[0] + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v17 = a2;
  sub_20AED18DC(a3, (char *)v19);
  v12 = sub_20AEE9790((void (*)(__int128 *__return_ptr, __int128 *, _QWORD *, _BYTE *))sub_20AF607CC, a4, &v18, &v17, (uint64_t)v19);
  if (v30)
  {
    if (v29)
    {
      if (v28 && v27 < 0)
        operator delete(v26);
      if (v25 && v24 < 0)
        operator delete(v23);
      if (v22 && v21 < 0)
        operator delete(v20);
    }
    sub_20AED30E0((uint64_t)v19);
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

_QWORD *VZDataCreatePoints3WithCFData(CFTypeRef cf, unsigned __int8 a2, __int128 *a3, uint64_t a4)
{
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v17;
  __int128 v18;
  _OWORD v19[13];
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  sub_20B4EED40(v19, cf);
  v18 = v19[0];
  if (*((_QWORD *)&v19[0] + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v19[0] + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v19[0] + 1);
    if (*((_QWORD *)&v19[0] + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v19[0] + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v17 = a2;
  sub_20AED18DC(a3, (char *)v19);
  v12 = sub_20AEE9790((void (*)(__int128 *__return_ptr, __int128 *, _QWORD *, _BYTE *))sub_20AF61F74, a4, &v18, &v17, (uint64_t)v19);
  if (v30)
  {
    if (v29)
    {
      if (v28 && v27 < 0)
        operator delete(v26);
      if (v25 && v24 < 0)
        operator delete(v23);
      if (v22 && v21 < 0)
        operator delete(v20);
    }
    sub_20AED30E0((uint64_t)v19);
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

_QWORD *VZDataCreateLines2WithCFData(CFTypeRef cf, unsigned __int8 a2, __int128 *a3, uint64_t a4)
{
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v17;
  __int128 v18;
  _OWORD v19[13];
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  sub_20B4EED40(v19, cf);
  v18 = v19[0];
  if (*((_QWORD *)&v19[0] + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v19[0] + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v19[0] + 1);
    if (*((_QWORD *)&v19[0] + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v19[0] + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v17 = a2;
  sub_20AED18DC(a3, (char *)v19);
  v12 = sub_20AEE9790((void (*)(__int128 *__return_ptr, __int128 *, _QWORD *, _BYTE *))sub_20AF63924, a4, &v18, &v17, (uint64_t)v19);
  if (v30)
  {
    if (v29)
    {
      if (v28 && v27 < 0)
        operator delete(v26);
      if (v25 && v24 < 0)
        operator delete(v23);
      if (v22 && v21 < 0)
        operator delete(v20);
    }
    sub_20AED30E0((uint64_t)v19);
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

_QWORD *VZDataCreateLines3WithCFData(CFTypeRef cf, unsigned __int8 a2, __int128 *a3, uint64_t a4)
{
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v17;
  __int128 v18;
  _OWORD v19[13];
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  sub_20B4EED40(v19, cf);
  v18 = v19[0];
  if (*((_QWORD *)&v19[0] + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v19[0] + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v19[0] + 1);
    if (*((_QWORD *)&v19[0] + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v19[0] + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v17 = a2;
  sub_20AED18DC(a3, (char *)v19);
  v12 = sub_20AEE9790((void (*)(__int128 *__return_ptr, __int128 *, _QWORD *, _BYTE *))sub_20AF65104, a4, &v18, &v17, (uint64_t)v19);
  if (v30)
  {
    if (v29)
    {
      if (v28 && v27 < 0)
        operator delete(v26);
      if (v25 && v24 < 0)
        operator delete(v23);
      if (v22 && v21 < 0)
        operator delete(v20);
    }
    sub_20AED30E0((uint64_t)v19);
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

__int128 *VZDataCreateDictionaryWithCFDictionary(CFTypeRef cf, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  __int128 *v19;
  __int128 *v20;
  __int128 v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  char v31;
  char v32;
  __int128 v33;
  CFErrorRef **v34;
  uint64_t v35;
  char v36[208];
  void *v37;
  char v38;
  char v39;
  void *v40;
  char v41;
  char v42;
  void *v43;
  char v44;
  char v45;
  char v46;
  char v47;
  __int128 v48[13];
  void *v49;
  char v50;
  char v51;
  void *v52;
  char v53;
  char v54;
  void *__p;
  char v56;
  char v57;
  char v58;
  char v59;
  __int128 v60;
  __int128 v61;
  char v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  char v68;
  char v69;
  unsigned __int8 v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  sub_20AEEC3E8(&v60, cf);
  v5 = v60;
  if (*((_QWORD *)&v60 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
    if (*((_QWORD *)&v60 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    do
      v11 = __ldxr(v6);
    while (__stxr(v11 + 1, v6));
    do
      v12 = __ldxr(v6);
    while (__stxr(v12 + 1, v6));
    do
      v13 = __ldaxr(v6);
    while (__stlxr(v13 - 1, v6));
    if (!v13)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v5 + 1) + 16))(*((_QWORD *)&v5 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v5 + 1));
    }
    do
      v14 = __ldaxr(v6);
    while (__stlxr(v14 - 1, v6));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v5 + 1) + 16))(*((_QWORD *)&v5 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v5 + 1));
    }
  }
  sub_20AED18DC(a2, v36);
  v34 = (CFErrorRef **)&v35;
  v35 = a3;
  v33 = v5;
  sub_20AED4D3C(v48, (uint64_t)v36);
  sub_20AF67BBC((uint64_t *)&v33, v48, (uint64_t)&v60);
  if (v59)
  {
    if (v58)
    {
      if (v57 && v56 < 0)
        operator delete(__p);
      if (v54 && v53 < 0)
        operator delete(v52);
      if (v51 && v50 < 0)
        operator delete(v49);
    }
    sub_20AED30E0((uint64_t)v48);
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (!*((_QWORD *)&v33 + 1))
    goto LABEL_33;
  v16 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
  {
LABEL_33:
    v18 = v70;
    if (v70)
      goto LABEL_34;
LABEL_37:
    v22 = v60;
    sub_20AECEBD0(&v23, &v61);
    v32 = 1;
    sub_20AEED338(&v34, (uint64_t)&v22);
    if (v32 && v31)
    {
      if (v30)
      {
        if (v29 < 0)
          operator delete(v28);
        if (v27 < 0)
          operator delete(v26);
      }
      if (v25 && v24 < 0)
        goto LABEL_56;
    }
    goto LABEL_58;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  v18 = v70;
  if (!v70)
    goto LABEL_37;
LABEL_34:
  v19 = (__int128 *)sub_20AED4AC0((uint64_t)&v60);
  v20 = (__int128 *)operator new(0x240uLL, MEMORY[0x24BEDB6B8]);
  if (v20)
  {
    a2 = v20;
    *(_QWORD *)v20 = off_24C3F2180;
    sub_20AED5300((uint64_t)(v20 + 1), v19);
    *(_QWORD *)a2 = &off_24C3F2BA0;
    *((_QWORD *)a2 + 2) = &unk_24C3F2BF0;
    a2[35] = 0u;
    goto LABEL_58;
  }
  LOBYTE(v22) = 0;
  v32 = 0;
  sub_20AEED338(&v34, (uint64_t)&v22);
  if (!v32 || !v31)
    goto LABEL_57;
  if (v30)
  {
    if (v29 < 0)
      operator delete(v28);
    if (v27 < 0)
      operator delete(v26);
  }
  a2 = 0;
  if (v25 && v24 < 0)
  {
LABEL_56:
    operator delete(v23);
LABEL_57:
    a2 = 0;
  }
LABEL_58:
  if (v70)
  {
    sub_20AED5474((uint64_t)&v60);
  }
  else if (v69)
  {
    if (v68)
    {
      if (v67 < 0)
        operator delete(v66);
      if (v65 < 0)
        operator delete(v64);
    }
    if (v63 && v62 < 0)
      operator delete((void *)v61);
  }
  if (!v18)
    a2 = 0;
  if (v47)
  {
    if (v46)
    {
      if (v45 && v44 < 0)
        operator delete(v43);
      if (v42 && v41 < 0)
        operator delete(v40);
      if (v39 && v38 < 0)
        operator delete(v37);
    }
    sub_20AED30E0((uint64_t)v36);
  }
  return a2;
}

void sub_20AEEA838(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AEEA840);
  _Unwind_Resume(a1);
}

void sub_20AEEA8A4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52)
{
  unint64_t *p_shared_owners;
  unint64_t v55;
  const std::logic_error *exception_ptr;
  const char *v57;
  size_t v58;
  const char *v59;
  std::__fs::filesystem::filesystem_error_vtbl *v60;
  void *v61;
  std::__shared_weak_count *v62;
  std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::element_type *v63;
  unint64_t *v64;
  unint64_t v65;
  std::string *p_what;
  size_t v67;
  const char *v68;
  std::logic_error_vtbl *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  std::logic_error v74;
  unint64_t v75;
  char v76;
  __int128 v77;
  __int128 v78;
  char v79;
  char v80;
  void *v81;
  char v82;
  void *v83;
  char v84;
  char v85;
  char v86;
  std::__fs::filesystem::filesystem_error v87[4];
  CFErrorRef **v88[102];
  __int128 v89;
  void *v90[2];
  char v91;
  char v92;
  void *v93;
  char v94;
  void *v95;
  char v96;
  char v97;
  char v98;
  char v99;

  if (!a2)
    _Unwind_Resume(a1);
  if (LOBYTE(STACK[0x480]))
  {
    if (LOBYTE(STACK[0x470]))
    {
      if (LOBYTE(STACK[0x448]) && SLOBYTE(STACK[0x447]) < 0)
        operator delete((void *)STACK[0x430]);
      if (LOBYTE(STACK[0x420]) && SLOBYTE(STACK[0x407]) < 0)
        operator delete((void *)STACK[0x3F0]);
      if (LOBYTE(STACK[0x3E8]) && SLOBYTE(STACK[0x3E7]) < 0)
        operator delete((void *)STACK[0x3D0]);
    }
    sub_20AED30E0((uint64_t)&STACK[0x300]);
  }
  if (a52)
  {
    p_shared_owners = (unint64_t *)&a52->__shared_owners_;
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))a52->__on_zero_shared)(a52);
      std::__shared_weak_count::__release_weak(a52);
    }
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&v74, exception_ptr);
    v74.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v57 = std::logic_error::what(&v74);
    v58 = strlen(v57);
    if (v58 <= 0x7FFFFFFFFFFFFFF7)
    {
      v59 = (const char *)v58;
      if (v58 >= 0x17)
      {
        v70 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v58 | 7) != 0x17)
          v70 = v58 | 7;
        v71 = v70 + 1;
        v60 = (std::__fs::filesystem::filesystem_error_vtbl *)operator new(v70 + 1);
        v87[0].__imp_.__imp_ = v59;
        *(_QWORD *)&v87[0].__ec_.__val_ = v71 | 0x8000000000000000;
        v87[0].__vftable = v60;
      }
      else
      {
        *((_BYTE *)&v87[0].__ec_.__val_ + 7) = v58;
        v60 = (std::__fs::filesystem::filesystem_error_vtbl *)v87;
        if (!v58)
        {
LABEL_49:
          v59[(_QWORD)v60] = 0;
          LOBYTE(v87[0].__ec_.__cat_) = 1;
          sub_20B099E24((__int128 *)v87, (uint64_t)&v77);
          v89 = v77;
          sub_20AECEBD0(v90, &v78);
          v99 = 1;
          sub_20AEED338(v88, (uint64_t)&v89);
          if (v99 && v98)
          {
            if (v97)
            {
              if (v96 < 0)
                operator delete(v95);
              if (v94 < 0)
                operator delete(v93);
            }
            if (v92 && v91 < 0)
              operator delete(v90[0]);
          }
          if (v86)
          {
            if (v85)
            {
              if (v84 < 0)
                operator delete(v83);
              if (v82 < 0)
                operator delete(v81);
            }
            if (v80 && v79 < 0)
              operator delete((void *)v78);
          }
          if (LOBYTE(v87[0].__ec_.__cat_))
          {
            if (*((char *)&v87[0].__ec_.__val_ + 7) < 0)
              operator delete(v87[0].__vftable);
          }
          MEMORY[0x20BD35020](&v74);
          __cxa_end_catch();
          goto LABEL_101;
        }
      }
      memmove(v60, v57, (size_t)v59);
      goto LABEL_49;
    }
LABEL_99:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    LOBYTE(v89) = 0;
    v99 = 0;
    sub_20AEED338(v88, (uint64_t)&v89);
    if (v99 && v98)
    {
      if (v97)
      {
        if (v96 < 0)
          operator delete(v95);
        if (v94 < 0)
          operator delete(v93);
      }
      if (v92 && v91 < 0)
        operator delete(v90[0]);
    }
    __cxa_end_catch();
LABEL_101:
    JUMPOUT(0x20AEEA6E8);
  }
  v61 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error(&v87[0], (const std::runtime_error *)v61);
  v87[0].__ec_ = (std::error_code)*((_OWORD *)v61 + 1);
  v63 = (std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::element_type *)*((_QWORD *)v61 + 4);
  v62 = (std::__shared_weak_count *)*((_QWORD *)v61 + 5);
  v87[0].__vftable = (std::__fs::filesystem::filesystem_error_vtbl *)(MEMORY[0x24BEDB878] + 16);
  v87[0].__storage_.__ptr_ = v63;
  v87[0].__storage_.__cntrl_ = v62;
  if (v62)
  {
    v64 = (unint64_t *)&v62->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  __cxa_begin_catch(a1);
  p_what = &v87[0].__storage_.__ptr_->__what_;
  if (SHIBYTE(v87[0].__storage_.__ptr_->__what_.__r_.__value_.__r.__words[2]) < 0)
    p_what = (std::string *)p_what->__r_.__value_.__r.__words[0];
  v67 = strlen((const char *)p_what);
  if (v67 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_99;
  v68 = (const char *)v67;
  if (v67 >= 0x17)
  {
    v72 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v67 | 7) != 0x17)
      v72 = v67 | 7;
    v73 = v72 + 1;
    v69 = (std::logic_error_vtbl *)operator new(v72 + 1);
    v74.__imp_.__imp_ = v68;
    v75 = v73 | 0x8000000000000000;
    v74.__vftable = v69;
  }
  else
  {
    HIBYTE(v75) = v67;
    v69 = (std::logic_error_vtbl *)&v74;
    if (!v67)
    {
LABEL_76:
      v68[(_QWORD)v69] = 0;
      v76 = 1;
      sub_20B09A738((__int128 *)&v74, (uint64_t)&v77);
      v89 = v77;
      sub_20AECEBD0(v90, &v78);
      v99 = 1;
      sub_20AEED338(v88, (uint64_t)&v89);
      if (v99 && v98)
      {
        if (v97)
        {
          if (v96 < 0)
            operator delete(v95);
          if (v94 < 0)
            operator delete(v93);
        }
        if (v92 && v91 < 0)
          operator delete(v90[0]);
      }
      if (v86)
      {
        if (v85)
        {
          if (v84 < 0)
            operator delete(v83);
          if (v82 < 0)
            operator delete(v81);
        }
        if (v80 && v79 < 0)
          operator delete((void *)v78);
      }
      if (v76 && SHIBYTE(v75) < 0)
        operator delete(v74.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error(v87);
      __cxa_end_catch();
      goto LABEL_101;
    }
  }
  memmove(v69, p_what, (size_t)v68);
  goto LABEL_76;
}

void sub_20AEEAD94(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

uint64_t VZDataGetCFDictionary(uint64_t a1, CFErrorRef *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  void *v15;
  char v16;
  char v17;
  void *v18;
  char v19;
  void *__p;
  char v21;
  char v22;
  char v23;
  char v24;

  if (sub_20AED21B4((uint64_t)"VZDataGetCFDictionary", a1, a2))
    return 0;
  sub_20AF69338(a1 + 32, (uint64_t)&v14);
  if (v24)
  {
    sub_20AEEC2D8(&v12, (uint64_t)&v14);
    v4 = v12;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (v24)
      goto LABEL_11;
LABEL_17:
    if (!v23)
      return v4;
    if (v22)
    {
      if (v21 < 0)
        operator delete(__p);
      if (v19 < 0)
        operator delete(v18);
    }
    if (!v17 || (v16 & 0x80000000) == 0)
      return v4;
    operator delete(v15);
    return v4;
  }
  sub_20AECB410(&v14, a2);
  v4 = 0;
  if (!v24)
    goto LABEL_17;
LABEL_11:
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (!*((_QWORD *)&v14 + 1))
    return v4;
  v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return v4;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return v4;
}

void sub_20AEEAF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AED7018((uint64_t)va);
  _Unwind_Resume(a1);
}

__int128 *VZDataCreateNumberWithCFNumber(CFTypeRef cf, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v18;
  void *v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  char v28;
  __int128 v29;
  CFErrorRef **v30;
  uint64_t v31;
  char v32[208];
  void *v33;
  char v34;
  char v35;
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  char v42;
  char v43;
  __int128 v44[13];
  void *v45;
  char v46;
  char v47;
  void *v48;
  char v49;
  char v50;
  void *__p;
  char v52;
  char v53;
  char v54;
  char v55;
  __int128 v56;
  __int128 v57;
  char v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  char v64;
  char v65;
  unsigned __int8 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  sub_20B15B25C(&v56, cf);
  v5 = v56;
  if (*((_QWORD *)&v56 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
    if (*((_QWORD *)&v56 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  sub_20AED18DC(a2, v32);
  v30 = (CFErrorRef **)&v31;
  v31 = a3;
  v29 = v5;
  sub_20AED4D3C(v44, (uint64_t)v32);
  sub_20AF68984((uint64_t)&v29, v44, (uint64_t)&v56);
  if (v55)
  {
    if (v54)
    {
      if (v53 && v52 < 0)
        operator delete(__p);
      if (v50 && v49 < 0)
        operator delete(v48);
      if (v47 && v46 < 0)
        operator delete(v45);
    }
    sub_20AED30E0((uint64_t)v44);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (!*((_QWORD *)&v29 + 1))
    goto LABEL_25;
  v12 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
  {
LABEL_25:
    v14 = v66;
    if (v66)
      goto LABEL_26;
LABEL_29:
    v18 = v56;
    sub_20AECEBD0(&v19, &v57);
    v28 = 1;
    sub_20AEEE194(&v30, (uint64_t)&v18);
    if (v28 && v27)
    {
      if (v26)
      {
        if (v25 < 0)
          operator delete(v24);
        if (v23 < 0)
          operator delete(v22);
      }
      if (v21 && v20 < 0)
        goto LABEL_48;
    }
    goto LABEL_50;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v14 = v66;
  if (!v66)
    goto LABEL_29;
LABEL_26:
  v15 = (__int128 *)sub_20AED4AC0((uint64_t)&v56);
  v16 = (__int128 *)operator new(0x240uLL, MEMORY[0x24BEDB6B8]);
  if (v16)
  {
    a2 = v16;
    *(_QWORD *)v16 = off_24C3F2180;
    sub_20AED5300((uint64_t)(v16 + 1), v15);
    *(_QWORD *)a2 = &off_24C3F2BA0;
    *((_QWORD *)a2 + 2) = &unk_24C3F2BF0;
    a2[35] = 0u;
    goto LABEL_50;
  }
  LOBYTE(v18) = 0;
  v28 = 0;
  sub_20AEEE194(&v30, (uint64_t)&v18);
  if (!v28 || !v27)
    goto LABEL_49;
  if (v26)
  {
    if (v25 < 0)
      operator delete(v24);
    if (v23 < 0)
      operator delete(v22);
  }
  a2 = 0;
  if (v21 && v20 < 0)
  {
LABEL_48:
    operator delete(v19);
LABEL_49:
    a2 = 0;
  }
LABEL_50:
  if (v66)
  {
    sub_20AED5474((uint64_t)&v56);
  }
  else if (v65)
  {
    if (v64)
    {
      if (v63 < 0)
        operator delete(v62);
      if (v61 < 0)
        operator delete(v60);
    }
    if (v59 && v58 < 0)
      operator delete((void *)v57);
  }
  if (!v14)
    a2 = 0;
  if (v43)
  {
    if (v42)
    {
      if (v41 && v40 < 0)
        operator delete(v39);
      if (v38 && v37 < 0)
        operator delete(v36);
      if (v35 && v34 < 0)
        operator delete(v33);
    }
    sub_20AED30E0((uint64_t)v32);
  }
  return a2;
}

void sub_20AEEB38C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AEEB394);
  _Unwind_Resume(a1);
}

void sub_20AEEB3F8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52)
{
  unint64_t *p_shared_owners;
  unint64_t v55;
  const std::logic_error *exception_ptr;
  const char *v57;
  size_t v58;
  const char *v59;
  std::__fs::filesystem::filesystem_error_vtbl *v60;
  void *v61;
  std::__shared_weak_count *v62;
  std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::element_type *v63;
  unint64_t *v64;
  unint64_t v65;
  std::string *p_what;
  size_t v67;
  const char *v68;
  std::logic_error_vtbl *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  std::logic_error v74;
  unint64_t v75;
  char v76;
  __int128 v77;
  __int128 v78;
  char v79;
  char v80;
  void *v81;
  char v82;
  void *v83;
  char v84;
  char v85;
  char v86;
  std::__fs::filesystem::filesystem_error v87[4];
  CFErrorRef **v88[102];
  __int128 v89;
  void *v90[2];
  char v91;
  char v92;
  void *v93;
  char v94;
  void *v95;
  char v96;
  char v97;
  char v98;
  char v99;

  if (!a2)
    _Unwind_Resume(a1);
  if (LOBYTE(STACK[0x480]))
  {
    if (LOBYTE(STACK[0x470]))
    {
      if (LOBYTE(STACK[0x448]) && SLOBYTE(STACK[0x447]) < 0)
        operator delete((void *)STACK[0x430]);
      if (LOBYTE(STACK[0x420]) && SLOBYTE(STACK[0x407]) < 0)
        operator delete((void *)STACK[0x3F0]);
      if (LOBYTE(STACK[0x3E8]) && SLOBYTE(STACK[0x3E7]) < 0)
        operator delete((void *)STACK[0x3D0]);
    }
    sub_20AED30E0((uint64_t)&STACK[0x300]);
  }
  if (a52)
  {
    p_shared_owners = (unint64_t *)&a52->__shared_owners_;
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))a52->__on_zero_shared)(a52);
      std::__shared_weak_count::__release_weak(a52);
    }
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&v74, exception_ptr);
    v74.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v57 = std::logic_error::what(&v74);
    v58 = strlen(v57);
    if (v58 <= 0x7FFFFFFFFFFFFFF7)
    {
      v59 = (const char *)v58;
      if (v58 >= 0x17)
      {
        v70 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v58 | 7) != 0x17)
          v70 = v58 | 7;
        v71 = v70 + 1;
        v60 = (std::__fs::filesystem::filesystem_error_vtbl *)operator new(v70 + 1);
        v87[0].__imp_.__imp_ = v59;
        *(_QWORD *)&v87[0].__ec_.__val_ = v71 | 0x8000000000000000;
        v87[0].__vftable = v60;
      }
      else
      {
        *((_BYTE *)&v87[0].__ec_.__val_ + 7) = v58;
        v60 = (std::__fs::filesystem::filesystem_error_vtbl *)v87;
        if (!v58)
        {
LABEL_49:
          v59[(_QWORD)v60] = 0;
          LOBYTE(v87[0].__ec_.__cat_) = 1;
          sub_20B099E24((__int128 *)v87, (uint64_t)&v77);
          v89 = v77;
          sub_20AECEBD0(v90, &v78);
          v99 = 1;
          sub_20AEEE194(v88, (uint64_t)&v89);
          if (v99 && v98)
          {
            if (v97)
            {
              if (v96 < 0)
                operator delete(v95);
              if (v94 < 0)
                operator delete(v93);
            }
            if (v92 && v91 < 0)
              operator delete(v90[0]);
          }
          if (v86)
          {
            if (v85)
            {
              if (v84 < 0)
                operator delete(v83);
              if (v82 < 0)
                operator delete(v81);
            }
            if (v80 && v79 < 0)
              operator delete((void *)v78);
          }
          if (LOBYTE(v87[0].__ec_.__cat_))
          {
            if (*((char *)&v87[0].__ec_.__val_ + 7) < 0)
              operator delete(v87[0].__vftable);
          }
          MEMORY[0x20BD35020](&v74);
          __cxa_end_catch();
          goto LABEL_101;
        }
      }
      memmove(v60, v57, (size_t)v59);
      goto LABEL_49;
    }
LABEL_99:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    LOBYTE(v89) = 0;
    v99 = 0;
    sub_20AEEE194(v88, (uint64_t)&v89);
    if (v99 && v98)
    {
      if (v97)
      {
        if (v96 < 0)
          operator delete(v95);
        if (v94 < 0)
          operator delete(v93);
      }
      if (v92 && v91 < 0)
        operator delete(v90[0]);
    }
    __cxa_end_catch();
LABEL_101:
    JUMPOUT(0x20AEEB23CLL);
  }
  v61 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error(&v87[0], (const std::runtime_error *)v61);
  v87[0].__ec_ = (std::error_code)*((_OWORD *)v61 + 1);
  v63 = (std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::element_type *)*((_QWORD *)v61 + 4);
  v62 = (std::__shared_weak_count *)*((_QWORD *)v61 + 5);
  v87[0].__vftable = (std::__fs::filesystem::filesystem_error_vtbl *)(MEMORY[0x24BEDB878] + 16);
  v87[0].__storage_.__ptr_ = v63;
  v87[0].__storage_.__cntrl_ = v62;
  if (v62)
  {
    v64 = (unint64_t *)&v62->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  __cxa_begin_catch(a1);
  p_what = &v87[0].__storage_.__ptr_->__what_;
  if (SHIBYTE(v87[0].__storage_.__ptr_->__what_.__r_.__value_.__r.__words[2]) < 0)
    p_what = (std::string *)p_what->__r_.__value_.__r.__words[0];
  v67 = strlen((const char *)p_what);
  if (v67 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_99;
  v68 = (const char *)v67;
  if (v67 >= 0x17)
  {
    v72 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v67 | 7) != 0x17)
      v72 = v67 | 7;
    v73 = v72 + 1;
    v69 = (std::logic_error_vtbl *)operator new(v72 + 1);
    v74.__imp_.__imp_ = v68;
    v75 = v73 | 0x8000000000000000;
    v74.__vftable = v69;
  }
  else
  {
    HIBYTE(v75) = v67;
    v69 = (std::logic_error_vtbl *)&v74;
    if (!v67)
    {
LABEL_76:
      v68[(_QWORD)v69] = 0;
      v76 = 1;
      sub_20B09A738((__int128 *)&v74, (uint64_t)&v77);
      v89 = v77;
      sub_20AECEBD0(v90, &v78);
      v99 = 1;
      sub_20AEEE194(v88, (uint64_t)&v89);
      if (v99 && v98)
      {
        if (v97)
        {
          if (v96 < 0)
            operator delete(v95);
          if (v94 < 0)
            operator delete(v93);
        }
        if (v92 && v91 < 0)
          operator delete(v90[0]);
      }
      if (v86)
      {
        if (v85)
        {
          if (v84 < 0)
            operator delete(v83);
          if (v82 < 0)
            operator delete(v81);
        }
        if (v80 && v79 < 0)
          operator delete((void *)v78);
      }
      if (v76 && SHIBYTE(v75) < 0)
        operator delete(v74.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error(v87);
      __cxa_end_catch();
      goto LABEL_101;
    }
  }
  memmove(v69, p_what, (size_t)v68);
  goto LABEL_76;
}

void sub_20AEEB8E8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

__int128 *VZDataCreateBlobWithCFData(CFTypeRef cf, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v18;
  void *v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  char v28;
  __int128 v29;
  CFErrorRef **v30;
  uint64_t v31;
  char v32[208];
  void *v33;
  char v34;
  char v35;
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  char v42;
  char v43;
  __int128 v44[13];
  void *v45;
  char v46;
  char v47;
  void *v48;
  char v49;
  char v50;
  void *__p;
  char v52;
  char v53;
  char v54;
  char v55;
  __int128 v56;
  __int128 v57;
  char v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  char v64;
  char v65;
  unsigned __int8 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  sub_20B4EED40(&v56, cf);
  v5 = v56;
  if (*((_QWORD *)&v56 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
    if (*((_QWORD *)&v56 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  sub_20AED18DC(a2, v32);
  v30 = (CFErrorRef **)&v31;
  v31 = a3;
  v29 = v5;
  sub_20AED4D3C(v44, (uint64_t)v32);
  sub_20AF68FD8((uint64_t)&v29, v44, (uint64_t)&v56);
  if (v55)
  {
    if (v54)
    {
      if (v53 && v52 < 0)
        operator delete(__p);
      if (v50 && v49 < 0)
        operator delete(v48);
      if (v47 && v46 < 0)
        operator delete(v45);
    }
    sub_20AED30E0((uint64_t)v44);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (!*((_QWORD *)&v29 + 1))
    goto LABEL_25;
  v12 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
  {
LABEL_25:
    v14 = v66;
    if (v66)
      goto LABEL_26;
LABEL_29:
    v18 = v56;
    sub_20AECEBD0(&v19, &v57);
    v28 = 1;
    sub_20AEEE580(&v30, (uint64_t)&v18);
    if (v28 && v27)
    {
      if (v26)
      {
        if (v25 < 0)
          operator delete(v24);
        if (v23 < 0)
          operator delete(v22);
      }
      if (v21 && v20 < 0)
        goto LABEL_48;
    }
    goto LABEL_50;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v14 = v66;
  if (!v66)
    goto LABEL_29;
LABEL_26:
  v15 = (__int128 *)sub_20AED4AC0((uint64_t)&v56);
  v16 = (__int128 *)operator new(0x240uLL, MEMORY[0x24BEDB6B8]);
  if (v16)
  {
    a2 = v16;
    *(_QWORD *)v16 = off_24C3F2180;
    sub_20AED5300((uint64_t)(v16 + 1), v15);
    *(_QWORD *)a2 = &off_24C3F2BA0;
    *((_QWORD *)a2 + 2) = &unk_24C3F2BF0;
    a2[35] = 0u;
    goto LABEL_50;
  }
  LOBYTE(v18) = 0;
  v28 = 0;
  sub_20AEEE580(&v30, (uint64_t)&v18);
  if (!v28 || !v27)
    goto LABEL_49;
  if (v26)
  {
    if (v25 < 0)
      operator delete(v24);
    if (v23 < 0)
      operator delete(v22);
  }
  a2 = 0;
  if (v21 && v20 < 0)
  {
LABEL_48:
    operator delete(v19);
LABEL_49:
    a2 = 0;
  }
LABEL_50:
  if (v66)
  {
    sub_20AED5474((uint64_t)&v56);
  }
  else if (v65)
  {
    if (v64)
    {
      if (v63 < 0)
        operator delete(v62);
      if (v61 < 0)
        operator delete(v60);
    }
    if (v59 && v58 < 0)
      operator delete((void *)v57);
  }
  if (!v14)
    a2 = 0;
  if (v43)
  {
    if (v42)
    {
      if (v41 && v40 < 0)
        operator delete(v39);
      if (v38 && v37 < 0)
        operator delete(v36);
      if (v35 && v34 < 0)
        operator delete(v33);
    }
    sub_20AED30E0((uint64_t)v32);
  }
  return a2;
}

void sub_20AEEBD60(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AEEBD68);
  _Unwind_Resume(a1);
}

void sub_20AEEBDCC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52)
{
  unint64_t *p_shared_owners;
  unint64_t v55;
  const std::logic_error *exception_ptr;
  const char *v57;
  size_t v58;
  const char *v59;
  std::__fs::filesystem::filesystem_error_vtbl *v60;
  void *v61;
  std::__shared_weak_count *v62;
  std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::element_type *v63;
  unint64_t *v64;
  unint64_t v65;
  std::string *p_what;
  size_t v67;
  const char *v68;
  std::logic_error_vtbl *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  std::logic_error v74;
  unint64_t v75;
  char v76;
  __int128 v77;
  __int128 v78;
  char v79;
  char v80;
  void *v81;
  char v82;
  void *v83;
  char v84;
  char v85;
  char v86;
  std::__fs::filesystem::filesystem_error v87[4];
  CFErrorRef **v88[102];
  __int128 v89;
  void *v90[2];
  char v91;
  char v92;
  void *v93;
  char v94;
  void *v95;
  char v96;
  char v97;
  char v98;
  char v99;

  if (!a2)
    _Unwind_Resume(a1);
  if (LOBYTE(STACK[0x480]))
  {
    if (LOBYTE(STACK[0x470]))
    {
      if (LOBYTE(STACK[0x448]) && SLOBYTE(STACK[0x447]) < 0)
        operator delete((void *)STACK[0x430]);
      if (LOBYTE(STACK[0x420]) && SLOBYTE(STACK[0x407]) < 0)
        operator delete((void *)STACK[0x3F0]);
      if (LOBYTE(STACK[0x3E8]) && SLOBYTE(STACK[0x3E7]) < 0)
        operator delete((void *)STACK[0x3D0]);
    }
    sub_20AED30E0((uint64_t)&STACK[0x300]);
  }
  if (a52)
  {
    p_shared_owners = (unint64_t *)&a52->__shared_owners_;
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))a52->__on_zero_shared)(a52);
      std::__shared_weak_count::__release_weak(a52);
    }
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&v74, exception_ptr);
    v74.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v57 = std::logic_error::what(&v74);
    v58 = strlen(v57);
    if (v58 <= 0x7FFFFFFFFFFFFFF7)
    {
      v59 = (const char *)v58;
      if (v58 >= 0x17)
      {
        v70 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v58 | 7) != 0x17)
          v70 = v58 | 7;
        v71 = v70 + 1;
        v60 = (std::__fs::filesystem::filesystem_error_vtbl *)operator new(v70 + 1);
        v87[0].__imp_.__imp_ = v59;
        *(_QWORD *)&v87[0].__ec_.__val_ = v71 | 0x8000000000000000;
        v87[0].__vftable = v60;
      }
      else
      {
        *((_BYTE *)&v87[0].__ec_.__val_ + 7) = v58;
        v60 = (std::__fs::filesystem::filesystem_error_vtbl *)v87;
        if (!v58)
        {
LABEL_49:
          v59[(_QWORD)v60] = 0;
          LOBYTE(v87[0].__ec_.__cat_) = 1;
          sub_20B099E24((__int128 *)v87, (uint64_t)&v77);
          v89 = v77;
          sub_20AECEBD0(v90, &v78);
          v99 = 1;
          sub_20AEEE580(v88, (uint64_t)&v89);
          if (v99 && v98)
          {
            if (v97)
            {
              if (v96 < 0)
                operator delete(v95);
              if (v94 < 0)
                operator delete(v93);
            }
            if (v92 && v91 < 0)
              operator delete(v90[0]);
          }
          if (v86)
          {
            if (v85)
            {
              if (v84 < 0)
                operator delete(v83);
              if (v82 < 0)
                operator delete(v81);
            }
            if (v80 && v79 < 0)
              operator delete((void *)v78);
          }
          if (LOBYTE(v87[0].__ec_.__cat_))
          {
            if (*((char *)&v87[0].__ec_.__val_ + 7) < 0)
              operator delete(v87[0].__vftable);
          }
          MEMORY[0x20BD35020](&v74);
          __cxa_end_catch();
          goto LABEL_101;
        }
      }
      memmove(v60, v57, (size_t)v59);
      goto LABEL_49;
    }
LABEL_99:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    LOBYTE(v89) = 0;
    v99 = 0;
    sub_20AEEE580(v88, (uint64_t)&v89);
    if (v99 && v98)
    {
      if (v97)
      {
        if (v96 < 0)
          operator delete(v95);
        if (v94 < 0)
          operator delete(v93);
      }
      if (v92 && v91 < 0)
        operator delete(v90[0]);
    }
    __cxa_end_catch();
LABEL_101:
    JUMPOUT(0x20AEEBC10);
  }
  v61 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error(&v87[0], (const std::runtime_error *)v61);
  v87[0].__ec_ = (std::error_code)*((_OWORD *)v61 + 1);
  v63 = (std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::element_type *)*((_QWORD *)v61 + 4);
  v62 = (std::__shared_weak_count *)*((_QWORD *)v61 + 5);
  v87[0].__vftable = (std::__fs::filesystem::filesystem_error_vtbl *)(MEMORY[0x24BEDB878] + 16);
  v87[0].__storage_.__ptr_ = v63;
  v87[0].__storage_.__cntrl_ = v62;
  if (v62)
  {
    v64 = (unint64_t *)&v62->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  __cxa_begin_catch(a1);
  p_what = &v87[0].__storage_.__ptr_->__what_;
  if (SHIBYTE(v87[0].__storage_.__ptr_->__what_.__r_.__value_.__r.__words[2]) < 0)
    p_what = (std::string *)p_what->__r_.__value_.__r.__words[0];
  v67 = strlen((const char *)p_what);
  if (v67 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_99;
  v68 = (const char *)v67;
  if (v67 >= 0x17)
  {
    v72 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v67 | 7) != 0x17)
      v72 = v67 | 7;
    v73 = v72 + 1;
    v69 = (std::logic_error_vtbl *)operator new(v72 + 1);
    v74.__imp_.__imp_ = v68;
    v75 = v73 | 0x8000000000000000;
    v74.__vftable = v69;
  }
  else
  {
    HIBYTE(v75) = v67;
    v69 = (std::logic_error_vtbl *)&v74;
    if (!v67)
    {
LABEL_76:
      v68[(_QWORD)v69] = 0;
      v76 = 1;
      sub_20B09A738((__int128 *)&v74, (uint64_t)&v77);
      v89 = v77;
      sub_20AECEBD0(v90, &v78);
      v99 = 1;
      sub_20AEEE580(v88, (uint64_t)&v89);
      if (v99 && v98)
      {
        if (v97)
        {
          if (v96 < 0)
            operator delete(v95);
          if (v94 < 0)
            operator delete(v93);
        }
        if (v92 && v91 < 0)
          operator delete(v90[0]);
      }
      if (v86)
      {
        if (v85)
        {
          if (v84 < 0)
            operator delete(v83);
          if (v82 < 0)
            operator delete(v81);
        }
        if (v80 && v79 < 0)
          operator delete((void *)v78);
      }
      if (v76 && SHIBYTE(v75) < 0)
        operator delete(v74.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error(v87);
      __cxa_end_catch();
      goto LABEL_101;
    }
  }
  memmove(v69, p_what, (size_t)v68);
  goto LABEL_76;
}

void sub_20AEEC2BC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20AEEC2D8(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20AEEC3E8(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20AEEC3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20AEEC3E8(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C3F2C60;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20AEEC448(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20AEEC460(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20AEEC478(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AEEC49C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20AEEC4BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20AEEC52C(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 *v5;
  __int128 v6;
  __int128 *v7;
  __int128 v8;
  void **v9;
  void **v10;
  void *v11;
  _BYTE v12[16];
  void *__p;
  char v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  char v20;
  char v21;
  char v22;
  void *v23;
  void **v24;
  __int128 __dst;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AED5104();
  sub_20AEEC828();
  if (byte_254637B6F < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_254637B58, *((unint64_t *)&xmmword_254637B58 + 1));
  }
  else
  {
    __dst = xmmword_254637B58;
    v26 = unk_254637B68;
  }
  v5 = sub_20AEED13C();
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(&v27, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    v28 = *((_QWORD *)v5 + 2);
    v27 = v6;
  }
  v7 = sub_20AED3F9C();
  if (*((char *)v7 + 23) < 0)
  {
    sub_20AEC60F4(&v29, *(void **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v8 = *v7;
    v30 = *((_QWORD *)v7 + 2);
    v29 = v8;
  }
  sub_20AEC7620(&v23, (uint64_t)&__dst, 3uLL);
  sub_20AECF9B0(v12, a2);
  sub_20AECD798(v4, (__int128 **)&v23, (uint64_t)v12, **a1);
  if (!v22 || !v21)
    goto LABEL_18;
  if (!v20)
    goto LABEL_15;
  if ((v19 & 0x80000000) == 0)
  {
    if ((v17 & 0x80000000) == 0)
      goto LABEL_15;
LABEL_34:
    operator delete(v16);
    if (!v15)
      goto LABEL_18;
    goto LABEL_16;
  }
  operator delete(v18);
  if (v17 < 0)
    goto LABEL_34;
LABEL_15:
  if (!v15)
    goto LABEL_18;
LABEL_16:
  if (v14 < 0)
    operator delete(__p);
LABEL_18:
  v9 = (void **)v23;
  if (v23)
  {
    v10 = v24;
    v11 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v10 - 1) < 0)
          operator delete(*(v10 - 3));
        v10 -= 3;
      }
      while (v10 != v9);
      v11 = v23;
    }
    v24 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v30) < 0)
  {
    operator delete((void *)v29);
    if ((SHIBYTE(v28) & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v26) & 0x80000000) == 0)
        return;
LABEL_32:
      operator delete((void *)__dst);
      return;
    }
  }
  else if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete((void *)v27);
  if (SHIBYTE(v26) < 0)
    goto LABEL_32;
}

void sub_20AEEC784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  sub_20AECDEE0((uint64_t)&a9);
  sub_20AEC2E90(&a25);
  if (*(char *)(v25 - 57) < 0)
  {
    operator delete(*(void **)(v25 - 80));
    if ((*(char *)(v25 - 81) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v25 - 105) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(*(void **)(v25 - 128));
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v25 - 81) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v25 - 104));
  if ((*(char *)(v25 - 105) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20AEEC800()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20AEEC7F8);
  }
}

void sub_20AEEC828()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637AF0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637AF0))
  {
    sub_20AEEC8E0();
    if (byte_254637B87 < 0)
    {
      sub_20AEC60F4(&xmmword_254637B58, (void *)qword_254637B70, unk_254637B78);
    }
    else
    {
      xmmword_254637B58 = *(_OWORD *)&qword_254637B70;
      unk_254637B68 = unk_254637B80;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637B58, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637AF0);
  }
}

void sub_20AEEC8C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637AF0);
  _Unwind_Resume(a1);
}

void sub_20AEEC8E0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254637AF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637AF8))
  {
    sub_20AEECC28(__p);
    sub_20AEEC9B4((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254637B70, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637AF8);
  }
}

void sub_20AEEC974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254637AF8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254637AF8);
  _Unwind_Resume(a1);
}

void sub_20AEEC9B4(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  int v8;
  size_t v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254637B00);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_254637B00))
    goto LABEL_2;
  sub_20AEECE04();
  v8 = byte_254637BB7;
  if (byte_254637BB7 >= 0)
    v9 = byte_254637BB7;
  else
    v9 = qword_254637BA8;
  v10 = v9 + 1;
  if (v9 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (v10 >= 0x17)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v12 = v10 | 7;
    v13 = v12 + 1;
    v11 = (__int128 *)operator new(v12 + 1);
    *((_QWORD *)&xmmword_254637B88 + 1) = v9 + 1;
    unk_254637B98 = v13 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254637B88 = v11;
    goto LABEL_27;
  }
  v11 = &xmmword_254637B88;
  unk_254637B98 = 0;
  xmmword_254637B88 = 0uLL;
  byte_254637B9F = v9 + 1;
  if (v9)
  {
LABEL_27:
    if (v8 >= 0)
      v14 = &qword_254637BA0;
    else
      v14 = (uint64_t *)qword_254637BA0;
    memmove(v11, v14, v9);
  }
  *(_WORD *)((char *)v11 + v9) = 42;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637B88, &dword_20AEBB000);
  __cxa_guard_release(&qword_254637B00);
LABEL_2:
  if (byte_254637B9F < 0)
  {
    sub_20AEC60F4(__dst, (void *)xmmword_254637B88, *((unint64_t *)&xmmword_254637B88 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254637B88;
    v18 = unk_254637B98;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, (std::string *)&qword_254637B70, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v16;
    v7 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v16 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__dst[0]);
}

void sub_20AEECBE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637B00);
  _Unwind_Resume(a1);
}

void sub_20AEECBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AEECC28(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254637B28);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254637B28))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cf::DataRefT<const __CFData *>]", qword_254637C00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637C00, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637B28);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254637B30);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254637B30))
  {
    v5 = sub_20AED4780(qword_254637C00, "<", 0);
    sub_20AED467C(qword_254637C00, 0, v5, qword_254637C18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637C18, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637B30);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254637B38);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254637B38))
  {
    sub_20B531658((uint64_t)qword_254637C18, (uint64_t)&xmmword_254637C30);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637C30, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637B38);
  }
  if (byte_254637C47 < 0)
  {
    sub_20AEC60F4(__dst, (void *)xmmword_254637C30, *((unint64_t *)&xmmword_254637C30 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254637C30;
    __dst[2] = unk_254637C40;
  }
}

void sub_20AEECDBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637B38);
  _Unwind_Resume(a1);
}

void sub_20AEECDD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637B30);
  _Unwind_Resume(a1);
}

void sub_20AEECDEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637B28);
  _Unwind_Resume(a1);
}

void sub_20AEECE04()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254637B08);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637B08))
  {
    sub_20AEECF84();
    v1 = byte_254637BCF;
    if (byte_254637BCF >= 0)
      v2 = byte_254637BCF;
    else
      v2 = *((_QWORD *)&xmmword_254637BB8 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254637BA8 = v2 + 6;
      unk_254637BB0 = v6 | 0x8000000000000000;
      qword_254637BA0 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254637BA8 = 0;
      unk_254637BB0 = 0;
      qword_254637BA0 = 0x2074736E6F63;
      byte_254637BB7 = v2 + 6;
      v4 = (char *)&qword_254637BA0 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254637BA0, &dword_20AEBB000);
        __cxa_guard_release(&qword_254637B08);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254637BB8;
    else
      v8 = (__int128 *)xmmword_254637BB8;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20AEECF6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637B08);
  _Unwind_Resume(a1);
}

void sub_20AEECF84()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637B10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637B10))
  {
    sub_20AEED03C();
    if (byte_254637BFF < 0)
    {
      sub_20AEC60F4(&xmmword_254637BB8, (void *)xmmword_254637BE8, *((unint64_t *)&xmmword_254637BE8 + 1));
    }
    else
    {
      xmmword_254637BB8 = xmmword_254637BE8;
      unk_254637BC8 = unk_254637BF8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637BB8, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637B10);
  }
}

void sub_20AEED024(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637B10);
  _Unwind_Resume(a1);
}

void sub_20AEED03C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254637B18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637B18))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = __CFData]", qword_254637BD0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637BD0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637B18);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254637B20);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254637B20))
    {
      sub_20B531658((uint64_t)qword_254637BD0, (uint64_t)&xmmword_254637BE8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637BE8, &dword_20AEBB000);
      __cxa_guard_release(&qword_254637B20);
    }
  }
}

void sub_20AEED10C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637B20);
  _Unwind_Resume(a1);
}

void sub_20AEED124(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637B18);
  _Unwind_Resume(a1);
}

__int128 *sub_20AEED13C()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630978);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630978))
    return &xmmword_254630960;
  v2 = (char *)sub_20AEED218();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254630960, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254630970 = *((_QWORD *)v2 + 2);
    xmmword_254630960 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630960, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630978);
  return &xmmword_254630960;
}

void sub_20AEED200(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630978);
  _Unwind_Resume(a1);
}

void *sub_20AEED218()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254630998);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630998))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::ArithmeticType]", qword_254630980);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630980, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630998);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546309B8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_2546309B8))
    return &unk_2546309A0;
  sub_20B531658((uint64_t)qword_254630980, (uint64_t)&unk_2546309A0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_2546309A0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546309B8);
  return &unk_2546309A0;
}

void sub_20AEED308(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546309B8);
  _Unwind_Resume(a1);
}

void sub_20AEED320(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630998);
  _Unwind_Resume(a1);
}

void sub_20AEED338(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 *v5;
  __int128 v6;
  __int128 *v7;
  __int128 v8;
  void **v9;
  void **v10;
  void *v11;
  _BYTE v12[16];
  void *__p;
  char v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  char v20;
  char v21;
  char v22;
  void *v23;
  void **v24;
  __int128 __dst;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AED5104();
  v5 = sub_20AEED588();
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    v26 = *((_QWORD *)v5 + 2);
    __dst = v6;
  }
  v7 = sub_20AED3F9C();
  if (*((char *)v7 + 23) < 0)
  {
    sub_20AEC60F4(&v27, *(void **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v8 = *v7;
    v28 = *((_QWORD *)v7 + 2);
    v27 = v8;
  }
  sub_20AEC7620(&v23, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v12, a2);
  sub_20AECD798(v4, (__int128 **)&v23, (uint64_t)v12, **a1);
  if (!v22 || !v21)
    goto LABEL_15;
  if (!v20)
    goto LABEL_12;
  if ((v19 & 0x80000000) == 0)
  {
    if ((v17 & 0x80000000) == 0)
      goto LABEL_12;
LABEL_29:
    operator delete(v16);
    if (!v15)
      goto LABEL_15;
    goto LABEL_13;
  }
  operator delete(v18);
  if (v17 < 0)
    goto LABEL_29;
LABEL_12:
  if (!v15)
    goto LABEL_15;
LABEL_13:
  if (v14 < 0)
    operator delete(__p);
LABEL_15:
  v9 = (void **)v23;
  if (v23)
  {
    v10 = v24;
    v11 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v10 - 1) < 0)
          operator delete(*(v10 - 3));
        v10 -= 3;
      }
      while (v10 != v9);
      v11 = v23;
    }
    v24 = v9;
    operator delete(v11);
  }
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      return;
LABEL_27:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v27);
  if (SHIBYTE(v26) < 0)
    goto LABEL_27;
}

void sub_20AEED528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  sub_20AECDEE0((uint64_t)&a9);
  sub_20AEC2E90(&a25);
  if (*(char *)(v25 - 49) < 0)
    operator delete(*(void **)(v25 - 72));
  if (*(char *)(v25 - 73) < 0)
  {
    operator delete(*(void **)(v25 - 96));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

__int128 *sub_20AEED588()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546309D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546309D8))
    return &xmmword_2546309C0;
  v2 = sub_20AEED664();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546309C0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546309D0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546309C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546309C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546309D8);
  return &xmmword_2546309C0;
}

void sub_20AEED64C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546309D8);
  _Unwind_Resume(a1);
}

std::string *sub_20AEED664()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546309F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546309F8))
    return &stru_2546309E0;
  sub_20AEED8FC((uint64_t)__p);
  sub_20AEED754((char *)__p, &stru_2546309E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546309E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546309F8);
  return &stru_2546309E0;
}

void sub_20AEED714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546309F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546309F8);
  _Unwind_Resume(a1);
}

void sub_20AEED754(char *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AEEDAE0();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(__dst, (void *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v16 = v4[2];
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20AEEDF98();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 2uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20AEED8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20AEC2E90((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_20AEED8FC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254630B18);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254630B18))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cf::DictionaryRefT<const __CFDictionary *, cv3d::kit::cf::FlavorDefault>]", qword_254630B00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630B00, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630B18);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254630B38);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254630B38))
  {
    v5 = sub_20AED4780(qword_254630B00, "<", 0);
    sub_20AED467C(qword_254630B00, 0, v5, qword_254630B20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630B20, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630B38);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254630B58);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254630B58))
  {
    sub_20B531658((uint64_t)qword_254630B20, (uint64_t)&xmmword_254630B40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630B40, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630B58);
  }
  if (byte_254630B57 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254630B40, *((unint64_t *)&xmmword_254630B40 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254630B40;
    *(_QWORD *)(a1 + 16) = unk_254630B50;
  }
}

void sub_20AEEDA98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630B58);
  _Unwind_Resume(a1);
}

void sub_20AEEDAB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630B38);
  _Unwind_Resume(a1);
}

void sub_20AEEDAC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630B18);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AEEDAE0()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630A18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630A18))
  {
    v2 = sub_20AEEDC24();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v7 = &qword_254630A00;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254630A08 = v5 + 1;
      unk_254630A10 = v9 | 0x8000000000000000;
      qword_254630A00 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254630A08 = 0;
      unk_254630A10 = 0;
      qword_254630A00 = 0;
      byte_254630A17 = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630A00, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630A18);
        return &qword_254630A00;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630A00;
}

void sub_20AEEDC0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630A18);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AEEDC24()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630A38);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630A38))
  {
    v2 = sub_20AEEDD9C();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254630A28 = v5 + 6;
      unk_254630A30 = v9 | 0x8000000000000000;
      qword_254630A20 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254630A28 = 0;
      unk_254630A30 = 0;
      qword_254630A20 = 0x2074736E6F63;
      byte_254630A37 = v5 + 6;
      v7 = (char *)&qword_254630A20 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630A20, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630A38);
        return &qword_254630A20;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630A20;
}

void sub_20AEEDD84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630A38);
  _Unwind_Resume(a1);
}

__int128 *sub_20AEEDD9C()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630A58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630A58))
    return &xmmword_254630A40;
  v2 = (char *)sub_20AEEDE78();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254630A40, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254630A50 = *((_QWORD *)v2 + 2);
    xmmword_254630A40 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630A40, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630A58);
  return &xmmword_254630A40;
}

void sub_20AEEDE60(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630A58);
  _Unwind_Resume(a1);
}

void *sub_20AEEDE78()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254630A78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630A78))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = __CFDictionary]", qword_254630A60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630A60, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630A78);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254630A98);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254630A98))
    return &unk_254630A80;
  sub_20B531658((uint64_t)qword_254630A60, (uint64_t)&unk_254630A80);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254630A80, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630A98);
  return &unk_254630A80;
}

void sub_20AEEDF68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630A98);
  _Unwind_Resume(a1);
}

void sub_20AEEDF80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630A78);
  _Unwind_Resume(a1);
}

__int128 *sub_20AEEDF98()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630AB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630AB8))
    return &xmmword_254630AA0;
  v2 = (char *)sub_20AEEE074();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254630AA0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254630AB0 = *((_QWORD *)v2 + 2);
    xmmword_254630AA0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630AA0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630AB8);
  return &xmmword_254630AA0;
}

void sub_20AEEE05C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630AB8);
  _Unwind_Resume(a1);
}

void *sub_20AEEE074()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254630AD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630AD8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cf::FlavorDefault]", qword_254630AC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630AC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630AD8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254630AF8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254630AF8))
    return &unk_254630AE0;
  sub_20B531658((uint64_t)qword_254630AC0, (uint64_t)&unk_254630AE0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254630AE0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630AF8);
  return &unk_254630AE0;
}

void sub_20AEEE164(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630AF8);
  _Unwind_Resume(a1);
}

void sub_20AEEE17C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630AD8);
  _Unwind_Resume(a1);
}

void sub_20AEEE194(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  __int128 *v6;
  __int128 v7;
  void **v8;
  void **v9;
  void *v10;
  _BYTE v11[16];
  void *__p;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  void *v22;
  void **v23;
  __int128 __dst;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AED5104();
  v5 = atomic_load((unsigned __int8 *)&qword_254637B40);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254637B40))
  {
    sub_20AEEE480();
    if (byte_254637C8F < 0)
    {
      sub_20AEC60F4(&xmmword_254637C48, (void *)xmmword_254637C78, *((unint64_t *)&xmmword_254637C78 + 1));
    }
    else
    {
      xmmword_254637C48 = xmmword_254637C78;
      unk_254637C58 = unk_254637C88;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637C48, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637B40);
  }
  if (byte_254637C5F < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_254637C48, *((unint64_t *)&xmmword_254637C48 + 1));
  }
  else
  {
    __dst = xmmword_254637C48;
    v25 = unk_254637C58;
  }
  v6 = sub_20AED3F9C();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v26, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v27 = *((_QWORD *)v6 + 2);
    v26 = v7;
  }
  sub_20AEC7620(&v22, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v11, a2);
  sub_20AECD798(v4, (__int128 **)&v22, (uint64_t)v11, **a1);
  if (v21 && v20)
  {
    if (!v19)
      goto LABEL_13;
    if (v18 < 0)
    {
      operator delete(v17);
      if ((v16 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v14)
          goto LABEL_16;
LABEL_14:
        if (v13 < 0)
          operator delete(__p);
        goto LABEL_16;
      }
    }
    else if ((v16 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v15);
    if (!v14)
      goto LABEL_16;
    goto LABEL_14;
  }
LABEL_16:
  v8 = (void **)v22;
  if (v22)
  {
    v9 = v23;
    v10 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = v22;
    }
    v23 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v26);
  if (SHIBYTE(v25) < 0)
    goto LABEL_28;
}

void sub_20AEEE408(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637B40);
  _Unwind_Resume(a1);
}

void sub_20AEEE420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  sub_20AECDEE0((uint64_t)&a9);
  sub_20AEC2E90(&a25);
  if (*(char *)(v25 - 65) < 0)
    operator delete(*(void **)(v25 - 88));
  if (*(char *)(v25 - 89) < 0)
  {
    operator delete(*(void **)(v25 - 112));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AEEE480()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254637B48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637B48))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cf::NumberRef]", qword_254637C60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637C60, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637B48);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254637B50);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254637B50))
    {
      sub_20B531658((uint64_t)qword_254637C60, (uint64_t)&xmmword_254637C78);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637C78, &dword_20AEBB000);
      __cxa_guard_release(&qword_254637B50);
    }
  }
}

void sub_20AEEE550(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637B50);
  _Unwind_Resume(a1);
}

void sub_20AEEE568(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637B48);
  _Unwind_Resume(a1);
}

void sub_20AEEE580(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 *v5;
  __int128 v6;
  void **v7;
  void **v8;
  void *v9;
  _BYTE v10[16];
  void *__p;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  void *v21;
  void **v22;
  __int128 __dst;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AED5104();
  sub_20AEEC828();
  if (byte_254637B6F < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_254637B58, *((unint64_t *)&xmmword_254637B58 + 1));
  }
  else
  {
    __dst = xmmword_254637B58;
    v24 = unk_254637B68;
  }
  v5 = sub_20AED3F9C();
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(&v25, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    v26 = *((_QWORD *)v5 + 2);
    v25 = v6;
  }
  sub_20AEC7620(&v21, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v10, a2);
  sub_20AECD798(v4, (__int128 **)&v21, (uint64_t)v10, **a1);
  if (!v20 || !v19)
    goto LABEL_15;
  if (!v18)
    goto LABEL_12;
  if ((v17 & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      goto LABEL_12;
LABEL_29:
    operator delete(v14);
    if (!v13)
      goto LABEL_15;
    goto LABEL_13;
  }
  operator delete(v16);
  if (v15 < 0)
    goto LABEL_29;
LABEL_12:
  if (!v13)
    goto LABEL_15;
LABEL_13:
  if (v12 < 0)
    operator delete(__p);
LABEL_15:
  v7 = (void **)v21;
  if (v21)
  {
    v8 = v22;
    v9 = v21;
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      v9 = v21;
    }
    v22 = v7;
    operator delete(v9);
  }
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      return;
LABEL_27:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v25);
  if (SHIBYTE(v24) < 0)
    goto LABEL_27;
}

void sub_20AEEE780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  sub_20AECDEE0((uint64_t)&a9);
  sub_20AEC2E90(&a25);
  if (*(char *)(v25 - 49) < 0)
    operator delete(*(void **)(v25 - 72));
  if (*(char *)(v25 - 73) < 0)
  {
    operator delete(*(void **)(v25 - 96));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

std::__shared_weak_count *VZImageCreateWithCVPixelBuffer(std::__shared_weak_count_vtbl *cf, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t (**v16)();
  __int128 v17;
  __int128 v18;
  void *v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t (**v29)();
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  char v39;
  char v40;
  unsigned __int8 v41;
  CFErrorRef **v42;
  uint64_t v43;

  sub_20B285A9C(&v16, cf, 1, 0);
  v42 = (CFErrorRef **)&v43;
  v43 = a2;
  v29 = &off_24C4169B8;
  v30 = v17;
  v17 = 0uLL;
  sub_20AF79C2C((uint64_t)&v29, (uint64_t)&v31);
  v29 = &off_24C4169B8;
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = v41;
      if (v41)
        goto LABEL_6;
LABEL_13:
      v18 = v31;
      sub_20AECEBD0(&v19, &v32);
      v28 = 1;
      sub_20AEF053C(&v42, (uint64_t)&v18);
      if (v28 && v27)
      {
        if (v26)
        {
          if (v25 < 0)
            operator delete(__p);
          if (v23 < 0)
            operator delete(v22);
        }
        if (v21 && v20 < 0)
          operator delete(v19);
      }
      goto LABEL_34;
    }
  }
  v6 = v41;
  if (!v41)
    goto LABEL_13;
LABEL_6:
  v7 = sub_20AEF071C((uint64_t)&v31);
  v8 = (char *)operator new(0xB0uLL, MEMORY[0x24BEDB6B8]);
  if (v8)
  {
    v3 = (std::__shared_weak_count *)v8;
    v9 = *(_OWORD *)(v7 + 32);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(v7 + 16);
    *(_QWORD *)v8 = off_24C3F2180;
    *((_QWORD *)v8 + 1) = &off_24C403F68;
    *((_QWORD *)v8 + 2) = &off_24C3F2CB0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_OWORD *)(v8 + 40) = v9;
    *(_OWORD *)(v8 + 54) = *(_OWORD *)(v7 + 46);
    v8[72] = 0;
    v8[128] = 0;
    if (*(_BYTE *)(v7 + 120))
    {
      *((_QWORD *)v8 + 9) = &off_24C3F2D20;
      v10 = *(_OWORD *)(v7 + 72);
      *(_QWORD *)(v7 + 72) = 0;
      *(_QWORD *)(v7 + 80) = 0;
      v11 = *(_OWORD *)(v7 + 88);
      *((_OWORD *)v8 + 5) = v10;
      *((_OWORD *)v8 + 6) = v11;
      *(_OWORD *)(v8 + 110) = *(_OWORD *)(v7 + 102);
      v8[128] = 1;
    }
    v8[136] = 0;
    v8[160] = 0;
    if (*(_BYTE *)(v7 + 152))
    {
      *((_QWORD *)v8 + 17) = &off_24C4169B8;
      *((_OWORD *)v8 + 9) = *(_OWORD *)(v7 + 136);
      *(_QWORD *)(v7 + 136) = 0;
      *(_QWORD *)(v7 + 144) = 0;
      v8[160] = 1;
    }
    *((_DWORD *)v8 + 42) = 1;
    *(_QWORD *)v8 = &off_24C3F3768;
    *((_QWORD *)v8 + 1) = &unk_24C3F37B8;
    goto LABEL_34;
  }
  LOBYTE(v18) = 0;
  v28 = 0;
  sub_20AEF053C(&v42, (uint64_t)&v18);
  if (!v28 || !v27)
  {
LABEL_33:
    v3 = 0;
    goto LABEL_34;
  }
  if (v26)
  {
    if (v25 < 0)
      operator delete(__p);
    if (v23 < 0)
      operator delete(v22);
  }
  v3 = 0;
  if (v21 && v20 < 0)
  {
    operator delete(v19);
    goto LABEL_33;
  }
LABEL_34:
  if (v41)
  {
    (*(void (**)(__int128 *))v31)(&v31);
  }
  else if (v40)
  {
    if (v39)
    {
      if (v38 < 0)
        operator delete(v37);
      if (v36 < 0)
        operator delete(v35);
    }
    if (v34 && v33 < 0)
      operator delete((void *)v32);
  }
  if (!v6)
    v3 = 0;
  v16 = &off_24C4169B8;
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v3;
}

void sub_20AEEEB24(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::logic_error a12, unint64_t a13, char a14, __int128 a15, __int128 a16, int a17, __int16 a18, char a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,int a36,__int16 a37,void **__dst,size_t __dst_8,__int128 a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  char a65;
  __int16 a67;
  __int16 a69;
  uint64_t v69;
  const std::logic_error *exception_ptr;
  const char *v73;
  size_t v74;
  size_t v75;
  void **p_dst;
  void *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  const char *v81;
  size_t v82;
  const char *v83;
  std::logic_error_vtbl *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  if ((_BYTE)a69 && (_BYTE)a67)
  {
    if (a65)
    {
      if (a64 < 0)
        operator delete(__p);
      if (a57 < 0)
        operator delete(a52);
    }
    if (a51 && a50 < 0)
      operator delete(a45);
  }
  if (*(_BYTE *)(v69 - 80))
  {
    (**(void (***)(uint64_t))(v69 - 240))(v69 - 240);
  }
  else if (*(_BYTE *)(v69 - 128))
  {
    if (*(_BYTE *)(v69 - 136))
    {
      if (*(char *)(v69 - 137) < 0)
        operator delete(*(void **)(v69 - 160));
      if (*(char *)(v69 - 169) < 0)
        operator delete(*(void **)(v69 - 192));
    }
    if (*(_BYTE *)(v69 - 200) && *(char *)(v69 - 201) < 0)
      operator delete(*(void **)(v69 - 224));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a12, exception_ptr);
    a12.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v73 = std::logic_error::what(&a12);
    v74 = strlen(v73);
    if (v74 <= 0x7FFFFFFFFFFFFFF7)
    {
      v75 = v74;
      if (v74 >= 0x17)
      {
        v85 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v74 | 7) != 0x17)
          v85 = v74 | 7;
        v86 = v85 + 1;
        p_dst = (void **)operator new(v85 + 1);
        __dst_8 = v75;
        *(_QWORD *)&a40 = v86 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a40) = v74;
        p_dst = (void **)&__dst;
        if (!v74)
        {
LABEL_52:
          *((_BYTE *)p_dst + v75) = 0;
          BYTE8(a40) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a15);
          *(_OWORD *)(v69 - 240) = a15;
          sub_20AECEBD0((_BYTE *)(v69 - 224), &a16);
          *(_BYTE *)(v69 - 120) = 1;
          sub_20AEF053C((CFErrorRef ***)(v69 - 64), v69 - 240);
          if (*(_BYTE *)(v69 - 120) && *(_BYTE *)(v69 - 128))
          {
            if (*(_BYTE *)(v69 - 136))
            {
              if (*(char *)(v69 - 137) < 0)
                operator delete(*(void **)(v69 - 160));
              if (*(char *)(v69 - 169) < 0)
                operator delete(*(void **)(v69 - 192));
            }
            if (*(_BYTE *)(v69 - 200) && *(char *)(v69 - 201) < 0)
              operator delete(*(void **)(v69 - 224));
          }
          if ((_BYTE)a37)
          {
            if (a35)
            {
              if (a34 < 0)
                operator delete(a29);
              if (a27 < 0)
                operator delete(a22);
            }
            if (a21 && a20 < 0)
              operator delete((void *)a16);
          }
          if (BYTE8(a40))
          {
            if (SBYTE7(a40) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a12);
          __cxa_end_catch();
          goto LABEL_103;
        }
      }
      memmove(p_dst, v73, v75);
      goto LABEL_52;
    }
LABEL_102:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v69 - 240) = 0;
    *(_BYTE *)(v69 - 120) = 0;
    sub_20AEF053C((CFErrorRef ***)(v69 - 64), v69 - 240);
    if (*(_BYTE *)(v69 - 120) && *(_BYTE *)(v69 - 128))
    {
      if (*(_BYTE *)(v69 - 136))
      {
        if (*(char *)(v69 - 137) < 0)
          operator delete(*(void **)(v69 - 160));
        if (*(char *)(v69 - 169) < 0)
          operator delete(*(void **)(v69 - 192));
      }
      if (*(_BYTE *)(v69 - 200) && *(char *)(v69 - 201) < 0)
        operator delete(*(void **)(v69 - 224));
    }
    __cxa_end_catch();
LABEL_103:
    JUMPOUT(0x20AEEEA7CLL);
  }
  v77 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v77);
  a40 = *((_OWORD *)v77 + 1);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  v78 = *((_QWORD *)v77 + 5);
  a41 = *((_QWORD *)v77 + 4);
  a42 = v78;
  if (v78)
  {
    v79 = (unint64_t *)(v78 + 8);
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
  }
  __cxa_begin_catch(a1);
  v81 = (const char *)(a41 + 48);
  if (*(char *)(a41 + 71) < 0)
    v81 = *(const char **)v81;
  v82 = strlen(v81);
  if (v82 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_102;
  v83 = (const char *)v82;
  if (v82 >= 0x17)
  {
    v87 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v82 | 7) != 0x17)
      v87 = v82 | 7;
    v88 = v87 + 1;
    v84 = (std::logic_error_vtbl *)operator new(v87 + 1);
    a12.__imp_.__imp_ = v83;
    a13 = v88 | 0x8000000000000000;
    a12.__vftable = v84;
  }
  else
  {
    HIBYTE(a13) = v82;
    v84 = (std::logic_error_vtbl *)&a12;
    if (!v82)
    {
LABEL_79:
      v83[(_QWORD)v84] = 0;
      a14 = 1;
      sub_20B09A738((__int128 *)&a12, (uint64_t)&a15);
      *(_OWORD *)(v69 - 240) = a15;
      sub_20AECEBD0((_BYTE *)(v69 - 224), &a16);
      *(_BYTE *)(v69 - 120) = 1;
      sub_20AEF053C((CFErrorRef ***)(v69 - 64), v69 - 240);
      if (*(_BYTE *)(v69 - 120) && *(_BYTE *)(v69 - 128))
      {
        if (*(_BYTE *)(v69 - 136))
        {
          if (*(char *)(v69 - 137) < 0)
            operator delete(*(void **)(v69 - 160));
          if (*(char *)(v69 - 169) < 0)
            operator delete(*(void **)(v69 - 192));
        }
        if (*(_BYTE *)(v69 - 200) && *(char *)(v69 - 201) < 0)
          operator delete(*(void **)(v69 - 224));
      }
      if ((_BYTE)a37)
      {
        if (a35)
        {
          if (a34 < 0)
            operator delete(a29);
          if (a27 < 0)
            operator delete(a22);
        }
        if (a21 && a20 < 0)
          operator delete((void *)a16);
      }
      if (a14 && SHIBYTE(a13) < 0)
        operator delete(a12.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_103;
    }
  }
  memmove(v84, v81, (size_t)v83);
  goto LABEL_79;
}

uint64_t VZImageGetContainedCVPixelBuffer(uint64_t a1, CFErrorRef *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  char v18;
  char v19;
  char v20;

  if (sub_20AEEF1EC((uint64_t)"VZImageGetContainedCVPixelBuffer", a1, a2))
  {
    *((_QWORD *)&v10 + 1) = 0;
    v11 = 0;
    *(_QWORD *)&v10 = &off_24C4169B8;
    v20 = 1;
  }
  else
  {
    sub_20AF7C808((uint64_t)&v10, a1 + 8);
    if (!v20)
    {
      sub_20AECB410(&v10, a2);
      v4 = 0;
      if (v20)
        goto LABEL_14;
      goto LABEL_17;
    }
  }
  sub_20AEEF420((uint64_t)&v10);
  if (*((_QWORD *)&v10 + 1))
  {
    v4 = **((_QWORD **)&v10 + 1);
    v5 = *(std::__shared_weak_count **)(*((_QWORD *)&v10 + 1) + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!v20)
          goto LABEL_17;
LABEL_14:
        (*(void (**)(__int128 *))v10)(&v10);
        return v4;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  if (v20)
    goto LABEL_14;
LABEL_17:
  if (!v19)
    return v4;
  if (v18)
  {
    if (v17 < 0)
      operator delete(__p);
    if (v15 < 0)
      operator delete(v14);
  }
  if (!v13 || (v12 & 0x80000000) == 0)
    return v4;
  operator delete(v11);
  return v4;
}

void sub_20AEEF1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEEF4E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20AEEF1EC(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t *v6;
  __int128 v7;
  void *v9[2];
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  void *v16[2];
  uint64_t v17;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  char v32;
  char v33;
  char v34;

  if (!a2)
  {
    v6 = sub_20AEF0F44();
    if (*((char *)v6 + 23) < 0)
    {
      sub_20AEC60F4(v9, (void *)*v6, v6[1]);
    }
    else
    {
      v7 = *(_OWORD *)v6;
      v10 = v6[2];
      *(_OWORD *)v9 = v7;
    }
    v11 = 1;
    sub_20AECCECC(a1, (uint64_t)v9, (uint64_t)&v12);
    v23 = v12;
    LOBYTE(v24) = 0;
    v33 = 0;
    if (v22)
    {
      v26 = 0;
      if (v15)
      {
        v24 = v13;
        v25 = v14;
        v14 = 0;
        v13 = 0uLL;
        v26 = 1;
      }
      LOBYTE(v27) = 0;
      v32 = 0;
      if (v21)
      {
        v28 = v17;
        v27 = *(_OWORD *)v16;
        v16[0] = 0;
        v16[1] = 0;
        v29 = v18;
        *(_OWORD *)__p = *(_OWORD *)v19;
        v31 = v20;
        v17 = 0;
        v19[0] = 0;
        v19[1] = 0;
        v20 = 0;
        v32 = 1;
      }
      v33 = 1;
    }
    v34 = 0;
    sub_20AECB410(&v23, a3);
    if (!v34 && v33)
    {
      if (v32)
      {
        if (SHIBYTE(v31) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v28) < 0)
          operator delete((void *)v27);
      }
      if (v26 && SHIBYTE(v25) < 0)
        operator delete((void *)v24);
    }
    if (v22)
    {
      if (v21)
      {
        if (SHIBYTE(v20) < 0)
          operator delete(v19[0]);
        if (SHIBYTE(v17) < 0)
          operator delete(v16[0]);
      }
      if (v15 && SHIBYTE(v14) < 0)
        operator delete((void *)v13);
    }
    if (v11 && SHIBYTE(v10) < 0)
      operator delete(v9[0]);
  }
  return a2 == 0;
}

void sub_20AEEF3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECD704((uint64_t)&a32);
  sub_20AECCE40((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20AEEF420(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_20AECEBD0(v4, v1 + 1);
    sub_20AECF558((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22C0, (void (*)(void *))sub_20AECF5A8);
  }
  return result;
}

void sub_20AEEF49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCE40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AEEF4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_20AECCE40((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_20AEEF4CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEEF4E0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120))
  {
    (**(void (***)(uint64_t))a1)(a1);
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_8;
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_12:
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_12;
LABEL_8:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_9:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t VZImageGetCVPixelBufferView(uint64_t a1, CFErrorRef *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  char v18;
  char v19;
  char v20;

  if (sub_20AEEF1EC((uint64_t)"VZImageGetCVPixelBufferView", a1, a2))
  {
    *((_QWORD *)&v10 + 1) = 0;
    v11 = 0;
    *(_QWORD *)&v10 = &off_24C4169B8;
    v20 = 1;
  }
  else
  {
    sub_20AF7E898(a1 + 8, (uint64_t)&v10);
    if (!v20)
    {
      sub_20AECB410(&v10, a2);
      v4 = 0;
      if (v20)
        goto LABEL_14;
      goto LABEL_17;
    }
  }
  sub_20AEEF420((uint64_t)&v10);
  if (*((_QWORD *)&v10 + 1))
  {
    v4 = **((_QWORD **)&v10 + 1);
    v5 = *(std::__shared_weak_count **)(*((_QWORD *)&v10 + 1) + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!v20)
          goto LABEL_17;
LABEL_14:
        (*(void (**)(__int128 *))v10)(&v10);
        return v4;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  if (v20)
    goto LABEL_14;
LABEL_17:
  if (!v19)
    return v4;
  if (v18)
  {
    if (v17 < 0)
      operator delete(__p);
    if (v15 < 0)
      operator delete(v14);
  }
  if (!v13 || (v12 & 0x80000000) == 0)
    return v4;
  operator delete(v11);
  return v4;
}

void sub_20AEEF6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEEF4E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *VZDataCreateImageWithCVPixelBuffer(std::__shared_weak_count_vtbl *cf, __int128 *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  __int128 *v9;
  __int128 *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t (**v15)();
  __int128 v16;
  __int128 v17;
  void *v18;
  char v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t (**v28)();
  __int128 v29;
  CFErrorRef **v30;
  uint64_t v31;
  char v32[208];
  void *v33;
  char v34;
  char v35;
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  char v42;
  char v43;
  __int128 v44[13];
  void *v45;
  char v46;
  char v47;
  void *v48;
  char v49;
  char v50;
  void *__p;
  char v52;
  char v53;
  char v54;
  char v55;
  __int128 v56;
  __int128 v57;
  char v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  char v64;
  char v65;
  unsigned __int8 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  sub_20B285A9C(&v15, cf, 1, 0);
  sub_20AED18DC(a2, v32);
  v30 = (CFErrorRef **)&v31;
  v31 = a3;
  v28 = &off_24C4169B8;
  v29 = v16;
  v16 = 0uLL;
  sub_20AED4D3C(v44, (uint64_t)v32);
  sub_20AF7EF30((uint64_t)&v28, v44, (uint64_t)&v56);
  if (v55)
  {
    if (v54)
    {
      if (v53 && v52 < 0)
        operator delete(__p);
      if (v50 && v49 < 0)
        operator delete(v48);
      if (v47 && v46 < 0)
        operator delete(v45);
    }
    sub_20AED30E0((uint64_t)v44);
  }
  v28 = &off_24C4169B8;
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (!*((_QWORD *)&v29 + 1))
    goto LABEL_17;
  v6 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
  {
LABEL_17:
    v8 = v66;
    if (v66)
      goto LABEL_18;
LABEL_21:
    v17 = v56;
    sub_20AECEBD0(&v18, &v57);
    v27 = 1;
    sub_20AEF1200(&v30, (uint64_t)&v17);
    if (v27 && v26)
    {
      if (v25)
      {
        if (v24 < 0)
          operator delete(v23);
        if (v22 < 0)
          operator delete(v21);
      }
      if (v20 && v19 < 0)
        goto LABEL_40;
    }
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v8 = v66;
  if (!v66)
    goto LABEL_21;
LABEL_18:
  v9 = (__int128 *)sub_20AED4AC0((uint64_t)&v56);
  v10 = (__int128 *)operator new(0x240uLL, MEMORY[0x24BEDB6B8]);
  if (v10)
  {
    a2 = v10;
    *(_QWORD *)v10 = off_24C3F2180;
    sub_20AED5300((uint64_t)(v10 + 1), v9);
    *(_QWORD *)a2 = &off_24C3F2BA0;
    *((_QWORD *)a2 + 2) = &unk_24C3F2BF0;
    a2[35] = 0u;
    goto LABEL_42;
  }
  LOBYTE(v17) = 0;
  v27 = 0;
  sub_20AEF1200(&v30, (uint64_t)&v17);
  if (!v27 || !v26)
    goto LABEL_41;
  if (v25)
  {
    if (v24 < 0)
      operator delete(v23);
    if (v22 < 0)
      operator delete(v21);
  }
  a2 = 0;
  if (v20 && v19 < 0)
  {
LABEL_40:
    operator delete(v18);
LABEL_41:
    a2 = 0;
  }
LABEL_42:
  if (v66)
  {
    sub_20AED5474((uint64_t)&v56);
  }
  else if (v65)
  {
    if (v64)
    {
      if (v63 < 0)
        operator delete(v62);
      if (v61 < 0)
        operator delete(v60);
    }
    if (v59 && v58 < 0)
      operator delete((void *)v57);
  }
  if (!v8)
    a2 = 0;
  if (v43)
  {
    if (v42)
    {
      if (v41 && v40 < 0)
        operator delete(v39);
      if (v38 && v37 < 0)
        operator delete(v36);
      if (v35 && v34 < 0)
        operator delete(v33);
    }
    sub_20AED30E0((uint64_t)v32);
  }
  v15 = &off_24C4169B8;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a2;
}

void sub_20AEEFB58(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AEEFB60);
  _Unwind_Resume(a1);
}

void sub_20AEEFBC4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::__shared_weak_count *a56)
{
  unint64_t *p_shared_owners;
  unint64_t v59;
  const std::logic_error *exception_ptr;
  const char *v61;
  size_t v62;
  const char *v63;
  std::__fs::filesystem::filesystem_error_vtbl *v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::string *p_what;
  size_t v70;
  const char *v71;
  std::logic_error_vtbl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  std::logic_error v77;
  unint64_t v78;
  char v79;
  __int128 v80;
  __int128 v81;
  char v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  char v88;
  char v89;
  std::__fs::filesystem::filesystem_error v90[4];
  CFErrorRef **v91[102];
  __int128 v92;
  void *v93[2];
  char v94;
  char v95;
  void *v96;
  char v97;
  void *v98;
  char v99;
  char v100;
  char v101;
  char v102;

  if (!a2)
    _Unwind_Resume(a1);
  if (LOBYTE(STACK[0x4A0]))
  {
    if (LOBYTE(STACK[0x490]))
    {
      if (LOBYTE(STACK[0x468]) && SLOBYTE(STACK[0x467]) < 0)
        operator delete((void *)STACK[0x450]);
      if (LOBYTE(STACK[0x440]) && SLOBYTE(STACK[0x427]) < 0)
        operator delete((void *)STACK[0x410]);
      if (LOBYTE(STACK[0x408]) && SLOBYTE(STACK[0x407]) < 0)
        operator delete((void *)STACK[0x3F0]);
    }
    sub_20AED30E0((uint64_t)&STACK[0x320]);
  }
  if (a56)
  {
    p_shared_owners = (unint64_t *)&a56->__shared_owners_;
    do
      v59 = __ldaxr(p_shared_owners);
    while (__stlxr(v59 - 1, p_shared_owners));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))a56->__on_zero_shared)(a56);
      std::__shared_weak_count::__release_weak(a56);
    }
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&v77, exception_ptr);
    v77.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v61 = std::logic_error::what(&v77);
    v62 = strlen(v61);
    if (v62 <= 0x7FFFFFFFFFFFFFF7)
    {
      v63 = (const char *)v62;
      if (v62 >= 0x17)
      {
        v73 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v62 | 7) != 0x17)
          v73 = v62 | 7;
        v74 = v73 + 1;
        v64 = (std::__fs::filesystem::filesystem_error_vtbl *)operator new(v73 + 1);
        v90[0].__imp_.__imp_ = v63;
        *(_QWORD *)&v90[0].__ec_.__val_ = v74 | 0x8000000000000000;
        v90[0].__vftable = v64;
      }
      else
      {
        *((_BYTE *)&v90[0].__ec_.__val_ + 7) = v62;
        v64 = (std::__fs::filesystem::filesystem_error_vtbl *)v90;
        if (!v62)
        {
LABEL_49:
          v63[(_QWORD)v64] = 0;
          LOBYTE(v90[0].__ec_.__cat_) = 1;
          sub_20B099E24((__int128 *)v90, (uint64_t)&v80);
          v92 = v80;
          sub_20AECEBD0(v93, &v81);
          v102 = 1;
          sub_20AEF1200(v91, (uint64_t)&v92);
          if (v102 && v101)
          {
            if (v100)
            {
              if (v99 < 0)
                operator delete(v98);
              if (v97 < 0)
                operator delete(v96);
            }
            if (v95 && v94 < 0)
              operator delete(v93[0]);
          }
          if (v89)
          {
            if (v88)
            {
              if (v87 < 0)
                operator delete(v86);
              if (v85 < 0)
                operator delete(v84);
            }
            if (v83 && v82 < 0)
              operator delete((void *)v81);
          }
          if (LOBYTE(v90[0].__ec_.__cat_))
          {
            if (*((char *)&v90[0].__ec_.__val_ + 7) < 0)
              operator delete(v90[0].__vftable);
          }
          MEMORY[0x20BD35020](&v77);
          __cxa_end_catch();
          goto LABEL_101;
        }
      }
      memmove(v64, v61, (size_t)v63);
      goto LABEL_49;
    }
LABEL_99:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    LOBYTE(v92) = 0;
    v102 = 0;
    sub_20AEF1200(v91, (uint64_t)&v92);
    if (v102 && v101)
    {
      if (v100)
      {
        if (v99 < 0)
          operator delete(v98);
        if (v97 < 0)
          operator delete(v96);
      }
      if (v95 && v94 < 0)
        operator delete(v93[0]);
    }
    __cxa_end_catch();
LABEL_101:
    JUMPOUT(0x20AEEF9D0);
  }
  v65 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error(&v90[0], (const std::runtime_error *)v65);
  v90[0].__ec_ = (std::error_code)*((_OWORD *)v65 + 1);
  v90[0].__vftable = (std::__fs::filesystem::filesystem_error_vtbl *)(MEMORY[0x24BEDB878] + 16);
  v66 = (std::__shared_weak_count *)*((_QWORD *)v65 + 5);
  v90[0].__storage_.__ptr_ = (std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::element_type *)*((_QWORD *)v65 + 4);
  v90[0].__storage_.__cntrl_ = v66;
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  __cxa_begin_catch(a1);
  p_what = &v90[0].__storage_.__ptr_->__what_;
  if (SHIBYTE(v90[0].__storage_.__ptr_->__what_.__r_.__value_.__r.__words[2]) < 0)
    p_what = (std::string *)p_what->__r_.__value_.__r.__words[0];
  v70 = strlen((const char *)p_what);
  if (v70 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_99;
  v71 = (const char *)v70;
  if (v70 >= 0x17)
  {
    v75 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17)
      v75 = v70 | 7;
    v76 = v75 + 1;
    v72 = (std::logic_error_vtbl *)operator new(v75 + 1);
    v77.__imp_.__imp_ = v71;
    v78 = v76 | 0x8000000000000000;
    v77.__vftable = v72;
  }
  else
  {
    HIBYTE(v78) = v70;
    v72 = (std::logic_error_vtbl *)&v77;
    if (!v70)
    {
LABEL_76:
      v71[(_QWORD)v72] = 0;
      v79 = 1;
      sub_20B09A738((__int128 *)&v77, (uint64_t)&v80);
      v92 = v80;
      sub_20AECEBD0(v93, &v81);
      v102 = 1;
      sub_20AEF1200(v91, (uint64_t)&v92);
      if (v102 && v101)
      {
        if (v100)
        {
          if (v99 < 0)
            operator delete(v98);
          if (v97 < 0)
            operator delete(v96);
        }
        if (v95 && v94 < 0)
          operator delete(v93[0]);
      }
      if (v89)
      {
        if (v88)
        {
          if (v87 < 0)
            operator delete(v86);
          if (v85 < 0)
            operator delete(v84);
        }
        if (v83 && v82 < 0)
          operator delete((void *)v81);
      }
      if (v79 && SHIBYTE(v78) < 0)
        operator delete(v77.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error(v90);
      __cxa_end_catch();
      goto LABEL_101;
    }
  }
  memmove(v72, p_what, (size_t)v71);
  goto LABEL_76;
}

void sub_20AEF00AC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

uint64_t VZDataGetContainedCVPixelBuffer(uint64_t a1, CFErrorRef *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  char v18;
  char v19;
  char v20;

  if (sub_20AED21B4((uint64_t)"VZDataGetContainedCVPixelBuffer", a1, a2))
  {
    *((_QWORD *)&v10 + 1) = 0;
    v11 = 0;
    *(_QWORD *)&v10 = &off_24C4169B8;
    v20 = 1;
  }
  else
  {
    sub_20AF7F7E0(a1 + 32, (uint64_t)&v10);
    if (!v20)
    {
      sub_20AECB410(&v10, a2);
      v4 = 0;
      if (v20)
        goto LABEL_14;
      goto LABEL_17;
    }
  }
  sub_20AEEF420((uint64_t)&v10);
  if (*((_QWORD *)&v10 + 1))
  {
    v4 = **((_QWORD **)&v10 + 1);
    v5 = *(std::__shared_weak_count **)(*((_QWORD *)&v10 + 1) + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!v20)
          goto LABEL_17;
LABEL_14:
        (*(void (**)(__int128 *))v10)(&v10);
        return v4;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  if (v20)
    goto LABEL_14;
LABEL_17:
  if (!v19)
    return v4;
  if (v18)
  {
    if (v17 < 0)
      operator delete(__p);
    if (v15 < 0)
      operator delete(v14);
  }
  if (!v13 || (v12 & 0x80000000) == 0)
    return v4;
  operator delete(v11);
  return v4;
}

void sub_20AEF0230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEEF4E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t VZDataGetCVPixelBufferView(uint64_t a1, CFErrorRef *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  char v18;
  char v19;
  char v20;

  if (sub_20AED21B4((uint64_t)"VZDataGetCVPixelBufferView", a1, a2))
  {
    *((_QWORD *)&v10 + 1) = 0;
    v11 = 0;
    *(_QWORD *)&v10 = &off_24C4169B8;
    v20 = 1;
  }
  else
  {
    sub_20AF7FDF4(a1 + 32, (uint64_t)&v10);
    if (!v20)
    {
      sub_20AECB410(&v10, a2);
      v4 = 0;
      if (v20)
        goto LABEL_14;
      goto LABEL_17;
    }
  }
  sub_20AEEF420((uint64_t)&v10);
  if (*((_QWORD *)&v10 + 1))
  {
    v4 = **((_QWORD **)&v10 + 1);
    v5 = *(std::__shared_weak_count **)(*((_QWORD *)&v10 + 1) + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!v20)
          goto LABEL_17;
LABEL_14:
        (*(void (**)(__int128 *))v10)(&v10);
        return v4;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  if (v20)
    goto LABEL_14;
LABEL_17:
  if (!v19)
    return v4;
  if (v18)
  {
    if (v17 < 0)
      operator delete(__p);
    if (v15 < 0)
      operator delete(v14);
  }
  if (!v13 || (v12 & 0x80000000) == 0)
    return v4;
  operator delete(v11);
  return v4;
}

void sub_20AEF03AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEEF4E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t VZDataGetCVPixelBuffer(uint64_t a1, CFErrorRef *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  char v18;
  char v19;
  char v20;

  if (sub_20AED21B4((uint64_t)"VZDataGetCVPixelBuffer", a1, a2))
  {
    *((_QWORD *)&v10 + 1) = 0;
    v11 = 0;
    *(_QWORD *)&v10 = &off_24C4169B8;
    v20 = 1;
  }
  else
  {
    sub_20AF7FDF4(a1 + 32, (uint64_t)&v10);
    if (!v20)
    {
      sub_20AECB410(&v10, a2);
      v4 = 0;
      if (v20)
        goto LABEL_14;
      goto LABEL_17;
    }
  }
  sub_20AEEF420((uint64_t)&v10);
  if (*((_QWORD *)&v10 + 1))
  {
    v4 = **((_QWORD **)&v10 + 1);
    v5 = *(std::__shared_weak_count **)(*((_QWORD *)&v10 + 1) + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!v20)
          goto LABEL_17;
LABEL_14:
        (*(void (**)(__int128 *))v10)(&v10);
        return v4;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  if (v20)
    goto LABEL_14;
LABEL_17:
  if (!v19)
    return v4;
  if (v18)
  {
    if (v17 < 0)
      operator delete(__p);
    if (v15 < 0)
      operator delete(v14);
  }
  if (!v13 || (v12 & 0x80000000) == 0)
    return v4;
  operator delete(v11);
  return v4;
}

void sub_20AEF0528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEEF4E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AEF053C(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  _BYTE v8[16];
  void *__p;
  char v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  char v16;
  char v17;
  char v18;
  __int128 *v19;
  __int128 *v20;
  __int128 __dst;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AEF0880();
  sub_20AEF0A7C();
  if (byte_254637CBF < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_254637CA8, *((unint64_t *)&xmmword_254637CA8 + 1));
  }
  else
  {
    __dst = xmmword_254637CA8;
    v22 = unk_254637CB8;
  }
  sub_20AEC7620(&v19, (uint64_t)&__dst, 1uLL);
  sub_20AECF9B0(v8, a2);
  sub_20AECD798(v4, &v19, (uint64_t)v8, **a1);
  if (!v18 || !v17)
    goto LABEL_12;
  if (!v16)
    goto LABEL_9;
  if ((v15 & 0x80000000) == 0)
  {
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_24:
    operator delete(v12);
    if (!v11)
      goto LABEL_12;
    goto LABEL_10;
  }
  operator delete(v14);
  if (v13 < 0)
    goto LABEL_24;
LABEL_9:
  if (!v11)
    goto LABEL_12;
LABEL_10:
  if (v10 < 0)
    operator delete(__p);
LABEL_12:
  v5 = v19;
  if (v19)
  {
    v6 = v20;
    v7 = v19;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*((void **)v6 - 3));
        v6 = (__int128 *)((char *)v6 - 24);
      }
      while (v6 != v5);
      v7 = v19;
    }
    v20 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v22) < 0)
    operator delete((void *)__dst);
}

void sub_20AEF06D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECDEE0((uint64_t)va);
  sub_20AEC2E90((void **)(v2 - 88));
  if (*(char *)(v2 - 41) < 0)
  {
    operator delete(*(void **)(v2 - 64));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20AEF071C(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 160))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_20AECEBD0(v4, v1 + 1);
    sub_20AECF558((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22C0, (void (*)(void *))sub_20AECF5A8);
  }
  return result;
}

void sub_20AEF0798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCE40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AEF07AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_20AECCE40((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_20AEF07C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEF07DC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 160))
  {
    (**(void (***)(uint64_t))a1)(a1);
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_8;
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_12:
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_12;
LABEL_8:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_9:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

__int128 *sub_20AEF0880()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630BB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630BB8))
    return &xmmword_254630BA0;
  v2 = (char *)sub_20AEF095C();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254630BA0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254630BB0 = *((_QWORD *)v2 + 2);
    xmmword_254630BA0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630BA0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630BB8);
  return &xmmword_254630BA0;
}

void sub_20AEF0944(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630BB8);
  _Unwind_Resume(a1);
}

void *sub_20AEF095C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254630BD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630BD8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZImage]", qword_254630BC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630BC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630BD8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254630BF8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254630BF8))
    return &unk_254630BE0;
  sub_20B531658((uint64_t)qword_254630BC0, (uint64_t)&unk_254630BE0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254630BE0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630BF8);
  return &unk_254630BE0;
}

void sub_20AEF0A4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630BF8);
  _Unwind_Resume(a1);
}

void sub_20AEF0A64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630BD8);
  _Unwind_Resume(a1);
}

void sub_20AEF0A7C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637C90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637C90))
  {
    sub_20AEF0B34();
    if (byte_254637CEF < 0)
    {
      sub_20AEC60F4(&xmmword_254637CA8, (void *)xmmword_254637CD8, *((unint64_t *)&xmmword_254637CD8 + 1));
    }
    else
    {
      xmmword_254637CA8 = xmmword_254637CD8;
      unk_254637CB8 = unk_254637CE8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637CA8, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637C90);
  }
}

void sub_20AEF0B1C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637C90);
  _Unwind_Resume(a1);
}

void sub_20AEF0B34()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254637C98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637C98))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::PixelBufferRef]", qword_254637CC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637CC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637C98);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254637CA0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254637CA0))
    {
      sub_20B531658((uint64_t)qword_254637CC0, (uint64_t)&xmmword_254637CD8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637CD8, &dword_20AEBB000);
      __cxa_guard_release(&qword_254637CA0);
    }
  }
}

void sub_20AEF0C04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637CA0);
  _Unwind_Resume(a1);
}

void sub_20AEF0C1C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637C98);
  _Unwind_Resume(a1);
}

_QWORD *sub_20AEF0C34(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C3F2CB0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AEF0CA8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C3F2CB0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AEF0D1C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_20AEF0D24(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_20AEF0D2C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_20AEF0D40(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

_QWORD *sub_20AEF0DBC(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C3F2D20;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AEF0E30(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C3F2D20;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AEF0EA4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_20AEF0EAC(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_20AEF0EB4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_20AEF0EC8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t *sub_20AEF0F44()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630B78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630B78))
  {
    v2 = sub_20AEF1088();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v7 = &qword_254630B60;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254630B68 = v5 + 1;
      unk_254630B70 = v9 | 0x8000000000000000;
      qword_254630B60 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254630B68 = 0;
      unk_254630B70 = 0;
      qword_254630B60 = 0;
      byte_254630B77 = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630B60, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630B78);
        return &qword_254630B60;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630B60;
}

void sub_20AEF1070(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630B78);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AEF1088()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630B98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630B98))
  {
    v2 = sub_20AEF0880();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254630B88 = v5 + 6;
      unk_254630B90 = v9 | 0x8000000000000000;
      qword_254630B80 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254630B88 = 0;
      unk_254630B90 = 0;
      qword_254630B80 = 0x2074736E6F63;
      byte_254630B97 = v5 + 6;
      v7 = (char *)&qword_254630B80 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630B80, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630B98);
        return &qword_254630B80;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630B80;
}

void sub_20AEF11E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630B98);
  _Unwind_Resume(a1);
}

void sub_20AEF1200(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 *v5;
  __int128 v6;
  void **v7;
  void **v8;
  void *v9;
  _BYTE v10[16];
  void *__p;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  void *v21;
  void **v22;
  __int128 __dst;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AED5104();
  sub_20AEF0A7C();
  if (byte_254637CBF < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_254637CA8, *((unint64_t *)&xmmword_254637CA8 + 1));
  }
  else
  {
    __dst = xmmword_254637CA8;
    v24 = unk_254637CB8;
  }
  v5 = sub_20AED3F9C();
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(&v25, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    v26 = *((_QWORD *)v5 + 2);
    v25 = v6;
  }
  sub_20AEC7620(&v21, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v10, a2);
  sub_20AECD798(v4, (__int128 **)&v21, (uint64_t)v10, **a1);
  if (!v20 || !v19)
    goto LABEL_15;
  if (!v18)
    goto LABEL_12;
  if ((v17 & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      goto LABEL_12;
LABEL_29:
    operator delete(v14);
    if (!v13)
      goto LABEL_15;
    goto LABEL_13;
  }
  operator delete(v16);
  if (v15 < 0)
    goto LABEL_29;
LABEL_12:
  if (!v13)
    goto LABEL_15;
LABEL_13:
  if (v12 < 0)
    operator delete(__p);
LABEL_15:
  v7 = (void **)v21;
  if (v21)
  {
    v8 = v22;
    v9 = v21;
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      v9 = v21;
    }
    v22 = v7;
    operator delete(v9);
  }
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      return;
LABEL_27:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v25);
  if (SHIBYTE(v24) < 0)
    goto LABEL_27;
}

void sub_20AEF1400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  sub_20AECDEE0((uint64_t)&a9);
  sub_20AEC2E90(&a25);
  if (*(char *)(v25 - 49) < 0)
    operator delete(*(void **)(v25 - 72));
  if (*(char *)(v25 - 73) < 0)
  {
    operator delete(*(void **)(v25 - 96));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_OWORD *VZDataIOExportDataToNewBlob(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  _OWORD *v4;
  int v5;
  uint64_t v6;
  _OWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v18;
  char *v19;
  char v20;
  __int128 v21;
  void *v22;
  char v23;
  char v24;
  void *v25;
  char v26;
  void *__p;
  char v28;
  char v29;
  char v30;
  char v31;
  __int128 v32;
  __int128 v33;
  char v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  char v40;
  char v41;
  unsigned __int8 v42;
  CFErrorRef **v43;
  CFErrorRef *v44;

  v4 = (_OWORD *)a1;
  if (sub_20AED21B4((uint64_t)"VZDataIOExportDataToNewBlob", a1, a3))
    return 0;
  LOBYTE(v18) = 0;
  v20 = 0;
  v43 = &v44;
  v44 = a3;
  sub_20AFAAB44((uint64_t)(v4 + 2), (uint64_t)&v18, (uint64_t)&v32);
  v5 = v42;
  if (!v42)
  {
    v21 = v32;
    sub_20AECEBD0(&v22, &v33);
    v31 = 1;
    sub_20AEF1E14(&v43, (uint64_t)&v21);
    if (v31 && v30)
    {
      if (v29)
      {
        if (v28 < 0)
          operator delete(__p);
        if (v26 < 0)
          operator delete(v25);
      }
      if (v24 && v23 < 0)
        operator delete(v22);
    }
    goto LABEL_27;
  }
  v6 = sub_20AED6E14((uint64_t)&v32);
  v7 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  if (v7)
  {
    v4 = v7;
    v7[1] = *(_OWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *((_DWORD *)v7 + 8) = 1;
    *(_QWORD *)v7 = &off_24C3F2370;
    *((_QWORD *)v7 + 1) = &unk_24C3F23C0;
  }
  else
  {
    LOBYTE(v21) = 0;
    v31 = 0;
    sub_20AEF1E14(&v43, (uint64_t)&v21);
    if (v31 && v30)
    {
      if (v29)
      {
        if (v28 < 0)
          operator delete(__p);
        if (v26 < 0)
          operator delete(v25);
      }
      v4 = 0;
      if (!v24 || (v23 & 0x80000000) == 0)
        goto LABEL_27;
      operator delete(v22);
    }
    v4 = 0;
  }
LABEL_27:
  if (v42)
  {
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else if (v41)
  {
    if (v40)
    {
      if (v39 < 0)
        operator delete(v38);
      if (v37 < 0)
        operator delete(v36);
    }
    if (v35 && v34 < 0)
      operator delete((void *)v33);
  }
  if (!v5)
    v4 = 0;
  if (v20)
  {
    v11 = (char *)v18;
    if (v18)
    {
      v12 = v19;
      v13 = v18;
      if (v19 != v18)
      {
        do
        {
          v14 = (std::__shared_weak_count *)*((_QWORD *)v12 - 1);
          if (v14)
          {
            p_shared_owners = (unint64_t *)&v14->__shared_owners_;
            do
              v16 = __ldaxr(p_shared_owners);
            while (__stlxr(v16 - 1, p_shared_owners));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          v12 -= 16;
        }
        while (v12 != v11);
        v13 = v18;
      }
      v19 = v11;
      operator delete(v13);
    }
  }
  return v4;
}

void sub_20AEF1728(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const char *a13, std::logic_error a14, int a15, __int16 a16, char a17, char a18, char a19, __int128 a20,__int128 a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;
  const std::logic_error *exception_ptr;
  void *v46;
  const char *v47;

  sub_20AECDEE0((uint64_t)&a42);
  sub_20AED7018(v42 - 192);
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a14, exception_ptr);
    a14.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    a13 = std::logic_error::what(&a14);
    sub_20AED4C84(&__p, &a13);
    sub_20B099E24((__int128 *)&__p, (uint64_t)&a20);
    *(_OWORD *)(v42 - 192) = a20;
    sub_20AECEBD0((_BYTE *)(v42 - 176), &a21);
    *(_BYTE *)(v42 - 72) = 1;
    sub_20AEF1E14((CFErrorRef ***)(v42 - 64), v42 - 192);
    sub_20AECDEE0(v42 - 192);
    sub_20AECCE40((uint64_t)&a20);
    if (a39)
    {
      if (a38 < 0)
        operator delete(__p);
    }
    MEMORY[0x20BD35020](&a14);
    __cxa_end_catch();
  }
  else if (a2 == 2)
  {
    v46 = __cxa_get_exception_ptr(a1);
    sub_20AED4C1C((std::runtime_error *)&__p, (uint64_t)v46);
    __cxa_begin_catch(a1);
    v47 = (const char *)(a40 + 48);
    if (*(char *)(a40 + 71) < 0)
      v47 = *(const char **)v47;
    a13 = v47;
    sub_20AED4C84(&a14, &a13);
    sub_20B09A738((__int128 *)&a14, (uint64_t)&a20);
    *(_OWORD *)(v42 - 192) = a20;
    sub_20AECEBD0((_BYTE *)(v42 - 176), &a21);
    *(_BYTE *)(v42 - 72) = 1;
    sub_20AEF1E14((CFErrorRef ***)(v42 - 64), v42 - 192);
    sub_20AECDEE0(v42 - 192);
    sub_20AECCE40((uint64_t)&a20);
    if (a19 && a18 < 0)
      operator delete(a14.__vftable);
    std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__p);
    __cxa_end_catch();
  }
  else
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v42 - 192) = 0;
    *(_BYTE *)(v42 - 72) = 0;
    sub_20AEF1E14((CFErrorRef ***)(v42 - 64), v42 - 192);
    sub_20AECDEE0(v42 - 192);
    __cxa_end_catch();
  }
  JUMPOUT(0x20AEF1690);
}

_QWORD *VZDataIOImportDataFromBlob(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  _QWORD *v4;
  int v5;
  __int128 *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v15;
  char *v16;
  char v17;
  __int128 v18;
  void *v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;
  char v26;
  char v27;
  char v28;
  CFErrorRef **v29;
  CFErrorRef *v30;
  __int128 v31;
  __int128 v32;
  char v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  char v39;
  char v40;
  unsigned __int8 v41;
  uint64_t v42;

  v4 = (_QWORD *)a1;
  v42 = *MEMORY[0x24BDAC8D0];
  if (sub_20AED16A8((uint64_t)"VZDataIOImportDataFromBlob", a1, a3))
    return 0;
  LOBYTE(v15) = 0;
  v17 = 0;
  v29 = &v30;
  v30 = a3;
  sub_20AFAAF50(v4 + 2, (uint64_t)&v15, (uint64_t)&v31);
  v5 = v41;
  if (!v41)
  {
    v18 = v31;
    sub_20AECEBD0(&v19, &v32);
    v28 = 1;
    sub_20AEF21F4(&v29, (uint64_t)&v18);
    if (!v28 || !v27)
      goto LABEL_27;
    if (v26)
    {
      if (v25 < 0)
        operator delete(__p);
      if (v23 < 0)
        operator delete(v22);
    }
    if (!v21 || (v20 & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_25;
  }
  v6 = (__int128 *)sub_20AED4AC0((uint64_t)&v31);
  v7 = operator new(0x240uLL, MEMORY[0x24BEDB6B8]);
  if (!v7)
  {
    LOBYTE(v18) = 0;
    v28 = 0;
    sub_20AEF21F4(&v29, (uint64_t)&v18);
    if (!v28 || !v27)
      goto LABEL_26;
    if (v26)
    {
      if (v25 < 0)
        operator delete(__p);
      if (v23 < 0)
        operator delete(v22);
    }
    v4 = 0;
    if (!v21 || (v20 & 0x80000000) == 0)
      goto LABEL_27;
LABEL_25:
    operator delete(v19);
LABEL_26:
    v4 = 0;
    goto LABEL_27;
  }
  v4 = v7;
  *v7 = off_24C3F2180;
  sub_20AED5300((uint64_t)(v7 + 2), v6);
  *v4 = &off_24C3F2BA0;
  v4[2] = &unk_24C3F2BF0;
  *((_OWORD *)v4 + 35) = 0u;
LABEL_27:
  if (v41)
  {
    sub_20AED5474((uint64_t)&v31);
  }
  else if (v40)
  {
    if (v39)
    {
      if (v38 < 0)
        operator delete(v37);
      if (v36 < 0)
        operator delete(v35);
    }
    if (v34 && v33 < 0)
      operator delete((void *)v32);
  }
  if (!v5)
    v4 = 0;
  if (v17)
  {
    v8 = (char *)v15;
    if (v15)
    {
      v9 = v16;
      v10 = v15;
      if (v16 != v15)
      {
        do
        {
          v11 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
          if (v11)
          {
            p_shared_owners = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldaxr(p_shared_owners);
            while (__stlxr(v13 - 1, p_shared_owners));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v9 -= 16;
        }
        while (v9 != v8);
        v10 = v15;
      }
      v16 = v8;
      operator delete(v10);
    }
  }
  return v4;
}

void sub_20AEF1C30(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AEF1C38);
  _Unwind_Resume(a1);
}

void sub_20AEF1C48(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AEF1C54);
  _Unwind_Resume(a1);
}

void sub_20AEF1DFC(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20AEF1E04);
  sub_20AEC01C0(a1);
}

void sub_20AEF1E14(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  __int128 v6;
  unsigned __int8 v7;
  void **v8;
  void **v9;
  void *v10;
  _BYTE v11[16];
  void *__p;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  void *v22;
  void **v23;
  __int128 __dst;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AED34A8();
  v5 = sub_20AED6ED4();
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)*v5, v5[1]);
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v25 = v5[2];
    __dst = v6;
  }
  v7 = atomic_load((unsigned __int8 *)&qword_254637CF0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254637CF0))
  {
    sub_20AEF20F4();
    if (byte_254637D67 < 0)
    {
      sub_20AEC60F4(&xmmword_254637D20, (void *)xmmword_254637D50, *((unint64_t *)&xmmword_254637D50 + 1));
    }
    else
    {
      xmmword_254637D20 = xmmword_254637D50;
      unk_254637D30 = unk_254637D60;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637D20, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637CF0);
  }
  if (byte_254637D37 < 0)
  {
    sub_20AEC60F4(&v26, (void *)xmmword_254637D20, *((unint64_t *)&xmmword_254637D20 + 1));
  }
  else
  {
    v26 = xmmword_254637D20;
    v27 = unk_254637D30;
  }
  sub_20AEC7620(&v22, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v11, a2);
  sub_20AECD798(v4, (__int128 **)&v22, (uint64_t)v11, **a1);
  if (v21 && v20)
  {
    if (!v19)
      goto LABEL_13;
    if (v18 < 0)
    {
      operator delete(v17);
      if ((v16 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v14)
          goto LABEL_16;
LABEL_14:
        if (v13 < 0)
          operator delete(__p);
        goto LABEL_16;
      }
    }
    else if ((v16 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v15);
    if (!v14)
      goto LABEL_16;
    goto LABEL_14;
  }
LABEL_16:
  v8 = (void **)v22;
  if (v22)
  {
    v9 = v23;
    v10 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = v22;
    }
    v23 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v26);
  if (SHIBYTE(v25) < 0)
    goto LABEL_28;
}

void sub_20AEF2080(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_254637CF0);
  if (*(char *)(v1 - 89) < 0)
  {
    operator delete(*(void **)(v1 - 112));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AEF20F4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254637CF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637CF8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vl::visual_logger::ExportArguments]", qword_254637D38);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637D38, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637CF8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254637D00);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254637D00))
    {
      sub_20B531658((uint64_t)qword_254637D38, (uint64_t)&xmmword_254637D50);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637D50, &dword_20AEBB000);
      __cxa_guard_release(&qword_254637D00);
    }
  }
}

void sub_20AEF21C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637D00);
  _Unwind_Resume(a1);
}

void sub_20AEF21DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637CF8);
  _Unwind_Resume(a1);
}

void sub_20AEF21F4(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  __int128 v6;
  unsigned __int8 v7;
  void **v8;
  void **v9;
  void *v10;
  _BYTE v11[16];
  void *__p;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  void *v22;
  void **v23;
  __int128 __dst;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AED5104();
  v5 = sub_20AED4FC0();
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)*v5, v5[1]);
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v25 = v5[2];
    __dst = v6;
  }
  v7 = atomic_load((unsigned __int8 *)&qword_254637D08);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254637D08))
  {
    sub_20AEF24D4();
    if (byte_254637DAF < 0)
    {
      sub_20AEC60F4(&xmmword_254637D68, (void *)xmmword_254637D98, *((unint64_t *)&xmmword_254637D98 + 1));
    }
    else
    {
      xmmword_254637D68 = xmmword_254637D98;
      unk_254637D78 = unk_254637DA8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637D68, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637D08);
  }
  if (byte_254637D7F < 0)
  {
    sub_20AEC60F4(&v26, (void *)xmmword_254637D68, *((unint64_t *)&xmmword_254637D68 + 1));
  }
  else
  {
    v26 = xmmword_254637D68;
    v27 = unk_254637D78;
  }
  sub_20AEC7620(&v22, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v11, a2);
  sub_20AECD798(v4, (__int128 **)&v22, (uint64_t)v11, **a1);
  if (v21 && v20)
  {
    if (!v19)
      goto LABEL_13;
    if (v18 < 0)
    {
      operator delete(v17);
      if ((v16 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v14)
          goto LABEL_16;
LABEL_14:
        if (v13 < 0)
          operator delete(__p);
        goto LABEL_16;
      }
    }
    else if ((v16 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v15);
    if (!v14)
      goto LABEL_16;
    goto LABEL_14;
  }
LABEL_16:
  v8 = (void **)v22;
  if (v22)
  {
    v9 = v23;
    v10 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = v22;
    }
    v23 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v26);
  if (SHIBYTE(v25) < 0)
    goto LABEL_28;
}

void sub_20AEF2460(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_254637D08);
  if (*(char *)(v1 - 89) < 0)
  {
    operator delete(*(void **)(v1 - 112));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AEF24D4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254637D10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637D10))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vl::visual_logger::ImportArguments]", qword_254637D80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637D80, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637D10);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254637D18);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254637D18))
    {
      sub_20B531658((uint64_t)qword_254637D80, (uint64_t)&xmmword_254637D98);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637D98, &dword_20AEBB000);
      __cxa_guard_release(&qword_254637D18);
    }
  }
}

void sub_20AEF25A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637D18);
  _Unwind_Resume(a1);
}

void sub_20AEF25BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637D10);
  _Unwind_Resume(a1);
}

__int128 *VZDataCreateImageWithIOSurface(std::__shared_weak_count_vtbl *cf, __int128 *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  __int128 *v9;
  __int128 *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t (**v15)();
  __int128 v16;
  __int128 v17;
  void *v18;
  char v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t (**v28)();
  __int128 v29;
  CFErrorRef **v30;
  uint64_t v31;
  char v32[208];
  void *v33;
  char v34;
  char v35;
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  char v42;
  char v43;
  _BYTE v44[208];
  void *v45;
  char v46;
  char v47;
  void *v48;
  char v49;
  char v50;
  void *__p;
  char v52;
  char v53;
  char v54;
  char v55;
  __int128 v56;
  __int128 v57;
  char v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  char v64;
  char v65;
  unsigned __int8 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  sub_20B4E7BB0(&v15, cf, 1, 0);
  sub_20AED18DC(a2, v32);
  v30 = (CFErrorRef **)&v31;
  v31 = a3;
  v28 = &off_24C41E150;
  v29 = v16;
  v16 = 0uLL;
  sub_20AED4D3C(v44, (uint64_t)v32);
  sub_20AFF7A18((uint64_t)&v28, (uint64_t)&v56);
  if (v55)
  {
    if (v54)
    {
      if (v53 && v52 < 0)
        operator delete(__p);
      if (v50 && v49 < 0)
        operator delete(v48);
      if (v47 && v46 < 0)
        operator delete(v45);
    }
    sub_20AED30E0((uint64_t)v44);
  }
  v28 = &off_24C41E150;
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (!*((_QWORD *)&v29 + 1))
    goto LABEL_17;
  v6 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
  {
LABEL_17:
    v8 = v66;
    if (v66)
      goto LABEL_18;
LABEL_21:
    v17 = v56;
    sub_20AECEBD0(&v18, &v57);
    v27 = 1;
    sub_20AEF3490(&v30, (uint64_t)&v17);
    if (v27 && v26)
    {
      if (v25)
      {
        if (v24 < 0)
          operator delete(v23);
        if (v22 < 0)
          operator delete(v21);
      }
      if (v20 && v19 < 0)
        goto LABEL_40;
    }
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v8 = v66;
  if (!v66)
    goto LABEL_21;
LABEL_18:
  v9 = (__int128 *)sub_20AED4AC0((uint64_t)&v56);
  v10 = (__int128 *)operator new(0x240uLL, MEMORY[0x24BEDB6B8]);
  if (v10)
  {
    a2 = v10;
    *(_QWORD *)v10 = off_24C3F2180;
    sub_20AED5300((uint64_t)(v10 + 1), v9);
    *(_QWORD *)a2 = &off_24C3F2BA0;
    *((_QWORD *)a2 + 2) = &unk_24C3F2BF0;
    a2[35] = 0u;
    goto LABEL_42;
  }
  LOBYTE(v17) = 0;
  v27 = 0;
  sub_20AEF3490(&v30, (uint64_t)&v17);
  if (!v27 || !v26)
    goto LABEL_41;
  if (v25)
  {
    if (v24 < 0)
      operator delete(v23);
    if (v22 < 0)
      operator delete(v21);
  }
  a2 = 0;
  if (v20 && v19 < 0)
  {
LABEL_40:
    operator delete(v18);
LABEL_41:
    a2 = 0;
  }
LABEL_42:
  if (v66)
  {
    sub_20AED5474((uint64_t)&v56);
  }
  else if (v65)
  {
    if (v64)
    {
      if (v63 < 0)
        operator delete(v62);
      if (v61 < 0)
        operator delete(v60);
    }
    if (v59 && v58 < 0)
      operator delete((void *)v57);
  }
  if (!v8)
    a2 = 0;
  if (v43)
  {
    if (v42)
    {
      if (v41 && v40 < 0)
        operator delete(v39);
      if (v38 && v37 < 0)
        operator delete(v36);
      if (v35 && v34 < 0)
        operator delete(v33);
    }
    sub_20AED30E0((uint64_t)v32);
  }
  v15 = &off_24C41E150;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a2;
}

void sub_20AEF2A34(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AEF2A3CLL);
  _Unwind_Resume(a1);
}

void sub_20AEF2AA0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::__shared_weak_count *a56)
{
  unint64_t *p_shared_owners;
  unint64_t v59;
  const std::logic_error *exception_ptr;
  const char *v61;
  size_t v62;
  const char *v63;
  std::__fs::filesystem::filesystem_error_vtbl *v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::string *p_what;
  size_t v70;
  const char *v71;
  std::logic_error_vtbl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  std::logic_error v77;
  unint64_t v78;
  char v79;
  __int128 v80;
  __int128 v81;
  char v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  char v88;
  char v89;
  std::__fs::filesystem::filesystem_error v90[4];
  CFErrorRef **v91[102];
  __int128 v92;
  void *v93[2];
  char v94;
  char v95;
  void *v96;
  char v97;
  void *v98;
  char v99;
  char v100;
  char v101;
  char v102;

  if (!a2)
    _Unwind_Resume(a1);
  if (LOBYTE(STACK[0x4A0]))
  {
    if (LOBYTE(STACK[0x490]))
    {
      if (LOBYTE(STACK[0x468]) && SLOBYTE(STACK[0x467]) < 0)
        operator delete((void *)STACK[0x450]);
      if (LOBYTE(STACK[0x440]) && SLOBYTE(STACK[0x427]) < 0)
        operator delete((void *)STACK[0x410]);
      if (LOBYTE(STACK[0x408]) && SLOBYTE(STACK[0x407]) < 0)
        operator delete((void *)STACK[0x3F0]);
    }
    sub_20AED30E0((uint64_t)&STACK[0x320]);
  }
  if (a56)
  {
    p_shared_owners = (unint64_t *)&a56->__shared_owners_;
    do
      v59 = __ldaxr(p_shared_owners);
    while (__stlxr(v59 - 1, p_shared_owners));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))a56->__on_zero_shared)(a56);
      std::__shared_weak_count::__release_weak(a56);
    }
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&v77, exception_ptr);
    v77.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v61 = std::logic_error::what(&v77);
    v62 = strlen(v61);
    if (v62 <= 0x7FFFFFFFFFFFFFF7)
    {
      v63 = (const char *)v62;
      if (v62 >= 0x17)
      {
        v73 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v62 | 7) != 0x17)
          v73 = v62 | 7;
        v74 = v73 + 1;
        v64 = (std::__fs::filesystem::filesystem_error_vtbl *)operator new(v73 + 1);
        v90[0].__imp_.__imp_ = v63;
        *(_QWORD *)&v90[0].__ec_.__val_ = v74 | 0x8000000000000000;
        v90[0].__vftable = v64;
      }
      else
      {
        *((_BYTE *)&v90[0].__ec_.__val_ + 7) = v62;
        v64 = (std::__fs::filesystem::filesystem_error_vtbl *)v90;
        if (!v62)
        {
LABEL_49:
          v63[(_QWORD)v64] = 0;
          LOBYTE(v90[0].__ec_.__cat_) = 1;
          sub_20B099E24((__int128 *)v90, (uint64_t)&v80);
          v92 = v80;
          sub_20AECEBD0(v93, &v81);
          v102 = 1;
          sub_20AEF3490(v91, (uint64_t)&v92);
          if (v102 && v101)
          {
            if (v100)
            {
              if (v99 < 0)
                operator delete(v98);
              if (v97 < 0)
                operator delete(v96);
            }
            if (v95 && v94 < 0)
              operator delete(v93[0]);
          }
          if (v89)
          {
            if (v88)
            {
              if (v87 < 0)
                operator delete(v86);
              if (v85 < 0)
                operator delete(v84);
            }
            if (v83 && v82 < 0)
              operator delete((void *)v81);
          }
          if (LOBYTE(v90[0].__ec_.__cat_))
          {
            if (*((char *)&v90[0].__ec_.__val_ + 7) < 0)
              operator delete(v90[0].__vftable);
          }
          MEMORY[0x20BD35020](&v77);
          __cxa_end_catch();
          goto LABEL_101;
        }
      }
      memmove(v64, v61, (size_t)v63);
      goto LABEL_49;
    }
LABEL_99:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    LOBYTE(v92) = 0;
    v102 = 0;
    sub_20AEF3490(v91, (uint64_t)&v92);
    if (v102 && v101)
    {
      if (v100)
      {
        if (v99 < 0)
          operator delete(v98);
        if (v97 < 0)
          operator delete(v96);
      }
      if (v95 && v94 < 0)
        operator delete(v93[0]);
    }
    __cxa_end_catch();
LABEL_101:
    JUMPOUT(0x20AEF28ACLL);
  }
  v65 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error(&v90[0], (const std::runtime_error *)v65);
  v90[0].__ec_ = (std::error_code)*((_OWORD *)v65 + 1);
  v90[0].__vftable = (std::__fs::filesystem::filesystem_error_vtbl *)(MEMORY[0x24BEDB878] + 16);
  v66 = (std::__shared_weak_count *)*((_QWORD *)v65 + 5);
  v90[0].__storage_.__ptr_ = (std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::element_type *)*((_QWORD *)v65 + 4);
  v90[0].__storage_.__cntrl_ = v66;
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  __cxa_begin_catch(a1);
  p_what = &v90[0].__storage_.__ptr_->__what_;
  if (SHIBYTE(v90[0].__storage_.__ptr_->__what_.__r_.__value_.__r.__words[2]) < 0)
    p_what = (std::string *)p_what->__r_.__value_.__r.__words[0];
  v70 = strlen((const char *)p_what);
  if (v70 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_99;
  v71 = (const char *)v70;
  if (v70 >= 0x17)
  {
    v75 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17)
      v75 = v70 | 7;
    v76 = v75 + 1;
    v72 = (std::logic_error_vtbl *)operator new(v75 + 1);
    v77.__imp_.__imp_ = v71;
    v78 = v76 | 0x8000000000000000;
    v77.__vftable = v72;
  }
  else
  {
    HIBYTE(v78) = v70;
    v72 = (std::logic_error_vtbl *)&v77;
    if (!v70)
    {
LABEL_76:
      v71[(_QWORD)v72] = 0;
      v79 = 1;
      sub_20B09A738((__int128 *)&v77, (uint64_t)&v80);
      v92 = v80;
      sub_20AECEBD0(v93, &v81);
      v102 = 1;
      sub_20AEF3490(v91, (uint64_t)&v92);
      if (v102 && v101)
      {
        if (v100)
        {
          if (v99 < 0)
            operator delete(v98);
          if (v97 < 0)
            operator delete(v96);
        }
        if (v95 && v94 < 0)
          operator delete(v93[0]);
      }
      if (v89)
      {
        if (v88)
        {
          if (v87 < 0)
            operator delete(v86);
          if (v85 < 0)
            operator delete(v84);
        }
        if (v83 && v82 < 0)
          operator delete((void *)v81);
      }
      if (v79 && SHIBYTE(v78) < 0)
        operator delete(v77.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error(v90);
      __cxa_end_catch();
      goto LABEL_101;
    }
  }
  memmove(v72, p_what, (size_t)v71);
  goto LABEL_76;
}

void sub_20AEF2F88(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

uint64_t VZDataGetIOSurface(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t *v12;
  std::__shared_weak_count *v13;

  v2 = 0;
  if (sub_20AED21B4((uint64_t)"VZDataGetIOSurface", a1, 0))
    return v2;
  sub_20AFFA8A0((__int128 *)(a1 + 32), &v11);
  if (v12)
  {
    v2 = *v12;
    v3 = (std::__shared_weak_count *)v12[1];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  else
  {
    v2 = 0;
  }
  v11 = &off_24C41E150;
  v7 = v13;
  if (!v13)
    return v2;
  v8 = (unint64_t *)&v13->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v2;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v2;
}

uint64_t VZDataGetExistingIOSurface(uint64_t a1, CFErrorRef *a2)
{
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  char v19;
  char v20;
  char v21;

  if (sub_20AED21B4((uint64_t)"VZDataGetExistingIOSurface", a1, a2))
  {
    *((_QWORD *)&v11 + 1) = 0;
    v12 = 0;
    *(_QWORD *)&v11 = &off_24C41E150;
    v21 = 1;
  }
  else
  {
    sub_20AFFA9A4((__int128 *)(a1 + 32), (uint64_t)&v11);
    if (!v21)
    {
      sub_20AECB410(&v11, a2);
      v5 = 0;
      if (v21)
        goto LABEL_14;
      goto LABEL_17;
    }
  }
  v4 = *(uint64_t **)(sub_20AEF3220((uint64_t)&v11) + 8);
  if (v4)
  {
    v5 = *v4;
    v6 = (std::__shared_weak_count *)v4[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (!v21)
          goto LABEL_17;
LABEL_14:
        (*(void (**)(__int128 *))v11)(&v11);
        return v5;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  if (v21)
    goto LABEL_14;
LABEL_17:
  if (!v20)
    return v5;
  if (v19)
  {
    if (v18 < 0)
      operator delete(__p);
    if (v16 < 0)
      operator delete(v15);
  }
  if (!v14 || (v13 & 0x80000000) == 0)
    return v5;
  operator delete(v12);
  return v5;
}

void sub_20AEF320C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEEF4E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEF3220(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_20AECEBD0(v4, v1 + 1);
    sub_20AECF558((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22C0, (void (*)(void *))sub_20AECF5A8);
  }
  return result;
}

void sub_20AEF329C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCE40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AEF32B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_20AECCE40((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_20AEF32CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const void *VZDataObtainOrCreateIOSurface(uint64_t a1, CFErrorRef *a2)
{
  uint64_t v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v12;
  void *v13;
  char v14;
  char v15;
  void *v16;
  char v17;
  void *__p;
  char v19;
  char v20;
  char v21;
  char v22;
  const void *v23;
  std::__shared_weak_count *v24;

  if (sub_20AED21B4((uint64_t)"VZDataObtainOrCreateIOSurface", a1, a2))
  {
    *((_QWORD *)&v12 + 1) = 0;
    v13 = 0;
    *(_QWORD *)&v12 = &off_24C41E150;
    v22 = 1;
  }
  else
  {
    sub_20AFFB234(a1 + 32, (uint64_t)&v12);
    if (!v22)
    {
      sub_20AECB410(&v12, a2);
      v5 = 0;
      if (v22)
        goto LABEL_18;
      goto LABEL_21;
    }
  }
  v4 = *(_QWORD *)(sub_20AEF3220((uint64_t)&v12) + 8);
  if (v4)
  {
    v5 = *(const void **)v4;
    v6 = *(std::__shared_weak_count **)(v4 + 8);
    v23 = *(const void **)v4;
    v24 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (v5)
      CFRetain(v5);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (!v22)
          goto LABEL_21;
LABEL_18:
        (*(void (**)(__int128 *))v12)(&v12);
        return v5;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  if (v22)
    goto LABEL_18;
LABEL_21:
  if (!v21)
    return v5;
  if (v20)
  {
    if (v19 < 0)
      operator delete(__p);
    if (v17 < 0)
      operator delete(v16);
  }
  if (!v15 || (v14 & 0x80000000) == 0)
    return v5;
  operator delete(v13);
  return v5;
}

void sub_20AEF3460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AEC147C(v9 - 32);
  sub_20AEEF4E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AEF347C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEEF4E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AEF3490(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  __int128 *v6;
  __int128 v7;
  void **v8;
  void **v9;
  void *v10;
  _BYTE v11[16];
  void *__p;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  void *v22;
  void **v23;
  __int128 __dst;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AED5104();
  v5 = atomic_load((unsigned __int8 *)&qword_254637DB0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254637DB0))
  {
    sub_20AEF377C();
    if (byte_254637E0F < 0)
    {
      sub_20AEC60F4(&xmmword_254637DC8, (void *)xmmword_254637DF8, *((unint64_t *)&xmmword_254637DF8 + 1));
    }
    else
    {
      xmmword_254637DC8 = xmmword_254637DF8;
      unk_254637DD8 = unk_254637E08;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637DC8, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637DB0);
  }
  if (byte_254637DDF < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_254637DC8, *((unint64_t *)&xmmword_254637DC8 + 1));
  }
  else
  {
    __dst = xmmword_254637DC8;
    v25 = unk_254637DD8;
  }
  v6 = sub_20AED3F9C();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v26, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v27 = *((_QWORD *)v6 + 2);
    v26 = v7;
  }
  sub_20AEC7620(&v22, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v11, a2);
  sub_20AECD798(v4, (__int128 **)&v22, (uint64_t)v11, **a1);
  if (v21 && v20)
  {
    if (!v19)
      goto LABEL_13;
    if (v18 < 0)
    {
      operator delete(v17);
      if ((v16 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v14)
          goto LABEL_16;
LABEL_14:
        if (v13 < 0)
          operator delete(__p);
        goto LABEL_16;
      }
    }
    else if ((v16 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v15);
    if (!v14)
      goto LABEL_16;
    goto LABEL_14;
  }
LABEL_16:
  v8 = (void **)v22;
  if (v22)
  {
    v9 = v23;
    v10 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = v22;
    }
    v23 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v26);
  if (SHIBYTE(v25) < 0)
    goto LABEL_28;
}

void sub_20AEF3704(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637DB0);
  _Unwind_Resume(a1);
}

void sub_20AEF371C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  sub_20AECDEE0((uint64_t)&a9);
  sub_20AEC2E90(&a25);
  if (*(char *)(v25 - 65) < 0)
    operator delete(*(void **)(v25 - 88));
  if (*(char *)(v25 - 89) < 0)
  {
    operator delete(*(void **)(v25 - 112));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AEF377C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254637DB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637DB8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosurface::SurfaceRef]", qword_254637DE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637DE0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637DB8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254637DC0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254637DC0))
    {
      sub_20B531658((uint64_t)qword_254637DE0, (uint64_t)&xmmword_254637DF8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637DF8, &dword_20AEBB000);
      __cxa_guard_release(&qword_254637DC0);
    }
  }
}

void sub_20AEF384C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637DC0);
  _Unwind_Resume(a1);
}

void sub_20AEF3864(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637DB8);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEF387C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 24);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20AEF3928(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_20AEF39CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AEF3A78(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AEF3B24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  sub_20AEF6E70(*(_QWORD **)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(void **)(a1 + 16);
    if (v3 == v2)
    {
LABEL_17:
      *(_QWORD *)(a1 + 24) = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = *(std::__shared_weak_count **)(v3 - 24);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = *(std::__shared_weak_count **)(v3 - 24);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 32;
      if (v3 == v2)
      {
        v4 = *(void **)(a1 + 16);
        goto LABEL_17;
      }
    }
  }
  return a1;
}

void sub_20AEF3C08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  sub_20AEF6E70(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 == v2)
    {
LABEL_17:
      *(_QWORD *)(a1 + 16) = v2;
      operator delete(v4);
      return;
    }
    while (1)
    {
      v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = *(std::__shared_weak_count **)(v3 - 24);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = *(std::__shared_weak_count **)(v3 - 24);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 32;
      if (v3 == v2)
      {
        v4 = *(void **)(a1 + 8);
        goto LABEL_17;
      }
    }
  }
}

void sub_20AEF3CE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  sub_20AEF6E70(*(_QWORD **)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
LABEL_18:
    JUMPOUT(0x20BD3583CLL);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(void **)(a1 + 16);
  if (v3 == v2)
  {
LABEL_17:
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v4);
    goto LABEL_18;
  }
  while (1)
  {
    v5 = *(std::__shared_weak_count **)(v3 - 8);
    if (!v5)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = *(std::__shared_weak_count **)(v3 - 24);
      if (v8)
      {
LABEL_10:
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    else
    {
LABEL_9:
      v8 = *(std::__shared_weak_count **)(v3 - 24);
      if (v8)
        goto LABEL_10;
    }
    v3 -= 32;
    if (v3 == v2)
    {
      v4 = *(void **)(a1 + 16);
      goto LABEL_17;
    }
  }
}

void sub_20AEF3DDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  sub_20AEF6E70(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
LABEL_18:
    JUMPOUT(0x20BD3583CLL);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(void **)(a1 + 8);
  if (v3 == v2)
  {
LABEL_17:
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
    goto LABEL_18;
  }
  while (1)
  {
    v5 = *(std::__shared_weak_count **)(v3 - 8);
    if (!v5)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = *(std::__shared_weak_count **)(v3 - 24);
      if (v8)
      {
LABEL_10:
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    else
    {
LABEL_9:
      v8 = *(std::__shared_weak_count **)(v3 - 24);
      if (v8)
        goto LABEL_10;
    }
    v3 -= 32;
    if (v3 == v2)
    {
      v4 = *(void **)(a1 + 8);
      goto LABEL_17;
    }
  }
}

uint64_t VZDestinationGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637E20);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254637E20))
    return qword_254637E18;
  qword_254637E18 = sub_20AECB130();
  __cxa_guard_release(&qword_254637E20);
  return qword_254637E18;
}

uint64_t VZDestinationOptionsGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637E30);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254637E30))
    return qword_254637E28;
  qword_254637E28 = sub_20AECB130();
  __cxa_guard_release(&qword_254637E30);
  return qword_254637E28;
}

uint64_t VZDestinationListGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637E40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254637E40))
    return qword_254637E38;
  qword_254637E38 = sub_20AECB130();
  __cxa_guard_release(&qword_254637E40);
  return qword_254637E38;
}

_OWORD *VZDestinationCreateWithCallback(const void *a1, uint64_t a2, CFErrorRef *a3)
{
  _QWORD *v6;
  _OWORD *v7;
  __int128 *v8;
  uint64_t v9;
  unsigned __int8 v10;
  void *v12[2];
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  void *v19[2];
  uint64_t v20;
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  char v24;
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  void *__p[2];
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v6 = operator new(0x20uLL);
    v6[1] = 0;
    v6[2] = 0;
    *v6 = &off_24C3F2FB0;
    v6[3] = _Block_copy(a1);
    *(_QWORD *)&v26 = &off_24C3F3060;
    *((_QWORD *)&v26 + 1) = v6 + 3;
    *(_QWORD *)&v27 = v6;
    *((_QWORD *)&v27 + 1) = &v26;
    LOWORD(v15) = (a2 != 0) << 8;
    v7 = sub_20AEF43C4((uint64_t)a3, &v26);
    v8 = (__int128 *)*((_QWORD *)&v27 + 1);
    if (*((__int128 **)&v27 + 1) == &v26)
    {
      v9 = 4;
      v8 = &v26;
      goto LABEL_9;
    }
    if (*((_QWORD *)&v27 + 1))
    {
      v9 = 5;
LABEL_9:
      (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
    }
  }
  else
  {
    v10 = atomic_load((unsigned __int8 *)&qword_254637E48);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254637E48))
    {
      sub_20AEF8600();
      if (byte_254637F67 < 0)
      {
        sub_20AEC60F4(&xmmword_254637F20, (void *)xmmword_254637F50, *((unint64_t *)&xmmword_254637F50 + 1));
      }
      else
      {
        xmmword_254637F20 = xmmword_254637F50;
        unk_254637F30 = unk_254637F60;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637F20, &dword_20AEBB000);
      __cxa_guard_release(&qword_254637E48);
    }
    if (byte_254637F37 < 0)
    {
      sub_20AEC60F4(v12, (void *)xmmword_254637F20, *((unint64_t *)&xmmword_254637F20 + 1));
    }
    else
    {
      *(_OWORD *)v12 = xmmword_254637F20;
      v13 = unk_254637F30;
    }
    v14 = 1;
    sub_20AECCECC((uint64_t)"VZDestinationCreateWithCallback", (uint64_t)v12, (uint64_t)&v15);
    v26 = v15;
    LOBYTE(v27) = 0;
    v36 = 0;
    if (v25)
    {
      v29 = 0;
      if (v18)
      {
        v27 = v16;
        v28 = v17;
        v17 = 0;
        v16 = 0uLL;
        v29 = 1;
      }
      LOBYTE(v30) = 0;
      v35 = 0;
      if (v24)
      {
        v31 = v20;
        v30 = *(_OWORD *)v19;
        v19[0] = 0;
        v19[1] = 0;
        v32 = v21;
        *(_OWORD *)__p = *(_OWORD *)v22;
        v34 = v23;
        v20 = 0;
        v22[0] = 0;
        v22[1] = 0;
        v23 = 0;
        v35 = 1;
      }
      v36 = 1;
    }
    v37 = 0;
    sub_20AECB410(&v26, a3);
    if (!v37 && v36)
    {
      if (v35)
      {
        if (SHIBYTE(v34) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v31) < 0)
          operator delete((void *)v30);
      }
      if (v29 && SHIBYTE(v28) < 0)
        operator delete((void *)v27);
    }
    if (v25)
    {
      if (v24)
      {
        if (SHIBYTE(v23) < 0)
          operator delete(v22[0]);
        if (SHIBYTE(v20) < 0)
          operator delete(v19[0]);
      }
      if (v18 && SHIBYTE(v17) < 0)
        operator delete((void *)v16);
    }
    if (v14 && SHIBYTE(v13) < 0)
      operator delete(v12[0]);
    return 0;
  }
  return v7;
}

void sub_20AEF4354(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637E48);
  _Unwind_Resume(a1);
}

void sub_20AEF4370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECD704((uint64_t)&a32);
  sub_20AECCE40((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20AEF43AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_OWORD *sub_20AEF43C4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  char v13[16];
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  char v22;
  char v23;
  __int128 v24;
  void *v25;
  char v26;
  char v27;
  void *v28;
  char v29;
  void *__p;
  char v31;
  char v32;
  char v33;
  char v34;
  __int128 v35;
  __int128 v36[6];
  char v37;
  CFErrorRef **v38;
  uint64_t v39;
  _QWORD v40[3];
  _QWORD *v41;
  char v42;
  _QWORD v43[3];
  _QWORD *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v38 = (CFErrorRef **)&v39;
  v39 = a1;
  v2 = (_QWORD *)a2[3];
  if (v2)
  {
    if (v2 == a2)
    {
      v44 = v43;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v43);
    }
    else
    {
      v44 = (_QWORD *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    v44 = 0;
  }
  v40[0] = &off_24C3F2898;
  v40[1] = sub_20AEDD8BC;
  v41 = v40;
  v42 = 1;
  sub_20AFAB418(v43, (uint64_t)v40, (uint64_t)&v35);
  if (v42)
  {
    v3 = v41;
    if (v41 == v40)
    {
      v4 = 4;
      v3 = v40;
    }
    else
    {
      if (!v41)
        goto LABEL_12;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
LABEL_12:
  v5 = v44;
  if (v44 == v43)
  {
    v6 = 4;
    v5 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_17;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_17:
  if (v37)
  {
    v7 = sub_20AEE18DC((uint64_t)&v35);
    v8 = operator new(0x38uLL, MEMORY[0x24BEDB6B8]);
    v9 = v8;
    if (v8)
    {
      v10 = *(_OWORD *)v7;
      v11 = *(_OWORD *)(v7 + 16);
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      v8[1] = v10;
      v8[2] = v11;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *((_DWORD *)v8 + 12) = 1;
      *(_QWORD *)v8 = &off_24C3F2D90;
      *((_QWORD *)v8 + 1) = &unk_24C3F2DE0;
    }
    else
    {
      v13[0] = 0;
      v23 = 0;
      sub_20AEF8C84(&v38, (uint64_t)v13);
      if (v23 && v22)
      {
        if (v21)
        {
          if (v20 < 0)
            operator delete(v19);
          if (v18 < 0)
            operator delete(v17);
        }
        if (v16 && v15 < 0)
          operator delete(v14);
      }
    }
    sub_20AEE199C((uint64_t)&v35);
  }
  else
  {
    v24 = v35;
    sub_20AECEBD0(&v25, v36);
    v34 = 1;
    sub_20AEF8C84(&v38, (uint64_t)&v24);
    if (v34 && v33)
    {
      if (v32)
      {
        if (v31 < 0)
          operator delete(__p);
        if (v29 < 0)
          operator delete(v28);
      }
      if (v27 && v26 < 0)
        operator delete(v25);
    }
    sub_20AEE199C((uint64_t)&v35);
    return 0;
  }
  return v9;
}

void sub_20AEF4680(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 __p, int a10, __int16 a11, char a12, char a13, char a14, __int128 a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,__int128 a32,int a33,__int16 a34,char a35,char a36,char a37,__int128 a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  uint64_t v71;
  const std::logic_error *exception_ptr;
  void *v75;
  _QWORD *v76;

  if (a2)
  {
    sub_20AECDEE0((uint64_t)&STACK[0x200]);
    sub_20AEE199C(v71 - 256);
    if (a2 == 3)
    {
      exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
      std::logic_error::logic_error((std::logic_error *)&a53, exception_ptr);
      a53 = MEMORY[0x24BEDB8D0] + 16;
      __cxa_begin_catch(a1);
      a31 = (uint64_t)std::logic_error::what((const std::logic_error *)&a53);
      sub_20AED4C84(&__p, (const char **)&a31);
      sub_20B099E24(&__p, v71 - 256);
      a15 = *(_OWORD *)(v71 - 256);
      sub_20AECEBD0(&a16, (__int128 *)(v71 - 240));
      a29 = 1;
      sub_20AEF8C84((CFErrorRef ***)(v71 - 128), (uint64_t)&a15);
      sub_20AECDEE0((uint64_t)&a15);
      sub_20AECCE40(v71 - 256);
      if (a14)
      {
        if (a13 < 0)
          operator delete((void *)__p);
      }
      MEMORY[0x20BD35020](&a53);
      __cxa_end_catch();
    }
    else if (a2 == 2)
    {
      v75 = __cxa_get_exception_ptr(a1);
      sub_20AED4C1C((std::runtime_error *)&a53, (uint64_t)v75);
      __cxa_begin_catch(a1);
      v76 = (_QWORD *)(a57 + 48);
      if (*(char *)(a57 + 71) < 0)
        v76 = (_QWORD *)*v76;
      a31 = (uint64_t)v76;
      sub_20AED4C84(&a32, (const char **)&a31);
      sub_20B09A738(&a32, v71 - 256);
      a38 = *(_OWORD *)(v71 - 256);
      sub_20AECEBD0(&a39, (__int128 *)(v71 - 240));
      a52 = 1;
      sub_20AEF8C84((CFErrorRef ***)(v71 - 128), (uint64_t)&a38);
      sub_20AECDEE0((uint64_t)&a38);
      sub_20AECCE40(v71 - 256);
      if (a37 && a36 < 0)
        operator delete((void *)a32);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&a53);
      __cxa_end_catch();
    }
    else
    {
      __cxa_begin_catch(a1);
      a59 = 0;
      a71 = 0;
      sub_20AEF8C84((CFErrorRef ***)(v71 - 128), (uint64_t)&a59);
      sub_20AECDEE0((uint64_t)&a59);
      __cxa_end_catch();
    }
    JUMPOUT(0x20AEF45F8);
  }
  _Unwind_Resume(a1);
}

void sub_20AEF48FC(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AEF4904);
  JUMPOUT(0x20AEF469CLL);
}

_OWORD *VZDestinationCreateWithCallbackFunction(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  _OWORD *v5;
  __int128 *v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v10;
  int v11;
  size_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  void *v20[2];
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  void *v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30[2];
  uint64_t v31;
  char v32;
  char v33;
  std::string __s;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  void *__p[2];
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v8 = atomic_load((unsigned __int8 *)&qword_254637EE0);
    if ((v8 & 1) != 0 || !__cxa_guard_acquire(&qword_254637EE0))
    {
LABEL_6:
      if (byte_2546380FF < 0)
      {
        sub_20AEC60F4(v20, (void *)xmmword_2546380E8, *((unint64_t *)&xmmword_2546380E8 + 1));
      }
      else
      {
        *(_OWORD *)v20 = xmmword_2546380E8;
        v21 = unk_2546380F8;
      }
      v22 = 1;
      sub_20AECCECC((uint64_t)"VZDestinationCreateWithCallbackFunction", (uint64_t)v20, (uint64_t)&v23);
      v35 = v23;
      LOBYTE(v36) = 0;
      v45 = 0;
      if (v33)
      {
        v38 = 0;
        if (v26)
        {
          v36 = v24;
          v37 = v25;
          v25 = 0;
          v24 = 0uLL;
          v38 = 1;
        }
        LOBYTE(v39) = 0;
        v44 = 0;
        if (v32)
        {
          v40 = v28;
          v39 = *(_OWORD *)v27;
          v27[0] = 0;
          v27[1] = 0;
          v41 = v29;
          *(_OWORD *)__p = *(_OWORD *)v30;
          v43 = v31;
          v28 = 0;
          v30[0] = 0;
          v30[1] = 0;
          v31 = 0;
          v44 = 1;
        }
        v45 = 1;
      }
      v46 = 0;
      sub_20AECB410(&v35, a4);
      if (!v46 && v45)
      {
        if (v44)
        {
          if (SHIBYTE(v43) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v40) < 0)
            operator delete((void *)v39);
        }
        if (v38 && SHIBYTE(v37) < 0)
          operator delete((void *)v36);
      }
      if (v33)
      {
        if (v32)
        {
          if (SHIBYTE(v31) < 0)
            operator delete(v30[0]);
          if (SHIBYTE(v28) < 0)
            operator delete(v27[0]);
        }
        if (v26 && SHIBYTE(v25) < 0)
          operator delete((void *)v24);
      }
      if (v22 && SHIBYTE(v21) < 0)
        operator delete(v20[0]);
      return 0;
    }
    v10 = atomic_load((unsigned __int8 *)&qword_254637EE8);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254637EE8))
    {
      v18 = atomic_load((unsigned __int8 *)&qword_254637EF0);
      if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254637EF0))
      {
        sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (void *, const VZLogMessage *)]", byte_254638118);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254638118, &dword_20AEBB000);
        __cxa_guard_release(&qword_254637EF0);
      }
      v19 = atomic_load((unsigned __int8 *)&qword_254637EF8);
      if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_254637EF8))
      {
        if (byte_254638118[23] < 0)
          sub_20AEC60F4(&__s, *(void **)byte_254638118, *(unint64_t *)&byte_254638118[8]);
        else
          __s = *(std::string *)byte_254638118;
        sub_20B52B814(&__s, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_254638130);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638130, &dword_20AEBB000);
        __cxa_guard_release(&qword_254637EF8);
      }
      if (byte_254638147 < 0)
      {
        sub_20AEC60F4(&xmmword_254638100, (void *)xmmword_254638130, *((unint64_t *)&xmmword_254638130 + 1));
      }
      else
      {
        xmmword_254638100 = xmmword_254638130;
        unk_254638110 = unk_254638140;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638100, &dword_20AEBB000);
      __cxa_guard_release(&qword_254637EE8);
    }
    v11 = byte_254638117;
    if (byte_254638117 >= 0)
      v12 = byte_254638117;
    else
      v12 = *((_QWORD *)&xmmword_254638100 + 1);
    v13 = v12 + 1;
    if (v12 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v13 >= 0x17)
    {
      v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v15 = v13 | 7;
      v16 = v15 + 1;
      v14 = (__int128 *)operator new(v15 + 1);
      *((_QWORD *)&xmmword_2546380E8 + 1) = v12 + 1;
      unk_2546380F8 = v16 | 0x8000000000000000;
      *(_QWORD *)&xmmword_2546380E8 = v14;
    }
    else
    {
      unk_2546380F8 = 0;
      xmmword_2546380E8 = 0uLL;
      v14 = &xmmword_2546380E8;
      byte_2546380FF = v12 + 1;
      if (!v12)
      {
LABEL_57:
        *(_WORD *)((char *)v14 + v12) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546380E8, &dword_20AEBB000);
        __cxa_guard_release(&qword_254637EE0);
        goto LABEL_6;
      }
    }
    if (v11 >= 0)
      v17 = &xmmword_254638100;
    else
      v17 = (__int128 *)xmmword_254638100;
    memmove(v14, v17, v12);
    goto LABEL_57;
  }
  *(_QWORD *)&v35 = &off_24C3F3108;
  *((_QWORD *)&v35 + 1) = a2;
  *(_QWORD *)&v36 = a1;
  *((_QWORD *)&v36 + 1) = &v35;
  LOWORD(v23) = (a3 != 0) << 8;
  v5 = sub_20AEF43C4((uint64_t)a4, &v35);
  v6 = (__int128 *)*((_QWORD *)&v36 + 1);
  if (*((__int128 **)&v36 + 1) == &v35)
  {
    v7 = 4;
    v6 = &v35;
    goto LABEL_9;
  }
  if (*((_QWORD *)&v36 + 1))
  {
    v7 = 5;
LABEL_9:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  return v5;
}

void sub_20AEF4E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254637EF8);
  __cxa_guard_abort(&qword_254637EE8);
  __cxa_guard_abort(&qword_254637EE0);
  _Unwind_Resume(a1);
}

void sub_20AEF4EC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637EE0);
  _Unwind_Resume(a1);
}

void sub_20AEF4EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,int a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *__p,uint64_t a63)
{
  char a67;
  char a68;
  char a70;
  char a72;

  if (!a72 && a70)
  {
    if (a68)
    {
      if (a67 < 0)
        operator delete(__p);
      if (a60 < 0)
        operator delete(a55);
    }
    if (a54 && a53 < 0)
      operator delete(a48);
  }
  if (a41)
  {
    if (a39)
    {
      if (a38 < 0)
        operator delete(a33);
      if (a31 < 0)
        operator delete(a26);
    }
    if (a25 && a24 < 0)
      operator delete(a19);
  }
  if (a15)
  {
    if (a14 < 0)
      operator delete(a9);
  }
  _Unwind_Resume(a1);
}

_OWORD *VZDestinationListCreate()
{
  _OWORD *result;
  uint64_t *v1;
  __int128 *v2;
  __int128 *v3;
  __int128 *v4;
  _BYTE v5[16];
  void *v6;
  char v7;
  char v8;
  void *v9;
  char v10;
  void *__p;
  char v12;
  char v13;
  char v14;
  char v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;

  result = operator new(0x48uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[1] = 0u;
    result[2] = 0u;
    *((_DWORD *)result + 10) = 1;
    *(_QWORD *)result = &off_24C3F2EA0;
    *((_QWORD *)result + 1) = &unk_24C3F2EF0;
    *((_QWORD *)result + 8) = 0;
    *((_QWORD *)result + 7) = 0;
    *((_QWORD *)result + 6) = (char *)result + 56;
  }
  else
  {
    v1 = (uint64_t *)sub_20AEF962C();
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v5[0] = 0;
    v15 = 0;
    sub_20AECD798(v1, &v16, (uint64_t)v5, 0);
    if (v15 && v14)
    {
      if (v13)
      {
        if (v12 < 0)
          operator delete(__p);
        if (v10 < 0)
          operator delete(v9);
      }
      if (v8 && v7 < 0)
        operator delete(v6);
    }
    v2 = v16;
    if (v16)
    {
      v3 = v17;
      v4 = v16;
      if (v17 != v16)
      {
        do
        {
          if (*((char *)v3 - 1) < 0)
            operator delete(*((void **)v3 - 3));
          v3 = (__int128 *)((char *)v3 - 24);
        }
        while (v3 != v2);
        v4 = v16;
      }
      v17 = v2;
      operator delete(v4);
    }
    return 0;
  }
  return result;
}

void VZDestinationListAddDestination(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unsigned __int8 v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 *v39;
  const void **v40;
  int v41;
  size_t v42;
  unint64_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  const void *v47;
  void *v48[2];
  uint64_t v49;
  char v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  void *v55[2];
  uint64_t v56;
  uint64_t v57;
  void *v58[2];
  uint64_t v59;
  char v60;
  char v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  void *__p[2];
  uint64_t v70;
  char v71;
  char v72;
  char v73;

  if (a1)
  {
    if (sub_20AEF5694((uint64_t)"VZDestinationListAddDestination", (uint64_t)a2, 0))
      return;
    v4 = (_QWORD *)a1[3];
    v5 = a1[4];
    if ((unint64_t)v4 < v5)
    {
      *v4 = a2[2];
      v6 = a2[3];
      v4[1] = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v4[2] = a2[4];
      v9 = a2[5];
      v4[3] = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v12 = v4 + 4;
LABEL_78:
      a1[3] = v12;
      return;
    }
    v14 = a1[2];
    v15 = ((uint64_t)v4 - v14) >> 5;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 59)
      sub_20AEC60B8();
    v17 = v5 - v14;
    if (v17 >> 4 > v16)
      v16 = v17 >> 4;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
      v18 = 0x7FFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 59)
        sub_20AEC60CC();
      v19 = (char *)operator new(32 * v18);
      v20 = a2[3];
      v21 = &v19[32 * v15];
      *(_QWORD *)v21 = a2[2];
      *((_QWORD *)v21 + 1) = v20;
      if (!v20)
        goto LABEL_57;
    }
    else
    {
      v19 = 0;
      v20 = a2[3];
      v21 = (char *)(32 * v15);
      *(_QWORD *)v21 = a2[2];
      *((_QWORD *)v21 + 1) = v20;
      if (!v20)
      {
LABEL_57:
        v25 = a2[5];
        *((_QWORD *)v21 + 2) = a2[4];
        *((_QWORD *)v21 + 3) = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        v28 = &v19[32 * v18];
        v12 = v21 + 32;
        v29 = (char *)a1[2];
        v30 = (char *)a1[3];
        if (v30 == v29)
        {
          a1[2] = v21;
          a1[3] = v12;
          a1[4] = v28;
        }
        else
        {
          do
          {
            v31 = *((_OWORD *)v30 - 2);
            v30 -= 32;
            *((_OWORD *)v21 - 2) = v31;
            v21 -= 32;
            *(_QWORD *)v30 = 0;
            *((_QWORD *)v30 + 1) = 0;
            *((_OWORD *)v21 + 1) = *((_OWORD *)v30 + 1);
            *((_QWORD *)v30 + 2) = 0;
            *((_QWORD *)v30 + 3) = 0;
          }
          while (v30 != v29);
          v30 = (char *)a1[2];
          v32 = (char *)a1[3];
          a1[2] = v21;
          a1[3] = v12;
          a1[4] = v28;
          while (v32 != v30)
          {
            v33 = (std::__shared_weak_count *)*((_QWORD *)v32 - 1);
            if (v33)
            {
              p_shared_owners = (unint64_t *)&v33->__shared_owners_;
              do
                v35 = __ldaxr(p_shared_owners);
              while (__stlxr(v35 - 1, p_shared_owners));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            v36 = (std::__shared_weak_count *)*((_QWORD *)v32 - 3);
            if (v36)
            {
              v37 = (unint64_t *)&v36->__shared_owners_;
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
            v32 -= 32;
          }
        }
        if (v30)
          operator delete(v30);
        goto LABEL_78;
      }
    }
    v23 = (unint64_t *)(v20 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    goto LABEL_57;
  }
  v13 = atomic_load((unsigned __int8 *)&qword_254637F00);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254637F00))
  {
    v39 = sub_20AEF962C();
    v40 = (const void **)v39;
    v41 = *((char *)v39 + 23);
    if (v41 >= 0)
      v42 = *((unsigned __int8 *)v39 + 23);
    else
      v42 = *((_QWORD *)v39 + 1);
    v43 = v42 + 1;
    if (v42 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v43 >= 0x17)
    {
      v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v45 = v43 | 7;
      v46 = v45 + 1;
      v44 = (__int128 *)operator new(v45 + 1);
      *((_QWORD *)&xmmword_254638148 + 1) = v42 + 1;
      unk_254638158 = v46 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638148 = v44;
    }
    else
    {
      v44 = &xmmword_254638148;
      unk_254638158 = 0;
      xmmword_254638148 = 0uLL;
      byte_25463815F = v42 + 1;
      if (!v42)
      {
LABEL_98:
        *(_WORD *)((char *)v44 + v42) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638148, &dword_20AEBB000);
        __cxa_guard_release(&qword_254637F00);
        goto LABEL_12;
      }
    }
    if (v41 >= 0)
      v47 = v40;
    else
      v47 = *v40;
    memmove(v44, v47, v42);
    goto LABEL_98;
  }
LABEL_12:
  if (byte_25463815F < 0)
  {
    sub_20AEC60F4(v48, (void *)xmmword_254638148, *((unint64_t *)&xmmword_254638148 + 1));
  }
  else
  {
    *(_OWORD *)v48 = xmmword_254638148;
    v49 = unk_254638158;
  }
  v50 = 1;
  sub_20AECCECC((uint64_t)"VZDestinationListAddDestination", (uint64_t)v48, (uint64_t)&v51);
  v62 = v51;
  LOBYTE(v63) = 0;
  v72 = 0;
  if (v61)
  {
    v65 = 0;
    if (v54)
    {
      v63 = v52;
      v64 = v53;
      v53 = 0;
      v52 = 0uLL;
      v65 = 1;
    }
    LOBYTE(v66) = 0;
    v71 = 0;
    if (v60)
    {
      v67 = v56;
      v66 = *(_OWORD *)v55;
      v55[0] = 0;
      v55[1] = 0;
      v68 = v57;
      *(_OWORD *)__p = *(_OWORD *)v58;
      v70 = v59;
      v56 = 0;
      v58[0] = 0;
      v58[1] = 0;
      v59 = 0;
      v71 = 1;
    }
    v72 = 1;
  }
  v73 = 0;
  v22 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v62);
  if (!v73 && v72)
  {
    if (v71)
    {
      if (SHIBYTE(v70) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v67) < 0)
        operator delete((void *)v66);
    }
    if (v65 && SHIBYTE(v64) < 0)
      operator delete((void *)v63);
  }
  if (v61)
  {
    if (v60)
    {
      if (SHIBYTE(v59) < 0)
        operator delete(v58[0]);
      if (SHIBYTE(v56) < 0)
        operator delete(v55[0]);
    }
    if (v54 && SHIBYTE(v53) < 0)
      operator delete((void *)v52);
  }
  if (v50 && SHIBYTE(v49) < 0)
    operator delete(v48[0]);
}

void sub_20AEF5654(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637F00);
  _Unwind_Resume(a1);
}

void sub_20AEF5670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20AEF5694(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t *v6;
  __int128 v7;
  void *v9[2];
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  void *v16[2];
  uint64_t v17;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  char v32;
  char v33;
  char v34;

  if (!a2)
  {
    v6 = sub_20AEF9828();
    if (*((char *)v6 + 23) < 0)
    {
      sub_20AEC60F4(v9, (void *)*v6, v6[1]);
    }
    else
    {
      v7 = *(_OWORD *)v6;
      v10 = v6[2];
      *(_OWORD *)v9 = v7;
    }
    v11 = 1;
    sub_20AECCECC(a1, (uint64_t)v9, (uint64_t)&v12);
    v23 = v12;
    LOBYTE(v24) = 0;
    v33 = 0;
    if (v22)
    {
      v26 = 0;
      if (v15)
      {
        v24 = v13;
        v25 = v14;
        v14 = 0;
        v13 = 0uLL;
        v26 = 1;
      }
      LOBYTE(v27) = 0;
      v32 = 0;
      if (v21)
      {
        v28 = v17;
        v27 = *(_OWORD *)v16;
        v16[0] = 0;
        v16[1] = 0;
        v29 = v18;
        *(_OWORD *)__p = *(_OWORD *)v19;
        v31 = v20;
        v17 = 0;
        v19[0] = 0;
        v19[1] = 0;
        v20 = 0;
        v32 = 1;
      }
      v33 = 1;
    }
    v34 = 0;
    sub_20AECB410(&v23, a3);
    if (!v34 && v33)
    {
      if (v32)
      {
        if (SHIBYTE(v31) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v28) < 0)
          operator delete((void *)v27);
      }
      if (v26 && SHIBYTE(v25) < 0)
        operator delete((void *)v24);
    }
    if (v22)
    {
      if (v21)
      {
        if (SHIBYTE(v20) < 0)
          operator delete(v19[0]);
        if (SHIBYTE(v17) < 0)
          operator delete(v16[0]);
      }
      if (v15 && SHIBYTE(v14) < 0)
        operator delete((void *)v13);
    }
    if (v11 && SHIBYTE(v10) < 0)
      operator delete(v9[0]);
  }
  return a2 == 0;
}

void sub_20AEF588C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECD704((uint64_t)&a32);
  sub_20AECCE40((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t VZDestinationListGetSize(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AEF5910((uint64_t)"VZDestinationListGetSize", a1, 0);
  result = 0;
  if (!v2)
    return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 5;
  return result;
}

BOOL sub_20AEF5910(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t *v6;
  __int128 v7;
  void *v9[2];
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  void *v16[2];
  uint64_t v17;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  char v32;
  char v33;
  char v34;

  if (!a2)
  {
    v6 = sub_20AEF9AE4();
    if (*((char *)v6 + 23) < 0)
    {
      sub_20AEC60F4(v9, (void *)*v6, v6[1]);
    }
    else
    {
      v7 = *(_OWORD *)v6;
      v10 = v6[2];
      *(_OWORD *)v9 = v7;
    }
    v11 = 1;
    sub_20AECCECC(a1, (uint64_t)v9, (uint64_t)&v12);
    v23 = v12;
    LOBYTE(v24) = 0;
    v33 = 0;
    if (v22)
    {
      v26 = 0;
      if (v15)
      {
        v24 = v13;
        v25 = v14;
        v14 = 0;
        v13 = 0uLL;
        v26 = 1;
      }
      LOBYTE(v27) = 0;
      v32 = 0;
      if (v21)
      {
        v28 = v17;
        v27 = *(_OWORD *)v16;
        v16[0] = 0;
        v16[1] = 0;
        v29 = v18;
        *(_OWORD *)__p = *(_OWORD *)v19;
        v31 = v20;
        v17 = 0;
        v19[0] = 0;
        v19[1] = 0;
        v20 = 0;
        v32 = 1;
      }
      v33 = 1;
    }
    v34 = 0;
    sub_20AECB410(&v23, a3);
    if (!v34 && v33)
    {
      if (v32)
      {
        if (SHIBYTE(v31) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v28) < 0)
          operator delete((void *)v27);
      }
      if (v26 && SHIBYTE(v25) < 0)
        operator delete((void *)v24);
    }
    if (v22)
    {
      if (v21)
      {
        if (SHIBYTE(v20) < 0)
          operator delete(v19[0]);
        if (SHIBYTE(v17) < 0)
          operator delete(v16[0]);
      }
      if (v15 && SHIBYTE(v14) < 0)
        operator delete((void *)v13);
    }
    if (v11 && SHIBYTE(v10) < 0)
      operator delete(v9[0]);
  }
  return a2 == 0;
}

void sub_20AEF5B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECD704((uint64_t)&a32);
  sub_20AECCE40((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t VZDestinationListGetDestination(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t **v16;
  uint64_t *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t (***v21)();
  uint64_t (***v22)();
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t *v31;
  uint64_t **v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  void **v46;
  void **v47;
  void *v48;
  __int128 *v50;
  const void **v51;
  int v52;
  size_t v53;
  unint64_t v54;
  __int128 *v55;
  uint64_t v56;
  uint64_t v57;
  const void *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  unint64_t v71;
  void *__dst[2];
  uint64_t v73;
  char v74;
  void *v75;
  char v76;
  void *__p;
  char v78;
  char v79;
  char v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  char v91;
  char v92;
  char v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v4 = 0;
  if (!sub_20AEF5910((uint64_t)"VZDestinationListGetDestination", a1, 0))
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 24);
    v81 = a2;
    v7 = (v6 - v5) >> 5;
    if (v7 <= a2)
    {
      v71 = v7;
      sub_20AEF6F40("index ", &v81, (std::string *)" out of range for list of size ", &v71);
      if (SHIBYTE(v95) < 0)
      {
        sub_20AEC60F4(__dst, (void *)v94, *((unint64_t *)&v94 + 1));
      }
      else
      {
        *(_OWORD *)__dst = v94;
        v73 = v95;
      }
      v74 = 1;
      LOBYTE(v75) = 0;
      v79 = 0;
      v80 = 1;
      sub_20AECCC3C(0xAu, (__int128 *)__dst, (uint64_t)&v82);
      v59 = v82;
      LOBYTE(v60) = 0;
      v69 = 0;
      if (v92)
      {
        v62 = 0;
        if (v85)
        {
          v60 = v83;
          v61 = v84;
          v84 = 0;
          v83 = 0uLL;
          v62 = 1;
        }
        LOBYTE(v63) = 0;
        v68 = 0;
        if (v91)
        {
          v64 = v87;
          v63 = v86;
          v86 = 0uLL;
          v65 = v88;
          v66 = v89;
          v67 = v90;
          v87 = 0;
          v89 = 0uLL;
          v90 = 0;
          v68 = 1;
        }
        v69 = 1;
        v70 = 0;
        if (v85 && SHIBYTE(v84) < 0)
          operator delete((void *)v83);
      }
      else
      {
        v70 = 0;
      }
      if (v80)
      {
        if (v79)
        {
          if (v78 < 0)
            operator delete(__p);
          if (v76 < 0)
            operator delete(v75);
        }
        if (v74 && SHIBYTE(v73) < 0)
          operator delete(__dst[0]);
      }
      if (SHIBYTE(v95) < 0)
        operator delete((void *)v94);
      v45 = atomic_load((unsigned __int8 *)&qword_254630258);
      if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
      {
        __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630258);
      }
      sub_20AECB50C((uint64_t)&unk_254630168, &v59);
      v4 = 0;
      goto LABEL_100;
    }
    v8 = (_QWORD *)(v5 + 32 * a2);
    *(_QWORD *)&v59 = *v8;
    v9 = v8[1];
    *((_QWORD *)&v59 + 1) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *(_QWORD *)&v60 = v8[2];
    v12 = v8[3];
    *((_QWORD *)&v60 + 1) = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v70 = 1;
    v16 = (uint64_t **)(a1 + 56);
    v15 = *(_QWORD **)(a1 + 56);
    if (v15)
    {
      v17 = (uint64_t *)(a1 + 56);
      do
      {
        v18 = v15[6];
        v19 = v18 >= (unint64_t)v60;
        if (v18 >= (unint64_t)v60)
          v20 = v15;
        else
          v20 = v15 + 1;
        if (v19)
          v17 = v15;
        v15 = (_QWORD *)*v20;
      }
      while (*v20);
      if (v17 != (uint64_t *)v16 && (unint64_t)v60 >= v17[6])
        goto LABEL_99;
    }
    v21 = (uint64_t (***)())operator new(0x38uLL, MEMORY[0x24BEDB6B8]);
    if (v21)
    {
      v22 = v21;
      v23 = v59;
      *((_OWORD *)v21 + 1) = v59;
      if (*((_QWORD *)&v23 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = *((_QWORD *)&v60 + 1);
      v27 = v60;
      v21[4] = (uint64_t (**)())v60;
      v21[5] = (uint64_t (**)())v26;
      if (v26)
      {
        v28 = (unint64_t *)(v26 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
        v27 = v60;
      }
      v30 = &off_24C3F2D90;
      v21[1] = (uint64_t (**)())&unk_24C3F2DE0;
      *((_DWORD *)v21 + 12) = 1;
      *v21 = &off_24C3F2D90;
      v31 = *v16;
      v32 = (uint64_t **)(a1 + 56);
      if (*v16)
      {
        while (1)
        {
          while (1)
          {
            v32 = (uint64_t **)v31;
            v33 = v31[6];
            if (v33 <= v27)
              break;
            v31 = *v32;
            v16 = v32;
            if (!*v32)
              goto LABEL_59;
          }
          if (v33 >= v27)
            break;
          v31 = v32[1];
          if (!v31)
          {
            v16 = v32 + 1;
            goto LABEL_59;
          }
        }
        v17 = (uint64_t *)v32;
      }
      else
      {
LABEL_59:
        v34 = (uint64_t *)operator new(0x48uLL);
        v17 = v34;
        v35 = *((_QWORD *)&v59 + 1);
        v34[4] = v23;
        v34[5] = v35;
        if (v35)
        {
          v36 = (unint64_t *)(v35 + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
          v27 = v60;
        }
        v38 = *((_QWORD *)&v60 + 1);
        v34[6] = v27;
        v34[7] = v38;
        if (v38)
        {
          v39 = (unint64_t *)(v38 + 8);
          do
            v40 = __ldxr(v39);
          while (__stxr(v40 + 1, v39));
        }
        v34[8] = (uint64_t)v22;
        ((void (*)(uint64_t (***)()))(*v22)[2])(v22);
        *v17 = 0;
        v17[1] = 0;
        v17[2] = (uint64_t)v32;
        *v16 = v17;
        v41 = **(_QWORD **)(a1 + 48);
        v42 = v17;
        if (v41)
        {
          *(_QWORD *)(a1 + 48) = v41;
          v42 = *v16;
        }
        sub_20AEC84C8(*(uint64_t **)(a1 + 56), v42);
        ++*(_QWORD *)(a1 + 64);
        v30 = *v22;
      }
      ((void (*)(uint64_t (***)()))v30[3])(v22);
LABEL_99:
      v4 = v17[8];
LABEL_100:
      sub_20AEE199C((uint64_t)&v59);
      return v4;
    }
    v43 = (uint64_t *)sub_20AEDF9CC();
    v44 = atomic_load((unsigned __int8 *)&qword_254637E10);
    if ((v44 & 1) != 0 || !__cxa_guard_acquire(&qword_254637E10))
    {
LABEL_70:
      if (byte_254637F1F < 0)
      {
        sub_20AEC60F4(&v94, (void *)xmmword_254637F08, *((unint64_t *)&xmmword_254637F08 + 1));
      }
      else
      {
        v94 = xmmword_254637F08;
        v95 = unk_254637F18;
      }
      sub_20AEC7620(__dst, (uint64_t)&v94, 1uLL);
      LOBYTE(v82) = 0;
      v93 = 0;
      sub_20AECD798(v43, (__int128 **)__dst, (uint64_t)&v82, 0);
      if (v93 && v92)
      {
        if (v91)
        {
          if (SHIBYTE(v90) < 0)
            operator delete((void *)v89);
          if (SHIBYTE(v87) < 0)
            operator delete((void *)v86);
        }
        if (v85 && SHIBYTE(v84) < 0)
          operator delete((void *)v83);
      }
      v46 = (void **)__dst[0];
      if (__dst[0])
      {
        v47 = (void **)__dst[1];
        v48 = __dst[0];
        if (__dst[1] != __dst[0])
        {
          do
          {
            if (*((char *)v47 - 1) < 0)
              operator delete(*(v47 - 3));
            v47 -= 3;
          }
          while (v47 != v46);
          v48 = __dst[0];
        }
        __dst[1] = v46;
        operator delete(v48);
      }
      if (SHIBYTE(v95) < 0)
        operator delete((void *)v94);
      v4 = 0;
      goto LABEL_100;
    }
    v50 = sub_20AEDFBC8();
    v51 = (const void **)v50;
    v52 = *((char *)v50 + 23);
    if (v52 >= 0)
      v53 = *((unsigned __int8 *)v50 + 23);
    else
      v53 = *((_QWORD *)v50 + 1);
    v54 = v53 + 1;
    if (v53 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v54 >= 0x17)
    {
      v56 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v54 | 7) != 0x17)
        v56 = v54 | 7;
      v57 = v56 + 1;
      v55 = (__int128 *)operator new(v56 + 1);
      *((_QWORD *)&xmmword_254637F08 + 1) = v53 + 1;
      unk_254637F18 = v57 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254637F08 = v55;
    }
    else
    {
      v55 = &xmmword_254637F08;
      unk_254637F18 = 0;
      xmmword_254637F08 = 0uLL;
      byte_254637F1F = v53 + 1;
      if (!v53)
      {
LABEL_119:
        *(_WORD *)((char *)v55 + v53) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637F08, &dword_20AEBB000);
        __cxa_guard_release(&qword_254637E10);
        goto LABEL_70;
      }
    }
    if (v52 >= 0)
      v58 = v51;
    else
      v58 = *v51;
    memmove(v55, v58, v53);
    goto LABEL_119;
  }
  return v4;
}

void sub_20AEF6240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,int a48,__int16 a49,char a50,char a51)
{
  if (a2)
  {
    __cxa_guard_abort(&qword_254637E10);
    sub_20AEC01C0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AEF631C(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 48);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AEF6334(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 48);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AEF635C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637E20);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254637E20))
    return qword_254637E18;
  qword_254637E18 = sub_20AECB130();
  __cxa_guard_release(&qword_254637E20);
  return qword_254637E18;
}

_QWORD *sub_20AEF63BC(uint64_t a1, void *lpsrc)
{
  _QWORD *result;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F2E40, 0);
  if (result)
    return (_QWORD *)(*(_QWORD *)(a1 + 16) == result[2]);
  return result;
}

CFTypeRef sub_20AEF640C(uint64_t a1)
{
  __int128 *v2;
  uint64_t v3;
  int v4;
  size_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  char v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  void *__dst[2];
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;

  v2 = sub_20AEDF9CC();
  v27 = a1;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_20AEC0BD8(v3);
  v28 = (_QWORD *)v3;
  v29 = a1 + 16;
  v30 = (_QWORD *)(v3 + 16);
  sub_20AF60518((uint64_t)&v31, &v30, &v29);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(v3 + 112);
    v8 = *(_QWORD *)(v3 + 72);
    if (v7 < v8)
    {
      *(_QWORD *)(v3 + 112) = v8;
      v7 = v8;
    }
    v9 = *(const void **)(v3 + 64);
    v5 = v7 - (_QWORD)v9;
    if (v7 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v4 & 8) == 0)
    {
      v5 = 0;
      HIBYTE(v26) = 0;
      v6 = __dst;
      goto LABEL_14;
    }
    v9 = *(const void **)(v3 + 40);
    v5 = *(_QWORD *)(v3 + 56) - (_QWORD)v9;
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v6 = (void **)operator new(v10 + 1);
    __dst[1] = (void *)v5;
    v26 = v11 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_13;
  }
  HIBYTE(v26) = v5;
  v6 = __dst;
  if (v5)
LABEL_13:
    memmove(v6, v9, v5);
LABEL_14:
  *((_BYTE *)v6 + v5) = 0;
  v12 = v28;
  if (v28)
  {
    v13 = MEMORY[0x24BEDB7F0];
    v14 = *MEMORY[0x24BEDB7F0];
    *v28 = *MEMORY[0x24BEDB7F0];
    v15 = *(_QWORD *)(v13 + 72);
    *(_QWORD *)((char *)v12 + *(_QWORD *)(v14 - 24)) = *(_QWORD *)(v13 + 64);
    v12[3] = MEMORY[0x24BEDB848] + 16;
    v12[2] = v15;
    if (*((char *)v12 + 111) < 0)
      operator delete((void *)v12[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v12 + 16);
    MEMORY[0x20BD3583C](v12, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)v2, (uint64_t)" ", &v27, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v16 = cf;
  if (cf)
    CFRetain(cf);
  v17 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if ((v22 & 0x80000000) == 0)
        return v16;
      goto LABEL_27;
    }
  }
  if (v22 < 0)
LABEL_27:
    operator delete(__p);
  return v16;
}

void sub_20AEF66BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  __int128 *v26;

  sub_20AEC147C((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  v26 = sub_20AEDF9CC();
  sub_20AEC0D64(&__p, "failed to create description");
  sub_20AECD224((std::string::size_type)v26, (const void **)&__p, 0);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20AEF66A0);
}

uint64_t sub_20AEF6780(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 48));
}

uint64_t sub_20AEF678C(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 40);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AEF67A4(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 40);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AEF67CC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254637E40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254637E40))
    return qword_254637E38;
  qword_254637E38 = sub_20AECB130();
  __cxa_guard_release(&qword_254637E40);
  return qword_254637E38;
}

uint64_t sub_20AEF682C(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F2F50, 0);
  if (result)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 24);
    v6 = *(uint64_t **)(result + 16);
    if (v4 - v5 == *(_QWORD *)(result + 24) - (_QWORD)v6)
    {
      if (v5 == v4)
      {
        return 1;
      }
      else
      {
        v7 = v5 + 32;
        do
        {
          v8 = *v6;
          v6 += 4;
          result = *(_QWORD *)(v7 - 32) == v8;
          v9 = *(_QWORD *)(v7 - 32) != v8 || v7 == v4;
          v7 += 32;
        }
        while (!v9);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFTypeRef sub_20AEF68CC(uint64_t a1)
{
  __int128 *v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  _QWORD **v6;
  void **v7;
  uint64_t v8;
  int v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *v26;
  char v27;
  CFTypeRef cf;
  std::__shared_weak_count *v29;
  void *__dst[2];
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *__p[2];
  unsigned __int8 v35;
  _DWORD v36[6];
  int v37;
  _QWORD **v38;
  const char *v39;
  _DWORD *v40;
  const char *v41;
  const char *v42;
  _QWORD *v43;

  v2 = sub_20AEF962C();
  v32 = a1;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_20AEC0BD8(v3);
  v33 = (_QWORD *)v3;
  v37 = 0;
  if ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) <= 31)
  {
    sub_20AEF9DBC(v36, "{}");
    goto LABEL_8;
  }
  sub_20AED5B5C(v36, "{");
  v4 = *(_QWORD ***)(a1 + 16);
  sub_20AEFA3AC((uint64_t)v36, v4);
  v5 = *(_QWORD ***)(a1 + 24);
  v6 = v4 + 4;
  if (v4 + 4 != v5)
  {
    while (1)
    {
      v38 = (_QWORD **)v36;
      v39 = ",";
      v40 = v36;
      v41 = ",";
      v42 = ",";
      if (v37 == -1)
        break;
      v43 = &v38;
      ((void (*)(_QWORD **, _DWORD *))off_24C3F30D0[v37])(&v43, v36);
      sub_20AEFA3AC((uint64_t)v36, v6);
      v6 += 4;
      if (v6 == v5)
        goto LABEL_6;
    }
LABEL_50:
    sub_20AECFAB8();
  }
LABEL_6:
  v38 = (_QWORD **)v36;
  v39 = "}";
  v40 = v36;
  v41 = "}";
  v42 = "}";
  if (v37 == -1)
    goto LABEL_50;
  v43 = &v38;
  ((void (*)(_QWORD **, _DWORD *))off_24C3F30D0[v37])(&v43, v36);
LABEL_8:
  if (v37 == -1)
    sub_20AECFAB8();
  v38 = &v43;
  ((void (*)(void **__return_ptr, _QWORD ***, _DWORD *))off_24C3F3038[v37])(__p, &v38, v36);
  if (v37 != -1)
    ((void (*)(_QWORD ***, _DWORD *))off_24C3F2FF0[v37])(&v38, v36);
  if ((v35 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v35 & 0x80u) == 0)
    v8 = v35;
  else
    v8 = (uint64_t)__p[1];
  sub_20AEC01D0((_QWORD *)(v3 + 16), (uint64_t)v7, v8);
  if (((char)v35 & 0x80000000) == 0)
  {
    v9 = *(_DWORD *)(v3 + 120);
    if ((v9 & 0x10) == 0)
      goto LABEL_19;
LABEL_22:
    v12 = *(_QWORD *)(v3 + 112);
    v13 = *(_QWORD *)(v3 + 72);
    if (v12 < v13)
    {
      *(_QWORD *)(v3 + 112) = v13;
      v12 = v13;
    }
    v14 = *(const void **)(v3 + 64);
    v10 = v12 - (_QWORD)v14;
    if (v12 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_47;
    goto LABEL_25;
  }
  operator delete(__p[0]);
  v9 = *(_DWORD *)(v3 + 120);
  if ((v9 & 0x10) != 0)
    goto LABEL_22;
LABEL_19:
  if ((v9 & 8) == 0)
  {
    v10 = 0;
    HIBYTE(v31) = 0;
    v11 = __dst;
    goto LABEL_32;
  }
  v14 = *(const void **)(v3 + 40);
  v10 = *(_QWORD *)(v3 + 56) - (_QWORD)v14;
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_47:
    sub_20AEC0138();
LABEL_25:
  if (v10 >= 0x17)
  {
    v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v15 = v10 | 7;
    v16 = v15 + 1;
    v11 = (void **)operator new(v15 + 1);
    __dst[1] = (void *)v10;
    v31 = v16 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_31;
  }
  HIBYTE(v31) = v10;
  v11 = __dst;
  if (v10)
LABEL_31:
    memmove(v11, v14, v10);
LABEL_32:
  *((_BYTE *)v11 + v10) = 0;
  v17 = v33;
  if (v33)
  {
    v18 = MEMORY[0x24BEDB7F0];
    v19 = *MEMORY[0x24BEDB7F0];
    *v33 = *MEMORY[0x24BEDB7F0];
    v20 = *(_QWORD *)(v18 + 72);
    *(_QWORD *)((char *)v17 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(v18 + 64);
    v17[3] = MEMORY[0x24BEDB848] + 16;
    v17[2] = v20;
    if (*((char *)v17 + 111) < 0)
      operator delete((void *)v17[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v17 + 16);
    MEMORY[0x20BD3583C](v17, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)v2, (uint64_t)" ", &v32, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v31) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&v26, (CFStringRef *)&cf);
  v21 = cf;
  if (cf)
    CFRetain(cf);
  v22 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if ((v27 & 0x80000000) == 0)
        return v21;
      goto LABEL_45;
    }
  }
  if (v27 < 0)
LABEL_45:
    operator delete(v26);
  return v21;
}

void sub_20AEF6D08(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  __int128 *v38;

  sub_20AEC147C((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  v38 = sub_20AEF962C();
  sub_20AEC0D64(&a32, "failed to create description");
  sub_20AECD224((std::string::size_type)v38, (const void **)&a32, 0);
  if (a37 < 0)
    operator delete(a32);
  __cxa_end_catch();
  JUMPOUT(0x20AEF6CD4);
}

uint64_t sub_20AEF6E00(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 40));
}

void sub_20AEF6E0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F2FB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20AEF6E1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F2FB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AEF6E4C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

void sub_20AEF6E70(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  if (a1)
  {
    sub_20AEF6E70(*a1);
    sub_20AEF6E70(a1[1]);
    v2 = a1[8];
    a1[8] = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    v3 = (std::__shared_weak_count *)a1[7];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = (std::__shared_weak_count *)a1[5];
    if (!v6)
      goto LABEL_13;
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      operator delete(a1);
    }
    else
    {
LABEL_13:
      operator delete(a1);
    }
  }
}

uint64_t sub_20AEF6F40(char *__s, unint64_t *a2, std::string *a3, unint64_t *a4)
{
  uint64_t result;
  _DWORD v8[6];
  int v9;
  std::string v10;
  std::string *v11;
  std::string *v12;
  _DWORD *v13;
  std::string *v14;
  std::string *v15;
  std::string **v16;

  v9 = 0;
  sub_20AEF7138(v8, __s);
  std::to_string(&v10, *a2);
  v11 = (std::string *)v8;
  v12 = &v10;
  v13 = v8;
  v14 = &v10;
  v15 = &v10;
  if (v9 == -1)
    sub_20AECFAB8();
  v16 = &v11;
  ((void (*)(std::string ***, _DWORD *))off_24C3F3008[v9])(&v16, v8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  v11 = (std::string *)v8;
  v12 = a3;
  v13 = v8;
  v14 = a3;
  v15 = a3;
  if (v9 == -1)
    sub_20AECFAB8();
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  ((void (*)(std::string *, _DWORD *))off_24C3F3020[v9])(&v10, v8);
  std::to_string(&v10, *a4);
  v11 = (std::string *)v8;
  v12 = &v10;
  v13 = v8;
  v14 = &v10;
  v15 = &v10;
  if (v9 == -1)
    sub_20AECFAB8();
  v16 = &v11;
  ((void (*)(std::string ***, _DWORD *))off_24C3F3008[v9])(&v16, v8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (v9 == -1)
    sub_20AECFAB8();
  v11 = &v10;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C3F3038[v9])(&v11, v8);
  if (v9 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C3F2FF0[v9])(&v11, v8);
  return result;
}

void sub_20AEF70EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20AECFA60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_DWORD *sub_20AEF7138(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C3F2FF0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20AEF7228(_DWORD ***a1)
{
  return sub_20AEF7244(**a1, (char *)(*a1)[1]);
}

void sub_20AEF7234(uint64_t a1, uint64_t a2)
{
  sub_20AEF7334((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20AEF7244(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C3F2FF0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20AEF7334(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C3F2FF0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20AEF74E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20AEF752C(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20AEF7624((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20AEF761C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20AEF7624(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20AEF7820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20AEF7834(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C3F3060;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AEF78A8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C3F3060;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AEF791C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C3F3060;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20AEF796C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C3F3060;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20AEF799C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AEF79F4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_20AEF7A5C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  __int128 *v3;

  if (*(_QWORD *)(result + 8))
  {
    v2 = result;
    v3 = sub_20AEF7B54(0, a2);
    result = (*(uint64_t (**)(void))(**(_QWORD **)(v2 + 8) + 16))();
    if (v3)
      return (*(uint64_t (**)(__int128 *))(*(_QWORD *)v3 + 24))(v3);
  }
  return result;
}

void sub_20AEF7ABC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AEF7ADC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z27ForwardReceivedMessageBlockU13block_pointerFvPK12VZLogMessageEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z27ForwardReceivedMessageBlockU13block_pointerFvPK12VZLogMessageEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z27ForwardReceivedMessageBlockU13block_pointerFvPK12VZLogMessageEE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z27ForwardReceivedMessageBlockU13block_pointerFvPK12VZLogMessageEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AEF7B48()
{
  return &unk_24C3F30E8;
}

__int128 *sub_20AEF7B54(CFErrorRef *a1, _QWORD *a2)
{
  __int128 *result;
  uint64_t *v4;
  uint64_t *v5;
  __int128 v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  _BYTE v10[16];
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  char v18;
  char v19;
  char v20;
  __int128 *v21;
  __int128 *v22;
  __int128 __dst;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  sub_20AEF7E18(a2, &v21);
  result = v21;
  if (!v21)
  {
    v4 = (uint64_t *)sub_20AEF7F38();
    v5 = sub_20AEF7CD4();
    if (*((char *)v5 + 23) < 0)
    {
      sub_20AEC60F4(&__dst, (void *)*v5, v5[1]);
    }
    else
    {
      v6 = *(_OWORD *)v5;
      v24 = v5[2];
      __dst = v6;
    }
    sub_20AEC7620(&v21, (uint64_t)&__dst, 1uLL);
    v10[0] = 0;
    v20 = 0;
    sub_20AECD798(v4, &v21, (uint64_t)v10, a1);
    if (v20 && v19)
    {
      if (v18)
      {
        if (v17 < 0)
          operator delete(__p);
        if (v15 < 0)
          operator delete(v14);
      }
      if (v13 && v12 < 0)
        operator delete(v11);
    }
    v7 = v21;
    if (v21)
    {
      v8 = v22;
      v9 = v21;
      if (v22 != v21)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*((void **)v8 - 3));
          v8 = (__int128 *)((char *)v8 - 24);
        }
        while (v8 != v7);
        v9 = v21;
      }
      v22 = v7;
      operator delete(v9);
    }
    if (SHIBYTE(v24) < 0)
      operator delete((void *)__dst);
    return 0;
  }
  return result;
}

void sub_20AEF7CC8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20AEC01C0(a1);
}

uint64_t *sub_20AEF7CD4()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630C18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630C18))
  {
    v2 = sub_20AEF8134();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v7 = &qword_254630C00;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254630C08 = v5 + 1;
      unk_254630C10 = v9 | 0x8000000000000000;
      qword_254630C00 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254630C08 = 0;
      unk_254630C10 = 0;
      qword_254630C00 = 0;
      byte_254630C17 = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630C00, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630C18);
        return &qword_254630C00;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630C00;
}

void sub_20AEF7E00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630C18);
  _Unwind_Resume(a1);
}

_QWORD *sub_20AEF7E18@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  timespec __rqtp;

  result = operator new(0x48uLL, MEMORY[0x24BEDB6B8]);
  v5 = result;
  if (result)
  {
    *result = off_24C3F2180;
    v6 = a1[1];
    result[2] = *a1;
    result[3] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (unsigned __int8 *)(a1 + 4);
    do
      v10 = __ldaxr(v9);
    while (__stxr(1u, v9));
    if (v10)
    {
      v11 = 0;
      do
      {
        if (v11)
        {
          __rqtp = (timespec)xmmword_20B5B0ED0;
          result = (_QWORD *)nanosleep(&__rqtp, 0);
        }
        ++v11;
        do
          v12 = __ldaxr(v9);
        while (__stxr(1u, v9));
      }
      while (v12);
    }
    v14 = a1[2];
    v13 = a1[3];
    if (v13)
    {
      v15 = (unsigned int *)(v13 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    atomic_store(0, v9);
    v5[4] = v14;
    v5[5] = v13;
    *((_BYTE *)v5 + 48) = 0;
    *((_DWORD *)v5 + 14) = 1;
    *v5 = &off_24C3F3A30;
    v5[1] = &unk_24C3F3A80;
    v5[8] = 0;
  }
  *a2 = v5;
  return result;
}

__int128 *sub_20AEF7F38()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630D38);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630D38))
    return &xmmword_254630D20;
  v2 = (char *)sub_20AEF8014();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254630D20, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254630D30 = *((_QWORD *)v2 + 2);
    xmmword_254630D20 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630D20, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630D38);
  return &xmmword_254630D20;
}

void sub_20AEF7FFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630D38);
  _Unwind_Resume(a1);
}

void *sub_20AEF8014()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254630D58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630D58))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZLogMessage]", qword_254630D40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630D40, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630D58);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254630D78);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254630D78))
    return &unk_254630D60;
  sub_20B531658((uint64_t)qword_254630D40, (uint64_t)&unk_254630D60);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254630D60, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630D78);
  return &unk_254630D60;
}

void sub_20AEF8104(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630D78);
  _Unwind_Resume(a1);
}

void sub_20AEF811C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630D58);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AEF8134()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630C38);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630C38))
  {
    v2 = sub_20AEF82AC();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254630C28 = v5 + 6;
      unk_254630C30 = v9 | 0x8000000000000000;
      qword_254630C20 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254630C28 = 0;
      unk_254630C30 = 0;
      qword_254630C20 = 0x2074736E6F63;
      byte_254630C37 = v5 + 6;
      v7 = (char *)&qword_254630C20 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630C20, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630C38);
        return &qword_254630C20;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630C20;
}

void sub_20AEF8294(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630C38);
  _Unwind_Resume(a1);
}

__int128 *sub_20AEF82AC()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630D98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630D98))
    return &xmmword_254630D80;
  v2 = (char *)sub_20AEF8388();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254630D80, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254630D90 = *((_QWORD *)v2 + 2);
    xmmword_254630D80 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630D80, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630D98);
  return &xmmword_254630D80;
}

void sub_20AEF8370(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630D98);
  _Unwind_Resume(a1);
}

void *sub_20AEF8388()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254630DB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630DB8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vl::visual_logger::LogMessage]", qword_254630DA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630DA0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630DB8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254630DD8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254630DD8))
    return &unk_254630DC0;
  sub_20B531658((uint64_t)qword_254630DA0, (uint64_t)&unk_254630DC0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254630DC0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630DD8);
  return &unk_254630DC0;
}

void sub_20AEF8478(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630DD8);
  _Unwind_Resume(a1);
}

void sub_20AEF8490(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630DB8);
  _Unwind_Resume(a1);
}

void sub_20AEF84AC()
{
  JUMPOUT(0x20BD3583CLL);
}

__n128 sub_20AEF84C0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C3F3108;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20AEF84F8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C3F3108;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20AEF8518(uint64_t a1, _QWORD *a2)
{
  __int128 *v3;
  uint64_t result;

  v3 = sub_20AEF7B54(0, a2);
  result = (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 8))(*(_QWORD *)(a1 + 16), v3);
  if (v3)
    return (*(uint64_t (**)(__int128 *))(*(_QWORD *)v3 + 24))(v3);
  return result;
}

void sub_20AEF8568(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AEF8588(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z30ForwardReceivedMessageFunctionPFvPvPK12VZLogMessageES_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z30ForwardReceivedMessageFunctionPFvPvPK12VZLogMessageES_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z30ForwardReceivedMessageFunctionPFvPvPK12VZLogMessageES_E3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z30ForwardReceivedMessageFunctionPFvPvPK12VZLogMessageES_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AEF85F4()
{
  return &unk_24C3F3168;
}

void sub_20AEF8600()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254637E50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637E50))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (^)(const VZLogMessage *)]", qword_254637F38);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637F38, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637E50);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254637E58);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254637E58))
    {
      sub_20B531658((uint64_t)qword_254637F38, (uint64_t)&xmmword_254637F50);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637F50, &dword_20AEBB000);
      __cxa_guard_release(&qword_254637E58);
    }
  }
}

void sub_20AEF86D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637E58);
  _Unwind_Resume(a1);
}

void sub_20AEF86E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637E50);
  _Unwind_Resume(a1);
}

void sub_20AEF8700()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254637E68);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637E68))
  {
    sub_20AEF89A8(__p);
    sub_20AEF87D4((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254637F80, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637E68);
  }
}

void sub_20AEF8794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254637E68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254637E68);
  _Unwind_Resume(a1);
}

void sub_20AEF87D4(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254637E70);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254637E70))
  {
    sub_20AEF8B84();
    if (byte_254637FDF < 0)
    {
      sub_20AEC60F4(&xmmword_254637F98, (void *)xmmword_254637FC8, *((unint64_t *)&xmmword_254637FC8 + 1));
    }
    else
    {
      xmmword_254637F98 = xmmword_254637FC8;
      unk_254637FA8 = unk_254637FD8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637F98, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637E70);
  }
  if (byte_254637FAF < 0)
  {
    sub_20AEC60F4(__dst, (void *)xmmword_254637F98, *((unint64_t *)&xmmword_254637F98 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254637F98;
    v11 = unk_254637FA8;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, (std::string *)&qword_254637F80, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20AEF8960(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637E70);
  _Unwind_Resume(a1);
}

void sub_20AEF897C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AEF89A8(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254637E88);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254637E88))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::optional<cv3d::vl::visual_logger::CallbackDestinationOptions>]", qword_254637FE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637FE0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637E88);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254637E90);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254637E90))
  {
    v5 = sub_20AED4780(qword_254637FE0, "<", 0);
    sub_20AED467C(qword_254637FE0, 0, v5, qword_254637FF8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637FF8, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637E90);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254637E98);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254637E98))
  {
    sub_20B531658((uint64_t)qword_254637FF8, (uint64_t)&xmmword_254638010);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638010, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637E98);
  }
  if (byte_254638027 < 0)
  {
    sub_20AEC60F4(__dst, (void *)xmmword_254638010, *((unint64_t *)&xmmword_254638010 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254638010;
    __dst[2] = unk_254638020;
  }
}

void sub_20AEF8B3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637E98);
  _Unwind_Resume(a1);
}

void sub_20AEF8B54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637E90);
  _Unwind_Resume(a1);
}

void sub_20AEF8B6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637E88);
  _Unwind_Resume(a1);
}

void sub_20AEF8B84()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254637E78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637E78))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vl::visual_logger::CallbackDestinationOptions]", qword_254637FB0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254637FB0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637E78);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254637E80);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254637E80))
    {
      sub_20B531658((uint64_t)qword_254637FB0, (uint64_t)&xmmword_254637FC8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637FC8, &dword_20AEBB000);
      __cxa_guard_release(&qword_254637E80);
    }
  }
}

void sub_20AEF8C54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637E80);
  _Unwind_Resume(a1);
}

void sub_20AEF8C6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637E78);
  _Unwind_Resume(a1);
}

void sub_20AEF8C84(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t *v7;
  __int128 v8;
  void **v9;
  void **v10;
  void *v11;
  _BYTE v12[16];
  void *__p;
  char v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  char v20;
  char v21;
  char v22;
  void *v23;
  void **v24;
  __int128 __dst;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AEDF9CC();
  v5 = atomic_load((unsigned __int8 *)&qword_254637EA0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254637EA0))
  {
    sub_20AEF90A8();
    if (byte_254638057 < 0)
    {
      sub_20AEC60F4(&xmmword_254638028, (void *)qword_254638040, unk_254638048);
    }
    else
    {
      xmmword_254638028 = *(_OWORD *)&qword_254638040;
      unk_254638038 = unk_254638050;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638028, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637EA0);
  }
  if (byte_25463803F < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_254638028, *((unint64_t *)&xmmword_254638028 + 1));
  }
  else
  {
    __dst = xmmword_254638028;
    v26 = unk_254638038;
  }
  v6 = atomic_load((unsigned __int8 *)&qword_254637E60);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254637E60))
  {
    sub_20AEF8700();
    if (byte_254637F97 < 0)
    {
      sub_20AEC60F4(&xmmword_254637F68, (void *)qword_254637F80, unk_254637F88);
    }
    else
    {
      xmmword_254637F68 = *(_OWORD *)&qword_254637F80;
      unk_254637F78 = unk_254637F90;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254637F68, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637E60);
  }
  if (byte_254637F7F < 0)
  {
    sub_20AEC60F4(&v27, (void *)xmmword_254637F68, *((unint64_t *)&xmmword_254637F68 + 1));
  }
  else
  {
    v27 = xmmword_254637F68;
    v28 = unk_254637F78;
  }
  v7 = sub_20AEE0FFC();
  if (*((char *)v7 + 23) < 0)
  {
    sub_20AEC60F4(&v29, (void *)*v7, v7[1]);
  }
  else
  {
    v8 = *(_OWORD *)v7;
    v30 = v7[2];
    v29 = v8;
  }
  sub_20AEC7620(&v23, (uint64_t)&__dst, 3uLL);
  sub_20AECF9B0(v12, a2);
  sub_20AECD798(v4, (__int128 **)&v23, (uint64_t)v12, **a1);
  if (v22 && v21)
  {
    if (!v20)
      goto LABEL_17;
    if (v19 < 0)
    {
      operator delete(v18);
      if ((v17 & 0x80000000) == 0)
      {
LABEL_17:
        if (!v15)
          goto LABEL_20;
LABEL_18:
        if (v14 < 0)
          operator delete(__p);
        goto LABEL_20;
      }
    }
    else if ((v17 & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(v16);
    if (!v15)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_20:
  v9 = (void **)v23;
  if (v23)
  {
    v10 = v24;
    v11 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v10 - 1) < 0)
          operator delete(*(v10 - 3));
        v10 -= 3;
      }
      while (v10 != v9);
      v11 = v23;
    }
    v24 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v30) < 0)
  {
    operator delete((void *)v29);
    if ((SHIBYTE(v28) & 0x80000000) == 0)
    {
LABEL_30:
      if ((SHIBYTE(v26) & 0x80000000) == 0)
        return;
LABEL_34:
      operator delete((void *)__dst);
      return;
    }
  }
  else if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    goto LABEL_30;
  }
  operator delete((void *)v27);
  if (SHIBYTE(v26) < 0)
    goto LABEL_34;
}

void sub_20AEF8FD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_guard_abort(&qword_254637E60);
  while (1)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
    if (v1 == v2 - 128)
      _Unwind_Resume(a1);
  }
}

void sub_20AEF90A8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254637EA8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637EA8))
  {
    sub_20AEF9350(__p);
    sub_20AEF917C((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254638040, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637EA8);
  }
}

void sub_20AEF913C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254637EA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254637EA8);
  _Unwind_Resume(a1);
}

void sub_20AEF917C(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254637EB0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254637EB0))
  {
    sub_20AEF952C();
    if (byte_25463809F < 0)
    {
      sub_20AEC60F4(&xmmword_254638058, (void *)xmmword_254638088, *((unint64_t *)&xmmword_254638088 + 1));
    }
    else
    {
      xmmword_254638058 = xmmword_254638088;
      unk_254638068 = unk_254638098;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638058, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637EB0);
  }
  if (byte_25463806F < 0)
  {
    sub_20AEC60F4(__dst, (void *)xmmword_254638058, *((unint64_t *)&xmmword_254638058 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254638058;
    v11 = unk_254638068;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, (std::string *)&qword_254638040, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20AEF9308(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637EB0);
  _Unwind_Resume(a1);
}

void sub_20AEF9324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AEF9350(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254637EC8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254637EC8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::function<void (const cv3d::vl::visual_logger::LogMessage &)>]", qword_2546380A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546380A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637EC8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254637ED0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254637ED0))
  {
    v5 = sub_20AED4780(qword_2546380A0, "<", 0);
    sub_20AED467C(qword_2546380A0, 0, v5, qword_2546380B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546380B8, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637ED0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254637ED8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254637ED8))
  {
    sub_20B531658((uint64_t)qword_2546380B8, (uint64_t)&xmmword_2546380D0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546380D0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637ED8);
  }
  if (byte_2546380E7 < 0)
  {
    sub_20AEC60F4(__dst, (void *)xmmword_2546380D0, *((unint64_t *)&xmmword_2546380D0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2546380D0;
    __dst[2] = unk_2546380E0;
  }
}

void sub_20AEF94E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637ED8);
  _Unwind_Resume(a1);
}

void sub_20AEF94FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637ED0);
  _Unwind_Resume(a1);
}

void sub_20AEF9514(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637EC8);
  _Unwind_Resume(a1);
}

void sub_20AEF952C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254637EB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254637EB8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::vl::visual_logger::LogMessage &)]", qword_254638070);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254638070, &dword_20AEBB000);
    __cxa_guard_release(&qword_254637EB8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254637EC0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254637EC0))
    {
      sub_20B531658((uint64_t)qword_254638070, (uint64_t)&xmmword_254638088);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638088, &dword_20AEBB000);
      __cxa_guard_release(&qword_254637EC0);
    }
  }
}

void sub_20AEF95FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637EC0);
  _Unwind_Resume(a1);
}

void sub_20AEF9614(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254637EB8);
  _Unwind_Resume(a1);
}

__int128 *sub_20AEF962C()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630C58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630C58))
    return &xmmword_254630C40;
  v2 = (char *)sub_20AEF9708();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254630C40, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254630C50 = *((_QWORD *)v2 + 2);
    xmmword_254630C40 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630C40, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630C58);
  return &xmmword_254630C40;
}

void sub_20AEF96F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630C58);
  _Unwind_Resume(a1);
}

void *sub_20AEF9708()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254630C78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630C78))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZDestinationList]", qword_254630C60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630C60, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630C78);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254630C98);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254630C98))
    return &unk_254630C80;
  sub_20B531658((uint64_t)qword_254630C60, (uint64_t)&unk_254630C80);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254630C80, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630C98);
  return &unk_254630C80;
}

void sub_20AEF97F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630C98);
  _Unwind_Resume(a1);
}

void sub_20AEF9810(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630C78);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AEF9828()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630CB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630CB8))
  {
    v2 = sub_20AEF996C();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v7 = &qword_254630CA0;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254630CA8 = v5 + 1;
      unk_254630CB0 = v9 | 0x8000000000000000;
      qword_254630CA0 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254630CA8 = 0;
      unk_254630CB0 = 0;
      qword_254630CA0 = 0;
      byte_254630CB7 = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630CA0, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630CB8);
        return &qword_254630CA0;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630CA0;
}

void sub_20AEF9954(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630CB8);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AEF996C()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630CD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630CD8))
  {
    v2 = sub_20AEDF9CC();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254630CC8 = v5 + 6;
      unk_254630CD0 = v9 | 0x8000000000000000;
      qword_254630CC0 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254630CC8 = 0;
      unk_254630CD0 = 0;
      qword_254630CC0 = 0x2074736E6F63;
      byte_254630CD7 = v5 + 6;
      v7 = (char *)&qword_254630CC0 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630CC0, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630CD8);
        return &qword_254630CC0;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630CC0;
}

void sub_20AEF9ACC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630CD8);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AEF9AE4()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630CF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630CF8))
  {
    v2 = sub_20AEF9C28();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v7 = &qword_254630CE0;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254630CE8 = v5 + 1;
      unk_254630CF0 = v9 | 0x8000000000000000;
      qword_254630CE0 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254630CE8 = 0;
      unk_254630CF0 = 0;
      qword_254630CE0 = 0;
      byte_254630CF7 = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630CE0, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630CF8);
        return &qword_254630CE0;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630CE0;
}

void sub_20AEF9C10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630CF8);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AEF9C28()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630D18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630D18))
  {
    v2 = sub_20AEF962C();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254630D08 = v5 + 6;
      unk_254630D10 = v9 | 0x8000000000000000;
      qword_254630D00 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254630D08 = 0;
      unk_254630D10 = 0;
      qword_254630D00 = 0x2074736E6F63;
      byte_254630D17 = v5 + 6;
      v7 = (char *)&qword_254630D00 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630D00, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630D18);
        return &qword_254630D00;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630D00;
}

void sub_20AEF9D88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630D18);
  _Unwind_Resume(a1);
}

_DWORD *sub_20AEF9DA0(_DWORD ***a1)
{
  return sub_20AEF9DBC(**a1, (char *)(*a1)[1]);
}

void sub_20AEF9DAC(uint64_t a1, uint64_t a2)
{
  sub_20AEF9EAC((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20AEF9DBC(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C3F2FF0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20AEF9EAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C3F2FF0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20AEFA060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20AEFA0A4(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20AEFA19C((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20AEFA194(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20AEFA19C(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20AEFA398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AEFA3AC(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  int v5;
  size_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__dst[2];
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21[5];
  _QWORD **v22;
  char v23;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20AEC0BD8(v4);
  v20 = (_QWORD *)v4;
  v21[0] = (_QWORD *)(v4 + 16);
  v22 = a2;
  sub_20AF60518((uint64_t)&v23, v21, &v22);
  v5 = *(_DWORD *)(v4 + 120);
  if ((v5 & 0x10) != 0)
  {
    v8 = *(_QWORD *)(v4 + 112);
    v9 = *(_QWORD *)(v4 + 72);
    if (v8 < v9)
    {
      *(_QWORD *)(v4 + 112) = v9;
      v8 = v9;
    }
    v10 = *(const void **)(v4 + 64);
    v6 = v8 - (_QWORD)v10;
    if (v8 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v5 & 8) == 0)
    {
      v6 = 0;
      HIBYTE(v19) = 0;
      v7 = __dst;
      goto LABEL_14;
    }
    v10 = *(const void **)(v4 + 40);
    v6 = *(_QWORD *)(v4 + 56) - (_QWORD)v10;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    v7 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v6;
    v19 = v12 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_13;
  }
  HIBYTE(v19) = v6;
  v7 = __dst;
  if (v6)
LABEL_13:
    memmove(v7, v10, v6);
LABEL_14:
  *((_BYTE *)v7 + v6) = 0;
  v13 = v20;
  if (v20)
  {
    v14 = MEMORY[0x24BEDB7F0];
    v15 = *MEMORY[0x24BEDB7F0];
    *v20 = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(v14 + 72);
    *(_QWORD *)((char *)v13 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(v14 + 64);
    v13[3] = MEMORY[0x24BEDB848] + 16;
    v13[2] = v16;
    if (*((char *)v13 + 111) < 0)
      operator delete((void *)v13[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v13 + 16);
    MEMORY[0x20BD3583C](v13, 0x10B2C40EED050F3);
  }
  v21[0] = (_QWORD *)a1;
  v21[1] = __dst;
  v21[2] = (_QWORD *)a1;
  v21[3] = __dst;
  v21[4] = __dst;
  v17 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v17 == -1)
    sub_20AECFAB8();
  v22 = v21;
  ((void (*)(_QWORD ***, uint64_t))off_24C3F3008[v17])(&v22, a1);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
}

void sub_20AEFA608(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20AEFA62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20AEFA648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEFA65C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AEFA6C4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AEFA720(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AEFA788(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t VZDictionaryGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638168);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638168))
    return qword_254638160;
  qword_254638160 = sub_20AECB130();
  __cxa_guard_release(&qword_254638168);
  return qword_254638160;
}

_QWORD *VZDataCreateWithDictionary(uint64_t a1, __int128 *a2, CFErrorRef *a3)
{
  _QWORD *v5;
  int v6;
  __int128 *v7;
  _QWORD *v8;
  __int128 v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  CFErrorRef **v21;
  CFErrorRef *v22;
  char v23[208];
  void *v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  char v29;
  void *v30;
  char v31;
  char v32;
  char v33;
  char v34;
  __int128 v35[13];
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  void *__p;
  char v43;
  char v44;
  char v45;
  char v46;
  __int128 v47;
  __int128 v48;
  char v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  char v55;
  char v56;
  unsigned __int8 v57;
  uint64_t v58;

  v5 = (_QWORD *)a1;
  v58 = *MEMORY[0x24BDAC8D0];
  if (sub_20AEFADC4((uint64_t)"VZDataCreateWithDictionary", a1, a3))
    return 0;
  sub_20AED18DC(a2, v23);
  v21 = &v22;
  v22 = a3;
  sub_20AED4D3C(v35, (uint64_t)v23);
  sub_20AFADAE0(v5 + 2, v35, (uint64_t)&v47);
  if (v46)
  {
    if (v45)
    {
      if (v44 && v43 < 0)
        operator delete(__p);
      if (v41 && v40 < 0)
        operator delete(v39);
      if (v38 && v37 < 0)
        operator delete(v36);
    }
    sub_20AED30E0((uint64_t)v35);
  }
  v6 = v57;
  if (!v57)
  {
    v10 = v47;
    sub_20AECEBD0(&v11, &v48);
    v20 = 1;
    sub_20AEFD5DC(&v21, (uint64_t)&v10);
    if (!v20 || !v19)
      goto LABEL_39;
    if (v18)
    {
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
    }
    if (!v13 || (v12 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_37;
  }
  v7 = (__int128 *)sub_20AED4AC0((uint64_t)&v47);
  v8 = operator new(0x240uLL, MEMORY[0x24BEDB6B8]);
  if (!v8)
  {
    LOBYTE(v10) = 0;
    v20 = 0;
    sub_20AEFD5DC(&v21, (uint64_t)&v10);
    if (!v20 || !v19)
      goto LABEL_38;
    if (v18)
    {
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
    }
    v5 = 0;
    if (!v13 || (v12 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_37:
    operator delete(v11);
LABEL_38:
    v5 = 0;
    goto LABEL_39;
  }
  v5 = v8;
  *v8 = off_24C3F2180;
  sub_20AED5300((uint64_t)(v8 + 2), v7);
  *v5 = &off_24C3F2BA0;
  v5[2] = &unk_24C3F2BF0;
  *((_OWORD *)v5 + 35) = 0u;
LABEL_39:
  if (v57)
  {
    sub_20AED5474((uint64_t)&v47);
  }
  else if (v56)
  {
    if (v55)
    {
      if (v54 < 0)
        operator delete(v53);
      if (v52 < 0)
        operator delete(v51);
    }
    if (v50 && v49 < 0)
      operator delete((void *)v48);
  }
  if (!v6)
    v5 = 0;
  if (v34)
  {
    if (v33)
    {
      if (v32 && v31 < 0)
        operator delete(v30);
      if (v29 && v28 < 0)
        operator delete(v27);
      if (v26 && v25 < 0)
        operator delete(v24);
    }
    sub_20AED30E0((uint64_t)v23);
  }
  return v5;
}

void sub_20AEFABC8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AEFABD0);
  _Unwind_Resume(a1);
}

void sub_20AEFABE0(_Unwind_Exception *a1, int a2)
{
  const std::logic_error *exception_ptr;
  void *v5;
  std::string *p_what;
  std::string *v7;
  std::logic_error v8;
  char v9;
  char v10;
  __int128 v11;
  __int128 v12[6];
  std::__fs::filesystem::filesystem_error v13[3];
  CFErrorRef **v14[102];
  __int128 v15;
  _BYTE v16[104];
  char v17;

  if (a2)
  {
    sub_20AED1998((uint64_t)&STACK[0x2F0]);
    if (a2 == 3)
    {
      exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
      std::logic_error::logic_error(&v8, exception_ptr);
      v8.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_begin_catch(a1);
      v7 = (std::string *)std::logic_error::what(&v8);
      sub_20AED4C84(v13, (const char **)&v7);
      sub_20B099E24((__int128 *)v13, (uint64_t)&v11);
      v15 = v11;
      sub_20AECEBD0(v16, v12);
      v17 = 1;
      sub_20AEFD5DC(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      sub_20AECCE40((uint64_t)&v11);
      if (LOBYTE(v13[0].__ec_.__cat_))
      {
        if (*((char *)&v13[0].__ec_.__val_ + 7) < 0)
          operator delete(v13[0].__vftable);
      }
      MEMORY[0x20BD35020](&v8);
      __cxa_end_catch();
    }
    else if (a2 == 2)
    {
      v5 = __cxa_get_exception_ptr(a1);
      sub_20AED4C1C(&v13[0], (uint64_t)v5);
      __cxa_begin_catch(a1);
      p_what = &v13[0].__storage_.__ptr_->__what_;
      if (SHIBYTE(v13[0].__storage_.__ptr_->__what_.__r_.__value_.__r.__words[2]) < 0)
        p_what = (std::string *)p_what->__r_.__value_.__r.__words[0];
      v7 = p_what;
      sub_20AED4C84(&v8, (const char **)&v7);
      sub_20B09A738((__int128 *)&v8, (uint64_t)&v11);
      v15 = v11;
      sub_20AECEBD0(v16, v12);
      v17 = 1;
      sub_20AEFD5DC(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      sub_20AECCE40((uint64_t)&v11);
      if (v10 && v9 < 0)
        operator delete(v8.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error(v13);
      __cxa_end_catch();
    }
    else
    {
      __cxa_begin_catch(a1);
      LOBYTE(v15) = 0;
      v17 = 0;
      sub_20AEFD5DC(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      __cxa_end_catch();
    }
    JUMPOUT(0x20AEFAAC8);
  }
  _Unwind_Resume(a1);
}

void sub_20AEFABF8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AEFAC04);
  _Unwind_Resume(a1);
}

void sub_20AEFADAC(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20AEFADB4);
  sub_20AEC01C0(a1);
}

BOOL sub_20AEFADC4(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  unsigned __int8 v6;
  int v8;
  size_t v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15[2];
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  void *v22[2];
  uint64_t v23;
  uint64_t v24;
  void *v25[2];
  uint64_t v26;
  char v27;
  char v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  uint64_t v37;
  char v38;
  char v39;
  char v40;

  if (a2)
    return a2 == 0;
  v6 = atomic_load((unsigned __int8 *)&qword_254638170);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254638170))
  {
    sub_20AEFD2A4();
    v8 = byte_2546381D7;
    if (byte_2546381D7 >= 0)
      v9 = byte_2546381D7;
    else
      v9 = qword_2546381C8;
    v10 = v9 + 1;
    if (v9 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v10 >= 0x17)
    {
      v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v12 = v10 | 7;
      v13 = v12 + 1;
      v11 = (__int128 *)operator new(v12 + 1);
      *((_QWORD *)&xmmword_2546381A8 + 1) = v9 + 1;
      unk_2546381B8 = v13 | 0x8000000000000000;
      *(_QWORD *)&xmmword_2546381A8 = v11;
    }
    else
    {
      unk_2546381B8 = 0;
      xmmword_2546381A8 = 0uLL;
      v11 = &xmmword_2546381A8;
      byte_2546381BF = v9 + 1;
      if (!v9)
      {
LABEL_50:
        *(_WORD *)((char *)v11 + v9) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546381A8, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638170);
        goto LABEL_3;
      }
    }
    if (v8 >= 0)
      v14 = &qword_2546381C0;
    else
      v14 = (uint64_t *)qword_2546381C0;
    memmove(v11, v14, v9);
    goto LABEL_50;
  }
LABEL_3:
  if (byte_2546381BF < 0)
  {
    sub_20AEC60F4(v15, (void *)xmmword_2546381A8, *((unint64_t *)&xmmword_2546381A8 + 1));
  }
  else
  {
    *(_OWORD *)v15 = xmmword_2546381A8;
    v16 = unk_2546381B8;
  }
  v17 = 1;
  sub_20AECCECC(a1, (uint64_t)v15, (uint64_t)&v18);
  v29 = v18;
  LOBYTE(v30) = 0;
  v39 = 0;
  if (v28)
  {
    v32 = 0;
    if (v21)
    {
      v30 = v19;
      v31 = v20;
      v20 = 0;
      v19 = 0uLL;
      v32 = 1;
    }
    LOBYTE(v33) = 0;
    v38 = 0;
    if (v27)
    {
      v34 = v23;
      v33 = *(_OWORD *)v22;
      v22[0] = 0;
      v22[1] = 0;
      v35 = v24;
      *(_OWORD *)__p = *(_OWORD *)v25;
      v37 = v26;
      v23 = 0;
      v25[0] = 0;
      v25[1] = 0;
      v26 = 0;
      v38 = 1;
    }
    v39 = 1;
  }
  v40 = 0;
  sub_20AECB410(&v29, a3);
  if (!v40 && v39)
  {
    if (v38)
    {
      if (SHIBYTE(v37) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34) < 0)
        operator delete((void *)v33);
    }
    if (v32 && SHIBYTE(v31) < 0)
      operator delete((void *)v30);
  }
  if (v28)
  {
    if (v27)
    {
      if (SHIBYTE(v26) < 0)
        operator delete(v25[0]);
      if (SHIBYTE(v23) < 0)
        operator delete(v22[0]);
    }
    if (v21 && SHIBYTE(v20) < 0)
      operator delete((void *)v19);
  }
  if (v17 && SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  return a2 == 0;
}

void sub_20AEFB0EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638170);
  _Unwind_Resume(a1);
}

void sub_20AEFB104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECD704((uint64_t)&a32);
  sub_20AECCE40((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_OWORD *VZDataGetVZDictionary(uint64_t a1, CFErrorRef *a2)
{
  _OWORD *v4;
  int v5;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  __int128 v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  char v31;
  unsigned __int8 v32;
  CFErrorRef **v33;
  CFErrorRef *v34;

  if (sub_20AED21B4((uint64_t)"VZDataGetVZDictionary", a1, a2))
    return 0;
  v4 = *(_OWORD **)(a1 + 568);
  if (v4)
    return v4;
  v33 = &v34;
  v34 = a2;
  sub_20AFADFCC(a1 + 32, (uint64_t)&v22);
  v5 = v32;
  if (!v32)
  {
    v11 = v22;
    sub_20AECEBD0(&v12, &v23);
    v21 = 1;
    sub_20AEFD974(&v33, (uint64_t)&v11);
    if (v21 && v20)
    {
      if (v19)
      {
        if (v18 < 0)
          operator delete(__p);
        if (v16 < 0)
          operator delete(v15);
      }
      if (v14 && v13 < 0)
        operator delete(v12);
    }
    goto LABEL_28;
  }
  sub_20AEFDB2C((uint64_t)&v22);
  v6 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  if (v6)
  {
    v4 = v6;
    v6[1] = v22;
    v22 = 0uLL;
    *((_DWORD *)v6 + 8) = 1;
    *(_QWORD *)v6 = &off_24C3F3188;
    *((_QWORD *)v6 + 1) = &unk_24C3F31D8;
  }
  else
  {
    LOBYTE(v11) = 0;
    v21 = 0;
    sub_20AEFD974(&v33, (uint64_t)&v11);
    if (v21 && v20)
    {
      if (v19)
      {
        if (v18 < 0)
          operator delete(__p);
        if (v16 < 0)
          operator delete(v15);
      }
      v4 = 0;
      if (!v14 || (v13 & 0x80000000) == 0)
        goto LABEL_28;
      operator delete(v12);
    }
    v4 = 0;
  }
LABEL_28:
  if (v32)
  {
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else if (v31)
  {
    if (v30)
    {
      if (v29 < 0)
        operator delete(v28);
      if (v27 < 0)
        operator delete(v26);
    }
    if (v25 && v24 < 0)
      operator delete((void *)v23);
  }
  if (!v5)
    v4 = 0;
  *(_QWORD *)(a1 + 568) = v4;
  return v4;
}

void sub_20AEFB394(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a68;
  uint64_t v68;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  const std::logic_error *exception_ptr;
  const char *v75;
  size_t v76;
  size_t v77;
  void **p_dst;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  const char *v84;
  size_t v85;
  const char *v86;
  std::logic_error_vtbl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (*(_BYTE *)(v68 - 72))
  {
    v71 = *(std::__shared_weak_count **)(v68 - 184);
    if (v71)
    {
      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(p_shared_owners);
      while (__stlxr(v73 - 1, p_shared_owners));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  else if (*(_BYTE *)(v68 - 80))
  {
    if (*(_BYTE *)(v68 - 88))
    {
      if (*(char *)(v68 - 89) < 0)
        operator delete(*(void **)(v68 - 112));
      if (*(char *)(v68 - 121) < 0)
        operator delete(*(void **)(v68 - 144));
    }
    if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
      operator delete(*(void **)(v68 - 176));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v75 = std::logic_error::what(&a10);
    v76 = strlen(v75);
    if (v76 <= 0x7FFFFFFFFFFFFFF7)
    {
      v77 = v76;
      if (v76 >= 0x17)
      {
        v88 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v88 = v76 | 7;
        v89 = v88 + 1;
        p_dst = (void **)operator new(v88 + 1);
        __dst_8 = v77;
        *(_QWORD *)&a38 = v89 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v76;
        p_dst = (void **)&__dst;
        if (!v76)
        {
LABEL_56:
          *((_BYTE *)p_dst + v77) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a68 = a13;
          sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
          *(_BYTE *)(v68 - 72) = 1;
          sub_20AEFD974((CFErrorRef ***)(v68 - 64), v68 - 192);
          if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
          {
            if (*(_BYTE *)(v68 - 88))
            {
              if (*(char *)(v68 - 89) < 0)
                operator delete(*(void **)(v68 - 112));
              if (*(char *)(v68 - 121) < 0)
                operator delete(*(void **)(v68 - 144));
            }
            if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
              operator delete(*(void **)(v68 - 176));
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_107;
        }
      }
      memmove(p_dst, v75, v77);
      goto LABEL_56;
    }
LABEL_106:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v68 - 192) = 0;
    *(_BYTE *)(v68 - 72) = 0;
    sub_20AEFD974((CFErrorRef ***)(v68 - 64), v68 - 192);
    if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
    {
      if (*(_BYTE *)(v68 - 88))
      {
        if (*(char *)(v68 - 89) < 0)
          operator delete(*(void **)(v68 - 112));
        if (*(char *)(v68 - 121) < 0)
          operator delete(*(void **)(v68 - 144));
      }
      if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
        operator delete(*(void **)(v68 - 176));
    }
    __cxa_end_catch();
LABEL_107:
    JUMPOUT(0x20AEFB370);
  }
  v79 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v79);
  a38 = *((_OWORD *)v79 + 1);
  v81 = *((_QWORD *)v79 + 4);
  v80 = *((_QWORD *)v79 + 5);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  a39 = v81;
  a40 = v80;
  if (v80)
  {
    v82 = (unint64_t *)(v80 + 8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  __cxa_begin_catch(a1);
  v84 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v84 = *(const char **)v84;
  v85 = strlen(v84);
  if (v85 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_106;
  v86 = (const char *)v85;
  if (v85 >= 0x17)
  {
    v90 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v90 = v85 | 7;
    v91 = v90 + 1;
    v87 = (std::logic_error_vtbl *)operator new(v90 + 1);
    a10.__imp_.__imp_ = v86;
    a11 = v91 | 0x8000000000000000;
    a10.__vftable = v87;
  }
  else
  {
    HIBYTE(a11) = v85;
    v87 = (std::logic_error_vtbl *)&a10;
    if (!v85)
    {
LABEL_83:
      v86[(_QWORD)v87] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a68 = a13;
      sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
      *(_BYTE *)(v68 - 72) = 1;
      sub_20AEFD974((CFErrorRef ***)(v68 - 64), v68 - 192);
      if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
      {
        if (*(_BYTE *)(v68 - 88))
        {
          if (*(char *)(v68 - 89) < 0)
            operator delete(*(void **)(v68 - 112));
          if (*(char *)(v68 - 121) < 0)
            operator delete(*(void **)(v68 - 144));
        }
        if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
          operator delete(*(void **)(v68 - 176));
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_107;
    }
  }
  memmove(v87, v84, (size_t)v86);
  goto LABEL_83;
}

_OWORD *VZDictionaryCreateWithJsonString(const char *a1, int a2, _OWORD *a3, CFErrorRef *a4)
{
  int v8;
  _OWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v14;
  void *v15;
  char v16;
  char v17;
  void *v18;
  char v19;
  void *__p;
  char v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  __int128 v26;
  char v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  char v33;
  char v34;
  unsigned __int8 v35;
  CFErrorRef **v36;
  CFErrorRef *v37;

  if (sub_20AEE3494((uint64_t)"VZDictionaryCreateWithJsonString", (uint64_t)a1, a4))
    return 0;
  v36 = &v37;
  v37 = a4;
  sub_20AFAD2B0(a1, a2, (int)a3, (uint64_t)&v25);
  v8 = v35;
  if (v35)
  {
    sub_20AEFDB2C((uint64_t)&v25);
    v9 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
    if (v9)
    {
      a3 = v9;
      v9[1] = v25;
      v25 = 0uLL;
      *((_DWORD *)v9 + 8) = 1;
      *(_QWORD *)v9 = &off_24C3F3188;
      *((_QWORD *)v9 + 1) = &unk_24C3F31D8;
      goto LABEL_26;
    }
    LOBYTE(v14) = 0;
    v24 = 0;
    sub_20AEFDBEC(&v36, (uint64_t)&v14);
    if (!v24 || !v23)
      goto LABEL_25;
    if (v22)
    {
      if (v21 < 0)
        operator delete(__p);
      if (v19 < 0)
        operator delete(v18);
    }
    a3 = 0;
    if (v17 && v16 < 0)
    {
      operator delete(v15);
LABEL_25:
      a3 = 0;
    }
  }
  else
  {
    v14 = v25;
    sub_20AECEBD0(&v15, &v26);
    v24 = 1;
    sub_20AEFDBEC(&v36, (uint64_t)&v14);
    if (v24 && v23)
    {
      if (v22)
      {
        if (v21 < 0)
          operator delete(__p);
        if (v19 < 0)
          operator delete(v18);
      }
      if (v17 && v16 < 0)
        operator delete(v15);
    }
  }
LABEL_26:
  if (v35)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        if (!v8)
          return 0;
        return a3;
      }
    }
  }
  else if (v34)
  {
    if (v33)
    {
      if (v32 < 0)
        operator delete(v31);
      if (v30 < 0)
        operator delete(v29);
    }
    if (v28 && v27 < 0)
      operator delete((void *)v26);
  }
  if (!v8)
    return 0;
  return a3;
}

void sub_20AEFBB2C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,unint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  char a64;
  __int16 a66;
  __int16 a68;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  const std::logic_error *exception_ptr;
  const char *v76;
  size_t v77;
  size_t v78;
  void **p_dst;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  const char *v85;
  size_t v86;
  const char *v87;
  std::logic_error_vtbl *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  if ((_BYTE)a68 && (_BYTE)a66)
  {
    if (a64)
    {
      if (a63 < 0)
        operator delete(__p);
      if (a56 < 0)
        operator delete(a51);
    }
    if (a50 && a49 < 0)
      operator delete(a44);
  }
  if (*(_BYTE *)(v69 - 72))
  {
    v72 = *(std::__shared_weak_count **)(v69 - 184);
    if (v72)
    {
      p_shared_owners = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(p_shared_owners);
      while (__stlxr(v74 - 1, p_shared_owners));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
  }
  else if (*(_BYTE *)(v69 - 80))
  {
    if (*(_BYTE *)(v69 - 88))
    {
      if (*(char *)(v69 - 89) < 0)
        operator delete(*(void **)(v69 - 112));
      if (*(char *)(v69 - 121) < 0)
        operator delete(*(void **)(v69 - 144));
    }
    if (*(_BYTE *)(v69 - 152) && *(char *)(v69 - 153) < 0)
      operator delete(*(void **)(v69 - 176));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v76 = std::logic_error::what(&a10);
    v77 = strlen(v76);
    if (v77 <= 0x7FFFFFFFFFFFFFF7)
    {
      v78 = v77;
      if (v77 >= 0x17)
      {
        v89 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v77 | 7) != 0x17)
          v89 = v77 | 7;
        v90 = v89 + 1;
        p_dst = (void **)operator new(v89 + 1);
        __dst_8 = v78;
        a38 = v90 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(a38) = v77;
        p_dst = (void **)&__dst;
        if (!v77)
        {
LABEL_56:
          *((_BYTE *)p_dst + v78) = 0;
          a39 = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          *(_OWORD *)(v68 + 176) = a13;
          sub_20AECEBD0((_BYTE *)(v69 - 176), &a14);
          *(_BYTE *)(v69 - 72) = 1;
          sub_20AEFDBEC((CFErrorRef ***)(v69 - 64), v69 - 192);
          if (*(_BYTE *)(v69 - 72) && *(_BYTE *)(v69 - 80))
          {
            if (*(_BYTE *)(v69 - 88))
            {
              if (*(char *)(v69 - 89) < 0)
                operator delete(*(void **)(v69 - 112));
              if (*(char *)(v69 - 121) < 0)
                operator delete(*(void **)(v69 - 144));
            }
            if (*(_BYTE *)(v69 - 152) && *(char *)(v69 - 153) < 0)
              operator delete(*(void **)(v69 - 176));
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (a39)
          {
            if (SHIBYTE(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_107;
        }
      }
      memmove(p_dst, v76, v78);
      goto LABEL_56;
    }
LABEL_106:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v69 - 192) = 0;
    *(_BYTE *)(v69 - 72) = 0;
    sub_20AEFDBEC((CFErrorRef ***)(v69 - 64), v69 - 192);
    if (*(_BYTE *)(v69 - 72) && *(_BYTE *)(v69 - 80))
    {
      if (*(_BYTE *)(v69 - 88))
      {
        if (*(char *)(v69 - 89) < 0)
          operator delete(*(void **)(v69 - 112));
        if (*(char *)(v69 - 121) < 0)
          operator delete(*(void **)(v69 - 144));
      }
      if (*(_BYTE *)(v69 - 152) && *(char *)(v69 - 153) < 0)
        operator delete(*(void **)(v69 - 176));
    }
    __cxa_end_catch();
LABEL_107:
    JUMPOUT(0x20AEFBB0CLL);
  }
  v80 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v80);
  *(_OWORD *)(v68 + 16) = *((_OWORD *)v80 + 1);
  v82 = *((_QWORD *)v80 + 4);
  v81 = *((_QWORD *)v80 + 5);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  a40 = v82;
  a41 = v81;
  if (v81)
  {
    v83 = (unint64_t *)(v81 + 8);
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  __cxa_begin_catch(a1);
  v85 = (const char *)(a40 + 48);
  if (*(char *)(a40 + 71) < 0)
    v85 = *(const char **)v85;
  v86 = strlen(v85);
  if (v86 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_106;
  v87 = (const char *)v86;
  if (v86 >= 0x17)
  {
    v91 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v86 | 7) != 0x17)
      v91 = v86 | 7;
    v92 = v91 + 1;
    v88 = (std::logic_error_vtbl *)operator new(v91 + 1);
    a10.__imp_.__imp_ = v87;
    a11 = v92 | 0x8000000000000000;
    a10.__vftable = v88;
  }
  else
  {
    HIBYTE(a11) = v86;
    v88 = (std::logic_error_vtbl *)&a10;
    if (!v86)
    {
LABEL_83:
      v87[(_QWORD)v88] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      *(_OWORD *)(v68 + 176) = a13;
      sub_20AECEBD0((_BYTE *)(v69 - 176), &a14);
      *(_BYTE *)(v69 - 72) = 1;
      sub_20AEFDBEC((CFErrorRef ***)(v69 - 64), v69 - 192);
      if (*(_BYTE *)(v69 - 72) && *(_BYTE *)(v69 - 80))
      {
        if (*(_BYTE *)(v69 - 88))
        {
          if (*(char *)(v69 - 89) < 0)
            operator delete(*(void **)(v69 - 112));
          if (*(char *)(v69 - 121) < 0)
            operator delete(*(void **)(v69 - 144));
        }
        if (*(_BYTE *)(v69 - 152) && *(char *)(v69 - 153) < 0)
          operator delete(*(void **)(v69 - 176));
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_107;
    }
  }
  memmove(v88, v85, (size_t)v87);
  goto LABEL_83;
}

std::__shared_weak_count *VZDictionaryCreateWithCFDictionary(CFTypeRef cf, uint64_t a2)
{
  __int128 v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v23;
  void *v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  void *__p;
  char v30;
  char v31;
  char v32;
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  char v43;
  char v44;
  unsigned __int8 v45;
  CFErrorRef **v46;
  uint64_t v47;

  sub_20AEEC3E8(&v35, cf);
  v3 = v35;
  if (*((_QWORD *)&v35 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    do
      v9 = __ldxr(v4);
    while (__stxr(v9 + 1, v4));
    do
      v10 = __ldxr(v4);
    while (__stxr(v10 + 1, v4));
    do
      v11 = __ldaxr(v4);
    while (__stlxr(v11 - 1, v4));
    if (!v11)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v3 + 1) + 16))(*((_QWORD *)&v3 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v3 + 1));
    }
    do
      v12 = __ldaxr(v4);
    while (__stlxr(v12 - 1, v4));
    if (!v12)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v3 + 1) + 16))(*((_QWORD *)&v3 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v3 + 1));
    }
  }
  v46 = (CFErrorRef **)&v47;
  v47 = a2;
  v34 = v3;
  v13.n128_f64[0] = sub_20AFAD724((uint64_t)&v34, (uint64_t)&v35);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v13);
      std::__shared_weak_count::__release_weak(v14);
      v17 = v45;
      if (v45)
        goto LABEL_22;
LABEL_25:
      v23 = v35;
      sub_20AECEBD0(&v24, &v36);
      v33 = 1;
      sub_20AEFDFAC(&v46, (uint64_t)&v23);
      if (v33 && v32)
      {
        if (v31)
        {
          if (v30 < 0)
            operator delete(__p);
          if (v28 < 0)
            operator delete(v27);
        }
        if (v26 && v25 < 0)
          operator delete(v24);
      }
      goto LABEL_46;
    }
  }
  v17 = v45;
  if (!v45)
    goto LABEL_25;
LABEL_22:
  sub_20AEFDB2C((uint64_t)&v35);
  v18 = (std::__shared_weak_count *)operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  if (v18)
  {
    v14 = v18;
    *(_OWORD *)&v18->__shared_weak_owners_ = v35;
    v35 = 0uLL;
    LODWORD(v18[1].__shared_owners_) = 1;
    v18->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F3188;
    v18->__shared_owners_ = (uint64_t)&unk_24C3F31D8;
    goto LABEL_46;
  }
  LOBYTE(v23) = 0;
  v33 = 0;
  sub_20AEFDFAC(&v46, (uint64_t)&v23);
  if (!v33 || !v32)
    goto LABEL_45;
  if (v31)
  {
    if (v30 < 0)
      operator delete(__p);
    if (v28 < 0)
      operator delete(v27);
  }
  v14 = 0;
  if (v26 && v25 < 0)
  {
    operator delete(v24);
LABEL_45:
    v14 = 0;
  }
LABEL_46:
  if (v45)
  {
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else if (v44)
  {
    if (v43)
    {
      if (v42 < 0)
        operator delete(v41);
      if (v40 < 0)
        operator delete(v39);
    }
    if (v38 && v37 < 0)
      operator delete((void *)v36);
  }
  if (!v17)
    return 0;
  return v14;
}

void sub_20AEFC3A4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a70;
  uint64_t v70;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  const std::logic_error *exception_ptr;
  const char *v77;
  size_t v78;
  size_t v79;
  void **p_dst;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  const char *v86;
  size_t v87;
  const char *v88;
  std::logic_error_vtbl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (*(_BYTE *)(v70 - 72))
  {
    v73 = *(std::__shared_weak_count **)(v70 - 184);
    if (v73)
    {
      p_shared_owners = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldaxr(p_shared_owners);
      while (__stlxr(v75 - 1, p_shared_owners));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
  }
  else if (*(_BYTE *)(v70 - 80))
  {
    if (*(_BYTE *)(v70 - 88))
    {
      if (*(char *)(v70 - 89) < 0)
        operator delete(*(void **)(v70 - 112));
      if (*(char *)(v70 - 121) < 0)
        operator delete(*(void **)(v70 - 144));
    }
    if (*(_BYTE *)(v70 - 152) && *(char *)(v70 - 153) < 0)
      operator delete(*(void **)(v70 - 176));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v77 = std::logic_error::what(&a10);
    v78 = strlen(v77);
    if (v78 <= 0x7FFFFFFFFFFFFFF7)
    {
      v79 = v78;
      if (v78 >= 0x17)
      {
        v90 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v78 | 7) != 0x17)
          v90 = v78 | 7;
        v91 = v90 + 1;
        p_dst = (void **)operator new(v90 + 1);
        __dst_8 = v79;
        *(_QWORD *)&a38 = v91 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v78;
        p_dst = (void **)&__dst;
        if (!v78)
        {
LABEL_57:
          *((_BYTE *)p_dst + v79) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a70 = a13;
          sub_20AECEBD0((_BYTE *)(v70 - 176), &a14);
          *(_BYTE *)(v70 - 72) = 1;
          sub_20AEFDFAC((CFErrorRef ***)(v70 - 64), v70 - 192);
          if (*(_BYTE *)(v70 - 72) && *(_BYTE *)(v70 - 80))
          {
            if (*(_BYTE *)(v70 - 88))
            {
              if (*(char *)(v70 - 89) < 0)
                operator delete(*(void **)(v70 - 112));
              if (*(char *)(v70 - 121) < 0)
                operator delete(*(void **)(v70 - 144));
            }
            if (*(_BYTE *)(v70 - 152) && *(char *)(v70 - 153) < 0)
              operator delete(*(void **)(v70 - 176));
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_108;
        }
      }
      memmove(p_dst, v77, v79);
      goto LABEL_57;
    }
LABEL_107:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v70 - 192) = 0;
    *(_BYTE *)(v70 - 72) = 0;
    sub_20AEFDFAC((CFErrorRef ***)(v70 - 64), v70 - 192);
    if (*(_BYTE *)(v70 - 72) && *(_BYTE *)(v70 - 80))
    {
      if (*(_BYTE *)(v70 - 88))
      {
        if (*(char *)(v70 - 89) < 0)
          operator delete(*(void **)(v70 - 112));
        if (*(char *)(v70 - 121) < 0)
          operator delete(*(void **)(v70 - 144));
      }
      if (*(_BYTE *)(v70 - 152) && *(char *)(v70 - 153) < 0)
        operator delete(*(void **)(v70 - 176));
    }
    __cxa_end_catch();
LABEL_108:
    JUMPOUT(0x20AEFC384);
  }
  v81 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v81);
  a38 = *((_OWORD *)v81 + 1);
  v83 = *((_QWORD *)v81 + 4);
  v82 = *((_QWORD *)v81 + 5);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  a39 = v83;
  a40 = v82;
  if (v82)
  {
    v84 = (unint64_t *)(v82 + 8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 1, v84));
  }
  __cxa_begin_catch(a1);
  v86 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v86 = *(const char **)v86;
  v87 = strlen(v86);
  if (v87 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_107;
  v88 = (const char *)v87;
  if (v87 >= 0x17)
  {
    v92 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v87 | 7) != 0x17)
      v92 = v87 | 7;
    v93 = v92 + 1;
    v89 = (std::logic_error_vtbl *)operator new(v92 + 1);
    a10.__imp_.__imp_ = v88;
    a11 = v93 | 0x8000000000000000;
    a10.__vftable = v89;
  }
  else
  {
    HIBYTE(a11) = v87;
    v89 = (std::logic_error_vtbl *)&a10;
    if (!v87)
    {
LABEL_84:
      v88[(_QWORD)v89] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a70 = a13;
      sub_20AECEBD0((_BYTE *)(v70 - 176), &a14);
      *(_BYTE *)(v70 - 72) = 1;
      sub_20AEFDFAC((CFErrorRef ***)(v70 - 64), v70 - 192);
      if (*(_BYTE *)(v70 - 72) && *(_BYTE *)(v70 - 80))
      {
        if (*(_BYTE *)(v70 - 88))
        {
          if (*(char *)(v70 - 89) < 0)
            operator delete(*(void **)(v70 - 112));
          if (*(char *)(v70 - 121) < 0)
            operator delete(*(void **)(v70 - 144));
        }
        if (*(_BYTE *)(v70 - 152) && *(char *)(v70 - 153) < 0)
          operator delete(*(void **)(v70 - 176));
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_108;
    }
  }
  memmove(v89, v86, (size_t)v88);
  goto LABEL_84;
}

char *VZDictionaryGetAsJsonString(uint64_t a1, CFErrorRef *a2)
{
  char *result;

  if (sub_20AEFADC4((uint64_t)"VZDictionaryGetAsJsonString", a1, a2))
    return 0;
  result = (char *)sub_20B416014(*(_QWORD *)(a1 + 16), 0);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t VZDictionaryGetAsFormattedJsonString(uint64_t a1, uint64_t a2, char a3, CFErrorRef *a4)
{
  uint64_t v8;
  char v10[16];
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  char v18;
  char v19;
  char v20;

  if (sub_20AEFADC4((uint64_t)"VZDictionaryGetAsFormattedJsonString", a1, a4))
    return 0;
  sub_20AFACAF4((uint64_t *)(a1 + 16), a2, a3, (uint64_t)v10);
  v8 = sub_20AEFCA68((uint64_t)"VZDictionaryGetAsFormattedJsonString", v10, 0, a4);
  if (v20 || !v19)
    return v8;
  if (v18)
  {
    if (v17 < 0)
      operator delete(__p);
    if (v15 < 0)
      operator delete(v14);
  }
  if (!v13 || (v12 & 0x80000000) == 0)
    return v8;
  operator delete(v11);
  return v8;
}

void sub_20AEFCA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEFCA68(uint64_t a1, char *a2, uint64_t a3, CFErrorRef *a4)
{
  uint64_t v5;
  void *v8;
  char v9;
  __int128 v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  char v18;
  char v19;
  uint64_t v20;

  v20 = a1;
  if (a2[120])
    return *(_QWORD *)a2;
  v5 = a3;
  sub_20AEDBA04("in function ", (const char *)&v20);
  sub_20B529470(a2, &v8, (uint64_t)&v10);
  sub_20AECB410(&v10, a4);
  if (v19)
  {
    if (v18)
    {
      if (v17 < 0)
        operator delete(__p);
      if (v15 < 0)
        operator delete(v14);
    }
    if (v13)
    {
      if (v12 < 0)
        operator delete(v11);
    }
  }
  if ((v9 & 0x80000000) == 0)
    return v5;
  operator delete(v8);
  return v5;
}

void sub_20AEFCB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_20AECCE40((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t VZDictionaryGetAsCFDictionary(uint64_t a1, CFErrorRef *a2)
{
  uint64_t v4;
  __n128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  __int128 v24;
  void *v25;
  char v26;
  char v27;
  void *v28;
  char v29;
  void *__p;
  char v31;
  char v32;
  char v33;
  const char *v34;

  if (sub_20AEFADC4((uint64_t)"VZDictionaryGetAsCFDictionary", a1, a2))
    return 0;
  v6.n128_f64[0] = sub_20AFACEC0((_QWORD *)(a1 + 16), (uint64_t)&v10);
  v34 = "VZDictionaryGetAsCFDictionary";
  if (v21)
  {
    v4 = v10;
    v7 = v11;
    if (!v11)
      return v4;
    goto LABEL_19;
  }
  sub_20AEDBA04("in function ", (const char *)&v34);
  sub_20B529470((char *)&v10, &v22, (uint64_t)&v24);
  sub_20AECB410(&v24, a2);
  if (v33)
  {
    if (v32)
    {
      if (v31 < 0)
        operator delete(__p);
      if (v29 < 0)
        operator delete(v28);
    }
    if (v27 && v26 < 0)
      operator delete(v25);
  }
  if ((v23 & 0x80000000) == 0)
  {
    if (v21)
      goto LABEL_18;
LABEL_24:
    if (v20)
    {
      if (v19)
      {
        if (v18 < 0)
          operator delete(v17);
        if (v16 < 0)
          operator delete(v15);
      }
      v4 = 0;
      if (!v14 || (v13 & 0x80000000) == 0)
        return v4;
      operator delete(v12);
    }
    return 0;
  }
  operator delete(v22);
  if (!v21)
    goto LABEL_24;
LABEL_18:
  v4 = 0;
  v7 = v11;
  if (!v11)
    return v4;
LABEL_19:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v4;
  ((void (*)(std::__shared_weak_count *, __n128))v7->__on_zero_shared)(v7, v6);
  std::__shared_weak_count::__release_weak(v7);
  return v4;
}

void sub_20AEFCD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  sub_20AECCE40((uint64_t)&a32);
  if (a31 < 0)
  {
    operator delete(__p);
    sub_20AED7018((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_20AED7018((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEFCD78(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 32);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AEFCD90(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 32);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AEFCDB8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638168);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638168))
    return qword_254638160;
  qword_254638160 = sub_20AECB130();
  __cxa_guard_release(&qword_254638168);
  return qword_254638160;
}

_QWORD *sub_20AEFCE18(uint64_t a1, void *lpsrc)
{
  _QWORD *result;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F3238, 0);
  if (result)
    return (_QWORD *)sub_20B416698(*(_QWORD *)(a1 + 16), result[2]);
  return result;
}

uint64_t sub_20AEFCE70(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  const void *v20[2];
  char v21;

  __cxa_begin_catch(a1);
  sub_20AEFD424();
  sub_20AEC0D64(v20, "failed to compare equal");
  sub_20AECD224((std::string::size_type)&xmmword_2546381D8, v20, 0);
  if (v21 < 0)
    operator delete((void *)v20[0]);
  __cxa_end_catch();
  return 0;
}

CFTypeRef sub_20AEFCEC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *__p;
  char v27;
  CFTypeRef cf;
  std::__shared_weak_count *v29;
  void *__dst[2];
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;

  sub_20AEFD424();
  v32 = a1;
  v2 = operator new();
  *(_QWORD *)(v2 + 272) = 0;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  sub_20AEC0BD8(v2);
  v33 = (_QWORD *)v2;
  v3 = (uint64_t *)(v2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v4 + 24))
  {
    sub_20B4FA6D8(v3, *(_QWORD *)(v4 + 16));
  }
  else if (*(_BYTE *)(v4 + 8))
  {
    sub_20B4FA364(v3, *(_QWORD *)v4);
  }
  else
  {
    v5 = *(_QWORD *)(v4 + 32);
    if (v5)
    {
      v6 = *(char *)(v5 + 23);
      if (v6 >= 0)
        v7 = *(_QWORD *)(v4 + 32);
      else
        v7 = *(_QWORD *)v5;
      if (v6 >= 0)
        v8 = *(unsigned __int8 *)(v5 + 23);
      else
        v8 = *(_QWORD *)(v5 + 8);
      sub_20AEC01D0(v3, v7, v8);
    }
    else
    {
      sub_20B4F66B8(v3, *(CFTypeRef *)(v4 + 48));
    }
  }
  v9 = *(_DWORD *)(v2 + 120);
  if ((v9 & 0x10) != 0)
  {
    v12 = *(_QWORD *)(v2 + 112);
    v13 = *(_QWORD *)(v2 + 72);
    if (v12 < v13)
    {
      *(_QWORD *)(v2 + 112) = v13;
      v12 = v13;
    }
    v14 = *(const void **)(v2 + 64);
    v10 = v12 - (_QWORD)v14;
    if (v12 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_42;
  }
  else
  {
    if ((v9 & 8) == 0)
    {
      v10 = 0;
      HIBYTE(v31) = 0;
      v11 = __dst;
      goto LABEL_27;
    }
    v14 = *(const void **)(v2 + 40);
    v10 = *(_QWORD *)(v2 + 56) - (_QWORD)v14;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_42:
      sub_20AEC0138();
  }
  if (v10 >= 0x17)
  {
    v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v15 = v10 | 7;
    v16 = v15 + 1;
    v11 = (void **)operator new(v15 + 1);
    __dst[1] = (void *)v10;
    v31 = v16 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_26;
  }
  HIBYTE(v31) = v10;
  v11 = __dst;
  if (v10)
LABEL_26:
    memmove(v11, v14, v10);
LABEL_27:
  *((_BYTE *)v11 + v10) = 0;
  v17 = v33;
  if (v33)
  {
    v18 = MEMORY[0x24BEDB7F0];
    v19 = *MEMORY[0x24BEDB7F0];
    *v33 = *MEMORY[0x24BEDB7F0];
    v20 = *(_QWORD *)(v18 + 72);
    *(_QWORD *)((char *)v17 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(v18 + 64);
    v17[3] = MEMORY[0x24BEDB848] + 16;
    v17[2] = v20;
    if (*((char *)v17 + 111) < 0)
      operator delete((void *)v17[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v17 + 16);
    MEMORY[0x20BD3583C](v17, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)&xmmword_2546381D8, (uint64_t)" ", &v32, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v31) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v21 = cf;
  if (cf)
    CFRetain(cf);
  v22 = v29;
  if (!v29)
    goto LABEL_39;
  p_shared_owners = (unint64_t *)&v29->__shared_owners_;
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if ((v27 & 0x80000000) == 0)
      return v21;
  }
  else
  {
LABEL_39:
    if ((v27 & 0x80000000) == 0)
      return v21;
  }
  operator delete(__p);
  return v21;
}

uint64_t sub_20AEFD1C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  const void *v32[2];
  char v33;
  uint64_t v34;

  sub_20AEC147C((uint64_t)&v34);
  if (v33 < 0)
    operator delete((void *)v32[0]);
  __cxa_begin_catch(a1);
  sub_20AEFD424();
  sub_20AEC0D64(v32, "failed to create description");
  sub_20AECD224((std::string::size_type)&xmmword_2546381D8, v32, 0);
  if (v33 < 0)
    operator delete((void *)v32[0]);
  __cxa_end_catch();
  return 0;
}

uint64_t sub_20AEFD298(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 32));
}

void sub_20AEFD2A4()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254638178);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638178))
  {
    sub_20AEFD424();
    v1 = byte_2546381EF;
    if (byte_2546381EF >= 0)
      v2 = byte_2546381EF;
    else
      v2 = *((_QWORD *)&xmmword_2546381D8 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_2546381C8 = v2 + 6;
      unk_2546381D0 = v6 | 0x8000000000000000;
      qword_2546381C0 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_2546381C8 = 0;
      unk_2546381D0 = 0;
      qword_2546381C0 = 0x2074736E6F63;
      byte_2546381D7 = v2 + 6;
      v4 = (char *)&qword_2546381C0 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2546381C0, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638178);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_2546381D8;
    else
      v8 = (__int128 *)xmmword_2546381D8;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20AEFD40C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638178);
  _Unwind_Resume(a1);
}

void sub_20AEFD424()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638180);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638180))
  {
    sub_20AEFD4DC();
    if (byte_25463821F < 0)
    {
      sub_20AEC60F4(&xmmword_2546381D8, (void *)xmmword_254638208, *((unint64_t *)&xmmword_254638208 + 1));
    }
    else
    {
      xmmword_2546381D8 = xmmword_254638208;
      unk_2546381E8 = unk_254638218;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546381D8, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638180);
  }
}

void sub_20AEFD4C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638180);
  _Unwind_Resume(a1);
}

void sub_20AEFD4DC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254638188);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638188))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZDictionary]", qword_2546381F0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546381F0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638188);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254638190);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254638190))
    {
      sub_20B531658((uint64_t)qword_2546381F0, (uint64_t)&xmmword_254638208);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638208, &dword_20AEBB000);
      __cxa_guard_release(&qword_254638190);
    }
  }
}

void sub_20AEFD5AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638190);
  _Unwind_Resume(a1);
}

void sub_20AEFD5C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638188);
  _Unwind_Resume(a1);
}

void sub_20AEFD5DC(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  __int128 *v6;
  __int128 v7;
  void **v8;
  void **v9;
  void *v10;
  int v11;
  size_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _BYTE v18[16];
  void *__p;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  char v28;
  void *v29;
  void **v30;
  __int128 __dst;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AED5104();
  v5 = atomic_load((unsigned __int8 *)&qword_254638198);
  if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254638198))
    goto LABEL_2;
  sub_20AEFD2A4();
  v11 = byte_2546381D7;
  if (byte_2546381D7 >= 0)
    v12 = byte_2546381D7;
  else
    v12 = qword_2546381C8;
  v13 = v12 + 1;
  if (v12 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    v14 = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&xmmword_254638220 + 1) = v12 + 1;
    unk_254638230 = v16 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254638220 = v14;
    goto LABEL_43;
  }
  v14 = &xmmword_254638220;
  unk_254638230 = 0;
  xmmword_254638220 = 0uLL;
  byte_254638237 = v12 + 1;
  if (v12)
  {
LABEL_43:
    if (v11 >= 0)
      v17 = &qword_2546381C0;
    else
      v17 = (uint64_t *)qword_2546381C0;
    memmove(v14, v17, v12);
  }
  *(_WORD *)((char *)v14 + v12) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638220, &dword_20AEBB000);
  __cxa_guard_release(&qword_254638198);
LABEL_2:
  if (byte_254638237 < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_254638220, *((unint64_t *)&xmmword_254638220 + 1));
  }
  else
  {
    __dst = xmmword_254638220;
    v32 = unk_254638230;
  }
  v6 = sub_20AED3F9C();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v33, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v34 = *((_QWORD *)v6 + 2);
    v33 = v7;
  }
  sub_20AEC7620(&v29, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v18, a2);
  sub_20AECD798(v4, (__int128 **)&v29, (uint64_t)v18, **a1);
  if (!v28 || !v27)
    goto LABEL_16;
  if (!v26)
    goto LABEL_13;
  if ((v25 & 0x80000000) == 0)
  {
    if ((v23 & 0x80000000) == 0)
      goto LABEL_13;
LABEL_30:
    operator delete(v22);
    if (!v21)
      goto LABEL_16;
    goto LABEL_14;
  }
  operator delete(v24);
  if (v23 < 0)
    goto LABEL_30;
LABEL_13:
  if (!v21)
    goto LABEL_16;
LABEL_14:
  if (v20 < 0)
    operator delete(__p);
LABEL_16:
  v8 = (void **)v29;
  if (v29)
  {
    v9 = v30;
    v10 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = v29;
    }
    v30 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v33);
  if (SHIBYTE(v32) < 0)
    goto LABEL_28;
}

void sub_20AEFD8FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638198);
  _Unwind_Resume(a1);
}

void sub_20AEFD914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  sub_20AECDEE0((uint64_t)&a9);
  sub_20AEC2E90(&a25);
  if (*(char *)(v25 - 97) < 0)
    operator delete(*(void **)(v25 - 120));
  if (*(char *)(v25 - 121) < 0)
  {
    operator delete(*(void **)(v25 - 144));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AEFD974(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  _BYTE v9[16];
  void *__p;
  char v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  char v18;
  char v19;
  __int128 *v20;
  __int128 *v21;
  __int128 __dst;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  sub_20AEFD424();
  v4 = sub_20AED6ED4();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v23 = v4[2];
    __dst = v5;
  }
  sub_20AEC7620(&v20, (uint64_t)&__dst, 1uLL);
  sub_20AECF9B0(v9, a2);
  sub_20AECD798((uint64_t *)&xmmword_2546381D8, &v20, (uint64_t)v9, **a1);
  if (!v19 || !v18)
    goto LABEL_12;
  if (!v17)
    goto LABEL_9;
  if ((v16 & 0x80000000) == 0)
  {
    if ((v14 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_24:
    operator delete(v13);
    if (!v12)
      goto LABEL_12;
    goto LABEL_10;
  }
  operator delete(v15);
  if (v14 < 0)
    goto LABEL_24;
LABEL_9:
  if (!v12)
    goto LABEL_12;
LABEL_10:
  if (v11 < 0)
    operator delete(__p);
LABEL_12:
  v6 = v20;
  if (v20)
  {
    v7 = v21;
    v8 = v20;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*((void **)v7 - 3));
        v7 = (__int128 *)((char *)v7 - 24);
      }
      while (v7 != v6);
      v8 = v20;
    }
    v21 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__dst);
}

void sub_20AEFDAF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECDEE0((uint64_t)va);
  sub_20AEC2E90((void **)(v2 - 72));
  if (*(char *)(v2 - 25) < 0)
    operator delete(*(void **)(v2 - 48));
  _Unwind_Resume(a1);
}

uint64_t sub_20AEFDB2C(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_20AECEBD0(v4, v1 + 1);
    sub_20AECF558((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22C0, (void (*)(void *))sub_20AECF5A8);
  }
  return result;
}

void sub_20AEFDBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCE40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AEFDBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_20AECCE40((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_20AEFDBD8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20AEFDBEC(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  void **v8;
  void **v9;
  void *v10;
  _BYTE v11[16];
  void *__p;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  void *v22;
  void **v23;
  __int128 __dst;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  sub_20AEFD424();
  v4 = sub_20AEE888C();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v25 = v4[2];
    __dst = v5;
  }
  v6 = atomic_load((unsigned __int8 *)&qword_2546381A0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2546381A0))
  {
    unk_254638248 = 0x500000000000000;
    xmmword_254638238 = 0x266C6F6F62uLL;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638238, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546381A0);
  }
  if (byte_25463824F < 0)
  {
    sub_20AEC60F4(&v26, (void *)xmmword_254638238, *((unint64_t *)&xmmword_254638238 + 1));
  }
  else
  {
    v26 = xmmword_254638238;
    v27 = unk_254638248;
  }
  v7 = atomic_load((unsigned __int8 *)&qword_2546381A0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_2546381A0))
  {
    unk_254638248 = 0x500000000000000;
    xmmword_254638238 = 0x266C6F6F62uLL;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638238, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546381A0);
  }
  if (byte_25463824F < 0)
  {
    sub_20AEC60F4(&v28, (void *)xmmword_254638238, *((unint64_t *)&xmmword_254638238 + 1));
  }
  else
  {
    v28 = xmmword_254638238;
    v29 = unk_254638248;
  }
  sub_20AEC7620(&v22, (uint64_t)&__dst, 3uLL);
  sub_20AECF9B0(v11, a2);
  sub_20AECD798((uint64_t *)&xmmword_2546381D8, (__int128 **)&v22, (uint64_t)v11, **a1);
  if (v21 && v20)
  {
    if (!v19)
      goto LABEL_17;
    if (v18 < 0)
    {
      operator delete(v17);
      if ((v16 & 0x80000000) == 0)
      {
LABEL_17:
        if (!v14)
          goto LABEL_20;
LABEL_18:
        if (v13 < 0)
          operator delete(__p);
        goto LABEL_20;
      }
    }
    else if ((v16 & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(v15);
    if (!v14)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_20:
  v8 = (void **)v22;
  if (v22)
  {
    v9 = v23;
    v10 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = v22;
    }
    v23 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v29) < 0)
  {
    operator delete((void *)v28);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
    {
LABEL_30:
      if ((SHIBYTE(v25) & 0x80000000) == 0)
        return;
LABEL_34:
      operator delete((void *)__dst);
      return;
    }
  }
  else if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    goto LABEL_30;
  }
  operator delete((void *)v26);
  if (SHIBYTE(v25) < 0)
    goto LABEL_34;
}

void sub_20AEFDF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  while (1)
  {
    if (*(char *)(v26 - 1) < 0)
      operator delete(*(void **)(v26 - 24));
    v26 -= 24;
    if (v26 == v27 - 144)
      _Unwind_Resume(exception_object);
  }
}

void sub_20AEFDFAC(CFErrorRef ***a1, uint64_t a2)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  _BYTE v9[16];
  void *__p;
  char v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  char v18;
  char v19;
  __int128 *v20;
  __int128 *v21;
  __int128 __dst;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  sub_20AEFD424();
  v4 = sub_20AEED588();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v23 = *((_QWORD *)v4 + 2);
    __dst = v5;
  }
  sub_20AEC7620(&v20, (uint64_t)&__dst, 1uLL);
  sub_20AECF9B0(v9, a2);
  sub_20AECD798((uint64_t *)&xmmword_2546381D8, &v20, (uint64_t)v9, **a1);
  if (!v19 || !v18)
    goto LABEL_12;
  if (!v17)
    goto LABEL_9;
  if ((v16 & 0x80000000) == 0)
  {
    if ((v14 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_24:
    operator delete(v13);
    if (!v12)
      goto LABEL_12;
    goto LABEL_10;
  }
  operator delete(v15);
  if (v14 < 0)
    goto LABEL_24;
LABEL_9:
  if (!v12)
    goto LABEL_12;
LABEL_10:
  if (v11 < 0)
    operator delete(__p);
LABEL_12:
  v6 = v20;
  if (v20)
  {
    v7 = v21;
    v8 = v20;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*((void **)v7 - 3));
        v7 = (__int128 *)((char *)v7 - 24);
      }
      while (v7 != v6);
      v8 = v20;
    }
    v21 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__dst);
}

void sub_20AEFE128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AECDEE0((uint64_t)&a9);
  sub_20AEC2E90((void **)(v9 - 80));
  if (*(char *)(v9 - 25) < 0)
  {
    operator delete(*(void **)(v9 - 48));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20AEFE170(uint64_t a1)
{
  sub_20AEC833C(a1 + 16, *(char **)(a1 + 24));
  return a1;
}

void sub_20AEFE19C(uint64_t a1)
{
  sub_20AEC833C(a1 + 8, *(char **)(a1 + 16));
}

void sub_20AEFE1AC(uint64_t a1)
{
  sub_20AEC833C(a1 + 16, *(char **)(a1 + 24));
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AEFE1E8(uint64_t a1)
{
  sub_20AEC833C(a1 + 8, *(char **)(a1 + 16));
  JUMPOUT(0x20BD3583CLL);
}

uint64_t VZEnableStatesGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638258);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638258))
    return qword_254638250;
  qword_254638250 = sub_20AECB130();
  __cxa_guard_release(&qword_254638258);
  return qword_254638250;
}

_OWORD *VZEnableStatesCreate()
{
  _OWORD *result;
  uint64_t *v1;
  __int128 *v2;
  __int128 *v3;
  __int128 *v4;
  _BYTE v5[16];
  void *v6;
  char v7;
  char v8;
  void *v9;
  char v10;
  void *__p;
  char v12;
  char v13;
  char v14;
  char v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;

  result = operator new(0x30uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[1] = 0u;
    result[2] = 0u;
    *((_DWORD *)result + 10) = 1;
    *(_QWORD *)result = &off_24C3F3298;
    *((_QWORD *)result + 1) = &unk_24C3F32E8;
    *((_QWORD *)result + 2) = (char *)result + 24;
  }
  else
  {
    v1 = (uint64_t *)sub_20AEFF5B0();
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v5[0] = 0;
    v15 = 0;
    sub_20AECD798(v1, &v16, (uint64_t)v5, 0);
    if (v15 && v14)
    {
      if (v13)
      {
        if (v12 < 0)
          operator delete(__p);
        if (v10 < 0)
          operator delete(v9);
      }
      if (v8 && v7 < 0)
        operator delete(v6);
    }
    v2 = v16;
    if (v16)
    {
      v3 = v17;
      v4 = v16;
      if (v17 != v16)
      {
        do
        {
          if (*((char *)v3 - 1) < 0)
            operator delete(*((void **)v3 - 3));
          v3 = (__int128 *)((char *)v3 - 24);
        }
        while (v3 != v2);
        v4 = v16;
      }
      v17 = v2;
      operator delete(v4);
    }
    return 0;
  }
  return result;
}

uint64_t VZEnableStatesGetSize(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AEFE3FC((uint64_t)"VZEnableStatesGetSize", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(a1 + 32);
  return result;
}

BOOL sub_20AEFE3FC(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t *v6;
  __int128 v7;
  void *v9[2];
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  void *v16[2];
  uint64_t v17;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  char v32;
  char v33;
  char v34;

  if (!a2)
  {
    v6 = sub_20AEFF7AC();
    if (*((char *)v6 + 23) < 0)
    {
      sub_20AEC60F4(v9, (void *)*v6, v6[1]);
    }
    else
    {
      v7 = *(_OWORD *)v6;
      v10 = v6[2];
      *(_OWORD *)v9 = v7;
    }
    v11 = 1;
    sub_20AECCECC(a1, (uint64_t)v9, (uint64_t)&v12);
    v23 = v12;
    LOBYTE(v24) = 0;
    v33 = 0;
    if (v22)
    {
      v26 = 0;
      if (v15)
      {
        v24 = v13;
        v25 = v14;
        v14 = 0;
        v13 = 0uLL;
        v26 = 1;
      }
      LOBYTE(v27) = 0;
      v32 = 0;
      if (v21)
      {
        v28 = v17;
        v27 = *(_OWORD *)v16;
        v16[0] = 0;
        v16[1] = 0;
        v29 = v18;
        *(_OWORD *)__p = *(_OWORD *)v19;
        v31 = v20;
        v17 = 0;
        v19[0] = 0;
        v19[1] = 0;
        v20 = 0;
        v32 = 1;
      }
      v33 = 1;
    }
    v34 = 0;
    sub_20AECB410(&v23, a3);
    if (!v34 && v33)
    {
      if (v32)
      {
        if (SHIBYTE(v31) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v28) < 0)
          operator delete((void *)v27);
      }
      if (v26 && SHIBYTE(v25) < 0)
        operator delete((void *)v24);
    }
    if (v22)
    {
      if (v21)
      {
        if (SHIBYTE(v20) < 0)
          operator delete(v19[0]);
        if (SHIBYTE(v17) < 0)
          operator delete(v16[0]);
      }
      if (v15 && SHIBYTE(v14) < 0)
        operator delete((void *)v13);
    }
    if (v11 && SHIBYTE(v10) < 0)
      operator delete(v9[0]);
  }
  return a2 == 0;
}

void sub_20AEFE5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECD704((uint64_t)&a32);
  sub_20AECCE40((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL VZEnableStatesContainsKey(uint64_t a1, char *a2)
{
  return !sub_20AEFE3FC((uint64_t)"VZEnableStatesContainsKey", a1, 0)
      && !sub_20AEE3494((uint64_t)"VZEnableStatesContainsKey", (uint64_t)a2, 0)
      && sub_20AFAFA08(a1 + 16, a2);
}

uint64_t VZEnableStatesGet(uint64_t a1, char *a2)
{
  uint64_t v4;
  char v6[16];
  void *v7;
  char v8;
  char v9;
  void *v10;
  char v11;
  void *__p;
  char v13;
  char v14;
  char v15;
  char v16;

  if (sub_20AEFE3FC((uint64_t)"VZEnableStatesGet", a1, 0))
    return 255;
  if (sub_20AEE3494((uint64_t)"VZEnableStatesGet", (uint64_t)a2, 0))
    return 255;
  sub_20AFAFB04(a2, a1 + 16, (uint64_t)v6);
  v4 = sub_20AEFE7B4((uint64_t)"VZEnableStatesGet", v6, 255, 0);
  if (v16 || !v15)
    return v4;
  if (v14)
  {
    if (v13 < 0)
      operator delete(__p);
    if (v11 < 0)
      operator delete(v10);
  }
  if (!v9 || (v8 & 0x80000000) == 0)
    return v4;
  operator delete(v7);
  return v4;
}

void sub_20AEFE7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AEFE7B4(uint64_t a1, char *a2, uint64_t a3, CFErrorRef *a4)
{
  uint64_t v5;
  void *v8;
  char v9;
  __int128 v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  char v18;
  char v19;
  uint64_t v20;

  v20 = a1;
  if (a2[120])
    return *a2;
  v5 = a3;
  sub_20AEDBA04("in function ", (const char *)&v20);
  sub_20B529470(a2, &v8, (uint64_t)&v10);
  sub_20AECB410(&v10, a4);
  if (v19)
  {
    if (v18)
    {
      if (v17 < 0)
        operator delete(__p);
      if (v15 < 0)
        operator delete(v14);
    }
    if (v13)
    {
      if (v12 < 0)
        operator delete(v11);
    }
  }
  if ((v9 & 0x80000000) == 0)
    return v5;
  operator delete(v8);
  return v5;
}

void sub_20AEFE89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_20AECCE40((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t VZEnableStatesGetKeyAt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6[16];
  void *v7;
  char v8;
  char v9;
  void *v10;
  char v11;
  void *__p;
  char v13;
  char v14;
  char v15;
  char v16;

  v4 = 0;
  if (sub_20AEFE3FC((uint64_t)"VZEnableStatesGetKeyAt", a1, 0))
    return v4;
  sub_20AFAFF74(a1 + 16, a2, (uint64_t)v6);
  v4 = sub_20AEFCA68((uint64_t)"VZEnableStatesGetKeyAt", v6, 0, 0);
  if (v16 || !v15)
    return v4;
  if (v14)
  {
    if (v13 < 0)
      operator delete(__p);
    if (v11 < 0)
      operator delete(v10);
  }
  if (!v9 || (v8 & 0x80000000) == 0)
    return v4;
  operator delete(v7);
  return v4;
}

void sub_20AEFE9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t VZEnableStatesGetValueAt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6[16];
  void *v7;
  char v8;
  char v9;
  void *v10;
  char v11;
  void *__p;
  char v13;
  char v14;
  char v15;
  char v16;

  if (sub_20AEFE3FC((uint64_t)"VZEnableStatesGetValueAt", a1, 0))
    return 255;
  sub_20AFB0480(a1 + 16, a2, (uint64_t)v6);
  v4 = sub_20AEFE7B4((uint64_t)"VZEnableStatesGetValueAt", v6, 255, 0);
  if (v16 || !v15)
    return v4;
  if (v14)
  {
    if (v13 < 0)
      operator delete(__p);
    if (v11 < 0)
      operator delete(v10);
  }
  if (!v9 || (v8 & 0x80000000) == 0)
    return v4;
  operator delete(v7);
  return v4;
}

void sub_20AEFEA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t VZEnableStatesSet(uint64_t a1, char *a2, unsigned int a3)
{
  uint64_t v6;
  char v8[16];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  void *__p;
  char v15;
  char v16;
  char v17;
  char v18;

  if (sub_20AEFEBDC((uint64_t)"VZEnableStatesSet", a1))
    return 0;
  if (sub_20AEE3494((uint64_t)"VZEnableStatesSet", (uint64_t)a2, 0))
    return 0;
  sub_20AFB0730(a2, (uint64_t **)(a1 + 16), a3, (uint64_t)v8);
  v6 = sub_20AED98A0((uint64_t)"VZEnableStatesSet", v8, 0, 0);
  if (v18 || !v17)
    return v6;
  if (v16)
  {
    if (v15 < 0)
      operator delete(__p);
    if (v13 < 0)
      operator delete(v12);
  }
  if (!v11 || (v10 & 0x80000000) == 0)
    return v6;
  operator delete(v9);
  return v6;
}

void sub_20AEFEBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20AEFEBDC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  __int128 *v7;
  const void **v8;
  int v9;
  size_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  void *v16[2];
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  void *v23[2];
  uint64_t v24;
  uint64_t v25;
  void *v26[2];
  uint64_t v27;
  char v28;
  char v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  void *__p[2];
  uint64_t v38;
  char v39;
  char v40;
  char v41;

  if (a2)
    return a2 == 0;
  v4 = atomic_load((unsigned __int8 *)&qword_254638260);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254638260))
  {
    v7 = sub_20AEFF5B0();
    v8 = (const void **)v7;
    v9 = *((char *)v7 + 23);
    if (v9 >= 0)
      v10 = *((unsigned __int8 *)v7 + 23);
    else
      v10 = *((_QWORD *)v7 + 1);
    v11 = v10 + 1;
    if (v10 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v11 >= 0x17)
    {
      v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v13 = v11 | 7;
      v14 = v13 + 1;
      v12 = (__int128 *)operator new(v13 + 1);
      *((_QWORD *)&xmmword_254638268 + 1) = v10 + 1;
      unk_254638278 = v14 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638268 = v12;
    }
    else
    {
      unk_254638278 = 0;
      xmmword_254638268 = 0uLL;
      v12 = &xmmword_254638268;
      byte_25463827F = v10 + 1;
      if (!v10)
      {
LABEL_53:
        *(_WORD *)((char *)v12 + v10) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638268, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638260);
        goto LABEL_3;
      }
    }
    if (v9 >= 0)
      v15 = v8;
    else
      v15 = *v8;
    memmove(v12, v15, v10);
    goto LABEL_53;
  }
LABEL_3:
  if (byte_25463827F < 0)
  {
    sub_20AEC60F4(v16, (void *)xmmword_254638268, *((unint64_t *)&xmmword_254638268 + 1));
  }
  else
  {
    *(_OWORD *)v16 = xmmword_254638268;
    v17 = unk_254638278;
  }
  v18 = 1;
  sub_20AECCECC(a1, (uint64_t)v16, (uint64_t)&v19);
  v30 = v19;
  LOBYTE(v31) = 0;
  v40 = 0;
  if (v29)
  {
    v33 = 0;
    if (v22)
    {
      v31 = v20;
      v32 = v21;
      v21 = 0;
      v20 = 0uLL;
      v33 = 1;
    }
    LOBYTE(v34) = 0;
    v39 = 0;
    if (v28)
    {
      v35 = v24;
      v34 = *(_OWORD *)v23;
      v23[0] = 0;
      v23[1] = 0;
      v36 = v25;
      *(_OWORD *)__p = *(_OWORD *)v26;
      v38 = v27;
      v24 = 0;
      v26[0] = 0;
      v26[1] = 0;
      v27 = 0;
      v39 = 1;
    }
    v40 = 1;
  }
  v41 = 0;
  v5 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v30);
  if (!v41 && v40)
  {
    if (v39)
    {
      if (SHIBYTE(v38) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v35) < 0)
        operator delete((void *)v34);
    }
    if (v33 && SHIBYTE(v32) < 0)
      operator delete((void *)v31);
  }
  if (v29)
  {
    if (v28)
    {
      if (SHIBYTE(v27) < 0)
        operator delete(v26[0]);
      if (SHIBYTE(v24) < 0)
        operator delete(v23[0]);
    }
    if (v22 && SHIBYTE(v21) < 0)
      operator delete((void *)v20);
  }
  if (v18 && SHIBYTE(v17) < 0)
    operator delete(v16[0]);
  return a2 == 0;
}

void sub_20AEFEF48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638260);
  _Unwind_Resume(a1);
}

void sub_20AEFEF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL VZEnableStatesRemove(uint64_t a1, char *a2)
{
  return !sub_20AEFEBDC((uint64_t)"VZEnableStatesRemove", a1)
      && !sub_20AEE3494((uint64_t)"VZEnableStatesRemove", (uint64_t)a2, 0)
      && sub_20AFB0990((uint64_t **)(a1 + 16), a2);
}

uint64_t sub_20AEFEFE8(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 40);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AEFF000(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 40);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AEFF028()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638258);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638258))
    return qword_254638250;
  qword_254638250 = sub_20AECB130();
  __cxa_guard_release(&qword_254638258);
  return qword_254638250;
}

uint64_t sub_20AEFF088(_QWORD *a1, void *lpsrc)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const void **v11;
  unsigned __int8 *v12;
  _BOOL4 v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F3330, 0);
  if (result)
  {
    if (a1[4] == *(_QWORD *)(result + 32))
    {
      v4 = (_QWORD *)a1[2];
      v5 = a1 + 3;
      if (v4 == v5)
      {
        return 1;
      }
      else
      {
        v6 = *(_QWORD **)(result + 16);
        while (1)
        {
          v7 = *((unsigned __int8 *)v4 + 55);
          if ((v7 & 0x80u) == 0)
            v8 = *((unsigned __int8 *)v4 + 55);
          else
            v8 = v4[5];
          v9 = *((unsigned __int8 *)v6 + 55);
          v10 = (char)v9;
          if ((v9 & 0x80u) != 0)
            v9 = v6[5];
          if (v8 != v9)
            return 0;
          v11 = (const void **)(v4 + 4);
          if (v10 >= 0)
            v12 = (unsigned __int8 *)(v6 + 4);
          else
            v12 = (unsigned __int8 *)v6[4];
          if ((v7 & 0x80) != 0)
          {
            v13 = memcmp(*v11, v12, v4[5]) == 0;
            result = 0;
            if (!v13)
              return result;
          }
          else
          {
            if (*((_BYTE *)v4 + 55))
            {
              while (*(unsigned __int8 *)v11 == *v12)
              {
                v11 = (const void **)((char *)v11 + 1);
                ++v12;
                if (!--v7)
                  goto LABEL_18;
              }
              return 0;
            }
LABEL_18:
            result = 0;
          }
          if (*((unsigned __int8 *)v4 + 56) == *((unsigned __int8 *)v6 + 56))
          {
            v14 = (_QWORD *)v4[1];
            v15 = v4;
            if (v14)
            {
              do
              {
                v4 = v14;
                v14 = (_QWORD *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                v4 = (_QWORD *)v15[2];
                v16 = *v4 == (_QWORD)v15;
                v15 = v4;
              }
              while (!v16);
            }
            v17 = (_QWORD *)v6[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v6[2];
                v16 = *v18 == (_QWORD)v6;
                v6 = v18;
              }
              while (!v16);
            }
            result = 1;
            v6 = v18;
            if (v4 != v5)
              continue;
          }
          return result;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFTypeRef sub_20AEFF234(uint64_t a1)
{
  __int128 *v2;
  uint64_t v3;
  int v4;
  size_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  char v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  void *__dst[2];
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char v30;

  v2 = sub_20AEFF5B0();
  v27 = a1;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_20AEC0BD8(v3);
  v28 = (_QWORD *)v3;
  v29 = (_QWORD *)(v3 + 16);
  sub_20AFB0E24((uint64_t)&v30, &v29, (_QWORD *)(a1 + 16));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(v3 + 112);
    v8 = *(_QWORD *)(v3 + 72);
    if (v7 < v8)
    {
      *(_QWORD *)(v3 + 112) = v8;
      v7 = v8;
    }
    v9 = *(const void **)(v3 + 64);
    v5 = v7 - (_QWORD)v9;
    if (v7 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v4 & 8) == 0)
    {
      v5 = 0;
      HIBYTE(v26) = 0;
      v6 = __dst;
      goto LABEL_14;
    }
    v9 = *(const void **)(v3 + 40);
    v5 = *(_QWORD *)(v3 + 56) - (_QWORD)v9;
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v6 = (void **)operator new(v10 + 1);
    __dst[1] = (void *)v5;
    v26 = v11 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_13;
  }
  HIBYTE(v26) = v5;
  v6 = __dst;
  if (v5)
LABEL_13:
    memmove(v6, v9, v5);
LABEL_14:
  *((_BYTE *)v6 + v5) = 0;
  v12 = v28;
  if (v28)
  {
    v13 = MEMORY[0x24BEDB7F0];
    v14 = *MEMORY[0x24BEDB7F0];
    *v28 = *MEMORY[0x24BEDB7F0];
    v15 = *(_QWORD *)(v13 + 72);
    *(_QWORD *)((char *)v12 + *(_QWORD *)(v14 - 24)) = *(_QWORD *)(v13 + 64);
    v12[3] = MEMORY[0x24BEDB848] + 16;
    v12[2] = v15;
    if (*((char *)v12 + 111) < 0)
      operator delete((void *)v12[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v12 + 16);
    MEMORY[0x20BD3583C](v12, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)v2, (uint64_t)" ", &v27, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v16 = cf;
  if (cf)
    CFRetain(cf);
  v17 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if ((v22 & 0x80000000) == 0)
        return v16;
      goto LABEL_27;
    }
  }
  if (v22 < 0)
LABEL_27:
    operator delete(__p);
  return v16;
}

void sub_20AEFF4E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  __int128 *v25;

  sub_20AEC147C((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  v25 = sub_20AEFF5B0();
  sub_20AEC0D64(&__p, "failed to create description");
  sub_20AECD224((std::string::size_type)v25, (const void **)&__p, 0);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20AEFF4C4);
}

uint64_t sub_20AEFF5A4(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 40));
}

__int128 *sub_20AEFF5B0()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630DF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630DF8))
    return &xmmword_254630DE0;
  v2 = (char *)sub_20AEFF68C();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254630DE0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254630DF0 = *((_QWORD *)v2 + 2);
    xmmword_254630DE0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630DE0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630DF8);
  return &xmmword_254630DE0;
}

void sub_20AEFF674(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630DF8);
  _Unwind_Resume(a1);
}

void *sub_20AEFF68C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254630E18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630E18))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZEnableStates]", qword_254630E00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630E00, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630E18);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254630E38);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254630E38))
    return &unk_254630E20;
  sub_20B531658((uint64_t)qword_254630E00, (uint64_t)&unk_254630E20);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254630E20, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630E38);
  return &unk_254630E20;
}

void sub_20AEFF77C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630E38);
  _Unwind_Resume(a1);
}

void sub_20AEFF794(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630E18);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AEFF7AC()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630E58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630E58))
  {
    v2 = sub_20AEFF8F0();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v7 = &qword_254630E40;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254630E48 = v5 + 1;
      unk_254630E50 = v9 | 0x8000000000000000;
      qword_254630E40 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254630E48 = 0;
      unk_254630E50 = 0;
      qword_254630E40 = 0;
      byte_254630E57 = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630E40, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630E58);
        return &qword_254630E40;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630E40;
}

void sub_20AEFF8D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630E58);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AEFF8F0()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630E78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630E78))
  {
    v2 = sub_20AEFF5B0();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254630E68 = v5 + 6;
      unk_254630E70 = v9 | 0x8000000000000000;
      qword_254630E60 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254630E68 = 0;
      unk_254630E70 = 0;
      qword_254630E60 = 0x2074736E6F63;
      byte_254630E77 = v5 + 6;
      v7 = (char *)&qword_254630E60 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630E60, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630E78);
        return &qword_254630E60;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630E60;
}

void sub_20AEFFA50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630E78);
  _Unwind_Resume(a1);
}

void VZErrorSetGlobalErrorHandler(const void *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  if (a1)
  {
    v2 = (std::__shared_weak_count *)operator new(0x20uLL);
    v2->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    v2->__shared_weak_owners_ = 0;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F3390;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a1);
    v5 = v2 + 1;
    v6 = v2;
    sub_20AECB2BC((uint64_t *)&v5);
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
    sub_20AECB2BC((uint64_t *)&v5);
  }
}

void sub_20AEFFB34(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void VZErrorEnableLogging()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  std::mutex::lock(&stru_254630218);
  byte_2546301E9 = 1;
  std::mutex::unlock(&stru_254630218);
}

void VZErrorDisableLogging()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  std::mutex::lock(&stru_254630218);
  byte_2546301E9 = 0;
  std::mutex::unlock(&stru_254630218);
}

void sub_20AEFFC44(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F3390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20AEFFC54(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F3390;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AEFFC84(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

uint64_t sub_20AEFFCA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v7;

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 24);
      v4 = *(void **)(a1 + 16);
      if (v3 != v2)
      {
        do
        {
          if (*(_BYTE *)(v3 - 8))
          {
            v5 = *(unsigned int *)(v3 - 16);
            if ((_DWORD)v5 != -1)
              ((void (*)(char *, uint64_t))off_24C3F3698[v5])(&v7, v3 - 48);
            *(_DWORD *)(v3 - 16) = -1;
          }
          *(_QWORD *)(v3 - 816) = &off_24C411BF8;
          sub_20B07AE6C(v3 - 800);
          v3 -= 816;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 24) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_20AEFFD78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v6;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 16);
      v4 = *(void **)(a1 + 8);
      if (v3 != v2)
      {
        do
        {
          if (*(_BYTE *)(v3 - 8))
          {
            v5 = *(unsigned int *)(v3 - 16);
            if ((_DWORD)v5 != -1)
              ((void (*)(char *, uint64_t))off_24C3F3698[v5])(&v6, v3 - 48);
            *(_DWORD *)(v3 - 16) = -1;
          }
          *(_QWORD *)(v3 - 816) = &off_24C411BF8;
          sub_20B07AE6C(v3 - 800);
          v3 -= 816;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 8);
      }
      *(_QWORD *)(a1 + 16) = v2;
      operator delete(v4);
    }
  }
}

uint64_t sub_20AEFFE44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v7;

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 24);
      v4 = *(void **)(a1 + 16);
      if (v3 != v2)
      {
        do
        {
          if (*(_BYTE *)(v3 - 8))
          {
            v5 = *(unsigned int *)(v3 - 16);
            if ((_DWORD)v5 != -1)
              ((void (*)(char *, uint64_t))off_24C3F3698[v5])(&v7, v3 - 48);
            *(_DWORD *)(v3 - 16) = -1;
          }
          *(_QWORD *)(v3 - 816) = &off_24C411BF8;
          sub_20B07AE6C(v3 - 800);
          v3 -= 816;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 24) = v2;
      operator delete(v4);
    }
  }
  return MEMORY[0x20BD3583C](a1, 0x10A3C402FDDA82CLL);
}

uint64_t sub_20AEFFF28(uint64_t a1)
{
  return sub_20AEFFE44(a1 - 8);
}

uint64_t sub_20AEFFF30(uint64_t a1)
{
  sub_20AF04770(a1 + 8);
  return a1;
}

void sub_20AEFFF5C(uint64_t a1)
{
  sub_20AF04770(a1 + 8);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AEFFF94(uint64_t a1)
{
  sub_20AF04770(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AEFFFC8(uint64_t a1)
{
  sub_20AFF0E38(a1 + 8);
  return a1;
}

void sub_20AEFFFF4(uint64_t a1)
{
  sub_20AFF0E38(a1 + 8);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AF0002C(uint64_t a1)
{
  sub_20AFF0E38(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t VZFileExportOptionsGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638288);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638288))
    return qword_254638280;
  qword_254638280 = sub_20AECB130();
  __cxa_guard_release(&qword_254638288);
  return qword_254638280;
}

_OWORD *VZFileExportOptionsCreate()
{
  _OWORD *result;
  __int128 *v1;
  __int128 *v2;
  __int128 *v3;
  _BYTE v4[16];
  void *v5;
  char v6;
  char v7;
  void *v8;
  char v9;
  void *__p;
  char v11;
  char v12;
  char v13;
  char v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;

  result = operator new(0x58uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[3] = 0u;
    result[4] = 0u;
    *((_QWORD *)result + 10) = 0;
    result[1] = 0u;
    result[2] = 0u;
    *((_QWORD *)result + 6) = 1000;
    *((_BYTE *)result + 56) = 1;
    *((_BYTE *)result + 64) = 1;
    *((_DWORD *)result + 20) = 1;
    *(_QWORD *)result = off_24C3F33E0;
    *((_QWORD *)result + 1) = &unk_24C3F3430;
  }
  else
  {
    sub_20AF04B34();
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v4[0] = 0;
    v14 = 0;
    sub_20AECD798((uint64_t *)&xmmword_2546383E0, &v15, (uint64_t)v4, 0);
    if (v14 && v13)
    {
      if (v12)
      {
        if (v11 < 0)
          operator delete(__p);
        if (v9 < 0)
          operator delete(v8);
      }
      if (v7 && v6 < 0)
        operator delete(v5);
    }
    v1 = v15;
    if (v15)
    {
      v2 = v16;
      v3 = v15;
      if (v16 != v15)
      {
        do
        {
          if (*((char *)v2 - 1) < 0)
            operator delete(*((void **)v2 - 3));
          v2 = (__int128 *)((char *)v2 - 24);
        }
        while (v2 != v1);
        v3 = v15;
      }
      v16 = v1;
      operator delete(v3);
    }
    return 0;
  }
  return result;
}

BOOL VZFileExportOptionsSetAsyncQueueMaxElementCount(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_20AF00278((uint64_t)"VZFileExportOptionsSetAsyncQueueMaxElementCount", a1);
  if (!result)
  {
    if (a2)
    {
      if (!*(_BYTE *)(a1 + 64))
      {
        *(_QWORD *)(a1 + 56) = 0;
        *(_BYTE *)(a1 + 64) = 1;
      }
      *(_QWORD *)(a1 + 48) = a2;
      *(_BYTE *)(a1 + 56) = 1;
    }
    else if (*(_BYTE *)(a1 + 64))
    {
      *(_BYTE *)(a1 + 64) = 0;
    }
  }
  return result;
}

BOOL sub_20AF00278(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v7;
  size_t v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  char v37;
  char v38;
  char v39;

  if (a2)
    return a2 == 0;
  v4 = atomic_load((unsigned __int8 *)&qword_2546382A8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546382A8))
  {
    sub_20AF04B34();
    v7 = byte_2546383F7;
    if (byte_2546383F7 >= 0)
      v8 = byte_2546383F7;
    else
      v8 = *((_QWORD *)&xmmword_2546383E0 + 1);
    v9 = v8 + 1;
    if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v9 >= 0x17)
    {
      v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v11 = v9 | 7;
      v12 = v11 + 1;
      v10 = (__int128 *)operator new(v11 + 1);
      *((_QWORD *)&xmmword_254638428 + 1) = v8 + 1;
      unk_254638438 = v12 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638428 = v10;
    }
    else
    {
      unk_254638438 = 0;
      xmmword_254638428 = 0uLL;
      v10 = &xmmword_254638428;
      byte_25463843F = v8 + 1;
      if (!v8)
      {
LABEL_53:
        *(_WORD *)((char *)v10 + v8) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638428, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546382A8);
        goto LABEL_3;
      }
    }
    if (v7 >= 0)
      v13 = &xmmword_2546383E0;
    else
      v13 = (__int128 *)xmmword_2546383E0;
    memmove(v10, v13, v8);
    goto LABEL_53;
  }
LABEL_3:
  if (byte_25463843F < 0)
  {
    sub_20AEC60F4(v14, (void *)xmmword_254638428, *((unint64_t *)&xmmword_254638428 + 1));
  }
  else
  {
    *(_OWORD *)v14 = xmmword_254638428;
    v15 = unk_254638438;
  }
  v16 = 1;
  sub_20AECCECC(a1, (uint64_t)v14, (uint64_t)&v17);
  v28 = v17;
  LOBYTE(v29) = 0;
  v38 = 0;
  if (v27)
  {
    v31 = 0;
    if (v20)
    {
      v29 = v18;
      v30 = v19;
      v19 = 0;
      v18 = 0uLL;
      v31 = 1;
    }
    LOBYTE(v32) = 0;
    v37 = 0;
    if (v26)
    {
      v33 = v22;
      v32 = *(_OWORD *)v21;
      v21[0] = 0;
      v21[1] = 0;
      v34 = v23;
      *(_OWORD *)__p = *(_OWORD *)v24;
      v36 = v25;
      v22 = 0;
      v24[0] = 0;
      v24[1] = 0;
      v25 = 0;
      v37 = 1;
    }
    v38 = 1;
  }
  v39 = 0;
  v5 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v28);
  if (!v39 && v38)
  {
    if (v37)
    {
      if (SHIBYTE(v36) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
    }
    if (v31 && SHIBYTE(v30) < 0)
      operator delete((void *)v29);
  }
  if (v27)
  {
    if (v26)
    {
      if (SHIBYTE(v25) < 0)
        operator delete(v24[0]);
      if (SHIBYTE(v22) < 0)
        operator delete(v21[0]);
    }
    if (v20 && SHIBYTE(v19) < 0)
      operator delete((void *)v18);
  }
  if (v16 && SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  return a2 == 0;
}

void sub_20AF005EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546382A8);
  _Unwind_Resume(a1);
}

void sub_20AF00604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VZFileExportOptionsSetFileExportBehavior(uint64_t a1, unint64_t a2)
{
  unsigned __int8 v4;
  __int128 v5;
  void *v6;
  char v7;
  char v8;
  void *v9;
  char v10;
  void *__p;
  char v12;
  char v13;
  char v14;
  char v15;

  if (!sub_20AF00278((uint64_t)"VZFileExportOptionsSetFileExportBehavior", a1))
  {
    sub_20AFEDA10(a1 + 16, a2, (uint64_t)&v5);
    if (!v15)
    {
      v4 = atomic_load((unsigned __int8 *)&qword_254630258);
      if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
      {
        __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630258);
      }
      sub_20AECB50C((uint64_t)&unk_254630168, &v5);
      if (!v15 && v14)
      {
        if (v13)
        {
          if (v12 < 0)
            operator delete(__p);
          if (v10 < 0)
            operator delete(v9);
        }
        if (v8)
        {
          if (v7 < 0)
            operator delete(v6);
        }
      }
    }
  }
}

void VZFileExportOptionsAddFilteredStoragePreference(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned __int8 v6;
  void *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  int v10;
  size_t v11;
  unint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  void *v24[2];
  uint64_t v25;
  uint64_t v26;
  void *v27[2];
  uint64_t v28;
  char v29;
  char v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  void *__p[2];
  uint64_t v39;
  char v40;
  char v41;
  char v42;

  if (sub_20AF00278((uint64_t)"VZFileExportOptionsAddFilteredStoragePreference", a1))
    return;
  if (a2)
  {
    sub_20AFEDC80(a1 + 16, a2 + 16, a3, (uint64_t)&v31);
    if (!v42)
    {
      v6 = atomic_load((unsigned __int8 *)&qword_254630258);
      if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
      {
        __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630258);
      }
      sub_20AECB50C((uint64_t)&unk_254630168, &v31);
      if (!v42 && v41)
      {
        if (v40)
        {
          if (SHIBYTE(v39) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v36) < 0)
            operator delete((void *)v35);
        }
        if (v34 && SHIBYTE(v33) < 0)
        {
          v7 = (void *)v32;
LABEL_48:
          operator delete(v7);
          return;
        }
      }
    }
    return;
  }
  v8 = atomic_load((unsigned __int8 *)&qword_2546382B0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2546382B0))
  {
    sub_20AF04CEC();
    v10 = byte_25463846F;
    if (byte_25463846F >= 0)
      v11 = byte_25463846F;
    else
      v11 = qword_254638460;
    v12 = v11 + 1;
    if (v11 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v12 >= 0x17)
    {
      v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v14 = v12 | 7;
      v15 = v14 + 1;
      v13 = (__int128 *)operator new(v14 + 1);
      *((_QWORD *)&xmmword_254638440 + 1) = v11 + 1;
      unk_254638450 = v15 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638440 = v13;
    }
    else
    {
      unk_254638450 = 0;
      xmmword_254638440 = 0uLL;
      v13 = &xmmword_254638440;
      byte_254638457 = v11 + 1;
      if (!v11)
      {
LABEL_69:
        *(_WORD *)((char *)v13 + v11) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638440, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546382B0);
        goto LABEL_16;
      }
    }
    if (v10 >= 0)
      v16 = &qword_254638458;
    else
      v16 = (uint64_t *)qword_254638458;
    memmove(v13, v16, v11);
    goto LABEL_69;
  }
LABEL_16:
  if (byte_254638457 < 0)
  {
    sub_20AEC60F4(v17, (void *)xmmword_254638440, *((unint64_t *)&xmmword_254638440 + 1));
  }
  else
  {
    *(_OWORD *)v17 = xmmword_254638440;
    v18 = unk_254638450;
  }
  v19 = 1;
  sub_20AECCECC((uint64_t)"VZFileExportOptionsAddFilteredStoragePreference", (uint64_t)v17, (uint64_t)&v20);
  v31 = v20;
  LOBYTE(v32) = 0;
  v41 = 0;
  if (v30)
  {
    v34 = 0;
    if (v23)
    {
      v32 = v21;
      v33 = v22;
      v22 = 0;
      v21 = 0uLL;
      v34 = 1;
    }
    LOBYTE(v35) = 0;
    v40 = 0;
    if (v29)
    {
      v36 = v25;
      v35 = *(_OWORD *)v24;
      v24[0] = 0;
      v24[1] = 0;
      v37 = v26;
      *(_OWORD *)__p = *(_OWORD *)v27;
      v39 = v28;
      v25 = 0;
      v27[0] = 0;
      v27[1] = 0;
      v28 = 0;
      v40 = 1;
    }
    v41 = 1;
  }
  v42 = 0;
  v9 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v31);
  if (!v42 && v41)
  {
    if (v40)
    {
      if (SHIBYTE(v39) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v36) < 0)
        operator delete((void *)v35);
    }
    if (v34 && SHIBYTE(v33) < 0)
      operator delete((void *)v32);
  }
  if (v30)
  {
    if (v29)
    {
      if (SHIBYTE(v28) < 0)
        operator delete(v27[0]);
      if (SHIBYTE(v25) < 0)
        operator delete(v24[0]);
    }
    if (v23 && SHIBYTE(v22) < 0)
      operator delete((void *)v21);
  }
  if (v19 && SHIBYTE(v18) < 0)
  {
    v7 = v17[0];
    goto LABEL_48;
  }
}

void sub_20AF00B80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546382B0);
  _Unwind_Resume(a1);
}

void sub_20AF00B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *VZDestinationCreateWithFileExporter(char *a1, uint64_t a2, CFErrorRef *a3)
{
  _OWORD *v6;
  __int128 v7;
  char *v8;
  _QWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  _DWORD *v20;
  _DWORD *v21;
  void *v22;
  uint64_t v23;
  void *v25[2];
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  char v30;
  char v31[168];
  void *v32[2];
  void *v33;
  char v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  char v40;
  char v41;
  char v42;
  void *__p[2];
  uint64_t v44;
  char v45;
  __int128 v46;
  __int128 v47;
  char v48;
  __int128 v49;
  __int128 v50[6];
  char v51;
  CFErrorRef **v52;
  CFErrorRef *v53;
  _QWORD v54[3];
  _QWORD *v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (sub_20AEE3494((uint64_t)"VZDestinationCreateWithFileExporter", (uint64_t)a1, a3))
    return 0;
  if (a2)
  {
    sub_20AF05070((uint64_t)v25, a2 + 16);
    v7 = *(_OWORD *)(a2 + 64);
    v28 = *(_OWORD *)(a2 + 48);
    v29 = v7;
    v30 = 1;
  }
  else
  {
    LOBYTE(v25[0]) = 0;
    v30 = 0;
  }
  v52 = &v53;
  v53 = a3;
  v32[0] = 0;
  v32[1] = 0;
  v8 = a1 - 1;
  v33 = 0;
  while (*++v8)
    ;
  sub_20AF08074((unint64_t)v32, a1, v8);
  LOBYTE(__p[0]) = 0;
  v48 = 0;
  if (v30)
  {
    v45 = 0;
    if (v27)
    {
      *(_OWORD *)__p = *(_OWORD *)v25;
      v44 = v26;
      v25[1] = 0;
      v26 = 0;
      v25[0] = 0;
      v45 = 1;
    }
    v46 = v28;
    v47 = v29;
    v48 = 1;
  }
  v54[0] = &off_24C3F2898;
  v54[1] = sub_20AEDD8BC;
  v55 = v54;
  v56 = 1;
  sub_20AFEE588((uint64_t)v32, (uint64_t)__p, (uint64_t)v54, 0, 0, (uint64_t)&v49);
  if (v56)
  {
    v10 = v55;
    if (v55 == v54)
    {
      v11 = 4;
      v10 = v54;
      goto LABEL_17;
    }
    if (v55)
    {
      v11 = 5;
LABEL_17:
      (*(void (**)(void))(*v10 + 8 * v11))();
    }
  }
  if (v48)
  {
    if (v45)
    {
      v12 = __p[0];
      if (__p[0])
      {
        v13 = __p[1];
        v14 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((_BYTE *)v13 - 8))
            {
              v15 = *(v13 - 4);
              if ((_DWORD)v15 != -1)
                ((void (*)(char *, _DWORD *))off_24C3F3698[v15])(v31, v13 - 12);
              *(v13 - 4) = -1;
            }
            *((_QWORD *)v13 - 102) = &off_24C411BF8;
            sub_20B07AE6C((uint64_t)(v13 - 200));
            v13 -= 204;
          }
          while (v13 != v12);
          v14 = __p[0];
        }
        __p[1] = v12;
        operator delete(v14);
      }
    }
  }
  if (SHIBYTE(v33) < 0)
  {
    operator delete(v32[0]);
    if (v51)
      goto LABEL_32;
  }
  else if (v51)
  {
LABEL_32:
    v16 = sub_20AEE18DC((uint64_t)&v49);
    v17 = operator new(0x38uLL, MEMORY[0x24BEDB6B8]);
    v6 = v17;
    if (v17)
    {
      v18 = *(_OWORD *)v16;
      v19 = *(_OWORD *)(v16 + 16);
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0;
      v17[1] = v18;
      v17[2] = v19;
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)(v16 + 24) = 0;
      *((_DWORD *)v17 + 12) = 1;
      *(_QWORD *)v17 = &off_24C3F2D90;
      *((_QWORD *)v17 + 1) = &unk_24C3F2DE0;
      goto LABEL_34;
    }
    LOBYTE(v32[0]) = 0;
    v42 = 0;
    sub_20AF06AA0(&v52, (uint64_t)v32);
    if (!v42 || !v41)
      goto LABEL_34;
    if (v40)
    {
      if (v39 < 0)
        operator delete(v38);
      if (v37 < 0)
        operator delete(v36);
    }
    if (!v35 || (v34 & 0x80000000) == 0)
    {
LABEL_34:
      sub_20AEE199C((uint64_t)&v49);
      if (!v30)
        return v6;
      goto LABEL_48;
    }
    operator delete(v33);
    sub_20AEE199C((uint64_t)&v49);
    if (!v30)
      return v6;
LABEL_48:
    if (v27)
    {
      v20 = v25[0];
      if (v25[0])
      {
        v21 = v25[1];
        v22 = v25[0];
        if (v25[1] != v25[0])
        {
          do
          {
            if (*((_BYTE *)v21 - 8))
            {
              v23 = *(v21 - 4);
              if ((_DWORD)v23 != -1)
                ((void (*)(__int128 *, _DWORD *))off_24C3F3698[v23])(&v49, v21 - 12);
              *(v21 - 4) = -1;
            }
            *((_QWORD *)v21 - 102) = &off_24C411BF8;
            sub_20B07AE6C((uint64_t)(v21 - 200));
            v21 -= 204;
          }
          while (v21 != v20);
          v22 = v25[0];
        }
        v25[1] = v20;
        operator delete(v22);
      }
    }
    return v6;
  }
  *(_OWORD *)v32 = v49;
  sub_20AECEBD0(&v33, v50);
  v42 = 1;
  sub_20AF06AA0(&v52, (uint64_t)v32);
  if (v42 && v41)
  {
    if (v40)
    {
      if (v39 < 0)
        operator delete(v38);
      if (v37 < 0)
        operator delete(v36);
    }
    if (v35 && v34 < 0)
      operator delete(v33);
  }
  sub_20AEE199C((uint64_t)&v49);
  v6 = 0;
  if (v30)
    goto LABEL_48;
  return v6;
}

void sub_20AF01010(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::logic_error a20,int a21,__int16 a22,char a23,char a24,char a25,__int128 a26,__int128 a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,uint64_t a47,void *a48)
{
  uint64_t v48;
  const std::logic_error *exception_ptr;
  void *v52;
  _QWORD *v53;

  if (a2)
  {
    sub_20AECDEE0((uint64_t)&a48);
    sub_20AEE199C(v48 - 256);
    if (a2 == 3)
    {
      exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
      std::logic_error::logic_error(&a20, exception_ptr);
      a20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_begin_catch(a1);
      a19 = (uint64_t)std::logic_error::what(&a20);
      sub_20AED4C84(&__p, (const char **)&a19);
      sub_20B099E24((__int128 *)&__p, (uint64_t)&a26);
      *(_OWORD *)(v48 - 256) = a26;
      sub_20AECEBD0((_BYTE *)(v48 - 240), &a27);
      *(_BYTE *)(v48 - 136) = 1;
      sub_20AF06AA0((CFErrorRef ***)(v48 - 128), v48 - 256);
      sub_20AECDEE0(v48 - 256);
      sub_20AECCE40((uint64_t)&a26);
      if (a45)
      {
        if (a44 < 0)
          operator delete(__p);
      }
      MEMORY[0x20BD35020](&a20);
      __cxa_end_catch();
    }
    else if (a2 == 2)
    {
      v52 = __cxa_get_exception_ptr(a1);
      sub_20AED4C1C((std::runtime_error *)&__p, (uint64_t)v52);
      __cxa_begin_catch(a1);
      v53 = (_QWORD *)(a46 + 48);
      if (*(char *)(a46 + 71) < 0)
        v53 = (_QWORD *)*v53;
      a19 = (uint64_t)v53;
      sub_20AED4C84(&a20, (const char **)&a19);
      sub_20B09A738((__int128 *)&a20, (uint64_t)&a26);
      *(_OWORD *)(v48 - 256) = a26;
      sub_20AECEBD0((_BYTE *)(v48 - 240), &a27);
      *(_BYTE *)(v48 - 136) = 1;
      sub_20AF06AA0((CFErrorRef ***)(v48 - 128), v48 - 256);
      sub_20AECDEE0(v48 - 256);
      sub_20AECCE40((uint64_t)&a26);
      if (a25 && a24 < 0)
        operator delete(a20.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__p);
      __cxa_end_catch();
    }
    else
    {
      __cxa_begin_catch(a1);
      *(_BYTE *)(v48 - 256) = 0;
      *(_BYTE *)(v48 - 136) = 0;
      sub_20AF06AA0((CFErrorRef ***)(v48 - 128), v48 - 256);
      sub_20AECDEE0(v48 - 256);
      __cxa_end_catch();
    }
    JUMPOUT(0x20AF00EC4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20AF012C4(uint64_t a1)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  char v7;

  if (*(_BYTE *)(a1 + 64))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v2 = *(_DWORD **)a1;
      if (*(_QWORD *)a1)
      {
        v3 = *(_DWORD **)(a1 + 8);
        v4 = *(_DWORD **)a1;
        if (v3 != v2)
        {
          do
          {
            if (*((_BYTE *)v3 - 8))
            {
              v5 = *(v3 - 4);
              if ((_DWORD)v5 != -1)
                ((void (*)(char *, _DWORD *))off_24C3F3698[v5])(&v7, v3 - 12);
              *(v3 - 4) = -1;
            }
            *((_QWORD *)v3 - 102) = &off_24C411BF8;
            sub_20B07AE6C((uint64_t)(v3 - 200));
            v3 -= 204;
          }
          while (v3 != v2);
          v4 = *(_DWORD **)a1;
        }
        *(_QWORD *)(a1 + 8) = v2;
        operator delete(v4);
      }
    }
  }
  return a1;
}

uint64_t VZFileImportOptionsGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546382F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546382F0))
    return qword_2546382E8;
  qword_2546382E8 = sub_20AECB130();
  __cxa_guard_release(&qword_2546382F0);
  return qword_2546382E8;
}

_QWORD *VZFileImportOptionsCreate()
{
  _QWORD *result;
  __int128 *v1;
  __int128 *v2;
  __int128 *v3;
  _BYTE v4[16];
  void *v5;
  char v6;
  char v7;
  void *v8;
  char v9;
  void *__p;
  char v11;
  char v12;
  char v13;
  char v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;

  result = operator new(0x58uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[10] = 0;
    *((_OWORD *)result + 3) = 0u;
    *((_OWORD *)result + 4) = 0u;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((_DWORD *)result + 20) = 1;
    *result = &off_24C3F34D8;
    result[1] = &unk_24C3F3528;
  }
  else
  {
    sub_20AF072B0();
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v4[0] = 0;
    v14 = 0;
    sub_20AECD798((uint64_t *)&xmmword_2546384E8, &v15, (uint64_t)v4, 0);
    if (v14 && v13)
    {
      if (v12)
      {
        if (v11 < 0)
          operator delete(__p);
        if (v9 < 0)
          operator delete(v8);
      }
      if (v7 && v6 < 0)
        operator delete(v5);
    }
    v1 = v15;
    if (v15)
    {
      v2 = v16;
      v3 = v15;
      if (v16 != v15)
      {
        do
        {
          if (*((char *)v2 - 1) < 0)
            operator delete(*((void **)v2 - 3));
          v2 = (__int128 *)((char *)v2 - 24);
        }
        while (v2 != v1);
        v3 = v15;
      }
      v16 = v1;
      operator delete(v3);
    }
    return 0;
  }
  return result;
}

uint64_t VZFileImporterGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638318);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638318))
    return qword_254638310;
  qword_254638310 = sub_20AECB130();
  __cxa_guard_release(&qword_254638318);
  return qword_254638310;
}

_OWORD *VZFileImporterImport(char *a1, uint64_t a2, CFErrorRef *a3)
{
  _OWORD *v6;
  char *v7;
  unsigned __int8 v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  BOOL v20;
  void *v22;
  char *v23;
  char v24;
  void *__p;
  char *v26;
  char v27;
  char v28;
  void *v29[2];
  uint64_t v30;
  _BYTE v31[24];
  char v32;
  __int128 v33;
  void *v34;
  char v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  char v42;
  char v43;
  _QWORD v44[3];
  _QWORD *v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (sub_20AEE3494((uint64_t)"VZFileImporterImport", (uint64_t)a1, a3))
    return 0;
  v29[0] = 0;
  v29[1] = 0;
  v7 = a1 - 1;
  v30 = 0;
  while (*++v7)
    ;
  sub_20AF08074((unint64_t)v29, a1, v7);
  if (a2)
  {
    sub_20AF07468((uint64_t)&v22, a2 + 16);
    v28 = 1;
  }
  else
  {
    LOBYTE(v22) = 0;
    v28 = 0;
  }
  v44[0] = &off_24C3F2898;
  v44[1] = sub_20AEDD8BC;
  v45 = v44;
  v46 = 1;
  v9 = atomic_load((unsigned __int8 *)&qword_25463CFA8);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_25463CFA8))
  {
    __cxa_atexit((void (*)(void *))nullsub_288, &off_253EC31C8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CFA8);
  }
  sub_20AFEEEE4((uint64_t)v29, (uint64_t)&v22, (uint64_t)v44, (uint64_t)&off_253EC31C8, (uint64_t)v31);
  if (!v46)
    goto LABEL_15;
  v10 = v45;
  if (v45 == v44)
  {
    v11 = 4;
    v10 = v44;
    goto LABEL_14;
  }
  if (v45)
  {
    v11 = 5;
LABEL_14:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
LABEL_15:
  if (!v28)
    goto LABEL_36;
  if (!v27)
    goto LABEL_28;
  v12 = (char *)__p;
  if (!__p)
    goto LABEL_28;
  v13 = v26;
  v14 = __p;
  if (v26 == __p)
    goto LABEL_27;
  do
  {
    v15 = (char *)*((_QWORD *)v13 - 1);
    if (v13 - 32 == v15)
    {
      v15 = v13 - 32;
      v16 = 4;
LABEL_21:
      (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
      goto LABEL_22;
    }
    if (v15)
    {
      v16 = 5;
      goto LABEL_21;
    }
LABEL_22:
    *((_QWORD *)v13 - 100) = &off_24C411BF8;
    sub_20B07AE6C((uint64_t)(v13 - 784));
    v13 -= 800;
  }
  while (v13 != v12);
  v14 = __p;
LABEL_27:
  v26 = v12;
  operator delete(v14);
LABEL_28:
  if (v24)
  {
    v17 = (char *)v22;
    if (v22)
    {
      v18 = v22;
      if (v23 != v22)
      {
        v19 = v23 - 768;
        do
        {
          (**(void (***)(char *))v19)(v19);
          v20 = v19 == v17;
          v19 -= 768;
        }
        while (!v20);
        v18 = v22;
      }
      v23 = v17;
      operator delete(v18);
    }
  }
LABEL_36:
  if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    if (v43)
      goto LABEL_38;
LABEL_42:
    sub_20AECB410(&v33, a3);
    goto LABEL_43;
  }
  operator delete(v29[0]);
  if (!v43)
    goto LABEL_42;
LABEL_38:
  if (v32)
  {
    v6 = sub_20AF01940(a3, (uint64_t)v31);
    if (!v43)
      goto LABEL_44;
  }
  else
  {
LABEL_43:
    v6 = 0;
    if (!v43)
    {
LABEL_44:
      if (v42)
      {
        if (v41)
        {
          if (v40 < 0)
            operator delete(v39);
          if (v38 < 0)
            operator delete(v37);
        }
        if (v36 && v35 < 0)
          operator delete(v34);
      }
    }
  }
  if (v32)
  {
    v29[0] = v31;
    sub_20AF048EC((void ***)v29);
  }
  return v6;
}

void sub_20AF018C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20AF01BDC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AF018D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    sub_20AF072B0();
    sub_20AF07A38();
    sub_20AECDF74((std::string::size_type)&xmmword_2546384E8, (uint64_t *)&xmmword_254638530, 0);
    __cxa_end_catch();
    JUMPOUT(0x20AF0162CLL);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_20AF01940(CFErrorRef *a1, uint64_t a2)
{
  _OWORD *result;
  uint64_t *v5;
  unsigned __int8 v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  _BYTE v10[16];
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  char v18;
  char v19;
  char v20;
  __int128 *v21;
  __int128 *v22;
  __int128 __dst;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  result = operator new(0x48uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[1] = *(_OWORD *)a2;
    *((_QWORD *)result + 4) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    *((_DWORD *)result + 10) = 1;
    *(_QWORD *)result = off_24C3F3B28;
    *((_QWORD *)result + 1) = &unk_24C3F3B78;
    *((_QWORD *)result + 8) = 0;
    *((_QWORD *)result + 7) = 0;
    *((_QWORD *)result + 6) = (char *)result + 56;
  }
  else
  {
    v5 = (uint64_t *)sub_20AF08378();
    v6 = atomic_load((unsigned __int8 *)&qword_254638360);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254638360))
    {
      sub_20AF08574();
      if (byte_254638637 < 0)
      {
        sub_20AEC60F4(&xmmword_2546385F0, (void *)xmmword_254638620, *((unint64_t *)&xmmword_254638620 + 1));
      }
      else
      {
        xmmword_2546385F0 = xmmword_254638620;
        unk_254638600 = unk_254638630;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546385F0, &dword_20AEBB000);
      __cxa_guard_release(&qword_254638360);
    }
    if (byte_254638607 < 0)
    {
      sub_20AEC60F4(&__dst, (void *)xmmword_2546385F0, *((unint64_t *)&xmmword_2546385F0 + 1));
    }
    else
    {
      __dst = xmmword_2546385F0;
      v24 = unk_254638600;
    }
    sub_20AEC7620(&v21, (uint64_t)&__dst, 1uLL);
    v10[0] = 0;
    v20 = 0;
    sub_20AECD798(v5, &v21, (uint64_t)v10, a1);
    if (v20 && v19)
    {
      if (v18)
      {
        if (v17 < 0)
          operator delete(__p);
        if (v15 < 0)
          operator delete(v14);
      }
      if (v13 && v12 < 0)
        operator delete(v11);
    }
    v7 = v21;
    if (v21)
    {
      v8 = v22;
      v9 = v21;
      if (v22 != v21)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*((void **)v8 - 3));
          v8 = (__int128 *)((char *)v8 - 24);
        }
        while (v8 != v7);
        v9 = v21;
      }
      v22 = v7;
      operator delete(v9);
    }
    if (SHIBYTE(v24) < 0)
      operator delete((void *)__dst);
    return 0;
  }
  return result;
}

void sub_20AF01BAC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_guard_abort(&qword_254638360);
    sub_20AEC01C0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AF01BDC(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 152) || !*(_BYTE *)(a1 + 144))
    goto LABEL_2;
  if (!*(_BYTE *)(a1 + 136))
    goto LABEL_9;
  if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_13:
    operator delete(*(void **)(a1 + 80));
    if (!*(_BYTE *)(a1 + 72))
      goto LABEL_2;
    goto LABEL_10;
  }
  operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 103) < 0)
    goto LABEL_13;
LABEL_9:
  if (!*(_BYTE *)(a1 + 72))
    goto LABEL_2;
LABEL_10:
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
LABEL_2:
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = (void **)a1;
    sub_20AF048EC(&v3);
  }
  return a1;
}

void (***VZFileImporterCreate(char *a1, uint64_t a2, CFErrorRef *a3))(_QWORD)
{
  void (***v6)(_QWORD);
  char *v7;
  unsigned __int8 v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  void (***v16)(_QWORD);
  void *v17;
  BOOL v18;
  int v19;
  char *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  void *v26;
  char *v27;
  uint64_t v28;
  void (***v29)(_QWORD);
  void *v30;
  void (***v31)(_QWORD);
  void *v33[2];
  uint64_t v34;
  char v35;
  void *v36[2];
  uint64_t v37;
  char v38;
  char v39;
  void *v40[2];
  uint64_t v41;
  __int128 v42;
  void *v43;
  char v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  char v50;
  char v51;
  char v52;
  void *v53[2];
  uint64_t v54;
  char v55;
  void *__p[2];
  uint64_t v57;
  char v58;
  char v59;
  __int128 v60;
  void *v61;
  __int128 v62;
  uint64_t v63;
  void *v64[2];
  uint64_t v65;
  char v66;
  void *v67[2];
  uint64_t v68;
  char v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  char v73;
  unsigned __int8 v74;
  CFErrorRef **v75;
  CFErrorRef *v76;
  _QWORD v77[3];
  _QWORD *v78;
  char v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  if (sub_20AEE3494((uint64_t)"VZFileImporterCreate", (uint64_t)a1, a3))
    return 0;
  v40[0] = 0;
  v40[1] = 0;
  v7 = a1 - 1;
  v41 = 0;
  while (*++v7)
    ;
  sub_20AF08074((unint64_t)v40, a1, v7);
  if (a2)
  {
    sub_20AF07468((uint64_t)v33, a2 + 16);
    v39 = 1;
  }
  else
  {
    LOBYTE(v33[0]) = 0;
    v39 = 0;
  }
  v9 = atomic_load((unsigned __int8 *)&qword_25463CFA8);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_25463CFA8))
  {
    __cxa_atexit((void (*)(void *))nullsub_288, &off_253EC31C8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CFA8);
  }
  v75 = &v76;
  v76 = a3;
  LOBYTE(v53[0]) = 0;
  v59 = 0;
  if (v39)
  {
    v55 = 0;
    if (v35)
    {
      *(_OWORD *)v53 = *(_OWORD *)v33;
      v54 = v34;
      v33[1] = 0;
      v34 = 0;
      v33[0] = 0;
      v55 = 1;
    }
    LOBYTE(__p[0]) = 0;
    v58 = 0;
    if (v38)
    {
      *(_OWORD *)__p = *(_OWORD *)v36;
      v57 = v37;
      v36[1] = 0;
      v37 = 0;
      v36[0] = 0;
      v58 = 1;
    }
    v59 = 1;
  }
  v77[0] = &off_24C3F2898;
  v77[1] = sub_20AEDD8BC;
  v6 = (void (***)(_QWORD))v77;
  v78 = v77;
  v79 = 1;
  sub_20AFEFF4C((uint64_t)v40, (uint64_t)v53, (uint64_t)v77, (uint64_t)&off_253EC31C8, (uint64_t)&v60);
  if (!v79)
    goto LABEL_21;
  v10 = v78;
  if (v78 == v77)
  {
    v11 = 4;
    v10 = v77;
    goto LABEL_20;
  }
  if (v78)
  {
    v11 = 5;
LABEL_20:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
LABEL_21:
  if (!v59)
    goto LABEL_42;
  if (!v58)
    goto LABEL_34;
  v6 = (void (***)(_QWORD))__p[0];
  if (!__p[0])
    goto LABEL_34;
  v12 = __p[1];
  v13 = __p[0];
  if (__p[1] == __p[0])
    goto LABEL_33;
  do
  {
    v14 = (_QWORD *)*(v12 - 1);
    if (v12 - 4 == v14)
    {
      v14 = v12 - 4;
      v15 = 4;
LABEL_27:
      (*(void (**)(void))(*v14 + 8 * v15))();
      goto LABEL_28;
    }
    if (v14)
    {
      v15 = 5;
      goto LABEL_27;
    }
LABEL_28:
    *(v12 - 100) = &off_24C411BF8;
    sub_20B07AE6C((uint64_t)(v12 - 98));
    v12 -= 100;
  }
  while (v12 != v6);
  v13 = __p[0];
LABEL_33:
  __p[1] = v6;
  operator delete(v13);
LABEL_34:
  if (v55)
  {
    v16 = (void (***)(_QWORD))v53[0];
    if (v53[0])
    {
      v17 = v53[0];
      if (v53[1] != v53[0])
      {
        v6 = (void (***)(_QWORD))((char *)v53[1] - 768);
        do
        {
          (**v6)(v6);
          v18 = v6 == v16;
          v6 -= 96;
        }
        while (!v18);
        v17 = v53[0];
      }
      v53[1] = v16;
      operator delete(v17);
    }
  }
LABEL_42:
  v19 = v74;
  if (!v74)
  {
    v42 = v60;
    sub_20AECEBD0(&v43, (__int128 *)&v61);
    v52 = 1;
    sub_20AF08674(&v75, (uint64_t)&v42);
    if (!v52 || !v51)
      goto LABEL_72;
    if (v50)
    {
      if (v49 < 0)
        operator delete(v48);
      if (v47 < 0)
        operator delete(v46);
    }
    if (!v45 || (v44 & 0x80000000) == 0)
      goto LABEL_72;
LABEL_70:
    operator delete(v43);
LABEL_71:
    v6 = 0;
    goto LABEL_72;
  }
  v20 = (char *)operator new(0xB0uLL, MEMORY[0x24BEDB6B8]);
  if (v20)
  {
    v6 = (void (***)(_QWORD))v20;
    *(_QWORD *)v20 = off_24C3F2180;
    *((_QWORD *)v20 + 1) = &off_24C3FEB40;
    v21 = v61;
    v22 = v62;
    *(_QWORD *)&v62 = 0;
    v61 = 0;
    *((_QWORD *)v20 + 2) = &off_24C410CA8;
    *((_QWORD *)v20 + 3) = v21;
    *((_OWORD *)v20 + 2) = v22;
    *((_QWORD *)v20 + 6) = v63;
    *((_QWORD *)&v62 + 1) = 0;
    v63 = 0;
    v20[56] = 0;
    v20[80] = 0;
    if (v66)
    {
      *(_OWORD *)(v20 + 56) = *(_OWORD *)v64;
      *((_QWORD *)v20 + 9) = v65;
      v65 = 0;
      v64[1] = 0;
      v64[0] = 0;
      v20[80] = 1;
    }
    v20[88] = 0;
    v20[112] = 0;
    if (v69)
    {
      *(_OWORD *)(v20 + 88) = *(_OWORD *)v67;
      *((_QWORD *)v20 + 13) = v68;
      v68 = 0;
      v67[1] = 0;
      v67[0] = 0;
      v20[112] = 1;
    }
    v20[120] = 0;
    v20[160] = 0;
    if (v73)
    {
      v23 = v71;
      *(_OWORD *)(v20 + 120) = v70;
      *(_OWORD *)(v20 + 136) = v23;
      *((_QWORD *)v20 + 19) = v72;
      v71 = 0uLL;
      v72 = 0;
      v20[160] = 1;
    }
    *((_DWORD *)v20 + 42) = 1;
    *(_QWORD *)v20 = &off_24C3F35D0;
    *((_QWORD *)v20 + 1) = &unk_24C3F3620;
    goto LABEL_72;
  }
  LOBYTE(v42) = 0;
  v52 = 0;
  sub_20AF08674(&v75, (uint64_t)&v42);
  if (!v52 || !v51)
    goto LABEL_71;
  if (v50)
  {
    if (v49 < 0)
      operator delete(v48);
    if (v47 < 0)
      operator delete(v46);
  }
  v6 = 0;
  if (v45 && v44 < 0)
    goto LABEL_70;
LABEL_72:
  if (v74)
  {
    (*(void (**)(__int128 *))v60)(&v60);
  }
  else if ((_BYTE)v70)
  {
    if (v69)
    {
      if (SHIBYTE(v68) < 0)
        operator delete(v67[0]);
      if (SHIBYTE(v65) < 0)
        operator delete(v64[0]);
    }
    if ((_BYTE)v63 && SHIBYTE(v62) < 0)
      operator delete(v61);
  }
  if (!v19)
    v6 = 0;
  if (!v39)
    goto LABEL_106;
  if (!v38)
    goto LABEL_98;
  v24 = (char *)v36[0];
  if (!v36[0])
    goto LABEL_98;
  v25 = (char *)v36[1];
  v26 = v36[0];
  if (v36[1] == v36[0])
    goto LABEL_97;
  while (2)
  {
    v27 = (char *)*((_QWORD *)v25 - 1);
    if (v25 - 32 == v27)
    {
      v27 = v25 - 32;
      v28 = 4;
      goto LABEL_82;
    }
    if (v27)
    {
      v28 = 5;
LABEL_82:
      (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
    }
    *((_QWORD *)v25 - 100) = &off_24C411BF8;
    sub_20B07AE6C((uint64_t)(v25 - 784));
    v25 -= 800;
    if (v25 != v24)
      continue;
    break;
  }
  v26 = v36[0];
LABEL_97:
  v36[1] = v24;
  operator delete(v26);
LABEL_98:
  if (v35)
  {
    v29 = (void (***)(_QWORD))v33[0];
    if (v33[0])
    {
      v30 = v33[0];
      if (v33[1] != v33[0])
      {
        v31 = (void (***)(_QWORD))((char *)v33[1] - 768);
        do
        {
          (**v31)(v31);
          v18 = v31 == v29;
          v31 -= 96;
        }
        while (!v18);
        v30 = v33[0];
      }
      v33[1] = v29;
      operator delete(v30);
    }
  }
LABEL_106:
  if (SHIBYTE(v41) < 0)
    operator delete(v40[0]);
  return v6;
}

void sub_20AF022E0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,std::logic_error a22,int a23,__int16 a24,char a25,char a26,char a27,int a28,__int16 a29,uint64_t a30,__int128 a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,uint64_t a50,uint64_t a51,char a52)
{
  _OWORD *v52;
  uint64_t v53;
  const std::logic_error *exception_ptr;
  void *v57;
  _QWORD *v58;

  if (a2)
  {
    sub_20AECDEE0((uint64_t)&a52);
    sub_20AEF07DC((uint64_t)&STACK[0x200]);
    if (a2 == 3)
    {
      exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
      std::logic_error::logic_error(&a22, exception_ptr);
      a22.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_begin_catch(a1);
      a21 = (uint64_t)std::logic_error::what(&a22);
      sub_20AED4C84(&__p, (const char **)&a21);
      sub_20B099E24((__int128 *)&__p, (uint64_t)&a29);
      *(_OWORD *)&STACK[0x200] = *v52;
      sub_20AECEBD0(&STACK[0x210], &a31);
      LOBYTE(STACK[0x278]) = 1;
      sub_20AF08674((CFErrorRef ***)(v53 - 112), (uint64_t)&STACK[0x200]);
      sub_20AECDEE0((uint64_t)&STACK[0x200]);
      sub_20AECCE40((uint64_t)&a29);
      if (a49)
      {
        if (a48 < 0)
          operator delete(__p);
      }
      MEMORY[0x20BD35020](&a22);
      __cxa_end_catch();
    }
    else if (a2 == 2)
    {
      v57 = __cxa_get_exception_ptr(a1);
      sub_20AED4C1C((std::runtime_error *)&__p, (uint64_t)v57);
      __cxa_begin_catch(a1);
      v58 = (_QWORD *)(a50 + 48);
      if (*(char *)(a50 + 71) < 0)
        v58 = (_QWORD *)*v58;
      a21 = (uint64_t)v58;
      sub_20AED4C84(&a22, (const char **)&a21);
      sub_20B09A738((__int128 *)&a22, (uint64_t)&a29);
      *(_OWORD *)&STACK[0x200] = *v52;
      sub_20AECEBD0(&STACK[0x210], &a31);
      LOBYTE(STACK[0x278]) = 1;
      sub_20AF08674((CFErrorRef ***)(v53 - 112), (uint64_t)&STACK[0x200]);
      sub_20AECDEE0((uint64_t)&STACK[0x200]);
      sub_20AECCE40((uint64_t)&a29);
      if (a27 && a26 < 0)
        operator delete(a22.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__p);
      __cxa_end_catch();
    }
    else
    {
      __cxa_begin_catch(a1);
      LOBYTE(STACK[0x200]) = 0;
      LOBYTE(STACK[0x278]) = 0;
      sub_20AF08674((CFErrorRef ***)(v53 - 112), (uint64_t)&STACK[0x200]);
      sub_20AECDEE0((uint64_t)&STACK[0x200]);
      __cxa_end_catch();
    }
    JUMPOUT(0x20AF02130);
  }
  _Unwind_Resume(a1);
}

uint64_t VZFileImporterGetCurrentSequenceTime(uint64_t a1)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (sub_20AF025C0((uint64_t)"VZFileImporterGetCurrentSequenceTime", a1))
    return 0;
  v3 = *(_QWORD **)(a1 + 24);
  v5 = v3[36];
  v4 = v3[37];
  v6 = v3[35];
  if (v6 < 0x86BCA1AF286BCA1BLL * ((v4 - v5) >> 3) || v3[32])
    return *(_QWORD *)(v5 + 152 * v6);
  if (v5 == v4)
    return 0;
  return *(_QWORD *)(v4 - 152);
}

BOOL sub_20AF025C0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v7;
  size_t v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  char v37;
  char v38;
  char v39;

  if (a2)
    return a2 == 0;
  v4 = atomic_load((unsigned __int8 *)&qword_2546383C8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546383C8))
  {
    sub_20AF09018();
    v7 = byte_254638757;
    if (byte_254638757 >= 0)
      v8 = byte_254638757;
    else
      v8 = qword_254638748;
    v9 = v8 + 1;
    if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v9 >= 0x17)
    {
      v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v11 = v9 | 7;
      v12 = v11 + 1;
      v10 = (__int128 *)operator new(v11 + 1);
      *((_QWORD *)&xmmword_254638728 + 1) = v8 + 1;
      unk_254638738 = v12 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638728 = v10;
    }
    else
    {
      unk_254638738 = 0;
      xmmword_254638728 = 0uLL;
      v10 = &xmmword_254638728;
      byte_25463873F = v8 + 1;
      if (!v8)
      {
LABEL_53:
        *(_WORD *)((char *)v10 + v8) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638728, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546383C8);
        goto LABEL_3;
      }
    }
    if (v7 >= 0)
      v13 = &qword_254638740;
    else
      v13 = (uint64_t *)qword_254638740;
    memmove(v10, v13, v8);
    goto LABEL_53;
  }
LABEL_3:
  if (byte_25463873F < 0)
  {
    sub_20AEC60F4(v14, (void *)xmmword_254638728, *((unint64_t *)&xmmword_254638728 + 1));
  }
  else
  {
    *(_OWORD *)v14 = xmmword_254638728;
    v15 = unk_254638738;
  }
  v16 = 1;
  sub_20AECCECC(a1, (uint64_t)v14, (uint64_t)&v17);
  v28 = v17;
  LOBYTE(v29) = 0;
  v38 = 0;
  if (v27)
  {
    v31 = 0;
    if (v20)
    {
      v29 = v18;
      v30 = v19;
      v19 = 0;
      v18 = 0uLL;
      v31 = 1;
    }
    LOBYTE(v32) = 0;
    v37 = 0;
    if (v26)
    {
      v33 = v22;
      v32 = *(_OWORD *)v21;
      v21[0] = 0;
      v21[1] = 0;
      v34 = v23;
      *(_OWORD *)__p = *(_OWORD *)v24;
      v36 = v25;
      v22 = 0;
      v24[0] = 0;
      v24[1] = 0;
      v25 = 0;
      v37 = 1;
    }
    v38 = 1;
  }
  v39 = 0;
  v5 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v28);
  if (!v39 && v38)
  {
    if (v37)
    {
      if (SHIBYTE(v36) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
    }
    if (v31 && SHIBYTE(v30) < 0)
      operator delete((void *)v29);
  }
  if (v27)
  {
    if (v26)
    {
      if (SHIBYTE(v25) < 0)
        operator delete(v24[0]);
      if (SHIBYTE(v22) < 0)
        operator delete(v21[0]);
    }
    if (v20 && SHIBYTE(v19) < 0)
      operator delete((void *)v18);
  }
  if (v16 && SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  return a2 == 0;
}

void sub_20AF02934(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546383C8);
  _Unwind_Resume(a1);
}

void sub_20AF0294C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VZFileImporterGetEndSequenceTime(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (sub_20AF025C0((uint64_t)"VZFileImporterGetEndSequenceTime", a1))
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(v2 + 288);
  v3 = *(_QWORD *)(v2 + 296);
  if (v4 == v3)
    return 0;
  else
    return *(_QWORD *)(v3 - 152);
}

uint64_t VZFileImporterGetCurrentPackageID(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (sub_20AF025C0((uint64_t)"VZFileImporterGetCurrentPackageID", a1))
    return 0;
  v3 = *(_QWORD **)(a1 + 24);
  v4 = v3[36];
  v5 = v3[35];
  if (v5 >= 0x86BCA1AF286BCA1BLL * ((v3[37] - v4) >> 3) && !v3[32])
    return 0;
  v6 = v4 + 152 * v5;
  result = v6 + 8;
  if (*(char *)(v6 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t VZFileImporterGetCurrentDataTypeID(uint64_t a1)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;

  if (sub_20AF025C0((uint64_t)"VZFileImporterGetCurrentDataTypeID", a1))
    return 0;
  v3 = *(_QWORD **)(a1 + 24);
  v4 = v3[36];
  v5 = v3[35];
  if (v5 >= 0x86BCA1AF286BCA1BLL * ((v3[37] - v4) >> 3) && !v3[32])
    return 0;
  else
    return *(unsigned int *)(v4 + 152 * v5 + 32);
}

uint64_t VZFileImporterGetCurrentSubloggerName(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (sub_20AF025C0((uint64_t)"VZFileImporterGetCurrentSubloggerName", a1))
    return 0;
  v3 = *(_QWORD **)(a1 + 24);
  v4 = v3[36];
  v5 = v3[35];
  if (v5 >= 0x86BCA1AF286BCA1BLL * ((v3[37] - v4) >> 3) && !v3[32])
    return 0;
  v6 = v4 + 152 * v5;
  result = v6 + 40;
  if (*(char *)(v6 + 63) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t VZFileImporterGetCurrentNamespace(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (sub_20AF025C0((uint64_t)"VZFileImporterGetCurrentNamespace", a1))
    return 0;
  v3 = *(_QWORD **)(a1 + 24);
  v4 = v3[36];
  v5 = v3[35];
  if (v5 >= 0x86BCA1AF286BCA1BLL * ((v3[37] - v4) >> 3) && !v3[32])
    return 0;
  v6 = v4 + 152 * v5;
  if (!*(_BYTE *)(v6 + 88))
    return 0;
  result = v6 + 64;
  if (*(char *)(v4 + 152 * v5 + 87) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t VZFileImporterGetCurrentFilePath(uint64_t a1)
{
  if (sub_20AF025C0((uint64_t)"VZFileImporterGetCurrentFilePath", a1))
    return 0;
  else
    return sub_20AFF0FE4(a1 + 8);
}

uint64_t VZFileImporterGetCurrentOffsetInFile(uint64_t a1)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;

  if (sub_20AF025C0((uint64_t)"VZFileImporterGetCurrentOffsetInFile", a1))
    return 0;
  v3 = *(_QWORD **)(a1 + 24);
  v4 = v3[36];
  v5 = v3[35];
  if (v5 >= 0x86BCA1AF286BCA1BLL * ((v3[37] - v4) >> 3) && !v3[32])
    return 0;
  else
    return *(_QWORD *)(v4 + 152 * v5 + 120);
}

uint64_t VZFileImporterGetCurrentReferenceIDString(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (sub_20AF025C0((uint64_t)"VZFileImporterGetCurrentReferenceIDString", a1))
    return 0;
  v3 = *(_QWORD **)(a1 + 24);
  v4 = v3[36];
  v5 = v3[35];
  if (v5 >= 0x86BCA1AF286BCA1BLL * ((v3[37] - v4) >> 3) && !v3[32])
    return 0;
  v6 = v4 + 152 * v5;
  result = v6 + 128;
  if (*(char *)(v6 + 151) < 0)
    return *(_QWORD *)result;
  return result;
}

BOOL VZFileImporterIsDone(uint64_t a1)
{
  _QWORD *v3;

  if (sub_20AF025C0((uint64_t)"VZFileImporterIsDone", a1))
    return 1;
  v3 = *(_QWORD **)(a1 + 24);
  return v3[35] >= 0x86BCA1AF286BCA1BLL * ((uint64_t)(v3[37] - v3[36]) >> 3) && v3[32] == 0;
}

_OWORD *VZFileImporterLoadNext(uint64_t a1, CFErrorRef *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  __int128 *v14;
  __int128 v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23[96];
  timespec __rqtp;
  void *v25;
  char v26;
  char v27;
  void *v28;
  char v29;
  void *__p;
  char v31;
  char v32;
  char v33;
  char v34;
  __int128 *v35;
  __int128 *v36;
  __int128 __dst;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (!sub_20AF0310C((uint64_t)"VZFileImporterLoadNext", a1, a2))
  {
    sub_20AFF11FC(a1 + 8, (uint64_t)&v20);
    if (v23[88])
    {
      v5 = operator new(0x48uLL, MEMORY[0x24BEDB6B8]);
      if (v5)
      {
        v4 = v5;
        *(_QWORD *)v5 = off_24C3F2180;
        v5[1] = v20;
        v20 = 0uLL;
        do
          v6 = __ldaxr(v23);
        while (__stxr(1u, v23));
        if (v6)
        {
          v7 = 0;
          do
          {
            if (v7)
            {
              __rqtp = (timespec)xmmword_20B5B0ED0;
              nanosleep(&__rqtp, 0);
            }
            ++v7;
            do
              v8 = __ldaxr(v23);
            while (__stxr(1u, v23));
          }
          while (v8);
        }
        v10 = v21;
        v9 = v22;
        if (v22)
        {
          v11 = (unsigned int *)(v22 + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        atomic_store(0, v23);
        *((_QWORD *)v4 + 4) = v10;
        *((_QWORD *)v4 + 5) = v9;
        *((_BYTE *)v4 + 48) = 0;
        *((_DWORD *)v4 + 14) = 1;
        *(_QWORD *)v4 = &off_24C3F3A30;
        *((_QWORD *)v4 + 1) = &unk_24C3F3A80;
        *((_QWORD *)v4 + 8) = 0;
        goto LABEL_43;
      }
      v13 = (uint64_t *)sub_20AEF7F38();
      v14 = sub_20AEF82AC();
      if (*((char *)v14 + 23) < 0)
      {
        sub_20AEC60F4(&__dst, *(void **)v14, *((_QWORD *)v14 + 1));
      }
      else
      {
        v15 = *v14;
        v38 = *((_QWORD *)v14 + 2);
        __dst = v15;
      }
      sub_20AEC7620(&v35, (uint64_t)&__dst, 1uLL);
      LOBYTE(__rqtp.tv_sec) = 0;
      v34 = 0;
      sub_20AECD798(v13, &v35, (uint64_t)&__rqtp, a2);
      if (v34 && v33)
      {
        if (v32)
        {
          if (v31 < 0)
            operator delete(__p);
          if (v29 < 0)
            operator delete(v28);
        }
        if (v27 && v26 < 0)
          operator delete(v25);
      }
      v16 = v35;
      if (v35)
      {
        v17 = v36;
        v18 = v35;
        if (v36 != v35)
        {
          do
          {
            if (*((char *)v17 - 1) < 0)
              operator delete(*((void **)v17 - 3));
            v17 = (__int128 *)((char *)v17 - 24);
          }
          while (v17 != v16);
          v18 = v35;
        }
        v36 = v16;
        operator delete(v18);
      }
      if (SHIBYTE(v38) < 0)
        operator delete((void *)__dst);
    }
    else
    {
      sub_20AECB410(&v20, a2);
    }
    v4 = 0;
LABEL_43:
    sub_20AF04A10((uint64_t)&v20);
    return v4;
  }
  return 0;
}

void sub_20AF030DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AF04A10((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AF030F0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20AEC01C0(exception_object);
}

BOOL sub_20AF0310C(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  unsigned __int8 v6;
  int v8;
  size_t v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  void *v15[2];
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  void *v22[2];
  uint64_t v23;
  uint64_t v24;
  void *v25[2];
  uint64_t v26;
  char v27;
  char v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  uint64_t v37;
  char v38;
  char v39;
  char v40;

  if (a2)
    return a2 == 0;
  v6 = atomic_load((unsigned __int8 *)&qword_2546383D8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2546383D8))
  {
    sub_20AF08BA8();
    v8 = byte_25463864F;
    if (byte_25463864F >= 0)
      v9 = byte_25463864F;
    else
      v9 = *((_QWORD *)&xmmword_254638638 + 1);
    v10 = v9 + 1;
    if (v9 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v10 >= 0x17)
    {
      v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v12 = v10 | 7;
      v13 = v12 + 1;
      v11 = (__int128 *)operator new(v12 + 1);
      *((_QWORD *)&xmmword_254638758 + 1) = v9 + 1;
      unk_254638768 = v13 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638758 = v11;
    }
    else
    {
      unk_254638768 = 0;
      xmmword_254638758 = 0uLL;
      v11 = &xmmword_254638758;
      byte_25463876F = v9 + 1;
      if (!v9)
      {
LABEL_50:
        *(_WORD *)((char *)v11 + v9) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638758, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546383D8);
        goto LABEL_3;
      }
    }
    if (v8 >= 0)
      v14 = &xmmword_254638638;
    else
      v14 = (__int128 *)xmmword_254638638;
    memmove(v11, v14, v9);
    goto LABEL_50;
  }
LABEL_3:
  if (byte_25463876F < 0)
  {
    sub_20AEC60F4(v15, (void *)xmmword_254638758, *((unint64_t *)&xmmword_254638758 + 1));
  }
  else
  {
    *(_OWORD *)v15 = xmmword_254638758;
    v16 = unk_254638768;
  }
  v17 = 1;
  sub_20AECCECC(a1, (uint64_t)v15, (uint64_t)&v18);
  v29 = v18;
  LOBYTE(v30) = 0;
  v39 = 0;
  if (v28)
  {
    v32 = 0;
    if (v21)
    {
      v30 = v19;
      v31 = v20;
      v20 = 0;
      v19 = 0uLL;
      v32 = 1;
    }
    LOBYTE(v33) = 0;
    v38 = 0;
    if (v27)
    {
      v34 = v23;
      v33 = *(_OWORD *)v22;
      v22[0] = 0;
      v22[1] = 0;
      v35 = v24;
      *(_OWORD *)__p = *(_OWORD *)v25;
      v37 = v26;
      v23 = 0;
      v25[0] = 0;
      v25[1] = 0;
      v26 = 0;
      v38 = 1;
    }
    v39 = 1;
  }
  v40 = 0;
  sub_20AECB410(&v29, a3);
  if (!v40 && v39)
  {
    if (v38)
    {
      if (SHIBYTE(v37) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34) < 0)
        operator delete((void *)v33);
    }
    if (v32 && SHIBYTE(v31) < 0)
      operator delete((void *)v30);
  }
  if (v28)
  {
    if (v27)
    {
      if (SHIBYTE(v26) < 0)
        operator delete(v25[0]);
      if (SHIBYTE(v23) < 0)
        operator delete(v22[0]);
    }
    if (v21 && SHIBYTE(v20) < 0)
      operator delete((void *)v19);
  }
  if (v17 && SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  return a2 == 0;
}

void sub_20AF03434(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546383D8);
  _Unwind_Resume(a1);
}

void sub_20AF0344C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECD704((uint64_t)&a32);
  sub_20AECCE40((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_OWORD *VZFileImporterLoadUntil(uint64_t a1, void *a2, CFErrorRef *a3)
{
  _OWORD *v6;
  unsigned __int8 v7;
  _BYTE v9[24];
  char v10;
  __int128 v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  char v19;
  char v20;
  char v21;
  void **v22;

  if (sub_20AF0310C((uint64_t)"VZFileImporterLoadUntil", a1, a3))
    return 0;
  sub_20AFF1C88(a1 + 8, a2, (uint64_t)v9);
  if (!v21)
  {
    v7 = atomic_load((unsigned __int8 *)&qword_254630258);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
    {
      __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
      __cxa_guard_release(&qword_254630258);
    }
    sub_20AECB50C((uint64_t)&unk_254630168, &v11);
LABEL_9:
    v6 = 0;
    if (v21)
      goto LABEL_19;
    goto LABEL_10;
  }
  if (!v10)
    goto LABEL_9;
  v6 = sub_20AF01940(a3, (uint64_t)v9);
  if (v21)
    goto LABEL_19;
LABEL_10:
  if (v20)
  {
    if (v19)
    {
      if (v18 < 0)
        operator delete(__p);
      if (v16 < 0)
        operator delete(v15);
    }
    if (v14)
    {
      if (v13 < 0)
        operator delete(v12);
    }
  }
LABEL_19:
  if (v10)
  {
    v22 = (void **)v9;
    sub_20AF048EC(&v22);
    return v6;
  }
  return v6;
}

void VZFileImporterSkipNext(uint64_t a1, CFErrorRef *a2)
{
  __int128 v4;
  void *v5;
  char v6;
  char v7;
  void *v8;
  char v9;
  void *__p;
  char v11;
  char v12;
  char v13;
  char v14;

  if (!sub_20AF0310C((uint64_t)"VZFileImporterSkipNext", a1, a2))
  {
    sub_20AFF2714(a1 + 8, (uint64_t)&v4);
    if (!v14)
    {
      sub_20AECB410(&v4, a2);
      if (!v14)
      {
        if (v13)
        {
          if (v12)
          {
            if (v11 < 0)
              operator delete(__p);
            if (v9 < 0)
              operator delete(v8);
          }
          if (v7)
          {
            if (v6 < 0)
              operator delete(v5);
          }
        }
      }
    }
  }
}

void sub_20AF036C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void VZFileImporterSkipUntil(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  __int128 v6;
  void *v7;
  char v8;
  char v9;
  void *v10;
  char v11;
  void *__p;
  char v13;
  char v14;
  char v15;
  char v16;

  if (!sub_20AF0310C((uint64_t)"VZFileImporterSkipUntil", a1, a3))
  {
    sub_20AFF2A28(a1 + 8, a2, (uint64_t)&v6);
    if (!v16)
    {
      sub_20AECB410(&v6, a3);
      if (!v16)
      {
        if (v15)
        {
          if (v14)
          {
            if (v13 < 0)
              operator delete(__p);
            if (v11 < 0)
              operator delete(v10);
          }
          if (v9)
          {
            if (v8 < 0)
              operator delete(v7);
          }
        }
      }
    }
  }
}

void sub_20AF037A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void VZFileImporterSeekToBegin(uint64_t a1, CFErrorRef *a2)
{
  __int128 v4;
  void *v5;
  char v6;
  char v7;
  void *v8;
  char v9;
  void *__p;
  char v11;
  char v12;
  char v13;
  char v14;

  if (!sub_20AF0310C((uint64_t)"VZFileImporterSeekToBegin", a1, a2))
  {
    sub_20AFF2D60(a1 + 8, (uint64_t)&v4);
    if (!v14)
    {
      sub_20AECB410(&v4, a2);
      if (!v14)
      {
        if (v13)
        {
          if (v12)
          {
            if (v11 < 0)
              operator delete(__p);
            if (v9 < 0)
              operator delete(v8);
          }
          if (v7)
          {
            if (v6 < 0)
              operator delete(v5);
          }
        }
      }
    }
  }
}

void sub_20AF03878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AF0388C(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 80);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AF038A4(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 80);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AF038CC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638288);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638288))
    return qword_254638280;
  qword_254638280 = sub_20AECB130();
  __cxa_guard_release(&qword_254638288);
  return qword_254638280;
}

uint64_t *sub_20AF0392C(uint64_t *a1, void *lpsrc)
{
  uint64_t *result;
  uint64_t *v4[2];
  _QWORD *v5;
  uint64_t *v6[2];
  _QWORD *v7;
  char v8;

  result = (uint64_t *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F3478, 0);
  if (result)
  {
    v6[0] = a1 + 2;
    v6[1] = a1 + 6;
    v7 = a1 + 9;
    v4[0] = result + 2;
    v4[1] = result + 6;
    v5 = result + 9;
    result = (uint64_t *)sub_20B1F3BE8((uint64_t)&v8, v6, v4);
    if ((_DWORD)result)
      return (uint64_t *)(*v7 == *v5);
  }
  return result;
}

uint64_t sub_20AF039C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  const void *v26[2];
  char v27;

  __cxa_begin_catch(a1);
  sub_20AF04B34();
  sub_20AEC0D64(v26, "failed to compare equal");
  sub_20AECD224((std::string::size_type)&xmmword_2546383E0, v26, 0);
  if (v27 < 0)
    operator delete((void *)v26[0]);
  __cxa_end_catch();
  return 0;
}

CFTypeRef sub_20AF03A20(uint64_t a1)
{
  uint64_t v2;
  int v3;
  size_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  char v21;
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  void *__dst[2];
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29[3];
  char v30;
  char v31[8];
  _QWORD **v32;
  char *v33;

  sub_20AF04B34();
  v26 = a1;
  v2 = operator new();
  *(_QWORD *)(v2 + 272) = 0;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  sub_20AEC0BD8(v2);
  v27 = (_QWORD *)v2;
  v28 = (_QWORD *)(v2 + 16);
  v29[0] = a1 + 16;
  v29[1] = a1 + 48;
  v29[2] = a1 + 72;
  sub_20AEC01D0((_QWORD *)(v2 + 16), (uint64_t)"{", 1);
  v31[0] = 1;
  v32 = &v28;
  v33 = &v30;
  sub_20AFF5308(v29, (uint64_t)v31);
  sub_20AEC01D0(v28, (uint64_t)"}", 1);
  v3 = *(_DWORD *)(v2 + 120);
  if ((v3 & 0x10) != 0)
  {
    v6 = *(_QWORD *)(v2 + 112);
    v7 = *(_QWORD *)(v2 + 72);
    if (v6 < v7)
    {
      *(_QWORD *)(v2 + 112) = v7;
      v6 = v7;
    }
    v8 = *(const void **)(v2 + 64);
    v4 = v6 - (_QWORD)v8;
    if (v6 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      HIBYTE(v25) = 0;
      v5 = __dst;
      goto LABEL_14;
    }
    v8 = *(const void **)(v2 + 40);
    v4 = *(_QWORD *)(v2 + 56) - (_QWORD)v8;
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v5 = (void **)operator new(v9 + 1);
    __dst[1] = (void *)v4;
    v25 = v10 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_13;
  }
  HIBYTE(v25) = v4;
  v5 = __dst;
  if (v4)
LABEL_13:
    memmove(v5, v8, v4);
LABEL_14:
  *((_BYTE *)v5 + v4) = 0;
  v11 = v27;
  if (v27)
  {
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *v27 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)((char *)v11 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    v11[3] = MEMORY[0x24BEDB848] + 16;
    v11[2] = v14;
    if (*((char *)v11 + 111) < 0)
      operator delete((void *)v11[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v11 + 16);
    MEMORY[0x20BD3583C](v11, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)&xmmword_2546383E0, (uint64_t)" ", &v26, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v15 = cf;
  if (cf)
    CFRetain(cf);
  v16 = v23;
  if (!v23)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if ((v21 & 0x80000000) == 0)
      return v15;
  }
  else
  {
LABEL_26:
    if ((v21 & 0x80000000) == 0)
      return v15;
  }
  operator delete(__p);
  return v15;
}

uint64_t sub_20AF03D18(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  const void *v40[2];
  char v41;
  uint64_t v42;

  sub_20AEC147C((uint64_t)&v42);
  if (v41 < 0)
    operator delete((void *)v40[0]);
  __cxa_begin_catch(a1);
  sub_20AF04B34();
  sub_20AEC0D64(v40, "failed to create description");
  sub_20AECD224((std::string::size_type)&xmmword_2546383E0, v40, 0);
  if (v41 < 0)
    operator delete((void *)v40[0]);
  __cxa_end_catch();
  return 0;
}

uint64_t sub_20AF03DEC(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 80));
}

uint64_t sub_20AF03DF8(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 80);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AF03E10(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 80);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AF03E38()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546382F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546382F0))
    return qword_2546382E8;
  qword_2546382E8 = sub_20AECB130();
  __cxa_guard_release(&qword_2546382F0);
  return qword_2546382E8;
}

BOOL sub_20AF03E98(void *a1, void *lpsrc)
{
  void *v3;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F3570, 0);
  return v3 && v3 == a1;
}

CFTypeRef sub_20AF03EE0(uint64_t a1)
{
  uint64_t v2;
  int v3;
  size_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  char v21;
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  void *__dst[2];
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  sub_20AF072B0();
  v26 = a1;
  v2 = operator new();
  *(_QWORD *)(v2 + 272) = 0;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  sub_20AEC0BD8(v2);
  v27 = (_QWORD *)v2;
  sub_20AFEE4E4((_QWORD *)(v2 + 16), a1 + 16);
  v3 = *(_DWORD *)(v2 + 120);
  if ((v3 & 0x10) != 0)
  {
    v6 = *(_QWORD *)(v2 + 112);
    v7 = *(_QWORD *)(v2 + 72);
    if (v6 < v7)
    {
      *(_QWORD *)(v2 + 112) = v7;
      v6 = v7;
    }
    v8 = *(const void **)(v2 + 64);
    v4 = v6 - (_QWORD)v8;
    if (v6 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      HIBYTE(v25) = 0;
      v5 = __dst;
      goto LABEL_14;
    }
    v8 = *(const void **)(v2 + 40);
    v4 = *(_QWORD *)(v2 + 56) - (_QWORD)v8;
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v5 = (void **)operator new(v9 + 1);
    __dst[1] = (void *)v4;
    v25 = v10 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_13;
  }
  HIBYTE(v25) = v4;
  v5 = __dst;
  if (v4)
LABEL_13:
    memmove(v5, v8, v4);
LABEL_14:
  *((_BYTE *)v5 + v4) = 0;
  v11 = v27;
  if (v27)
  {
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *v27 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)((char *)v11 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    v11[3] = MEMORY[0x24BEDB848] + 16;
    v11[2] = v14;
    if (*((char *)v11 + 111) < 0)
      operator delete((void *)v11[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v11 + 16);
    MEMORY[0x20BD3583C](v11, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)&xmmword_2546384E8, (uint64_t)" ", &v26, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v15 = cf;
  if (cf)
    CFRetain(cf);
  v16 = v23;
  if (!v23)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if ((v21 & 0x80000000) == 0)
      return v15;
  }
  else
  {
LABEL_26:
    if ((v21 & 0x80000000) == 0)
      return v15;
  }
  operator delete(__p);
  return v15;
}

uint64_t sub_20AF04188(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  const void *v32[2];
  char v33;
  uint64_t v34;

  sub_20AEC147C((uint64_t)&v34);
  if (v33 < 0)
    operator delete((void *)v32[0]);
  __cxa_begin_catch(a1);
  sub_20AF072B0();
  sub_20AEC0D64(v32, "failed to create description");
  sub_20AECD224((std::string::size_type)&xmmword_2546384E8, v32, 0);
  if (v33 < 0)
    operator delete((void *)v32[0]);
  __cxa_end_catch();
  return 0;
}

uint64_t sub_20AF0425C(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 80));
}

uint64_t sub_20AF04268(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 168);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AF04280(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 168);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AF042A8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638318);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638318))
    return qword_254638310;
  qword_254638310 = sub_20AECB130();
  __cxa_guard_release(&qword_254638318);
  return qword_254638310;
}

BOOL sub_20AF04308(void *a1, void *lpsrc)
{
  void *v3;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F3648, 0);
  return v3 && v3 == a1;
}

CFTypeRef sub_20AF04350(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  int v5;
  size_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  char v23;
  CFTypeRef cf;
  std::__shared_weak_count *v25;
  void *__dst[2];
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30[2];
  unsigned __int8 v31;

  sub_20AF08BA8();
  v28 = a1;
  v2 = operator new();
  *(_QWORD *)(v2 + 272) = 0;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  sub_20AEC0BD8(v2);
  v29 = (_QWORD *)v2;
  sub_20AFF2D74(a1 + 32, v30);
  if ((v31 & 0x80u) == 0)
    v3 = v30;
  else
    v3 = (void **)v30[0];
  if ((v31 & 0x80u) == 0)
    v4 = v31;
  else
    v4 = (uint64_t)v30[1];
  sub_20AEC01D0((_QWORD *)(v2 + 16), (uint64_t)v3, v4);
  if (((char)v31 & 0x80000000) == 0)
  {
    v5 = *(_DWORD *)(v2 + 120);
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
LABEL_12:
    v8 = *(_QWORD *)(v2 + 112);
    v9 = *(_QWORD *)(v2 + 72);
    if (v8 < v9)
    {
      *(_QWORD *)(v2 + 112) = v9;
      v8 = v9;
    }
    v10 = *(const void **)(v2 + 64);
    v6 = v8 - (_QWORD)v10;
    if (v8 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_37;
    goto LABEL_15;
  }
  operator delete(v30[0]);
  v5 = *(_DWORD *)(v2 + 120);
  if ((v5 & 0x10) != 0)
    goto LABEL_12;
LABEL_9:
  if ((v5 & 8) == 0)
  {
    v6 = 0;
    HIBYTE(v27) = 0;
    v7 = __dst;
    goto LABEL_22;
  }
  v10 = *(const void **)(v2 + 40);
  v6 = *(_QWORD *)(v2 + 56) - (_QWORD)v10;
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_37:
    sub_20AEC0138();
LABEL_15:
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    v7 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v6;
    v27 = v12 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_21;
  }
  HIBYTE(v27) = v6;
  v7 = __dst;
  if (v6)
LABEL_21:
    memmove(v7, v10, v6);
LABEL_22:
  *((_BYTE *)v7 + v6) = 0;
  v13 = v29;
  if (v29)
  {
    v14 = MEMORY[0x24BEDB7F0];
    v15 = *MEMORY[0x24BEDB7F0];
    *v29 = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(v14 + 72);
    *(_QWORD *)((char *)v13 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(v14 + 64);
    v13[3] = MEMORY[0x24BEDB848] + 16;
    v13[2] = v16;
    if (*((char *)v13 + 111) < 0)
      operator delete((void *)v13[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v13 + 16);
    MEMORY[0x20BD3583C](v13, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)&xmmword_254638638, (uint64_t)" ", &v28, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v27) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v17 = cf;
  if (cf)
    CFRetain(cf);
  v18 = v25;
  if (!v25)
    goto LABEL_34;
  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if ((v23 & 0x80000000) == 0)
      return v17;
  }
  else
  {
LABEL_34:
    if ((v23 & 0x80000000) == 0)
      return v17;
  }
  operator delete(__p);
  return v17;
}

uint64_t sub_20AF04634(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  const void *v36[2];
  char v37;
  uint64_t v38;

  sub_20AEC147C((uint64_t)&v38);
  if (v37 < 0)
    operator delete((void *)v36[0]);
  __cxa_begin_catch(a1);
  sub_20AF08BA8();
  sub_20AEC0D64(v36, "failed to create description");
  sub_20AECD224((std::string::size_type)&xmmword_254638638, v36, 0);
  if (v37 < 0)
    operator delete((void *)v36[0]);
  __cxa_end_catch();
  return 0;
}

uint64_t sub_20AF04720(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 168));
}

uint64_t sub_20AF04730(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)a2[3];
  if (v2 == a2)
    return (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
  if (v2)
    return (*(uint64_t (**)(_QWORD))(*v2 + 40))(a2[3]);
  return result;
}

uint64_t sub_20AF04770(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void *v9;
  void (***v10)(_QWORD);
  BOOL v11;

  if (!*(_BYTE *)(a1 + 64))
    goto LABEL_13;
  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
    goto LABEL_13;
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(void **)(a1 + 40);
  if (v3 == v2)
    goto LABEL_12;
  do
  {
    v5 = *(_QWORD **)(v3 - 8);
    if ((_QWORD *)(v3 - 32) == v5)
    {
      v5 = (_QWORD *)(v3 - 32);
      v6 = 4;
LABEL_6:
      (*(void (**)(void))(*v5 + 8 * v6))();
      goto LABEL_7;
    }
    if (v5)
    {
      v6 = 5;
      goto LABEL_6;
    }
LABEL_7:
    *(_QWORD *)(v3 - 800) = &off_24C411BF8;
    sub_20B07AE6C(v3 - 784);
    v3 -= 800;
  }
  while (v3 != v2);
  v4 = *(void **)(a1 + 40);
LABEL_12:
  *(_QWORD *)(a1 + 48) = v2;
  operator delete(v4);
LABEL_13:
  if (*(_BYTE *)(a1 + 32))
  {
    v7 = *(void (****)(_QWORD))(a1 + 8);
    if (v7)
    {
      v8 = *(void (****)(_QWORD))(a1 + 16);
      v9 = *(void **)(a1 + 8);
      if (v8 != v7)
      {
        v10 = v8 - 96;
        do
        {
          (**v10)(v10);
          v11 = v10 == v7;
          v10 -= 96;
        }
        while (!v11);
        v9 = *(void **)(a1 + 8);
      }
      *(_QWORD *)(a1 + 16) = v7;
      operator delete(v9);
    }
  }
  return a1;
}

uint64_t sub_20AF04874(uint64_t a1)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  BOOL v6;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(void (****)(_QWORD))a1;
    if (*(_QWORD *)a1)
    {
      v3 = *(void (****)(_QWORD))(a1 + 8);
      v4 = *(void (****)(_QWORD))a1;
      if (v3 != v2)
      {
        v5 = v3 - 96;
        do
        {
          (**v5)(v5);
          v6 = v5 == v2;
          v5 -= 96;
        }
        while (!v6);
        v4 = *(void (****)(_QWORD))a1;
      }
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_20AF048EC(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 == v2)
    {
      v1[1] = v2;
      operator delete(v5);
    }
    else
    {
      do
      {
        v6 = (unsigned int *)*((_QWORD *)v4 - 2);
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
            v10 = v6 + 3;
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
          }
        }
        v13 = (std::__shared_weak_count *)*((_QWORD *)v4 - 4);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v4 -= 40;
      }
      while (v4 != v2);
      v16 = **a1;
      v1[1] = v2;
      operator delete(v16);
    }
  }
}

uint64_t sub_20AF04A10(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  if (*(_BYTE *)(a1 + 120))
  {
    v2 = *(unsigned int **)(a1 + 24);
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v9)
      return a1;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
      return a1;
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    return a1;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (*(_BYTE *)(a1 + 104))
    {
      if (*(char *)(a1 + 103) < 0)
        operator delete(*(void **)(a1 + 80));
      if (*(char *)(a1 + 71) < 0)
        operator delete(*(void **)(a1 + 48));
    }
    if (!*(_BYTE *)(a1 + 40) || (*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
    operator delete(*(void **)(a1 + 16));
    return a1;
  }
}

void sub_20AF04B34()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638290);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638290))
  {
    sub_20AF04BEC();
    if (byte_254638427 < 0)
    {
      sub_20AEC60F4(&xmmword_2546383E0, (void *)xmmword_254638410, *((unint64_t *)&xmmword_254638410 + 1));
    }
    else
    {
      xmmword_2546383E0 = xmmword_254638410;
      unk_2546383F0 = unk_254638420;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546383E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638290);
  }
}

void sub_20AF04BD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638290);
  _Unwind_Resume(a1);
}

void sub_20AF04BEC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254638298);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638298))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZFileExportOptions]", qword_2546383F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546383F8, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638298);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546382A0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2546382A0))
    {
      sub_20B531658((uint64_t)qword_2546383F8, (uint64_t)&xmmword_254638410);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638410, &dword_20AEBB000);
      __cxa_guard_release(&qword_2546382A0);
    }
  }
}

void sub_20AF04CBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546382A0);
  _Unwind_Resume(a1);
}

void sub_20AF04CD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638298);
  _Unwind_Resume(a1);
}

void sub_20AF04CEC()
{
  unsigned __int8 v0;
  __int128 *v1;
  const void **v2;
  int v3;
  size_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const void *v10;

  v0 = atomic_load((unsigned __int8 *)&qword_2546382B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546382B8))
  {
    v1 = sub_20AF04E74();
    v2 = (const void **)v1;
    v3 = *((char *)v1 + 23);
    if (v3 >= 0)
      v4 = *((unsigned __int8 *)v1 + 23);
    else
      v4 = *((_QWORD *)v1 + 1);
    v5 = v4 + 6;
    if (v4 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v5 >= 0x17)
    {
      v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v7 = v5 | 7;
      v8 = v7 + 1;
      v9 = (char *)operator new(v7 + 1);
      qword_254638460 = v4 + 6;
      unk_254638468 = v8 | 0x8000000000000000;
      qword_254638458 = (uint64_t)v9;
      *(_DWORD *)v9 = 1936617315;
      *((_WORD *)v9 + 2) = 8308;
      v6 = v9 + 6;
    }
    else
    {
      qword_254638460 = 0;
      unk_254638468 = 0;
      qword_254638458 = 0x2074736E6F63;
      byte_25463846F = v4 + 6;
      v6 = (char *)&qword_254638458 + 6;
      if (!v4)
      {
LABEL_18:
        v6[v4] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254638458, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546382B8);
        return;
      }
    }
    if (v3 >= 0)
      v10 = v2;
    else
      v10 = *v2;
    memmove(v6, v10, v4);
    goto LABEL_18;
  }
}

void sub_20AF04E5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546382B8);
  _Unwind_Resume(a1);
}

__int128 *sub_20AF04E74()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630E98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630E98))
    return &xmmword_254630E80;
  v2 = (char *)sub_20AF04F50();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254630E80, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254630E90 = *((_QWORD *)v2 + 2);
    xmmword_254630E80 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630E80, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630E98);
  return &xmmword_254630E80;
}

void sub_20AF04F38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630E98);
  _Unwind_Resume(a1);
}

void *sub_20AF04F50()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254630EB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630EB8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZLogMessageFilter]", qword_254630EA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630EA0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630EB8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254630ED8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254630ED8))
    return &unk_254630EC0;
  sub_20B531658((uint64_t)qword_254630EA0, (uint64_t)&unk_254630EC0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254630EC0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630ED8);
  return &unk_254630EC0;
}

void sub_20AF05040(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630ED8);
  _Unwind_Resume(a1);
}

void sub_20AF05058(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630EB8);
  _Unwind_Resume(a1);
}

uint64_t sub_20AF05070(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    sub_20AF0516C((_QWORD *)a1, (uint64_t *)a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_20AF050D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;

  if (*(_BYTE *)(v13 + 24))
  {
    v15 = *(_DWORD **)v13;
    if (*(_QWORD *)v13)
    {
      v16 = *(_DWORD **)(v13 + 8);
      v17 = *(_DWORD **)v13;
      if (v16 != v15)
      {
        do
        {
          if (*((_BYTE *)v16 - 8))
          {
            v18 = *(v16 - 4);
            if ((_DWORD)v18 != -1)
              ((void (*)(char *, _DWORD *))off_24C3F3698[v18])(&a13, v16 - 12);
            *(v16 - 4) = -1;
          }
          *((_QWORD *)v16 - 102) = &off_24C411BF8;
          sub_20B07AE6C((uint64_t)(v16 - 200));
          v16 -= 204;
        }
        while (v16 != v15);
        v17 = *(_DWORD **)v13;
      }
      *(_QWORD *)(v13 + 8) = v15;
      operator delete(v17);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20AF0516C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xFAFAFAFAFAFAFAFBLL * (v6 >> 4);
    if (v7 >= 0x50505050505051)
      sub_20AEC60B8();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[816 * v7];
    a1[1] = sub_20AF052D0(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_20AF05230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  void *v14;
  _DWORD *v16;
  _DWORD *v17;
  void *v18;
  uint64_t v19;

  v13[1] = v14;
  v16 = *v13;
  if (*v13)
  {
    v17 = v13[1];
    v18 = *v13;
    if (v17 != v16)
    {
      do
      {
        if (*((_BYTE *)v17 - 8))
        {
          v19 = *(v17 - 4);
          if ((_DWORD)v19 != -1)
            ((void (*)(char *, _DWORD *))off_24C3F3698[v19])(&a13, v17 - 12);
          *(v17 - 4) = -1;
        }
        *((_QWORD *)v17 - 102) = &off_24C411BF8;
        sub_20B07AE6C((uint64_t)(v17 - 200));
        v17 -= 204;
      }
      while (v17 != v16);
      v18 = *v13;
    }
    v13[1] = v16;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AF052D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _BYTE v11[2];

  v4 = a4;
  v10 = a4;
  if (a2 != a3)
  {
    v6 = a2 + 768;
    do
    {
      *(_QWORD *)v4 = &off_24C411BF8;
      sub_20AF054F8(v4 + 16, v6 - 752);
      *(_BYTE *)(v4 + 768) = 0;
      *(_BYTE *)(v4 + 808) = 0;
      if (*(_BYTE *)(v6 + 40))
      {
        *(_BYTE *)(v4 + 768) = 0;
        *(_DWORD *)(v4 + 800) = -1;
        v8 = *(unsigned int *)(v6 + 32);
        if ((_DWORD)v8 != -1)
        {
          ((void (*)(_BYTE *, uint64_t, uint64_t))off_24C3F3748[v8])(v11, v4 + 768, v6);
          *(_DWORD *)(v4 + 800) = v8;
        }
        *(_BYTE *)(v4 + 808) = 1;
      }
      v4 = v10 + 816;
      v10 += 816;
      v7 = v6 + 48;
      v6 += 816;
    }
    while (v7 != a3);
  }
  return v4;
}

void sub_20AF053D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v24 = *(unsigned int *)(v19 + 800);
  if ((_DWORD)v24 != -1)
    ((void (*)(char *, uint64_t))off_24C3F3698[v24])(&a19, v21);
  *(_DWORD *)(v19 + 800) = -1;
  *(_QWORD *)v19 = v22;
  sub_20B07AE6C(v20);
  sub_20AF05438((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20AF05424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AF05438((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20AF05438(uint64_t a1)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  char v8;

  if (!*(_BYTE *)(a1 + 24))
  {
    v4 = *(uint64_t **)(a1 + 8);
    v3 = *(uint64_t **)(a1 + 16);
    v5 = *v3;
    for (i = *v4; v5 != i; v5 -= 816)
    {
      if (*(_BYTE *)(v5 - 8))
      {
        v7 = *(unsigned int *)(v5 - 16);
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, uint64_t))off_24C3F3698[v7])(&v8, v5 - 48);
        *(_DWORD *)(v5 - 16) = -1;
      }
      *(_QWORD *)(v5 - 816) = &off_24C411BF8;
      sub_20B07AE6C(v5 - 800);
    }
  }
  return a1;
}

uint64_t sub_20AF054F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v20[2];
  _BYTE v21[2];
  _BYTE v22[2];
  _BYTE v23[2];
  _BYTE v24[2];
  _BYTE v25[2];
  _BYTE v26[2];

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 40) = -1;
    v4 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24C3F36B8[v4])(v20, a1 + 8, a2 + 8);
      *(_DWORD *)(a1 + 40) = v4;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  v5 = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v5;
  sub_20AF05DDC((_BYTE *)(a1 + 72), (__int128 *)(a2 + 72));
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    *(_BYTE *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 144) = -1;
    v6 = *(unsigned int *)(a2 + 144);
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24C3F36D8[v6])(v21, a1 + 120, a2 + 120);
      *(_DWORD *)(a1 + 144) = v6;
    }
    *(_BYTE *)(a1 + 152) = 1;
  }
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  if (*(_BYTE *)(a2 + 224))
  {
    *(_BYTE *)(a1 + 160) = 0;
    *(_DWORD *)(a1 + 216) = -1;
    v7 = *(unsigned int *)(a2 + 216);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24C3F36F8[v7])(v22, a1 + 160, a2 + 160);
      *(_DWORD *)(a1 + 216) = v7;
    }
    *(_BYTE *)(a1 + 224) = 1;
  }
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  if (*(_BYTE *)(a2 + 256))
  {
    v9 = *(_QWORD *)(a2 + 240);
    v8 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 232) = &off_24C411E78;
    *(_QWORD *)(a1 + 240) = v9;
    *(_QWORD *)(a1 + 248) = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *(_BYTE *)(a1 + 256) = 1;
  }
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  if (*(_BYTE *)(a2 + 312))
  {
    *(_BYTE *)(a1 + 272) = 0;
    *(_DWORD *)(a1 + 304) = -1;
    v12 = *(unsigned int *)(a2 + 304);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24C3F36B8[v12])(v23, a1 + 272, a2 + 272);
      *(_DWORD *)(a1 + 304) = v12;
    }
    *(_BYTE *)(a1 + 312) = 1;
  }
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  if (*(_BYTE *)(a2 + 416))
  {
    *(_BYTE *)(a1 + 336) = 0;
    *(_DWORD *)(a1 + 400) = -1;
    v13 = *(unsigned int *)(a2 + 400);
    if ((_DWORD)v13 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24C3F3718[v13])(v24, a1 + 336, a2 + 336);
      *(_DWORD *)(a1 + 400) = v13;
    }
    *(_BYTE *)(a1 + 416) = 1;
  }
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  if (*(_BYTE *)(a2 + 576))
  {
    *(_BYTE *)(a1 + 448) = 0;
    *(_DWORD *)(a1 + 560) = -1;
    v14 = *(unsigned int *)(a2 + 560);
    if ((_DWORD)v14 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24C3F3738[v14])(v25, a1 + 448, a2 + 448);
      *(_DWORD *)(a1 + 560) = v14;
    }
    *(_BYTE *)(a1 + 576) = 1;
  }
  sub_20AF062C4((_BYTE *)(a1 + 592), a2 + 592);
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 680) = 0;
  if (*(_BYTE *)(a2 + 680))
  {
    *(_BYTE *)(a1 + 640) = 0;
    *(_DWORD *)(a1 + 672) = -1;
    v15 = *(unsigned int *)(a2 + 672);
    if ((_DWORD)v15 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24C3F36B8[v15])(v26, a1 + 640, a2 + 640);
      *(_DWORD *)(a1 + 672) = v15;
    }
    *(_BYTE *)(a1 + 680) = 1;
  }
  v16 = *(_OWORD *)(a2 + 688);
  v17 = *(_OWORD *)(a2 + 704);
  v18 = *(_OWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 729) = *(_OWORD *)(a2 + 729);
  *(_OWORD *)(a1 + 704) = v17;
  *(_OWORD *)(a1 + 720) = v18;
  *(_OWORD *)(a1 + 688) = v16;
  return a1;
}

void sub_20AF05828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v21 = *(unsigned int *)(v13 + 672);
  if ((_DWORD)v21 != -1)
    ((void (*)(char *, uint64_t))off_24C3F36A8[v21])(&a13, v19);
  *(_DWORD *)(v13 + 672) = -1;
  sub_20AF05A24(v18);
  sub_20AF05AD0(v13 + 432);
  sub_20AF05B30(v13 + 320);
  sub_20AF05B90(v13 + 264);
  if (*(_BYTE *)(v13 + 256))
    sub_20B216B00(v17);
  sub_20AF05BF0(v16);
  sub_20AF05C50(v15);
  sub_20AF05CB0(v14);
  sub_20AF05B90(v13);
  _Unwind_Resume(a1);
}

void sub_20AF05A10(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AF05B90(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20AF05A24(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v2 = *(void ***)a1;
      if (*(_QWORD *)a1)
      {
        v3 = *(void ***)(a1 + 8);
        v4 = *(void ***)a1;
        if (v3 == v2)
        {
LABEL_15:
          *(_QWORD *)(a1 + 8) = v2;
          operator delete(v4);
          return a1;
        }
        while (1)
        {
          if (*((_BYTE *)v3 - 16) && *((char *)v3 - 41) < 0)
          {
            operator delete(*(v3 - 8));
            if (*((_BYTE *)v3 - 72))
            {
LABEL_10:
              if (*((char *)v3 - 73) < 0)
                operator delete(*(v3 - 12));
            }
          }
          else if (*((_BYTE *)v3 - 72))
          {
            goto LABEL_10;
          }
          v3 -= 12;
          if (v3 == v2)
          {
            v4 = *(void ***)a1;
            goto LABEL_15;
          }
        }
      }
    }
  }
  return a1;
}

uint64_t sub_20AF05AD0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 144))
  {
    v2 = *(unsigned int *)(a1 + 128);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C3F3728[v2])(&v4, a1 + 16);
    *(_DWORD *)(a1 + 128) = -1;
  }
  return a1;
}

uint64_t sub_20AF05B30(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 96))
  {
    v2 = *(unsigned int *)(a1 + 80);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C3F3708[v2])(&v4, a1 + 16);
    *(_DWORD *)(a1 + 80) = -1;
  }
  return a1;
}

uint64_t sub_20AF05B90(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C3F36A8[v2])(&v4, a1 + 8);
    *(_DWORD *)(a1 + 40) = -1;
  }
  return a1;
}

uint64_t sub_20AF05BF0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C3F36E8[v2])(&v4, a1);
    *(_DWORD *)(a1 + 56) = -1;
  }
  return a1;
}

uint64_t sub_20AF05C50(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C3F36C8[v2])(&v4, a1);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

uint64_t sub_20AF05CB0(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 40) && *(_BYTE *)(result + 32) && *(char *)(result + 23) < 0)
  {
    operator delete(*(void **)result);
    return v1;
  }
  return result;
}

void sub_20AF05D00(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
  }
}

void sub_20AF05D1C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void *sub_20AF05D30(int a1, _BYTE *__dst, __int128 *a3)
{
  __int128 v4;
  void *result;

  *__dst = 0;
  __dst[24] = 0;
  if (*((_BYTE *)a3 + 24))
  {
    if (*((char *)a3 + 23) < 0)
    {
      result = sub_20AEC60F4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      v4 = *a3;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)__dst = v4;
    }
    __dst[24] = 1;
  }
  return result;
}

void sub_20AF05D8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20AF05DB0(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_20AEC60F4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

_BYTE *sub_20AF05DDC(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;

  *__dst = 0;
  __dst[40] = 0;
  if (*((_BYTE *)a2 + 40))
  {
    *__dst = 0;
    __dst[32] = 0;
    if (*((_BYTE *)a2 + 32))
    {
      if (*((char *)a2 + 23) < 0)
      {
        sub_20AEC60F4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v4 = *a2;
        *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
        *(_OWORD *)__dst = v4;
      }
      *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
      __dst[32] = 1;
    }
    __dst[40] = 1;
  }
  return __dst;
}

void sub_20AF05E60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 32) && *(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  if (*(_BYTE *)(v1 + 40) && *(_BYTE *)(v1 + 32) && *(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20AF05EA4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_20AF05EB8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void *sub_20AF05ECC(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_20AEC60F4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

void *sub_20AF05EF8(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_20AEC60F4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

void sub_20AF05F24(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 48) && *(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_20AF05F70(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

_BYTE *sub_20AF05F84(int a1, _BYTE *__dst, __int128 *a3)
{
  return sub_20AF05FBC(__dst, a3);
}

void *sub_20AF05F90(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_20AEC60F4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

_BYTE *sub_20AF05FBC(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;
  char *v5;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    __dst[24] = 0;
    v5 = __dst + 24;
    __dst[48] = 0;
    if (!*((_BYTE *)a2 + 48))
      return __dst;
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    __dst[24] = 0;
    v5 = __dst + 24;
    __dst[48] = 0;
    if (!*((_BYTE *)a2 + 48))
      return __dst;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_20AEC60F4(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v7;
  }
  __dst[48] = 1;
  return __dst;
}

void sub_20AF0607C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 48) && *(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20AF060B0(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
  }
}

void sub_20AF060CC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void *sub_20AF060E0(int a1, _BYTE *__dst, __int128 *a3)
{
  __int128 v5;
  void *result;
  unsigned __int128 *v7;
  unsigned __int128 v8;

  *__dst = 0;
  __dst[48] = 0;
  if (*((_BYTE *)a3 + 48))
  {
    if (*((char *)a3 + 23) < 0)
    {
      result = sub_20AEC60F4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      v5 = *a3;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)__dst = v5;
    }
    v7 = (unsigned __int128 *)(a3 + 2);
    do
      v8 = __ldaxp(v7);
    while (__stlxp(v8, v7));
    *((_OWORD *)__dst + 2) = v8;
    __dst[48] = 1;
  }
  return result;
}

void sub_20AF06154(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 48))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20AF06178(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_20AEC60F4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

void sub_20AF061A4(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 96))
  {
    if (*(_BYTE *)(a2 + 80) && *(char *)(a2 + 55) < 0)
      operator delete(*(void **)(a2 + 32));
    if (*(_BYTE *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
    }
  }
}

void sub_20AF06200(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

_BYTE *sub_20AF06214(int a1, _BYTE *__dst, uint64_t a3)
{
  _BYTE *result;

  *__dst = 0;
  __dst[96] = 0;
  if (*(_BYTE *)(a3 + 96))
  {
    result = sub_20AED3B1C(__dst, (__int128 *)a3);
    __dst[96] = 1;
  }
  return result;
}

void sub_20AF06254(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 96))
  {
    if (*(_BYTE *)(v1 + 80) && *(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    if (*(_BYTE *)(v1 + 24))
    {
      if (*(char *)(v1 + 23) < 0)
        operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_20AF06298(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_20AEC60F4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

_BYTE *sub_20AF062C4(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    sub_20AED3838((uint64_t)a1, a2);
    a1[32] = 1;
  }
  return a1;
}

void sub_20AF0630C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v3;
  void **v4;
  void **v5;

  if (*(_BYTE *)(v1 + 32))
  {
    if (*(_BYTE *)(v1 + 24))
    {
      v3 = *(void ***)v1;
      if (*(_QWORD *)v1)
      {
        v4 = *(void ***)(v1 + 8);
        v5 = *(void ***)v1;
        if (v4 != v3)
        {
          do
          {
            if (*((_BYTE *)v4 - 16) && *((char *)v4 - 41) < 0)
              operator delete(*(v4 - 8));
            if (*((_BYTE *)v4 - 72))
            {
              if (*((char *)v4 - 73) < 0)
                operator delete(*(v4 - 12));
            }
            v4 -= 12;
          }
          while (v4 != v3);
          v5 = *(void ***)v1;
        }
        *(_QWORD *)(v1 + 8) = v3;
        operator delete(v5);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20AF06390(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t sub_20AF0639C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a3 + 24);
  if (result)
  {
    if (result == a3)
    {
      *(_QWORD *)(a2 + 24) = a2;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a2);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a2 + 24) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

void sub_20AF06408()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546382C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546382C0))
  {
    sub_20AF064C0();
    if (byte_25463849F < 0)
    {
      sub_20AEC60F4(&xmmword_254638470, (void *)qword_254638488, unk_254638490);
    }
    else
    {
      xmmword_254638470 = *(_OWORD *)&qword_254638488;
      qword_254638480 = unk_254638498;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638470, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546382C0);
  }
}

void sub_20AF064A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546382C0);
  _Unwind_Resume(a1);
}

void sub_20AF064C0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2546382C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546382C8))
  {
    sub_20AF066C8(__p);
    sub_20AF06594((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254638488, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546382C8);
  }
}

void sub_20AF06554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546382C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546382C8);
  _Unwind_Resume(a1);
}

void sub_20AF06594(char *a1)
{
  __int128 *v2;
  __int128 v3;
  int64x2_t v4;
  int8x16_t v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;
  void *__dst[2];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20AF068A4();
  if (*((char *)v2 + 23) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *v2;
    v12 = *((_QWORD *)v2 + 2);
    *(_OWORD *)__dst = v3;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, (std::string *)&qword_254638488, v4, v5);
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v12) < 0)
    operator delete(__dst[0]);
}

void sub_20AF06690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90((void **)&a9);
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AF066C8(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546382D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546382D0))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::optional<cv3d::vl::visual_logger::FileExportOptions>]", qword_2546384A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546384A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546382D0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2546382D8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2546382D8))
  {
    v5 = sub_20AED4780(qword_2546384A0, "<", 0);
    sub_20AED467C(qword_2546384A0, 0, v5, qword_2546384B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546384B8, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546382D8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546382E0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546382E0))
  {
    sub_20B531658((uint64_t)qword_2546384B8, (uint64_t)&xmmword_2546384D0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546384D0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546382E0);
  }
  if (byte_2546384E7 < 0)
  {
    sub_20AEC60F4(__dst, (void *)xmmword_2546384D0, *((unint64_t *)&xmmword_2546384D0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2546384D0;
    __dst[2] = unk_2546384E0;
  }
}

void sub_20AF0685C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546382E0);
  _Unwind_Resume(a1);
}

void sub_20AF06874(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546382D8);
  _Unwind_Resume(a1);
}

void sub_20AF0688C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546382D0);
  _Unwind_Resume(a1);
}

__int128 *sub_20AF068A4()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630EF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630EF8))
    return &xmmword_254630EE0;
  v2 = (char *)sub_20AF06980();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254630EE0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254630EF0 = *((_QWORD *)v2 + 2);
    xmmword_254630EE0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630EE0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630EF8);
  return &xmmword_254630EE0;
}

void sub_20AF06968(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630EF8);
  _Unwind_Resume(a1);
}

void *sub_20AF06980()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254630F18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630F18))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vl::visual_logger::FileExportOptions]", qword_254630F00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630F00, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630F18);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254630F38);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254630F38))
    return &unk_254630F20;
  sub_20B531658((uint64_t)qword_254630F00, (uint64_t)&unk_254630F20);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254630F20, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630F38);
  return &unk_254630F20;
}

void sub_20AF06A70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630F38);
  _Unwind_Resume(a1);
}

void sub_20AF06A88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630F18);
  _Unwind_Resume(a1);
}

void sub_20AF06AA0(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  __int128 v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t *v9;
  __int128 v10;
  void **v11;
  void **v12;
  void *v13;
  _BYTE v14[16];
  void *__p;
  char v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  char v23;
  char v24;
  void *v25;
  void **v26;
  void *__dst[2];
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AEDF9CC();
  v5 = sub_20AEE888C();
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(__dst, (void *)*v5, v5[1]);
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v28 = v5[2];
    *(_OWORD *)__dst = v6;
  }
  sub_20AF06408();
  if (SHIBYTE(qword_254638480) < 0)
  {
    sub_20AEC60F4(&v29, (void *)xmmword_254638470, *((unint64_t *)&xmmword_254638470 + 1));
  }
  else
  {
    v29 = xmmword_254638470;
    v30 = qword_254638480;
  }
  v7 = sub_20AEE0FFC();
  if (*((char *)v7 + 23) < 0)
  {
    sub_20AEC60F4(&v31, (void *)*v7, v7[1]);
  }
  else
  {
    v8 = *(_OWORD *)v7;
    v32 = v7[2];
    v31 = v8;
  }
  v9 = sub_20AF06DF8();
  if (*((char *)v9 + 23) < 0)
  {
    sub_20AEC60F4(&v33, (void *)*v9, v9[1]);
  }
  else
  {
    v10 = *(_OWORD *)v9;
    v34 = v9[2];
    v33 = v10;
  }
  sub_20AEC7620(&v25, (uint64_t)__dst, 4uLL);
  sub_20AECF9B0(v14, a2);
  sub_20AECD798(v4, (__int128 **)&v25, (uint64_t)v14, **a1);
  if (!v24 || !v23)
    goto LABEL_21;
  if (!v22)
    goto LABEL_18;
  if ((v21 & 0x80000000) == 0)
  {
    if ((v19 & 0x80000000) == 0)
      goto LABEL_18;
LABEL_39:
    operator delete(v18);
    if (!v17)
      goto LABEL_21;
    goto LABEL_19;
  }
  operator delete(v20);
  if (v19 < 0)
    goto LABEL_39;
LABEL_18:
  if (!v17)
    goto LABEL_21;
LABEL_19:
  if (v16 < 0)
    operator delete(__p);
LABEL_21:
  v11 = (void **)v25;
  if (v25)
  {
    v12 = v26;
    v13 = v25;
    if (v26 != v25)
    {
      do
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
      while (v12 != v11);
      v13 = v25;
    }
    v26 = v11;
    operator delete(v13);
  }
  if (SHIBYTE(v34) < 0)
  {
    operator delete((void *)v33);
    if ((SHIBYTE(v32) & 0x80000000) == 0)
    {
LABEL_31:
      if ((SHIBYTE(v30) & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(v32) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete((void *)v31);
  if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v28) & 0x80000000) == 0)
      return;
LABEL_37:
    operator delete(__dst[0]);
    return;
  }
LABEL_36:
  operator delete((void *)v29);
  if (SHIBYTE(v28) < 0)
    goto LABEL_37;
}

void sub_20AF06D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  sub_20AECDEE0((uint64_t)&a10);
  sub_20AEC2E90(&a26);
  if (a52 < 0)
  {
    operator delete(__p);
    if ((a46 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a40 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a46 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a41);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a34 & 0x80000000) == 0)
LABEL_10:
      _Unwind_Resume(a1);
LABEL_9:
    operator delete(a29);
    _Unwind_Resume(a1);
  }
LABEL_8:
  operator delete(a35);
  if ((a34 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_20AF06DD0()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20AF06DC8);
  }
}

uint64_t *sub_20AF06DF8()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630F58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630F58))
  {
    v2 = sub_20AF06F3C();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v7 = &qword_254630F40;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254630F48 = v5 + 1;
      unk_254630F50 = v9 | 0x8000000000000000;
      qword_254630F40 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254630F48 = 0;
      unk_254630F50 = 0;
      qword_254630F40 = 0;
      byte_254630F57 = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630F40, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630F58);
        return &qword_254630F40;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630F40;
}

void sub_20AF06F24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630F58);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AF06F3C()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254630F78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630F78))
  {
    v2 = sub_20AF070B4();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254630F68 = v5 + 6;
      unk_254630F70 = v9 | 0x8000000000000000;
      qword_254630F60 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254630F68 = 0;
      unk_254630F70 = 0;
      qword_254630F60 = 0x2074736E6F63;
      byte_254630F77 = v5 + 6;
      v7 = (char *)&qword_254630F60 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630F60, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630F78);
        return &qword_254630F60;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254630F60;
}

void sub_20AF0709C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630F78);
  _Unwind_Resume(a1);
}

__int128 *sub_20AF070B4()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630F98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630F98))
    return &xmmword_254630F80;
  v2 = (char *)sub_20AF07190();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254630F80, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254630F90 = *((_QWORD *)v2 + 2);
    xmmword_254630F80 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630F80, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630F98);
  return &xmmword_254630F80;
}

void sub_20AF07178(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630F98);
  _Unwind_Resume(a1);
}

void *sub_20AF07190()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254630FB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254630FB8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::nullopt_t]", qword_254630FA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254630FA0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630FB8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254630FD8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254630FD8))
    return &unk_254630FC0;
  sub_20B531658((uint64_t)qword_254630FA0, (uint64_t)&unk_254630FC0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254630FC0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630FD8);
  return &unk_254630FC0;
}

void sub_20AF07280(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630FD8);
  _Unwind_Resume(a1);
}

void sub_20AF07298(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630FB8);
  _Unwind_Resume(a1);
}

void sub_20AF072B0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546382F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546382F8))
  {
    sub_20AF07368();
    if (byte_25463852F < 0)
    {
      sub_20AEC60F4(&xmmword_2546384E8, (void *)xmmword_254638518, *((unint64_t *)&xmmword_254638518 + 1));
    }
    else
    {
      xmmword_2546384E8 = xmmword_254638518;
      qword_2546384F8 = unk_254638528;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546384E8, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546382F8);
  }
}

void sub_20AF07350(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546382F8);
  _Unwind_Resume(a1);
}

void sub_20AF07368()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254638300);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638300))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZFileImportOptions]", qword_254638500);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254638500, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638300);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254638308);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254638308))
    {
      sub_20B531658((uint64_t)qword_254638500, (uint64_t)&xmmword_254638518);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638518, &dword_20AEBB000);
      __cxa_guard_release(&qword_254638308);
    }
  }
}

void sub_20AF07438(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638308);
  _Unwind_Resume(a1);
}

void sub_20AF07450(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638300);
  _Unwind_Resume(a1);
}

uint64_t sub_20AF07468(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    sub_20AF07600(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 8));
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    sub_20AF077AC((_QWORD *)(a1 + 32), (uint64_t *)(a2 + 32));
    *(_BYTE *)(a1 + 56) = 1;
  }
  return a1;
}

void sub_20AF0750C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  uint64_t v8;

  if (!*(_BYTE *)(v1 + 56))
    goto LABEL_13;
  v4 = (char *)*v2;
  if (!*v2)
    goto LABEL_13;
  v5 = *(char **)(v1 + 40);
  v6 = *v2;
  if (v5 == v4)
    goto LABEL_12;
  while (1)
  {
    v7 = (char *)*((_QWORD *)v5 - 1);
    if (v5 - 32 == v7)
    {
      v7 = v5 - 32;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_7;
      v8 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_7:
    *((_QWORD *)v5 - 100) = &off_24C411BF8;
    sub_20B07AE6C((uint64_t)(v5 - 784));
    v5 -= 800;
    if (v5 == v4)
    {
      v6 = *v2;
LABEL_12:
      *(_QWORD *)(v1 + 40) = v4;
      operator delete(v6);
LABEL_13:
      sub_20AF04874(v1);
      _Unwind_Resume(a1);
    }
  }
}

void sub_20AF075A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  BOOL v7;

  if (*(_BYTE *)(v1 + 24))
  {
    v3 = *(void (****)(_QWORD))v1;
    if (*(_QWORD *)v1)
    {
      v4 = *(void (****)(_QWORD))(v1 + 8);
      v5 = *(void (****)(_QWORD))v1;
      if (v4 != v3)
      {
        v6 = v4 - 96;
        do
        {
          (**v6)(v6);
          v7 = v6 == v3;
          v6 -= 96;
        }
        while (!v7);
        v5 = *(void (****)(_QWORD))v1;
      }
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v5);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AF07600(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x55555555555556)
      sub_20AEC60B8();
    result = (uint64_t)operator new(768 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 768 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        *(_QWORD *)(v8 + v9) = &off_24C411BF8;
        result = sub_20AF054F8(v8 + v9 + 16, a2 + v9 + 16);
        v9 += 768;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20AF076CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20AF07718(&a9);
  _Unwind_Resume(a1);
}

void sub_20AF076E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 768)
    (**(void (***)(uint64_t))(v10 - 768 + v11))(v10 - 768 + v11);
  *(_QWORD *)(v9 + 8) = v10;
  sub_20AF07718(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20AF07718(void ***result)
{
  void ***v1;
  void **v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;
  void (***v6)(_QWORD);
  BOOL v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void (***)(_QWORD))**result;
    if (v3)
    {
      v4 = (void (***)(_QWORD))v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        v6 = v4 - 96;
        do
        {
          (**v6)(v6);
          v7 = v6 == v3;
          v6 -= 96;
        }
        while (!v7);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_20AF077AC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0x8F5C28F5C28F5C29 * (v6 >> 5);
    if (v7 >= 0x51EB851EB851ECLL)
      sub_20AEC60B8();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[800 * v7];
    a1[1] = sub_20AF078F4(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_20AF07860(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  uint64_t v8;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (!*v1)
    goto LABEL_12;
  v5 = (char *)v1[1];
  v6 = *v1;
  if (v5 == v4)
    goto LABEL_11;
  while (1)
  {
    v7 = (char *)*((_QWORD *)v5 - 1);
    if (v5 - 32 == v7)
    {
      v7 = v5 - 32;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_6;
      v8 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_6:
    *((_QWORD *)v5 - 100) = &off_24C411BF8;
    sub_20B07AE6C((uint64_t)(v5 - 784));
    v5 -= 800;
    if (v5 == v4)
    {
      v6 = *v1;
LABEL_11:
      v1[1] = v4;
      operator delete(v6);
LABEL_12:
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_20AF078F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  if (a2 != a3)
  {
    v7 = 0;
    while (1)
    {
      *(_QWORD *)(a4 + v7) = &off_24C411BF8;
      sub_20AF054F8(a4 + v7 + 16, a2 + v7 + 16);
      v8 = *(_QWORD *)(a2 + v7 + 792);
      if (v8)
      {
        if (a2 + v7 + 768 == v8)
        {
          *(_QWORD *)(a4 + v7 + 792) = a4 + v7 + 768;
          (*(void (**)(_QWORD))(**(_QWORD **)(a2 + v7 + 792) + 24))(*(_QWORD *)(a2 + v7 + 792));
          goto LABEL_5;
        }
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      }
      *(_QWORD *)(a4 + v7 + 792) = v8;
LABEL_5:
      v7 += 800;
      if (a2 + v7 == a3)
      {
        a4 += v7;
        return a4;
      }
    }
  }
  return a4;
}

void sub_20AF079C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)(v1 + v2) = v3;
  sub_20B07AE6C(v1 + v2 + 16);
  if (!v2)
LABEL_2:
    _Unwind_Resume(a1);
  while (1)
  {
    v5 = *(_QWORD **)(v1 + v2 - 8);
    if ((_QWORD *)(v1 + v2 - 32) == v5)
    {
      v5 = (_QWORD *)(v1 + v2 - 32);
      v6 = 4;
    }
    else
    {
      if (!v5)
        goto LABEL_5;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_5:
    *(_QWORD *)(v1 + v2 - 800) = v3;
    sub_20B07AE6C(v1 + v2 - 784);
    v2 -= 800;
    if (!v2)
      goto LABEL_2;
  }
}

void sub_20AF07A38()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638320);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638320))
  {
    sub_20AF07AF0();
    if (byte_25463855F < 0)
    {
      sub_20AEC60F4(&xmmword_254638530, (void *)qword_254638548, unk_254638550);
    }
    else
    {
      xmmword_254638530 = *(_OWORD *)&qword_254638548;
      qword_254638540 = unk_254638558;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638530, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638320);
  }
}

void sub_20AF07AD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638320);
  _Unwind_Resume(a1);
}

void sub_20AF07AF0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254638328);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638328))
  {
    sub_20AF07D98(__p);
    sub_20AF07BC4((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254638548, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638328);
  }
}

void sub_20AF07B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254638328);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254638328);
  _Unwind_Resume(a1);
}

void sub_20AF07BC4(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254638330);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254638330))
  {
    sub_20AF07F74();
    if (byte_2546385A7 < 0)
    {
      sub_20AEC60F4(&xmmword_254638560, (void *)xmmword_254638590, *((unint64_t *)&xmmword_254638590 + 1));
    }
    else
    {
      xmmword_254638560 = xmmword_254638590;
      unk_254638570 = unk_2546385A0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638560, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638330);
  }
  if (byte_254638577 < 0)
  {
    sub_20AEC60F4(__dst, (void *)xmmword_254638560, *((unint64_t *)&xmmword_254638560 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254638560;
    v11 = unk_254638570;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, (std::string *)&qword_254638548, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20AF07D50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638330);
  _Unwind_Resume(a1);
}

void sub_20AF07D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AF07D98(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254638348);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254638348))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::optional<cv3d::vl::visual_logger::FileImportOptions>]", qword_2546385A8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546385A8, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638348);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254638350);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254638350))
  {
    v5 = sub_20AED4780(qword_2546385A8, "<", 0);
    sub_20AED467C(qword_2546385A8, 0, v5, qword_2546385C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546385C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638350);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254638358);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254638358))
  {
    sub_20B531658((uint64_t)qword_2546385C0, (uint64_t)&xmmword_2546385D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546385D8, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638358);
  }
  if (byte_2546385EF < 0)
  {
    sub_20AEC60F4(__dst, (void *)xmmword_2546385D8, *((unint64_t *)&xmmword_2546385D8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2546385D8;
    __dst[2] = unk_2546385E8;
  }
}

void sub_20AF07F2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638358);
  _Unwind_Resume(a1);
}

void sub_20AF07F44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638350);
  _Unwind_Resume(a1);
}

void sub_20AF07F5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638348);
  _Unwind_Resume(a1);
}

void sub_20AF07F74()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254638338);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638338))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vl::visual_logger::FileImportOptions]", qword_254638578);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254638578, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638338);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254638340);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254638340))
    {
      sub_20B531658((uint64_t)qword_254638578, (uint64_t)&xmmword_254638590);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638590, &dword_20AEBB000);
      __cxa_guard_release(&qword_254638340);
    }
  }
}

void sub_20AF08044(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638340);
  _Unwind_Resume(a1);
}

void sub_20AF0805C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638338);
  _Unwind_Resume(a1);
}

unint64_t sub_20AF08074(unint64_t a1, char *__src, char *a3)
{
  int v6;
  size_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  void **p_dst;
  size_t v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  _OWORD *v23;
  __int128 *v24;
  unint64_t v25;
  __int128 v26;
  char v27;
  size_t v28;
  unint64_t v30;
  uint64_t v31;
  void **__dst;
  size_t v33;
  int64_t v34;

  v6 = *(char *)(a1 + 23);
  v7 = a3 - __src;
  if (v6 < 0)
  {
    if (a3 == __src)
      return a1;
    v8 = *(_QWORD *)(a1 + 8);
    v12 = *(_QWORD *)(a1 + 16);
    v9 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v11 = *(_BYTE **)a1;
    v10 = HIBYTE(v12);
    if (*(_QWORD *)a1 > (unint64_t)__src)
      goto LABEL_11;
  }
  else
  {
    if (a3 == __src)
      return a1;
    v8 = *(unsigned __int8 *)(a1 + 23);
    v9 = 22;
    LOBYTE(v10) = *(_BYTE *)(a1 + 23);
    v11 = (_BYTE *)a1;
    if (a1 > (unint64_t)__src)
    {
LABEL_11:
      if (v9 - v8 >= v7)
      {
        v16 = (_BYTE *)a1;
        if ((v10 & 0x80) != 0)
        {
          v16 = *(_BYTE **)a1;
          v17 = (_BYTE *)(*(_QWORD *)a1 + v8);
          if (v7 >= 0x20)
            goto LABEL_36;
        }
        else
        {
          v17 = (_BYTE *)(a1 + v8);
          if (v7 >= 0x20)
            goto LABEL_36;
        }
        goto LABEL_23;
      }
      v14 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - v9 < v8 + v7 - v9)
        sub_20AEC0138();
      v15 = (_BYTE *)a1;
      if (v6 < 0)
      {
        v15 = *(_BYTE **)a1;
        if (v9 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v16 = operator new(0x7FFFFFFFFFFFFFF7uLL);
          if (!v8)
            goto LABEL_17;
          goto LABEL_16;
        }
      }
      else if (v9 > 0x3FFFFFFFFFFFFFF2)
      {
        goto LABEL_15;
      }
      v30 = 2 * v9;
      if (v8 + v7 > 2 * v9)
        v30 = v8 + v7;
      v31 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v31 = v30 | 7;
      if (v30 >= 0x17)
        v14 = v31 + 1;
      else
        v14 = 23;
      v16 = operator new(v14);
      if (!v8)
      {
LABEL_17:
        if (v9 != 22)
          operator delete(v15);
        *(_QWORD *)(a1 + 8) = v8;
        *(_QWORD *)(a1 + 16) = v14 | 0x8000000000000000;
        *(_QWORD *)a1 = v16;
        v17 = &v16[v8];
        if (v7 >= 0x20)
        {
LABEL_36:
          if ((unint64_t)(&v16[v8] - __src) >= 0x20)
          {
            v18 = &__src[v7 & 0xFFFFFFFFFFFFFFE0];
            v17 += v7 & 0xFFFFFFFFFFFFFFE0;
            v23 = &v16[v8 + 16];
            v24 = (__int128 *)(__src + 16);
            v25 = v7 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v26 = *v24;
              *(v23 - 1) = *(v24 - 1);
              *v23 = v26;
              v23 += 2;
              v24 += 2;
              v25 -= 32;
            }
            while (v25);
            if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0))
              goto LABEL_42;
          }
          else
          {
            v18 = __src;
          }
          do
          {
LABEL_41:
            v27 = *v18++;
            *v17++ = v27;
          }
          while (v18 != a3);
LABEL_42:
          *v17 = 0;
          v28 = v8 + v7;
          if (*(char *)(a1 + 23) < 0)
            *(_QWORD *)(a1 + 8) = v28;
          else
            *(_BYTE *)(a1 + 23) = v28 & 0x7F;
          return a1;
        }
LABEL_23:
        v18 = __src;
        goto LABEL_41;
      }
LABEL_16:
      memmove(v16, v15, v8);
      goto LABEL_17;
    }
  }
  if (&v11[v8 + 1] <= __src)
    goto LABEL_11;
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  if (v7 > 0x16)
  {
    v19 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v19 = v7 | 7;
    v20 = v19 + 1;
    p_dst = (void **)operator new(v19 + 1);
    v33 = v7;
    v34 = v20 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v34) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
  }
  memcpy(p_dst, __src, v7);
  *((_BYTE *)p_dst + v7) = 0;
  if (v34 >= 0)
    v21 = (const std::string::value_type *)&__dst;
  else
    v21 = (const std::string::value_type *)__dst;
  if (v34 >= 0)
    v22 = HIBYTE(v34);
  else
    v22 = v33;
  std::string::append((std::string *)a1, v21, v22);
  if (SHIBYTE(v34) < 0)
    operator delete(__dst);
  return a1;
}

void sub_20AF0835C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *sub_20AF08378()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254630FF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254630FF8))
    return &xmmword_254630FE0;
  v2 = (char *)sub_20AF08454();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254630FE0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254630FF0 = *((_QWORD *)v2 + 2);
    xmmword_254630FE0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254630FE0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254630FF8);
  return &xmmword_254630FE0;
}

void sub_20AF0843C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254630FF8);
  _Unwind_Resume(a1);
}

void *sub_20AF08454()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254631018);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254631018))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZLogMessageList]", qword_254631000);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254631000, &dword_20AEBB000);
    __cxa_guard_release(&qword_254631018);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254631038);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254631038))
    return &unk_254631020;
  sub_20B531658((uint64_t)qword_254631000, (uint64_t)&unk_254631020);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254631020, &dword_20AEBB000);
  __cxa_guard_release(&qword_254631038);
  return &unk_254631020;
}

void sub_20AF08544(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254631038);
  _Unwind_Resume(a1);
}

void sub_20AF0855C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254631018);
  _Unwind_Resume(a1);
}

void sub_20AF08574()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254638368);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638368))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vl::visual_logger::LogMessageList]", qword_254638608);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254638608, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638368);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254638370);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254638370))
    {
      sub_20B531658((uint64_t)qword_254638608, (uint64_t)&xmmword_254638620);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638620, &dword_20AEBB000);
      __cxa_guard_release(&qword_254638370);
    }
  }
}

void sub_20AF08644(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638370);
  _Unwind_Resume(a1);
}

void sub_20AF0865C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638368);
  _Unwind_Resume(a1);
}

void sub_20AF08674(CFErrorRef ***a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t *v5;
  __int128 v6;
  unsigned __int8 v7;
  void **v8;
  void **v9;
  void *v10;
  int v11;
  size_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  _BYTE v18[16];
  void *__p;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  char v28;
  void *v29;
  void **v30;
  void *__dst[2];
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  sub_20AF08BA8();
  v4 = atomic_load((unsigned __int8 *)&qword_254638390);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254638390))
  {
    sub_20AF08D60();
    if (byte_2546386C7 < 0)
    {
      sub_20AEC60F4(&xmmword_254638680, (void *)xmmword_2546386B0, *((unint64_t *)&xmmword_2546386B0 + 1));
    }
    else
    {
      xmmword_254638680 = xmmword_2546386B0;
      unk_254638690 = unk_2546386C0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638680, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638390);
  }
  if (byte_254638697 < 0)
  {
    sub_20AEC60F4(__dst, (void *)xmmword_254638680, *((unint64_t *)&xmmword_254638680 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254638680;
    v32 = unk_254638690;
  }
  sub_20AF07A38();
  if (SHIBYTE(qword_254638540) < 0)
  {
    sub_20AEC60F4(&v33, (void *)xmmword_254638530, *((unint64_t *)&xmmword_254638530 + 1));
  }
  else
  {
    v33 = xmmword_254638530;
    v34 = qword_254638540;
  }
  v5 = sub_20AEE0FFC();
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(&v35, (void *)*v5, v5[1]);
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v36 = v5[2];
    v35 = v6;
  }
  v7 = atomic_load((unsigned __int8 *)&qword_2546383A8);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_2546383A8))
  {
    sub_20AF08E60();
    v11 = byte_2546386F7;
    if (byte_2546386F7 >= 0)
      v12 = byte_2546386F7;
    else
      v12 = *((_QWORD *)&xmmword_2546386E0 + 1);
    v13 = v12 + 1;
    if (v12 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v13 >= 0x17)
    {
      v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v15 = v13 | 7;
      v16 = v15 + 1;
      v14 = (__int128 *)operator new(v15 + 1);
      *((_QWORD *)&xmmword_2546386C8 + 1) = v12 + 1;
      unk_2546386D8 = v16 | 0x8000000000000000;
      *(_QWORD *)&xmmword_2546386C8 = v14;
    }
    else
    {
      v14 = &xmmword_2546386C8;
      unk_2546386D8 = 0;
      xmmword_2546386C8 = 0uLL;
      byte_2546386DF = v12 + 1;
      if (!v12)
      {
LABEL_61:
        *(_WORD *)((char *)v14 + v12) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546386C8, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546383A8);
        goto LABEL_12;
      }
    }
    if (v11 >= 0)
      v17 = &xmmword_2546386E0;
    else
      v17 = (__int128 *)xmmword_2546386E0;
    memmove(v14, v17, v12);
    goto LABEL_61;
  }
LABEL_12:
  if (byte_2546386DF < 0)
  {
    sub_20AEC60F4(&v37, (void *)xmmword_2546386C8, *((unint64_t *)&xmmword_2546386C8 + 1));
  }
  else
  {
    v37 = xmmword_2546386C8;
    v38 = unk_2546386D8;
  }
  sub_20AEC7620(&v29, (uint64_t)__dst, 4uLL);
  sub_20AECF9B0(v18, a2);
  sub_20AECD798((uint64_t *)&xmmword_254638638, (__int128 **)&v29, (uint64_t)v18, **a1);
  if (!v28 || !v27)
    goto LABEL_23;
  if (!v26)
    goto LABEL_20;
  if ((v25 & 0x80000000) == 0)
  {
    if ((v23 & 0x80000000) == 0)
      goto LABEL_20;
LABEL_41:
    operator delete(v22);
    if (!v21)
      goto LABEL_23;
    goto LABEL_21;
  }
  operator delete(v24);
  if (v23 < 0)
    goto LABEL_41;
LABEL_20:
  if (!v21)
    goto LABEL_23;
LABEL_21:
  if (v20 < 0)
    operator delete(__p);
LABEL_23:
  v8 = (void **)v29;
  if (v29)
  {
    v9 = v30;
    v10 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = v29;
    }
    v30 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v38) < 0)
  {
    operator delete((void *)v37);
    if ((SHIBYTE(v36) & 0x80000000) == 0)
    {
LABEL_33:
      if ((SHIBYTE(v34) & 0x80000000) == 0)
        goto LABEL_34;
      goto LABEL_38;
    }
  }
  else if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete((void *)v35);
  if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
LABEL_34:
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      return;
LABEL_39:
    operator delete(__dst[0]);
    return;
  }
LABEL_38:
  operator delete((void *)v33);
  if (SHIBYTE(v32) < 0)
    goto LABEL_39;
}

void sub_20AF08AB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638390);
  _Unwind_Resume(a1);
}

void sub_20AF08AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  void **v52;

  __cxa_guard_abort(&qword_2546383A8);
  while (1)
  {
    if (*((char *)v52 - 1) < 0)
      operator delete(*(v52 - 3));
    v52 -= 3;
    if (v52 == &a29)
      _Unwind_Resume(a1);
  }
}

void sub_20AF08BA8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638378);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638378))
  {
    sub_20AF08C60();
    if (byte_25463867F < 0)
    {
      sub_20AEC60F4(&xmmword_254638638, (void *)xmmword_254638668, *((unint64_t *)&xmmword_254638668 + 1));
    }
    else
    {
      xmmword_254638638 = xmmword_254638668;
      unk_254638648 = unk_254638678;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638638, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638378);
  }
}

void sub_20AF08C48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638378);
  _Unwind_Resume(a1);
}

void sub_20AF08C60()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254638380);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638380))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZFileImporter]", qword_254638650);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254638650, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638380);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254638388);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254638388))
    {
      sub_20B531658((uint64_t)qword_254638650, (uint64_t)&xmmword_254638668);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638668, &dword_20AEBB000);
      __cxa_guard_release(&qword_254638388);
    }
  }
}

void sub_20AF08D30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638388);
  _Unwind_Resume(a1);
}

void sub_20AF08D48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638380);
  _Unwind_Resume(a1);
}

void sub_20AF08D60()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254638398);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638398))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::filesystem::path]", qword_254638698);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254638698, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638398);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546383A0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2546383A0))
    {
      sub_20B531658((uint64_t)qword_254638698, (uint64_t)&xmmword_2546386B0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546386B0, &dword_20AEBB000);
      __cxa_guard_release(&qword_2546383A0);
    }
  }
}

void sub_20AF08E30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546383A0);
  _Unwind_Resume(a1);
}

void sub_20AF08E48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638398);
  _Unwind_Resume(a1);
}

void sub_20AF08E60()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546383B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546383B0))
  {
    sub_20AF08F18();
    if (byte_254638727 < 0)
    {
      sub_20AEC60F4(&xmmword_2546386E0, (void *)xmmword_254638710, *((unint64_t *)&xmmword_254638710 + 1));
    }
    else
    {
      xmmword_2546386E0 = xmmword_254638710;
      unk_2546386F0 = unk_254638720;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546386E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546383B0);
  }
}

void sub_20AF08F00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546383B0);
  _Unwind_Resume(a1);
}

void sub_20AF08F18()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2546383B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546383B8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::fs::IFilesystem]", qword_2546386F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546386F8, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546383B8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546383C0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2546383C0))
    {
      sub_20B531658((uint64_t)qword_2546386F8, (uint64_t)&xmmword_254638710);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638710, &dword_20AEBB000);
      __cxa_guard_release(&qword_2546383C0);
    }
  }
}

void sub_20AF08FE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546383C0);
  _Unwind_Resume(a1);
}

void sub_20AF09000(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546383B8);
  _Unwind_Resume(a1);
}

void sub_20AF09018()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2546383D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546383D0))
  {
    sub_20AF08BA8();
    v1 = byte_25463864F;
    if (byte_25463864F >= 0)
      v2 = byte_25463864F;
    else
      v2 = *((_QWORD *)&xmmword_254638638 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254638748 = v2 + 6;
      unk_254638750 = v6 | 0x8000000000000000;
      qword_254638740 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254638748 = 0;
      unk_254638750 = 0;
      qword_254638740 = 0x2074736E6F63;
      byte_254638757 = v2 + 6;
      v4 = (char *)&qword_254638740 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254638740, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546383D0);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254638638;
    else
      v8 = (__int128 *)xmmword_254638638;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20AF09180(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546383D0);
  _Unwind_Resume(a1);
}

uint64_t sub_20AF09198(uint64_t a1)
{
  sub_20B008430(a1 + 8);
  return a1;
}

void sub_20AF091C4(uint64_t a1)
{
  sub_20B008430(a1 + 8);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AF091FC(uint64_t a1)
{
  sub_20B008430(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t VZPixelFormatGetChannels(unsigned int a1)
{
  uint64_t v1;
  char v3[16];
  void *v4;
  char v5;
  char v6;
  void *v7;
  char v8;
  void *__p;
  char v10;
  char v11;
  char v12;
  char v13;

  sub_20B007F28(a1, (uint64_t)v3);
  v1 = sub_20AF092E8((uint64_t)"VZPixelFormatGetChannels", v3);
  if (v13 || !v12)
    return v1;
  if (v11)
  {
    if (v10 < 0)
      operator delete(__p);
    if (v8 < 0)
      operator delete(v7);
  }
  if (!v6 || (v5 & 0x80000000) == 0)
    return v1;
  operator delete(v4);
  return v1;
}

void sub_20AF092D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AF092E8(uint64_t a1, char *a2)
{
  unsigned __int8 v4;
  void *v5;
  char v6;
  __int128 v7;
  void *v8;
  char v9;
  char v10;
  void *v11;
  char v12;
  void *__p;
  char v14;
  char v15;
  char v16;
  uint64_t v17;

  v17 = a1;
  if (a2[120])
    return *(unsigned int *)a2;
  sub_20AEDBA04("in function ", (const char *)&v17);
  sub_20B529470(a2, &v5, (uint64_t)&v7);
  v4 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v7);
  if (v16)
  {
    if (v15)
    {
      if (v14 < 0)
        operator delete(__p);
      if (v12 < 0)
        operator delete(v11);
    }
    if (v10 && v9 < 0)
      operator delete(v8);
  }
  if (v6 < 0)
    operator delete(v5);
  return 0;
}

void sub_20AF0941C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t VZPixelFormatGetBytesPerPixel(unsigned int a1)
{
  uint64_t v1;
  char v3[16];
  void *v4;
  char v5;
  char v6;
  void *v7;
  char v8;
  void *__p;
  char v10;
  char v11;
  char v12;
  char v13;

  sub_20B008108(a1, (uint64_t)v3);
  v1 = sub_20AF092E8((uint64_t)"VZPixelFormatGetBytesPerPixel", v3);
  if (v13 || !v12)
    return v1;
  if (v11)
  {
    if (v10 < 0)
      operator delete(__p);
    if (v8 < 0)
      operator delete(v7);
  }
  if (!v6 || (v5 & 0x80000000) == 0)
    return v1;
  operator delete(v4);
  return v1;
}

void sub_20AF094DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t VZPixelFormatGetBytesPerValue(unsigned int a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  __int128 v5;
  void *v6[2];
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  __int128 v17;
  __int128 __p;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  char v27;

  if (a1 - 1 > 0x27)
  {
    sub_20B030AC8(a1, (uint64_t)&v17);
    v5 = v17;
    LOBYTE(v6[0]) = 0;
    v15 = 0;
    if (v27)
    {
      v8 = 0;
      if (v20)
      {
        *(_OWORD *)v6 = __p;
        v7 = v19;
        v19 = 0;
        __p = 0uLL;
        v8 = 1;
      }
      LOBYTE(v9) = 0;
      v14 = 0;
      if (v26)
      {
        v10 = v22;
        v9 = v21;
        v21 = 0uLL;
        v11 = v23;
        *(_OWORD *)v12 = v24;
        v13 = v25;
        v22 = 0;
        v24 = 0uLL;
        v25 = 0;
        v14 = 1;
      }
      v15 = 1;
      v16 = 0;
      if (v20 && SHIBYTE(v19) < 0)
        operator delete((void *)__p);
    }
    else
    {
      v16 = 0;
    }
  }
  else
  {
    v1 = (a1 & 3) - 1;
    if (v1 > 2)
      v2 = 4;
    else
      v2 = dword_20B5B1A28[v1];
    LODWORD(v5) = v2;
    v16 = 1;
  }
  v3 = sub_20AF092E8((uint64_t)"VZPixelFormatGetBytesPerValue", (char *)&v5);
  if (v16 || !v15)
    return v3;
  if (v14)
  {
    if (SHIBYTE(v13) < 0)
      operator delete(v12[0]);
    if (SHIBYTE(v10) < 0)
      operator delete((void *)v9);
  }
  if (!v8 || (SHIBYTE(v7) & 0x80000000) == 0)
    return v3;
  operator delete(v6[0]);
  return v3;
}

void sub_20AF096A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t VZImageGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638778);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638778))
    return qword_254638770;
  qword_254638770 = sub_20AECB130();
  __cxa_guard_release(&qword_254638778);
  return qword_254638770;
}

_QWORD *VZDataCreateWithImage(uint64_t a1, __int128 *a2, CFErrorRef *a3)
{
  _QWORD *v5;
  int v6;
  __int128 *v7;
  _QWORD *v8;
  __int128 v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  CFErrorRef **v21;
  CFErrorRef *v22;
  char v23[208];
  void *v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  char v29;
  void *v30;
  char v31;
  char v32;
  char v33;
  char v34;
  __int128 v35[13];
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  void *__p;
  char v43;
  char v44;
  char v45;
  char v46;
  __int128 v47;
  __int128 v48;
  char v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  char v55;
  char v56;
  unsigned __int8 v57;
  uint64_t v58;

  v5 = (_QWORD *)a1;
  v58 = *MEMORY[0x24BDAC8D0];
  if (sub_20AEEF1EC((uint64_t)"VZDataCreateWithImage", a1, a3))
    return 0;
  sub_20AED18DC(a2, v23);
  v21 = &v22;
  v22 = a3;
  sub_20AED4D3C(v35, (uint64_t)v23);
  sub_20B0090AC((uint64_t)(v5 + 1), v35, (uint64_t)&v47);
  if (v46)
  {
    if (v45)
    {
      if (v44 && v43 < 0)
        operator delete(__p);
      if (v41 && v40 < 0)
        operator delete(v39);
      if (v38 && v37 < 0)
        operator delete(v36);
    }
    sub_20AED30E0((uint64_t)v35);
  }
  v6 = v57;
  if (!v57)
  {
    v10 = v47;
    sub_20AECEBD0(&v11, &v48);
    v20 = 1;
    sub_20AF0C704(&v21, (uint64_t)&v10);
    if (!v20 || !v19)
      goto LABEL_39;
    if (v18)
    {
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
    }
    if (!v13 || (v12 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_37;
  }
  v7 = (__int128 *)sub_20AED4AC0((uint64_t)&v47);
  v8 = operator new(0x240uLL, MEMORY[0x24BEDB6B8]);
  if (!v8)
  {
    LOBYTE(v10) = 0;
    v20 = 0;
    sub_20AF0C704(&v21, (uint64_t)&v10);
    if (!v20 || !v19)
      goto LABEL_38;
    if (v18)
    {
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
    }
    v5 = 0;
    if (!v13 || (v12 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_37:
    operator delete(v11);
LABEL_38:
    v5 = 0;
    goto LABEL_39;
  }
  v5 = v8;
  *v8 = off_24C3F2180;
  sub_20AED5300((uint64_t)(v8 + 2), v7);
  *v5 = &off_24C3F2BA0;
  v5[2] = &unk_24C3F2BF0;
  *((_OWORD *)v5 + 35) = 0u;
LABEL_39:
  if (v57)
  {
    sub_20AED5474((uint64_t)&v47);
  }
  else if (v56)
  {
    if (v55)
    {
      if (v54 < 0)
        operator delete(v53);
      if (v52 < 0)
        operator delete(v51);
    }
    if (v50 && v49 < 0)
      operator delete((void *)v48);
  }
  if (!v6)
    v5 = 0;
  if (v34)
  {
    if (v33)
    {
      if (v32 && v31 < 0)
        operator delete(v30);
      if (v29 && v28 < 0)
        operator delete(v27);
      if (v26 && v25 < 0)
        operator delete(v24);
    }
    sub_20AED30E0((uint64_t)v23);
  }
  return v5;
}

void sub_20AF09A8C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AF09A94);
  _Unwind_Resume(a1);
}

void sub_20AF09AA4(_Unwind_Exception *a1, int a2)
{
  const std::logic_error *exception_ptr;
  void *v5;
  std::string *p_what;
  std::string *v7;
  std::logic_error v8;
  char v9;
  char v10;
  __int128 v11;
  __int128 v12[6];
  std::__fs::filesystem::filesystem_error v13[3];
  CFErrorRef **v14[102];
  __int128 v15;
  _BYTE v16[104];
  char v17;

  if (a2)
  {
    sub_20AED1998((uint64_t)&STACK[0x2F0]);
    if (a2 == 3)
    {
      exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
      std::logic_error::logic_error(&v8, exception_ptr);
      v8.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_begin_catch(a1);
      v7 = (std::string *)std::logic_error::what(&v8);
      sub_20AED4C84(v13, (const char **)&v7);
      sub_20B099E24((__int128 *)v13, (uint64_t)&v11);
      v15 = v11;
      sub_20AECEBD0(v16, v12);
      v17 = 1;
      sub_20AF0C704(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      sub_20AECCE40((uint64_t)&v11);
      if (LOBYTE(v13[0].__ec_.__cat_))
      {
        if (*((char *)&v13[0].__ec_.__val_ + 7) < 0)
          operator delete(v13[0].__vftable);
      }
      MEMORY[0x20BD35020](&v8);
      __cxa_end_catch();
    }
    else if (a2 == 2)
    {
      v5 = __cxa_get_exception_ptr(a1);
      sub_20AED4C1C(&v13[0], (uint64_t)v5);
      __cxa_begin_catch(a1);
      p_what = &v13[0].__storage_.__ptr_->__what_;
      if (SHIBYTE(v13[0].__storage_.__ptr_->__what_.__r_.__value_.__r.__words[2]) < 0)
        p_what = (std::string *)p_what->__r_.__value_.__r.__words[0];
      v7 = p_what;
      sub_20AED4C84(&v8, (const char **)&v7);
      sub_20B09A738((__int128 *)&v8, (uint64_t)&v11);
      v15 = v11;
      sub_20AECEBD0(v16, v12);
      v17 = 1;
      sub_20AF0C704(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      sub_20AECCE40((uint64_t)&v11);
      if (v10 && v9 < 0)
        operator delete(v8.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error(v13);
      __cxa_end_catch();
    }
    else
    {
      __cxa_begin_catch(a1);
      LOBYTE(v15) = 0;
      v17 = 0;
      sub_20AF0C704(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      __cxa_end_catch();
    }
    JUMPOUT(0x20AF0998CLL);
  }
  _Unwind_Resume(a1);
}

void sub_20AF09ABC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AF09AC8);
  _Unwind_Resume(a1);
}

void sub_20AF09C70(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20AF09C78);
  sub_20AEC01C0(a1);
}

char *VZDataGetImage(uint64_t a1, CFErrorRef *a2)
{
  char *v4;
  int v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  char v11;
  __int128 v12;
  void *v13;
  char v14;
  char v15;
  void *v16;
  char v17;
  void *__p;
  char v19;
  char v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  char v31;
  char v32;
  unsigned __int8 v33;
  CFErrorRef **v34;
  CFErrorRef *v35;

  if (sub_20AED21B4((uint64_t)"VZDataGetImage", a1, a2))
    return 0;
  v4 = *(char **)(a1 + 568);
  if (v4)
    return v4;
  v4 = &v11;
  v34 = &v35;
  v35 = a2;
  sub_20B009598(a1 + 32, (uint64_t)&v23);
  v5 = v33;
  if (!v33)
  {
    v12 = v23;
    sub_20AECEBD0(&v13, &v24);
    v22 = 1;
    sub_20AF0CA90(&v34, (uint64_t)&v12);
    if (v22 && v21)
    {
      if (v20)
      {
        if (v19 < 0)
          operator delete(__p);
        if (v17 < 0)
          operator delete(v16);
      }
      if (v15 && v14 < 0)
        operator delete(v13);
    }
    goto LABEL_32;
  }
  v6 = sub_20AEF071C((uint64_t)&v23);
  v7 = (char *)operator new(0xB0uLL, MEMORY[0x24BEDB6B8]);
  if (v7)
  {
    v4 = v7;
    *(_QWORD *)v7 = off_24C3F2180;
    *((_QWORD *)v7 + 1) = &off_24C403F68;
    *((_QWORD *)v7 + 2) = &off_24C3F2CB0;
    *(_OWORD *)(v7 + 24) = *(_OWORD *)(v6 + 16);
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    v8 = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(v7 + 54) = *(_OWORD *)(v6 + 46);
    *(_OWORD *)(v7 + 40) = v8;
    v7[72] = 0;
    v7[128] = 0;
    if (*(_BYTE *)(v6 + 120))
    {
      *((_QWORD *)v7 + 9) = &off_24C3F2D20;
      *((_OWORD *)v7 + 5) = *(_OWORD *)(v6 + 72);
      *(_QWORD *)(v6 + 72) = 0;
      *(_QWORD *)(v6 + 80) = 0;
      v9 = *(_OWORD *)(v6 + 88);
      *(_OWORD *)(v7 + 110) = *(_OWORD *)(v6 + 102);
      *((_OWORD *)v7 + 6) = v9;
      v7[128] = 1;
    }
    v7[136] = 0;
    v7[160] = 0;
    if (*(_BYTE *)(v6 + 152))
    {
      *((_QWORD *)v7 + 17) = &off_24C4169B8;
      *((_OWORD *)v7 + 9) = *(_OWORD *)(v6 + 136);
      *(_QWORD *)(v6 + 136) = 0;
      *(_QWORD *)(v6 + 144) = 0;
      v7[160] = 1;
    }
    *((_DWORD *)v7 + 42) = 1;
    *(_QWORD *)v7 = &off_24C3F3768;
    *((_QWORD *)v7 + 1) = &unk_24C3F37B8;
  }
  else
  {
    LOBYTE(v12) = 0;
    v22 = 0;
    sub_20AF0CA90(&v34, (uint64_t)&v12);
    if (v22 && v21)
    {
      if (v20)
      {
        if (v19 < 0)
          operator delete(__p);
        if (v17 < 0)
          operator delete(v16);
      }
      v4 = 0;
      if (!v15 || (v14 & 0x80000000) == 0)
        goto LABEL_32;
      operator delete(v13);
    }
    v4 = 0;
  }
LABEL_32:
  if (v33)
  {
    (*(void (**)(__int128 *))v23)(&v23);
  }
  else if (v32)
  {
    if (v31)
    {
      if (v30 < 0)
        operator delete(v29);
      if (v28 < 0)
        operator delete(v27);
    }
    if (v26 && v25 < 0)
      operator delete((void *)v24);
  }
  if (!v5)
    v4 = 0;
  *(_QWORD *)(a1 + 568) = v4;
  return v4;
}

void sub_20AF09F58(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a68;
  uint64_t v68;
  const std::logic_error *exception_ptr;
  const char *v72;
  size_t v73;
  size_t v74;
  void **p_dst;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  const char *v81;
  size_t v82;
  const char *v83;
  std::logic_error_vtbl *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (*(_BYTE *)(v68 - 80))
  {
    (**(void (***)(uint64_t))(v68 - 240))(v68 - 240);
  }
  else if (*(_BYTE *)(v68 - 128))
  {
    if (*(_BYTE *)(v68 - 136))
    {
      if (*(char *)(v68 - 137) < 0)
        operator delete(*(void **)(v68 - 160));
      if (*(char *)(v68 - 169) < 0)
        operator delete(*(void **)(v68 - 192));
    }
    if (*(_BYTE *)(v68 - 200) && *(char *)(v68 - 201) < 0)
      operator delete(*(void **)(v68 - 224));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v72 = std::logic_error::what(&a10);
    v73 = strlen(v72);
    if (v73 <= 0x7FFFFFFFFFFFFFF7)
    {
      v74 = v73;
      if (v73 >= 0x17)
      {
        v85 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v73 | 7) != 0x17)
          v85 = v73 | 7;
        v86 = v85 + 1;
        p_dst = (void **)operator new(v85 + 1);
        __dst_8 = v74;
        *(_QWORD *)&a38 = v86 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v73;
        p_dst = (void **)&__dst;
        if (!v73)
        {
LABEL_52:
          *((_BYTE *)p_dst + v74) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a68 = a13;
          sub_20AECEBD0((_BYTE *)(v68 - 224), &a14);
          *(_BYTE *)(v68 - 120) = 1;
          sub_20AF0CA90((CFErrorRef ***)(v68 - 64), v68 - 240);
          if (*(_BYTE *)(v68 - 120) && *(_BYTE *)(v68 - 128))
          {
            if (*(_BYTE *)(v68 - 136))
            {
              if (*(char *)(v68 - 137) < 0)
                operator delete(*(void **)(v68 - 160));
              if (*(char *)(v68 - 169) < 0)
                operator delete(*(void **)(v68 - 192));
            }
            if (*(_BYTE *)(v68 - 200) && *(char *)(v68 - 201) < 0)
              operator delete(*(void **)(v68 - 224));
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_103;
        }
      }
      memmove(p_dst, v72, v74);
      goto LABEL_52;
    }
LABEL_102:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v68 - 240) = 0;
    *(_BYTE *)(v68 - 120) = 0;
    sub_20AF0CA90((CFErrorRef ***)(v68 - 64), v68 - 240);
    if (*(_BYTE *)(v68 - 120) && *(_BYTE *)(v68 - 128))
    {
      if (*(_BYTE *)(v68 - 136))
      {
        if (*(char *)(v68 - 137) < 0)
          operator delete(*(void **)(v68 - 160));
        if (*(char *)(v68 - 169) < 0)
          operator delete(*(void **)(v68 - 192));
      }
      if (*(_BYTE *)(v68 - 200) && *(char *)(v68 - 201) < 0)
        operator delete(*(void **)(v68 - 224));
    }
    __cxa_end_catch();
LABEL_103:
    JUMPOUT(0x20AF09EE8);
  }
  v76 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v76);
  a38 = *((_OWORD *)v76 + 1);
  v78 = *((_QWORD *)v76 + 4);
  v77 = *((_QWORD *)v76 + 5);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  a39 = v78;
  a40 = v77;
  if (v77)
  {
    v79 = (unint64_t *)(v77 + 8);
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
  }
  __cxa_begin_catch(a1);
  v81 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v81 = *(const char **)v81;
  v82 = strlen(v81);
  if (v82 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_102;
  v83 = (const char *)v82;
  if (v82 >= 0x17)
  {
    v87 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v82 | 7) != 0x17)
      v87 = v82 | 7;
    v88 = v87 + 1;
    v84 = (std::logic_error_vtbl *)operator new(v87 + 1);
    a10.__imp_.__imp_ = v83;
    a11 = v88 | 0x8000000000000000;
    a10.__vftable = v84;
  }
  else
  {
    HIBYTE(a11) = v82;
    v84 = (std::logic_error_vtbl *)&a10;
    if (!v82)
    {
LABEL_79:
      v83[(_QWORD)v84] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a68 = a13;
      sub_20AECEBD0((_BYTE *)(v68 - 224), &a14);
      *(_BYTE *)(v68 - 120) = 1;
      sub_20AF0CA90((CFErrorRef ***)(v68 - 64), v68 - 240);
      if (*(_BYTE *)(v68 - 120) && *(_BYTE *)(v68 - 128))
      {
        if (*(_BYTE *)(v68 - 136))
        {
          if (*(char *)(v68 - 137) < 0)
            operator delete(*(void **)(v68 - 160));
          if (*(char *)(v68 - 169) < 0)
            operator delete(*(void **)(v68 - 192));
        }
        if (*(_BYTE *)(v68 - 200) && *(char *)(v68 - 201) < 0)
          operator delete(*(void **)(v68 - 224));
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_103;
    }
  }
  memmove(v84, v81, (size_t)v83);
  goto LABEL_79;
}

char *VZImageCreateDefault(int a1, int a2, uint64_t a3, uint64_t a4)
{
  _DWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  return sub_20AF0A4B0((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))sub_20B008AE8, a4, 0, (uint64_t)v5, a3);
}

char *sub_20AF0A4B0(void (*a1)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t), uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  int v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v13[16];
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  char v22;
  char v23;
  __int128 v24;
  void *v25;
  char v26;
  char v27;
  void *v28;
  char v29;
  void *__p;
  char v31;
  char v32;
  char v33;
  char v34;
  __int128 v35;
  __int128 v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  char v43;
  char v44;
  unsigned __int8 v45;
  CFErrorRef **v46;
  uint64_t v47;

  v46 = (CFErrorRef **)&v47;
  v47 = a2;
  a1(&v35, a3, a4, a5);
  v6 = v45;
  if (v45)
  {
    v7 = sub_20AEF071C((uint64_t)&v35);
    v8 = (char *)operator new(0xB0uLL, MEMORY[0x24BEDB6B8]);
    if (v8)
    {
      v5 = v8;
      v9 = *(_OWORD *)(v7 + 32);
      *(_OWORD *)(v8 + 24) = *(_OWORD *)(v7 + 16);
      *(_QWORD *)v8 = off_24C3F2180;
      *((_QWORD *)v8 + 1) = &off_24C403F68;
      *((_QWORD *)v8 + 2) = &off_24C3F2CB0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_OWORD *)(v8 + 40) = v9;
      *(_OWORD *)(v8 + 54) = *(_OWORD *)(v7 + 46);
      v8[72] = 0;
      v8[128] = 0;
      if (*(_BYTE *)(v7 + 120))
      {
        *((_QWORD *)v8 + 9) = &off_24C3F2D20;
        v10 = *(_OWORD *)(v7 + 72);
        *(_QWORD *)(v7 + 72) = 0;
        *(_QWORD *)(v7 + 80) = 0;
        v11 = *(_OWORD *)(v7 + 88);
        *((_OWORD *)v8 + 5) = v10;
        *((_OWORD *)v8 + 6) = v11;
        *(_OWORD *)(v8 + 110) = *(_OWORD *)(v7 + 102);
        v8[128] = 1;
      }
      v8[136] = 0;
      v8[160] = 0;
      if (*(_BYTE *)(v7 + 152))
      {
        *((_QWORD *)v8 + 17) = &off_24C4169B8;
        *((_OWORD *)v8 + 9) = *(_OWORD *)(v7 + 136);
        *(_QWORD *)(v7 + 136) = 0;
        *(_QWORD *)(v7 + 144) = 0;
        v8[160] = 1;
      }
      *((_DWORD *)v8 + 42) = 1;
      *(_QWORD *)v8 = &off_24C3F3768;
      *((_QWORD *)v8 + 1) = &unk_24C3F37B8;
      goto LABEL_29;
    }
    v13[0] = 0;
    v23 = 0;
    sub_20AF0CC5C(&v46, (uint64_t)v13);
    if (!v23 || !v22)
    {
LABEL_28:
      v5 = 0;
      goto LABEL_29;
    }
    if (v21)
    {
      if (v20 < 0)
        operator delete(v19);
      if (v18 < 0)
        operator delete(v17);
    }
    v5 = 0;
    if (v16 && v15 < 0)
    {
      operator delete(v14);
      goto LABEL_28;
    }
  }
  else
  {
    v24 = v35;
    sub_20AECEBD0(&v25, &v36);
    v34 = 1;
    sub_20AF0CC5C(&v46, (uint64_t)&v24);
    if (v34 && v33)
    {
      if (v32)
      {
        if (v31 < 0)
          operator delete(__p);
        if (v29 < 0)
          operator delete(v28);
      }
      if (v27 && v26 < 0)
        operator delete(v25);
    }
  }
LABEL_29:
  if (v45)
  {
    (*(void (**)(__int128 *))v35)(&v35);
  }
  else if (v44)
  {
    if (v43)
    {
      if (v42 < 0)
        operator delete(v41);
      if (v40 < 0)
        operator delete(v39);
    }
    if (v38 && v37 < 0)
      operator delete((void *)v36);
  }
  if (!v6)
    return 0;
  return v5;
}

void sub_20AF0A750(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 __p, int a10, __int16 a11, char a12, char a13, char a14, __int128 a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,__int128 a32,int a33,__int16 a34,char a35,char a36,char a37,__int128 a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  __int128 *v71;
  uint64_t v72;
  const std::logic_error *exception_ptr;
  void *v76;
  _QWORD *v77;

  sub_20AECDEE0((uint64_t)&STACK[0x200]);
  sub_20AEF07DC(v72 - 232);
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error((std::logic_error *)&a53, exception_ptr);
    a53 = MEMORY[0x24BEDB8D0] + 16;
    __cxa_begin_catch(a1);
    a31 = (uint64_t)std::logic_error::what((const std::logic_error *)&a53);
    sub_20AED4C84(&__p, (const char **)&a31);
    sub_20B099E24(&__p, v72 - 232);
    a15 = *v71;
    sub_20AECEBD0(&a16, (__int128 *)(v72 - 216));
    a29 = 1;
    sub_20AF0CC5C((CFErrorRef ***)(v72 - 64), (uint64_t)&a15);
    sub_20AECDEE0((uint64_t)&a15);
    sub_20AECCE40(v72 - 232);
    if (a14)
    {
      if (a13 < 0)
        operator delete((void *)__p);
    }
    MEMORY[0x20BD35020](&a53);
    __cxa_end_catch();
  }
  else if (a2 == 2)
  {
    v76 = __cxa_get_exception_ptr(a1);
    sub_20AED4C1C((std::runtime_error *)&a53, (uint64_t)v76);
    __cxa_begin_catch(a1);
    v77 = (_QWORD *)(a57 + 48);
    if (*(char *)(a57 + 71) < 0)
      v77 = (_QWORD *)*v77;
    a31 = (uint64_t)v77;
    sub_20AED4C84(&a32, (const char **)&a31);
    sub_20B09A738(&a32, v72 - 232);
    a38 = *v71;
    sub_20AECEBD0(&a39, (__int128 *)(v72 - 216));
    a52 = 1;
    sub_20AF0CC5C((CFErrorRef ***)(v72 - 64), (uint64_t)&a38);
    sub_20AECDEE0((uint64_t)&a38);
    sub_20AECCE40(v72 - 232);
    if (a37 && a36 < 0)
      operator delete((void *)a32);
    std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&a53);
    __cxa_end_catch();
  }
  else
  {
    __cxa_begin_catch(a1);
    a59 = 0;
    a71 = 0;
    sub_20AF0CC5C((CFErrorRef ***)(v72 - 64), (uint64_t)&a59);
    sub_20AECDEE0((uint64_t)&a59);
    __cxa_end_catch();
  }
  JUMPOUT(0x20AF0A6E4);
}

char *VZImageCreateUninitialized(int a1, int a2, uint64_t a3, uint64_t a4)
{
  _DWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  return sub_20AF0A4B0((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))sub_20B008AF8, a4, 0, (uint64_t)v5, a3);
}

std::string::size_type VZImageCreateCopy(int a1, int a2, unsigned int a3, uint64_t a4, int a5, CFErrorRef *a6)
{
  std::string::size_type v8;
  int v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _DWORD v19[52];
  __int128 v20;
  void *v21;
  char v22;
  char v23;
  void *v24;
  char v25;
  void *__p;
  char v27;
  char v28;
  char v29;
  char v30;
  __int128 v31;
  __int128 v32;
  char v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  char v39;
  char v40;
  unsigned __int8 v41;
  CFErrorRef **v42;
  CFErrorRef *v43;

  v8 = a4;
  if (sub_20AF0B170((uint64_t)"VZImageCreateCopy", a4, a6))
    return 0;
  v19[0] = a1;
  v19[1] = a2;
  v42 = &v43;
  v43 = a6;
  sub_20B008B08(0, (uint64_t)v19, a3, v8, a5, (uint64_t)&v31);
  v12 = v41;
  if (v41)
  {
    v13 = sub_20AEF071C((uint64_t)&v31);
    v14 = (char *)operator new(0xB0uLL, MEMORY[0x24BEDB6B8]);
    if (v14)
    {
      v8 = (std::string::size_type)v14;
      v15 = *(_OWORD *)(v13 + 32);
      *(_OWORD *)(v14 + 24) = *(_OWORD *)(v13 + 16);
      *(_QWORD *)v14 = off_24C3F2180;
      *((_QWORD *)v14 + 1) = &off_24C403F68;
      *((_QWORD *)v14 + 2) = &off_24C3F2CB0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_OWORD *)(v14 + 40) = v15;
      *(_OWORD *)(v14 + 54) = *(_OWORD *)(v13 + 46);
      v14[72] = 0;
      v14[128] = 0;
      if (*(_BYTE *)(v13 + 120))
      {
        *((_QWORD *)v14 + 9) = &off_24C3F2D20;
        v16 = *(_OWORD *)(v13 + 72);
        *(_QWORD *)(v13 + 72) = 0;
        *(_QWORD *)(v13 + 80) = 0;
        v17 = *(_OWORD *)(v13 + 88);
        *((_OWORD *)v14 + 5) = v16;
        *((_OWORD *)v14 + 6) = v17;
        *(_OWORD *)(v14 + 110) = *(_OWORD *)(v13 + 102);
        v14[128] = 1;
      }
      v14[136] = 0;
      v14[160] = 0;
      if (*(_BYTE *)(v13 + 152))
      {
        *((_QWORD *)v14 + 17) = &off_24C4169B8;
        *((_OWORD *)v14 + 9) = *(_OWORD *)(v13 + 136);
        *(_QWORD *)(v13 + 136) = 0;
        *(_QWORD *)(v13 + 144) = 0;
        v14[160] = 1;
      }
      *((_DWORD *)v14 + 42) = 1;
      *(_QWORD *)v14 = &off_24C3F3768;
      *((_QWORD *)v14 + 1) = &unk_24C3F37B8;
      goto LABEL_31;
    }
    LOBYTE(v20) = 0;
    v30 = 0;
    sub_20AF0D4A0(&v42, (uint64_t)&v20);
    if (!v30 || !v29)
    {
LABEL_30:
      v8 = 0;
      goto LABEL_31;
    }
    if (v28)
    {
      if (v27 < 0)
        operator delete(__p);
      if (v25 < 0)
        operator delete(v24);
    }
    v8 = 0;
    if (v23 && v22 < 0)
    {
      operator delete(v21);
      goto LABEL_30;
    }
  }
  else
  {
    v20 = v31;
    sub_20AECEBD0(&v21, &v32);
    v30 = 1;
    sub_20AF0D4A0(&v42, (uint64_t)&v20);
    if (v30 && v29)
    {
      if (v28)
      {
        if (v27 < 0)
          operator delete(__p);
        if (v25 < 0)
          operator delete(v24);
      }
      if (v23 && v22 < 0)
        operator delete(v21);
    }
  }
LABEL_31:
  if (v41)
  {
    (*(void (**)(__int128 *))v31)(&v31);
    if (v12)
      return v8;
    return 0;
  }
  if (v40)
  {
    if (v39)
    {
      if (v38 < 0)
        operator delete(v37);
      if (v36 < 0)
        operator delete(v35);
    }
    if (v34 && v33 < 0)
      operator delete((void *)v32);
  }
  if (!v12)
    return 0;
  return v8;
}

void sub_20AF0AC60(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  uint64_t v67;
  const std::logic_error *exception_ptr;
  const char *v71;
  size_t v72;
  size_t v73;
  void **p_dst;
  void *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  const char *v79;
  size_t v80;
  const char *v81;
  std::logic_error_vtbl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (*(_BYTE *)(v67 - 96))
  {
    (**(void (***)(uint64_t))(v67 - 256))(v67 - 256);
  }
  else if (*(_BYTE *)(v67 - 144))
  {
    if (*(_BYTE *)(v67 - 152))
    {
      if (*(char *)(v67 - 153) < 0)
        operator delete(*(void **)(v67 - 176));
      if (*(char *)(v67 - 185) < 0)
        operator delete(*(void **)(v67 - 208));
    }
    if (*(_BYTE *)(v67 - 216) && *(char *)(v67 - 217) < 0)
      operator delete(*(void **)(v67 - 240));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v71 = std::logic_error::what(&a10);
    v72 = strlen(v71);
    if (v72 <= 0x7FFFFFFFFFFFFFF7)
    {
      v73 = v72;
      if (v72 >= 0x17)
      {
        v83 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v72 | 7) != 0x17)
          v83 = v72 | 7;
        v84 = v83 + 1;
        p_dst = (void **)operator new(v83 + 1);
        __dst_8 = v73;
        *(_QWORD *)&a38 = v84 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v72;
        p_dst = (void **)&__dst;
        if (!v72)
        {
LABEL_52:
          *((_BYTE *)p_dst + v73) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          *(_OWORD *)(v67 - 256) = a13;
          sub_20AECEBD0((_BYTE *)(v67 - 240), &a14);
          *(_BYTE *)(v67 - 136) = 1;
          sub_20AF0D4A0((CFErrorRef ***)(v67 - 80), v67 - 256);
          if (*(_BYTE *)(v67 - 136) && *(_BYTE *)(v67 - 144))
          {
            if (*(_BYTE *)(v67 - 152))
            {
              if (*(char *)(v67 - 153) < 0)
                operator delete(*(void **)(v67 - 176));
              if (*(char *)(v67 - 185) < 0)
                operator delete(*(void **)(v67 - 208));
            }
            if (*(_BYTE *)(v67 - 216) && *(char *)(v67 - 217) < 0)
              operator delete(*(void **)(v67 - 240));
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_103;
        }
      }
      memmove(p_dst, v71, v73);
      goto LABEL_52;
    }
LABEL_102:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v67 - 256) = 0;
    *(_BYTE *)(v67 - 136) = 0;
    sub_20AF0D4A0((CFErrorRef ***)(v67 - 80), v67 - 256);
    if (*(_BYTE *)(v67 - 136) && *(_BYTE *)(v67 - 144))
    {
      if (*(_BYTE *)(v67 - 152))
      {
        if (*(char *)(v67 - 153) < 0)
          operator delete(*(void **)(v67 - 176));
        if (*(char *)(v67 - 185) < 0)
          operator delete(*(void **)(v67 - 208));
      }
      if (*(_BYTE *)(v67 - 216) && *(char *)(v67 - 217) < 0)
        operator delete(*(void **)(v67 - 240));
    }
    __cxa_end_catch();
LABEL_103:
    JUMPOUT(0x20AF0A9C8);
  }
  v75 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v75);
  a38 = *((_OWORD *)v75 + 1);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  v76 = *((_QWORD *)v75 + 5);
  a39 = *((_QWORD *)v75 + 4);
  a40 = v76;
  if (v76)
  {
    v77 = (unint64_t *)(v76 + 8);
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  __cxa_begin_catch(a1);
  v79 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v79 = *(const char **)v79;
  v80 = strlen(v79);
  if (v80 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_102;
  v81 = (const char *)v80;
  if (v80 >= 0x17)
  {
    v85 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v80 | 7) != 0x17)
      v85 = v80 | 7;
    v86 = v85 + 1;
    v82 = (std::logic_error_vtbl *)operator new(v85 + 1);
    a10.__imp_.__imp_ = v81;
    a11 = v86 | 0x8000000000000000;
    a10.__vftable = v82;
  }
  else
  {
    HIBYTE(a11) = v80;
    v82 = (std::logic_error_vtbl *)&a10;
    if (!v80)
    {
LABEL_79:
      v81[(_QWORD)v82] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      *(_OWORD *)(v67 - 256) = a13;
      sub_20AECEBD0((_BYTE *)(v67 - 240), &a14);
      *(_BYTE *)(v67 - 136) = 1;
      sub_20AF0D4A0((CFErrorRef ***)(v67 - 80), v67 - 256);
      if (*(_BYTE *)(v67 - 136) && *(_BYTE *)(v67 - 144))
      {
        if (*(_BYTE *)(v67 - 152))
        {
          if (*(char *)(v67 - 153) < 0)
            operator delete(*(void **)(v67 - 176));
          if (*(char *)(v67 - 185) < 0)
            operator delete(*(void **)(v67 - 208));
        }
        if (*(_BYTE *)(v67 - 216) && *(char *)(v67 - 217) < 0)
          operator delete(*(void **)(v67 - 240));
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_103;
    }
  }
  memmove(v82, v79, (size_t)v81);
  goto LABEL_79;
}

BOOL sub_20AF0B170(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t *v6;
  __int128 v7;
  void *v9[2];
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  void *v16[2];
  uint64_t v17;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  char v32;
  char v33;
  char v34;

  if (!a2)
  {
    v6 = sub_20AED75D0();
    if (*((char *)v6 + 23) < 0)
    {
      sub_20AEC60F4(v9, (void *)*v6, v6[1]);
    }
    else
    {
      v7 = *(_OWORD *)v6;
      v10 = v6[2];
      *(_OWORD *)v9 = v7;
    }
    v11 = 1;
    sub_20AECCECC(a1, (uint64_t)v9, (uint64_t)&v12);
    v23 = v12;
    LOBYTE(v24) = 0;
    v33 = 0;
    if (v22)
    {
      v26 = 0;
      if (v15)
      {
        v24 = v13;
        v25 = v14;
        v14 = 0;
        v13 = 0uLL;
        v26 = 1;
      }
      LOBYTE(v27) = 0;
      v32 = 0;
      if (v21)
      {
        v28 = v17;
        v27 = *(_OWORD *)v16;
        v16[0] = 0;
        v16[1] = 0;
        v29 = v18;
        *(_OWORD *)__p = *(_OWORD *)v19;
        v31 = v20;
        v17 = 0;
        v19[0] = 0;
        v19[1] = 0;
        v20 = 0;
        v32 = 1;
      }
      v33 = 1;
    }
    v34 = 0;
    sub_20AECB410(&v23, a3);
    if (!v34 && v33)
    {
      if (v32)
      {
        if (SHIBYTE(v31) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v28) < 0)
          operator delete((void *)v27);
      }
      if (v26 && SHIBYTE(v25) < 0)
        operator delete((void *)v24);
    }
    if (v22)
    {
      if (v21)
      {
        if (SHIBYTE(v20) < 0)
          operator delete(v19[0]);
        if (SHIBYTE(v17) < 0)
          operator delete(v16[0]);
      }
      if (v15 && SHIBYTE(v14) < 0)
        operator delete((void *)v13);
    }
    if (v11 && SHIBYTE(v10) < 0)
      operator delete(v9[0]);
  }
  return a2 == 0;
}

void sub_20AF0B368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECD704((uint64_t)&a32);
  sub_20AECCE40((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t VZImageCreateWithBytes(int a1, int a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, CFErrorRef *a8)
{
  int v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD v23[52];
  __int128 v24;
  void *v25;
  char v26;
  char v27;
  void *v28;
  char v29;
  void *__p;
  char v31;
  char v32;
  char v33;
  char v34;
  __int128 v35;
  __int128 v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  char v43;
  char v44;
  unsigned __int8 v45;
  CFErrorRef **v46;
  CFErrorRef *v47;

  if (sub_20AF0B170((uint64_t)"VZImageCreateWithBytes", a4, a8))
    return 0;
  v23[0] = a1;
  v23[1] = a2;
  v46 = &v47;
  v47 = a8;
  sub_20B008B18((uint64_t)v23, a3, a4, a5, a6, a7, (uint64_t)&v35);
  v16 = v45;
  if (v45)
  {
    v17 = sub_20AEF071C((uint64_t)&v35);
    v18 = (char *)operator new(0xB0uLL, MEMORY[0x24BEDB6B8]);
    if (v18)
    {
      a7 = (uint64_t)v18;
      v19 = *(_OWORD *)(v17 + 32);
      *(_OWORD *)(v18 + 24) = *(_OWORD *)(v17 + 16);
      *(_QWORD *)v18 = off_24C3F2180;
      *((_QWORD *)v18 + 1) = &off_24C403F68;
      *((_QWORD *)v18 + 2) = &off_24C3F2CB0;
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)(v17 + 24) = 0;
      *(_OWORD *)(v18 + 40) = v19;
      *(_OWORD *)(v18 + 54) = *(_OWORD *)(v17 + 46);
      v18[72] = 0;
      v18[128] = 0;
      if (*(_BYTE *)(v17 + 120))
      {
        *((_QWORD *)v18 + 9) = &off_24C3F2D20;
        v20 = *(_OWORD *)(v17 + 72);
        *(_QWORD *)(v17 + 72) = 0;
        *(_QWORD *)(v17 + 80) = 0;
        v21 = *(_OWORD *)(v17 + 88);
        *((_OWORD *)v18 + 5) = v20;
        *((_OWORD *)v18 + 6) = v21;
        *(_OWORD *)(v18 + 110) = *(_OWORD *)(v17 + 102);
        v18[128] = 1;
      }
      v18[136] = 0;
      v18[160] = 0;
      if (*(_BYTE *)(v17 + 152))
      {
        *((_QWORD *)v18 + 17) = &off_24C4169B8;
        *((_OWORD *)v18 + 9) = *(_OWORD *)(v17 + 136);
        *(_QWORD *)(v17 + 136) = 0;
        *(_QWORD *)(v17 + 144) = 0;
        v18[160] = 1;
      }
      *((_DWORD *)v18 + 42) = 1;
      *(_QWORD *)v18 = &off_24C3F3768;
      *((_QWORD *)v18 + 1) = &unk_24C3F37B8;
      goto LABEL_31;
    }
    LOBYTE(v24) = 0;
    v34 = 0;
    sub_20AF0D8EC(&v46, (uint64_t)&v24);
    if (!v34 || !v33)
    {
LABEL_30:
      a7 = 0;
      goto LABEL_31;
    }
    if (v32)
    {
      if (v31 < 0)
        operator delete(__p);
      if (v29 < 0)
        operator delete(v28);
    }
    a7 = 0;
    if (v27 && v26 < 0)
    {
      operator delete(v25);
      goto LABEL_30;
    }
  }
  else
  {
    v24 = v35;
    sub_20AECEBD0(&v25, &v36);
    v34 = 1;
    sub_20AF0D8EC(&v46, (uint64_t)&v24);
    if (v34 && v33)
    {
      if (v32)
      {
        if (v31 < 0)
          operator delete(__p);
        if (v29 < 0)
          operator delete(v28);
      }
      if (v27 && v26 < 0)
        operator delete(v25);
    }
  }
LABEL_31:
  if (v45)
  {
    (*(void (**)(__int128 *))v35)(&v35);
    if (v16)
      return a7;
    return 0;
  }
  if (v44)
  {
    if (v43)
    {
      if (v42 < 0)
        operator delete(v41);
      if (v40 < 0)
        operator delete(v39);
    }
    if (v38 && v37 < 0)
      operator delete((void *)v36);
  }
  if (!v16)
    return 0;
  return a7;
}

void sub_20AF0B69C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a68;
  void *a69;
  char a71;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  char a77;
  __int16 a78;
  __int16 a79;
  char a80;
  uint64_t v80;
  const std::logic_error *exception_ptr;
  const char *v84;
  size_t v85;
  size_t v86;
  void **p_dst;
  void *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  const char *v92;
  size_t v93;
  const char *v94;
  std::logic_error_vtbl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (a80)
  {
    (*(void (**)(__int128 *))a68)(&a68);
  }
  else if ((_BYTE)a78)
  {
    if (a77)
    {
      if (a76 < 0)
        operator delete(a75);
      if (a74 < 0)
        operator delete(a73);
    }
    if (a72 && a71 < 0)
      operator delete(a69);
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v84 = std::logic_error::what(&a10);
    v85 = strlen(v84);
    if (v85 <= 0x7FFFFFFFFFFFFFF7)
    {
      v86 = v85;
      if (v85 >= 0x17)
      {
        v96 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v85 | 7) != 0x17)
          v96 = v85 | 7;
        v97 = v96 + 1;
        p_dst = (void **)operator new(v96 + 1);
        __dst_8 = v86;
        *(_QWORD *)&a38 = v97 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v85;
        p_dst = (void **)&__dst;
        if (!v85)
        {
LABEL_52:
          *((_BYTE *)p_dst + v86) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a68 = a13;
          sub_20AECEBD0(&a69, &a14);
          LOBYTE(a79) = 1;
          sub_20AF0D8EC((CFErrorRef ***)(v80 - 96), (uint64_t)&a68);
          if ((_BYTE)a79 && (_BYTE)a78)
          {
            if (a77)
            {
              if (a76 < 0)
                operator delete(a75);
              if (a74 < 0)
                operator delete(a73);
            }
            if (a72 && a71 < 0)
              operator delete(a69);
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_103;
        }
      }
      memmove(p_dst, v84, v86);
      goto LABEL_52;
    }
LABEL_102:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    LOBYTE(a68) = 0;
    LOBYTE(a79) = 0;
    sub_20AF0D8EC((CFErrorRef ***)(v80 - 96), (uint64_t)&a68);
    if ((_BYTE)a79 && (_BYTE)a78)
    {
      if (a77)
      {
        if (a76 < 0)
          operator delete(a75);
        if (a74 < 0)
          operator delete(a73);
      }
      if (a72 && a71 < 0)
        operator delete(a69);
    }
    __cxa_end_catch();
LABEL_103:
    JUMPOUT(0x20AF0B3FCLL);
  }
  v88 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v88);
  a38 = *((_OWORD *)v88 + 1);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  v89 = *((_QWORD *)v88 + 5);
  a39 = *((_QWORD *)v88 + 4);
  a40 = v89;
  if (v89)
  {
    v90 = (unint64_t *)(v89 + 8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  __cxa_begin_catch(a1);
  v92 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v92 = *(const char **)v92;
  v93 = strlen(v92);
  if (v93 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_102;
  v94 = (const char *)v93;
  if (v93 >= 0x17)
  {
    v98 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v93 | 7) != 0x17)
      v98 = v93 | 7;
    v99 = v98 + 1;
    v95 = (std::logic_error_vtbl *)operator new(v98 + 1);
    a10.__imp_.__imp_ = v94;
    a11 = v99 | 0x8000000000000000;
    a10.__vftable = v95;
  }
  else
  {
    HIBYTE(a11) = v93;
    v95 = (std::logic_error_vtbl *)&a10;
    if (!v93)
    {
LABEL_79:
      v94[(_QWORD)v95] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a68 = a13;
      sub_20AECEBD0(&a69, &a14);
      LOBYTE(a79) = 1;
      sub_20AF0D8EC((CFErrorRef ***)(v80 - 96), (uint64_t)&a68);
      if ((_BYTE)a79 && (_BYTE)a78)
      {
        if (a77)
        {
          if (a76 < 0)
            operator delete(a75);
          if (a74 < 0)
            operator delete(a73);
        }
        if (a72 && a71 < 0)
          operator delete(a69);
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_103;
    }
  }
  memmove(v95, v92, (size_t)v94);
  goto LABEL_79;
}

uint64_t VZImageGetFormat(uint64_t a1)
{
  if (sub_20AEEF1EC((uint64_t)"VZImageGetFormat", a1, 0))
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(a1 + 64);
}

uint64_t VZImageGetWidth(uint64_t a1)
{
  if (sub_20AEEF1EC((uint64_t)"VZImageGetWidth", a1, 0))
    return 0;
  else
    return *(unsigned int *)(a1 + 40);
}

uint64_t VZImageGetHeight(uint64_t a1)
{
  if (sub_20AEEF1EC((uint64_t)"VZImageGetHeight", a1, 0))
    return 0;
  else
    return *(unsigned int *)(a1 + 44);
}

uint64_t VZImageGetBytesPerRow(uint64_t a1)
{
  if (sub_20AEEF1EC((uint64_t)"VZImageGetBytesPerRow", a1, 0))
    return 0;
  else
    return *(unsigned int *)(a1 + 48);
}

uint64_t VZImageGetBaseAddress(uint64_t a1)
{
  BOOL v2;
  uint64_t result;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  v2 = sub_20AEEF1EC((uint64_t)"VZImageGetBaseAddress", a1, 0);
  result = 0;
  if (!v2)
  {
    if (*(_BYTE *)(a1 + 68) && *(_QWORD *)(a1 + 56))
    {
      v4 = *(_QWORD *)(a1 + 24);
      v5 = *(std::__shared_weak_count **)(a1 + 32);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v4 + 88))(v4, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
    }
    return *(_QWORD *)(a1 + 56);
  }
  return result;
}

uint64_t VZImageGetBaseAddressMutable(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 v8;
  unsigned __int8 v9;
  __int128 *v10;
  const void **v11;
  int v12;
  size_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  void *v19[2];
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  void *v26[2];
  uint64_t v27;
  uint64_t v28;
  void *v29[2];
  uint64_t v30;
  char v31;
  char v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  void *__p[2];
  uint64_t v41;
  char v42;
  char v43;
  char v44;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 124) && *(_QWORD *)(a1 + 112))
    {
      v2 = *(_QWORD *)(a1 + 80);
      v3 = *(std::__shared_weak_count **)(a1 + 88);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v2 + 88))(v2, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
    }
    return *(_QWORD *)(a1 + 112);
  }
  v8 = atomic_load((unsigned __int8 *)&qword_254638810);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254638810))
  {
    v10 = sub_20AEF0880();
    v11 = (const void **)v10;
    v12 = *((char *)v10 + 23);
    if (v12 >= 0)
      v13 = *((unsigned __int8 *)v10 + 23);
    else
      v13 = *((_QWORD *)v10 + 1);
    v14 = v13 + 1;
    if (v13 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v14 >= 0x17)
    {
      v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v16 = v14 | 7;
      v17 = v16 + 1;
      v15 = (__int128 *)operator new(v16 + 1);
      *((_QWORD *)&xmmword_2546389C8 + 1) = v13 + 1;
      unk_2546389D8 = v17 | 0x8000000000000000;
      *(_QWORD *)&xmmword_2546389C8 = v15;
    }
    else
    {
      v15 = &xmmword_2546389C8;
      unk_2546389D8 = 0;
      xmmword_2546389C8 = 0uLL;
      byte_2546389DF = v13 + 1;
      if (!v13)
      {
LABEL_63:
        *(_WORD *)((char *)v15 + v13) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546389C8, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638810);
        goto LABEL_13;
      }
    }
    if (v12 >= 0)
      v18 = v11;
    else
      v18 = *v11;
    memmove(v15, v18, v13);
    goto LABEL_63;
  }
LABEL_13:
  if (byte_2546389DF < 0)
  {
    sub_20AEC60F4(v19, (void *)xmmword_2546389C8, *((unint64_t *)&xmmword_2546389C8 + 1));
  }
  else
  {
    *(_OWORD *)v19 = xmmword_2546389C8;
    v20 = unk_2546389D8;
  }
  v21 = 1;
  sub_20AECCECC((uint64_t)"VZImageGetBaseAddressMutable", (uint64_t)v19, (uint64_t)&v22);
  v33 = v22;
  LOBYTE(v34) = 0;
  v43 = 0;
  if (v32)
  {
    v36 = 0;
    if (v25)
    {
      v34 = v23;
      v35 = v24;
      v24 = 0;
      v23 = 0uLL;
      v36 = 1;
    }
    LOBYTE(v37) = 0;
    v42 = 0;
    if (v31)
    {
      v38 = v27;
      v37 = *(_OWORD *)v26;
      v26[0] = 0;
      v26[1] = 0;
      v39 = v28;
      *(_OWORD *)__p = *(_OWORD *)v29;
      v41 = v30;
      v27 = 0;
      v29[0] = 0;
      v29[1] = 0;
      v30 = 0;
      v42 = 1;
    }
    v43 = 1;
  }
  v44 = 0;
  v9 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v33);
  if (!v44 && v43)
  {
    if (v42)
    {
      if (SHIBYTE(v41) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v38) < 0)
        operator delete((void *)v37);
    }
    if (v36 && SHIBYTE(v35) < 0)
      operator delete((void *)v34);
  }
  if (v32)
  {
    if (v31)
    {
      if (SHIBYTE(v30) < 0)
        operator delete(v29[0]);
      if (SHIBYTE(v27) < 0)
        operator delete(v26[0]);
    }
    if (v25 && SHIBYTE(v24) < 0)
      operator delete((void *)v23);
  }
  if (v21 && SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  return 0;
}

void sub_20AF0C160(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638810);
  _Unwind_Resume(a1);
}

void sub_20AF0C178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VZImageGetByteSize(uint64_t a1)
{
  if (sub_20AEEF1EC((uint64_t)"VZImageGetByteSize", a1, 0))
    return 0;
  else
    return sub_20B008570((_DWORD *)(a1 + 8));
}

BOOL VZImageEqual(uint64_t a1, uint64_t a2)
{
  return !sub_20AEEF1EC((uint64_t)"VZImageEqual", a1, 0)
      && !sub_20AEEF1EC((uint64_t)"VZImageEqual", a2, 0)
      && sub_20B00869C(a1 + 8, a2 + 8);
}

uint64_t sub_20AF0C250(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 168);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AF0C268(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 168);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AF0C290()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638778);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638778))
    return qword_254638770;
  qword_254638770 = sub_20AECB130();
  __cxa_guard_release(&qword_254638778);
  return qword_254638770;
}

_DWORD *sub_20AF0C2F0(uint64_t a1, void *lpsrc)
{
  _DWORD *result;
  BOOL v4;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F37E0, 0);
  if (result)
  {
    if (*(_QWORD *)(a1 + 56) == *((_QWORD *)result + 7))
    {
      if (*(_DWORD *)(a1 + 64) == result[16]
        && (*(_DWORD *)(a1 + 40) == result[10] ? (v4 = *(_DWORD *)(a1 + 44) == result[11]) : (v4 = 0), v4))
      {
        return (_DWORD *)(*(_DWORD *)(a1 + 48) == result[12]);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFTypeRef sub_20AF0C394(uint64_t a1)
{
  __int128 *v2;
  uint64_t v3;
  int v4;
  size_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  char v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  void *__dst[2];
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v2 = sub_20AEF0880();
  v27 = a1;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_20AEC0BD8(v3);
  v28 = (_QWORD *)v3;
  sub_20AF9DC04((_QWORD *)(v3 + 16), a1 + 16);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(v3 + 112);
    v8 = *(_QWORD *)(v3 + 72);
    if (v7 < v8)
    {
      *(_QWORD *)(v3 + 112) = v8;
      v7 = v8;
    }
    v9 = *(const void **)(v3 + 64);
    v5 = v7 - (_QWORD)v9;
    if (v7 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v4 & 8) == 0)
    {
      v5 = 0;
      HIBYTE(v26) = 0;
      v6 = __dst;
      goto LABEL_14;
    }
    v9 = *(const void **)(v3 + 40);
    v5 = *(_QWORD *)(v3 + 56) - (_QWORD)v9;
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v6 = (void **)operator new(v10 + 1);
    __dst[1] = (void *)v5;
    v26 = v11 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_13;
  }
  HIBYTE(v26) = v5;
  v6 = __dst;
  if (v5)
LABEL_13:
    memmove(v6, v9, v5);
LABEL_14:
  *((_BYTE *)v6 + v5) = 0;
  v12 = v28;
  if (v28)
  {
    v13 = MEMORY[0x24BEDB7F0];
    v14 = *MEMORY[0x24BEDB7F0];
    *v28 = *MEMORY[0x24BEDB7F0];
    v15 = *(_QWORD *)(v13 + 72);
    *(_QWORD *)((char *)v12 + *(_QWORD *)(v14 - 24)) = *(_QWORD *)(v13 + 64);
    v12[3] = MEMORY[0x24BEDB848] + 16;
    v12[2] = v15;
    if (*((char *)v12 + 111) < 0)
      operator delete((void *)v12[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v12 + 16);
    MEMORY[0x20BD3583C](v12, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)v2, (uint64_t)" ", &v27, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v16 = cf;
  if (cf)
    CFRetain(cf);
  v17 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if ((v22 & 0x80000000) == 0)
        return v16;
      goto LABEL_27;
    }
  }
  if (v22 < 0)
LABEL_27:
    operator delete(__p);
  return v16;
}

void sub_20AF0C634(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __int128 *v23;

  sub_20AEC147C((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  v23 = sub_20AEF0880();
  sub_20AEC0D64(&__p, "failed to create description");
  sub_20AECD224((std::string::size_type)v23, (const void **)&__p, 0);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20AF0C618);
}

uint64_t sub_20AF0C6F8(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 168));
}

void sub_20AF0C704(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  __int128 *v6;
  __int128 v7;
  void **v8;
  void **v9;
  void *v10;
  uint64_t *v11;
  const void **v12;
  int v13;
  size_t v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  _BYTE v20[16];
  void *__p;
  char v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  void *v31;
  void **v32;
  __int128 __dst;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AED5104();
  v5 = atomic_load((unsigned __int8 *)&qword_254638780);
  if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254638780))
    goto LABEL_2;
  v11 = sub_20AEF1088();
  v12 = (const void **)v11;
  v13 = *((char *)v11 + 23);
  if (v13 >= 0)
    v14 = *((unsigned __int8 *)v11 + 23);
  else
    v14 = v11[1];
  v15 = v14 + 1;
  if (v14 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v16 = (__int128 *)operator new(v17 + 1);
    *((_QWORD *)&xmmword_254638818 + 1) = v14 + 1;
    unk_254638828 = v18 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254638818 = v16;
    goto LABEL_43;
  }
  v16 = &xmmword_254638818;
  unk_254638828 = 0;
  xmmword_254638818 = 0uLL;
  byte_25463882F = v14 + 1;
  if (v14)
  {
LABEL_43:
    if (v13 >= 0)
      v19 = v12;
    else
      v19 = *v12;
    memmove(v16, v19, v14);
  }
  *(_WORD *)((char *)v16 + v14) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638818, &dword_20AEBB000);
  __cxa_guard_release(&qword_254638780);
LABEL_2:
  if (byte_25463882F < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_254638818, *((unint64_t *)&xmmword_254638818 + 1));
  }
  else
  {
    __dst = xmmword_254638818;
    v34 = unk_254638828;
  }
  v6 = sub_20AED3F9C();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v35, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v36 = *((_QWORD *)v6 + 2);
    v35 = v7;
  }
  sub_20AEC7620(&v31, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v20, a2);
  sub_20AECD798(v4, (__int128 **)&v31, (uint64_t)v20, **a1);
  if (!v30 || !v29)
    goto LABEL_16;
  if (!v28)
    goto LABEL_13;
  if ((v27 & 0x80000000) == 0)
  {
    if ((v25 & 0x80000000) == 0)
      goto LABEL_13;
LABEL_30:
    operator delete(v24);
    if (!v23)
      goto LABEL_16;
    goto LABEL_14;
  }
  operator delete(v26);
  if (v25 < 0)
    goto LABEL_30;
LABEL_13:
  if (!v23)
    goto LABEL_16;
LABEL_14:
  if (v22 < 0)
    operator delete(__p);
LABEL_16:
  v8 = (void **)v31;
  if (v31)
  {
    v9 = v32;
    v10 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = v31;
    }
    v32 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v35);
  if (SHIBYTE(v34) < 0)
    goto LABEL_28;
}

void sub_20AF0CA18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638780);
  _Unwind_Resume(a1);
}

void sub_20AF0CA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  sub_20AECDEE0((uint64_t)&a9);
  sub_20AEC2E90(&a25);
  if (*(char *)(v25 - 97) < 0)
    operator delete(*(void **)(v25 - 120));
  if (*(char *)(v25 - 121) < 0)
  {
    operator delete(*(void **)(v25 - 144));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AF0CA90(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  __int128 v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  _BYTE v10[16];
  void *__p;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  __int128 *v21;
  __int128 *v22;
  __int128 __dst;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AEF0880();
  v5 = sub_20AED6ED4();
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)*v5, v5[1]);
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v24 = v5[2];
    __dst = v6;
  }
  sub_20AEC7620(&v21, (uint64_t)&__dst, 1uLL);
  sub_20AECF9B0(v10, a2);
  sub_20AECD798(v4, &v21, (uint64_t)v10, **a1);
  if (!v20 || !v19)
    goto LABEL_12;
  if (!v18)
    goto LABEL_9;
  if ((v17 & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_24:
    operator delete(v14);
    if (!v13)
      goto LABEL_12;
    goto LABEL_10;
  }
  operator delete(v16);
  if (v15 < 0)
    goto LABEL_24;
LABEL_9:
  if (!v13)
    goto LABEL_12;
LABEL_10:
  if (v12 < 0)
    operator delete(__p);
LABEL_12:
  v7 = v21;
  if (v21)
  {
    v8 = v22;
    v9 = v21;
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*((void **)v8 - 3));
        v8 = (__int128 *)((char *)v8 - 24);
      }
      while (v8 != v7);
      v9 = v21;
    }
    v22 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v24) < 0)
    operator delete((void *)__dst);
}

void sub_20AF0CC14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECDEE0((uint64_t)va);
  sub_20AEC2E90((void **)(v2 - 88));
  if (*(char *)(v2 - 41) < 0)
  {
    operator delete(*(void **)(v2 - 64));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AF0CC5C(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[16];
  void *__p;
  char v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  char v16;
  char v17;
  char v18;
  void *v19;
  void **v20;
  __int128 __dst;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AEF0880();
  sub_20AF0CF78();
  if (byte_254638847 < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_254638830, *((unint64_t *)&xmmword_254638830 + 1));
  }
  else
  {
    __dst = xmmword_254638830;
    v22 = unk_254638840;
  }
  sub_20AF0D130();
  if (byte_25463888F < 0)
  {
    sub_20AEC60F4(&v23, (void *)xmmword_254638878, *((unint64_t *)&xmmword_254638878 + 1));
  }
  else
  {
    v23 = xmmword_254638878;
    v24 = unk_254638888;
  }
  sub_20AF0D2E8();
  if (byte_2546388D7 < 0)
  {
    sub_20AEC60F4(&v25, (void *)xmmword_2546388C0, *((unint64_t *)&xmmword_2546388C0 + 1));
  }
  else
  {
    v25 = xmmword_2546388C0;
    v26 = unk_2546388D0;
  }
  sub_20AEC7620(&v19, (uint64_t)&__dst, 3uLL);
  sub_20AECF9B0(v8, a2);
  sub_20AECD798(v4, (__int128 **)&v19, (uint64_t)v8, **a1);
  if (!v18 || !v17)
    goto LABEL_18;
  if (!v16)
    goto LABEL_15;
  if ((v15 & 0x80000000) == 0)
  {
    if ((v13 & 0x80000000) == 0)
      goto LABEL_15;
LABEL_34:
    operator delete(v12);
    if (!v11)
      goto LABEL_18;
    goto LABEL_16;
  }
  operator delete(v14);
  if (v13 < 0)
    goto LABEL_34;
LABEL_15:
  if (!v11)
    goto LABEL_18;
LABEL_16:
  if (v10 < 0)
    operator delete(__p);
LABEL_18:
  v5 = (void **)v19;
  if (v19)
  {
    v6 = v20;
    v7 = v19;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = v19;
    }
    v20 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete((void *)v25);
    if ((SHIBYTE(v24) & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v22) & 0x80000000) == 0)
        return;
LABEL_32:
      operator delete((void *)__dst);
      return;
    }
  }
  else if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete((void *)v23);
  if (SHIBYTE(v22) < 0)
    goto LABEL_32;
}

void sub_20AF0CED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  uint64_t v26;

  sub_20AECDEE0((uint64_t)&a10);
  sub_20AEC2E90(&a26);
  if (*(char *)(v26 - 57) < 0)
  {
    operator delete(*(void **)(v26 - 80));
    if ((*(char *)(v26 - 81) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v26 - 105) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(*(void **)(v26 - 128));
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v26 - 81) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v26 - 104));
  if ((*(char *)(v26 - 105) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20AF0CF50()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20AF0CF48);
  }
}

void sub_20AF0CF78()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638788);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638788))
  {
    sub_20AF0D030();
    if (byte_254638877 < 0)
    {
      sub_20AEC60F4(&xmmword_254638830, (void *)xmmword_254638860, *((unint64_t *)&xmmword_254638860 + 1));
    }
    else
    {
      xmmword_254638830 = xmmword_254638860;
      unk_254638840 = unk_254638870;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638830, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638788);
  }
}

void sub_20AF0D018(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638788);
  _Unwind_Resume(a1);
}

void sub_20AF0D030()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254638790);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638790))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vl::visual_logger::BufferType]", qword_254638848);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254638848, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638790);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254638798);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254638798))
    {
      sub_20B531658((uint64_t)qword_254638848, (uint64_t)&xmmword_254638860);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638860, &dword_20AEBB000);
      __cxa_guard_release(&qword_254638798);
    }
  }
}

void sub_20AF0D100(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638798);
  _Unwind_Resume(a1);
}

void sub_20AF0D118(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638790);
  _Unwind_Resume(a1);
}

void sub_20AF0D130()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546387A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546387A0))
  {
    sub_20AF0D1E8();
    if (byte_2546388BF < 0)
    {
      sub_20AEC60F4(&xmmword_254638878, (void *)xmmword_2546388A8, *((unint64_t *)&xmmword_2546388A8 + 1));
    }
    else
    {
      xmmword_254638878 = xmmword_2546388A8;
      unk_254638888 = unk_2546388B8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638878, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546387A0);
  }
}

void sub_20AF0D1D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546387A0);
  _Unwind_Resume(a1);
}

void sub_20AF0D1E8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2546387A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546387A8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::esn::arr::SizeT<2, cv3d::esn::arr::SizeType::Shape, void>]", qword_254638890);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254638890, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546387A8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546387B0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2546387B0))
    {
      sub_20B531658((uint64_t)qword_254638890, (uint64_t)&xmmword_2546388A8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546388A8, &dword_20AEBB000);
      __cxa_guard_release(&qword_2546387B0);
    }
  }
}

void sub_20AF0D2B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546387B0);
  _Unwind_Resume(a1);
}

void sub_20AF0D2D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546387A8);
  _Unwind_Resume(a1);
}

void sub_20AF0D2E8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546387B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546387B8))
  {
    sub_20AF0D3A0();
    if (byte_254638907 < 0)
    {
      sub_20AEC60F4(&xmmword_2546388C0, (void *)xmmword_2546388F0, *((unint64_t *)&xmmword_2546388F0 + 1));
    }
    else
    {
      xmmword_2546388C0 = xmmword_2546388F0;
      unk_2546388D0 = unk_254638900;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546388C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546387B8);
  }
}

void sub_20AF0D388(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546387B8);
  _Unwind_Resume(a1);
}

void sub_20AF0D3A0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2546387C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546387C0))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format]", qword_2546388D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546388D8, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546387C0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546387C8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2546387C8))
    {
      sub_20B531658((uint64_t)qword_2546388D8, (uint64_t)&xmmword_2546388F0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546388F0, &dword_20AEBB000);
      __cxa_guard_release(&qword_2546387C8);
    }
  }
}

void sub_20AF0D470(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546387C8);
  _Unwind_Resume(a1);
}

void sub_20AF0D488(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546387C0);
  _Unwind_Resume(a1);
}

void sub_20AF0D4A0(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  __int128 v6;
  unsigned __int8 v7;
  void **v8;
  void **v9;
  void *v10;
  _BYTE v11[16];
  void *__p;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  void *v22;
  void **v23;
  void *__dst[2];
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AEF0880();
  sub_20AF0CF78();
  if (byte_254638847 < 0)
  {
    sub_20AEC60F4(__dst, (void *)xmmword_254638830, *((unint64_t *)&xmmword_254638830 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254638830;
    v25 = unk_254638840;
  }
  sub_20AF0D130();
  if (byte_25463888F < 0)
  {
    sub_20AEC60F4(&v26, (void *)xmmword_254638878, *((unint64_t *)&xmmword_254638878 + 1));
  }
  else
  {
    v26 = xmmword_254638878;
    v27 = unk_254638888;
  }
  sub_20AF0D2E8();
  if (byte_2546388D7 < 0)
  {
    sub_20AEC60F4(&v28, (void *)xmmword_2546388C0, *((unint64_t *)&xmmword_2546388C0 + 1));
  }
  else
  {
    v28 = xmmword_2546388C0;
    v29 = unk_2546388D0;
  }
  v5 = sub_20AED733C();
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(&v30, (void *)*v5, v5[1]);
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v31 = v5[2];
    v30 = v6;
  }
  v7 = atomic_load((unsigned __int8 *)&qword_2546387D0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_2546387D0))
  {
    unk_254638918 = 0x700000000000000;
    xmmword_254638908 = 0x263233746E6975uLL;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638908, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546387D0);
  }
  if (byte_25463891F < 0)
  {
    sub_20AEC60F4(&v32, (void *)xmmword_254638908, *((unint64_t *)&xmmword_254638908 + 1));
  }
  else
  {
    v32 = xmmword_254638908;
    v33 = unk_254638918;
  }
  sub_20AEC7620(&v22, (uint64_t)__dst, 5uLL);
  sub_20AECF9B0(v11, a2);
  sub_20AECD798(v4, (__int128 **)&v22, (uint64_t)v11, **a1);
  if (v21 && v20)
  {
    if (!v19)
      goto LABEL_22;
    if (v18 < 0)
    {
      operator delete(v17);
      if ((v16 & 0x80000000) == 0)
      {
LABEL_22:
        if (!v14)
          goto LABEL_25;
LABEL_23:
        if (v13 < 0)
          operator delete(__p);
        goto LABEL_25;
      }
    }
    else if ((v16 & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v15);
    if (!v14)
      goto LABEL_25;
    goto LABEL_23;
  }
LABEL_25:
  v8 = (void **)v22;
  if (v22)
  {
    v9 = v23;
    v10 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = v22;
    }
    v23 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v33) < 0)
  {
    operator delete((void *)v32);
    if ((SHIBYTE(v31) & 0x80000000) == 0)
    {
LABEL_35:
      if ((SHIBYTE(v29) & 0x80000000) == 0)
        goto LABEL_36;
      goto LABEL_41;
    }
  }
  else if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
    goto LABEL_35;
  }
  operator delete((void *)v30);
  if ((SHIBYTE(v29) & 0x80000000) == 0)
  {
LABEL_36:
    if ((SHIBYTE(v27) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_42;
  }
LABEL_41:
  operator delete((void *)v28);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
LABEL_37:
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      return;
LABEL_43:
    operator delete(__dst[0]);
    return;
  }
LABEL_42:
  operator delete((void *)v26);
  if (SHIBYTE(v25) < 0)
    goto LABEL_43;
}

void sub_20AF0D818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  sub_20AECDEE0((uint64_t)&a10);
  sub_20AEC2E90(&a26);
  if (a58 < 0)
  {
    operator delete(__p);
    if ((a52 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a46 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a52 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a47);
  if ((a46 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a41);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a34 & 0x80000000) == 0)
LABEL_12:
      _Unwind_Resume(a1);
LABEL_11:
    operator delete(a29);
    _Unwind_Resume(a1);
  }
LABEL_10:
  operator delete(a35);
  if ((a34 & 0x80000000) == 0)
    goto LABEL_12;
  goto LABEL_11;
}

void sub_20AF0D8C4()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20AF0D8BCLL);
  }
}

void sub_20AF0D8EC(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  __int128 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  void **v10;
  void **v11;
  void *v12;
  int v13;
  size_t v14;
  unint64_t v15;
  __int128 *v16;
  unsigned __int8 v17;
  int v18;
  size_t v19;
  unint64_t v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _BYTE v28[16];
  void *__p;
  char v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  char v36;
  char v37;
  char v38;
  void *v39;
  void **v40;
  void *__dst[2];
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AEF0880();
  sub_20AF0D130();
  if (byte_25463888F < 0)
  {
    sub_20AEC60F4(__dst, (void *)xmmword_254638878, *((unint64_t *)&xmmword_254638878 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254638878;
    v42 = unk_254638888;
  }
  sub_20AF0D2E8();
  if (byte_2546388D7 < 0)
  {
    sub_20AEC60F4(&v43, (void *)xmmword_2546388C0, *((unint64_t *)&xmmword_2546388C0 + 1));
  }
  else
  {
    v43 = xmmword_2546388C0;
    v44 = unk_2546388D0;
  }
  v5 = sub_20AED733C();
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(&v45, (void *)*v5, v5[1]);
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v46 = v5[2];
    v45 = v6;
  }
  v7 = atomic_load((unsigned __int8 *)&qword_2546387D0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_2546387D0))
  {
    unk_254638918 = 0x700000000000000;
    xmmword_254638908 = 0x263233746E6975uLL;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638908, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546387D0);
  }
  if (byte_25463891F < 0)
  {
    sub_20AEC60F4(&v47, (void *)xmmword_254638908, *((unint64_t *)&xmmword_254638908 + 1));
  }
  else
  {
    v47 = xmmword_254638908;
    v48 = unk_254638918;
  }
  v8 = atomic_load((unsigned __int8 *)&qword_2546387D8);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2546387D8))
  {
    sub_20AF0E074();
    v13 = byte_25463894F;
    if (byte_25463894F >= 0)
      v14 = byte_25463894F;
    else
      v14 = qword_254638940;
    v15 = v14 + 1;
    if (v14 + 1 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    if (v15 >= 0x17)
    {
      v25 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v25 = v15 | 7;
      v26 = v25 + 1;
      v16 = (__int128 *)operator new(v25 + 1);
      *((_QWORD *)&xmmword_254638920 + 1) = v14 + 1;
      unk_254638930 = v26 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638920 = v16;
    }
    else
    {
      v16 = &xmmword_254638920;
      unk_254638930 = 0;
      xmmword_254638920 = 0uLL;
      byte_254638937 = v14 + 1;
      if (!v14)
      {
LABEL_88:
        *(_WORD *)((char *)v16 + v14) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638920, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546387D8);
        goto LABEL_15;
      }
    }
    if (v13 >= 0)
      v27 = &qword_254638938;
    else
      v27 = (uint64_t *)qword_254638938;
    memmove(v16, v27, v14);
    goto LABEL_88;
  }
LABEL_15:
  if (byte_254638937 < 0)
  {
    sub_20AEC60F4(&v49, (void *)xmmword_254638920, *((unint64_t *)&xmmword_254638920 + 1));
  }
  else
  {
    v49 = xmmword_254638920;
    v50 = unk_254638930;
  }
  v9 = atomic_load((unsigned __int8 *)&qword_254638800);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254638800))
  {
    v17 = atomic_load((unsigned __int8 *)&qword_254638808);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254638808))
    {
      qword_2546389B8 = 0;
      unk_2546389C0 = 0x500000000000000;
      qword_2546389B0 = 0x2A64696F76;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2546389B0, &dword_20AEBB000);
      __cxa_guard_release(&qword_254638808);
    }
    v18 = byte_2546389C7;
    if (byte_2546389C7 >= 0)
      v19 = byte_2546389C7;
    else
      v19 = qword_2546389B8;
    v20 = v19 + 1;
    if (v19 + 1 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    if (v20 >= 0x17)
    {
      v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v22 = v20 | 7;
      v23 = v22 + 1;
      v21 = (__int128 *)operator new(v22 + 1);
      *((_QWORD *)&xmmword_254638998 + 1) = v19 + 1;
      unk_2546389A8 = v23 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638998 = v21;
    }
    else
    {
      v21 = &xmmword_254638998;
      unk_2546389A8 = 0;
      xmmword_254638998 = 0uLL;
      byte_2546389AF = v19 + 1;
      if (!v19)
      {
LABEL_80:
        *(_WORD *)((char *)v21 + v19) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638998, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638800);
        goto LABEL_19;
      }
    }
    if (v18 >= 0)
      v24 = &qword_2546389B0;
    else
      v24 = (uint64_t *)qword_2546389B0;
    memmove(v21, v24, v19);
    goto LABEL_80;
  }
LABEL_19:
  if (byte_2546389AF < 0)
  {
    sub_20AEC60F4(&v51, (void *)xmmword_254638998, *((unint64_t *)&xmmword_254638998 + 1));
  }
  else
  {
    v51 = xmmword_254638998;
    v52 = unk_2546389A8;
  }
  sub_20AEC7620(&v39, (uint64_t)__dst, 6uLL);
  sub_20AECF9B0(v28, a2);
  sub_20AECD798(v4, (__int128 **)&v39, (uint64_t)v28, **a1);
  if (!v38 || !v37)
    goto LABEL_30;
  if (!v36)
    goto LABEL_27;
  if ((v35 & 0x80000000) == 0)
  {
    if ((v33 & 0x80000000) == 0)
      goto LABEL_27;
LABEL_52:
    operator delete(v32);
    if (!v31)
      goto LABEL_30;
    goto LABEL_28;
  }
  operator delete(v34);
  if (v33 < 0)
    goto LABEL_52;
LABEL_27:
  if (!v31)
    goto LABEL_30;
LABEL_28:
  if (v30 < 0)
    operator delete(__p);
LABEL_30:
  v10 = (void **)v39;
  if (v39)
  {
    v11 = v40;
    v12 = v39;
    if (v40 != v39)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = v39;
    }
    v40 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v52) < 0)
  {
    operator delete((void *)v51);
    if ((SHIBYTE(v50) & 0x80000000) == 0)
    {
LABEL_40:
      if ((SHIBYTE(v48) & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_47;
    }
  }
  else if ((SHIBYTE(v50) & 0x80000000) == 0)
  {
    goto LABEL_40;
  }
  operator delete((void *)v49);
  if ((SHIBYTE(v48) & 0x80000000) == 0)
  {
LABEL_41:
    if ((SHIBYTE(v46) & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_48;
  }
LABEL_47:
  operator delete((void *)v47);
  if ((SHIBYTE(v46) & 0x80000000) == 0)
  {
LABEL_42:
    if ((SHIBYTE(v44) & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_49;
  }
LABEL_48:
  operator delete((void *)v45);
  if ((SHIBYTE(v44) & 0x80000000) == 0)
  {
LABEL_43:
    if ((SHIBYTE(v42) & 0x80000000) == 0)
      return;
LABEL_50:
    operator delete(__dst[0]);
    return;
  }
LABEL_49:
  operator delete((void *)v43);
  if (SHIBYTE(v42) < 0)
    goto LABEL_50;
}

void sub_20AF0DF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  void **v29;

  __cxa_guard_abort(&qword_254638800);
  while (1)
  {
    if (*((char *)v29 - 1) < 0)
      operator delete(*(v29 - 3));
    v29 -= 3;
    if (v29 == &a29)
      _Unwind_Resume(a1);
  }
}

void sub_20AF0E074()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_2546387E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546387E0))
  {
    sub_20AF0E1CC();
    v1 = byte_254638967;
    if (byte_254638967 >= 0)
      v2 = byte_254638967;
    else
      v2 = *((_QWORD *)&xmmword_254638950 + 1);
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (uint64_t *)operator new(v5 + 1);
      qword_254638940 = v2 + 1;
      unk_254638948 = v6 | 0x8000000000000000;
      qword_254638938 = (uint64_t)v4;
    }
    else
    {
      v4 = &qword_254638938;
      qword_254638940 = 0;
      unk_254638948 = 0;
      qword_254638938 = 0;
      byte_25463894F = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254638938, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546387E0);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &xmmword_254638950;
    else
      v7 = (__int128 *)xmmword_254638950;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_20AF0E1B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546387E0);
  _Unwind_Resume(a1);
}

void sub_20AF0E1CC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546387E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546387E8))
  {
    sub_20AF0E284();
    if (byte_254638997 < 0)
    {
      sub_20AEC60F4(&xmmword_254638950, (void *)xmmword_254638980, *((unint64_t *)&xmmword_254638980 + 1));
    }
    else
    {
      xmmword_254638950 = xmmword_254638980;
      unk_254638960 = unk_254638990;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638950, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546387E8);
  }
}

void sub_20AF0E26C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546387E8);
  _Unwind_Resume(a1);
}

void sub_20AF0E284()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2546387F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546387F0))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (void *, const void *)]", qword_254638968);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254638968, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546387F0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546387F8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2546387F8))
    {
      sub_20B531658((uint64_t)qword_254638968, (uint64_t)&xmmword_254638980);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638980, &dword_20AEBB000);
      __cxa_guard_release(&qword_2546387F8);
    }
  }
}

void sub_20AF0E354(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546387F8);
  _Unwind_Resume(a1);
}

void sub_20AF0E36C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546387F0);
  _Unwind_Resume(a1);
}

uint64_t sub_20AF0E384(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AF0E3EC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AF0E448(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AF0E4B0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AF0E518(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AF0E580(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AF0E5DC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AF0E644(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t VZLines2GetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546389E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546389E8))
    return qword_2546389E0;
  qword_2546389E0 = sub_20AECB130();
  __cxa_guard_release(&qword_2546389E8);
  return qword_2546389E0;
}

uint64_t VZLines3GetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546389F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546389F8))
    return qword_2546389F0;
  qword_2546389F0 = sub_20AECB130();
  __cxa_guard_release(&qword_2546389F8);
  return qword_2546389F0;
}

_QWORD *VZDataCreateWithLines2(uint64_t a1, __int128 *a2, CFErrorRef *a3)
{
  _QWORD *v5;
  int v6;
  __int128 *v7;
  _QWORD *v8;
  __int128 v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  CFErrorRef **v21;
  CFErrorRef *v22;
  char v23[208];
  void *v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  char v29;
  void *v30;
  char v31;
  char v32;
  char v33;
  char v34;
  __int128 v35[13];
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  void *__p;
  char v43;
  char v44;
  char v45;
  char v46;
  __int128 v47;
  __int128 v48;
  char v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  char v55;
  char v56;
  unsigned __int8 v57;
  uint64_t v58;

  v5 = (_QWORD *)a1;
  v58 = *MEMORY[0x24BDAC8D0];
  if (sub_20AF0ECE0((uint64_t)"VZDataCreateWithLines2", a1, a3))
    return 0;
  sub_20AED18DC(a2, v23);
  v21 = &v22;
  v22 = a3;
  sub_20AED4D3C(v35, (uint64_t)v23);
  sub_20B072000((uint64_t)(v5 + 2), v35, (uint64_t)&v47);
  if (v46)
  {
    if (v45)
    {
      if (v44 && v43 < 0)
        operator delete(__p);
      if (v41 && v40 < 0)
        operator delete(v39);
      if (v38 && v37 < 0)
        operator delete(v36);
    }
    sub_20AED30E0((uint64_t)v35);
  }
  v6 = v57;
  if (!v57)
  {
    v10 = v47;
    sub_20AECEBD0(&v11, &v48);
    v20 = 1;
    sub_20AF12798(&v21, (uint64_t)&v10);
    if (!v20 || !v19)
      goto LABEL_39;
    if (v18)
    {
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
    }
    if (!v13 || (v12 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_37;
  }
  v7 = (__int128 *)sub_20AED4AC0((uint64_t)&v47);
  v8 = operator new(0x240uLL, MEMORY[0x24BEDB6B8]);
  if (!v8)
  {
    LOBYTE(v10) = 0;
    v20 = 0;
    sub_20AF12798(&v21, (uint64_t)&v10);
    if (!v20 || !v19)
      goto LABEL_38;
    if (v18)
    {
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
    }
    v5 = 0;
    if (!v13 || (v12 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_37:
    operator delete(v11);
LABEL_38:
    v5 = 0;
    goto LABEL_39;
  }
  v5 = v8;
  *v8 = off_24C3F2180;
  sub_20AED5300((uint64_t)(v8 + 2), v7);
  *v5 = &off_24C3F2BA0;
  v5[2] = &unk_24C3F2BF0;
  *((_OWORD *)v5 + 35) = 0u;
LABEL_39:
  if (v57)
  {
    sub_20AED5474((uint64_t)&v47);
  }
  else if (v56)
  {
    if (v55)
    {
      if (v54 < 0)
        operator delete(v53);
      if (v52 < 0)
        operator delete(v51);
    }
    if (v50 && v49 < 0)
      operator delete((void *)v48);
  }
  if (!v6)
    v5 = 0;
  if (v34)
  {
    if (v33)
    {
      if (v32 && v31 < 0)
        operator delete(v30);
      if (v29 && v28 < 0)
        operator delete(v27);
      if (v26 && v25 < 0)
        operator delete(v24);
    }
    sub_20AED30E0((uint64_t)v23);
  }
  return v5;
}

void sub_20AF0EAE4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AF0EAECLL);
  _Unwind_Resume(a1);
}

void sub_20AF0EAFC(_Unwind_Exception *a1, int a2)
{
  const std::logic_error *exception_ptr;
  void *v5;
  std::string *p_what;
  std::string *v7;
  std::logic_error v8;
  char v9;
  char v10;
  __int128 v11;
  __int128 v12[6];
  std::__fs::filesystem::filesystem_error v13[3];
  CFErrorRef **v14[102];
  __int128 v15;
  _BYTE v16[104];
  char v17;

  if (a2)
  {
    sub_20AED1998((uint64_t)&STACK[0x2F0]);
    if (a2 == 3)
    {
      exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
      std::logic_error::logic_error(&v8, exception_ptr);
      v8.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_begin_catch(a1);
      v7 = (std::string *)std::logic_error::what(&v8);
      sub_20AED4C84(v13, (const char **)&v7);
      sub_20B099E24((__int128 *)v13, (uint64_t)&v11);
      v15 = v11;
      sub_20AECEBD0(v16, v12);
      v17 = 1;
      sub_20AF12798(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      sub_20AECCE40((uint64_t)&v11);
      if (LOBYTE(v13[0].__ec_.__cat_))
      {
        if (*((char *)&v13[0].__ec_.__val_ + 7) < 0)
          operator delete(v13[0].__vftable);
      }
      MEMORY[0x20BD35020](&v8);
      __cxa_end_catch();
    }
    else if (a2 == 2)
    {
      v5 = __cxa_get_exception_ptr(a1);
      sub_20AED4C1C(&v13[0], (uint64_t)v5);
      __cxa_begin_catch(a1);
      p_what = &v13[0].__storage_.__ptr_->__what_;
      if (SHIBYTE(v13[0].__storage_.__ptr_->__what_.__r_.__value_.__r.__words[2]) < 0)
        p_what = (std::string *)p_what->__r_.__value_.__r.__words[0];
      v7 = p_what;
      sub_20AED4C84(&v8, (const char **)&v7);
      sub_20B09A738((__int128 *)&v8, (uint64_t)&v11);
      v15 = v11;
      sub_20AECEBD0(v16, v12);
      v17 = 1;
      sub_20AF12798(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      sub_20AECCE40((uint64_t)&v11);
      if (v10 && v9 < 0)
        operator delete(v8.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error(v13);
      __cxa_end_catch();
    }
    else
    {
      __cxa_begin_catch(a1);
      LOBYTE(v15) = 0;
      v17 = 0;
      sub_20AF12798(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      __cxa_end_catch();
    }
    JUMPOUT(0x20AF0E9E4);
  }
  _Unwind_Resume(a1);
}

void sub_20AF0EB14(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AF0EB20);
  _Unwind_Resume(a1);
}

void sub_20AF0ECC8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20AF0ECD0);
  sub_20AEC01C0(a1);
}

BOOL sub_20AF0ECE0(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  unsigned __int8 v6;
  int v8;
  size_t v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15[2];
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  void *v22[2];
  uint64_t v23;
  uint64_t v24;
  void *v25[2];
  uint64_t v26;
  char v27;
  char v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  uint64_t v37;
  char v38;
  char v39;
  char v40;

  if (a2)
    return a2 == 0;
  v6 = atomic_load((unsigned __int8 *)&qword_254638A00);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254638A00))
  {
    sub_20AF12460();
    v8 = byte_254638A8F;
    if (byte_254638A8F >= 0)
      v9 = byte_254638A8F;
    else
      v9 = qword_254638A80;
    v10 = v9 + 1;
    if (v9 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v10 >= 0x17)
    {
      v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v12 = v10 | 7;
      v13 = v12 + 1;
      v11 = (__int128 *)operator new(v12 + 1);
      *((_QWORD *)&xmmword_254638A60 + 1) = v9 + 1;
      unk_254638A70 = v13 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638A60 = v11;
    }
    else
    {
      unk_254638A70 = 0;
      xmmword_254638A60 = 0uLL;
      v11 = &xmmword_254638A60;
      byte_254638A77 = v9 + 1;
      if (!v9)
      {
LABEL_50:
        *(_WORD *)((char *)v11 + v9) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638A60, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638A00);
        goto LABEL_3;
      }
    }
    if (v8 >= 0)
      v14 = &qword_254638A78;
    else
      v14 = (uint64_t *)qword_254638A78;
    memmove(v11, v14, v9);
    goto LABEL_50;
  }
LABEL_3:
  if (byte_254638A77 < 0)
  {
    sub_20AEC60F4(v15, (void *)xmmword_254638A60, *((unint64_t *)&xmmword_254638A60 + 1));
  }
  else
  {
    *(_OWORD *)v15 = xmmword_254638A60;
    v16 = unk_254638A70;
  }
  v17 = 1;
  sub_20AECCECC(a1, (uint64_t)v15, (uint64_t)&v18);
  v29 = v18;
  LOBYTE(v30) = 0;
  v39 = 0;
  if (v28)
  {
    v32 = 0;
    if (v21)
    {
      v30 = v19;
      v31 = v20;
      v20 = 0;
      v19 = 0uLL;
      v32 = 1;
    }
    LOBYTE(v33) = 0;
    v38 = 0;
    if (v27)
    {
      v34 = v23;
      v33 = *(_OWORD *)v22;
      v22[0] = 0;
      v22[1] = 0;
      v35 = v24;
      *(_OWORD *)__p = *(_OWORD *)v25;
      v37 = v26;
      v23 = 0;
      v25[0] = 0;
      v25[1] = 0;
      v26 = 0;
      v38 = 1;
    }
    v39 = 1;
  }
  v40 = 0;
  sub_20AECB410(&v29, a3);
  if (!v40 && v39)
  {
    if (v38)
    {
      if (SHIBYTE(v37) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34) < 0)
        operator delete((void *)v33);
    }
    if (v32 && SHIBYTE(v31) < 0)
      operator delete((void *)v30);
  }
  if (v28)
  {
    if (v27)
    {
      if (SHIBYTE(v26) < 0)
        operator delete(v25[0]);
      if (SHIBYTE(v23) < 0)
        operator delete(v22[0]);
    }
    if (v21 && SHIBYTE(v20) < 0)
      operator delete((void *)v19);
  }
  if (v17 && SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  return a2 == 0;
}

void sub_20AF0F008(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638A00);
  _Unwind_Resume(a1);
}

void sub_20AF0F020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECD704((uint64_t)&a32);
  sub_20AECCE40((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_QWORD *VZDataCreateWithLines3(uint64_t a1, __int128 *a2, CFErrorRef *a3)
{
  _QWORD *v5;
  int v6;
  __int128 *v7;
  _QWORD *v8;
  __int128 v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  CFErrorRef **v21;
  CFErrorRef *v22;
  char v23[208];
  void *v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  char v29;
  void *v30;
  char v31;
  char v32;
  char v33;
  char v34;
  __int128 v35[13];
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  void *__p;
  char v43;
  char v44;
  char v45;
  char v46;
  __int128 v47;
  __int128 v48;
  char v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  char v55;
  char v56;
  unsigned __int8 v57;
  uint64_t v58;

  v5 = (_QWORD *)a1;
  v58 = *MEMORY[0x24BDAC8D0];
  if (sub_20AF0F5D0((uint64_t)"VZDataCreateWithLines3", a1, a3))
    return 0;
  sub_20AED18DC(a2, v23);
  v21 = &v22;
  v22 = a3;
  sub_20AED4D3C(v35, (uint64_t)v23);
  sub_20B073778((uint64_t)(v5 + 2), v35, (uint64_t)&v47);
  if (v46)
  {
    if (v45)
    {
      if (v44 && v43 < 0)
        operator delete(__p);
      if (v41 && v40 < 0)
        operator delete(v39);
      if (v38 && v37 < 0)
        operator delete(v36);
    }
    sub_20AED30E0((uint64_t)v35);
  }
  v6 = v57;
  if (!v57)
  {
    v10 = v47;
    sub_20AECEBD0(&v11, &v48);
    v20 = 1;
    sub_20AF12E68(&v21, (uint64_t)&v10);
    if (!v20 || !v19)
      goto LABEL_39;
    if (v18)
    {
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
    }
    if (!v13 || (v12 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_37;
  }
  v7 = (__int128 *)sub_20AED4AC0((uint64_t)&v47);
  v8 = operator new(0x240uLL, MEMORY[0x24BEDB6B8]);
  if (!v8)
  {
    LOBYTE(v10) = 0;
    v20 = 0;
    sub_20AF12E68(&v21, (uint64_t)&v10);
    if (!v20 || !v19)
      goto LABEL_38;
    if (v18)
    {
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
    }
    v5 = 0;
    if (!v13 || (v12 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_37:
    operator delete(v11);
LABEL_38:
    v5 = 0;
    goto LABEL_39;
  }
  v5 = v8;
  *v8 = off_24C3F2180;
  sub_20AED5300((uint64_t)(v8 + 2), v7);
  *v5 = &off_24C3F2BA0;
  v5[2] = &unk_24C3F2BF0;
  *((_OWORD *)v5 + 35) = 0u;
LABEL_39:
  if (v57)
  {
    sub_20AED5474((uint64_t)&v47);
  }
  else if (v56)
  {
    if (v55)
    {
      if (v54 < 0)
        operator delete(v53);
      if (v52 < 0)
        operator delete(v51);
    }
    if (v50 && v49 < 0)
      operator delete((void *)v48);
  }
  if (!v6)
    v5 = 0;
  if (v34)
  {
    if (v33)
    {
      if (v32 && v31 < 0)
        operator delete(v30);
      if (v29 && v28 < 0)
        operator delete(v27);
      if (v26 && v25 < 0)
        operator delete(v24);
    }
    sub_20AED30E0((uint64_t)v23);
  }
  return v5;
}

void sub_20AF0F3D4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AF0F3DCLL);
  _Unwind_Resume(a1);
}

void sub_20AF0F3EC(_Unwind_Exception *a1, int a2)
{
  const std::logic_error *exception_ptr;
  void *v5;
  std::string *p_what;
  std::string *v7;
  std::logic_error v8;
  char v9;
  char v10;
  __int128 v11;
  __int128 v12[6];
  std::__fs::filesystem::filesystem_error v13[3];
  CFErrorRef **v14[102];
  __int128 v15;
  _BYTE v16[104];
  char v17;

  if (a2)
  {
    sub_20AED1998((uint64_t)&STACK[0x2F0]);
    if (a2 == 3)
    {
      exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
      std::logic_error::logic_error(&v8, exception_ptr);
      v8.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_begin_catch(a1);
      v7 = (std::string *)std::logic_error::what(&v8);
      sub_20AED4C84(v13, (const char **)&v7);
      sub_20B099E24((__int128 *)v13, (uint64_t)&v11);
      v15 = v11;
      sub_20AECEBD0(v16, v12);
      v17 = 1;
      sub_20AF12E68(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      sub_20AECCE40((uint64_t)&v11);
      if (LOBYTE(v13[0].__ec_.__cat_))
      {
        if (*((char *)&v13[0].__ec_.__val_ + 7) < 0)
          operator delete(v13[0].__vftable);
      }
      MEMORY[0x20BD35020](&v8);
      __cxa_end_catch();
    }
    else if (a2 == 2)
    {
      v5 = __cxa_get_exception_ptr(a1);
      sub_20AED4C1C(&v13[0], (uint64_t)v5);
      __cxa_begin_catch(a1);
      p_what = &v13[0].__storage_.__ptr_->__what_;
      if (SHIBYTE(v13[0].__storage_.__ptr_->__what_.__r_.__value_.__r.__words[2]) < 0)
        p_what = (std::string *)p_what->__r_.__value_.__r.__words[0];
      v7 = p_what;
      sub_20AED4C84(&v8, (const char **)&v7);
      sub_20B09A738((__int128 *)&v8, (uint64_t)&v11);
      v15 = v11;
      sub_20AECEBD0(v16, v12);
      v17 = 1;
      sub_20AF12E68(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      sub_20AECCE40((uint64_t)&v11);
      if (v10 && v9 < 0)
        operator delete(v8.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error(v13);
      __cxa_end_catch();
    }
    else
    {
      __cxa_begin_catch(a1);
      LOBYTE(v15) = 0;
      v17 = 0;
      sub_20AF12E68(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      __cxa_end_catch();
    }
    JUMPOUT(0x20AF0F2D4);
  }
  _Unwind_Resume(a1);
}

void sub_20AF0F404(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AF0F410);
  _Unwind_Resume(a1);
}

void sub_20AF0F5B8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20AF0F5C0);
  sub_20AEC01C0(a1);
}

BOOL sub_20AF0F5D0(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  unsigned __int8 v6;
  int v8;
  size_t v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15[2];
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  void *v22[2];
  uint64_t v23;
  uint64_t v24;
  void *v25[2];
  uint64_t v26;
  char v27;
  char v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  uint64_t v37;
  char v38;
  char v39;
  char v40;

  if (a2)
    return a2 == 0;
  v6 = atomic_load((unsigned __int8 *)&qword_254638A30);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254638A30))
  {
    sub_20AF12B30();
    v8 = byte_254638B1F;
    if (byte_254638B1F >= 0)
      v9 = byte_254638B1F;
    else
      v9 = qword_254638B10;
    v10 = v9 + 1;
    if (v9 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v10 >= 0x17)
    {
      v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v12 = v10 | 7;
      v13 = v12 + 1;
      v11 = (__int128 *)operator new(v12 + 1);
      *((_QWORD *)&xmmword_254638AF0 + 1) = v9 + 1;
      unk_254638B00 = v13 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638AF0 = v11;
    }
    else
    {
      unk_254638B00 = 0;
      xmmword_254638AF0 = 0uLL;
      v11 = &xmmword_254638AF0;
      byte_254638B07 = v9 + 1;
      if (!v9)
      {
LABEL_50:
        *(_WORD *)((char *)v11 + v9) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638AF0, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638A30);
        goto LABEL_3;
      }
    }
    if (v8 >= 0)
      v14 = &qword_254638B08;
    else
      v14 = (uint64_t *)qword_254638B08;
    memmove(v11, v14, v9);
    goto LABEL_50;
  }
LABEL_3:
  if (byte_254638B07 < 0)
  {
    sub_20AEC60F4(v15, (void *)xmmword_254638AF0, *((unint64_t *)&xmmword_254638AF0 + 1));
  }
  else
  {
    *(_OWORD *)v15 = xmmword_254638AF0;
    v16 = unk_254638B00;
  }
  v17 = 1;
  sub_20AECCECC(a1, (uint64_t)v15, (uint64_t)&v18);
  v29 = v18;
  LOBYTE(v30) = 0;
  v39 = 0;
  if (v28)
  {
    v32 = 0;
    if (v21)
    {
      v30 = v19;
      v31 = v20;
      v20 = 0;
      v19 = 0uLL;
      v32 = 1;
    }
    LOBYTE(v33) = 0;
    v38 = 0;
    if (v27)
    {
      v34 = v23;
      v33 = *(_OWORD *)v22;
      v22[0] = 0;
      v22[1] = 0;
      v35 = v24;
      *(_OWORD *)__p = *(_OWORD *)v25;
      v37 = v26;
      v23 = 0;
      v25[0] = 0;
      v25[1] = 0;
      v26 = 0;
      v38 = 1;
    }
    v39 = 1;
  }
  v40 = 0;
  sub_20AECB410(&v29, a3);
  if (!v40 && v39)
  {
    if (v38)
    {
      if (SHIBYTE(v37) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34) < 0)
        operator delete((void *)v33);
    }
    if (v32 && SHIBYTE(v31) < 0)
      operator delete((void *)v30);
  }
  if (v28)
  {
    if (v27)
    {
      if (SHIBYTE(v26) < 0)
        operator delete(v25[0]);
      if (SHIBYTE(v23) < 0)
        operator delete(v22[0]);
    }
    if (v21 && SHIBYTE(v20) < 0)
      operator delete((void *)v19);
  }
  if (v17 && SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  return a2 == 0;
}

void sub_20AF0F8F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638A30);
  _Unwind_Resume(a1);
}

void sub_20AF0F910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECD704((uint64_t)&a32);
  sub_20AECCE40((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_OWORD *VZDataGetLines2(uint64_t a1, CFErrorRef *a2)
{
  _OWORD *v4;
  int v5;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  __int128 v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  char v31;
  unsigned __int8 v32;
  CFErrorRef **v33;
  CFErrorRef *v34;

  if (sub_20AED21B4((uint64_t)"VZDataGetLines2", a1, a2))
    return 0;
  v4 = *(_OWORD **)(a1 + 568);
  if (v4)
    return v4;
  v33 = &v34;
  v34 = a2;
  sub_20B075158(a1 + 32, (uint64_t)&v22);
  v5 = v32;
  if (!v32)
  {
    v11 = v22;
    sub_20AECEBD0(&v12, &v23);
    v21 = 1;
    sub_20AF13200(&v33, (uint64_t)&v11);
    if (v21 && v20)
    {
      if (v19)
      {
        if (v18 < 0)
          operator delete(__p);
        if (v16 < 0)
          operator delete(v15);
      }
      if (v14 && v13 < 0)
        operator delete(v12);
    }
    goto LABEL_28;
  }
  sub_20AF133B8((uint64_t)&v22);
  v6 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  if (v6)
  {
    v4 = v6;
    v6[1] = v22;
    v22 = 0uLL;
    *((_DWORD *)v6 + 8) = 1;
    *(_QWORD *)v6 = &off_24C3F3840;
    *((_QWORD *)v6 + 1) = &unk_24C3F3890;
  }
  else
  {
    LOBYTE(v11) = 0;
    v21 = 0;
    sub_20AF13200(&v33, (uint64_t)&v11);
    if (v21 && v20)
    {
      if (v19)
      {
        if (v18 < 0)
          operator delete(__p);
        if (v16 < 0)
          operator delete(v15);
      }
      v4 = 0;
      if (!v14 || (v13 & 0x80000000) == 0)
        goto LABEL_28;
      operator delete(v12);
    }
    v4 = 0;
  }
LABEL_28:
  if (v32)
  {
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else if (v31)
  {
    if (v30)
    {
      if (v29 < 0)
        operator delete(v28);
      if (v27 < 0)
        operator delete(v26);
    }
    if (v25 && v24 < 0)
      operator delete((void *)v23);
  }
  if (!v5)
    v4 = 0;
  *(_QWORD *)(a1 + 568) = v4;
  return v4;
}

void sub_20AF0FBA0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a68;
  uint64_t v68;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  const std::logic_error *exception_ptr;
  const char *v75;
  size_t v76;
  size_t v77;
  void **p_dst;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  const char *v84;
  size_t v85;
  const char *v86;
  std::logic_error_vtbl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (*(_BYTE *)(v68 - 72))
  {
    v71 = *(std::__shared_weak_count **)(v68 - 184);
    if (v71)
    {
      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(p_shared_owners);
      while (__stlxr(v73 - 1, p_shared_owners));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  else if (*(_BYTE *)(v68 - 80))
  {
    if (*(_BYTE *)(v68 - 88))
    {
      if (*(char *)(v68 - 89) < 0)
        operator delete(*(void **)(v68 - 112));
      if (*(char *)(v68 - 121) < 0)
        operator delete(*(void **)(v68 - 144));
    }
    if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
      operator delete(*(void **)(v68 - 176));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v75 = std::logic_error::what(&a10);
    v76 = strlen(v75);
    if (v76 <= 0x7FFFFFFFFFFFFFF7)
    {
      v77 = v76;
      if (v76 >= 0x17)
      {
        v88 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v88 = v76 | 7;
        v89 = v88 + 1;
        p_dst = (void **)operator new(v88 + 1);
        __dst_8 = v77;
        *(_QWORD *)&a38 = v89 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v76;
        p_dst = (void **)&__dst;
        if (!v76)
        {
LABEL_56:
          *((_BYTE *)p_dst + v77) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a68 = a13;
          sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
          *(_BYTE *)(v68 - 72) = 1;
          sub_20AF13200((CFErrorRef ***)(v68 - 64), v68 - 192);
          if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
          {
            if (*(_BYTE *)(v68 - 88))
            {
              if (*(char *)(v68 - 89) < 0)
                operator delete(*(void **)(v68 - 112));
              if (*(char *)(v68 - 121) < 0)
                operator delete(*(void **)(v68 - 144));
            }
            if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
              operator delete(*(void **)(v68 - 176));
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_107;
        }
      }
      memmove(p_dst, v75, v77);
      goto LABEL_56;
    }
LABEL_106:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v68 - 192) = 0;
    *(_BYTE *)(v68 - 72) = 0;
    sub_20AF13200((CFErrorRef ***)(v68 - 64), v68 - 192);
    if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
    {
      if (*(_BYTE *)(v68 - 88))
      {
        if (*(char *)(v68 - 89) < 0)
          operator delete(*(void **)(v68 - 112));
        if (*(char *)(v68 - 121) < 0)
          operator delete(*(void **)(v68 - 144));
      }
      if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
        operator delete(*(void **)(v68 - 176));
    }
    __cxa_end_catch();
LABEL_107:
    JUMPOUT(0x20AF0FB7CLL);
  }
  v79 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v79);
  a38 = *((_OWORD *)v79 + 1);
  v81 = *((_QWORD *)v79 + 4);
  v80 = *((_QWORD *)v79 + 5);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  a39 = v81;
  a40 = v80;
  if (v80)
  {
    v82 = (unint64_t *)(v80 + 8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  __cxa_begin_catch(a1);
  v84 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v84 = *(const char **)v84;
  v85 = strlen(v84);
  if (v85 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_106;
  v86 = (const char *)v85;
  if (v85 >= 0x17)
  {
    v90 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v90 = v85 | 7;
    v91 = v90 + 1;
    v87 = (std::logic_error_vtbl *)operator new(v90 + 1);
    a10.__imp_.__imp_ = v86;
    a11 = v91 | 0x8000000000000000;
    a10.__vftable = v87;
  }
  else
  {
    HIBYTE(a11) = v85;
    v87 = (std::logic_error_vtbl *)&a10;
    if (!v85)
    {
LABEL_83:
      v86[(_QWORD)v87] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a68 = a13;
      sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
      *(_BYTE *)(v68 - 72) = 1;
      sub_20AF13200((CFErrorRef ***)(v68 - 64), v68 - 192);
      if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
      {
        if (*(_BYTE *)(v68 - 88))
        {
          if (*(char *)(v68 - 89) < 0)
            operator delete(*(void **)(v68 - 112));
          if (*(char *)(v68 - 121) < 0)
            operator delete(*(void **)(v68 - 144));
        }
        if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
          operator delete(*(void **)(v68 - 176));
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_107;
    }
  }
  memmove(v87, v84, (size_t)v86);
  goto LABEL_83;
}

_OWORD *VZDataGetLines3(uint64_t a1, CFErrorRef *a2)
{
  _OWORD *v4;
  int v5;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  __int128 v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  char v31;
  unsigned __int8 v32;
  CFErrorRef **v33;
  CFErrorRef *v34;

  if (sub_20AED21B4((uint64_t)"VZDataGetLines3", a1, a2))
    return 0;
  v4 = *(_OWORD **)(a1 + 568);
  if (v4)
    return v4;
  v33 = &v34;
  v34 = a2;
  sub_20B077124(a1 + 32, (uint64_t)&v22);
  v5 = v32;
  if (!v32)
  {
    v11 = v22;
    sub_20AECEBD0(&v12, &v23);
    v21 = 1;
    sub_20AF13478(&v33, (uint64_t)&v11);
    if (v21 && v20)
    {
      if (v19)
      {
        if (v18 < 0)
          operator delete(__p);
        if (v16 < 0)
          operator delete(v15);
      }
      if (v14 && v13 < 0)
        operator delete(v12);
    }
    goto LABEL_28;
  }
  sub_20AF13630((uint64_t)&v22);
  v6 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  if (v6)
  {
    v4 = v6;
    v6[1] = v22;
    v22 = 0uLL;
    *((_DWORD *)v6 + 8) = 1;
    *(_QWORD *)v6 = &off_24C3F3938;
    *((_QWORD *)v6 + 1) = &unk_24C3F3988;
  }
  else
  {
    LOBYTE(v11) = 0;
    v21 = 0;
    sub_20AF13478(&v33, (uint64_t)&v11);
    if (v21 && v20)
    {
      if (v19)
      {
        if (v18 < 0)
          operator delete(__p);
        if (v16 < 0)
          operator delete(v15);
      }
      v4 = 0;
      if (!v14 || (v13 & 0x80000000) == 0)
        goto LABEL_28;
      operator delete(v12);
    }
    v4 = 0;
  }
LABEL_28:
  if (v32)
  {
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else if (v31)
  {
    if (v30)
    {
      if (v29 < 0)
        operator delete(v28);
      if (v27 < 0)
        operator delete(v26);
    }
    if (v25 && v24 < 0)
      operator delete((void *)v23);
  }
  if (!v5)
    v4 = 0;
  *(_QWORD *)(a1 + 568) = v4;
  return v4;
}

void sub_20AF10338(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a68;
  uint64_t v68;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  const std::logic_error *exception_ptr;
  const char *v75;
  size_t v76;
  size_t v77;
  void **p_dst;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  const char *v84;
  size_t v85;
  const char *v86;
  std::logic_error_vtbl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (*(_BYTE *)(v68 - 72))
  {
    v71 = *(std::__shared_weak_count **)(v68 - 184);
    if (v71)
    {
      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(p_shared_owners);
      while (__stlxr(v73 - 1, p_shared_owners));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  else if (*(_BYTE *)(v68 - 80))
  {
    if (*(_BYTE *)(v68 - 88))
    {
      if (*(char *)(v68 - 89) < 0)
        operator delete(*(void **)(v68 - 112));
      if (*(char *)(v68 - 121) < 0)
        operator delete(*(void **)(v68 - 144));
    }
    if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
      operator delete(*(void **)(v68 - 176));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v75 = std::logic_error::what(&a10);
    v76 = strlen(v75);
    if (v76 <= 0x7FFFFFFFFFFFFFF7)
    {
      v77 = v76;
      if (v76 >= 0x17)
      {
        v88 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v88 = v76 | 7;
        v89 = v88 + 1;
        p_dst = (void **)operator new(v88 + 1);
        __dst_8 = v77;
        *(_QWORD *)&a38 = v89 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v76;
        p_dst = (void **)&__dst;
        if (!v76)
        {
LABEL_56:
          *((_BYTE *)p_dst + v77) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a68 = a13;
          sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
          *(_BYTE *)(v68 - 72) = 1;
          sub_20AF13478((CFErrorRef ***)(v68 - 64), v68 - 192);
          if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
          {
            if (*(_BYTE *)(v68 - 88))
            {
              if (*(char *)(v68 - 89) < 0)
                operator delete(*(void **)(v68 - 112));
              if (*(char *)(v68 - 121) < 0)
                operator delete(*(void **)(v68 - 144));
            }
            if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
              operator delete(*(void **)(v68 - 176));
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_107;
        }
      }
      memmove(p_dst, v75, v77);
      goto LABEL_56;
    }
LABEL_106:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v68 - 192) = 0;
    *(_BYTE *)(v68 - 72) = 0;
    sub_20AF13478((CFErrorRef ***)(v68 - 64), v68 - 192);
    if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
    {
      if (*(_BYTE *)(v68 - 88))
      {
        if (*(char *)(v68 - 89) < 0)
          operator delete(*(void **)(v68 - 112));
        if (*(char *)(v68 - 121) < 0)
          operator delete(*(void **)(v68 - 144));
      }
      if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
        operator delete(*(void **)(v68 - 176));
    }
    __cxa_end_catch();
LABEL_107:
    JUMPOUT(0x20AF10314);
  }
  v79 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v79);
  a38 = *((_OWORD *)v79 + 1);
  v81 = *((_QWORD *)v79 + 4);
  v80 = *((_QWORD *)v79 + 5);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  a39 = v81;
  a40 = v80;
  if (v80)
  {
    v82 = (unint64_t *)(v80 + 8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  __cxa_begin_catch(a1);
  v84 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v84 = *(const char **)v84;
  v85 = strlen(v84);
  if (v85 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_106;
  v86 = (const char *)v85;
  if (v85 >= 0x17)
  {
    v90 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v90 = v85 | 7;
    v91 = v90 + 1;
    v87 = (std::logic_error_vtbl *)operator new(v90 + 1);
    a10.__imp_.__imp_ = v86;
    a11 = v91 | 0x8000000000000000;
    a10.__vftable = v87;
  }
  else
  {
    HIBYTE(a11) = v85;
    v87 = (std::logic_error_vtbl *)&a10;
    if (!v85)
    {
LABEL_83:
      v86[(_QWORD)v87] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a68 = a13;
      sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
      *(_BYTE *)(v68 - 72) = 1;
      sub_20AF13478((CFErrorRef ***)(v68 - 64), v68 - 192);
      if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
      {
        if (*(_BYTE *)(v68 - 88))
        {
          if (*(char *)(v68 - 89) < 0)
            operator delete(*(void **)(v68 - 112));
          if (*(char *)(v68 - 121) < 0)
            operator delete(*(void **)(v68 - 144));
        }
        if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
          operator delete(*(void **)(v68 - 176));
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_107;
    }
  }
  memmove(v87, v84, (size_t)v86);
  goto LABEL_83;
}

_OWORD *VZLines2Create(uint64_t a1, unint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  _OWORD *v4;
  int v5;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  __int128 v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  char v31;
  unsigned __int8 v32;
  CFErrorRef **v33;
  uint64_t v34;

  v33 = (CFErrorRef **)&v34;
  v34 = a4;
  sub_20B070A30(a1, a2, a3, (uint64_t)&v22);
  v5 = v32;
  if (v32)
  {
    sub_20AF133B8((uint64_t)&v22);
    v6 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
    if (v6)
    {
      v4 = v6;
      v6[1] = v22;
      v22 = 0uLL;
      *((_DWORD *)v6 + 8) = 1;
      *(_QWORD *)v6 = &off_24C3F3840;
      *((_QWORD *)v6 + 1) = &unk_24C3F3890;
      goto LABEL_25;
    }
    LOBYTE(v11) = 0;
    v21 = 0;
    sub_20AF136F0(&v33, (uint64_t)&v11);
    if (!v21 || !v20)
      goto LABEL_24;
    if (v19)
    {
      if (v18 < 0)
        operator delete(__p);
      if (v16 < 0)
        operator delete(v15);
    }
    v4 = 0;
    if (v14 && v13 < 0)
    {
      operator delete(v12);
LABEL_24:
      v4 = 0;
    }
  }
  else
  {
    v11 = v22;
    sub_20AECEBD0(&v12, &v23);
    v21 = 1;
    sub_20AF136F0(&v33, (uint64_t)&v11);
    if (v21 && v20)
    {
      if (v19)
      {
        if (v18 < 0)
          operator delete(__p);
        if (v16 < 0)
          operator delete(v15);
      }
      if (v14 && v13 < 0)
        operator delete(v12);
    }
  }
LABEL_25:
  if (v32)
  {
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else if (v31)
  {
    if (v30)
    {
      if (v29 < 0)
        operator delete(v28);
      if (v27 < 0)
        operator delete(v26);
    }
    if (v25 && v24 < 0)
      operator delete((void *)v23);
  }
  if (!v5)
    return 0;
  return v4;
}

void sub_20AF10A9C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a68;
  uint64_t v68;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  const std::logic_error *exception_ptr;
  const char *v75;
  size_t v76;
  size_t v77;
  void **p_dst;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  const char *v84;
  size_t v85;
  const char *v86;
  std::logic_error_vtbl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (*(_BYTE *)(v68 - 72))
  {
    v71 = *(std::__shared_weak_count **)(v68 - 184);
    if (v71)
    {
      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(p_shared_owners);
      while (__stlxr(v73 - 1, p_shared_owners));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  else if (*(_BYTE *)(v68 - 80))
  {
    if (*(_BYTE *)(v68 - 88))
    {
      if (*(char *)(v68 - 89) < 0)
        operator delete(*(void **)(v68 - 112));
      if (*(char *)(v68 - 121) < 0)
        operator delete(*(void **)(v68 - 144));
    }
    if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
      operator delete(*(void **)(v68 - 176));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v75 = std::logic_error::what(&a10);
    v76 = strlen(v75);
    if (v76 <= 0x7FFFFFFFFFFFFFF7)
    {
      v77 = v76;
      if (v76 >= 0x17)
      {
        v88 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v88 = v76 | 7;
        v89 = v88 + 1;
        p_dst = (void **)operator new(v88 + 1);
        __dst_8 = v77;
        *(_QWORD *)&a38 = v89 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v76;
        p_dst = (void **)&__dst;
        if (!v76)
        {
LABEL_56:
          *((_BYTE *)p_dst + v77) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a68 = a13;
          sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
          *(_BYTE *)(v68 - 72) = 1;
          sub_20AF136F0((CFErrorRef ***)(v68 - 64), v68 - 192);
          if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
          {
            if (*(_BYTE *)(v68 - 88))
            {
              if (*(char *)(v68 - 89) < 0)
                operator delete(*(void **)(v68 - 112));
              if (*(char *)(v68 - 121) < 0)
                operator delete(*(void **)(v68 - 144));
            }
            if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
              operator delete(*(void **)(v68 - 176));
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_107;
        }
      }
      memmove(p_dst, v75, v77);
      goto LABEL_56;
    }
LABEL_106:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v68 - 192) = 0;
    *(_BYTE *)(v68 - 72) = 0;
    sub_20AF136F0((CFErrorRef ***)(v68 - 64), v68 - 192);
    if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
    {
      if (*(_BYTE *)(v68 - 88))
      {
        if (*(char *)(v68 - 89) < 0)
          operator delete(*(void **)(v68 - 112));
        if (*(char *)(v68 - 121) < 0)
          operator delete(*(void **)(v68 - 144));
      }
      if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
        operator delete(*(void **)(v68 - 176));
    }
    __cxa_end_catch();
LABEL_107:
    JUMPOUT(0x20AF10A7CLL);
  }
  v79 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v79);
  a38 = *((_OWORD *)v79 + 1);
  v81 = *((_QWORD *)v79 + 4);
  v80 = *((_QWORD *)v79 + 5);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  a39 = v81;
  a40 = v80;
  if (v80)
  {
    v82 = (unint64_t *)(v80 + 8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  __cxa_begin_catch(a1);
  v84 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v84 = *(const char **)v84;
  v85 = strlen(v84);
  if (v85 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_106;
  v86 = (const char *)v85;
  if (v85 >= 0x17)
  {
    v90 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v90 = v85 | 7;
    v91 = v90 + 1;
    v87 = (std::logic_error_vtbl *)operator new(v90 + 1);
    a10.__imp_.__imp_ = v86;
    a11 = v91 | 0x8000000000000000;
    a10.__vftable = v87;
  }
  else
  {
    HIBYTE(a11) = v85;
    v87 = (std::logic_error_vtbl *)&a10;
    if (!v85)
    {
LABEL_83:
      v86[(_QWORD)v87] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a68 = a13;
      sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
      *(_BYTE *)(v68 - 72) = 1;
      sub_20AF136F0((CFErrorRef ***)(v68 - 64), v68 - 192);
      if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
      {
        if (*(_BYTE *)(v68 - 88))
        {
          if (*(char *)(v68 - 89) < 0)
            operator delete(*(void **)(v68 - 112));
          if (*(char *)(v68 - 121) < 0)
            operator delete(*(void **)(v68 - 144));
        }
        if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
          operator delete(*(void **)(v68 - 176));
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_107;
    }
  }
  memmove(v87, v84, (size_t)v86);
  goto LABEL_83;
}

_OWORD *VZLines3Create(uint64_t a1, unint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  _OWORD *v4;
  int v5;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  __int128 v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  char v31;
  unsigned __int8 v32;
  CFErrorRef **v33;
  uint64_t v34;

  v33 = (CFErrorRef **)&v34;
  v34 = a4;
  sub_20B071518(a1, a2, a3, (uint64_t)&v22);
  v5 = v32;
  if (v32)
  {
    sub_20AF13630((uint64_t)&v22);
    v6 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
    if (v6)
    {
      v4 = v6;
      v6[1] = v22;
      v22 = 0uLL;
      *((_DWORD *)v6 + 8) = 1;
      *(_QWORD *)v6 = &off_24C3F3938;
      *((_QWORD *)v6 + 1) = &unk_24C3F3988;
      goto LABEL_25;
    }
    LOBYTE(v11) = 0;
    v21 = 0;
    sub_20AF139D4(&v33, (uint64_t)&v11);
    if (!v21 || !v20)
      goto LABEL_24;
    if (v19)
    {
      if (v18 < 0)
        operator delete(__p);
      if (v16 < 0)
        operator delete(v15);
    }
    v4 = 0;
    if (v14 && v13 < 0)
    {
      operator delete(v12);
LABEL_24:
      v4 = 0;
    }
  }
  else
  {
    v11 = v22;
    sub_20AECEBD0(&v12, &v23);
    v21 = 1;
    sub_20AF139D4(&v33, (uint64_t)&v11);
    if (v21 && v20)
    {
      if (v19)
      {
        if (v18 < 0)
          operator delete(__p);
        if (v16 < 0)
          operator delete(v15);
      }
      if (v14 && v13 < 0)
        operator delete(v12);
    }
  }
LABEL_25:
  if (v32)
  {
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else if (v31)
  {
    if (v30)
    {
      if (v29 < 0)
        operator delete(v28);
      if (v27 < 0)
        operator delete(v26);
    }
    if (v25 && v24 < 0)
      operator delete((void *)v23);
  }
  if (!v5)
    return 0;
  return v4;
}

void sub_20AF11200(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a68;
  uint64_t v68;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  const std::logic_error *exception_ptr;
  const char *v75;
  size_t v76;
  size_t v77;
  void **p_dst;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  const char *v84;
  size_t v85;
  const char *v86;
  std::logic_error_vtbl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (*(_BYTE *)(v68 - 72))
  {
    v71 = *(std::__shared_weak_count **)(v68 - 184);
    if (v71)
    {
      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(p_shared_owners);
      while (__stlxr(v73 - 1, p_shared_owners));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  else if (*(_BYTE *)(v68 - 80))
  {
    if (*(_BYTE *)(v68 - 88))
    {
      if (*(char *)(v68 - 89) < 0)
        operator delete(*(void **)(v68 - 112));
      if (*(char *)(v68 - 121) < 0)
        operator delete(*(void **)(v68 - 144));
    }
    if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
      operator delete(*(void **)(v68 - 176));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v75 = std::logic_error::what(&a10);
    v76 = strlen(v75);
    if (v76 <= 0x7FFFFFFFFFFFFFF7)
    {
      v77 = v76;
      if (v76 >= 0x17)
      {
        v88 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v88 = v76 | 7;
        v89 = v88 + 1;
        p_dst = (void **)operator new(v88 + 1);
        __dst_8 = v77;
        *(_QWORD *)&a38 = v89 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v76;
        p_dst = (void **)&__dst;
        if (!v76)
        {
LABEL_56:
          *((_BYTE *)p_dst + v77) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a68 = a13;
          sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
          *(_BYTE *)(v68 - 72) = 1;
          sub_20AF139D4((CFErrorRef ***)(v68 - 64), v68 - 192);
          if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
          {
            if (*(_BYTE *)(v68 - 88))
            {
              if (*(char *)(v68 - 89) < 0)
                operator delete(*(void **)(v68 - 112));
              if (*(char *)(v68 - 121) < 0)
                operator delete(*(void **)(v68 - 144));
            }
            if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
              operator delete(*(void **)(v68 - 176));
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_107;
        }
      }
      memmove(p_dst, v75, v77);
      goto LABEL_56;
    }
LABEL_106:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v68 - 192) = 0;
    *(_BYTE *)(v68 - 72) = 0;
    sub_20AF139D4((CFErrorRef ***)(v68 - 64), v68 - 192);
    if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
    {
      if (*(_BYTE *)(v68 - 88))
      {
        if (*(char *)(v68 - 89) < 0)
          operator delete(*(void **)(v68 - 112));
        if (*(char *)(v68 - 121) < 0)
          operator delete(*(void **)(v68 - 144));
      }
      if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
        operator delete(*(void **)(v68 - 176));
    }
    __cxa_end_catch();
LABEL_107:
    JUMPOUT(0x20AF111E0);
  }
  v79 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v79);
  a38 = *((_OWORD *)v79 + 1);
  v81 = *((_QWORD *)v79 + 4);
  v80 = *((_QWORD *)v79 + 5);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  a39 = v81;
  a40 = v80;
  if (v80)
  {
    v82 = (unint64_t *)(v80 + 8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  __cxa_begin_catch(a1);
  v84 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v84 = *(const char **)v84;
  v85 = strlen(v84);
  if (v85 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_106;
  v86 = (const char *)v85;
  if (v85 >= 0x17)
  {
    v90 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v90 = v85 | 7;
    v91 = v90 + 1;
    v87 = (std::logic_error_vtbl *)operator new(v90 + 1);
    a10.__imp_.__imp_ = v86;
    a11 = v91 | 0x8000000000000000;
    a10.__vftable = v87;
  }
  else
  {
    HIBYTE(a11) = v85;
    v87 = (std::logic_error_vtbl *)&a10;
    if (!v85)
    {
LABEL_83:
      v86[(_QWORD)v87] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a68 = a13;
      sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
      *(_BYTE *)(v68 - 72) = 1;
      sub_20AF139D4((CFErrorRef ***)(v68 - 64), v68 - 192);
      if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
      {
        if (*(_BYTE *)(v68 - 88))
        {
          if (*(char *)(v68 - 89) < 0)
            operator delete(*(void **)(v68 - 112));
          if (*(char *)(v68 - 121) < 0)
            operator delete(*(void **)(v68 - 144));
        }
        if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
          operator delete(*(void **)(v68 - 176));
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_107;
    }
  }
  memmove(v87, v84, (size_t)v86);
  goto LABEL_83;
}

uint64_t VZLines2GetBytePtr(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF0ECE0((uint64_t)"VZLines2GetBytePtr", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(**(_QWORD **)(a1 + 16) + 48);
  return result;
}

uint64_t VZLines3GetBytePtr(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF0F5D0((uint64_t)"VZLines3GetBytePtr", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(**(_QWORD **)(a1 + 16) + 48);
  return result;
}

uint64_t VZLines2GetCount(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF0ECE0((uint64_t)"VZLines2GetCount", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(**(_QWORD **)(a1 + 16) + 56) >> 2;
  return result;
}

unint64_t VZLines3GetCount(uint64_t a1)
{
  BOOL v2;
  unint64_t result;

  v2 = sub_20AF0F5D0((uint64_t)"VZLines3GetCount", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(**(_QWORD **)(a1 + 16) + 56) / 6uLL;
  return result;
}

uint64_t VZLines2GetByteCount(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF0ECE0((uint64_t)"VZLines2GetByteCount", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(**(_QWORD **)(a1 + 16) + 40);
  return result;
}

uint64_t VZLines3GetByteCount(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF0F5D0((uint64_t)"VZLines3GetByteCount", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(**(_QWORD **)(a1 + 16) + 40);
  return result;
}

uint64_t VZLines2GetValueType(uint64_t a1)
{
  if (sub_20AF0ECE0((uint64_t)"VZLines2GetValueType", a1, 0))
    return 255;
  else
    return ***(unsigned __int8 ***)(a1 + 16);
}

uint64_t VZLines3GetValueType(uint64_t a1)
{
  if (sub_20AF0F5D0((uint64_t)"VZLines3GetValueType", a1, 0))
    return 255;
  else
    return ***(unsigned __int8 ***)(a1 + 16);
}

uint64_t sub_20AF119A8(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 32);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AF119C0(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 32);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AF119E8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546389E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546389E8))
    return qword_2546389E0;
  qword_2546389E0 = sub_20AECB130();
  __cxa_guard_release(&qword_2546389E8);
  return qword_2546389E0;
}

_QWORD *sub_20AF11A48(uint64_t a1, void *lpsrc, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *result;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 *v20;
  _QWORD v21[3];
  char v22;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F38D8, 0);
  if (result)
  {
    v17 = (unsigned __int8 **)result[2];
    v18 = **(unsigned __int8 ***)(a1 + 16);
    v19 = *v18;
    v20 = *v17;
    if (v19 == *v20)
    {
      v21[0] = &v22;
      v21[1] = v18;
      v21[2] = v20;
      return (_QWORD *)sub_20B43E450(v19, (uint64_t)v21);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFTypeRef sub_20AF11B1C(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 **v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFTypeRef v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *__p;
  char v24;
  CFTypeRef cf;
  std::__shared_weak_count *v26;
  void *__dst[2];
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;

  sub_20AF125E0();
  v29 = a1;
  v2 = operator new();
  *(_QWORD *)(v2 + 272) = 0;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  sub_20AEC0BD8(v2);
  v30 = (_QWORD *)v2;
  v3 = *(unsigned __int8 ***)(a1 + 16);
  v4 = sub_20AEC01D0((_QWORD *)(v2 + 16), (uint64_t)"{", 1);
  LOBYTE(v31) = **v3;
  v5 = sub_20B5220B4(v4, &v31);
  sub_20AEC01D0(v5, (uint64_t)",", 1);
  v31 = (_QWORD *)(v2 + 16);
  sub_20B436438(**v3, v3, &v31);
  sub_20AEC01D0((_QWORD *)(v2 + 16), (uint64_t)"}", 1);
  v6 = *(_DWORD *)(v2 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v2 + 112);
    v10 = *(_QWORD *)(v2 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v2 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v2 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v28) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v2 + 40);
    v7 = *(_QWORD *)(v2 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v28 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v28) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v30;
  if (v30)
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *v30 = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)((char *)v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    v14[3] = MEMORY[0x24BEDB848] + 16;
    v14[2] = v17;
    if (*((char *)v14 + 111) < 0)
      operator delete((void *)v14[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 16);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)&xmmword_254638A90, (uint64_t)" ", &v29, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v28) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v18 = cf;
  if (cf)
    CFRetain(cf);
  v19 = v26;
  if (!v26)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if ((v24 & 0x80000000) == 0)
      return v18;
  }
  else
  {
LABEL_26:
    if ((v24 & 0x80000000) == 0)
      return v18;
  }
  operator delete(__p);
  return v18;
}

uint64_t sub_20AF11E24(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  const void *v34[2];
  char v35;
  uint64_t v36;

  sub_20AEC147C((uint64_t)&v36);
  if (v35 < 0)
    operator delete((void *)v34[0]);
  __cxa_begin_catch(a1);
  sub_20AF125E0();
  sub_20AEC0D64(v34, "failed to create description");
  sub_20AECD224((std::string::size_type)&xmmword_254638A90, v34, 0);
  if (v35 < 0)
    operator delete((void *)v34[0]);
  __cxa_end_catch();
  return 0;
}

uint64_t sub_20AF11EF8(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 32));
}

uint64_t sub_20AF11F04(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 32);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AF11F1C(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 32);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AF11F44()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546389F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546389F8))
    return qword_2546389F0;
  qword_2546389F0 = sub_20AECB130();
  __cxa_guard_release(&qword_2546389F8);
  return qword_2546389F0;
}

_QWORD *sub_20AF11FA4(uint64_t a1, void *lpsrc, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *result;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 *v20;
  _QWORD v21[3];
  char v22;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F39D0, 0);
  if (result)
  {
    v17 = (unsigned __int8 **)result[2];
    v18 = **(unsigned __int8 ***)(a1 + 16);
    v19 = *v18;
    v20 = *v17;
    if (v19 == *v20)
    {
      v21[0] = &v22;
      v21[1] = v18;
      v21[2] = v20;
      return (_QWORD *)sub_20B43E450(v19, (uint64_t)v21);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFTypeRef sub_20AF12078(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 **v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFTypeRef v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *__p;
  char v24;
  CFTypeRef cf;
  std::__shared_weak_count *v26;
  void *__dst[2];
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;

  sub_20AF12CB0();
  v29 = a1;
  v2 = operator new();
  *(_QWORD *)(v2 + 272) = 0;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  sub_20AEC0BD8(v2);
  v30 = (_QWORD *)v2;
  v3 = *(unsigned __int8 ***)(a1 + 16);
  v4 = sub_20AEC01D0((_QWORD *)(v2 + 16), (uint64_t)"{", 1);
  LOBYTE(v31) = **v3;
  v5 = sub_20B5220B4(v4, &v31);
  sub_20AEC01D0(v5, (uint64_t)",", 1);
  v31 = (_QWORD *)(v2 + 16);
  sub_20B438D08(**v3, v3, &v31);
  sub_20AEC01D0((_QWORD *)(v2 + 16), (uint64_t)"}", 1);
  v6 = *(_DWORD *)(v2 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v2 + 112);
    v10 = *(_QWORD *)(v2 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v2 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v2 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v28) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v2 + 40);
    v7 = *(_QWORD *)(v2 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v28 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v28) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v30;
  if (v30)
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *v30 = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)((char *)v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    v14[3] = MEMORY[0x24BEDB848] + 16;
    v14[2] = v17;
    if (*((char *)v14 + 111) < 0)
      operator delete((void *)v14[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 16);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)&xmmword_254638B20, (uint64_t)" ", &v29, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v28) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v18 = cf;
  if (cf)
    CFRetain(cf);
  v19 = v26;
  if (!v26)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if ((v24 & 0x80000000) == 0)
      return v18;
  }
  else
  {
LABEL_26:
    if ((v24 & 0x80000000) == 0)
      return v18;
  }
  operator delete(__p);
  return v18;
}

uint64_t sub_20AF12380(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  const void *v34[2];
  char v35;
  uint64_t v36;

  sub_20AEC147C((uint64_t)&v36);
  if (v35 < 0)
    operator delete((void *)v34[0]);
  __cxa_begin_catch(a1);
  sub_20AF12CB0();
  sub_20AEC0D64(v34, "failed to create description");
  sub_20AECD224((std::string::size_type)&xmmword_254638B20, v34, 0);
  if (v35 < 0)
    operator delete((void *)v34[0]);
  __cxa_end_catch();
  return 0;
}

uint64_t sub_20AF12454(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 32));
}

void sub_20AF12460()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254638A08);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638A08))
  {
    sub_20AF125E0();
    v1 = byte_254638AA7;
    if (byte_254638AA7 >= 0)
      v2 = byte_254638AA7;
    else
      v2 = *((_QWORD *)&xmmword_254638A90 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254638A80 = v2 + 6;
      unk_254638A88 = v6 | 0x8000000000000000;
      qword_254638A78 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254638A80 = 0;
      unk_254638A88 = 0;
      qword_254638A78 = 0x2074736E6F63;
      byte_254638A8F = v2 + 6;
      v4 = (char *)&qword_254638A78 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254638A78, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638A08);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254638A90;
    else
      v8 = (__int128 *)xmmword_254638A90;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20AF125C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638A08);
  _Unwind_Resume(a1);
}

void sub_20AF125E0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638A10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638A10))
  {
    sub_20AF12698();
    if (byte_254638AD7 < 0)
    {
      sub_20AEC60F4(&xmmword_254638A90, (void *)xmmword_254638AC0, *((unint64_t *)&xmmword_254638AC0 + 1));
    }
    else
    {
      xmmword_254638A90 = xmmword_254638AC0;
      unk_254638AA0 = unk_254638AD0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638A90, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638A10);
  }
}

void sub_20AF12680(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638A10);
  _Unwind_Resume(a1);
}

void sub_20AF12698()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254638A18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638A18))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZLines2]", qword_254638AA8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254638AA8, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638A18);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254638A20);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254638A20))
    {
      sub_20B531658((uint64_t)qword_254638AA8, (uint64_t)&xmmword_254638AC0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638AC0, &dword_20AEBB000);
      __cxa_guard_release(&qword_254638A20);
    }
  }
}

void sub_20AF12768(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638A20);
  _Unwind_Resume(a1);
}

void sub_20AF12780(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638A18);
  _Unwind_Resume(a1);
}

void sub_20AF12798(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  __int128 *v6;
  __int128 v7;
  void **v8;
  void **v9;
  void *v10;
  int v11;
  size_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _BYTE v18[16];
  void *__p;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  char v28;
  void *v29;
  void **v30;
  __int128 __dst;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AED5104();
  v5 = atomic_load((unsigned __int8 *)&qword_254638A28);
  if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254638A28))
    goto LABEL_2;
  sub_20AF12460();
  v11 = byte_254638A8F;
  if (byte_254638A8F >= 0)
    v12 = byte_254638A8F;
  else
    v12 = qword_254638A80;
  v13 = v12 + 1;
  if (v12 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    v14 = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&xmmword_254638AD8 + 1) = v12 + 1;
    unk_254638AE8 = v16 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254638AD8 = v14;
    goto LABEL_43;
  }
  v14 = &xmmword_254638AD8;
  unk_254638AE8 = 0;
  xmmword_254638AD8 = 0uLL;
  byte_254638AEF = v12 + 1;
  if (v12)
  {
LABEL_43:
    if (v11 >= 0)
      v17 = &qword_254638A78;
    else
      v17 = (uint64_t *)qword_254638A78;
    memmove(v14, v17, v12);
  }
  *(_WORD *)((char *)v14 + v12) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638AD8, &dword_20AEBB000);
  __cxa_guard_release(&qword_254638A28);
LABEL_2:
  if (byte_254638AEF < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_254638AD8, *((unint64_t *)&xmmword_254638AD8 + 1));
  }
  else
  {
    __dst = xmmword_254638AD8;
    v32 = unk_254638AE8;
  }
  v6 = sub_20AED3F9C();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v33, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v34 = *((_QWORD *)v6 + 2);
    v33 = v7;
  }
  sub_20AEC7620(&v29, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v18, a2);
  sub_20AECD798(v4, (__int128 **)&v29, (uint64_t)v18, **a1);
  if (!v28 || !v27)
    goto LABEL_16;
  if (!v26)
    goto LABEL_13;
  if ((v25 & 0x80000000) == 0)
  {
    if ((v23 & 0x80000000) == 0)
      goto LABEL_13;
LABEL_30:
    operator delete(v22);
    if (!v21)
      goto LABEL_16;
    goto LABEL_14;
  }
  operator delete(v24);
  if (v23 < 0)
    goto LABEL_30;
LABEL_13:
  if (!v21)
    goto LABEL_16;
LABEL_14:
  if (v20 < 0)
    operator delete(__p);
LABEL_16:
  v8 = (void **)v29;
  if (v29)
  {
    v9 = v30;
    v10 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = v29;
    }
    v30 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v33);
  if (SHIBYTE(v32) < 0)
    goto LABEL_28;
}

void sub_20AF12AB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638A28);
  _Unwind_Resume(a1);
}

void sub_20AF12AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  sub_20AECDEE0((uint64_t)&a9);
  sub_20AEC2E90(&a25);
  if (*(char *)(v25 - 97) < 0)
    operator delete(*(void **)(v25 - 120));
  if (*(char *)(v25 - 121) < 0)
  {
    operator delete(*(void **)(v25 - 144));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AF12B30()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254638A38);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638A38))
  {
    sub_20AF12CB0();
    v1 = byte_254638B37;
    if (byte_254638B37 >= 0)
      v2 = byte_254638B37;
    else
      v2 = *((_QWORD *)&xmmword_254638B20 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254638B10 = v2 + 6;
      unk_254638B18 = v6 | 0x8000000000000000;
      qword_254638B08 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254638B10 = 0;
      unk_254638B18 = 0;
      qword_254638B08 = 0x2074736E6F63;
      byte_254638B1F = v2 + 6;
      v4 = (char *)&qword_254638B08 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254638B08, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638A38);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254638B20;
    else
      v8 = (__int128 *)xmmword_254638B20;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20AF12C98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638A38);
  _Unwind_Resume(a1);
}

void sub_20AF12CB0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638A40);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638A40))
  {
    sub_20AF12D68();
    if (byte_254638B67 < 0)
    {
      sub_20AEC60F4(&xmmword_254638B20, (void *)xmmword_254638B50, *((unint64_t *)&xmmword_254638B50 + 1));
    }
    else
    {
      xmmword_254638B20 = xmmword_254638B50;
      unk_254638B30 = unk_254638B60;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638B20, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638A40);
  }
}

void sub_20AF12D50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638A40);
  _Unwind_Resume(a1);
}

void sub_20AF12D68()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254638A48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638A48))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZLines3]", qword_254638B38);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254638B38, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638A48);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254638A50);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254638A50))
    {
      sub_20B531658((uint64_t)qword_254638B38, (uint64_t)&xmmword_254638B50);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638B50, &dword_20AEBB000);
      __cxa_guard_release(&qword_254638A50);
    }
  }
}

void sub_20AF12E38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638A50);
  _Unwind_Resume(a1);
}

void sub_20AF12E50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638A48);
  _Unwind_Resume(a1);
}

void sub_20AF12E68(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  __int128 *v6;
  __int128 v7;
  void **v8;
  void **v9;
  void *v10;
  int v11;
  size_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _BYTE v18[16];
  void *__p;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  char v28;
  void *v29;
  void **v30;
  __int128 __dst;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AED5104();
  v5 = atomic_load((unsigned __int8 *)&qword_254638A58);
  if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254638A58))
    goto LABEL_2;
  sub_20AF12B30();
  v11 = byte_254638B1F;
  if (byte_254638B1F >= 0)
    v12 = byte_254638B1F;
  else
    v12 = qword_254638B10;
  v13 = v12 + 1;
  if (v12 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    v14 = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&xmmword_254638B68 + 1) = v12 + 1;
    unk_254638B78 = v16 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254638B68 = v14;
    goto LABEL_43;
  }
  v14 = &xmmword_254638B68;
  unk_254638B78 = 0;
  xmmword_254638B68 = 0uLL;
  byte_254638B7F = v12 + 1;
  if (v12)
  {
LABEL_43:
    if (v11 >= 0)
      v17 = &qword_254638B08;
    else
      v17 = (uint64_t *)qword_254638B08;
    memmove(v14, v17, v12);
  }
  *(_WORD *)((char *)v14 + v12) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638B68, &dword_20AEBB000);
  __cxa_guard_release(&qword_254638A58);
LABEL_2:
  if (byte_254638B7F < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_254638B68, *((unint64_t *)&xmmword_254638B68 + 1));
  }
  else
  {
    __dst = xmmword_254638B68;
    v32 = unk_254638B78;
  }
  v6 = sub_20AED3F9C();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v33, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v34 = *((_QWORD *)v6 + 2);
    v33 = v7;
  }
  sub_20AEC7620(&v29, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v18, a2);
  sub_20AECD798(v4, (__int128 **)&v29, (uint64_t)v18, **a1);
  if (!v28 || !v27)
    goto LABEL_16;
  if (!v26)
    goto LABEL_13;
  if ((v25 & 0x80000000) == 0)
  {
    if ((v23 & 0x80000000) == 0)
      goto LABEL_13;
LABEL_30:
    operator delete(v22);
    if (!v21)
      goto LABEL_16;
    goto LABEL_14;
  }
  operator delete(v24);
  if (v23 < 0)
    goto LABEL_30;
LABEL_13:
  if (!v21)
    goto LABEL_16;
LABEL_14:
  if (v20 < 0)
    operator delete(__p);
LABEL_16:
  v8 = (void **)v29;
  if (v29)
  {
    v9 = v30;
    v10 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = v29;
    }
    v30 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v33);
  if (SHIBYTE(v32) < 0)
    goto LABEL_28;
}

void sub_20AF13188(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638A58);
  _Unwind_Resume(a1);
}

void sub_20AF131A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  sub_20AECDEE0((uint64_t)&a9);
  sub_20AEC2E90(&a25);
  if (*(char *)(v25 - 97) < 0)
    operator delete(*(void **)(v25 - 120));
  if (*(char *)(v25 - 121) < 0)
  {
    operator delete(*(void **)(v25 - 144));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AF13200(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  _BYTE v9[16];
  void *__p;
  char v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  char v18;
  char v19;
  __int128 *v20;
  __int128 *v21;
  __int128 __dst;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  sub_20AF125E0();
  v4 = sub_20AED6ED4();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v23 = v4[2];
    __dst = v5;
  }
  sub_20AEC7620(&v20, (uint64_t)&__dst, 1uLL);
  sub_20AECF9B0(v9, a2);
  sub_20AECD798((uint64_t *)&xmmword_254638A90, &v20, (uint64_t)v9, **a1);
  if (!v19 || !v18)
    goto LABEL_12;
  if (!v17)
    goto LABEL_9;
  if ((v16 & 0x80000000) == 0)
  {
    if ((v14 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_24:
    operator delete(v13);
    if (!v12)
      goto LABEL_12;
    goto LABEL_10;
  }
  operator delete(v15);
  if (v14 < 0)
    goto LABEL_24;
LABEL_9:
  if (!v12)
    goto LABEL_12;
LABEL_10:
  if (v11 < 0)
    operator delete(__p);
LABEL_12:
  v6 = v20;
  if (v20)
  {
    v7 = v21;
    v8 = v20;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*((void **)v7 - 3));
        v7 = (__int128 *)((char *)v7 - 24);
      }
      while (v7 != v6);
      v8 = v20;
    }
    v21 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__dst);
}

void sub_20AF1337C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECDEE0((uint64_t)va);
  sub_20AEC2E90((void **)(v2 - 72));
  if (*(char *)(v2 - 25) < 0)
    operator delete(*(void **)(v2 - 48));
  _Unwind_Resume(a1);
}

uint64_t sub_20AF133B8(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_20AECEBD0(v4, v1 + 1);
    sub_20AECF558((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22C0, (void (*)(void *))sub_20AECF5A8);
  }
  return result;
}

void sub_20AF13434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCE40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AF13448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_20AECCE40((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_20AF13464(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20AF13478(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  _BYTE v9[16];
  void *__p;
  char v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  char v18;
  char v19;
  __int128 *v20;
  __int128 *v21;
  __int128 __dst;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  sub_20AF12CB0();
  v4 = sub_20AED6ED4();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v23 = v4[2];
    __dst = v5;
  }
  sub_20AEC7620(&v20, (uint64_t)&__dst, 1uLL);
  sub_20AECF9B0(v9, a2);
  sub_20AECD798((uint64_t *)&xmmword_254638B20, &v20, (uint64_t)v9, **a1);
  if (!v19 || !v18)
    goto LABEL_12;
  if (!v17)
    goto LABEL_9;
  if ((v16 & 0x80000000) == 0)
  {
    if ((v14 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_24:
    operator delete(v13);
    if (!v12)
      goto LABEL_12;
    goto LABEL_10;
  }
  operator delete(v15);
  if (v14 < 0)
    goto LABEL_24;
LABEL_9:
  if (!v12)
    goto LABEL_12;
LABEL_10:
  if (v11 < 0)
    operator delete(__p);
LABEL_12:
  v6 = v20;
  if (v20)
  {
    v7 = v21;
    v8 = v20;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*((void **)v7 - 3));
        v7 = (__int128 *)((char *)v7 - 24);
      }
      while (v7 != v6);
      v8 = v20;
    }
    v21 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__dst);
}

void sub_20AF135F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECDEE0((uint64_t)va);
  sub_20AEC2E90((void **)(v2 - 72));
  if (*(char *)(v2 - 25) < 0)
    operator delete(*(void **)(v2 - 48));
  _Unwind_Resume(a1);
}

uint64_t sub_20AF13630(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_20AECEBD0(v4, v1 + 1);
    sub_20AECF558((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22C0, (void (*)(void *))sub_20AECF5A8);
  }
  return result;
}

void sub_20AF136AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCE40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AF136C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_20AECCE40((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_20AF136DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20AF136F0(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t *v6;
  __int128 v7;
  __int128 *v8;
  __int128 v9;
  void **v10;
  void **v11;
  void *v12;
  _BYTE v13[16];
  void *__p;
  char v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  char v22;
  char v23;
  void *v24;
  void **v25;
  __int128 __dst;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  sub_20AF125E0();
  v4 = sub_20AED733C();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v27 = v4[2];
    __dst = v5;
  }
  v6 = sub_20AED7480();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v28, (void *)*v6, v6[1]);
  }
  else
  {
    v7 = *(_OWORD *)v6;
    v29 = v6[2];
    v28 = v7;
  }
  v8 = sub_20AEED13C();
  if (*((char *)v8 + 23) < 0)
  {
    sub_20AEC60F4(&v30, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v31 = *((_QWORD *)v8 + 2);
    v30 = v9;
  }
  sub_20AEC7620(&v24, (uint64_t)&__dst, 3uLL);
  sub_20AECF9B0(v13, a2);
  sub_20AECD798((uint64_t *)&xmmword_254638A90, (__int128 **)&v24, (uint64_t)v13, **a1);
  if (!v23 || !v22)
    goto LABEL_18;
  if (!v21)
    goto LABEL_15;
  if ((v20 & 0x80000000) == 0)
  {
    if ((v18 & 0x80000000) == 0)
      goto LABEL_15;
LABEL_34:
    operator delete(v17);
    if (!v16)
      goto LABEL_18;
    goto LABEL_16;
  }
  operator delete(v19);
  if (v18 < 0)
    goto LABEL_34;
LABEL_15:
  if (!v16)
    goto LABEL_18;
LABEL_16:
  if (v15 < 0)
    operator delete(__p);
LABEL_18:
  v10 = (void **)v24;
  if (v24)
  {
    v11 = v25;
    v12 = v24;
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = v24;
    }
    v25 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v31) < 0)
  {
    operator delete((void *)v30);
    if ((SHIBYTE(v29) & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v27) & 0x80000000) == 0)
        return;
LABEL_32:
      operator delete((void *)__dst);
      return;
    }
  }
  else if ((SHIBYTE(v29) & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete((void *)v28);
  if (SHIBYTE(v27) < 0)
    goto LABEL_32;
}

void sub_20AF1392C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  _Unwind_Resume(exception_object);
}

void sub_20AF139D4(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t *v6;
  __int128 v7;
  __int128 *v8;
  __int128 v9;
  void **v10;
  void **v11;
  void *v12;
  _BYTE v13[16];
  void *__p;
  char v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  char v22;
  char v23;
  void *v24;
  void **v25;
  __int128 __dst;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  sub_20AF12CB0();
  v4 = sub_20AED733C();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v27 = v4[2];
    __dst = v5;
  }
  v6 = sub_20AED7480();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v28, (void *)*v6, v6[1]);
  }
  else
  {
    v7 = *(_OWORD *)v6;
    v29 = v6[2];
    v28 = v7;
  }
  v8 = sub_20AEED13C();
  if (*((char *)v8 + 23) < 0)
  {
    sub_20AEC60F4(&v30, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v31 = *((_QWORD *)v8 + 2);
    v30 = v9;
  }
  sub_20AEC7620(&v24, (uint64_t)&__dst, 3uLL);
  sub_20AECF9B0(v13, a2);
  sub_20AECD798((uint64_t *)&xmmword_254638B20, (__int128 **)&v24, (uint64_t)v13, **a1);
  if (!v23 || !v22)
    goto LABEL_18;
  if (!v21)
    goto LABEL_15;
  if ((v20 & 0x80000000) == 0)
  {
    if ((v18 & 0x80000000) == 0)
      goto LABEL_15;
LABEL_34:
    operator delete(v17);
    if (!v16)
      goto LABEL_18;
    goto LABEL_16;
  }
  operator delete(v19);
  if (v18 < 0)
    goto LABEL_34;
LABEL_15:
  if (!v16)
    goto LABEL_18;
LABEL_16:
  if (v15 < 0)
    operator delete(__p);
LABEL_18:
  v10 = (void **)v24;
  if (v24)
  {
    v11 = v25;
    v12 = v24;
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = v24;
    }
    v25 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v31) < 0)
  {
    operator delete((void *)v30);
    if ((SHIBYTE(v29) & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v27) & 0x80000000) == 0)
        return;
LABEL_32:
      operator delete((void *)__dst);
      return;
    }
  }
  else if ((SHIBYTE(v29) & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete((void *)v28);
  if (SHIBYTE(v27) < 0)
    goto LABEL_32;
}

void sub_20AF13C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20AF13CB8(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v2 = a1[8];
  a1[8] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = (unsigned int *)a1[5];
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  v10 = (std::__shared_weak_count *)a1[3];
  if (!v10)
    return a1;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
    return a1;
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return a1;
}

void sub_20AF13D94(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = (unsigned int *)a1[4];
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  v10 = (std::__shared_weak_count *)a1[2];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20AF13E68(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v2 = a1[8];
  a1[8] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = (unsigned int *)a1[5];
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  v10 = (std::__shared_weak_count *)a1[3];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AF13F44(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = (unsigned int *)a1[4];
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  v10 = (std::__shared_weak_count *)a1[2];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AF14020(uint64_t a1)
{
  void **v3;

  sub_20AF1774C(*(_QWORD **)(a1 + 56));
  v3 = (void **)(a1 + 16);
  sub_20AF048EC(&v3);
  return a1;
}

void sub_20AF14060(uint64_t a1)
{
  void **v2;

  sub_20AF1774C(*(_QWORD **)(a1 + 48));
  v2 = (void **)(a1 + 8);
  sub_20AF048EC(&v2);
}

uint64_t sub_20AF1409C(uint64_t a1)
{
  void **v3;

  sub_20AF1774C(*(_QWORD **)(a1 + 56));
  v3 = (void **)(a1 + 16);
  sub_20AF048EC(&v3);
  return MEMORY[0x20BD3583C](a1, 0x10A1C402C1B0AA2);
}

uint64_t sub_20AF140F0(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  v2 = a1 - 8;
  sub_20AF1774C(*(_QWORD **)(a1 + 48));
  v4 = (void **)(a1 + 8);
  sub_20AF048EC(&v4);
  return MEMORY[0x20BD3583C](v2, 0x10A1C402C1B0AA2);
}

uint64_t VZLogMessageGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638BA0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638BA0))
    return qword_254638B98;
  qword_254638B98 = sub_20AECB130();
  __cxa_guard_release(&qword_254638BA0);
  return qword_254638B98;
}

_OWORD *VZLogMessageCreateFromContextIDString(char *a1, uint64_t a2)
{
  _OWORD *v4;
  size_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  __int128 v41;
  void **v42;
  void **v43;
  void *v44;
  void *v46;
  void **v47;
  _QWORD v48[2];
  std::__shared_weak_count *v49;
  void *v50[2];
  char v51;
  void *__p;
  char v53;
  char v54;
  _QWORD v55[2];
  std::__shared_weak_count *v56;
  void *v57[2];
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  timespec __rqtp;
  void *v62;
  char v63;
  char v64;
  void *v65;
  char v66;
  void *v67;
  char v68;
  char v69;
  char v70;
  char v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v4 = 0;
  if (sub_20AEE3494((uint64_t)"VZLogMessageCreateFromContextIDString", (uint64_t)a1, 0))
    return v4;
  v4 = 0;
  if (sub_20AED21B4((uint64_t)"VZLogMessageCreateFromContextIDString", a2, 0))
    return v4;
  v5 = strlen(a1);
  sub_20B215074(a1, v5, (uint64_t)v50);
  v7 = *(_QWORD *)(a2 + 456);
  v6 = *(std::__shared_weak_count **)(a2 + 464);
  v48[0] = &off_24C411E78;
  v48[1] = v7;
  v49 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_20AFA7F18((uint64_t)&__rqtp, (uint64_t)v48);
  v10 = v72;
  v11 = v73;
  v12 = operator new(0x40uLL);
  v13 = v12;
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_24C3F3C38;
  v14 = v12 + 3;
  v55[0] = &off_24C411E78;
  v55[1] = v10;
  v56 = v11;
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20AF17488(v12 + 3, (__int128 *)v50, (uint64_t)v55);
  v17 = v56;
  if (v56)
  {
    v18 = (unint64_t *)&v56->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v57[0] = v14;
  v57[1] = v13;
  v58 = 0;
  *(_QWORD *)&v59 = 0;
  BYTE8(v59) = 0;
  sub_20AED5474((uint64_t)&__rqtp);
  v20 = v49;
  if (v49)
  {
    v21 = (unint64_t *)&v49->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v54 && v53 < 0)
    operator delete(__p);
  if (v51 < 0)
  {
    operator delete(v50[0]);
    v4 = operator new(0x48uLL, MEMORY[0x24BEDB6B8]);
    if (v4)
      goto LABEL_24;
  }
  else
  {
    v4 = operator new(0x48uLL, MEMORY[0x24BEDB6B8]);
    if (v4)
    {
LABEL_24:
      *(_QWORD *)v4 = off_24C3F2180;
      v4[1] = *(_OWORD *)v57;
      v57[0] = 0;
      v57[1] = 0;
      do
        v23 = __ldaxr((unsigned __int8 *)&v59 + 8);
      while (__stxr(1u, (unsigned __int8 *)&v59 + 8));
      if (v23)
      {
        v24 = 0;
        do
        {
          if (v24)
          {
            __rqtp = (timespec)xmmword_20B5B0ED0;
            nanosleep(&__rqtp, 0);
          }
          ++v24;
          do
            v25 = __ldaxr((unsigned __int8 *)&v59 + 8);
          while (__stxr(1u, (unsigned __int8 *)&v59 + 8));
        }
        while (v25);
      }
      v26 = v58;
      v27 = (unsigned int *)v59;
      if ((_QWORD)v59)
      {
        v28 = (unsigned int *)(v59 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      atomic_store(0, (unsigned __int8 *)&v59 + 8);
      *((_QWORD *)v4 + 4) = v26;
      *((_QWORD *)v4 + 5) = v27;
      *((_BYTE *)v4 + 48) = 0;
      *((_DWORD *)v4 + 14) = 1;
      *(_QWORD *)v4 = &off_24C3F3A30;
      *((_QWORD *)v4 + 1) = &unk_24C3F3A80;
      *((_QWORD *)v4 + 8) = 0;
      if (!v27)
        goto LABEL_47;
      goto LABEL_40;
    }
  }
  v27 = (unsigned int *)v59;
  if ((_QWORD)v59)
  {
LABEL_40:
    v30 = v27 + 2;
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 16))(v27);
      v33 = v27 + 3;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
    }
  }
LABEL_47:
  v36 = (std::__shared_weak_count *)v57[1];
  if (!v57[1])
    goto LABEL_51;
  v37 = (unint64_t *)((char *)v57[1] + 8);
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    if (v4)
      return v4;
  }
  else
  {
LABEL_51:
    if (v4)
      return v4;
  }
  v39 = (uint64_t *)sub_20AEF7F38();
  *(_OWORD *)v57 = *(_OWORD *)"std::string_view";
  v58 = 0x1000000000000000;
  v40 = sub_20AED6ED4();
  if (*((char *)v40 + 23) < 0)
  {
    sub_20AEC60F4(&v59, (void *)*v40, v40[1]);
  }
  else
  {
    v41 = *(_OWORD *)v40;
    v60 = v40[2];
    v59 = v41;
  }
  sub_20AEC7620(&v46, (uint64_t)v57, 2uLL);
  LOBYTE(__rqtp.tv_sec) = 0;
  v71 = 0;
  sub_20AECD798(v39, (__int128 **)&v46, (uint64_t)&__rqtp, 0);
  if (v71 && v70)
  {
    if (v69)
    {
      if (v68 < 0)
        operator delete(v67);
      if (v66 < 0)
        operator delete(v65);
    }
    if (v64 && v63 < 0)
      operator delete(v62);
  }
  v42 = (void **)v46;
  if (v46)
  {
    v43 = v47;
    v44 = v46;
    if (v47 != v46)
    {
      do
      {
        if (*((char *)v43 - 1) < 0)
          operator delete(*(v43 - 3));
        v43 -= 3;
      }
      while (v43 != v42);
      v44 = v46;
    }
    v47 = v42;
    operator delete(v44);
  }
  if (SHIBYTE(v60) < 0)
    operator delete((void *)v59);
  if (SHIBYTE(v58) < 0)
    operator delete(v57[0]);
  return 0;
}

void sub_20AF14670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20AEC01C0(exception_object);
}

const char *VZLogMessageGetSubloggerName(uint64_t a1)
{
  const char *result;

  if (sub_20AF147D4((uint64_t)"VZLogMessageGetSubloggerName", a1))
    return "";
  result = **(const char ***)(a1 + 16);
  if (result[23] < 0)
    return *(const char **)result;
  return result;
}

BOOL sub_20AF147D4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v7;
  size_t v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  char v37;
  char v38;
  char v39;

  if (a2)
    return a2 == 0;
  v4 = atomic_load((unsigned __int8 *)&qword_254638BA8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254638BA8))
  {
    sub_20AF17848();
    v7 = byte_254638C57;
    if (byte_254638C57 >= 0)
      v8 = byte_254638C57;
    else
      v8 = qword_254638C48;
    v9 = v8 + 1;
    if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v9 >= 0x17)
    {
      v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v11 = v9 | 7;
      v12 = v11 + 1;
      v10 = (__int128 *)operator new(v11 + 1);
      *((_QWORD *)&xmmword_254638C28 + 1) = v8 + 1;
      unk_254638C38 = v12 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638C28 = v10;
    }
    else
    {
      unk_254638C38 = 0;
      xmmword_254638C28 = 0uLL;
      v10 = &xmmword_254638C28;
      byte_254638C3F = v8 + 1;
      if (!v8)
      {
LABEL_53:
        *(_WORD *)((char *)v10 + v8) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638C28, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638BA8);
        goto LABEL_3;
      }
    }
    if (v7 >= 0)
      v13 = &qword_254638C40;
    else
      v13 = (uint64_t *)qword_254638C40;
    memmove(v10, v13, v8);
    goto LABEL_53;
  }
LABEL_3:
  if (byte_254638C3F < 0)
  {
    sub_20AEC60F4(v14, (void *)xmmword_254638C28, *((unint64_t *)&xmmword_254638C28 + 1));
  }
  else
  {
    *(_OWORD *)v14 = xmmword_254638C28;
    v15 = unk_254638C38;
  }
  v16 = 1;
  sub_20AECCECC(a1, (uint64_t)v14, (uint64_t)&v17);
  v28 = v17;
  LOBYTE(v29) = 0;
  v38 = 0;
  if (v27)
  {
    v31 = 0;
    if (v20)
    {
      v29 = v18;
      v30 = v19;
      v19 = 0;
      v18 = 0uLL;
      v31 = 1;
    }
    LOBYTE(v32) = 0;
    v37 = 0;
    if (v26)
    {
      v33 = v22;
      v32 = *(_OWORD *)v21;
      v21[0] = 0;
      v21[1] = 0;
      v34 = v23;
      *(_OWORD *)__p = *(_OWORD *)v24;
      v36 = v25;
      v22 = 0;
      v24[0] = 0;
      v24[1] = 0;
      v25 = 0;
      v37 = 1;
    }
    v38 = 1;
  }
  v39 = 0;
  v5 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v28);
  if (!v39 && v38)
  {
    if (v37)
    {
      if (SHIBYTE(v36) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
    }
    if (v31 && SHIBYTE(v30) < 0)
      operator delete((void *)v29);
  }
  if (v27)
  {
    if (v26)
    {
      if (SHIBYTE(v25) < 0)
        operator delete(v24[0]);
      if (SHIBYTE(v22) < 0)
        operator delete(v21[0]);
    }
    if (v20 && SHIBYTE(v19) < 0)
      operator delete((void *)v18);
  }
  if (v16 && SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  return a2 == 0;
}

void sub_20AF14B48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638BA8);
  _Unwind_Resume(a1);
}

void sub_20AF14B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *VZLogMessageGetNamespace(uint64_t a1)
{
  const char *result;
  uint64_t v3;

  if (sub_20AF147D4((uint64_t)"VZLogMessageGetNamespace", a1))
    return "";
  v3 = **(_QWORD **)(a1 + 16);
  if (!*(_BYTE *)(v3 + 48))
    return 0;
  result = (const char *)(v3 + 24);
  if (*(char *)(v3 + 47) < 0)
    return *(const char **)result;
  return result;
}

uint64_t **VZLogMessageGetContextIDString(uint64_t a1)
{
  if (sub_20AF147D4((uint64_t)"VZLogMessageGetContextIDString", a1))
    return (uint64_t **)"";
  else
    return sub_20B0798F0(a1 + 16);
}

uint64_t VZLogMessageGetData(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned __int8 v23;
  void **v24;
  void **v25;
  void *v26;
  unsigned __int8 v27;
  int v28;
  size_t v29;
  unint64_t v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35[16];
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  void *__p;
  char v42;
  char v43;
  char v44;
  char v45;
  void *v46;
  void **v47;
  _QWORD v48[2];
  std::__shared_weak_count *v49;
  __int128 __dst;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (sub_20AF147D4((uint64_t)"VZLogMessageGetData", a1))
    return 0;
  result = *(_QWORD *)(a1 + 64);
  if (!result)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(v3 + 24);
    v4 = *(std::__shared_weak_count **)(v3 + 32);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (!v5)
      return 0;
    v9 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD *)(v9 + 24);
    v10 = *(std::__shared_weak_count **)(v9 + 32);
    v12 = operator new(0x240uLL, MEMORY[0x24BEDB6B8]);
    if (v12)
    {
      v13 = (uint64_t)v12;
      *v12 = off_24C3F2180;
      v14 = (uint64_t)(v12 + 4);
      v48[0] = &off_24C411E78;
      v48[1] = v11;
      v49 = v10;
      if (v10)
      {
        v15 = (unint64_t *)&v10->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      sub_20AFA7F18(v14, (uint64_t)v48);
      v17 = v49;
      if (v49)
      {
        v18 = (unint64_t *)&v49->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      *(_DWORD *)(v13 + 552) = 1;
      *(_QWORD *)v13 = &off_24C3F2BA0;
      *(_QWORD *)(v13 + 16) = &unk_24C3F2BF0;
      *(_OWORD *)(v13 + 560) = 0u;
      sub_20AEE73BC(v13);
      v20 = 0;
      v21 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v13;
      if (!v21)
        goto LABEL_22;
      goto LABEL_21;
    }
    v22 = (uint64_t *)sub_20AED5104();
    v23 = atomic_load((unsigned __int8 *)&qword_254638B80);
    if ((v23 & 1) != 0 || !__cxa_guard_acquire(&qword_254638B80))
    {
LABEL_27:
      if (byte_254638BF7 < 0)
      {
        sub_20AEC60F4(&__dst, (void *)xmmword_254638BE0, *((unint64_t *)&xmmword_254638BE0 + 1));
      }
      else
      {
        __dst = xmmword_254638BE0;
        v51 = unk_254638BF0;
      }
      sub_20AEC7620(&v46, (uint64_t)&__dst, 1uLL);
      v35[0] = 0;
      v45 = 0;
      sub_20AECD798(v22, (__int128 **)&v46, (uint64_t)v35, 0);
      if (v45 && v44)
      {
        if (v43)
        {
          if (v42 < 0)
            operator delete(__p);
          if (v40 < 0)
            operator delete(v39);
        }
        if (v38 && v37 < 0)
          operator delete(v36);
      }
      v24 = (void **)v46;
      if (v46)
      {
        v25 = v47;
        v26 = v46;
        if (v47 != v46)
        {
          do
          {
            if (*((char *)v25 - 1) < 0)
              operator delete(*(v25 - 3));
            v25 -= 3;
          }
          while (v25 != v24);
          v26 = v46;
        }
        v47 = v24;
        operator delete(v26);
      }
      if (SHIBYTE(v51) < 0)
        operator delete((void *)__dst);
      v13 = 0;
      v20 = 1;
      v21 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = 0;
      if (!v21)
        goto LABEL_22;
LABEL_21:
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
LABEL_22:
      if ((v20 & 1) == 0)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      return *(_QWORD *)(a1 + 64);
    }
    v27 = atomic_load((unsigned __int8 *)&qword_254638B88);
    if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254638B88))
    {
      unk_254638C09 = 0;
      unk_254638C0A = 0;
      unk_254638C0C = 352321536;
      strcpy((char *)&qword_254638BF8, "const viz::Share");
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254638BF8, &dword_20AEBB000);
      __cxa_guard_release(&qword_254638B88);
    }
    v28 = byte_254638C0F;
    if (byte_254638C0F >= 0)
      v29 = byte_254638C0F;
    else
      v29 = qword_254638C00;
    v30 = v29 + 1;
    if (v29 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v30 >= 0x17)
    {
      v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v32 = v30 | 7;
      v33 = v32 + 1;
      v31 = (__int128 *)operator new(v32 + 1);
      *((_QWORD *)&xmmword_254638BE0 + 1) = v29 + 1;
      unk_254638BF0 = v33 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638BE0 = v31;
    }
    else
    {
      v31 = &xmmword_254638BE0;
      unk_254638BF0 = 0;
      xmmword_254638BE0 = 0uLL;
      byte_254638BF7 = v29 + 1;
      if (!v29)
      {
LABEL_68:
        *(_WORD *)((char *)v31 + v29) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638BE0, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638B80);
        goto LABEL_27;
      }
    }
    if (v28 >= 0)
      v34 = &qword_254638BF8;
    else
      v34 = (uint64_t *)qword_254638BF8;
    memmove(v31, v34, v29);
    goto LABEL_68;
  }
  return result;
}

void sub_20AF15140(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_guard_abort(&qword_254638B80);
    sub_20AEC01C0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AF15158(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20AF15164);
  sub_20AEC01C0(a1);
}

uint64_t VZLogMessageListGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638BC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638BC0))
    return qword_254638BB8;
  qword_254638BB8 = sub_20AECB130();
  __cxa_guard_release(&qword_254638BC0);
  return qword_254638BB8;
}

_OWORD *VZLogMessageListCreate()
{
  _OWORD *result;
  uint64_t *v1;
  __int128 *v2;
  __int128 *v3;
  __int128 *v4;
  _BYTE v5[16];
  void *v6;
  char v7;
  char v8;
  void *v9;
  char v10;
  void *__p;
  char v12;
  char v13;
  char v14;
  char v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;

  result = operator new(0x48uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[1] = 0u;
    result[2] = 0u;
    *((_DWORD *)result + 10) = 1;
    *(_QWORD *)result = off_24C3F3B28;
    *((_QWORD *)result + 1) = &unk_24C3F3B78;
    *((_QWORD *)result + 8) = 0;
    *((_QWORD *)result + 7) = 0;
    *((_QWORD *)result + 6) = (char *)result + 56;
  }
  else
  {
    v1 = (uint64_t *)sub_20AF08378();
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v5[0] = 0;
    v15 = 0;
    sub_20AECD798(v1, &v16, (uint64_t)v5, 0);
    if (v15 && v14)
    {
      if (v13)
      {
        if (v12 < 0)
          operator delete(__p);
        if (v10 < 0)
          operator delete(v9);
      }
      if (v8 && v7 < 0)
        operator delete(v6);
    }
    v2 = v16;
    if (v16)
    {
      v3 = v17;
      v4 = v16;
      if (v17 != v16)
      {
        do
        {
          if (*((char *)v3 - 1) < 0)
            operator delete(*((void **)v3 - 3));
          v3 = (__int128 *)((char *)v3 - 24);
        }
        while (v3 != v2);
        v4 = v16;
      }
      v17 = v2;
      operator delete(v4);
    }
    return 0;
  }
  return result;
}

void VZLogMessageListAddLogMessage(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  _QWORD *v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  __int128 *v67;
  const void **v68;
  int v69;
  size_t v70;
  unint64_t v71;
  __int128 *v72;
  uint64_t v73;
  uint64_t v74;
  const void *v75;
  char *v76;
  void *__dst[2];
  uint64_t v78;
  char v79;
  timespec v80;
  __int128 v81;
  uint64_t v82;
  char v83;
  void *v84[2];
  uint64_t v85;
  uint64_t v86;
  void *v87[2];
  uint64_t v88;
  char v89;
  char v90;
  timespec __rqtp;
  __int128 v92;
  uint64_t v93;
  char v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  void *__p[2];
  uint64_t v99;
  char v100;
  char v101;
  char v102;

  if (a1)
  {
    if (sub_20AF147D4((uint64_t)"VZLogMessageListAddLogMessage", (uint64_t)a2))
      return;
    v5 = a1[3];
    v4 = a1[4];
    if (v5 < v4)
    {
      *(_QWORD *)v5 = a2[2];
      v6 = a2[3];
      *(_QWORD *)(v5 + 8) = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v9 = (unsigned __int8 *)(a2 + 6);
      do
        v10 = __ldaxr(v9);
      while (__stxr(1u, v9));
      if (v10)
      {
        v11 = 0;
        do
        {
          if (v11)
          {
            __rqtp = (timespec)xmmword_20B5B0ED0;
            nanosleep(&__rqtp, 0);
          }
          ++v11;
          do
            v12 = __ldaxr(v9);
          while (__stxr(1u, v9));
        }
        while (v12);
      }
      v14 = a2[4];
      v13 = a2[5];
      if (v13)
      {
        v15 = (unsigned int *)(v13 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      atomic_store(0, v9);
      *(_QWORD *)(v5 + 16) = v14;
      *(_QWORD *)(v5 + 24) = v13;
      v17 = v5 + 40;
      *(_BYTE *)(v5 + 32) = 0;
LABEL_116:
      a1[3] = v17;
      return;
    }
    v19 = a1[2];
    v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v19) >> 3);
    if (v20 + 1 > 0x666666666666666)
      sub_20AEC60B8();
    v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - v19) >> 3);
    v22 = 2 * v21;
    if (2 * v21 <= v20 + 1)
      v22 = v20 + 1;
    if (v21 >= 0x333333333333333)
      v23 = 0x666666666666666;
    else
      v23 = v22;
    if (v23)
    {
      if (v23 > 0x666666666666666)
        sub_20AEC60CC();
      v24 = (char *)operator new(40 * v23);
      v25 = a2[3];
      v26 = (uint64_t)&v24[40 * v20];
      *(_QWORD *)v26 = a2[2];
      *(_QWORD *)(v26 + 8) = v25;
      if (!v25)
        goto LABEL_66;
    }
    else
    {
      v24 = 0;
      v25 = a2[3];
      v26 = 40 * v20;
      *(_QWORD *)v26 = a2[2];
      *(_QWORD *)(v26 + 8) = v25;
      if (!v25)
      {
LABEL_66:
        v30 = &v24[40 * v23];
        v31 = (unsigned __int8 *)(a2 + 6);
        do
          v32 = __ldaxr(v31);
        while (__stxr(1u, v31));
        if (v32)
        {
          v33 = 0;
          do
          {
            if (v33)
            {
              __rqtp = (timespec)xmmword_20B5B0ED0;
              nanosleep(&__rqtp, 0);
            }
            ++v33;
            do
              v34 = __ldaxr(v31);
            while (__stxr(1u, v31));
          }
          while (v34);
        }
        v36 = a2[4];
        v35 = a2[5];
        if (v35)
        {
          v37 = (unsigned int *)(v35 + 8);
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        v39 = &v24[40 * v20];
        atomic_store(0, v31);
        *((_QWORD *)v39 + 2) = v36;
        *((_QWORD *)v39 + 3) = v35;
        v39[32] = 0;
        v17 = v26 + 40;
        v41 = (_QWORD *)a1[2];
        v40 = (_QWORD *)a1[3];
        if (v40 == v41)
        {
          a1[2] = v26;
          a1[3] = v17;
          a1[4] = v30;
        }
        else
        {
          v76 = v30;
          v42 = (_QWORD *)a1[3];
          v43 = v26;
          do
          {
            v44 = *(v42 - 5);
            v42 -= 5;
            *(_QWORD *)(v43 - 40) = v44;
            v43 -= 40;
            v45 = v42[1];
            *(_QWORD *)(v43 + 8) = v45;
            if (v45)
            {
              v46 = (unint64_t *)(v45 + 8);
              do
                v47 = __ldxr(v46);
              while (__stxr(v47 + 1, v46));
            }
            v48 = (unsigned __int8 *)(v40 - 1);
            do
              v49 = __ldaxr(v48);
            while (__stxr(1u, v48));
            if (v49)
            {
              v50 = 0;
              do
              {
                if (v50)
                {
                  __rqtp = (timespec)xmmword_20B5B0ED0;
                  nanosleep(&__rqtp, 0);
                }
                ++v50;
                do
                  v51 = __ldaxr(v48);
                while (__stxr(1u, v48));
              }
              while (v51);
            }
            v52 = *(v40 - 3);
            v53 = *(v40 - 2);
            if (v53)
            {
              v54 = (unsigned int *)(v53 + 8);
              do
                v55 = __ldxr(v54);
              while (__stxr(v55 + 1, v54));
            }
            atomic_store(0, v48);
            *(_QWORD *)(v26 - 24) = v52;
            *(_QWORD *)(v26 - 16) = v53;
            *(_BYTE *)(v26 - 8) = 0;
            v26 = v43;
            v40 = v42;
          }
          while (v42 != v41);
          v40 = (_QWORD *)a1[2];
          v56 = (_QWORD *)a1[3];
          a1[2] = v43;
          a1[3] = v17;
          a1[4] = v76;
          while (v56 != v40)
          {
            v57 = (unsigned int *)*(v56 - 2);
            if (v57)
            {
              v58 = v57 + 2;
              do
              {
                v59 = __ldaxr(v58);
                v60 = v59 - 1;
              }
              while (__stlxr(v60, v58));
              if (!v60)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v57 + 16))(v57);
                v61 = v57 + 3;
                do
                {
                  v62 = __ldaxr(v61);
                  v63 = v62 - 1;
                }
                while (__stlxr(v63, v61));
                if (!v63)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v57 + 24))(v57);
              }
            }
            v64 = (std::__shared_weak_count *)*(v56 - 4);
            if (v64)
            {
              p_shared_owners = (unint64_t *)&v64->__shared_owners_;
              do
                v66 = __ldaxr(p_shared_owners);
              while (__stlxr(v66 - 1, p_shared_owners));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
              }
            }
            v56 -= 5;
          }
        }
        if (v40)
          operator delete(v40);
        goto LABEL_116;
      }
    }
    v28 = (unint64_t *)(v25 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    goto LABEL_66;
  }
  v18 = atomic_load((unsigned __int8 *)&qword_254638BC8);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254638BC8))
  {
    v67 = sub_20AF08378();
    v68 = (const void **)v67;
    v69 = *((char *)v67 + 23);
    if (v69 >= 0)
      v70 = *((unsigned __int8 *)v67 + 23);
    else
      v70 = *((_QWORD *)v67 + 1);
    v71 = v70 + 1;
    if (v70 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v71 >= 0x17)
    {
      v73 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v71 | 7) != 0x17)
        v73 = v71 | 7;
      v74 = v73 + 1;
      v72 = (__int128 *)operator new(v73 + 1);
      *((_QWORD *)&xmmword_254638C58 + 1) = v70 + 1;
      unk_254638C68 = v74 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638C58 = v72;
    }
    else
    {
      unk_254638C68 = 0;
      xmmword_254638C58 = 0uLL;
      v72 = &xmmword_254638C58;
      byte_254638C6F = v70 + 1;
      if (!v70)
      {
LABEL_136:
        *(_WORD *)((char *)v72 + v70) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638C58, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638BC8);
        goto LABEL_21;
      }
    }
    if (v69 >= 0)
      v75 = v68;
    else
      v75 = *v68;
    memmove(v72, v75, v70);
    goto LABEL_136;
  }
LABEL_21:
  if (byte_254638C6F < 0)
  {
    sub_20AEC60F4(__dst, (void *)xmmword_254638C58, *((unint64_t *)&xmmword_254638C58 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254638C58;
    v78 = unk_254638C68;
  }
  v79 = 1;
  sub_20AECCECC((uint64_t)"VZLogMessageListAddLogMessage", (uint64_t)__dst, (uint64_t)&v80);
  __rqtp = v80;
  LOBYTE(v92) = 0;
  v101 = 0;
  if (v90)
  {
    v94 = 0;
    if (v83)
    {
      v92 = v81;
      v93 = v82;
      v82 = 0;
      v81 = 0uLL;
      v94 = 1;
    }
    LOBYTE(v95) = 0;
    v100 = 0;
    if (v89)
    {
      v96 = v85;
      v95 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v97 = v86;
      *(_OWORD *)__p = *(_OWORD *)v87;
      v99 = v88;
      v85 = 0;
      v87[0] = 0;
      v87[1] = 0;
      v88 = 0;
      v100 = 1;
    }
    v101 = 1;
  }
  v102 = 0;
  v27 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, (__int128 *)&__rqtp.tv_sec);
  if (!v102 && v101)
  {
    if (v100)
    {
      if (SHIBYTE(v99) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v96) < 0)
        operator delete((void *)v95);
    }
    if (v94 && SHIBYTE(v93) < 0)
      operator delete((void *)v92);
  }
  if (v90)
  {
    if (v89)
    {
      if (SHIBYTE(v88) < 0)
        operator delete(v87[0]);
      if (SHIBYTE(v85) < 0)
        operator delete(v84[0]);
    }
    if (v83 && SHIBYTE(v82) < 0)
      operator delete((void *)v81);
  }
  if (v79 && SHIBYTE(v78) < 0)
    operator delete(__dst[0]);
}

void sub_20AF15A2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638BC8);
  _Unwind_Resume(a1);
}

void sub_20AF15A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t VZLogMessageListGetSize(uint64_t a1)
{
  if (sub_20AF15AD4((uint64_t)"VZLogMessageListGetSize", a1))
    return 0;
  else
    return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3);
}

BOOL sub_20AF15AD4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v7;
  size_t v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  char v37;
  char v38;
  char v39;

  if (a2)
    return a2 == 0;
  v4 = atomic_load((unsigned __int8 *)&qword_254638BD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254638BD0))
  {
    sub_20AF179D0();
    v7 = byte_254638C9F;
    if (byte_254638C9F >= 0)
      v8 = byte_254638C9F;
    else
      v8 = qword_254638C90;
    v9 = v8 + 1;
    if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v9 >= 0x17)
    {
      v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v11 = v9 | 7;
      v12 = v11 + 1;
      v10 = (__int128 *)operator new(v11 + 1);
      *((_QWORD *)&xmmword_254638C70 + 1) = v8 + 1;
      unk_254638C80 = v12 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638C70 = v10;
    }
    else
    {
      unk_254638C80 = 0;
      xmmword_254638C70 = 0uLL;
      v10 = &xmmword_254638C70;
      byte_254638C87 = v8 + 1;
      if (!v8)
      {
LABEL_53:
        *(_WORD *)((char *)v10 + v8) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638C70, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638BD0);
        goto LABEL_3;
      }
    }
    if (v7 >= 0)
      v13 = &qword_254638C88;
    else
      v13 = (uint64_t *)qword_254638C88;
    memmove(v10, v13, v8);
    goto LABEL_53;
  }
LABEL_3:
  if (byte_254638C87 < 0)
  {
    sub_20AEC60F4(v14, (void *)xmmword_254638C70, *((unint64_t *)&xmmword_254638C70 + 1));
  }
  else
  {
    *(_OWORD *)v14 = xmmword_254638C70;
    v15 = unk_254638C80;
  }
  v16 = 1;
  sub_20AECCECC(a1, (uint64_t)v14, (uint64_t)&v17);
  v28 = v17;
  LOBYTE(v29) = 0;
  v38 = 0;
  if (v27)
  {
    v31 = 0;
    if (v20)
    {
      v29 = v18;
      v30 = v19;
      v19 = 0;
      v18 = 0uLL;
      v31 = 1;
    }
    LOBYTE(v32) = 0;
    v37 = 0;
    if (v26)
    {
      v33 = v22;
      v32 = *(_OWORD *)v21;
      v21[0] = 0;
      v21[1] = 0;
      v34 = v23;
      *(_OWORD *)__p = *(_OWORD *)v24;
      v36 = v25;
      v22 = 0;
      v24[0] = 0;
      v24[1] = 0;
      v25 = 0;
      v37 = 1;
    }
    v38 = 1;
  }
  v39 = 0;
  v5 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v28);
  if (!v39 && v38)
  {
    if (v37)
    {
      if (SHIBYTE(v36) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
    }
    if (v31 && SHIBYTE(v30) < 0)
      operator delete((void *)v29);
  }
  if (v27)
  {
    if (v26)
    {
      if (SHIBYTE(v25) < 0)
        operator delete(v24[0]);
      if (SHIBYTE(v22) < 0)
        operator delete(v21[0]);
    }
    if (v20 && SHIBYTE(v19) < 0)
      operator delete((void *)v18);
  }
  if (v16 && SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  return a2 == 0;
}

void sub_20AF15E48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638BD0);
  _Unwind_Resume(a1);
}

void sub_20AF15E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *VZLogMessageListGetLogMessage(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __darwin_time_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t **v23;
  uint64_t **v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t (***v28)();
  uint64_t (***v29)();
  uint64_t tv_nsec;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t (**v36)();
  unsigned int *v37;
  unsigned int v38;
  uint64_t (**v39)();
  uint64_t **v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t *v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  __darwin_time_t tv_sec;
  uint64_t v58;
  void *v59;
  __int128 *v61;
  const void **v62;
  int v63;
  size_t v64;
  unint64_t v65;
  __int128 *v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  timespec v70;
  __int128 v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  char v79;
  char v80;
  char v81;
  unint64_t v82;
  timespec __dst;
  uint64_t v84;
  char v85;
  void *v86;
  char v87;
  void *__p;
  char v89;
  char v90;
  char v91;
  unint64_t v92;
  timespec __rqtp;
  __int128 v94;
  uint64_t v95;
  char v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  char v102;
  char v103;
  char v104;
  timespec v105;
  uint64_t v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  if (!sub_20AF15AD4((uint64_t)"VZLogMessageListGetLogMessage", a1))
  {
    v6 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 24);
    v92 = a2;
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 3);
    if (v7 <= a2)
    {
      v82 = v7;
      sub_20AEF6F40("index ", &v92, (std::string *)" out of range for list of size ", &v82);
      if (SHIBYTE(v106) < 0)
      {
        sub_20AEC60F4(&__dst, (void *)v105.tv_sec, v105.tv_nsec);
      }
      else
      {
        __dst = v105;
        v84 = v106;
      }
      v85 = 1;
      LOBYTE(v86) = 0;
      v90 = 0;
      v91 = 1;
      sub_20AECCC3C(0xAu, (__int128 *)&__dst.tv_sec, (uint64_t)&__rqtp);
      v70 = __rqtp;
      LOBYTE(v71) = 0;
      v80 = 0;
      if (v103)
      {
        v73 = 0;
        if (v96)
        {
          v71 = v94;
          v72 = v95;
          v95 = 0;
          v94 = 0uLL;
          v73 = 1;
        }
        LOBYTE(v74) = 0;
        v79 = 0;
        if (v102)
        {
          v75 = v98;
          v74 = v97;
          v97 = 0uLL;
          v76 = v99;
          v77 = v100;
          v78 = v101;
          v98 = 0;
          v100 = 0uLL;
          v101 = 0;
          v79 = 1;
        }
        v80 = 1;
        v81 = 0;
        if (v96 && SHIBYTE(v95) < 0)
          operator delete((void *)v94);
      }
      else
      {
        v81 = 0;
      }
      if (v91)
      {
        if (v90)
        {
          if (v89 < 0)
            operator delete(__p);
          if (v87 < 0)
            operator delete(v86);
        }
        if (v85 && SHIBYTE(v84) < 0)
          operator delete((void *)__dst.tv_sec);
      }
      if (SHIBYTE(v106) < 0)
        operator delete((void *)v105.tv_sec);
      v56 = atomic_load((unsigned __int8 *)&qword_254630258);
      if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
      {
        __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630258);
      }
      sub_20AECB50C((uint64_t)&unk_254630168, (__int128 *)&v70.tv_sec);
      goto LABEL_120;
    }
    v8 = (__darwin_time_t *)(v6 + 40 * a2);
    v70.tv_sec = *v8;
    v9 = v8[1];
    v70.tv_nsec = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = v6 + 40 * a2;
    v13 = (uint64_t *)(v12 + 16);
    v14 = (unsigned __int8 *)(v12 + 32);
    do
      v15 = __ldaxr(v14);
    while (__stxr(1u, v14));
    if (v15)
    {
      v16 = 0;
      do
      {
        if (v16)
        {
          __rqtp = (timespec)xmmword_20B5B0ED0;
          nanosleep(&__rqtp, 0);
        }
        ++v16;
        do
          v17 = __ldaxr(v14);
        while (__stxr(1u, v14));
      }
      while (v17);
    }
    v18 = *v13;
    v19 = *(_QWORD *)(v6 + 40 * a2 + 24);
    if (v19)
    {
      v20 = (unsigned int *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    atomic_store(0, v14);
    *(_QWORD *)&v71 = v18;
    *((_QWORD *)&v71 + 1) = v19;
    LOBYTE(v72) = 0;
    v81 = 1;
    v23 = (uint64_t **)(a1 + 56);
    v22 = *(_QWORD **)(a1 + 56);
    if (v22)
    {
      v24 = (uint64_t **)(a1 + 56);
      do
      {
        v25 = v22[4];
        v26 = v25 >= v70.tv_sec;
        if (v25 >= v70.tv_sec)
          v27 = v22;
        else
          v27 = v22 + 1;
        if (v26)
          v24 = (uint64_t **)v22;
        v22 = (_QWORD *)*v27;
      }
      while (*v27);
      if (v24 != v23 && v70.tv_sec >= (unint64_t)v24[4])
      {
LABEL_123:
        v4 = v24[9];
        goto LABEL_124;
      }
    }
    v28 = (uint64_t (***)())operator new(0x48uLL, MEMORY[0x24BEDB6B8]);
    if (v28)
    {
      v29 = v28;
      *v28 = (uint64_t (**)())off_24C3F2180;
      tv_nsec = v70.tv_nsec;
      v28[2] = (uint64_t (**)())v70.tv_sec;
      v28[3] = (uint64_t (**)())tv_nsec;
      if (tv_nsec)
      {
        v31 = (unint64_t *)(tv_nsec + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      do
        v33 = __ldaxr((unsigned __int8 *)&v72);
      while (__stxr(1u, (unsigned __int8 *)&v72));
      if (v33)
      {
        v34 = 0;
        do
        {
          if (v34)
          {
            __dst = (timespec)xmmword_20B5B0ED0;
            nanosleep(&__dst, 0);
          }
          ++v34;
          do
            v35 = __ldaxr((unsigned __int8 *)&v72);
          while (__stxr(1u, (unsigned __int8 *)&v72));
        }
        while (v35);
      }
      v36 = (uint64_t (**)())*((_QWORD *)&v71 + 1);
      if (*((_QWORD *)&v71 + 1))
      {
        v37 = (unsigned int *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      atomic_store(0, (unsigned __int8 *)&v72);
      v29[4] = (uint64_t (**)())v71;
      v29[5] = v36;
      v39 = &off_24C3F3A30;
      v29[1] = (uint64_t (**)())&unk_24C3F3A80;
      *((_DWORD *)v29 + 14) = 1;
      *((_BYTE *)v29 + 48) = 0;
      *v29 = &off_24C3F3A30;
      v29[8] = 0;
      v40 = (uint64_t **)(a1 + 56);
      v41 = *v23;
      if (*v23)
      {
        while (1)
        {
          while (1)
          {
            v40 = (uint64_t **)v41;
            v42 = v41[4];
            if (v42 <= v70.tv_sec)
              break;
            v41 = *v40;
            v23 = v40;
            if (!*v40)
              goto LABEL_76;
          }
          if (v42 >= v70.tv_sec)
            break;
          v41 = v40[1];
          if (!v41)
          {
            v23 = v40 + 1;
            goto LABEL_76;
          }
        }
        v24 = v40;
      }
      else
      {
LABEL_76:
        v24 = (uint64_t **)operator new(0x50uLL);
        v43 = v70.tv_nsec;
        v24[4] = (uint64_t *)v70.tv_sec;
        v24[5] = (uint64_t *)v43;
        if (v43)
        {
          v44 = (unint64_t *)(v43 + 8);
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        do
          v46 = __ldaxr((unsigned __int8 *)&v72);
        while (__stxr(1u, (unsigned __int8 *)&v72));
        if (v46)
        {
          v47 = 0;
          do
          {
            if (v47)
            {
              __rqtp = (timespec)xmmword_20B5B0ED0;
              nanosleep(&__rqtp, 0);
            }
            ++v47;
            do
              v48 = __ldaxr((unsigned __int8 *)&v72);
            while (__stxr(1u, (unsigned __int8 *)&v72));
          }
          while (v48);
        }
        v49 = (uint64_t *)*((_QWORD *)&v71 + 1);
        if (*((_QWORD *)&v71 + 1))
        {
          v50 = (unsigned int *)(*((_QWORD *)&v71 + 1) + 8);
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
        }
        atomic_store(0, (unsigned __int8 *)&v72);
        v24[6] = (uint64_t *)v71;
        v24[7] = v49;
        *((_BYTE *)v24 + 64) = 0;
        v24[9] = (uint64_t *)v29;
        ((void (*)(uint64_t (***)()))(*v29)[2])(v29);
        *v24 = 0;
        v24[1] = 0;
        v24[2] = (uint64_t *)v40;
        *v23 = (uint64_t *)v24;
        v52 = **(_QWORD **)(a1 + 48);
        v53 = (uint64_t *)v24;
        if (v52)
        {
          *(_QWORD *)(a1 + 48) = v52;
          v53 = *v23;
        }
        sub_20AEC84C8(*(uint64_t **)(a1 + 56), v53);
        ++*(_QWORD *)(a1 + 64);
        v39 = *v29;
      }
      ((void (*)(uint64_t (***)()))v39[3])(v29);
      goto LABEL_123;
    }
    v54 = (uint64_t *)sub_20AEF7F38();
    v55 = atomic_load((unsigned __int8 *)&qword_254638B90);
    if ((v55 & 1) != 0 || !__cxa_guard_acquire(&qword_254638B90))
    {
LABEL_94:
      if (byte_254638C27 < 0)
      {
        sub_20AEC60F4(&v105, (void *)xmmword_254638C10, *((unint64_t *)&xmmword_254638C10 + 1));
      }
      else
      {
        v105 = (timespec)xmmword_254638C10;
        v106 = unk_254638C20;
      }
      sub_20AEC7620(&__dst, (uint64_t)&v105, 1uLL);
      LOBYTE(__rqtp.tv_sec) = 0;
      v104 = 0;
      sub_20AECD798(v54, (__int128 **)&__dst, (uint64_t)&__rqtp, 0);
      if (v104 && v103)
      {
        if (v102)
        {
          if (SHIBYTE(v101) < 0)
            operator delete((void *)v100);
          if (SHIBYTE(v98) < 0)
            operator delete((void *)v97);
        }
        if (v96 && SHIBYTE(v95) < 0)
          operator delete((void *)v94);
      }
      tv_sec = __dst.tv_sec;
      if (__dst.tv_sec)
      {
        v58 = __dst.tv_nsec;
        v59 = (void *)__dst.tv_sec;
        if (__dst.tv_nsec != __dst.tv_sec)
        {
          do
          {
            if (*(char *)(v58 - 1) < 0)
              operator delete(*(void **)(v58 - 24));
            v58 -= 24;
          }
          while (v58 != tv_sec);
          v59 = (void *)__dst.tv_sec;
        }
        __dst.tv_nsec = tv_sec;
        operator delete(v59);
      }
      if (SHIBYTE(v106) < 0)
        operator delete((void *)v105.tv_sec);
LABEL_120:
      v4 = 0;
LABEL_124:
      sub_20AF04A10((uint64_t)&v70);
      return v4;
    }
    v61 = sub_20AEF82AC();
    v62 = (const void **)v61;
    v63 = *((char *)v61 + 23);
    if (v63 >= 0)
      v64 = *((unsigned __int8 *)v61 + 23);
    else
      v64 = *((_QWORD *)v61 + 1);
    v65 = v64 + 1;
    if (v64 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v65 >= 0x17)
    {
      v67 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v65 | 7) != 0x17)
        v67 = v65 | 7;
      v68 = v67 + 1;
      v66 = (__int128 *)operator new(v67 + 1);
      *((_QWORD *)&xmmword_254638C10 + 1) = v64 + 1;
      unk_254638C20 = v68 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638C10 = v66;
    }
    else
    {
      v66 = &xmmword_254638C10;
      unk_254638C20 = 0;
      xmmword_254638C10 = 0uLL;
      byte_254638C27 = v64 + 1;
      if (!v64)
      {
LABEL_143:
        *(_WORD *)((char *)v66 + v64) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638C10, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638B90);
        goto LABEL_94;
      }
    }
    if (v63 >= 0)
      v69 = v62;
    else
      v69 = *v62;
    memmove(v66, v69, v64);
    goto LABEL_143;
  }
  return 0;
}

void sub_20AF166D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,int a50,__int16 a51,char a52,char a53)
{
  if (a2)
  {
    __cxa_guard_abort(&qword_254638B90);
    sub_20AEC01C0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AF167B8(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 56);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AF167D0(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 56);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AF167F8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638BA0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638BA0))
    return qword_254638B98;
  qword_254638B98 = sub_20AECB130();
  __cxa_guard_release(&qword_254638BA0);
  return qword_254638B98;
}

uint64_t sub_20AF16858(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  unsigned __int8 **v4;
  uint64_t v5;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F3AC8, 0);
  if (result)
  {
    v4 = *(unsigned __int8 ***)(a1 + 16);
    v5 = *(_QWORD *)(result + 16);
    if (*v4 == *(unsigned __int8 **)v5)
      return sub_20B216BD0((uint64_t)(v4 + 2), (_QWORD *)(v5 + 16));
    result = sub_20B0BFCC0(*v4, *(unsigned __int8 **)v5);
    if ((_DWORD)result)
      return sub_20B216BD0((uint64_t)(v4 + 2), (_QWORD *)(v5 + 16));
  }
  return result;
}

uint64_t sub_20AF168CC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  __int128 *v19;
  const void *v21[2];
  char v22;

  __cxa_begin_catch(a1);
  v19 = sub_20AEF7F38();
  sub_20AEC0D64(v21, "failed to compare equal");
  sub_20AECD224((std::string::size_type)v19, v21, 0);
  if (v22 < 0)
    operator delete((void *)v21[0]);
  __cxa_end_catch();
  return 0;
}

CFTypeRef sub_20AF16928(uint64_t a1)
{
  __int128 *v2;
  uint64_t v3;
  int v4;
  size_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  char v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  void *__dst[2];
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v2 = sub_20AEF7F38();
  v27 = a1;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_20AEC0BD8(v3);
  v28 = (_QWORD *)v3;
  sub_20B079D44((_QWORD *)(v3 + 16), (uint64_t **)(a1 + 16));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(v3 + 112);
    v8 = *(_QWORD *)(v3 + 72);
    if (v7 < v8)
    {
      *(_QWORD *)(v3 + 112) = v8;
      v7 = v8;
    }
    v9 = *(const void **)(v3 + 64);
    v5 = v7 - (_QWORD)v9;
    if (v7 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v4 & 8) == 0)
    {
      v5 = 0;
      HIBYTE(v26) = 0;
      v6 = __dst;
      goto LABEL_14;
    }
    v9 = *(const void **)(v3 + 40);
    v5 = *(_QWORD *)(v3 + 56) - (_QWORD)v9;
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v6 = (void **)operator new(v10 + 1);
    __dst[1] = (void *)v5;
    v26 = v11 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_13;
  }
  HIBYTE(v26) = v5;
  v6 = __dst;
  if (v5)
LABEL_13:
    memmove(v6, v9, v5);
LABEL_14:
  *((_BYTE *)v6 + v5) = 0;
  v12 = v28;
  if (v28)
  {
    v13 = MEMORY[0x24BEDB7F0];
    v14 = *MEMORY[0x24BEDB7F0];
    *v28 = *MEMORY[0x24BEDB7F0];
    v15 = *(_QWORD *)(v13 + 72);
    *(_QWORD *)((char *)v12 + *(_QWORD *)(v14 - 24)) = *(_QWORD *)(v13 + 64);
    v12[3] = MEMORY[0x24BEDB848] + 16;
    v12[2] = v15;
    if (*((char *)v12 + 111) < 0)
      operator delete((void *)v12[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v12 + 16);
    MEMORY[0x20BD3583C](v12, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)v2, (uint64_t)" ", &v27, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v16 = cf;
  if (cf)
    CFRetain(cf);
  v17 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if ((v22 & 0x80000000) == 0)
        return v16;
      goto LABEL_27;
    }
  }
  if (v22 < 0)
LABEL_27:
    operator delete(__p);
  return v16;
}

void sub_20AF16BC8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __int128 *v23;

  sub_20AEC147C((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  v23 = sub_20AEF7F38();
  sub_20AEC0D64(&__p, "failed to create description");
  sub_20AECD224((std::string::size_type)v23, (const void **)&__p, 0);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20AF16BACLL);
}

uint64_t sub_20AF16C8C(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 56));
}

uint64_t sub_20AF16C98(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 40);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AF16CB0(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 40);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AF16CD8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638BC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638BC0))
    return qword_254638BB8;
  qword_254638BB8 = sub_20AECB130();
  __cxa_guard_release(&qword_254638BC0);
  return qword_254638BB8;
}

uint64_t sub_20AF16D38(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  unsigned __int8 ***v4;
  unsigned __int8 ***v5;
  uint64_t v6;
  unsigned __int8 ***v7;
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F3BD8, 0);
  if (result)
  {
    v6 = a1 + 16;
    v4 = *(unsigned __int8 ****)(a1 + 16);
    v5 = *(unsigned __int8 ****)(v6 + 8);
    v7 = *(unsigned __int8 ****)(result + 16);
    if ((char *)v5 - (char *)v4 == *(_QWORD *)(result + 24) - (_QWORD)v7)
    {
      if (v4 == v5)
      {
        return 1;
      }
      else
      {
        while (1)
        {
          v8 = *v4;
          v9 = *v7;
          v10 = **v4;
          v11 = **v7;
          if (v10 != v11)
          {
            result = sub_20B0BFCC0(v10, v11);
            if (!(_DWORD)result)
              break;
          }
          result = sub_20B216BD0((uint64_t)(v8 + 2), v9 + 2);
          if (!(_DWORD)result)
            break;
          v4 += 5;
          v7 += 5;
          if (v4 == v5)
            return 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFTypeRef sub_20AF16E08(uint64_t a1)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t **v6;
  void **v7;
  uint64_t v8;
  int v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *v26;
  char v27;
  CFTypeRef cf;
  std::__shared_weak_count *v29;
  void *__dst[2];
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *__p[2];
  unsigned __int8 v35;
  _DWORD v36[6];
  int v37;
  _QWORD **v38;
  const char *v39;
  _DWORD *v40;
  const char *v41;
  const char *v42;
  _QWORD *v43;

  v2 = sub_20AF08378();
  v32 = a1;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_20AEC0BD8(v3);
  v33 = (_QWORD *)v3;
  v37 = 0;
  if ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) <= 39)
  {
    sub_20AEF9DBC(v36, "{}");
    goto LABEL_8;
  }
  sub_20AED5B5C(v36, "{");
  v4 = *(uint64_t ***)(a1 + 16);
  sub_20AF17B58((uint64_t)v36, v4);
  v5 = *(uint64_t ***)(a1 + 24);
  v6 = v4 + 5;
  if (v4 + 5 != v5)
  {
    while (1)
    {
      v38 = (_QWORD **)v36;
      v39 = ",";
      v40 = v36;
      v41 = ",";
      v42 = ",";
      if (v37 == -1)
        break;
      v43 = &v38;
      ((void (*)(_QWORD **, _DWORD *))off_24C3F3CC8[v37])(&v43, v36);
      sub_20AF17B58((uint64_t)v36, v6);
      v6 += 5;
      if (v6 == v5)
        goto LABEL_6;
    }
LABEL_50:
    sub_20AECFAB8();
  }
LABEL_6:
  v38 = (_QWORD **)v36;
  v39 = "}";
  v40 = v36;
  v41 = "}";
  v42 = "}";
  if (v37 == -1)
    goto LABEL_50;
  v43 = &v38;
  ((void (*)(_QWORD **, _DWORD *))off_24C3F3CC8[v37])(&v43, v36);
LABEL_8:
  if (v37 == -1)
    sub_20AECFAB8();
  v38 = &v43;
  ((void (*)(void **__return_ptr, _QWORD ***, _DWORD *))off_24C3F3D10[v37])(__p, &v38, v36);
  if (v37 != -1)
    ((void (*)(_QWORD ***, _DWORD *))off_24C3F3CE0[v37])(&v38, v36);
  if ((v35 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v35 & 0x80u) == 0)
    v8 = v35;
  else
    v8 = (uint64_t)__p[1];
  sub_20AEC01D0((_QWORD *)(v3 + 16), (uint64_t)v7, v8);
  if (((char)v35 & 0x80000000) == 0)
  {
    v9 = *(_DWORD *)(v3 + 120);
    if ((v9 & 0x10) == 0)
      goto LABEL_19;
LABEL_22:
    v12 = *(_QWORD *)(v3 + 112);
    v13 = *(_QWORD *)(v3 + 72);
    if (v12 < v13)
    {
      *(_QWORD *)(v3 + 112) = v13;
      v12 = v13;
    }
    v14 = *(const void **)(v3 + 64);
    v10 = v12 - (_QWORD)v14;
    if (v12 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_47;
    goto LABEL_25;
  }
  operator delete(__p[0]);
  v9 = *(_DWORD *)(v3 + 120);
  if ((v9 & 0x10) != 0)
    goto LABEL_22;
LABEL_19:
  if ((v9 & 8) == 0)
  {
    v10 = 0;
    HIBYTE(v31) = 0;
    v11 = __dst;
    goto LABEL_32;
  }
  v14 = *(const void **)(v3 + 40);
  v10 = *(_QWORD *)(v3 + 56) - (_QWORD)v14;
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_47:
    sub_20AEC0138();
LABEL_25:
  if (v10 >= 0x17)
  {
    v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v15 = v10 | 7;
    v16 = v15 + 1;
    v11 = (void **)operator new(v15 + 1);
    __dst[1] = (void *)v10;
    v31 = v16 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_31;
  }
  HIBYTE(v31) = v10;
  v11 = __dst;
  if (v10)
LABEL_31:
    memmove(v11, v14, v10);
LABEL_32:
  *((_BYTE *)v11 + v10) = 0;
  v17 = v33;
  if (v33)
  {
    v18 = MEMORY[0x24BEDB7F0];
    v19 = *MEMORY[0x24BEDB7F0];
    *v33 = *MEMORY[0x24BEDB7F0];
    v20 = *(_QWORD *)(v18 + 72);
    *(_QWORD *)((char *)v17 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(v18 + 64);
    v17[3] = MEMORY[0x24BEDB848] + 16;
    v17[2] = v20;
    if (*((char *)v17 + 111) < 0)
      operator delete((void *)v17[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v17 + 16);
    MEMORY[0x20BD3583C](v17, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)v2, (uint64_t)" ", &v32, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v31) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&v26, (CFStringRef *)&cf);
  v21 = cf;
  if (cf)
    CFRetain(cf);
  v22 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if ((v27 & 0x80000000) == 0)
        return v21;
      goto LABEL_45;
    }
  }
  if (v27 < 0)
LABEL_45:
    operator delete(v26);
  return v21;
}

void sub_20AF17244(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  __int128 *v38;

  sub_20AEC147C((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  v38 = sub_20AF08378();
  sub_20AEC0D64(&a32, "failed to create description");
  sub_20AECD224((std::string::size_type)v38, (const void **)&a32, 0);
  if (a37 < 0)
    operator delete(a32);
  __cxa_end_catch();
  JUMPOUT(0x20AF17210);
}

uint64_t sub_20AF1733C(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 40));
}

uint64_t sub_20AF17348(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void sub_20AF173A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F3C38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20AF173B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F3C38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AF173E8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

_QWORD *sub_20AF17488(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v6 = (std::__shared_weak_count *)operator new(0x50uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F3C88;
  sub_20AF17658(&v6[1], a2);
  v8 = *(_QWORD *)(a3 + 8);
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *a1 = v6 + 1;
  a1[1] = v6;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  a1[2] = &off_24C411E78;
  a1[3] = v8;
  a1[4] = v9;
  if (v9)
  {
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_20AF175A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20AF175C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F3C88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20AF175D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F3C88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AF17600(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 72) || (*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return;
LABEL_6:
    operator delete(*(void **)(a1 + 24));
    return;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_6;
}

_BYTE *sub_20AF17658(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;
  char *v5;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    __dst[24] = 0;
    v5 = __dst + 24;
    __dst[48] = 0;
    if (!*((_BYTE *)a2 + 48))
      return __dst;
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    __dst[24] = 0;
    v5 = __dst + 24;
    __dst[48] = 0;
    if (!*((_BYTE *)a2 + 48))
      return __dst;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_20AEC60F4(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v7;
  }
  __dst[48] = 1;
  return __dst;
}

void sub_20AF17718(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 48) && *(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20AF1774C(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a1)
  {
    sub_20AF1774C(*a1);
    sub_20AF1774C(a1[1]);
    v2 = a1[9];
    a1[9] = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    v3 = (unsigned int *)a1[7];
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v7 = v3 + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    v10 = (std::__shared_weak_count *)a1[5];
    if (!v10)
      goto LABEL_16;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      operator delete(a1);
    }
    else
    {
LABEL_16:
      operator delete(a1);
    }
  }
}

void sub_20AF17848()
{
  unsigned __int8 v0;
  __int128 *v1;
  const void **v2;
  int v3;
  size_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const void *v10;

  v0 = atomic_load((unsigned __int8 *)&qword_254638BB0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638BB0))
  {
    v1 = sub_20AEF7F38();
    v2 = (const void **)v1;
    v3 = *((char *)v1 + 23);
    if (v3 >= 0)
      v4 = *((unsigned __int8 *)v1 + 23);
    else
      v4 = *((_QWORD *)v1 + 1);
    v5 = v4 + 6;
    if (v4 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v5 >= 0x17)
    {
      v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v7 = v5 | 7;
      v8 = v7 + 1;
      v9 = (char *)operator new(v7 + 1);
      qword_254638C48 = v4 + 6;
      unk_254638C50 = v8 | 0x8000000000000000;
      qword_254638C40 = (uint64_t)v9;
      *(_DWORD *)v9 = 1936617315;
      *((_WORD *)v9 + 2) = 8308;
      v6 = v9 + 6;
    }
    else
    {
      qword_254638C48 = 0;
      unk_254638C50 = 0;
      qword_254638C40 = 0x2074736E6F63;
      byte_254638C57 = v4 + 6;
      v6 = (char *)&qword_254638C40 + 6;
      if (!v4)
      {
LABEL_18:
        v6[v4] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254638C40, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638BB0);
        return;
      }
    }
    if (v3 >= 0)
      v10 = v2;
    else
      v10 = *v2;
    memmove(v6, v10, v4);
    goto LABEL_18;
  }
}

void sub_20AF179B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638BB0);
  _Unwind_Resume(a1);
}

void sub_20AF179D0()
{
  unsigned __int8 v0;
  __int128 *v1;
  const void **v2;
  int v3;
  size_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const void *v10;

  v0 = atomic_load((unsigned __int8 *)&qword_254638BD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638BD8))
  {
    v1 = sub_20AF08378();
    v2 = (const void **)v1;
    v3 = *((char *)v1 + 23);
    if (v3 >= 0)
      v4 = *((unsigned __int8 *)v1 + 23);
    else
      v4 = *((_QWORD *)v1 + 1);
    v5 = v4 + 6;
    if (v4 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v5 >= 0x17)
    {
      v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v7 = v5 | 7;
      v8 = v7 + 1;
      v9 = (char *)operator new(v7 + 1);
      qword_254638C90 = v4 + 6;
      unk_254638C98 = v8 | 0x8000000000000000;
      qword_254638C88 = (uint64_t)v9;
      *(_DWORD *)v9 = 1936617315;
      *((_WORD *)v9 + 2) = 8308;
      v6 = v9 + 6;
    }
    else
    {
      qword_254638C90 = 0;
      unk_254638C98 = 0;
      qword_254638C88 = 0x2074736E6F63;
      byte_254638C9F = v4 + 6;
      v6 = (char *)&qword_254638C88 + 6;
      if (!v4)
      {
LABEL_18:
        v6[v4] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254638C88, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638BD8);
        return;
      }
    }
    if (v3 >= 0)
      v10 = v2;
    else
      v10 = *v2;
    memmove(v6, v10, v4);
    goto LABEL_18;
  }
}

void sub_20AF17B40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638BD8);
  _Unwind_Resume(a1);
}

void sub_20AF17B58(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  int v5;
  size_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__dst[2];
  unint64_t v19;
  _QWORD v20[5];
  _QWORD *v21;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20AEC0BD8(v4);
  v20[0] = v4;
  sub_20B079D44((_QWORD *)(v4 + 16), a2);
  v5 = *(_DWORD *)(v4 + 120);
  if ((v5 & 0x10) != 0)
  {
    v8 = *(_QWORD *)(v4 + 112);
    v9 = *(_QWORD *)(v4 + 72);
    if (v8 < v9)
    {
      *(_QWORD *)(v4 + 112) = v9;
      v8 = v9;
    }
    v10 = *(const void **)(v4 + 64);
    v6 = v8 - (_QWORD)v10;
    if (v8 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v5 & 8) == 0)
    {
      v6 = 0;
      HIBYTE(v19) = 0;
      v7 = __dst;
      goto LABEL_14;
    }
    v10 = *(const void **)(v4 + 40);
    v6 = *(_QWORD *)(v4 + 56) - (_QWORD)v10;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    v7 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v6;
    v19 = v12 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_13;
  }
  HIBYTE(v19) = v6;
  v7 = __dst;
  if (v6)
LABEL_13:
    memmove(v7, v10, v6);
LABEL_14:
  *((_BYTE *)v7 + v6) = 0;
  v13 = v20[0];
  if (v20[0])
  {
    v14 = MEMORY[0x24BEDB7F0];
    v15 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v20[0] = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(v14 + 72);
    *(_QWORD *)(v13 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(v14 + 64);
    *(_QWORD *)(v13 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v13 + 16) = v16;
    if (*(char *)(v13 + 111) < 0)
      operator delete(*(void **)(v13 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v13 + 128);
    MEMORY[0x20BD3583C](v13, 0x10B2C40EED050F3);
  }
  v20[0] = a1;
  v20[1] = __dst;
  v20[2] = a1;
  v20[3] = __dst;
  v20[4] = __dst;
  v17 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v17 == -1)
    sub_20AECFAB8();
  v21 = v20;
  ((void (*)(_QWORD **, uint64_t))off_24C3F3CF8[v17])(&v21, a1);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
}

void sub_20AF17DA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20AF17DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20AF17DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20AF17DFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;

  if (*(_BYTE *)(a1 + 120))
  {
    v2 = *(unsigned int *)(a1 + 112);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C3F3E20[v2])(&v5, a1 + 88);
    *(_DWORD *)(a1 + 112) = -1;
  }
  if (*(_BYTE *)(a1 + 64))
  {
    v3 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C3F3E30[v3])(&v6, a1 + 24);
    *(_DWORD *)(a1 + 56) = -1;
  }
  return a1;
}

uint64_t sub_20AF17E94(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v1 = result;
  if (*(_BYTE *)(result + 112))
  {
    v2 = *(unsigned int *)(result + 104);
    if ((_DWORD)v2 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_24C3F3E20[v2])(&v4, result + 80);
    *(_DWORD *)(v1 + 104) = -1;
  }
  if (*(_BYTE *)(v1 + 56))
  {
    v3 = *(unsigned int *)(v1 + 48);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_24C3F3E30[v3])(&v5, v1 + 16);
    *(_DWORD *)(v1 + 48) = -1;
  }
  return result;
}

uint64_t sub_20AF17F28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;

  if (*(_BYTE *)(a1 + 120))
  {
    v2 = *(unsigned int *)(a1 + 112);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C3F3E20[v2])(&v5, a1 + 88);
    *(_DWORD *)(a1 + 112) = -1;
  }
  if (*(_BYTE *)(a1 + 64))
  {
    v3 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C3F3E30[v3])(&v6, a1 + 24);
    *(_DWORD *)(a1 + 56) = -1;
  }
  return MEMORY[0x20BD3583C](a1, 0x1093C40E93C9851);
}

uint64_t sub_20AF17FD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;

  if (*(_BYTE *)(a1 + 112))
  {
    v2 = *(unsigned int *)(a1 + 104);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C3F3E20[v2])(&v5, a1 + 80);
    *(_DWORD *)(a1 + 104) = -1;
  }
  if (*(_BYTE *)(a1 + 56))
  {
    v3 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C3F3E30[v3])(&v6, a1 + 16);
    *(_DWORD *)(a1 + 48) = -1;
  }
  return MEMORY[0x20BD3583C](a1 - 8, 0x1093C40E93C9851);
}

uint64_t VZLogMessageFilterGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638CA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638CA8))
    return qword_254638CA0;
  qword_254638CA0 = sub_20AECB130();
  __cxa_guard_release(&qword_254638CA8);
  return qword_254638CA0;
}

_QWORD *VZLogMessageFilterCreate()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v4;
  void **v5;
  void **v6;
  void *v7;
  void *v8;
  void **v9;
  uint64_t v10;
  _QWORD v11[2];
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v0 = operator new(0x88uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    v1 = v0;
    *(_OWORD *)v0 = 0u;
    v0[16] = 0;
    *((_OWORD *)v0 + 6) = 0u;
    *((_OWORD *)v0 + 7) = 0u;
    *((_OWORD *)v0 + 4) = 0u;
    *((_OWORD *)v0 + 5) = 0u;
    *((_OWORD *)v0 + 2) = 0u;
    *((_OWORD *)v0 + 3) = 0u;
    *((_OWORD *)v0 + 1) = 0u;
    v2 = (uint64_t)(v0 + 2);
    *v0 = off_24C3F2180;
    bzero(v11, 0x300uLL);
    v11[0] = &off_24C411BF8;
    sub_20B07A5FC(v2, (uint64_t)v11);
    v11[0] = &off_24C411BF8;
    sub_20B07AE6C((uint64_t)&v12);
    *((_DWORD *)v1 + 32) = 1;
    *v1 = off_24C3F3D38;
    v1[1] = &unk_24C3F3D88;
  }
  else
  {
    v4 = (uint64_t *)sub_20AF04E74();
    v8 = 0;
    v9 = 0;
    v10 = 0;
    LOBYTE(v11[0]) = 0;
    v21 = 0;
    sub_20AECD798(v4, (__int128 **)&v8, (uint64_t)v11, 0);
    if (v21 && v20)
    {
      if (v19)
      {
        if (v18 < 0)
          operator delete(__p);
        if (v16 < 0)
          operator delete(v15);
      }
      if (v14 && v13 < 0)
        operator delete(v12);
    }
    v5 = (void **)v8;
    if (v8)
    {
      v6 = v9;
      v7 = v8;
      if (v9 != v8)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = v8;
      }
      v9 = v5;
      operator delete(v7);
    }
    return 0;
  }
  return v1;
}

void sub_20AF182E0(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20AF182ECLL);
  sub_20AEC01C0(a1);
}

void VZLogMessageFilterRequirePackageIDWildcard(uint64_t a1, char *a2)
{
  void *__p[2];
  char v5;
  char v6;

  if (!sub_20AF1839C((uint64_t)"VZLogMessageFilterRequirePackageIDWildcard", a1))
  {
    sub_20AF18744((uint64_t)__p, a2);
    sub_20B07A9A8(a1 + 16, (uint64_t)__p);
    if (v6)
    {
      if (v5 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_20AF18378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20AF1839C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  __int128 *v7;
  const void **v8;
  int v9;
  size_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  void *v16[2];
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  void *v23[2];
  uint64_t v24;
  uint64_t v25;
  void *v26[2];
  uint64_t v27;
  char v28;
  char v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  void *__p[2];
  uint64_t v38;
  char v39;
  char v40;
  char v41;

  if (a2)
    return a2 == 0;
  v4 = atomic_load((unsigned __int8 *)&qword_254638CB0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254638CB0))
  {
    v7 = sub_20AF04E74();
    v8 = (const void **)v7;
    v9 = *((char *)v7 + 23);
    if (v9 >= 0)
      v10 = *((unsigned __int8 *)v7 + 23);
    else
      v10 = *((_QWORD *)v7 + 1);
    v11 = v10 + 1;
    if (v10 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v11 >= 0x17)
    {
      v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v13 = v11 | 7;
      v14 = v13 + 1;
      v12 = (__int128 *)operator new(v13 + 1);
      *((_QWORD *)&xmmword_254638CB8 + 1) = v10 + 1;
      unk_254638CC8 = v14 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638CB8 = v12;
    }
    else
    {
      unk_254638CC8 = 0;
      xmmword_254638CB8 = 0uLL;
      v12 = &xmmword_254638CB8;
      byte_254638CCF = v10 + 1;
      if (!v10)
      {
LABEL_53:
        *(_WORD *)((char *)v12 + v10) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638CB8, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638CB0);
        goto LABEL_3;
      }
    }
    if (v9 >= 0)
      v15 = v8;
    else
      v15 = *v8;
    memmove(v12, v15, v10);
    goto LABEL_53;
  }
LABEL_3:
  if (byte_254638CCF < 0)
  {
    sub_20AEC60F4(v16, (void *)xmmword_254638CB8, *((unint64_t *)&xmmword_254638CB8 + 1));
  }
  else
  {
    *(_OWORD *)v16 = xmmword_254638CB8;
    v17 = unk_254638CC8;
  }
  v18 = 1;
  sub_20AECCECC(a1, (uint64_t)v16, (uint64_t)&v19);
  v30 = v19;
  LOBYTE(v31) = 0;
  v40 = 0;
  if (v29)
  {
    v33 = 0;
    if (v22)
    {
      v31 = v20;
      v32 = v21;
      v21 = 0;
      v20 = 0uLL;
      v33 = 1;
    }
    LOBYTE(v34) = 0;
    v39 = 0;
    if (v28)
    {
      v35 = v24;
      v34 = *(_OWORD *)v23;
      v23[0] = 0;
      v23[1] = 0;
      v36 = v25;
      *(_OWORD *)__p = *(_OWORD *)v26;
      v38 = v27;
      v24 = 0;
      v26[0] = 0;
      v26[1] = 0;
      v27 = 0;
      v39 = 1;
    }
    v40 = 1;
  }
  v41 = 0;
  v5 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v30);
  if (!v41 && v40)
  {
    if (v39)
    {
      if (SHIBYTE(v38) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v35) < 0)
        operator delete((void *)v34);
    }
    if (v33 && SHIBYTE(v32) < 0)
      operator delete((void *)v31);
  }
  if (v29)
  {
    if (v28)
    {
      if (SHIBYTE(v27) < 0)
        operator delete(v26[0]);
      if (SHIBYTE(v24) < 0)
        operator delete(v23[0]);
    }
    if (v22 && SHIBYTE(v21) < 0)
      operator delete((void *)v20);
  }
  if (v18 && SHIBYTE(v17) < 0)
    operator delete(v16[0]);
  return a2 == 0;
}

void sub_20AF18708(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638CB0);
  _Unwind_Resume(a1);
}

void sub_20AF18720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_20AF18744(uint64_t a1, char *__s)
{
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 __dst;
  unint64_t v11;

  if (!__s)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return result;
  }
  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v11 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v11) = v4;
    p_dst = &__dst;
    if (!v4)
      goto LABEL_11;
  }
  memcpy(p_dst, __s, v5);
LABEL_11:
  *((_BYTE *)p_dst + v5) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v11;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

void sub_20AF18838(void *a1)
{
  _BYTE *v1;
  uint64_t *v2;

  __cxa_begin_catch(a1);
  v2 = (uint64_t *)sub_20AEE8B50();
  sub_20AECDF74((std::string::size_type)"char", v2, 0);
  *v1 = 0;
  v1[24] = 0;
  __cxa_end_catch();
  JUMPOUT(0x20AF187A0);
}

BOOL VZLogMessageFilterRequireDataTypeIDExact(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;

  result = sub_20AF1839C((uint64_t)"VZLogMessageFilterRequireDataTypeIDExact", a1);
  if (!result)
  {
    if (a2 == -1)
    {
      if (*(_BYTE *)(a1 + 80))
        *(_BYTE *)(a1 + 80) = 0;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 80))
        *(_BYTE *)(a1 + 80) = 1;
      *(_QWORD *)(a1 + 72) = a2 | ((unint64_t)(a2 != -1) << 32);
    }
  }
  return result;
}

void VZLogMessageFilterRequireSubloggerWildcard(uint64_t a1, char *a2)
{
  void *__p[2];
  char v5;
  char v6;

  if (!sub_20AF1839C((uint64_t)"VZLogMessageFilterRequireSubloggerWildcard", a1))
  {
    sub_20AF18744((uint64_t)__p, a2);
    sub_20B07AC20(a1 + 16, (uint64_t)__p);
    if (v6)
    {
      if (v5 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_20AF18968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AF1898C(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 128);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AF189A4(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 128);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AF189CC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638CA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638CA8))
    return qword_254638CA0;
  qword_254638CA0 = sub_20AECB130();
  __cxa_guard_release(&qword_254638CA8);
  return qword_254638CA0;
}

uint64_t sub_20AF18A2C(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  BOOL v6;
  char v7;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F3DD0, 0);
  if (!result)
    return result;
  v4 = result;
  v5 = *(unsigned __int8 *)(result + 64);
  if (*(_BYTE *)(a1 + 64))
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if ((*(_BYTE *)(a1 + 64) != 0) != (v5 != 0))
      return 0;
  }
  else if (!sub_20B210F74(a1 + 16, result + 16))
  {
    return 0;
  }
  v7 = (*(_BYTE *)(a1 + 80) != 0) ^ (*(_BYTE *)(v4 + 80) != 0);
  if (!*(_BYTE *)(a1 + 80)
    || !*(_BYTE *)(v4 + 80)
    || (v7 = (*(_BYTE *)(a1 + 76) != 0) ^ (*(_BYTE *)(v4 + 76) != 0), !*(_BYTE *)(a1 + 76))
    || !*(_BYTE *)(v4 + 76))
  {
    if ((v7 & 1) == 0)
      goto LABEL_19;
    return 0;
  }
  if (*(_DWORD *)(a1 + 72) != *(_DWORD *)(v4 + 72))
    return 0;
LABEL_19:
  result = (*(_BYTE *)(a1 + 120) != 0) == (*(_BYTE *)(v4 + 120) != 0);
  if (*(_BYTE *)(a1 + 120))
  {
    if (*(_BYTE *)(v4 + 120))
      return sub_20B20BF3C((unsigned __int8 *)(a1 + 88), (unsigned __int8 *)(v4 + 88));
  }
  return result;
}

void sub_20AF18B54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __int128 *v15;

  __cxa_begin_catch(a1);
  v15 = sub_20AF04E74();
  sub_20AEC0D64(&__p, "failed to compare equal");
  sub_20AECD224((std::string::size_type)v15, (const void **)&__p, 0);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20AF18B08);
}

CFTypeRef sub_20AF18BA0(_BYTE *a1)
{
  __int128 *v2;
  uint64_t v3;
  int v4;
  size_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  char v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  void *__dst[2];
  unint64_t v26;
  _BYTE *v27;
  _QWORD *v28;

  v2 = sub_20AF04E74();
  v27 = a1;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_20AEC0BD8(v3);
  v28 = (_QWORD *)v3;
  sub_20AEC01D0((_QWORD *)(v3 + 16), (uint64_t)"{", 1);
  sub_20AEC01D0((_QWORD *)(v3 + 16), (uint64_t)"package_id", 10);
  sub_20AEC01D0((_QWORD *)(v3 + 16), (uint64_t)" = ", 3);
  if (a1[64])
    sub_20B21131C((_QWORD *)(v3 + 16), (uint64_t)(a1 + 16));
  else
    sub_20AEC01D0((_QWORD *)(v3 + 16), (uint64_t)"nullopt", 7);
  sub_20AEC01D0((_QWORD *)(v3 + 16), (uint64_t)", ", 2);
  sub_20AEC01D0((_QWORD *)(v3 + 16), (uint64_t)"data_type_id", 12);
  sub_20AEC01D0((_QWORD *)(v3 + 16), (uint64_t)" = ", 3);
  if (a1[80])
    sub_20AF19054((_QWORD *)(v3 + 16), (uint64_t)(a1 + 72));
  else
    sub_20AEC01D0((_QWORD *)(v3 + 16), (uint64_t)"nullopt", 7);
  sub_20AEC01D0((_QWORD *)(v3 + 16), (uint64_t)", ", 2);
  sub_20AEC01D0((_QWORD *)(v3 + 16), (uint64_t)"sublogger_name", 14);
  sub_20AEC01D0((_QWORD *)(v3 + 16), (uint64_t)" = ", 3);
  if (a1[120])
    sub_20B20C3B4((_QWORD *)(v3 + 16), (uint64_t)(a1 + 88));
  else
    sub_20AEC01D0((_QWORD *)(v3 + 16), (uint64_t)"nullopt", 7);
  sub_20AEC01D0((_QWORD *)(v3 + 16), (uint64_t)"}", 1);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(v3 + 112);
    v8 = *(_QWORD *)(v3 + 72);
    if (v7 < v8)
    {
      *(_QWORD *)(v3 + 112) = v8;
      v7 = v8;
    }
    v9 = *(const void **)(v3 + 64);
    v5 = v7 - (_QWORD)v9;
    if (v7 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_38;
  }
  else
  {
    if ((v4 & 8) == 0)
    {
      v5 = 0;
      HIBYTE(v26) = 0;
      v6 = __dst;
      goto LABEL_23;
    }
    v9 = *(const void **)(v3 + 40);
    v5 = *(_QWORD *)(v3 + 56) - (_QWORD)v9;
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_38:
      sub_20AEC0138();
  }
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v6 = (void **)operator new(v10 + 1);
    __dst[1] = (void *)v5;
    v26 = v11 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_22;
  }
  HIBYTE(v26) = v5;
  v6 = __dst;
  if (v5)
LABEL_22:
    memmove(v6, v9, v5);
LABEL_23:
  *((_BYTE *)v6 + v5) = 0;
  v12 = v28;
  if (v28)
  {
    v13 = MEMORY[0x24BEDB7F0];
    v14 = *MEMORY[0x24BEDB7F0];
    *v28 = *MEMORY[0x24BEDB7F0];
    v15 = *(_QWORD *)(v13 + 72);
    *(_QWORD *)((char *)v12 + *(_QWORD *)(v14 - 24)) = *(_QWORD *)(v13 + 64);
    v12[3] = MEMORY[0x24BEDB848] + 16;
    v12[2] = v15;
    if (*((char *)v12 + 111) < 0)
      operator delete((void *)v12[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v12 + 16);
    MEMORY[0x20BD3583C](v12, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)v2, (uint64_t)" ", &v27, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v16 = cf;
  if (cf)
    CFRetain(cf);
  v17 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if ((v22 & 0x80000000) == 0)
        return v16;
      goto LABEL_36;
    }
  }
  if (v22 < 0)
LABEL_36:
    operator delete(__p);
  return v16;
}

void sub_20AF18F84(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __int128 *v23;

  sub_20AEC147C((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  v23 = sub_20AF04E74();
  sub_20AEC0D64(&__p, "failed to create description");
  sub_20AECD224((std::string::size_type)v23, (const void **)&__p, 0);
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20AF18F68);
}

uint64_t sub_20AF19048(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 128));
}

_QWORD *sub_20AF19054(_QWORD *a1, uint64_t a2)
{
  std::string *v3;
  std::string::size_type size;
  std::string v6;

  if (*(_BYTE *)(a2 + 4))
  {
    std::to_string(&v6, *(_DWORD *)a2);
    if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v3 = &v6;
    else
      v3 = (std::string *)v6.__r_.__value_.__r.__words[0];
    if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v6.__r_.__value_.__r.__words[2]);
    else
      size = v6.__r_.__value_.__l.__size_;
    sub_20AEC01D0(a1, (uint64_t)v3, size);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
    return a1;
  }
  else
  {
    sub_20AEC01D0(a1, (uint64_t)"nullopt", 7);
    return a1;
  }
}

void sub_20AF19100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AF1911C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  sub_20AF1E164(*(char **)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20AF19194(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  sub_20AF1E164(*(char **)(a1 + 112));
  std::mutex::~mutex((std::mutex *)(a1 + 40));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_20AF19204(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  sub_20AF1E164(*(char **)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AF1927C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  sub_20AF1E164(*(char **)(a1 + 112));
  std::mutex::~mutex((std::mutex *)(a1 + 40));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t *sub_20AF192F4(uint64_t a1, const char *a2)
{
  const char *v3;
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::mutex *v9;
  uint64_t **v10;
  uint64_t **v11;
  __int128 *v12;
  size_t v13;
  uint64_t **v14;
  int v15;
  uint64_t *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  uint64_t *v21;
  size_t v22;
  size_t v23;
  int v24;
  uint64_t *v25;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  uint64_t *v30;
  uint64_t **v31;
  __int128 *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  unint64_t v39;
  size_t v40;
  int v41;
  int v42;
  _QWORD *v43;
  _BYTE *v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t *v47;
  __int128 *v48;
  __int128 *v49;
  __int128 *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  uint64_t (**v54)();
  __int128 v55;
  __int128 v56;
  __int128 __dst;
  int64_t v58;
  char v59[16];
  void *v60;
  char v61;
  char v62;
  void *v63;
  char v64;
  void *__p;
  char v66;
  char v67;
  char v68;
  char v69;
  __int128 *v70;
  __int128 *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v3 = a2;
  else
    v3 = "";
  v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v58 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v58) = v4;
    p_dst = &__dst;
    if (!v4)
      goto LABEL_12;
  }
  memcpy(p_dst, v3, v5);
LABEL_12:
  *((_BYTE *)p_dst + v5) = 0;
  v9 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  v10 = (uint64_t **)(a1 + 120);
  v11 = *(uint64_t ***)(a1 + 120);
  if (!v11)
    goto LABEL_51;
  if (v58 >= 0)
    v12 = &__dst;
  else
    v12 = (__int128 *)__dst;
  if (v58 >= 0)
    v13 = HIBYTE(v58);
  else
    v13 = *((_QWORD *)&__dst + 1);
  v14 = (uint64_t **)(a1 + 120);
  do
  {
    while (1)
    {
      v15 = *((char *)v11 + 55);
      v16 = v15 >= 0 ? (uint64_t *)(v11 + 4) : v11[4];
      v17 = v15 >= 0 ? *((unsigned __int8 *)v11 + 55) : (size_t)v11[5];
      v18 = v13 >= v17 ? v17 : v13;
      v19 = memcmp(v16, v12, v18);
      if (v19)
        break;
      if (v17 >= v13)
        goto LABEL_34;
LABEL_20:
      v11 = (uint64_t **)v11[1];
      if (!v11)
        goto LABEL_35;
    }
    if (v19 < 0)
      goto LABEL_20;
LABEL_34:
    v14 = v11;
    v11 = (uint64_t **)*v11;
  }
  while (v11);
LABEL_35:
  if (v14 != v10)
  {
    v20 = *((char *)v14 + 55);
    if (v20 >= 0)
      v21 = (uint64_t *)(v14 + 4);
    else
      v21 = v14[4];
    if (v20 >= 0)
      v22 = *((unsigned __int8 *)v14 + 55);
    else
      v22 = (size_t)v14[5];
    if (v22 >= v13)
      v23 = v13;
    else
      v23 = v22;
    v24 = memcmp(v12, v21, v23);
    if (v24)
    {
      if ((v24 & 0x80000000) == 0)
        goto LABEL_47;
    }
    else if (v13 >= v22)
    {
LABEL_47:
      v25 = v14[7];
      std::mutex::unlock(v9);
      if (SHIBYTE(v58) < 0)
        goto LABEL_48;
      return v25;
    }
  }
LABEL_51:
  sub_20B07D12C((uint64_t *)(a1 + 16), (uint64_t *)&__dst, &v54);
  v27 = operator new(0x38uLL, MEMORY[0x24BEDB6B8]);
  if (!v27)
  {
    sub_20AF1E1D4();
    v45 = atomic_load((unsigned __int8 *)&qword_254638CF8);
    if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_254638CF8))
    {
      sub_20AF1E38C();
      if (byte_254638E37 < 0)
      {
        sub_20AEC60F4(&xmmword_254638DF0, (void *)xmmword_254638E20, *((unint64_t *)&xmmword_254638E20 + 1));
      }
      else
      {
        xmmword_254638DF0 = xmmword_254638E20;
        unk_254638E00 = unk_254638E30;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638DF0, &dword_20AEBB000);
      __cxa_guard_release(&qword_254638CF8);
    }
    if (byte_254638E07 < 0)
    {
      sub_20AEC60F4(&v72, (void *)xmmword_254638DF0, *((unint64_t *)&xmmword_254638DF0 + 1));
    }
    else
    {
      v72 = xmmword_254638DF0;
      v73 = unk_254638E00;
    }
    sub_20AEC7620(&v70, (uint64_t)&v72, 1uLL);
    v59[0] = 0;
    v69 = 0;
    sub_20AECD798((uint64_t *)&xmmword_254638DA8, &v70, (uint64_t)v59, 0);
    if (v69 && v68)
    {
      if (v67)
      {
        if (v66 < 0)
          operator delete(__p);
        if (v64 < 0)
          operator delete(v63);
      }
      if (v62 && v61 < 0)
        operator delete(v60);
    }
    v48 = v70;
    if (v70)
    {
      v49 = v71;
      v50 = v70;
      if (v71 != v70)
      {
        do
        {
          if (*((char *)v49 - 1) < 0)
            operator delete(*((void **)v49 - 3));
          v49 = (__int128 *)((char *)v49 - 24);
        }
        while (v49 != v48);
        v50 = v70;
      }
      v71 = v48;
      operator delete(v50);
    }
    if (SHIBYTE(v73) < 0)
    {
      operator delete((void *)v72);
      v51 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
      v54 = &off_24C40B528;
      if (!*((_QWORD *)&v56 + 1))
        goto LABEL_117;
    }
    else
    {
      v51 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
      v54 = &off_24C40B528;
      if (!*((_QWORD *)&v56 + 1))
        goto LABEL_117;
    }
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
      v25 = 0;
      std::mutex::unlock(v9);
      if ((SHIBYTE(v58) & 0x80000000) == 0)
        return v25;
      goto LABEL_48;
    }
LABEL_117:
    v25 = 0;
    std::mutex::unlock(v9);
    if ((SHIBYTE(v58) & 0x80000000) == 0)
      return v25;
    goto LABEL_48;
  }
  v28 = v27;
  v29 = v56;
  v27[1] = v55;
  v27[2] = v29;
  *((_DWORD *)v27 + 12) = 1;
  *(_QWORD *)v27 = &off_24C3F3F48;
  *((_QWORD *)v27 + 1) = &unk_24C3F3F98;
  v30 = *v10;
  v31 = (uint64_t **)(a1 + 120);
  if (!*v10)
  {
LABEL_79:
    v43 = operator new(0x40uLL);
    v44 = v43 + 4;
    if (SHIBYTE(v58) < 0)
    {
      sub_20AEC60F4(v44, (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      *(_OWORD *)v44 = __dst;
      v43[6] = v58;
    }
    v43[7] = v28;
    *v43 = 0;
    v43[1] = 0;
    v43[2] = v31;
    *v10 = v43;
    v46 = **(_QWORD **)(a1 + 112);
    v47 = v43;
    if (v46)
    {
      *(_QWORD *)(a1 + 112) = v46;
      v47 = *v10;
    }
    sub_20AEC84C8(*(uint64_t **)(a1 + 120), v47);
    ++*(_QWORD *)(a1 + 128);
    v25 = (uint64_t *)v43[7];
    std::mutex::unlock(v9);
    if ((SHIBYTE(v58) & 0x80000000) == 0)
      return v25;
LABEL_48:
    operator delete((void *)__dst);
    return v25;
  }
  if (v58 >= 0)
    v32 = &__dst;
  else
    v32 = (__int128 *)__dst;
  if (v58 >= 0)
    v33 = HIBYTE(v58);
  else
    v33 = *((_QWORD *)&__dst + 1);
  while (1)
  {
    while (1)
    {
      v31 = (uint64_t **)v30;
      v36 = v30[4];
      v34 = v30 + 4;
      v35 = (uint64_t *)v36;
      v37 = *((char *)v34 + 23);
      v38 = v37 >= 0 ? v34 : v35;
      v39 = v37 >= 0 ? *((unsigned __int8 *)v34 + 23) : v34[1];
      v40 = v39 >= v33 ? v33 : v39;
      v41 = memcmp(v32, v38, v40);
      if (v41)
        break;
      if (v33 >= v39)
        goto LABEL_73;
LABEL_59:
      v30 = *v31;
      v10 = v31;
      if (!*v31)
        goto LABEL_79;
    }
    if (v41 < 0)
      goto LABEL_59;
LABEL_73:
    v42 = memcmp(v38, v32, v40);
    if (!v42)
      break;
    if ((v42 & 0x80000000) == 0)
      goto LABEL_89;
LABEL_77:
    v30 = v31[1];
    if (!v30)
    {
      v10 = v31 + 1;
      goto LABEL_79;
    }
  }
  if (v39 < v33)
    goto LABEL_77;
LABEL_89:
  (*(void (**)(_OWORD *))(*(_QWORD *)v28 + 24))(v28);
  v25 = v31[7];
  std::mutex::unlock(v9);
  if (SHIBYTE(v58) < 0)
    goto LABEL_48;
  return v25;
}

void sub_20AF198CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
  {
    __cxa_guard_abort(&qword_254638CF8);
    sub_20AEC01C0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AF19958(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *(_QWORD *)(result + 8) = &off_24C40B528;
  v2 = *(std::__shared_weak_count **)(result + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AF199CC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C40B528;
  v1 = (std::__shared_weak_count *)a1[4];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AF19A34(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)(a1 + 8) = &off_24C40B528;
  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AF19AA8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C40B528;
  v1 = (std::__shared_weak_count *)a1[4];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t VZLoggerGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638D18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638D18))
    return qword_254638D10;
  qword_254638D10 = sub_20AECB130();
  __cxa_guard_release(&qword_254638D18);
  return qword_254638D10;
}

char *VZLoggerCreateWithNamespace(uint64_t a1, CFErrorRef *a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v18;
  void *v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;
  char v26;
  char v27;
  char v28;
  char *v29;
  char *v30;
  char v31;
  __int128 v32;
  __int128 v33;
  char v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  char v40;
  char v41;
  unsigned __int8 v42;
  CFErrorRef **v43;
  CFErrorRef *v44;

  v3 = (char *)a1;
  if (sub_20AEE3494((uint64_t)"VZLoggerCreateWithNamespace", a1, a2))
    return 0;
  v43 = &v44;
  v44 = a2;
  LOBYTE(v29) = 0;
  v31 = 0;
  sub_20B07B870(v3, (uint64_t)&v29, (uint64_t)&v32);
  if (v31)
  {
    v4 = v29;
    if (v29)
    {
      v5 = v30;
      v6 = v29;
      if (v30 == v29)
      {
LABEL_19:
        v30 = v4;
        operator delete(v6);
        goto LABEL_20;
      }
      while (1)
      {
        v7 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
        if (!v7)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
          v3 = (char *)*((_QWORD *)v5 - 3);
          if (v3)
          {
LABEL_12:
            v10 = (unint64_t *)(v3 + 8);
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              (*(void (**)(char *))(*(_QWORD *)v3 + 16))(v3);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
            }
          }
        }
        else
        {
LABEL_11:
          v3 = (char *)*((_QWORD *)v5 - 3);
          if (v3)
            goto LABEL_12;
        }
        v5 -= 32;
        if (v5 == v4)
        {
          v6 = v29;
          goto LABEL_19;
        }
      }
    }
  }
LABEL_20:
  v12 = v42;
  if (v42)
  {
    sub_20AF1EA70((uint64_t)&v32);
    v13 = (char *)operator new(0x88uLL, MEMORY[0x24BEDB6B8]);
    if (v13)
    {
      v3 = v13;
      *((_OWORD *)v13 + 1) = v32;
      v32 = 0uLL;
      *((_QWORD *)v13 + 4) = v33;
      *((_DWORD *)v13 + 10) = 1;
      *(_QWORD *)v13 = &off_24C3F3E50;
      *((_QWORD *)v13 + 1) = &unk_24C3F3EA0;
      *((_QWORD *)v13 + 6) = 850045863;
      *(_OWORD *)(v13 + 56) = 0u;
      *(_OWORD *)(v13 + 72) = 0u;
      *(_OWORD *)(v13 + 88) = 0u;
      *((_QWORD *)v13 + 16) = 0;
      *((_QWORD *)v13 + 15) = 0;
      *((_QWORD *)v13 + 13) = 0;
      *((_QWORD *)v13 + 14) = v13 + 120;
      goto LABEL_44;
    }
    LOBYTE(v18) = 0;
    v28 = 0;
    sub_20AF1E828(&v43, (uint64_t)&v18);
    if (!v28 || !v27)
      goto LABEL_43;
    if (v26)
    {
      if (v25 < 0)
        operator delete(__p);
      if (v23 < 0)
        operator delete(v22);
    }
    v3 = 0;
    if (v21 && v20 < 0)
    {
      operator delete(v19);
LABEL_43:
      v3 = 0;
    }
  }
  else
  {
    v18 = v32;
    sub_20AECEBD0(&v19, &v33);
    v28 = 1;
    sub_20AF1E828(&v43, (uint64_t)&v18);
    if (v28 && v27)
    {
      if (v26)
      {
        if (v25 < 0)
          operator delete(__p);
        if (v23 < 0)
          operator delete(v22);
      }
      if (v21 && v20 < 0)
        operator delete(v19);
    }
  }
LABEL_44:
  if (v42)
  {
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v12)
          return 0;
        return v3;
      }
    }
  }
  else if (v41)
  {
    if (v40)
    {
      if (v39 < 0)
        operator delete(v38);
      if (v37 < 0)
        operator delete(v36);
    }
    if (v35 && v34 < 0)
      operator delete((void *)v33);
  }
  if (!v12)
    return 0;
  return v3;
}

void sub_20AF19EC0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a71;
  uint64_t v71;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  const std::logic_error *exception_ptr;
  const char *v78;
  size_t v79;
  size_t v80;
  void **p_dst;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  const char *v87;
  size_t v88;
  const char *v89;
  std::logic_error_vtbl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (*(_BYTE *)(v71 - 72))
  {
    v74 = *(std::__shared_weak_count **)(v71 - 184);
    if (v74)
    {
      p_shared_owners = (unint64_t *)&v74->__shared_owners_;
      do
        v76 = __ldaxr(p_shared_owners);
      while (__stlxr(v76 - 1, p_shared_owners));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
  }
  else if (*(_BYTE *)(v71 - 80))
  {
    if (*(_BYTE *)(v71 - 88))
    {
      if (*(char *)(v71 - 89) < 0)
        operator delete(*(void **)(v71 - 112));
      if (*(char *)(v71 - 121) < 0)
        operator delete(*(void **)(v71 - 144));
    }
    if (*(_BYTE *)(v71 - 152) && *(char *)(v71 - 153) < 0)
      operator delete(*(void **)(v71 - 176));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v78 = std::logic_error::what(&a10);
    v79 = strlen(v78);
    if (v79 <= 0x7FFFFFFFFFFFFFF7)
    {
      v80 = v79;
      if (v79 >= 0x17)
      {
        v91 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v79 | 7) != 0x17)
          v91 = v79 | 7;
        v92 = v91 + 1;
        p_dst = (void **)operator new(v91 + 1);
        __dst_8 = v80;
        *(_QWORD *)&a38 = v92 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v79;
        p_dst = (void **)&__dst;
        if (!v79)
        {
LABEL_56:
          *((_BYTE *)p_dst + v80) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a71 = a13;
          sub_20AECEBD0((_BYTE *)(v71 - 176), &a14);
          *(_BYTE *)(v71 - 72) = 1;
          sub_20AF1E828((CFErrorRef ***)(v71 - 64), v71 - 192);
          if (*(_BYTE *)(v71 - 72) && *(_BYTE *)(v71 - 80))
          {
            if (*(_BYTE *)(v71 - 88))
            {
              if (*(char *)(v71 - 89) < 0)
                operator delete(*(void **)(v71 - 112));
              if (*(char *)(v71 - 121) < 0)
                operator delete(*(void **)(v71 - 144));
            }
            if (*(_BYTE *)(v71 - 152) && *(char *)(v71 - 153) < 0)
              operator delete(*(void **)(v71 - 176));
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_107;
        }
      }
      memmove(p_dst, v78, v80);
      goto LABEL_56;
    }
LABEL_106:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v71 - 192) = 0;
    *(_BYTE *)(v71 - 72) = 0;
    sub_20AF1E828((CFErrorRef ***)(v71 - 64), v71 - 192);
    if (*(_BYTE *)(v71 - 72) && *(_BYTE *)(v71 - 80))
    {
      if (*(_BYTE *)(v71 - 88))
      {
        if (*(char *)(v71 - 89) < 0)
          operator delete(*(void **)(v71 - 112));
        if (*(char *)(v71 - 121) < 0)
          operator delete(*(void **)(v71 - 144));
      }
      if (*(_BYTE *)(v71 - 152) && *(char *)(v71 - 153) < 0)
        operator delete(*(void **)(v71 - 176));
    }
    __cxa_end_catch();
LABEL_107:
    JUMPOUT(0x20AF19EA0);
  }
  v82 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v82);
  a38 = *((_OWORD *)v82 + 1);
  v84 = *((_QWORD *)v82 + 4);
  v83 = *((_QWORD *)v82 + 5);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  a39 = v84;
  a40 = v83;
  if (v83)
  {
    v85 = (unint64_t *)(v83 + 8);
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
  }
  __cxa_begin_catch(a1);
  v87 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v87 = *(const char **)v87;
  v88 = strlen(v87);
  if (v88 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_106;
  v89 = (const char *)v88;
  if (v88 >= 0x17)
  {
    v93 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17)
      v93 = v88 | 7;
    v94 = v93 + 1;
    v90 = (std::logic_error_vtbl *)operator new(v93 + 1);
    a10.__imp_.__imp_ = v89;
    a11 = v94 | 0x8000000000000000;
    a10.__vftable = v90;
  }
  else
  {
    HIBYTE(a11) = v88;
    v90 = (std::logic_error_vtbl *)&a10;
    if (!v88)
    {
LABEL_83:
      v89[(_QWORD)v90] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a71 = a13;
      sub_20AECEBD0((_BYTE *)(v71 - 176), &a14);
      *(_BYTE *)(v71 - 72) = 1;
      sub_20AF1E828((CFErrorRef ***)(v71 - 64), v71 - 192);
      if (*(_BYTE *)(v71 - 72) && *(_BYTE *)(v71 - 80))
      {
        if (*(_BYTE *)(v71 - 88))
        {
          if (*(char *)(v71 - 89) < 0)
            operator delete(*(void **)(v71 - 112));
          if (*(char *)(v71 - 121) < 0)
            operator delete(*(void **)(v71 - 144));
        }
        if (*(_BYTE *)(v71 - 152) && *(char *)(v71 - 153) < 0)
          operator delete(*(void **)(v71 - 176));
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_107;
    }
  }
  memmove(v90, v87, (size_t)v89);
  goto LABEL_83;
}

_QWORD *VZLoggerCreateWithDestinations(uint64_t a1, CFErrorRef *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  void **v17;
  void **v18;
  void *v19;
  char *v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v29[2];
  uint64_t v30;
  char v31[16];
  void *v32;
  char v33;
  char v34;
  void *v35;
  char v36;
  void *__p;
  char v38;
  char v39;
  char v40;
  char v41;
  void *v42;
  void **v43;
  void *v44;
  char v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  __int128 __dst;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (sub_20AEF5910((uint64_t)"VZLoggerCreateWithDestinations", a1, a2))
    return 0;
  sub_20AF1DFE8(v29, a1 + 16);
  v5 = operator new(0x88uLL, MEMORY[0x24BEDB6B8]);
  if (v5)
  {
    v4 = v5;
    *v5 = off_24C3F2180;
    v47 = *(_OWORD *)v29;
    v48 = v30;
    v29[0] = 0;
    v29[1] = 0;
    v30 = 0;
    v49 = 1;
    LOBYTE(v44) = 0;
    v46 = 0;
    sub_20B07B120(v5 + 2, (uint64_t)&v47, (uint64_t)&v44);
    if (v46 && v45 < 0)
      operator delete(v44);
    if (!v49 || (v6 = v47) == 0)
    {
LABEL_25:
      *((_DWORD *)v4 + 10) = 1;
      *v4 = &off_24C3F3E50;
      v4[1] = &unk_24C3F3EA0;
      v4[6] = 850045863;
      *(_OWORD *)(v4 + 7) = 0u;
      *(_OWORD *)(v4 + 9) = 0u;
      *(_OWORD *)(v4 + 11) = 0u;
      v4[16] = 0;
      v4[15] = 0;
      v4[13] = 0;
      v4[14] = v4 + 15;
      v15 = (char *)v29[0];
      if (!v29[0])
        return v4;
LABEL_51:
      v20 = (char *)v29[1];
      v21 = v15;
      if (v29[1] == v15)
      {
LABEL_66:
        v29[1] = v15;
        operator delete(v21);
        return v4;
      }
      while (1)
      {
        v22 = (std::__shared_weak_count *)*((_QWORD *)v20 - 1);
        if (!v22)
          goto LABEL_58;
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
          v25 = (std::__shared_weak_count *)*((_QWORD *)v20 - 3);
          if (v25)
          {
LABEL_59:
            v26 = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
        }
        else
        {
LABEL_58:
          v25 = (std::__shared_weak_count *)*((_QWORD *)v20 - 3);
          if (v25)
            goto LABEL_59;
        }
        v20 -= 32;
        if (v20 == v15)
        {
          v21 = (char *)v29[0];
          goto LABEL_66;
        }
      }
    }
    v7 = *((_QWORD *)&v47 + 1);
    v8 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
    {
LABEL_24:
      *((_QWORD *)&v47 + 1) = v6;
      operator delete(v8);
      goto LABEL_25;
    }
    while (1)
    {
      v9 = *(std::__shared_weak_count **)(v7 - 8);
      if (!v9)
        goto LABEL_16;
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        v12 = *(std::__shared_weak_count **)(v7 - 24);
        if (v12)
        {
LABEL_17:
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
      else
      {
LABEL_16:
        v12 = *(std::__shared_weak_count **)(v7 - 24);
        if (v12)
          goto LABEL_17;
      }
      v7 -= 32;
      if (v7 == v6)
      {
        v8 = (void *)v47;
        goto LABEL_24;
      }
    }
  }
  v16 = (uint64_t *)sub_20AEE00CC();
  sub_20AF1EB30();
  if (byte_254638E4F < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_254638E38, *((unint64_t *)&xmmword_254638E38 + 1));
  }
  else
  {
    __dst = xmmword_254638E38;
    v51 = unk_254638E48;
  }
  sub_20AEC7620(&v42, (uint64_t)&__dst, 1uLL);
  v31[0] = 0;
  v41 = 0;
  sub_20AECD798(v16, (__int128 **)&v42, (uint64_t)v31, a2);
  if (v41 && v40)
  {
    if (v39)
    {
      if (v38 < 0)
        operator delete(__p);
      if (v36 < 0)
        operator delete(v35);
    }
    if (v34 && v33 < 0)
      operator delete(v32);
  }
  v17 = (void **)v42;
  if (v42)
  {
    v18 = v43;
    v19 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v18 - 1) < 0)
          operator delete(*(v18 - 3));
        v18 -= 3;
      }
      while (v18 != v17);
      v19 = v42;
    }
    v43 = v17;
    operator delete(v19);
  }
  if (SHIBYTE(v51) < 0)
    operator delete((void *)__dst);
  v4 = 0;
  v15 = (char *)v29[0];
  if (v29[0])
    goto LABEL_51;
  return v4;
}

void sub_20AF1A98C(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20AF1A99CLL);
  sub_20AEC01C0(a1);
}

char *VZLoggerCreateWithNamespaceAndDestinations(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v20;
  void *v21;
  char v22;
  char v23;
  void *v24;
  char v25;
  void *__p;
  char v27;
  char v28;
  char v29;
  char v30;
  char *v31;
  char *v32;
  char v33;
  __int128 v34;
  __int128 v35;
  char v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  char v42;
  char v43;
  unsigned __int8 v44;
  CFErrorRef **v45;
  CFErrorRef *v46;

  v5 = (char *)a1;
  if (sub_20AEE3494((uint64_t)"VZLoggerCreateWithNamespaceAndDestinations", a1, a3)
    || sub_20AEF5910((uint64_t)"VZLoggerCreateWithNamespaceAndDestinations", a2, a3))
  {
    return 0;
  }
  v45 = &v46;
  v46 = a3;
  sub_20AF1DFE8(&v31, a2 + 16);
  v33 = 1;
  sub_20B07B870(v5, (uint64_t)&v31, (uint64_t)&v34);
  if (v33)
  {
    v6 = v31;
    if (v31)
    {
      v7 = v32;
      v8 = v31;
      if (v32 != v31)
      {
        do
        {
          v9 = (std::__shared_weak_count *)*((_QWORD *)v7 - 1);
          if (v9)
          {
            p_shared_owners = (unint64_t *)&v9->__shared_owners_;
            do
              v11 = __ldaxr(p_shared_owners);
            while (__stlxr(v11 - 1, p_shared_owners));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          v5 = (char *)*((_QWORD *)v7 - 3);
          if (v5)
          {
            v12 = (unint64_t *)(v5 + 8);
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              (*(void (**)(char *))(*(_QWORD *)v5 + 16))(v5);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
            }
          }
          v7 -= 32;
        }
        while (v7 != v6);
        v8 = v31;
      }
      v32 = v6;
      operator delete(v8);
    }
  }
  v14 = v44;
  if (v44)
  {
    sub_20AF1EA70((uint64_t)&v34);
    v15 = (char *)operator new(0x88uLL, MEMORY[0x24BEDB6B8]);
    if (v15)
    {
      v5 = v15;
      *((_OWORD *)v15 + 1) = v34;
      v34 = 0uLL;
      *((_QWORD *)v15 + 4) = v35;
      *((_DWORD *)v15 + 10) = 1;
      *(_QWORD *)v15 = &off_24C3F3E50;
      *((_QWORD *)v15 + 1) = &unk_24C3F3EA0;
      *((_QWORD *)v15 + 6) = 850045863;
      *(_OWORD *)(v15 + 56) = 0u;
      *(_OWORD *)(v15 + 72) = 0u;
      *(_OWORD *)(v15 + 88) = 0u;
      *((_QWORD *)v15 + 16) = 0;
      *((_QWORD *)v15 + 15) = 0;
      *((_QWORD *)v15 + 13) = 0;
      *((_QWORD *)v15 + 14) = v15 + 120;
      goto LABEL_44;
    }
    LOBYTE(v20) = 0;
    v30 = 0;
    sub_20AF1ECE8(&v45, (uint64_t)&v20);
    if (!v30 || !v29)
      goto LABEL_43;
    if (v28)
    {
      if (v27 < 0)
        operator delete(__p);
      if (v25 < 0)
        operator delete(v24);
    }
    v5 = 0;
    if (v23 && v22 < 0)
    {
      operator delete(v21);
LABEL_43:
      v5 = 0;
    }
  }
  else
  {
    v20 = v34;
    sub_20AECEBD0(&v21, &v35);
    v30 = 1;
    sub_20AF1ECE8(&v45, (uint64_t)&v20);
    if (v30 && v29)
    {
      if (v28)
      {
        if (v27 < 0)
          operator delete(__p);
        if (v25 < 0)
          operator delete(v24);
      }
      if (v23 && v22 < 0)
        operator delete(v21);
    }
  }
LABEL_44:
  if (v44)
  {
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if (!v14)
          return 0;
        return v5;
      }
    }
  }
  else if (v43)
  {
    if (v42)
    {
      if (v41 < 0)
        operator delete(v40);
      if (v39 < 0)
        operator delete(v38);
    }
    if (v37 && v36 < 0)
      operator delete((void *)v35);
  }
  if (!v14)
    return 0;
  return v5;
}

void sub_20AF1AD04(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a71;
  uint64_t v71;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  const std::logic_error *exception_ptr;
  const char *v78;
  size_t v79;
  size_t v80;
  void **p_dst;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  const char *v87;
  size_t v88;
  const char *v89;
  std::logic_error_vtbl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (*(_BYTE *)(v71 - 72))
  {
    v74 = *(std::__shared_weak_count **)(v71 - 184);
    if (v74)
    {
      p_shared_owners = (unint64_t *)&v74->__shared_owners_;
      do
        v76 = __ldaxr(p_shared_owners);
      while (__stlxr(v76 - 1, p_shared_owners));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
  }
  else if (*(_BYTE *)(v71 - 80))
  {
    if (*(_BYTE *)(v71 - 88))
    {
      if (*(char *)(v71 - 89) < 0)
        operator delete(*(void **)(v71 - 112));
      if (*(char *)(v71 - 121) < 0)
        operator delete(*(void **)(v71 - 144));
    }
    if (*(_BYTE *)(v71 - 152) && *(char *)(v71 - 153) < 0)
      operator delete(*(void **)(v71 - 176));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v78 = std::logic_error::what(&a10);
    v79 = strlen(v78);
    if (v79 <= 0x7FFFFFFFFFFFFFF7)
    {
      v80 = v79;
      if (v79 >= 0x17)
      {
        v91 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v79 | 7) != 0x17)
          v91 = v79 | 7;
        v92 = v91 + 1;
        p_dst = (void **)operator new(v91 + 1);
        __dst_8 = v80;
        *(_QWORD *)&a38 = v92 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v79;
        p_dst = (void **)&__dst;
        if (!v79)
        {
LABEL_56:
          *((_BYTE *)p_dst + v80) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a71 = a13;
          sub_20AECEBD0((_BYTE *)(v71 - 176), &a14);
          *(_BYTE *)(v71 - 72) = 1;
          sub_20AF1ECE8((CFErrorRef ***)(v71 - 64), v71 - 192);
          if (*(_BYTE *)(v71 - 72) && *(_BYTE *)(v71 - 80))
          {
            if (*(_BYTE *)(v71 - 88))
            {
              if (*(char *)(v71 - 89) < 0)
                operator delete(*(void **)(v71 - 112));
              if (*(char *)(v71 - 121) < 0)
                operator delete(*(void **)(v71 - 144));
            }
            if (*(_BYTE *)(v71 - 152) && *(char *)(v71 - 153) < 0)
              operator delete(*(void **)(v71 - 176));
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_107;
        }
      }
      memmove(p_dst, v78, v80);
      goto LABEL_56;
    }
LABEL_106:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v71 - 192) = 0;
    *(_BYTE *)(v71 - 72) = 0;
    sub_20AF1ECE8((CFErrorRef ***)(v71 - 64), v71 - 192);
    if (*(_BYTE *)(v71 - 72) && *(_BYTE *)(v71 - 80))
    {
      if (*(_BYTE *)(v71 - 88))
      {
        if (*(char *)(v71 - 89) < 0)
          operator delete(*(void **)(v71 - 112));
        if (*(char *)(v71 - 121) < 0)
          operator delete(*(void **)(v71 - 144));
      }
      if (*(_BYTE *)(v71 - 152) && *(char *)(v71 - 153) < 0)
        operator delete(*(void **)(v71 - 176));
    }
    __cxa_end_catch();
LABEL_107:
    JUMPOUT(0x20AF1ACE4);
  }
  v82 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v82);
  a38 = *((_OWORD *)v82 + 1);
  v84 = *((_QWORD *)v82 + 4);
  v83 = *((_QWORD *)v82 + 5);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  a39 = v84;
  a40 = v83;
  if (v83)
  {
    v85 = (unint64_t *)(v83 + 8);
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
  }
  __cxa_begin_catch(a1);
  v87 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v87 = *(const char **)v87;
  v88 = strlen(v87);
  if (v88 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_106;
  v89 = (const char *)v88;
  if (v88 >= 0x17)
  {
    v93 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17)
      v93 = v88 | 7;
    v94 = v93 + 1;
    v90 = (std::logic_error_vtbl *)operator new(v93 + 1);
    a10.__imp_.__imp_ = v89;
    a11 = v94 | 0x8000000000000000;
    a10.__vftable = v90;
  }
  else
  {
    HIBYTE(a11) = v88;
    v90 = (std::logic_error_vtbl *)&a10;
    if (!v88)
    {
LABEL_83:
      v89[(_QWORD)v90] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a71 = a13;
      sub_20AECEBD0((_BYTE *)(v71 - 176), &a14);
      *(_BYTE *)(v71 - 72) = 1;
      sub_20AF1ECE8((CFErrorRef ***)(v71 - 64), v71 - 192);
      if (*(_BYTE *)(v71 - 72) && *(_BYTE *)(v71 - 80))
      {
        if (*(_BYTE *)(v71 - 88))
        {
          if (*(char *)(v71 - 89) < 0)
            operator delete(*(void **)(v71 - 112));
          if (*(char *)(v71 - 121) < 0)
            operator delete(*(void **)(v71 - 144));
        }
        if (*(_BYTE *)(v71 - 152) && *(char *)(v71 - 153) < 0)
          operator delete(*(void **)(v71 - 176));
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_107;
    }
  }
  memmove(v90, v87, (size_t)v89);
  goto LABEL_83;
}

_OWORD *VZLoggerCreateWithFileExporter(char *a1, _OWORD *a2, CFErrorRef *a3)
{
  uint64_t v6;
  char *v7;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  _OWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 __p;
  void *v18;
  char v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  char v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  char v36;
  char v37;
  unsigned __int8 v38;
  CFErrorRef **v39;
  CFErrorRef *v40;
  _QWORD v41[3];
  _QWORD *v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (sub_20AEE3494((uint64_t)"VZLoggerCreateWithFileExporter", (uint64_t)a1, a3))
    return 0;
  v39 = &v40;
  v40 = a3;
  if (a2)
    v6 = (uint64_t)(a2 + 1);
  else
    v6 = 0;
  __p = 0uLL;
  v7 = a1 - 1;
  v18 = 0;
  while (*++v7)
    ;
  sub_20AF08074((unint64_t)&__p, a1, v7);
  v41[0] = &off_24C3F2898;
  v41[1] = sub_20AEDD8BC;
  v42 = v41;
  v43 = 1;
  sub_20B07BC2C((uint64_t)&__p, v6, a2 != 0, (uint64_t)v41, 0, 0, (uint64_t)&v28);
  if (v43)
  {
    v9 = v42;
    if (v42 == v41)
    {
      v10 = 4;
      v9 = v41;
    }
    else
    {
      if (!v42)
        goto LABEL_13;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
LABEL_13:
  if (SHIBYTE(v18) < 0)
  {
    operator delete((void *)__p);
    v11 = v38;
    if (v38)
      goto LABEL_15;
LABEL_18:
    __p = v28;
    sub_20AECEBD0(&v18, &v29);
    v27 = 1;
    sub_20AF1F2FC(&v39, (uint64_t)&__p);
    if (v27 && v26)
    {
      if (v25)
      {
        if (v24 < 0)
          operator delete(v23);
        if (v22 < 0)
          operator delete(v21);
      }
      if (v20 && v19 < 0)
        operator delete(v18);
    }
    goto LABEL_39;
  }
  v11 = v38;
  if (!v38)
    goto LABEL_18;
LABEL_15:
  sub_20AF1EA70((uint64_t)&v28);
  v12 = operator new(0x88uLL, MEMORY[0x24BEDB6B8]);
  if (v12)
  {
    a2 = v12;
    v12[1] = v28;
    v28 = 0uLL;
    *((_QWORD *)v12 + 4) = v29;
    *((_DWORD *)v12 + 10) = 1;
    *(_QWORD *)v12 = &off_24C3F3E50;
    *((_QWORD *)v12 + 1) = &unk_24C3F3EA0;
    *((_QWORD *)v12 + 6) = 850045863;
    *(_OWORD *)((char *)v12 + 56) = 0u;
    *(_OWORD *)((char *)v12 + 72) = 0u;
    *(_OWORD *)((char *)v12 + 88) = 0u;
    *((_QWORD *)v12 + 16) = 0;
    *((_QWORD *)v12 + 15) = 0;
    *((_QWORD *)v12 + 13) = 0;
    *((_QWORD *)v12 + 14) = (char *)v12 + 120;
    goto LABEL_39;
  }
  LOBYTE(__p) = 0;
  v27 = 0;
  sub_20AF1F2FC(&v39, (uint64_t)&__p);
  if (!v27 || !v26)
    goto LABEL_38;
  if (v25)
  {
    if (v24 < 0)
      operator delete(v23);
    if (v22 < 0)
      operator delete(v21);
  }
  a2 = 0;
  if (v20 && v19 < 0)
  {
    operator delete(v18);
LABEL_38:
    a2 = 0;
  }
LABEL_39:
  if (v38)
  {
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        if (!v11)
          return 0;
        return a2;
      }
    }
  }
  else if (v37)
  {
    if (v36)
    {
      if (v35 < 0)
        operator delete(v34);
      if (v33 < 0)
        operator delete(v32);
    }
    if (v31 && v30 < 0)
      operator delete((void *)v29);
  }
  if (!v11)
    return 0;
  return a2;
}

void sub_20AF1B65C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a68;
  uint64_t v68;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  const std::logic_error *exception_ptr;
  const char *v75;
  size_t v76;
  size_t v77;
  void **p_dst;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  const char *v84;
  size_t v85;
  const char *v86;
  std::logic_error_vtbl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  if (!a2)
    _Unwind_Resume(a1);
  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (*(_BYTE *)(v68 - 120))
  {
    v71 = *(std::__shared_weak_count **)(v68 - 232);
    if (v71)
    {
      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(p_shared_owners);
      while (__stlxr(v73 - 1, p_shared_owners));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  else if (*(_BYTE *)(v68 - 128))
  {
    if (*(_BYTE *)(v68 - 136))
    {
      if (*(char *)(v68 - 137) < 0)
        operator delete(*(void **)(v68 - 160));
      if (*(char *)(v68 - 169) < 0)
        operator delete(*(void **)(v68 - 192));
    }
    if (*(_BYTE *)(v68 - 200) && *(char *)(v68 - 201) < 0)
      operator delete(*(void **)(v68 - 224));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v75 = std::logic_error::what(&a10);
    v76 = strlen(v75);
    if (v76 <= 0x7FFFFFFFFFFFFFF7)
    {
      v77 = v76;
      if (v76 >= 0x17)
      {
        v88 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v88 = v76 | 7;
        v89 = v88 + 1;
        p_dst = (void **)operator new(v88 + 1);
        __dst_8 = v77;
        *(_QWORD *)&a38 = v89 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v76;
        p_dst = (void **)&__dst;
        if (!v76)
        {
LABEL_57:
          *((_BYTE *)p_dst + v77) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a68 = a13;
          sub_20AECEBD0((_BYTE *)(v68 - 224), &a14);
          *(_BYTE *)(v68 - 120) = 1;
          sub_20AF1F2FC((CFErrorRef ***)(v68 - 112), v68 - 240);
          if (*(_BYTE *)(v68 - 120) && *(_BYTE *)(v68 - 128))
          {
            if (*(_BYTE *)(v68 - 136))
            {
              if (*(char *)(v68 - 137) < 0)
                operator delete(*(void **)(v68 - 160));
              if (*(char *)(v68 - 169) < 0)
                operator delete(*(void **)(v68 - 192));
            }
            if (*(_BYTE *)(v68 - 200) && *(char *)(v68 - 201) < 0)
              operator delete(*(void **)(v68 - 224));
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_109;
        }
      }
      memmove(p_dst, v75, v77);
      goto LABEL_57;
    }
LABEL_107:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v68 - 240) = 0;
    *(_BYTE *)(v68 - 120) = 0;
    sub_20AF1F2FC((CFErrorRef ***)(v68 - 112), v68 - 240);
    if (*(_BYTE *)(v68 - 120) && *(_BYTE *)(v68 - 128))
    {
      if (*(_BYTE *)(v68 - 136))
      {
        if (*(char *)(v68 - 137) < 0)
          operator delete(*(void **)(v68 - 160));
        if (*(char *)(v68 - 169) < 0)
          operator delete(*(void **)(v68 - 192));
      }
      if (*(_BYTE *)(v68 - 200) && *(char *)(v68 - 201) < 0)
        operator delete(*(void **)(v68 - 224));
    }
    __cxa_end_catch();
LABEL_109:
    JUMPOUT(0x20AF1B620);
  }
  v79 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v79);
  a38 = *((_OWORD *)v79 + 1);
  v81 = *((_QWORD *)v79 + 4);
  v80 = *((_QWORD *)v79 + 5);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  a39 = v81;
  a40 = v80;
  if (v80)
  {
    v82 = (unint64_t *)(v80 + 8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  __cxa_begin_catch(a1);
  v84 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v84 = *(const char **)v84;
  v85 = strlen(v84);
  if (v85 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_107;
  v86 = (const char *)v85;
  if (v85 >= 0x17)
  {
    v90 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v90 = v85 | 7;
    v91 = v90 + 1;
    v87 = (std::logic_error_vtbl *)operator new(v90 + 1);
    a10.__imp_.__imp_ = v86;
    a11 = v91 | 0x8000000000000000;
    a10.__vftable = v87;
  }
  else
  {
    HIBYTE(a11) = v85;
    v87 = (std::logic_error_vtbl *)&a10;
    if (!v85)
    {
LABEL_84:
      v86[(_QWORD)v87] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a68 = a13;
      sub_20AECEBD0((_BYTE *)(v68 - 224), &a14);
      *(_BYTE *)(v68 - 120) = 1;
      sub_20AF1F2FC((CFErrorRef ***)(v68 - 112), v68 - 240);
      if (*(_BYTE *)(v68 - 120) && *(_BYTE *)(v68 - 128))
      {
        if (*(_BYTE *)(v68 - 136))
        {
          if (*(char *)(v68 - 137) < 0)
            operator delete(*(void **)(v68 - 160));
          if (*(char *)(v68 - 169) < 0)
            operator delete(*(void **)(v68 - 192));
        }
        if (*(_BYTE *)(v68 - 200) && *(char *)(v68 - 201) < 0)
          operator delete(*(void **)(v68 - 224));
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_109;
    }
  }
  memmove(v87, v84, (size_t)v86);
  goto LABEL_84;
}

uint64_t VZLoggerGetNamespace(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (sub_20AF1BCCC((uint64_t)"VZLoggerGetNamespace", a1))
    return 0;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = *(_QWORD *)(v3 + 16);
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  if (*(char *)(v5 + 23) >= 0)
    v6 = v5;
  else
    v6 = *(_QWORD *)v5;
  if (*(_BYTE *)(v5 + 24))
    return v6;
  else
    return 0;
}

BOOL sub_20AF1BCCC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v7;
  size_t v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  char v37;
  char v38;
  char v39;

  if (a2)
    return a2 == 0;
  v4 = atomic_load((unsigned __int8 *)&qword_254638D70);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254638D70))
  {
    sub_20AF1F990();
    v7 = byte_254638F57;
    if (byte_254638F57 >= 0)
      v8 = byte_254638F57;
    else
      v8 = qword_254638F48;
    v9 = v8 + 1;
    if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v9 >= 0x17)
    {
      v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v11 = v9 | 7;
      v12 = v11 + 1;
      v10 = (__int128 *)operator new(v11 + 1);
      *((_QWORD *)&xmmword_254638F28 + 1) = v8 + 1;
      unk_254638F38 = v12 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638F28 = v10;
    }
    else
    {
      unk_254638F38 = 0;
      xmmword_254638F28 = 0uLL;
      v10 = &xmmword_254638F28;
      byte_254638F3F = v8 + 1;
      if (!v8)
      {
LABEL_53:
        *(_WORD *)((char *)v10 + v8) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638F28, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638D70);
        goto LABEL_3;
      }
    }
    if (v7 >= 0)
      v13 = &qword_254638F40;
    else
      v13 = (uint64_t *)qword_254638F40;
    memmove(v10, v13, v8);
    goto LABEL_53;
  }
LABEL_3:
  if (byte_254638F3F < 0)
  {
    sub_20AEC60F4(v14, (void *)xmmword_254638F28, *((unint64_t *)&xmmword_254638F28 + 1));
  }
  else
  {
    *(_OWORD *)v14 = xmmword_254638F28;
    v15 = unk_254638F38;
  }
  v16 = 1;
  sub_20AECCECC(a1, (uint64_t)v14, (uint64_t)&v17);
  v28 = v17;
  LOBYTE(v29) = 0;
  v38 = 0;
  if (v27)
  {
    v31 = 0;
    if (v20)
    {
      v29 = v18;
      v30 = v19;
      v19 = 0;
      v18 = 0uLL;
      v31 = 1;
    }
    LOBYTE(v32) = 0;
    v37 = 0;
    if (v26)
    {
      v33 = v22;
      v32 = *(_OWORD *)v21;
      v21[0] = 0;
      v21[1] = 0;
      v34 = v23;
      *(_OWORD *)__p = *(_OWORD *)v24;
      v36 = v25;
      v22 = 0;
      v24[0] = 0;
      v24[1] = 0;
      v25 = 0;
      v37 = 1;
    }
    v38 = 1;
  }
  v39 = 0;
  v5 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v28);
  if (!v39 && v38)
  {
    if (v37)
    {
      if (SHIBYTE(v36) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
    }
    if (v31 && SHIBYTE(v30) < 0)
      operator delete((void *)v29);
  }
  if (v27)
  {
    if (v26)
    {
      if (SHIBYTE(v25) < 0)
        operator delete(v24[0]);
      if (SHIBYTE(v22) < 0)
        operator delete(v21[0]);
    }
    if (v20 && SHIBYTE(v19) < 0)
      operator delete((void *)v18);
  }
  if (v16 && SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  return a2 == 0;
}

void sub_20AF1C040(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638D70);
  _Unwind_Resume(a1);
}

void sub_20AF1C058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VZLoggerAddDestination(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  __int128 v6;
  void *v7;
  char v8;
  char v9;
  void *v10;
  char v11;
  void *__p;
  char v13;
  char v14;
  char v15;
  char v16;

  if (!sub_20AEDCA40((uint64_t)"VZLoggerAddDestination", a1, a3)
    && !sub_20AEF5694((uint64_t)"VZLoggerAddDestination", a2, a3))
  {
    sub_20B07C73C((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16), (uint64_t)&v6);
    if (!v16)
    {
      sub_20AECB410(&v6, a3);
      if (!v16)
      {
        if (v15)
        {
          if (v14)
          {
            if (v13 < 0)
              operator delete(__p);
            if (v11 < 0)
              operator delete(v10);
          }
          if (v9)
          {
            if (v8 < 0)
              operator delete(v7);
          }
        }
      }
    }
  }
}

void sub_20AF1C164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void VZLoggerRemoveDestination(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  __int128 v6;
  void *v7;
  char v8;
  char v9;
  void *v10;
  char v11;
  void *__p;
  char v13;
  char v14;
  char v15;
  char v16;

  if (!sub_20AEDCA40((uint64_t)"VZLoggerRemoveDestination", a1, a3)
    && !sub_20AEF5694((uint64_t)"VZLoggerRemoveDestination", a2, a3))
  {
    sub_20B07C970((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16), (uint64_t)&v6);
    if (!v16)
    {
      sub_20AECB410(&v6, a3);
      if (!v16)
      {
        if (v15)
        {
          if (v14)
          {
            if (v13 < 0)
              operator delete(__p);
            if (v11 < 0)
              operator delete(v10);
          }
          if (v9)
          {
            if (v8 < 0)
              operator delete(v7);
          }
        }
      }
    }
  }
}

void sub_20AF1C260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double VZLoggerCopyDestinationReferences(uint64_t a1)
{
  double result;
  _OWORD *v3;
  uint64_t *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  char *v8;
  char *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17[2];
  uint64_t v18;
  char v19[16];
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  void *__p;
  char v26;
  char v27;
  char v28;
  char v29;
  __int128 *v30;
  __int128 *v31;
  __int128 __dst;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (!sub_20AF1BCCC((uint64_t)"VZLoggerCopyDestinationReferences", a1))
  {
    sub_20B07CBBC((uint64_t *)(a1 + 16), v17);
    v3 = operator new(0x48uLL, MEMORY[0x24BEDB6B8]);
    if (v3)
    {
      result = *(double *)v17;
      v3[1] = *(_OWORD *)v17;
      *((_QWORD *)v3 + 4) = v18;
      *((_DWORD *)v3 + 10) = 1;
      *(_QWORD *)v3 = &off_24C3F2EA0;
      *((_QWORD *)v3 + 1) = &unk_24C3F2EF0;
      *((_QWORD *)v3 + 8) = 0;
      *((_QWORD *)v3 + 7) = 0;
      *((_QWORD *)v3 + 6) = (char *)v3 + 56;
      return result;
    }
    v4 = (uint64_t *)sub_20AEF962C();
    sub_20AF1EB30();
    if (byte_254638E4F < 0)
    {
      sub_20AEC60F4(&__dst, (void *)xmmword_254638E38, *((unint64_t *)&xmmword_254638E38 + 1));
    }
    else
    {
      __dst = xmmword_254638E38;
      v33 = unk_254638E48;
    }
    sub_20AEC7620(&v30, (uint64_t)&__dst, 1uLL);
    v19[0] = 0;
    v29 = 0;
    sub_20AECD798(v4, &v30, (uint64_t)v19, 0);
    if (v29 && v28)
    {
      if (v27)
      {
        if (v26 < 0)
          operator delete(__p);
        if (v24 < 0)
          operator delete(v23);
      }
      if (v22 && v21 < 0)
        operator delete(v20);
    }
    v5 = v30;
    if (v30)
    {
      v6 = v31;
      v7 = v30;
      if (v31 != v30)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*((void **)v6 - 3));
          v6 = (__int128 *)((char *)v6 - 24);
        }
        while (v6 != v5);
        v7 = v30;
      }
      v31 = v5;
      operator delete(v7);
    }
    if (SHIBYTE(v33) < 0)
      operator delete((void *)__dst);
    v8 = (char *)v17[0];
    if (v17[0])
    {
      v9 = (char *)v17[1];
      v10 = v17[0];
      if (v17[1] == v17[0])
      {
LABEL_44:
        v17[1] = v8;
        operator delete(v10);
        return result;
      }
      while (1)
      {
        v11 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
        if (!v11)
          goto LABEL_36;
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
          v14 = (std::__shared_weak_count *)*((_QWORD *)v9 - 3);
          if (v14)
          {
LABEL_37:
            v15 = (unint64_t *)&v14->__shared_owners_;
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
        }
        else
        {
LABEL_36:
          v14 = (std::__shared_weak_count *)*((_QWORD *)v9 - 3);
          if (v14)
            goto LABEL_37;
        }
        v9 -= 32;
        if (v9 == v8)
        {
          v10 = v17[0];
          goto LABEL_44;
        }
      }
    }
  }
  return result;
}

void sub_20AF1C530(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20AEC01C0(a1);
}

uint64_t VZSubLoggerGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638D88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638D88))
    return qword_254638D80;
  qword_254638D80 = sub_20AECB130();
  __cxa_guard_release(&qword_254638D88);
  return qword_254638D80;
}

uint64_t *VZLoggerGetSubLogger(uint64_t a1, const char *a2)
{
  if (sub_20AF1BCCC((uint64_t)"VZLoggerGetSubLogger", a1))
    return 0;
  else
    return sub_20AF192F4(a1, a2);
}

uint64_t *VZLoggerGetSubLoggerMutable(uint64_t a1, const char *a2)
{
  if (sub_20AEDCA40((uint64_t)"VZLoggerGetSubLoggerMutable", a1, 0))
    return 0;
  else
    return sub_20AF192F4(a1, a2);
}

uint64_t VZLoggerEnabled(uint64_t a1, const char *a2)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (sub_20AF1BCCC((uint64_t)"VZLoggerEnabled", a1))
    return 0;
  v5 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    v6 = strlen(a2);
  }
  else
  {
    v6 = 0;
    a2 = "";
  }
  v7 = (*(uint64_t (**)(uint64_t, const char *, size_t))(*(_QWORD *)v5 + 64))(v5, a2, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
}

BOOL VZSubLoggerEnabled(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)atomic_load(*(unint64_t **)(a1 + 24));
  return *v1 == 1;
}

uint64_t VZLoggerGetEnableState(uint64_t a1, const char *a2)
{
  if (sub_20AF1BCCC((uint64_t)"VZLoggerGetEnableState", a1))
    return 2;
  else
    return sub_20B07D284((uint64_t *)(a1 + 16), a2);
}

uint64_t VZSubLoggerGetEnableState(uint64_t a1)
{
  if (sub_20AF1C76C((uint64_t)"VZSubLoggerGetEnableState", a1))
    return 2;
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
}

BOOL sub_20AF1C76C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v7;
  size_t v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  char v37;
  char v38;
  char v39;

  if (a2)
    return a2 == 0;
  v4 = atomic_load((unsigned __int8 *)&qword_254638D90);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254638D90))
  {
    sub_20AF1FB18();
    v7 = byte_254638F87;
    if (byte_254638F87 >= 0)
      v8 = byte_254638F87;
    else
      v8 = qword_254638F78;
    v9 = v8 + 1;
    if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v9 >= 0x17)
    {
      v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v11 = v9 | 7;
      v12 = v11 + 1;
      v10 = (__int128 *)operator new(v11 + 1);
      *((_QWORD *)&xmmword_254638F58 + 1) = v8 + 1;
      unk_254638F68 = v12 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638F58 = v10;
    }
    else
    {
      unk_254638F68 = 0;
      xmmword_254638F58 = 0uLL;
      v10 = &xmmword_254638F58;
      byte_254638F6F = v8 + 1;
      if (!v8)
      {
LABEL_53:
        *(_WORD *)((char *)v10 + v8) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638F58, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638D90);
        goto LABEL_3;
      }
    }
    if (v7 >= 0)
      v13 = &qword_254638F70;
    else
      v13 = (uint64_t *)qword_254638F70;
    memmove(v10, v13, v8);
    goto LABEL_53;
  }
LABEL_3:
  if (byte_254638F6F < 0)
  {
    sub_20AEC60F4(v14, (void *)xmmword_254638F58, *((unint64_t *)&xmmword_254638F58 + 1));
  }
  else
  {
    *(_OWORD *)v14 = xmmword_254638F58;
    v15 = unk_254638F68;
  }
  v16 = 1;
  sub_20AECCECC(a1, (uint64_t)v14, (uint64_t)&v17);
  v28 = v17;
  LOBYTE(v29) = 0;
  v38 = 0;
  if (v27)
  {
    v31 = 0;
    if (v20)
    {
      v29 = v18;
      v30 = v19;
      v19 = 0;
      v18 = 0uLL;
      v31 = 1;
    }
    LOBYTE(v32) = 0;
    v37 = 0;
    if (v26)
    {
      v33 = v22;
      v32 = *(_OWORD *)v21;
      v21[0] = 0;
      v21[1] = 0;
      v34 = v23;
      *(_OWORD *)__p = *(_OWORD *)v24;
      v36 = v25;
      v22 = 0;
      v24[0] = 0;
      v24[1] = 0;
      v25 = 0;
      v37 = 1;
    }
    v38 = 1;
  }
  v39 = 0;
  v5 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v28);
  if (!v39 && v38)
  {
    if (v37)
    {
      if (SHIBYTE(v36) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
    }
    if (v31 && SHIBYTE(v30) < 0)
      operator delete((void *)v29);
  }
  if (v27)
  {
    if (v26)
    {
      if (SHIBYTE(v25) < 0)
        operator delete(v24[0]);
      if (SHIBYTE(v22) < 0)
        operator delete(v21[0]);
    }
    if (v20 && SHIBYTE(v19) < 0)
      operator delete((void *)v18);
  }
  if (v16 && SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  return a2 == 0;
}

void sub_20AF1CAE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638D90);
  _Unwind_Resume(a1);
}

void sub_20AF1CAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VZLoggerEnable(uint64_t a1, const char *a2)
{
  if (!sub_20AEDCA40((uint64_t)"VZLoggerEnable", a1, 0))
    sub_20B07D3B4((uint64_t *)(a1 + 16), a2);
}

uint64_t VZSubLoggerEnable(uint64_t a1)
{
  uint64_t result;

  result = sub_20AF1CBB8((uint64_t)"VZSubLoggerEnable", a1, 0);
  if ((result & 1) == 0)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), 1);
  return result;
}

BOOL sub_20AF1CBB8(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  unsigned __int8 v6;
  int v8;
  size_t v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  void *v15[2];
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  void *v22[2];
  uint64_t v23;
  uint64_t v24;
  void *v25[2];
  uint64_t v26;
  char v27;
  char v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  uint64_t v37;
  char v38;
  char v39;
  char v40;

  if (a2)
    return a2 == 0;
  v6 = atomic_load((unsigned __int8 *)&qword_254638DA0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254638DA0))
  {
    sub_20AF1E1D4();
    v8 = byte_254638DBF;
    if (byte_254638DBF >= 0)
      v9 = byte_254638DBF;
    else
      v9 = *((_QWORD *)&xmmword_254638DA8 + 1);
    v10 = v9 + 1;
    if (v9 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v10 >= 0x17)
    {
      v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v12 = v10 | 7;
      v13 = v12 + 1;
      v11 = (__int128 *)operator new(v12 + 1);
      *((_QWORD *)&xmmword_254638F88 + 1) = v9 + 1;
      unk_254638F98 = v13 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638F88 = v11;
    }
    else
    {
      unk_254638F98 = 0;
      xmmword_254638F88 = 0uLL;
      v11 = &xmmword_254638F88;
      byte_254638F9F = v9 + 1;
      if (!v9)
      {
LABEL_50:
        *(_WORD *)((char *)v11 + v9) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638F88, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638DA0);
        goto LABEL_3;
      }
    }
    if (v8 >= 0)
      v14 = &xmmword_254638DA8;
    else
      v14 = (__int128 *)xmmword_254638DA8;
    memmove(v11, v14, v9);
    goto LABEL_50;
  }
LABEL_3:
  if (byte_254638F9F < 0)
  {
    sub_20AEC60F4(v15, (void *)xmmword_254638F88, *((unint64_t *)&xmmword_254638F88 + 1));
  }
  else
  {
    *(_OWORD *)v15 = xmmword_254638F88;
    v16 = unk_254638F98;
  }
  v17 = 1;
  sub_20AECCECC(a1, (uint64_t)v15, (uint64_t)&v18);
  v29 = v18;
  LOBYTE(v30) = 0;
  v39 = 0;
  if (v28)
  {
    v32 = 0;
    if (v21)
    {
      v30 = v19;
      v31 = v20;
      v20 = 0;
      v19 = 0uLL;
      v32 = 1;
    }
    LOBYTE(v33) = 0;
    v38 = 0;
    if (v27)
    {
      v34 = v23;
      v33 = *(_OWORD *)v22;
      v22[0] = 0;
      v22[1] = 0;
      v35 = v24;
      *(_OWORD *)__p = *(_OWORD *)v25;
      v37 = v26;
      v23 = 0;
      v25[0] = 0;
      v25[1] = 0;
      v26 = 0;
      v38 = 1;
    }
    v39 = 1;
  }
  v40 = 0;
  sub_20AECB410(&v29, a3);
  if (!v40 && v39)
  {
    if (v38)
    {
      if (SHIBYTE(v37) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34) < 0)
        operator delete((void *)v33);
    }
    if (v32 && SHIBYTE(v31) < 0)
      operator delete((void *)v30);
  }
  if (v28)
  {
    if (v27)
    {
      if (SHIBYTE(v26) < 0)
        operator delete(v25[0]);
      if (SHIBYTE(v23) < 0)
        operator delete(v22[0]);
    }
    if (v21 && SHIBYTE(v20) < 0)
      operator delete((void *)v19);
  }
  if (v17 && SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  return a2 == 0;
}

void sub_20AF1CEE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638DA0);
  _Unwind_Resume(a1);
}

void sub_20AF1CEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECD704((uint64_t)&a32);
  sub_20AECCE40((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void VZLoggerDisable(uint64_t a1, const char *a2)
{
  if (!sub_20AEDCA40((uint64_t)"VZLoggerDisable", a1, 0))
    sub_20B07D4F8((uint64_t *)(a1 + 16), a2);
}

uint64_t VZSubLoggerDisable(uint64_t a1)
{
  uint64_t result;

  result = sub_20AF1CBB8((uint64_t)"VZSubLoggerDisable", a1, 0);
  if ((result & 1) == 0)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), 2);
  return result;
}

BOOL VZLoggerSetEnableState(uint64_t a1, const char *a2, uint64_t a3, CFErrorRef *a4)
{
  _BOOL8 v8;
  __int128 v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  char v18;
  char v19;
  char v20;

  if (sub_20AEDCA40((uint64_t)"VZLoggerSetEnableState", a1, a4))
    return 0;
  sub_20B07D63C(a1 + 16, a3, a2, (uint64_t)&v10);
  v8 = v20 != 0;
  if (v20)
    return v8;
  sub_20AECB410(&v10, a4);
  if (v20 || !v19)
    return v8;
  if (v18)
  {
    if (v17 < 0)
      operator delete(__p);
    if (v15 < 0)
      operator delete(v14);
  }
  if (!v13 || (v12 & 0x80000000) == 0)
    return v8;
  operator delete(v11);
  return v8;
}

void sub_20AF1D0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t VZLoggerSetEnableStates(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_20AEDCA40((uint64_t)"VZLoggerSetEnableStates", a1, 0);
  if ((result & 1) == 0)
  {
    result = sub_20AEFE3FC((uint64_t)"VZLoggerSetEnableStates", a2, 0);
    if ((result & 1) == 0)
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *(_QWORD *)(v5 + 16);
      if (v6)
      {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 104))(v6, a2 + 16);
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 16) + 104))(*(_QWORD *)(v5 + 16), a2 + 16);
      }
    }
  }
  return result;
}

BOOL VZSubLoggerSetEnableState(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  _BOOL8 v6;
  __int128 v8;
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  void *__p;
  char v15;
  char v16;
  char v17;
  char v18;

  if (sub_20AF1CBB8((uint64_t)"VZSubLoggerSetEnableState", a1, a3))
    return 0;
  sub_20B07E024(a1 + 8, a2, (uint64_t)&v8);
  v6 = v18 != 0;
  if (v18)
    return v6;
  sub_20AECB410(&v8, a3);
  if (v18 || !v17)
    return v6;
  if (v16)
  {
    if (v15 < 0)
      operator delete(__p);
    if (v13 < 0)
      operator delete(v12);
  }
  if (!v11 || (v10 & 0x80000000) == 0)
    return v6;
  operator delete(v9);
  return v6;
}

void sub_20AF1D280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void VZLoggerResetEnableStates(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (!sub_20AEDCA40((uint64_t)"VZLoggerResetEnableStates", a1, 0))
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      sub_20B21C02C(*(_QWORD *)(v3 + 32), 2, 0);
    }
    else
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      sub_20B21C02C(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 32), 2, 0);
    }
  }
}

uint64_t VZLoggerGet()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638CD8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638CD8))
    return qword_254638CD0;
  qword_254638CD0 = (uint64_t)VZLoggerCreate_0();
  __cxa_atexit((void (*)(void *))sub_20AF1D448, &qword_254638CD0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254638CD8);
  return qword_254638CD0;
}

uint64_t VZLoggerGetMutable()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638CD8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638CD8))
    return qword_254638CD0;
  qword_254638CD0 = (uint64_t)VZLoggerCreate_0();
  __cxa_atexit((void (*)(void *))sub_20AF1D448, &qword_254638CD0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254638CD8);
  return qword_254638CD0;
}

uint64_t *sub_20AF1D448(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return a1;
}

void VZLoggerLogData(uint64_t a1, const char *a2, uint64_t a3)
{
  if (!sub_20AF1BCCC((uint64_t)"VZLoggerLogData", a1) && !sub_20AED21B4((uint64_t)"VZLoggerLogData", a3, 0))
    sub_20B07DBB0((uint64_t *)(a1 + 16), a2, a3 + 32);
}

void VZSubLoggerLogData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[2];
  std::__shared_weak_count *v14;

  if (!sub_20AF1C76C((uint64_t)"VZSubLoggerLogData", a1) && !sub_20AED21B4((uint64_t)"VZSubLoggerLogData", a2, 0))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a2 + 456);
    v6 = *(std::__shared_weak_count **)(a2 + 464);
    v13[0] = &off_24C411E78;
    v13[1] = v7;
    v14 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    sub_20B07E314(v4, v5, (uint64_t)v13);
    v10 = v14;
    if (v14)
    {
      v11 = (unint64_t *)&v14->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_20AF1D5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t VZLoggerSync(uint64_t a1, CFErrorRef *a2)
{
  uint64_t v4;
  char v6[16];
  void *v7;
  char v8;
  char v9;
  void *v10;
  char v11;
  void *__p;
  char v13;
  char v14;
  char v15;
  char v16;

  if (sub_20AEDCA40((uint64_t)"VZLoggerSync", a1, a2))
    return 0;
  sub_20B07DCD0((uint64_t *)(a1 + 16), (uint64_t)v6);
  v4 = sub_20AED98A0((uint64_t)"VZLoggerSync", v6, 0, a2);
  if (v16 || !v15)
    return v4;
  if (v14)
  {
    if (v13 < 0)
      operator delete(__p);
    if (v11 < 0)
      operator delete(v10);
  }
  if (!v9 || (v8 & 0x80000000) == 0)
    return v4;
  operator delete(v7);
  return v4;
}

void sub_20AF1D6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AF1D6F8(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 40);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AF1D710(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 40);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AF1D738()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638D18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638D18))
    return qword_254638D10;
  qword_254638D10 = sub_20AECB130();
  __cxa_guard_release(&qword_254638D18);
  return qword_254638D10;
}

BOOL sub_20AF1D798(void *a1, void *lpsrc)
{
  void *v3;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F3EE8, 0);
  return v3 && v3 == a1;
}

CFTypeRef sub_20AF1D7E0(uint64_t a1)
{
  __int128 *v2;
  uint64_t v3;
  int v4;
  size_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  char v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  void *__dst[2];
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;

  v2 = sub_20AEE00CC();
  v27 = a1;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_20AEC0BD8(v3);
  v28 = (_QWORD *)v3;
  v29 = a1 + 16;
  v30 = (_QWORD *)(v3 + 16);
  sub_20AF60518((uint64_t)&v31, &v30, &v29);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(v3 + 112);
    v8 = *(_QWORD *)(v3 + 72);
    if (v7 < v8)
    {
      *(_QWORD *)(v3 + 112) = v8;
      v7 = v8;
    }
    v9 = *(const void **)(v3 + 64);
    v5 = v7 - (_QWORD)v9;
    if (v7 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v4 & 8) == 0)
    {
      v5 = 0;
      HIBYTE(v26) = 0;
      v6 = __dst;
      goto LABEL_14;
    }
    v9 = *(const void **)(v3 + 40);
    v5 = *(_QWORD *)(v3 + 56) - (_QWORD)v9;
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v6 = (void **)operator new(v10 + 1);
    __dst[1] = (void *)v5;
    v26 = v11 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_13;
  }
  HIBYTE(v26) = v5;
  v6 = __dst;
  if (v5)
LABEL_13:
    memmove(v6, v9, v5);
LABEL_14:
  *((_BYTE *)v6 + v5) = 0;
  v12 = v28;
  if (v28)
  {
    v13 = MEMORY[0x24BEDB7F0];
    v14 = *MEMORY[0x24BEDB7F0];
    *v28 = *MEMORY[0x24BEDB7F0];
    v15 = *(_QWORD *)(v13 + 72);
    *(_QWORD *)((char *)v12 + *(_QWORD *)(v14 - 24)) = *(_QWORD *)(v13 + 64);
    v12[3] = MEMORY[0x24BEDB848] + 16;
    v12[2] = v15;
    if (*((char *)v12 + 111) < 0)
      operator delete((void *)v12[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v12 + 16);
    MEMORY[0x20BD3583C](v12, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)v2, (uint64_t)" ", &v27, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v16 = cf;
  if (cf)
    CFRetain(cf);
  v17 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if ((v22 & 0x80000000) == 0)
        return v16;
      goto LABEL_27;
    }
  }
  if (v22 < 0)
LABEL_27:
    operator delete(__p);
  return v16;
}

void sub_20AF1DA90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  __int128 *v26;

  sub_20AEC147C((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  v26 = sub_20AEE00CC();
  sub_20AEC0D64(&__p, "failed to create description");
  sub_20AECD224((std::string::size_type)v26, (const void **)&__p, 0);
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20AF1DA74);
}

uint64_t sub_20AF1DB54(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 40));
}

uint64_t sub_20AF1DB60(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 48);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AF1DB78(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 48);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AF1DBA0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638D88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638D88))
    return qword_254638D80;
  qword_254638D80 = sub_20AECB130();
  __cxa_guard_release(&qword_254638D88);
  return qword_254638D80;
}

_QWORD *sub_20AF1DC00(uint64_t a1, void *lpsrc)
{
  _QWORD *result;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F3FC0, 0);
  if (result)
    return (_QWORD *)(*(_QWORD *)(a1 + 16) == result[2]);
  return result;
}

CFTypeRef sub_20AF1DC50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  size_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  char v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  void *__dst[2];
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;

  sub_20AF1E1D4();
  v27 = a1;
  v2 = operator new();
  *(_QWORD *)(v2 + 272) = 0;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  sub_20AEC0BD8(v2);
  v30 = (_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  v28 = (_QWORD *)v2;
  v29 = v3;
  sub_20AF60518((uint64_t)&v31, &v30, &v29);
  v4 = *(_DWORD *)(v2 + 120);
  if ((v4 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(v2 + 112);
    v8 = *(_QWORD *)(v2 + 72);
    if (v7 < v8)
    {
      *(_QWORD *)(v2 + 112) = v8;
      v7 = v8;
    }
    v9 = *(const void **)(v2 + 64);
    v5 = v7 - (_QWORD)v9;
    if (v7 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v4 & 8) == 0)
    {
      v5 = 0;
      HIBYTE(v26) = 0;
      v6 = __dst;
      goto LABEL_14;
    }
    v9 = *(const void **)(v2 + 40);
    v5 = *(_QWORD *)(v2 + 56) - (_QWORD)v9;
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v6 = (void **)operator new(v10 + 1);
    __dst[1] = (void *)v5;
    v26 = v11 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_13;
  }
  HIBYTE(v26) = v5;
  v6 = __dst;
  if (v5)
LABEL_13:
    memmove(v6, v9, v5);
LABEL_14:
  *((_BYTE *)v6 + v5) = 0;
  v12 = v28;
  if (v28)
  {
    v13 = MEMORY[0x24BEDB7F0];
    v14 = *MEMORY[0x24BEDB7F0];
    *v28 = *MEMORY[0x24BEDB7F0];
    v15 = *(_QWORD *)(v13 + 72);
    *(_QWORD *)((char *)v12 + *(_QWORD *)(v14 - 24)) = *(_QWORD *)(v13 + 64);
    v12[3] = MEMORY[0x24BEDB848] + 16;
    v12[2] = v15;
    if (*((char *)v12 + 111) < 0)
      operator delete((void *)v12[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v12 + 16);
    MEMORY[0x20BD3583C](v12, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)&xmmword_254638DA8, (uint64_t)" ", &v27, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v16 = cf;
  if (cf)
    CFRetain(cf);
  v17 = v24;
  if (!v24)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if ((v22 & 0x80000000) == 0)
      return v16;
  }
  else
  {
LABEL_26:
    if ((v22 & 0x80000000) == 0)
      return v16;
  }
  operator delete(__p);
  return v16;
}

uint64_t sub_20AF1DF08(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  const void *v36[2];
  char v37;
  uint64_t v38;

  sub_20AEC147C((uint64_t)&v38);
  if (v37 < 0)
    operator delete((void *)v36[0]);
  __cxa_begin_catch(a1);
  sub_20AF1E1D4();
  sub_20AEC0D64(v36, "failed to create description");
  sub_20AECD224((std::string::size_type)&xmmword_254638DA8, v36, 0);
  if (v37 < 0)
    operator delete((void *)v36[0]);
  __cxa_end_catch();
  return 0;
}

uint64_t sub_20AF1DFDC(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 48));
}

_QWORD *sub_20AF1DFE8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      sub_20AEC60B8();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[4 * (v5 >> 5)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = v3[3];
      v6[2] = v3[2];
      v6[3] = v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v3 += 4;
      v6 += 4;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_20AF1E0B0(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v9 = (std::__shared_weak_count *)*((_QWORD *)v4 - 3);
        if (v9)
        {
          v10 = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v4 -= 32;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_20AF1E164(char *a1)
{
  uint64_t v2;

  if (a1)
  {
    sub_20AF1E164(*(_QWORD *)a1);
    sub_20AF1E164(*((_QWORD *)a1 + 1));
    v2 = *((_QWORD *)a1 + 7);
    *((_QWORD *)a1 + 7) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void sub_20AF1E1D4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638CE0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638CE0))
  {
    sub_20AF1E28C();
    if (byte_254638DEF < 0)
    {
      sub_20AEC60F4(&xmmword_254638DA8, (void *)xmmword_254638DD8, *((unint64_t *)&xmmword_254638DD8 + 1));
    }
    else
    {
      xmmword_254638DA8 = xmmword_254638DD8;
      unk_254638DB8 = unk_254638DE8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638DA8, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638CE0);
  }
}

void sub_20AF1E274(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638CE0);
  _Unwind_Resume(a1);
}

void sub_20AF1E28C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254638CE8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638CE8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZSubLogger]", qword_254638DC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254638DC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638CE8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254638CF0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254638CF0))
    {
      sub_20B531658((uint64_t)qword_254638DC0, (uint64_t)&xmmword_254638DD8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638DD8, &dword_20AEBB000);
      __cxa_guard_release(&qword_254638CF0);
    }
  }
}

void sub_20AF1E35C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638CF0);
  _Unwind_Resume(a1);
}

void sub_20AF1E374(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638CE8);
  _Unwind_Resume(a1);
}

void sub_20AF1E38C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254638D00);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638D00))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vl::visual_logger::SubLogger]", qword_254638E08);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254638E08, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638D00);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254638D08);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254638D08))
    {
      sub_20B531658((uint64_t)qword_254638E08, (uint64_t)&xmmword_254638E20);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638E20, &dword_20AEBB000);
      __cxa_guard_release(&qword_254638D08);
    }
  }
}

void sub_20AF1E45C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638D08);
  _Unwind_Resume(a1);
}

void sub_20AF1E474(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638D00);
  _Unwind_Resume(a1);
}

_QWORD *VZLoggerCreate_0()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v2;
  char *v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  void **v12;
  void **v13;
  void *v14;
  char v16[16];
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  char v24;
  char v25;
  char v26;
  void *v27;
  void **v28;
  uint64_t v29;
  void *v30;
  char v31;
  char v32;
  char *v33;
  char *v34;
  char v35;

  v0 = operator new(0x88uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    v1 = v0;
    *(_OWORD *)v0 = 0u;
    v0[16] = 0;
    *((_OWORD *)v0 + 6) = 0u;
    *((_OWORD *)v0 + 7) = 0u;
    *((_OWORD *)v0 + 4) = 0u;
    *((_OWORD *)v0 + 5) = 0u;
    *((_OWORD *)v0 + 1) = 0u;
    *((_OWORD *)v0 + 2) = 0u;
    *((_OWORD *)v0 + 3) = 0u;
    *v0 = off_24C3F2180;
    LOBYTE(v33) = 0;
    v35 = 0;
    LOBYTE(v30) = 0;
    v32 = 0;
    sub_20B07B120(v0 + 2, (uint64_t)&v33, (uint64_t)&v30);
    if (v32 && v31 < 0)
      operator delete(v30);
    if (!v35)
      goto LABEL_23;
    v2 = v33;
    if (!v33)
      goto LABEL_23;
    v3 = v34;
    v4 = v33;
    if (v34 == v33)
    {
LABEL_22:
      v34 = v2;
      operator delete(v4);
LABEL_23:
      *((_DWORD *)v1 + 10) = 1;
      *v1 = &off_24C3F3E50;
      v1[1] = &unk_24C3F3EA0;
      v1[6] = 850045863;
      *(_OWORD *)(v1 + 7) = 0u;
      *(_OWORD *)(v1 + 9) = 0u;
      *(_OWORD *)(v1 + 11) = 0u;
      v1[16] = 0;
      v1[15] = 0;
      v1[13] = 0;
      v1[14] = v1 + 15;
      return v1;
    }
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
      if (!v5)
        goto LABEL_14;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
        if (v8)
        {
LABEL_15:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_14:
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
        if (v8)
          goto LABEL_15;
      }
      v3 -= 32;
      if (v3 == v2)
      {
        v4 = v33;
        goto LABEL_22;
      }
    }
  }
  v11 = (uint64_t *)sub_20AEE00CC();
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v16 = 0;
  v26 = 0;
  sub_20AECD798(v11, (__int128 **)&v27, (uint64_t)&v16, 0);
  if (v26 && v25)
  {
    if (v24)
    {
      if (v23 < 0)
        operator delete(__p);
      if (v21 < 0)
        operator delete(v20);
    }
    if (v19 && v18 < 0)
      operator delete(v17);
  }
  v12 = (void **)v27;
  if (v27)
  {
    v13 = v28;
    v14 = v27;
    if (v28 != v27)
    {
      do
      {
        if (*((char *)v13 - 1) < 0)
          operator delete(*(v13 - 3));
        v13 -= 3;
      }
      while (v13 != v12);
      v14 = v27;
    }
    v28 = v12;
    operator delete(v14);
  }
  return 0;
}

char **sub_20AF1E744(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  if (*((_BYTE *)a1 + 24))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 == v2)
      {
LABEL_18:
        a1[1] = v2;
        operator delete(v4);
        return a1;
      }
      while (1)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (!v5)
          goto LABEL_10;
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
          if (v8)
          {
LABEL_11:
            v9 = (unint64_t *)&v8->__shared_owners_;
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 - 1, v9));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
        }
        else
        {
LABEL_10:
          v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
          if (v8)
            goto LABEL_11;
        }
        v3 -= 32;
        if (v3 == v2)
        {
          v4 = *a1;
          goto LABEL_18;
        }
      }
    }
  }
  return a1;
}

void sub_20AF1E828(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  __int128 v6;
  uint64_t *v7;
  __int128 v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  _BYTE v12[16];
  void *__p;
  char v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  char v20;
  char v21;
  char v22;
  __int128 *v23;
  __int128 *v24;
  __int128 __dst;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AEE00CC();
  v5 = sub_20AEE888C();
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)*v5, v5[1]);
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v26 = v5[2];
    __dst = v6;
  }
  v7 = sub_20AF06DF8();
  if (*((char *)v7 + 23) < 0)
  {
    sub_20AEC60F4(&v27, (void *)*v7, v7[1]);
  }
  else
  {
    v8 = *(_OWORD *)v7;
    v28 = v7[2];
    v27 = v8;
  }
  sub_20AEC7620(&v23, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v12, a2);
  sub_20AECD798(v4, &v23, (uint64_t)v12, **a1);
  if (!v22 || !v21)
    goto LABEL_15;
  if (!v20)
    goto LABEL_12;
  if ((v19 & 0x80000000) == 0)
  {
    if ((v17 & 0x80000000) == 0)
      goto LABEL_12;
LABEL_29:
    operator delete(v16);
    if (!v15)
      goto LABEL_15;
    goto LABEL_13;
  }
  operator delete(v18);
  if (v17 < 0)
    goto LABEL_29;
LABEL_12:
  if (!v15)
    goto LABEL_15;
LABEL_13:
  if (v14 < 0)
    operator delete(__p);
LABEL_15:
  v9 = v23;
  if (v23)
  {
    v10 = v24;
    v11 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v10 - 1) < 0)
          operator delete(*((void **)v10 - 3));
        v10 = (__int128 *)((char *)v10 - 24);
      }
      while (v10 != v9);
      v11 = v23;
    }
    v24 = v9;
    operator delete(v11);
  }
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      return;
LABEL_27:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v27);
  if (SHIBYTE(v26) < 0)
    goto LABEL_27;
}

void sub_20AF1EA10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECDEE0((uint64_t)va);
  sub_20AEC2E90((void **)(v2 - 120));
  if (*(char *)(v2 - 49) < 0)
    operator delete(*(void **)(v2 - 72));
  if (*(char *)(v2 - 73) < 0)
  {
    operator delete(*(void **)(v2 - 96));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20AF1EA70(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_20AECEBD0(v4, v1 + 1);
    sub_20AECF558((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22C0, (void (*)(void *))sub_20AECF5A8);
  }
  return result;
}

void sub_20AF1EAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCE40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AF1EB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_20AECCE40((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_20AF1EB1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20AF1EB30()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638D20);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638D20))
  {
    sub_20AF1EBE8();
    if (byte_254638E7F < 0)
    {
      sub_20AEC60F4(&xmmword_254638E38, (void *)xmmword_254638E68, *((unint64_t *)&xmmword_254638E68 + 1));
    }
    else
    {
      xmmword_254638E38 = xmmword_254638E68;
      unk_254638E48 = unk_254638E78;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638E38, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638D20);
  }
}

void sub_20AF1EBD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638D20);
  _Unwind_Resume(a1);
}

void sub_20AF1EBE8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254638D28);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638D28))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vl::visual_logger::DestinationList]", qword_254638E50);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254638E50, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638D28);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254638D30);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254638D30))
    {
      sub_20B531658((uint64_t)qword_254638E50, (uint64_t)&xmmword_254638E68);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638E68, &dword_20AEBB000);
      __cxa_guard_release(&qword_254638D30);
    }
  }
}

void sub_20AF1ECB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638D30);
  _Unwind_Resume(a1);
}

void sub_20AF1ECD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638D28);
  _Unwind_Resume(a1);
}

void sub_20AF1ECE8(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  __int128 v6;
  unsigned __int8 v7;
  void **v8;
  void **v9;
  void *v10;
  uint64_t *v11;
  const void **v12;
  int v13;
  size_t v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  _BYTE v20[16];
  void *__p;
  char v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  void *v31;
  void **v32;
  __int128 __dst;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AEE00CC();
  v5 = sub_20AEE888C();
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)*v5, v5[1]);
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v34 = v5[2];
    __dst = v6;
  }
  v7 = atomic_load((unsigned __int8 *)&qword_254638D38);
  if ((v7 & 1) != 0 || !__cxa_guard_acquire(&qword_254638D38))
    goto LABEL_5;
  v11 = sub_20AEF9C28();
  v12 = (const void **)v11;
  v13 = *((char *)v11 + 23);
  if (v13 >= 0)
    v14 = *((unsigned __int8 *)v11 + 23);
  else
    v14 = v11[1];
  v15 = v14 + 1;
  if (v14 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v16 = (__int128 *)operator new(v17 + 1);
    *((_QWORD *)&xmmword_254638E80 + 1) = v14 + 1;
    unk_254638E90 = v18 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254638E80 = v16;
    goto LABEL_43;
  }
  v16 = &xmmword_254638E80;
  unk_254638E90 = 0;
  xmmword_254638E80 = 0uLL;
  byte_254638E97 = v14 + 1;
  if (v14)
  {
LABEL_43:
    if (v13 >= 0)
      v19 = v12;
    else
      v19 = *v12;
    memmove(v16, v19, v14);
  }
  *(_WORD *)((char *)v16 + v14) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638E80, &dword_20AEBB000);
  __cxa_guard_release(&qword_254638D38);
LABEL_5:
  if (byte_254638E97 < 0)
  {
    sub_20AEC60F4(&v35, (void *)xmmword_254638E80, *((unint64_t *)&xmmword_254638E80 + 1));
  }
  else
  {
    v35 = xmmword_254638E80;
    v36 = unk_254638E90;
  }
  sub_20AEC7620(&v31, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v20, a2);
  sub_20AECD798(v4, (__int128 **)&v31, (uint64_t)v20, **a1);
  if (!v30 || !v29)
    goto LABEL_16;
  if (!v28)
    goto LABEL_13;
  if ((v27 & 0x80000000) == 0)
  {
    if ((v25 & 0x80000000) == 0)
      goto LABEL_13;
LABEL_30:
    operator delete(v24);
    if (!v23)
      goto LABEL_16;
    goto LABEL_14;
  }
  operator delete(v26);
  if (v25 < 0)
    goto LABEL_30;
LABEL_13:
  if (!v23)
    goto LABEL_16;
LABEL_14:
  if (v22 < 0)
    operator delete(__p);
LABEL_16:
  v8 = (void **)v31;
  if (v31)
  {
    v9 = v32;
    v10 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = v31;
    }
    v32 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v35);
  if (SHIBYTE(v34) < 0)
    goto LABEL_28;
}

void sub_20AF1EFF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_254638D38);
  if (*(char *)(v1 - 121) < 0)
  {
    operator delete(*(void **)(v1 - 144));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AF1F068(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  __int128 *v8;
  const void **v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  const void *v17;
  void *__p;
  void **v19;
  void *__dst[2];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254638D40);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_254638D40))
    goto LABEL_2;
  v8 = sub_20AF068A4();
  v9 = (const void **)v8;
  v10 = *((char *)v8 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v8 + 23);
  else
    v11 = *((_QWORD *)v8 + 1);
  v12 = v11 + 6;
  if (v11 + 6 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (v12 >= 0x17)
  {
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    v15 = v14 + 1;
    v16 = (char *)operator new(v14 + 1);
    *((_QWORD *)&xmmword_254638E98 + 1) = v11 + 6;
    unk_254638EA8 = v15 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254638E98 = v16;
    *(_DWORD *)v16 = 1936617315;
    *((_WORD *)v16 + 2) = 8308;
    v13 = v16 + 6;
    goto LABEL_27;
  }
  unk_254638EA8 = 0;
  xmmword_254638E98 = 0x2074736E6F63uLL;
  byte_254638EAF = v11 + 6;
  v13 = (char *)&xmmword_254638E98 + 6;
  if (v11)
  {
LABEL_27:
    if (v10 >= 0)
      v17 = v9;
    else
      v17 = *v9;
    memmove(v13, v17, v11);
  }
  v13[v11] = 0;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638E98, &dword_20AEBB000);
  __cxa_guard_release(&qword_254638D40);
LABEL_2:
  if (byte_254638EAF < 0)
  {
    sub_20AEC60F4(__dst, (void *)xmmword_254638E98, *((unint64_t *)&xmmword_254638E98 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254638E98;
    v21 = unk_254638EA8;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, (std::string *)&qword_254638EC8, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v19;
    v7 = __p;
    if (v19 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v19 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v21) < 0)
    operator delete(__dst[0]);
}

void sub_20AF1F2B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638D40);
  _Unwind_Resume(a1);
}

void sub_20AF1F2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90((void **)&a9);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AF1F2FC(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  __int128 v6;
  unsigned __int8 v7;
  uint64_t *v8;
  __int128 v9;
  uint64_t *v10;
  __int128 v11;
  void **v12;
  void **v13;
  void *v14;
  _BYTE v15[16];
  void *__p;
  char v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  char v23;
  char v24;
  char v25;
  void *v26;
  void **v27;
  void *__dst[2];
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AEE00CC();
  v5 = sub_20AEE888C();
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AEC60F4(__dst, (void *)*v5, v5[1]);
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v29 = v5[2];
    *(_OWORD *)__dst = v6;
  }
  v7 = atomic_load((unsigned __int8 *)&qword_254638D48);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254638D48))
  {
    sub_20AF1F6E0();
    if (byte_254638EDF < 0)
    {
      sub_20AEC60F4(&xmmword_254638EB0, (void *)qword_254638EC8, unk_254638ED0);
    }
    else
    {
      xmmword_254638EB0 = *(_OWORD *)&qword_254638EC8;
      unk_254638EC0 = unk_254638ED8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638EB0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638D48);
  }
  if (byte_254638EC7 < 0)
  {
    sub_20AEC60F4(&v30, (void *)xmmword_254638EB0, *((unint64_t *)&xmmword_254638EB0 + 1));
  }
  else
  {
    v30 = xmmword_254638EB0;
    v31 = unk_254638EC0;
  }
  v8 = sub_20AEE0FFC();
  if (*((char *)v8 + 23) < 0)
  {
    sub_20AEC60F4(&v32, (void *)*v8, v8[1]);
  }
  else
  {
    v9 = *(_OWORD *)v8;
    v33 = v8[2];
    v32 = v9;
  }
  v10 = sub_20AF06DF8();
  if (*((char *)v10 + 23) < 0)
  {
    sub_20AEC60F4(&v34, (void *)*v10, v10[1]);
  }
  else
  {
    v11 = *(_OWORD *)v10;
    v35 = v10[2];
    v34 = v11;
  }
  sub_20AEC7620(&v26, (uint64_t)__dst, 4uLL);
  sub_20AECF9B0(v15, a2);
  sub_20AECD798(v4, (__int128 **)&v26, (uint64_t)v15, **a1);
  if (v25 && v24)
  {
    if (!v23)
      goto LABEL_19;
    if (v22 < 0)
    {
      operator delete(v21);
      if ((v20 & 0x80000000) == 0)
      {
LABEL_19:
        if (!v18)
          goto LABEL_22;
LABEL_20:
        if (v17 < 0)
          operator delete(__p);
        goto LABEL_22;
      }
    }
    else if ((v20 & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(v19);
    if (!v18)
      goto LABEL_22;
    goto LABEL_20;
  }
LABEL_22:
  v12 = (void **)v26;
  if (v26)
  {
    v13 = v27;
    v14 = v26;
    if (v27 != v26)
    {
      do
      {
        if (*((char *)v13 - 1) < 0)
          operator delete(*(v13 - 3));
        v13 -= 3;
      }
      while (v13 != v12);
      v14 = v26;
    }
    v27 = v12;
    operator delete(v14);
  }
  if (SHIBYTE(v35) < 0)
  {
    operator delete((void *)v34);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
    {
LABEL_32:
      if ((SHIBYTE(v31) & 0x80000000) == 0)
        goto LABEL_33;
      goto LABEL_37;
    }
  }
  else if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
    goto LABEL_32;
  }
  operator delete((void *)v32);
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v29) & 0x80000000) == 0)
      return;
LABEL_38:
    operator delete(__dst[0]);
    return;
  }
LABEL_37:
  operator delete((void *)v30);
  if (SHIBYTE(v29) < 0)
    goto LABEL_38;
}

void sub_20AF1F60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  void **v52;

  __cxa_guard_abort(&qword_254638D48);
  while (1)
  {
    if (*((char *)v52 - 1) < 0)
      operator delete(*(v52 - 3));
    v52 -= 3;
    if (v52 == &a29)
      _Unwind_Resume(a1);
  }
}

void sub_20AF1F6E0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254638D50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638D50))
  {
    sub_20AF1F7B4(__p);
    sub_20AF1F068((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254638EC8, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638D50);
  }
}

void sub_20AF1F774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254638D50);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254638D50);
  _Unwind_Resume(a1);
}

void sub_20AF1F7B4(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254638D58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254638D58))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::esn::OptionalRef<const cv3d::vl::visual_logger::FileExportOptions>]", qword_254638EE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254638EE0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638D58);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254638D60);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254638D60))
  {
    v5 = sub_20AED4780(qword_254638EE0, "<", 0);
    sub_20AED467C(qword_254638EE0, 0, v5, qword_254638EF8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254638EF8, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638D60);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254638D68);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254638D68))
  {
    sub_20B531658((uint64_t)qword_254638EF8, (uint64_t)&xmmword_254638F10);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638F10, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638D68);
  }
  if (byte_254638F27 < 0)
  {
    sub_20AEC60F4(__dst, (void *)xmmword_254638F10, *((unint64_t *)&xmmword_254638F10 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254638F10;
    __dst[2] = unk_254638F20;
  }
}

void sub_20AF1F948(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638D68);
  _Unwind_Resume(a1);
}

void sub_20AF1F960(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638D60);
  _Unwind_Resume(a1);
}

void sub_20AF1F978(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638D58);
  _Unwind_Resume(a1);
}

void sub_20AF1F990()
{
  unsigned __int8 v0;
  __int128 *v1;
  const void **v2;
  int v3;
  size_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const void *v10;

  v0 = atomic_load((unsigned __int8 *)&qword_254638D78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638D78))
  {
    v1 = sub_20AEE00CC();
    v2 = (const void **)v1;
    v3 = *((char *)v1 + 23);
    if (v3 >= 0)
      v4 = *((unsigned __int8 *)v1 + 23);
    else
      v4 = *((_QWORD *)v1 + 1);
    v5 = v4 + 6;
    if (v4 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v5 >= 0x17)
    {
      v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v7 = v5 | 7;
      v8 = v7 + 1;
      v9 = (char *)operator new(v7 + 1);
      qword_254638F48 = v4 + 6;
      unk_254638F50 = v8 | 0x8000000000000000;
      qword_254638F40 = (uint64_t)v9;
      *(_DWORD *)v9 = 1936617315;
      *((_WORD *)v9 + 2) = 8308;
      v6 = v9 + 6;
    }
    else
    {
      qword_254638F48 = 0;
      unk_254638F50 = 0;
      qword_254638F40 = 0x2074736E6F63;
      byte_254638F57 = v4 + 6;
      v6 = (char *)&qword_254638F40 + 6;
      if (!v4)
      {
LABEL_18:
        v6[v4] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254638F40, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638D78);
        return;
      }
    }
    if (v3 >= 0)
      v10 = v2;
    else
      v10 = *v2;
    memmove(v6, v10, v4);
    goto LABEL_18;
  }
}

void sub_20AF1FB00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638D78);
  _Unwind_Resume(a1);
}

void sub_20AF1FB18()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254638D98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638D98))
  {
    sub_20AF1E1D4();
    v1 = byte_254638DBF;
    if (byte_254638DBF >= 0)
      v2 = byte_254638DBF;
    else
      v2 = *((_QWORD *)&xmmword_254638DA8 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254638F78 = v2 + 6;
      unk_254638F80 = v6 | 0x8000000000000000;
      qword_254638F70 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254638F78 = 0;
      unk_254638F80 = 0;
      qword_254638F70 = 0x2074736E6F63;
      byte_254638F87 = v2 + 6;
      v4 = (char *)&qword_254638F70 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254638F70, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638D98);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254638DA8;
    else
      v8 = (__int128 *)xmmword_254638DA8;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20AF1FC80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638D98);
  _Unwind_Resume(a1);
}

uint64_t sub_20AF1FC98(uint64_t a1)
{
  sub_20AF22AAC(a1 + 232, *(_QWORD **)(a1 + 240));
  sub_20AF22AAC(a1 + 208, *(_QWORD **)(a1 + 216));
  return a1;
}

void sub_20AF1FCD0(uint64_t a1)
{
  sub_20AF22AAC(a1 + 224, *(_QWORD **)(a1 + 232));
  sub_20AF22AAC(a1 + 200, *(_QWORD **)(a1 + 208));
}

void sub_20AF1FD00(uint64_t a1)
{
  sub_20AF22AAC(a1 + 232, *(_QWORD **)(a1 + 240));
  sub_20AF22AAC(a1 + 208, *(_QWORD **)(a1 + 216));
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AF1FD48(uint64_t a1)
{
  sub_20AF22AAC(a1 + 224, *(_QWORD **)(a1 + 232));
  sub_20AF22AAC(a1 + 200, *(_QWORD **)(a1 + 208));
  JUMPOUT(0x20BD3583CLL);
}

uint64_t VZMeshGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638FA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638FA8))
    return qword_254638FA0;
  qword_254638FA0 = sub_20AECB130();
  __cxa_guard_release(&qword_254638FA8);
  return qword_254638FA0;
}

_QWORD *VZDataCreateWithMesh(uint64_t a1, __int128 *a2, CFErrorRef *a3)
{
  _QWORD *v5;
  int v6;
  __int128 *v7;
  _QWORD *v8;
  __int128 v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  CFErrorRef **v21;
  CFErrorRef *v22;
  char v23[208];
  void *v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  char v29;
  void *v30;
  char v31;
  char v32;
  char v33;
  char v34;
  __int128 v35[13];
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  void *__p;
  char v43;
  char v44;
  char v45;
  char v46;
  __int128 v47;
  __int128 v48;
  char v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  char v55;
  char v56;
  unsigned __int8 v57;
  uint64_t v58;

  v5 = (_QWORD *)a1;
  v58 = *MEMORY[0x24BDAC8D0];
  if (sub_20AF20368((uint64_t)"VZDataCreateWithMesh", a1, a3))
    return 0;
  sub_20AED18DC(a2, v23);
  v21 = &v22;
  v22 = a3;
  sub_20AED4D3C(v35, (uint64_t)v23);
  sub_20B082790((uint64_t)(v5 + 2), v35, (uint64_t)&v47);
  if (v46)
  {
    if (v45)
    {
      if (v44 && v43 < 0)
        operator delete(__p);
      if (v41 && v40 < 0)
        operator delete(v39);
      if (v38 && v37 < 0)
        operator delete(v36);
    }
    sub_20AED30E0((uint64_t)v35);
  }
  v6 = v57;
  if (!v57)
  {
    v10 = v47;
    sub_20AECEBD0(&v11, &v48);
    v20 = 1;
    sub_20AF22E24(&v21, (uint64_t)&v10);
    if (!v20 || !v19)
      goto LABEL_39;
    if (v18)
    {
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
    }
    if (!v13 || (v12 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_37;
  }
  v7 = (__int128 *)sub_20AED4AC0((uint64_t)&v47);
  v8 = operator new(0x240uLL, MEMORY[0x24BEDB6B8]);
  if (!v8)
  {
    LOBYTE(v10) = 0;
    v20 = 0;
    sub_20AF22E24(&v21, (uint64_t)&v10);
    if (!v20 || !v19)
      goto LABEL_38;
    if (v18)
    {
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
    }
    v5 = 0;
    if (!v13 || (v12 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_37:
    operator delete(v11);
LABEL_38:
    v5 = 0;
    goto LABEL_39;
  }
  v5 = v8;
  *v8 = off_24C3F2180;
  sub_20AED5300((uint64_t)(v8 + 2), v7);
  *v5 = &off_24C3F2BA0;
  v5[2] = &unk_24C3F2BF0;
  *((_OWORD *)v5 + 35) = 0u;
LABEL_39:
  if (v57)
  {
    sub_20AED5474((uint64_t)&v47);
  }
  else if (v56)
  {
    if (v55)
    {
      if (v54 < 0)
        operator delete(v53);
      if (v52 < 0)
        operator delete(v51);
    }
    if (v50 && v49 < 0)
      operator delete((void *)v48);
  }
  if (!v6)
    v5 = 0;
  if (v34)
  {
    if (v33)
    {
      if (v32 && v31 < 0)
        operator delete(v30);
      if (v29 && v28 < 0)
        operator delete(v27);
      if (v26 && v25 < 0)
        operator delete(v24);
    }
    sub_20AED30E0((uint64_t)v23);
  }
  return v5;
}

void sub_20AF2016C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AF20174);
  _Unwind_Resume(a1);
}

void sub_20AF20184(_Unwind_Exception *a1, int a2)
{
  const std::logic_error *exception_ptr;
  void *v5;
  std::string *p_what;
  std::string *v7;
  std::logic_error v8;
  char v9;
  char v10;
  __int128 v11;
  __int128 v12[6];
  std::__fs::filesystem::filesystem_error v13[3];
  CFErrorRef **v14[102];
  __int128 v15;
  _BYTE v16[104];
  char v17;

  if (a2)
  {
    sub_20AED1998((uint64_t)&STACK[0x2F0]);
    if (a2 == 3)
    {
      exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
      std::logic_error::logic_error(&v8, exception_ptr);
      v8.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_begin_catch(a1);
      v7 = (std::string *)std::logic_error::what(&v8);
      sub_20AED4C84(v13, (const char **)&v7);
      sub_20B099E24((__int128 *)v13, (uint64_t)&v11);
      v15 = v11;
      sub_20AECEBD0(v16, v12);
      v17 = 1;
      sub_20AF22E24(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      sub_20AECCE40((uint64_t)&v11);
      if (LOBYTE(v13[0].__ec_.__cat_))
      {
        if (*((char *)&v13[0].__ec_.__val_ + 7) < 0)
          operator delete(v13[0].__vftable);
      }
      MEMORY[0x20BD35020](&v8);
      __cxa_end_catch();
    }
    else if (a2 == 2)
    {
      v5 = __cxa_get_exception_ptr(a1);
      sub_20AED4C1C(&v13[0], (uint64_t)v5);
      __cxa_begin_catch(a1);
      p_what = &v13[0].__storage_.__ptr_->__what_;
      if (SHIBYTE(v13[0].__storage_.__ptr_->__what_.__r_.__value_.__r.__words[2]) < 0)
        p_what = (std::string *)p_what->__r_.__value_.__r.__words[0];
      v7 = p_what;
      sub_20AED4C84(&v8, (const char **)&v7);
      sub_20B09A738((__int128 *)&v8, (uint64_t)&v11);
      v15 = v11;
      sub_20AECEBD0(v16, v12);
      v17 = 1;
      sub_20AF22E24(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      sub_20AECCE40((uint64_t)&v11);
      if (v10 && v9 < 0)
        operator delete(v8.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error(v13);
      __cxa_end_catch();
    }
    else
    {
      __cxa_begin_catch(a1);
      LOBYTE(v15) = 0;
      v17 = 0;
      sub_20AF22E24(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      __cxa_end_catch();
    }
    JUMPOUT(0x20AF2006CLL);
  }
  _Unwind_Resume(a1);
}

void sub_20AF2019C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AF201A8);
  _Unwind_Resume(a1);
}

void sub_20AF20350(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20AF20358);
  sub_20AEC01C0(a1);
}

BOOL sub_20AF20368(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  unsigned __int8 v6;
  int v8;
  size_t v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15[2];
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  void *v22[2];
  uint64_t v23;
  uint64_t v24;
  void *v25[2];
  uint64_t v26;
  char v27;
  char v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  uint64_t v37;
  char v38;
  char v39;
  char v40;

  if (a2)
    return a2 == 0;
  v6 = atomic_load((unsigned __int8 *)&qword_254638FB0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254638FB0))
  {
    sub_20AF22AEC();
    v8 = byte_254639017;
    if (byte_254639017 >= 0)
      v9 = byte_254639017;
    else
      v9 = qword_254639008;
    v10 = v9 + 1;
    if (v9 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v10 >= 0x17)
    {
      v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v12 = v10 | 7;
      v13 = v12 + 1;
      v11 = (__int128 *)operator new(v12 + 1);
      *((_QWORD *)&xmmword_254638FE8 + 1) = v9 + 1;
      unk_254638FF8 = v13 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254638FE8 = v11;
    }
    else
    {
      unk_254638FF8 = 0;
      xmmword_254638FE8 = 0uLL;
      v11 = &xmmword_254638FE8;
      byte_254638FFF = v9 + 1;
      if (!v9)
      {
LABEL_50:
        *(_WORD *)((char *)v11 + v9) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254638FE8, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638FB0);
        goto LABEL_3;
      }
    }
    if (v8 >= 0)
      v14 = &qword_254639000;
    else
      v14 = (uint64_t *)qword_254639000;
    memmove(v11, v14, v9);
    goto LABEL_50;
  }
LABEL_3:
  if (byte_254638FFF < 0)
  {
    sub_20AEC60F4(v15, (void *)xmmword_254638FE8, *((unint64_t *)&xmmword_254638FE8 + 1));
  }
  else
  {
    *(_OWORD *)v15 = xmmword_254638FE8;
    v16 = unk_254638FF8;
  }
  v17 = 1;
  sub_20AECCECC(a1, (uint64_t)v15, (uint64_t)&v18);
  v29 = v18;
  LOBYTE(v30) = 0;
  v39 = 0;
  if (v28)
  {
    v32 = 0;
    if (v21)
    {
      v30 = v19;
      v31 = v20;
      v20 = 0;
      v19 = 0uLL;
      v32 = 1;
    }
    LOBYTE(v33) = 0;
    v38 = 0;
    if (v27)
    {
      v34 = v23;
      v33 = *(_OWORD *)v22;
      v22[0] = 0;
      v22[1] = 0;
      v35 = v24;
      *(_OWORD *)__p = *(_OWORD *)v25;
      v37 = v26;
      v23 = 0;
      v25[0] = 0;
      v25[1] = 0;
      v26 = 0;
      v38 = 1;
    }
    v39 = 1;
  }
  v40 = 0;
  sub_20AECB410(&v29, a3);
  if (!v40 && v39)
  {
    if (v38)
    {
      if (SHIBYTE(v37) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34) < 0)
        operator delete((void *)v33);
    }
    if (v32 && SHIBYTE(v31) < 0)
      operator delete((void *)v30);
  }
  if (v28)
  {
    if (v27)
    {
      if (SHIBYTE(v26) < 0)
        operator delete(v25[0]);
      if (SHIBYTE(v23) < 0)
        operator delete(v22[0]);
    }
    if (v21 && SHIBYTE(v20) < 0)
      operator delete((void *)v19);
  }
  if (v17 && SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  return a2 == 0;
}

void sub_20AF20690(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638FB0);
  _Unwind_Resume(a1);
}

void sub_20AF206A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECD704((uint64_t)&a32);
  sub_20AECCE40((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_OWORD *VZDataGetMesh(uint64_t a1, CFErrorRef *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v21;
  void *v22;
  char v23;
  char v24;
  void *v25;
  char v26;
  void *__p;
  char v28;
  char v29;
  char v30;
  char v31;
  __int128 v32;
  __int128 v33[11];
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  CFErrorRef **v41;
  CFErrorRef *v42;

  if (sub_20AED21B4((uint64_t)"VZDataGetMesh", a1, a2))
    return 0;
  v4 = *(_OWORD **)(a1 + 568);
  if (!v4)
  {
    v41 = &v42;
    v42 = a2;
    sub_20B084E54(a1 + 32, (uint64_t)&v32);
    if (v40)
    {
      v5 = operator new(0x108uLL, MEMORY[0x24BEDB6B8]);
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)v5 = off_24C3F2180;
        v6 = v33[8];
        v5[9] = v33[7];
        v5[10] = v6;
        v7 = v33[10];
        v5[11] = v33[9];
        v5[12] = v7;
        v8 = v33[4];
        v5[5] = v33[3];
        v5[6] = v8;
        v9 = v33[6];
        v5[7] = v33[5];
        v5[8] = v9;
        v10 = v33[0];
        v5[1] = v32;
        v5[2] = v10;
        v11 = v33[2];
        v5[3] = v33[1];
        v5[4] = v11;
        v12 = v34;
        v13 = v35;
        *((_QWORD *)v5 + 27) = v35;
        v14 = (char *)v5 + 216;
        *((_QWORD *)v5 + 26) = v12;
        v15 = v36;
        *((_QWORD *)v5 + 28) = v36;
        if (v15)
        {
          *(_QWORD *)(v13 + 16) = v14;
          v34 = &v35;
          v35 = 0;
          v36 = 0;
        }
        else
        {
          *((_QWORD *)v5 + 26) = v14;
        }
        v16 = v37;
        v17 = v38;
        *((_QWORD *)v5 + 30) = v38;
        v18 = (char *)(v5 + 15);
        *((_QWORD *)v5 + 29) = v16;
        v19 = v39;
        *((_QWORD *)v5 + 31) = v39;
        if (v19)
        {
          *(_QWORD *)(v17 + 16) = v18;
          v37 = &v38;
          v38 = 0;
          v39 = 0;
        }
        else
        {
          *((_QWORD *)v5 + 29) = v18;
        }
        *((_DWORD *)v5 + 64) = 1;
        *(_QWORD *)v5 = &off_24C3F4020;
        *((_QWORD *)v5 + 1) = &unk_24C3F4070;
      }
      else
      {
        LOBYTE(v21) = 0;
        v31 = 0;
        sub_20AF231BC(&v41, (uint64_t)&v21);
        if (v31 && v30)
        {
          if (v29)
          {
            if (v28 < 0)
              operator delete(__p);
            if (v26 < 0)
              operator delete(v25);
          }
          if (v24 && v23 < 0)
            operator delete(v22);
        }
      }
      sub_20AF23374((uint64_t)&v32);
    }
    else
    {
      v21 = v32;
      sub_20AECEBD0(&v22, v33);
      v31 = 1;
      sub_20AF231BC(&v41, (uint64_t)&v21);
      if (v31 && v30)
      {
        if (v29)
        {
          if (v28 < 0)
            operator delete(__p);
          if (v26 < 0)
            operator delete(v25);
        }
        if (v24 && v23 < 0)
          operator delete(v22);
      }
      sub_20AF23374((uint64_t)&v32);
      v4 = 0;
    }
    *(_QWORD *)(a1 + 568) = v4;
  }
  return v4;
}

void sub_20AF20950(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a68;
  void *a69;
  char a71;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  char a77;
  __int16 a78;
  __int16 a79;
  uint64_t v79;
  const std::logic_error *exception_ptr;
  const char *v83;
  size_t v84;
  size_t v85;
  void **p_dst;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  const char *v92;
  size_t v93;
  const char *v94;
  std::logic_error_vtbl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  sub_20AF23374((uint64_t)&a68);
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v83 = std::logic_error::what(&a10);
    v84 = strlen(v83);
    if (v84 <= 0x7FFFFFFFFFFFFFF7)
    {
      v85 = v84;
      if (v84 >= 0x17)
      {
        v96 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v84 | 7) != 0x17)
          v96 = v84 | 7;
        v97 = v96 + 1;
        p_dst = (void **)operator new(v96 + 1);
        __dst_8 = v85;
        *(_QWORD *)&a38 = v97 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v84;
        p_dst = (void **)&__dst;
        if (!v84)
        {
LABEL_41:
          *((_BYTE *)p_dst + v85) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a68 = a13;
          sub_20AECEBD0(&a69, &a14);
          LOBYTE(a79) = 1;
          sub_20AF231BC((CFErrorRef ***)(v79 - 64), (uint64_t)&a68);
          if ((_BYTE)a79 && (_BYTE)a78)
          {
            if (a77)
            {
              if (a76 < 0)
                operator delete(a75);
              if (a74 < 0)
                operator delete(a73);
            }
            if (a72 && a71 < 0)
              operator delete(a69);
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_92;
        }
      }
      memmove(p_dst, v83, v85);
      goto LABEL_41;
    }
LABEL_91:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    LOBYTE(a68) = 0;
    LOBYTE(a79) = 0;
    sub_20AF231BC((CFErrorRef ***)(v79 - 64), (uint64_t)&a68);
    if ((_BYTE)a79 && (_BYTE)a78)
    {
      if (a77)
      {
        if (a76 < 0)
          operator delete(a75);
        if (a74 < 0)
          operator delete(a73);
      }
      if (a72 && a71 < 0)
        operator delete(a69);
    }
    __cxa_end_catch();
LABEL_92:
    JUMPOUT(0x20AF20860);
  }
  v87 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v87);
  a38 = *((_OWORD *)v87 + 1);
  v89 = *((_QWORD *)v87 + 4);
  v88 = *((_QWORD *)v87 + 5);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  a39 = v89;
  a40 = v88;
  if (v88)
  {
    v90 = (unint64_t *)(v88 + 8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  __cxa_begin_catch(a1);
  v92 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v92 = *(const char **)v92;
  v93 = strlen(v92);
  if (v93 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_91;
  v94 = (const char *)v93;
  if (v93 >= 0x17)
  {
    v98 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v93 | 7) != 0x17)
      v98 = v93 | 7;
    v99 = v98 + 1;
    v95 = (std::logic_error_vtbl *)operator new(v98 + 1);
    a10.__imp_.__imp_ = v94;
    a11 = v99 | 0x8000000000000000;
    a10.__vftable = v95;
  }
  else
  {
    HIBYTE(a11) = v93;
    v95 = (std::logic_error_vtbl *)&a10;
    if (!v93)
    {
LABEL_68:
      v94[(_QWORD)v95] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a68 = a13;
      sub_20AECEBD0(&a69, &a14);
      LOBYTE(a79) = 1;
      sub_20AF231BC((CFErrorRef ***)(v79 - 64), (uint64_t)&a68);
      if ((_BYTE)a79 && (_BYTE)a78)
      {
        if (a77)
        {
          if (a76 < 0)
            operator delete(a75);
          if (a74 < 0)
            operator delete(a73);
        }
        if (a72 && a71 < 0)
          operator delete(a69);
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_92;
    }
  }
  memmove(v95, v92, (size_t)v94);
  goto LABEL_68;
}

char *VZMeshCreate()
{
  char *result;
  __int128 *v1;
  __int128 *v2;
  __int128 *v3;
  _BYTE v4[16];
  void *v5;
  char v6;
  char v7;
  void *v8;
  char v9;
  void *__p;
  char v11;
  char v12;
  char v13;
  char v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;

  result = (char *)operator new(0x108uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    *((_QWORD *)result + 2) = 0;
    *(_OWORD *)(result + 24) = xmmword_20B5B20E0;
    *((_QWORD *)result + 5) = 0;
    *((_QWORD *)result + 6) = 0;
    *(_OWORD *)(result + 56) = xmmword_20B5B20E0;
    *((_QWORD *)result + 9) = 0;
    *((_QWORD *)result + 10) = 0;
    *(_OWORD *)(result + 88) = xmmword_20B5B20E0;
    *((_QWORD *)result + 13) = 0;
    *((_QWORD *)result + 14) = 0;
    *(_OWORD *)(result + 120) = xmmword_20B5B20E0;
    *((_QWORD *)result + 17) = 0;
    *((_QWORD *)result + 18) = 0;
    *(_OWORD *)(result + 152) = xmmword_20B5B20E0;
    *((_QWORD *)result + 21) = 0;
    *((_QWORD *)result + 22) = 0;
    *(_OWORD *)(result + 184) = xmmword_20B5B20E0;
    *((_QWORD *)result + 27) = 0;
    *((_QWORD *)result + 25) = 0;
    *((_QWORD *)result + 26) = result + 216;
    *((_QWORD *)result + 31) = 0;
    *((_QWORD *)result + 32) = 1;
    *((_QWORD *)result + 30) = 0;
    *((_QWORD *)result + 28) = 0;
    *((_QWORD *)result + 29) = result + 240;
    *(_QWORD *)result = &off_24C3F4020;
    *((_QWORD *)result + 1) = &unk_24C3F4070;
  }
  else
  {
    sub_20AF22C6C();
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v4[0] = 0;
    v14 = 0;
    sub_20AECD798((uint64_t *)&xmmword_254639018, &v15, (uint64_t)v4, 0);
    if (v14 && v13)
    {
      if (v12)
      {
        if (v11 < 0)
          operator delete(__p);
        if (v9 < 0)
          operator delete(v8);
      }
      if (v7 && v6 < 0)
        operator delete(v5);
    }
    v1 = v15;
    if (v15)
    {
      v2 = v16;
      v3 = v15;
      if (v16 != v15)
      {
        do
        {
          if (*((char *)v2 - 1) < 0)
            operator delete(*((void **)v2 - 3));
          v2 = (__int128 *)((char *)v2 - 24);
        }
        while (v2 != v1);
        v3 = v15;
      }
      v16 = v1;
      operator delete(v3);
    }
    return 0;
  }
  return result;
}

double VZMeshSetVertices(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;
  int v7;
  uint64_t v8;

  if (!sub_20AF210B8((uint64_t)"VZMeshSetVertices", a1))
  {
    if (a2)
    {
      if (a3)
      {
        if ((_DWORD)a3)
          v7 = 3;
        else
          v7 = 0;
        if ((_DWORD)a3)
          v8 = 3;
        else
          v8 = 0;
        if (v7 * (_DWORD)a3 == -1
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        *(_QWORD *)(a1 + 16) = a2;
        *(_QWORD *)(a1 + 24) = (a3 << 32) | 3;
        *(_QWORD *)(a1 + 32) = (v8 << 32) | 1;
        *(_DWORD *)(a1 + 40) = a3;
        *(_DWORD *)(a1 + 44) = v7;
      }
      else
      {
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)&result = 3;
        *(_OWORD *)(a1 + 24) = xmmword_20B5B20E0;
        *(_QWORD *)(a1 + 40) = 0;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)&result = 3;
      *(_OWORD *)(a1 + 24) = xmmword_20B5B20E0;
      *(_QWORD *)(a1 + 40) = 0;
    }
  }
  return result;
}

BOOL sub_20AF210B8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v7;
  size_t v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  char v37;
  char v38;
  char v39;

  if (a2)
    return a2 == 0;
  v4 = atomic_load((unsigned __int8 *)&qword_254638FE0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254638FE0))
  {
    sub_20AF22C6C();
    v7 = byte_25463902F;
    if (byte_25463902F >= 0)
      v8 = byte_25463902F;
    else
      v8 = *((_QWORD *)&xmmword_254639018 + 1);
    v9 = v8 + 1;
    if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v9 >= 0x17)
    {
      v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v11 = v9 | 7;
      v12 = v11 + 1;
      v10 = (__int128 *)operator new(v11 + 1);
      *((_QWORD *)&xmmword_254639078 + 1) = v8 + 1;
      unk_254639088 = v12 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254639078 = v10;
    }
    else
    {
      unk_254639088 = 0;
      xmmword_254639078 = 0uLL;
      v10 = &xmmword_254639078;
      byte_25463908F = v8 + 1;
      if (!v8)
      {
LABEL_53:
        *(_WORD *)((char *)v10 + v8) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254639078, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638FE0);
        goto LABEL_3;
      }
    }
    if (v7 >= 0)
      v13 = &xmmword_254639018;
    else
      v13 = (__int128 *)xmmword_254639018;
    memmove(v10, v13, v8);
    goto LABEL_53;
  }
LABEL_3:
  if (byte_25463908F < 0)
  {
    sub_20AEC60F4(v14, (void *)xmmword_254639078, *((unint64_t *)&xmmword_254639078 + 1));
  }
  else
  {
    *(_OWORD *)v14 = xmmword_254639078;
    v15 = unk_254639088;
  }
  v16 = 1;
  sub_20AECCECC(a1, (uint64_t)v14, (uint64_t)&v17);
  v28 = v17;
  LOBYTE(v29) = 0;
  v38 = 0;
  if (v27)
  {
    v31 = 0;
    if (v20)
    {
      v29 = v18;
      v30 = v19;
      v19 = 0;
      v18 = 0uLL;
      v31 = 1;
    }
    LOBYTE(v32) = 0;
    v37 = 0;
    if (v26)
    {
      v33 = v22;
      v32 = *(_OWORD *)v21;
      v21[0] = 0;
      v21[1] = 0;
      v34 = v23;
      *(_OWORD *)__p = *(_OWORD *)v24;
      v36 = v25;
      v22 = 0;
      v24[0] = 0;
      v24[1] = 0;
      v25 = 0;
      v37 = 1;
    }
    v38 = 1;
  }
  v39 = 0;
  v5 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v28);
  if (!v39 && v38)
  {
    if (v37)
    {
      if (SHIBYTE(v36) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
    }
    if (v31 && SHIBYTE(v30) < 0)
      operator delete((void *)v29);
  }
  if (v27)
  {
    if (v26)
    {
      if (SHIBYTE(v25) < 0)
        operator delete(v24[0]);
      if (SHIBYTE(v22) < 0)
        operator delete(v21[0]);
    }
    if (v20 && SHIBYTE(v19) < 0)
      operator delete((void *)v18);
  }
  if (v16 && SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  return a2 == 0;
}

void sub_20AF2142C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638FE0);
  _Unwind_Resume(a1);
}

void sub_20AF21444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double VZMeshSetFaces(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;
  int v7;
  uint64_t v8;

  if (!sub_20AF210B8((uint64_t)"VZMeshSetFaces", a1))
  {
    if (a2)
    {
      if (a3)
      {
        if ((_DWORD)a3)
          v7 = 3;
        else
          v7 = 0;
        if ((_DWORD)a3)
          v8 = 3;
        else
          v8 = 0;
        if (v7 * (_DWORD)a3 == -1
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        *(_QWORD *)(a1 + 48) = a2;
        *(_QWORD *)(a1 + 56) = (a3 << 32) | 3;
        *(_QWORD *)(a1 + 64) = (v8 << 32) | 1;
        *(_DWORD *)(a1 + 72) = a3;
        *(_DWORD *)(a1 + 76) = v7;
      }
      else
      {
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)&result = 3;
        *(_OWORD *)(a1 + 56) = xmmword_20B5B20E0;
        *(_QWORD *)(a1 + 72) = 0;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)&result = 3;
      *(_OWORD *)(a1 + 56) = xmmword_20B5B20E0;
      *(_QWORD *)(a1 + 72) = 0;
    }
  }
  return result;
}

double VZMeshSetVertexNormals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;
  int v7;
  uint64_t v8;

  if (!sub_20AF210B8((uint64_t)"VZMeshSetVertexNormals", a1))
  {
    if (a2)
    {
      if (a3)
      {
        if ((_DWORD)a3)
          v7 = 3;
        else
          v7 = 0;
        if ((_DWORD)a3)
          v8 = 3;
        else
          v8 = 0;
        if (v7 * (_DWORD)a3 == -1
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        *(_QWORD *)(a1 + 144) = a2;
        *(_QWORD *)(a1 + 152) = (a3 << 32) | 3;
        *(_QWORD *)(a1 + 160) = (v8 << 32) | 1;
        *(_DWORD *)(a1 + 168) = a3;
        *(_DWORD *)(a1 + 172) = v7;
      }
      else
      {
        *(_QWORD *)(a1 + 144) = 0;
        *(_QWORD *)&result = 3;
        *(_OWORD *)(a1 + 152) = xmmword_20B5B20E0;
        *(_QWORD *)(a1 + 168) = 0;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 144) = 0;
      *(_QWORD *)&result = 3;
      *(_OWORD *)(a1 + 152) = xmmword_20B5B20E0;
      *(_QWORD *)(a1 + 168) = 0;
    }
  }
  return result;
}

double VZMeshSetFaceNormals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;
  int v7;
  uint64_t v8;

  if (!sub_20AF210B8((uint64_t)"VZMeshSetFaceNormals", a1))
  {
    if (a2)
    {
      if (a3)
      {
        if ((_DWORD)a3)
          v7 = 3;
        else
          v7 = 0;
        if ((_DWORD)a3)
          v8 = 3;
        else
          v8 = 0;
        if (v7 * (_DWORD)a3 == -1
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        *(_QWORD *)(a1 + 176) = a2;
        *(_QWORD *)(a1 + 184) = (a3 << 32) | 3;
        *(_QWORD *)(a1 + 192) = (v8 << 32) | 1;
        *(_DWORD *)(a1 + 200) = a3;
        *(_DWORD *)(a1 + 204) = v7;
      }
      else
      {
        *(_QWORD *)(a1 + 176) = 0;
        *(_QWORD *)&result = 3;
        *(_OWORD *)(a1 + 184) = xmmword_20B5B20E0;
        *(_QWORD *)(a1 + 200) = 0;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)&result = 3;
      *(_OWORD *)(a1 + 184) = xmmword_20B5B20E0;
      *(_QWORD *)(a1 + 200) = 0;
    }
  }
  return result;
}

double VZMeshSetVertexColors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;
  int v7;
  uint64_t v8;

  if (!sub_20AF210B8((uint64_t)"VZMeshSetVertexColors", a1))
  {
    if (a2)
    {
      if (a3)
      {
        if ((_DWORD)a3)
          v7 = 3;
        else
          v7 = 0;
        if ((_DWORD)a3)
          v8 = 3;
        else
          v8 = 0;
        if (v7 * (_DWORD)a3 == -1
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        *(_QWORD *)(a1 + 80) = a2;
        *(_QWORD *)(a1 + 88) = (a3 << 32) | 3;
        *(_QWORD *)(a1 + 96) = (v8 << 32) | 1;
        *(_DWORD *)(a1 + 104) = a3;
        *(_DWORD *)(a1 + 108) = v7;
      }
      else
      {
        *(_QWORD *)(a1 + 80) = 0;
        *(_QWORD *)&result = 3;
        *(_OWORD *)(a1 + 88) = xmmword_20B5B20E0;
        *(_QWORD *)(a1 + 104) = 0;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)&result = 3;
      *(_OWORD *)(a1 + 88) = xmmword_20B5B20E0;
      *(_QWORD *)(a1 + 104) = 0;
    }
  }
  return result;
}

double VZMeshSetFaceColors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;
  int v7;
  uint64_t v8;

  if (!sub_20AF210B8((uint64_t)"VZMeshSetFaceColors", a1))
  {
    if (a2)
    {
      if (a3)
      {
        if ((_DWORD)a3)
          v7 = 3;
        else
          v7 = 0;
        if ((_DWORD)a3)
          v8 = 3;
        else
          v8 = 0;
        if (v7 * (_DWORD)a3 == -1
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        *(_QWORD *)(a1 + 112) = a2;
        *(_QWORD *)(a1 + 120) = (a3 << 32) | 3;
        *(_QWORD *)(a1 + 128) = (v8 << 32) | 1;
        *(_DWORD *)(a1 + 136) = a3;
        *(_DWORD *)(a1 + 140) = v7;
      }
      else
      {
        *(_QWORD *)(a1 + 112) = 0;
        *(_QWORD *)&result = 3;
        *(_OWORD *)(a1 + 120) = xmmword_20B5B20E0;
        *(_QWORD *)(a1 + 136) = 0;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 112) = 0;
      *(_QWORD *)&result = 3;
      *(_OWORD *)(a1 + 120) = xmmword_20B5B20E0;
      *(_QWORD *)(a1 + 136) = 0;
    }
  }
  return result;
}

uint64_t VZMeshSetVertexLabels(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int8 a5)
{
  if (sub_20AF210B8((uint64_t)"VZMeshSetVertexLabels", a1))
    return 0;
  else
    return sub_20B080F98((uint64_t ***)(a1 + 208), a2, a3, a4, a5);
}

uint64_t VZMeshSetFaceLabels(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int8 a5)
{
  if (sub_20AF210B8((uint64_t)"VZMeshSetFaceLabels", a1))
    return 0;
  else
    return sub_20B080F98((uint64_t ***)(a1 + 232), a2, a3, a4, a5);
}

uint64_t VZMeshGetVertices(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF20368((uint64_t)"VZMeshGetVertices", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t VZMeshGetVertexCount(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF20368((uint64_t)"VZMeshGetVertexCount", a1, 0);
  result = 0;
  if (!v2)
    return *(unsigned int *)(a1 + 28);
  return result;
}

uint64_t VZMeshGetFaces(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF20368((uint64_t)"VZMeshGetFaces", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(a1 + 48);
  return result;
}

uint64_t VZMeshGetFaceCount(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF20368((uint64_t)"VZMeshGetFaceCount", a1, 0);
  result = 0;
  if (!v2)
    return *(unsigned int *)(a1 + 60);
  return result;
}

uint64_t VZMeshGetVertexNormals(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF20368((uint64_t)"VZMeshGetVertexNormals", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(a1 + 144);
  return result;
}

uint64_t VZMeshGetFaceNormals(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF20368((uint64_t)"VZMeshGetFaceNormals", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(a1 + 176);
  return result;
}

uint64_t VZMeshGetVertexNormalCount(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF20368((uint64_t)"VZMeshGetVertexNormalCount", a1, 0);
  result = 0;
  if (!v2)
    return *(unsigned int *)(a1 + 156);
  return result;
}

uint64_t VZMeshGetFaceNormalCount(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF20368((uint64_t)"VZMeshGetFaceNormalCount", a1, 0);
  result = 0;
  if (!v2)
    return *(unsigned int *)(a1 + 188);
  return result;
}

uint64_t VZMeshGetVertexColors(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF20368((uint64_t)"VZMeshGetVertexColors", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(a1 + 80);
  return result;
}

uint64_t VZMeshGetFaceColors(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF20368((uint64_t)"VZMeshGetFaceColors", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(a1 + 112);
  return result;
}

uint64_t VZMeshGetVertexColorCount(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF20368((uint64_t)"VZMeshGetVertexColorCount", a1, 0);
  result = 0;
  if (!v2)
    return *(unsigned int *)(a1 + 92);
  return result;
}

uint64_t VZMeshGetFaceColorCount(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF20368((uint64_t)"VZMeshGetFaceColorCount", a1, 0);
  result = 0;
  if (!v2)
    return *(unsigned int *)(a1 + 124);
  return result;
}

uint64_t VZMeshGetVertexLabelListCount(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF20368((uint64_t)"VZMeshGetVertexLabelListCount", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(a1 + 224);
  return result;
}

uint64_t VZMeshGetFaceLabelListCount(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF20368((uint64_t)"VZMeshGetFaceLabelListCount", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(a1 + 248);
  return result;
}

uint64_t VZMeshGetVertexLabelType(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char v6[16];
  void *v7;
  char v8;
  char v9;
  void *v10;
  char v11;
  void *__p;
  char v13;
  char v14;
  char v15;
  char v16;

  if (sub_20AF20368((uint64_t)"VZMeshGetVertexLabelType", a1, 0))
    return 0;
  sub_20B081230(a1 + 16, a2, (uint64_t)v6);
  v4 = sub_20AF21FC8((uint64_t)"VZMeshGetVertexLabelType", v6);
  if (v16 || !v15)
    return v4;
  if (v14)
  {
    if (v13 < 0)
      operator delete(__p);
    if (v11 < 0)
      operator delete(v10);
  }
  if (!v9 || (v8 & 0x80000000) == 0)
    return v4;
  operator delete(v7);
  return v4;
}

void sub_20AF21FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AF21FC8(uint64_t a1, char *a2)
{
  unsigned __int8 v4;
  void *v5;
  char v6;
  __int128 v7;
  void *v8;
  char v9;
  char v10;
  void *v11;
  char v12;
  void *__p;
  char v14;
  char v15;
  char v16;
  uint64_t v17;

  v17 = a1;
  if (a2[120])
    return *(unsigned __int16 *)a2;
  sub_20AEDBA04("in function ", (const char *)&v17);
  sub_20B529470(a2, &v5, (uint64_t)&v7);
  v4 = atomic_load((unsigned __int8 *)&qword_254630258);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254630258))
  {
    __cxa_atexit((void (*)(void *))sub_20AECE2D8, &unk_254630168, &dword_20AEBB000);
    __cxa_guard_release(&qword_254630258);
  }
  sub_20AECB50C((uint64_t)&unk_254630168, &v7);
  if (v16)
  {
    if (v15)
    {
      if (v14 < 0)
        operator delete(__p);
      if (v12 < 0)
        operator delete(v11);
    }
    if (v10 && v9 < 0)
      operator delete(v8);
  }
  if (v6 < 0)
    operator delete(v5);
  return 0;
}

void sub_20AF220FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t VZMeshGetFaceLabelType(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char v6[16];
  void *v7;
  char v8;
  char v9;
  void *v10;
  char v11;
  void *__p;
  char v13;
  char v14;
  char v15;
  char v16;

  if (sub_20AF20368((uint64_t)"VZMeshGetFaceLabelType", a1, 0))
    return 0;
  sub_20B0816F4(a1 + 16, a2, (uint64_t)v6);
  v4 = sub_20AF21FC8((uint64_t)"VZMeshGetFaceLabelType", v6);
  if (v16 || !v15)
    return v4;
  if (v14)
  {
    if (v13 < 0)
      operator delete(__p);
    if (v11 < 0)
      operator delete(v10);
  }
  if (!v9 || (v8 & 0x80000000) == 0)
    return v4;
  operator delete(v7);
  return v4;
}

void sub_20AF221E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t VZMeshGetVertexLabels(uint64_t a1, unsigned int a2)
{
  BOOL v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;

  v4 = sub_20AF20368((uint64_t)"VZMeshGetVertexLabels", a1, 0);
  result = 0;
  if (!v4)
  {
    v8 = *(_QWORD *)(a1 + 216);
    v7 = a1 + 216;
    v6 = v8;
    if (!v8)
      return 0;
    v9 = v7;
    do
    {
      v10 = *(unsigned __int16 *)(v6 + 32);
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = (uint64_t *)v6;
      else
        v12 = (uint64_t *)(v6 + 8);
      if (v11)
        v9 = v6;
      v6 = *v12;
    }
    while (*v12);
    if (v9 == v7)
    {
      return 0;
    }
    else if (*(unsigned __int16 *)(v9 + 32) <= a2)
    {
      return *(_QWORD *)(v9 + 56);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t VZMeshGetFaceLabels(uint64_t a1, unsigned int a2)
{
  BOOL v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;

  v4 = sub_20AF20368((uint64_t)"VZMeshGetFaceLabels", a1, 0);
  result = 0;
  if (!v4)
  {
    v8 = *(_QWORD *)(a1 + 240);
    v7 = a1 + 240;
    v6 = v8;
    if (!v8)
      return 0;
    v9 = v7;
    do
    {
      v10 = *(unsigned __int16 *)(v6 + 32);
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = (uint64_t *)v6;
      else
        v12 = (uint64_t *)(v6 + 8);
      if (v11)
        v9 = v6;
      v6 = *v12;
    }
    while (*v12);
    if (v9 == v7)
    {
      return 0;
    }
    else if (*(unsigned __int16 *)(v9 + 32) <= a2)
    {
      return *(_QWORD *)(v9 + 56);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t VZMeshGetVertexLabelCount(uint64_t a1, unsigned int a2)
{
  BOOL v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  char v13;

  v4 = sub_20AF20368((uint64_t)"VZMeshGetVertexLabelCount", a1, 0);
  result = 0;
  if (!v4)
  {
    v8 = *(_QWORD *)(a1 + 216);
    v7 = a1 + 216;
    v6 = v8;
    if (!v8)
      return 0;
    v9 = v7;
    do
    {
      v10 = *(unsigned __int16 *)(v6 + 32);
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = (uint64_t *)v6;
      else
        v12 = (uint64_t *)(v6 + 8);
      if (v11)
        v9 = v6;
      v6 = *v12;
    }
    while (*v12);
    if (v9 == v7)
    {
      return 0;
    }
    else if (*(unsigned __int16 *)(v9 + 32) <= a2)
    {
      result = sub_20B07E8F0((unsigned __int8 *)(v9 + 40));
      if (!v13)
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t VZMeshGetFaceLabelCount(uint64_t a1, unsigned int a2)
{
  BOOL v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  char v13;

  v4 = sub_20AF20368((uint64_t)"VZMeshGetFaceLabelCount", a1, 0);
  result = 0;
  if (!v4)
  {
    v8 = *(_QWORD *)(a1 + 240);
    v7 = a1 + 240;
    v6 = v8;
    if (!v8)
      return 0;
    v9 = v7;
    do
    {
      v10 = *(unsigned __int16 *)(v6 + 32);
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = (uint64_t *)v6;
      else
        v12 = (uint64_t *)(v6 + 8);
      if (v11)
        v9 = v6;
      v6 = *v12;
    }
    while (*v12);
    if (v9 == v7)
    {
      return 0;
    }
    else if (*(unsigned __int16 *)(v9 + 32) <= a2)
    {
      result = sub_20B07E8F0((unsigned __int8 *)(v9 + 40));
      if (!v13)
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t VZMeshGetVertexLabelValueType(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;

  if (sub_20AF20368((uint64_t)"VZMeshGetVertexLabelValueType", a1, 0))
    return 255;
  v6 = *(_QWORD *)(a1 + 216);
  v5 = a1 + 216;
  v4 = v6;
  if (!v6)
    return 255;
  v7 = v5;
  do
  {
    v8 = *(unsigned __int16 *)(v4 + 32);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v5 || *(unsigned __int16 *)(v7 + 32) > a2)
    return 255;
  else
    return *(unsigned __int8 *)(v7 + 40);
}

uint64_t VZMeshGetFaceLabelValueType(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;

  if (sub_20AF20368((uint64_t)"VZMeshGetFaceLabelValueType", a1, 0))
    return 255;
  v6 = *(_QWORD *)(a1 + 240);
  v5 = a1 + 240;
  v4 = v6;
  if (!v6)
    return 255;
  v7 = v5;
  do
  {
    v8 = *(unsigned __int16 *)(v4 + 32);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v5 || *(unsigned __int16 *)(v7 + 32) > a2)
    return 255;
  else
    return *(unsigned __int8 *)(v7 + 40);
}

uint64_t sub_20AF225D4(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 256);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AF225EC(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 256);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AF22614()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638FA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254638FA8))
    return qword_254638FA0;
  qword_254638FA0 = sub_20AECB130();
  __cxa_guard_release(&qword_254638FA8);
  return qword_254638FA0;
}

void *sub_20AF22674(uint64_t a1, void *lpsrc)
{
  void *result;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F40B8, 0);
  if (result)
    return (void *)sub_20B081BB8(a1 + 16, (uint64_t)result + 16);
  return result;
}

uint64_t sub_20AF226CC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  const void *v20[2];
  char v21;

  __cxa_begin_catch(a1);
  sub_20AF22C6C();
  sub_20AEC0D64(v20, "failed to compare equal");
  sub_20AECD224((std::string::size_type)&xmmword_254639018, v20, 0);
  if (v21 < 0)
    operator delete((void *)v20[0]);
  __cxa_end_catch();
  return 0;
}

CFTypeRef sub_20AF22724(uint64_t a1)
{
  uint64_t v2;
  int v3;
  size_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  char v21;
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  void *__dst[2];
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  sub_20AF22C6C();
  v26 = a1;
  v2 = operator new();
  *(_QWORD *)(v2 + 272) = 0;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  sub_20AEC0BD8(v2);
  v27 = (_QWORD *)v2;
  sub_20B0822F0((int *)(v2 + 16), a1 + 16);
  v3 = *(_DWORD *)(v2 + 120);
  if ((v3 & 0x10) != 0)
  {
    v6 = *(_QWORD *)(v2 + 112);
    v7 = *(_QWORD *)(v2 + 72);
    if (v6 < v7)
    {
      *(_QWORD *)(v2 + 112) = v7;
      v6 = v7;
    }
    v8 = *(const void **)(v2 + 64);
    v4 = v6 - (_QWORD)v8;
    if (v6 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      HIBYTE(v25) = 0;
      v5 = __dst;
      goto LABEL_14;
    }
    v8 = *(const void **)(v2 + 40);
    v4 = *(_QWORD *)(v2 + 56) - (_QWORD)v8;
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v5 = (void **)operator new(v9 + 1);
    __dst[1] = (void *)v4;
    v25 = v10 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_13;
  }
  HIBYTE(v25) = v4;
  v5 = __dst;
  if (v4)
LABEL_13:
    memmove(v5, v8, v4);
LABEL_14:
  *((_BYTE *)v5 + v4) = 0;
  v11 = v27;
  if (v27)
  {
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *v27 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)((char *)v11 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    v11[3] = MEMORY[0x24BEDB848] + 16;
    v11[2] = v14;
    if (*((char *)v11 + 111) < 0)
      operator delete((void *)v11[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v11 + 16);
    MEMORY[0x20BD3583C](v11, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)&xmmword_254639018, (uint64_t)" ", &v26, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v15 = cf;
  if (cf)
    CFRetain(cf);
  v16 = v23;
  if (!v23)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if ((v21 & 0x80000000) == 0)
      return v15;
  }
  else
  {
LABEL_26:
    if ((v21 & 0x80000000) == 0)
      return v15;
  }
  operator delete(__p);
  return v15;
}

uint64_t sub_20AF229CC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  const void *v32[2];
  char v33;
  uint64_t v34;

  sub_20AEC147C((uint64_t)&v34);
  if (v33 < 0)
    operator delete((void *)v32[0]);
  __cxa_begin_catch(a1);
  sub_20AF22C6C();
  sub_20AEC0D64(v32, "failed to create description");
  sub_20AECD224((std::string::size_type)&xmmword_254639018, v32, 0);
  if (v33 < 0)
    operator delete((void *)v32[0]);
  __cxa_end_catch();
  return 0;
}

uint64_t sub_20AF22AA0(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 256));
}

void sub_20AF22AAC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20AF22AAC(a1, *a2);
    sub_20AF22AAC(a1, a2[1]);
    operator delete(a2);
  }
}

void sub_20AF22AEC()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254638FB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638FB8))
  {
    sub_20AF22C6C();
    v1 = byte_25463902F;
    if (byte_25463902F >= 0)
      v2 = byte_25463902F;
    else
      v2 = *((_QWORD *)&xmmword_254639018 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254639008 = v2 + 6;
      unk_254639010 = v6 | 0x8000000000000000;
      qword_254639000 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254639008 = 0;
      unk_254639010 = 0;
      qword_254639000 = 0x2074736E6F63;
      byte_254639017 = v2 + 6;
      v4 = (char *)&qword_254639000 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254639000, &dword_20AEBB000);
        __cxa_guard_release(&qword_254638FB8);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254639018;
    else
      v8 = (__int128 *)xmmword_254639018;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20AF22C54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638FB8);
  _Unwind_Resume(a1);
}

void sub_20AF22C6C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254638FC0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638FC0))
  {
    sub_20AF22D24();
    if (byte_25463905F < 0)
    {
      sub_20AEC60F4(&xmmword_254639018, (void *)xmmword_254639048, *((unint64_t *)&xmmword_254639048 + 1));
    }
    else
    {
      xmmword_254639018 = xmmword_254639048;
      unk_254639028 = unk_254639058;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254639018, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638FC0);
  }
}

void sub_20AF22D0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638FC0);
  _Unwind_Resume(a1);
}

void sub_20AF22D24()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254638FC8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254638FC8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZMesh]", qword_254639030);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254639030, &dword_20AEBB000);
    __cxa_guard_release(&qword_254638FC8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254638FD0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254638FD0))
    {
      sub_20B531658((uint64_t)qword_254639030, (uint64_t)&xmmword_254639048);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254639048, &dword_20AEBB000);
      __cxa_guard_release(&qword_254638FD0);
    }
  }
}

void sub_20AF22DF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638FD0);
  _Unwind_Resume(a1);
}

void sub_20AF22E0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638FC8);
  _Unwind_Resume(a1);
}

void sub_20AF22E24(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  __int128 *v6;
  __int128 v7;
  void **v8;
  void **v9;
  void *v10;
  int v11;
  size_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _BYTE v18[16];
  void *__p;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  char v28;
  void *v29;
  void **v30;
  __int128 __dst;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AED5104();
  v5 = atomic_load((unsigned __int8 *)&qword_254638FD8);
  if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254638FD8))
    goto LABEL_2;
  sub_20AF22AEC();
  v11 = byte_254639017;
  if (byte_254639017 >= 0)
    v12 = byte_254639017;
  else
    v12 = qword_254639008;
  v13 = v12 + 1;
  if (v12 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    v14 = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&xmmword_254639060 + 1) = v12 + 1;
    unk_254639070 = v16 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254639060 = v14;
    goto LABEL_43;
  }
  v14 = &xmmword_254639060;
  unk_254639070 = 0;
  xmmword_254639060 = 0uLL;
  byte_254639077 = v12 + 1;
  if (v12)
  {
LABEL_43:
    if (v11 >= 0)
      v17 = &qword_254639000;
    else
      v17 = (uint64_t *)qword_254639000;
    memmove(v14, v17, v12);
  }
  *(_WORD *)((char *)v14 + v12) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254639060, &dword_20AEBB000);
  __cxa_guard_release(&qword_254638FD8);
LABEL_2:
  if (byte_254639077 < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_254639060, *((unint64_t *)&xmmword_254639060 + 1));
  }
  else
  {
    __dst = xmmword_254639060;
    v32 = unk_254639070;
  }
  v6 = sub_20AED3F9C();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v33, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v34 = *((_QWORD *)v6 + 2);
    v33 = v7;
  }
  sub_20AEC7620(&v29, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v18, a2);
  sub_20AECD798(v4, (__int128 **)&v29, (uint64_t)v18, **a1);
  if (!v28 || !v27)
    goto LABEL_16;
  if (!v26)
    goto LABEL_13;
  if ((v25 & 0x80000000) == 0)
  {
    if ((v23 & 0x80000000) == 0)
      goto LABEL_13;
LABEL_30:
    operator delete(v22);
    if (!v21)
      goto LABEL_16;
    goto LABEL_14;
  }
  operator delete(v24);
  if (v23 < 0)
    goto LABEL_30;
LABEL_13:
  if (!v21)
    goto LABEL_16;
LABEL_14:
  if (v20 < 0)
    operator delete(__p);
LABEL_16:
  v8 = (void **)v29;
  if (v29)
  {
    v9 = v30;
    v10 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = v29;
    }
    v30 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v33);
  if (SHIBYTE(v32) < 0)
    goto LABEL_28;
}

void sub_20AF23144(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254638FD8);
  _Unwind_Resume(a1);
}

void sub_20AF2315C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  sub_20AECDEE0((uint64_t)&a9);
  sub_20AEC2E90(&a25);
  if (*(char *)(v25 - 97) < 0)
    operator delete(*(void **)(v25 - 120));
  if (*(char *)(v25 - 121) < 0)
  {
    operator delete(*(void **)(v25 - 144));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AF231BC(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  _BYTE v9[16];
  void *__p;
  char v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  char v18;
  char v19;
  __int128 *v20;
  __int128 *v21;
  __int128 __dst;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  sub_20AF22C6C();
  v4 = sub_20AED6ED4();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v23 = v4[2];
    __dst = v5;
  }
  sub_20AEC7620(&v20, (uint64_t)&__dst, 1uLL);
  sub_20AECF9B0(v9, a2);
  sub_20AECD798((uint64_t *)&xmmword_254639018, &v20, (uint64_t)v9, **a1);
  if (!v19 || !v18)
    goto LABEL_12;
  if (!v17)
    goto LABEL_9;
  if ((v16 & 0x80000000) == 0)
  {
    if ((v14 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_24:
    operator delete(v13);
    if (!v12)
      goto LABEL_12;
    goto LABEL_10;
  }
  operator delete(v15);
  if (v14 < 0)
    goto LABEL_24;
LABEL_9:
  if (!v12)
    goto LABEL_12;
LABEL_10:
  if (v11 < 0)
    operator delete(__p);
LABEL_12:
  v6 = v20;
  if (v20)
  {
    v7 = v21;
    v8 = v20;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*((void **)v7 - 3));
        v7 = (__int128 *)((char *)v7 - 24);
      }
      while (v7 != v6);
      v8 = v20;
    }
    v21 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__dst);
}

void sub_20AF23338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECDEE0((uint64_t)va);
  sub_20AEC2E90((void **)(v2 - 72));
  if (*(char *)(v2 - 25) < 0)
    operator delete(*(void **)(v2 - 48));
  _Unwind_Resume(a1);
}

uint64_t sub_20AF23374(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 240))
  {
    sub_20AF22AAC(a1 + 216, *(_QWORD **)(a1 + 224));
    sub_20AF22AAC(a1 + 192, *(_QWORD **)(a1 + 200));
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_8;
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_12:
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_12;
LABEL_8:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_9:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_20AF23420(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AF23488(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AF234E4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AF2354C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t VZNumberGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254639098);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254639098))
    return qword_254639090;
  qword_254639090 = sub_20AECB130();
  __cxa_guard_release(&qword_254639098);
  return qword_254639090;
}

char **VZDataCreateWithNumber(uint64_t a1, __int128 *a2, CFErrorRef *a3)
{
  char **v5;
  int v6;
  __int128 *v7;
  char **v8;
  __int128 v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  CFErrorRef **v21;
  CFErrorRef *v22;
  char v23[208];
  void *v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  char v29;
  void *v30;
  char v31;
  char v32;
  char v33;
  char v34;
  __int128 v35[13];
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  void *__p;
  char v43;
  char v44;
  char v45;
  char v46;
  __int128 v47;
  __int128 v48;
  char v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  char v55;
  char v56;
  unsigned __int8 v57;
  uint64_t v58;

  v5 = (char **)a1;
  v58 = *MEMORY[0x24BDAC8D0];
  if (sub_20AF23B88((uint64_t)"VZDataCreateWithNumber", a1, a3))
    return 0;
  sub_20AED18DC(a2, v23);
  v21 = &v22;
  v22 = a3;
  sub_20AED4D3C(v35, (uint64_t)v23);
  sub_20B08CD7C(v5 + 2, v35, (uint64_t)&v47);
  if (v46)
  {
    if (v45)
    {
      if (v44 && v43 < 0)
        operator delete(__p);
      if (v41 && v40 < 0)
        operator delete(v39);
      if (v38 && v37 < 0)
        operator delete(v36);
    }
    sub_20AED30E0((uint64_t)v35);
  }
  v6 = v57;
  if (!v57)
  {
    v10 = v47;
    sub_20AECEBD0(&v11, &v48);
    v20 = 1;
    sub_20AF25718(&v21, (uint64_t)&v10);
    if (!v20 || !v19)
      goto LABEL_39;
    if (v18)
    {
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
    }
    if (!v13 || (v12 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_37;
  }
  v7 = (__int128 *)sub_20AED4AC0((uint64_t)&v47);
  v8 = (char **)operator new(0x240uLL, MEMORY[0x24BEDB6B8]);
  if (!v8)
  {
    LOBYTE(v10) = 0;
    v20 = 0;
    sub_20AF25718(&v21, (uint64_t)&v10);
    if (!v20 || !v19)
      goto LABEL_38;
    if (v18)
    {
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
    }
    v5 = 0;
    if (!v13 || (v12 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_37:
    operator delete(v11);
LABEL_38:
    v5 = 0;
    goto LABEL_39;
  }
  v5 = v8;
  *v8 = (char *)off_24C3F2180;
  sub_20AED5300((uint64_t)(v8 + 2), v7);
  *v5 = (char *)&off_24C3F2BA0;
  v5[2] = (char *)&unk_24C3F2BF0;
  *((_OWORD *)v5 + 35) = 0u;
LABEL_39:
  if (v57)
  {
    sub_20AED5474((uint64_t)&v47);
  }
  else if (v56)
  {
    if (v55)
    {
      if (v54 < 0)
        operator delete(v53);
      if (v52 < 0)
        operator delete(v51);
    }
    if (v50 && v49 < 0)
      operator delete((void *)v48);
  }
  if (!v6)
    v5 = 0;
  if (v34)
  {
    if (v33)
    {
      if (v32 && v31 < 0)
        operator delete(v30);
      if (v29 && v28 < 0)
        operator delete(v27);
      if (v26 && v25 < 0)
        operator delete(v24);
    }
    sub_20AED30E0((uint64_t)v23);
  }
  return v5;
}

void sub_20AF2398C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AF23994);
  _Unwind_Resume(a1);
}

void sub_20AF239A4(_Unwind_Exception *a1, int a2)
{
  const std::logic_error *exception_ptr;
  void *v5;
  std::string *p_what;
  std::string *v7;
  std::logic_error v8;
  char v9;
  char v10;
  __int128 v11;
  __int128 v12[6];
  std::__fs::filesystem::filesystem_error v13[3];
  CFErrorRef **v14[102];
  __int128 v15;
  _BYTE v16[104];
  char v17;

  if (a2)
  {
    sub_20AED1998((uint64_t)&STACK[0x2F0]);
    if (a2 == 3)
    {
      exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
      std::logic_error::logic_error(&v8, exception_ptr);
      v8.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_begin_catch(a1);
      v7 = (std::string *)std::logic_error::what(&v8);
      sub_20AED4C84(v13, (const char **)&v7);
      sub_20B099E24((__int128 *)v13, (uint64_t)&v11);
      v15 = v11;
      sub_20AECEBD0(v16, v12);
      v17 = 1;
      sub_20AF25718(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      sub_20AECCE40((uint64_t)&v11);
      if (LOBYTE(v13[0].__ec_.__cat_))
      {
        if (*((char *)&v13[0].__ec_.__val_ + 7) < 0)
          operator delete(v13[0].__vftable);
      }
      MEMORY[0x20BD35020](&v8);
      __cxa_end_catch();
    }
    else if (a2 == 2)
    {
      v5 = __cxa_get_exception_ptr(a1);
      sub_20AED4C1C(&v13[0], (uint64_t)v5);
      __cxa_begin_catch(a1);
      p_what = &v13[0].__storage_.__ptr_->__what_;
      if (SHIBYTE(v13[0].__storage_.__ptr_->__what_.__r_.__value_.__r.__words[2]) < 0)
        p_what = (std::string *)p_what->__r_.__value_.__r.__words[0];
      v7 = p_what;
      sub_20AED4C84(&v8, (const char **)&v7);
      sub_20B09A738((__int128 *)&v8, (uint64_t)&v11);
      v15 = v11;
      sub_20AECEBD0(v16, v12);
      v17 = 1;
      sub_20AF25718(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      sub_20AECCE40((uint64_t)&v11);
      if (v10 && v9 < 0)
        operator delete(v8.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error(v13);
      __cxa_end_catch();
    }
    else
    {
      __cxa_begin_catch(a1);
      LOBYTE(v15) = 0;
      v17 = 0;
      sub_20AF25718(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      __cxa_end_catch();
    }
    JUMPOUT(0x20AF2388CLL);
  }
  _Unwind_Resume(a1);
}

void sub_20AF239BC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AF239C8);
  _Unwind_Resume(a1);
}

void sub_20AF23B70(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20AF23B78);
  sub_20AEC01C0(a1);
}

BOOL sub_20AF23B88(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  unsigned __int8 v6;
  int v8;
  size_t v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15[2];
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  void *v22[2];
  uint64_t v23;
  uint64_t v24;
  void *v25[2];
  uint64_t v26;
  char v27;
  char v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  uint64_t v37;
  char v38;
  char v39;
  char v40;

  if (a2)
    return a2 == 0;
  v6 = atomic_load((unsigned __int8 *)&qword_2546390A0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2546390A0))
  {
    sub_20AF253E0();
    v8 = byte_2546390FF;
    if (byte_2546390FF >= 0)
      v9 = byte_2546390FF;
    else
      v9 = qword_2546390F0;
    v10 = v9 + 1;
    if (v9 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v10 >= 0x17)
    {
      v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v12 = v10 | 7;
      v13 = v12 + 1;
      v11 = (__int128 *)operator new(v12 + 1);
      *((_QWORD *)&xmmword_2546390D0 + 1) = v9 + 1;
      unk_2546390E0 = v13 | 0x8000000000000000;
      *(_QWORD *)&xmmword_2546390D0 = v11;
    }
    else
    {
      unk_2546390E0 = 0;
      xmmword_2546390D0 = 0uLL;
      v11 = &xmmword_2546390D0;
      byte_2546390E7 = v9 + 1;
      if (!v9)
      {
LABEL_50:
        *(_WORD *)((char *)v11 + v9) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546390D0, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546390A0);
        goto LABEL_3;
      }
    }
    if (v8 >= 0)
      v14 = &qword_2546390E8;
    else
      v14 = (uint64_t *)qword_2546390E8;
    memmove(v11, v14, v9);
    goto LABEL_50;
  }
LABEL_3:
  if (byte_2546390E7 < 0)
  {
    sub_20AEC60F4(v15, (void *)xmmword_2546390D0, *((unint64_t *)&xmmword_2546390D0 + 1));
  }
  else
  {
    *(_OWORD *)v15 = xmmword_2546390D0;
    v16 = unk_2546390E0;
  }
  v17 = 1;
  sub_20AECCECC(a1, (uint64_t)v15, (uint64_t)&v18);
  v29 = v18;
  LOBYTE(v30) = 0;
  v39 = 0;
  if (v28)
  {
    v32 = 0;
    if (v21)
    {
      v30 = v19;
      v31 = v20;
      v20 = 0;
      v19 = 0uLL;
      v32 = 1;
    }
    LOBYTE(v33) = 0;
    v38 = 0;
    if (v27)
    {
      v34 = v23;
      v33 = *(_OWORD *)v22;
      v22[0] = 0;
      v22[1] = 0;
      v35 = v24;
      *(_OWORD *)__p = *(_OWORD *)v25;
      v37 = v26;
      v23 = 0;
      v25[0] = 0;
      v25[1] = 0;
      v26 = 0;
      v38 = 1;
    }
    v39 = 1;
  }
  v40 = 0;
  sub_20AECB410(&v29, a3);
  if (!v40 && v39)
  {
    if (v38)
    {
      if (SHIBYTE(v37) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34) < 0)
        operator delete((void *)v33);
    }
    if (v32 && SHIBYTE(v31) < 0)
      operator delete((void *)v30);
  }
  if (v28)
  {
    if (v27)
    {
      if (SHIBYTE(v26) < 0)
        operator delete(v25[0]);
      if (SHIBYTE(v23) < 0)
        operator delete(v22[0]);
    }
    if (v21 && SHIBYTE(v20) < 0)
      operator delete((void *)v19);
  }
  if (v17 && SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  return a2 == 0;
}

void sub_20AF23EB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546390A0);
  _Unwind_Resume(a1);
}

void sub_20AF23EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECD704((uint64_t)&a32);
  sub_20AECCE40((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_OWORD *VZDataGetNumber(uint64_t a1, CFErrorRef *a2)
{
  _OWORD *v4;
  int v5;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  __int128 v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  char v31;
  unsigned __int8 v32;
  CFErrorRef **v33;
  CFErrorRef *v34;

  if (sub_20AED21B4((uint64_t)"VZDataGetNumber", a1, a2))
    return 0;
  v4 = *(_OWORD **)(a1 + 568);
  if (v4)
    return v4;
  v33 = &v34;
  v34 = a2;
  sub_20B08D458(a1 + 32, (uint64_t)&v22);
  v5 = v32;
  if (!v32)
  {
    v11 = v22;
    sub_20AECEBD0(&v12, &v23);
    v21 = 1;
    sub_20AF25AB0(&v33, (uint64_t)&v11);
    if (v21 && v20)
    {
      if (v19)
      {
        if (v18 < 0)
          operator delete(__p);
        if (v16 < 0)
          operator delete(v15);
      }
      if (v14 && v13 < 0)
        operator delete(v12);
    }
    goto LABEL_28;
  }
  sub_20AF25C68((uint64_t)&v22);
  v6 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  if (v6)
  {
    v4 = v6;
    v6[1] = v22;
    v22 = 0uLL;
    *((_DWORD *)v6 + 8) = 1;
    *(_QWORD *)v6 = &off_24C3F4118;
    *((_QWORD *)v6 + 1) = &unk_24C3F4168;
  }
  else
  {
    LOBYTE(v11) = 0;
    v21 = 0;
    sub_20AF25AB0(&v33, (uint64_t)&v11);
    if (v21 && v20)
    {
      if (v19)
      {
        if (v18 < 0)
          operator delete(__p);
        if (v16 < 0)
          operator delete(v15);
      }
      v4 = 0;
      if (!v14 || (v13 & 0x80000000) == 0)
        goto LABEL_28;
      operator delete(v12);
    }
    v4 = 0;
  }
LABEL_28:
  if (v32)
  {
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else if (v31)
  {
    if (v30)
    {
      if (v29 < 0)
        operator delete(v28);
      if (v27 < 0)
        operator delete(v26);
    }
    if (v25 && v24 < 0)
      operator delete((void *)v23);
  }
  if (!v5)
    v4 = 0;
  *(_QWORD *)(a1 + 568) = v4;
  return v4;
}

void sub_20AF24158(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a68;
  uint64_t v68;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  const std::logic_error *exception_ptr;
  const char *v75;
  size_t v76;
  size_t v77;
  void **p_dst;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  const char *v84;
  size_t v85;
  const char *v86;
  std::logic_error_vtbl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (*(_BYTE *)(v68 - 72))
  {
    v71 = *(std::__shared_weak_count **)(v68 - 184);
    if (v71)
    {
      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(p_shared_owners);
      while (__stlxr(v73 - 1, p_shared_owners));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  else if (*(_BYTE *)(v68 - 80))
  {
    if (*(_BYTE *)(v68 - 88))
    {
      if (*(char *)(v68 - 89) < 0)
        operator delete(*(void **)(v68 - 112));
      if (*(char *)(v68 - 121) < 0)
        operator delete(*(void **)(v68 - 144));
    }
    if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
      operator delete(*(void **)(v68 - 176));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v75 = std::logic_error::what(&a10);
    v76 = strlen(v75);
    if (v76 <= 0x7FFFFFFFFFFFFFF7)
    {
      v77 = v76;
      if (v76 >= 0x17)
      {
        v88 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v88 = v76 | 7;
        v89 = v88 + 1;
        p_dst = (void **)operator new(v88 + 1);
        __dst_8 = v77;
        *(_QWORD *)&a38 = v89 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v76;
        p_dst = (void **)&__dst;
        if (!v76)
        {
LABEL_56:
          *((_BYTE *)p_dst + v77) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a68 = a13;
          sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
          *(_BYTE *)(v68 - 72) = 1;
          sub_20AF25AB0((CFErrorRef ***)(v68 - 64), v68 - 192);
          if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
          {
            if (*(_BYTE *)(v68 - 88))
            {
              if (*(char *)(v68 - 89) < 0)
                operator delete(*(void **)(v68 - 112));
              if (*(char *)(v68 - 121) < 0)
                operator delete(*(void **)(v68 - 144));
            }
            if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
              operator delete(*(void **)(v68 - 176));
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_107;
        }
      }
      memmove(p_dst, v75, v77);
      goto LABEL_56;
    }
LABEL_106:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v68 - 192) = 0;
    *(_BYTE *)(v68 - 72) = 0;
    sub_20AF25AB0((CFErrorRef ***)(v68 - 64), v68 - 192);
    if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
    {
      if (*(_BYTE *)(v68 - 88))
      {
        if (*(char *)(v68 - 89) < 0)
          operator delete(*(void **)(v68 - 112));
        if (*(char *)(v68 - 121) < 0)
          operator delete(*(void **)(v68 - 144));
      }
      if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
        operator delete(*(void **)(v68 - 176));
    }
    __cxa_end_catch();
LABEL_107:
    JUMPOUT(0x20AF24134);
  }
  v79 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v79);
  a38 = *((_OWORD *)v79 + 1);
  v81 = *((_QWORD *)v79 + 4);
  v80 = *((_QWORD *)v79 + 5);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  a39 = v81;
  a40 = v80;
  if (v80)
  {
    v82 = (unint64_t *)(v80 + 8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  __cxa_begin_catch(a1);
  v84 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v84 = *(const char **)v84;
  v85 = strlen(v84);
  if (v85 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_106;
  v86 = (const char *)v85;
  if (v85 >= 0x17)
  {
    v90 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v90 = v85 | 7;
    v91 = v90 + 1;
    v87 = (std::logic_error_vtbl *)operator new(v90 + 1);
    a10.__imp_.__imp_ = v86;
    a11 = v91 | 0x8000000000000000;
    a10.__vftable = v87;
  }
  else
  {
    HIBYTE(a11) = v85;
    v87 = (std::logic_error_vtbl *)&a10;
    if (!v85)
    {
LABEL_83:
      v86[(_QWORD)v87] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a68 = a13;
      sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
      *(_BYTE *)(v68 - 72) = 1;
      sub_20AF25AB0((CFErrorRef ***)(v68 - 64), v68 - 192);
      if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
      {
        if (*(_BYTE *)(v68 - 88))
        {
          if (*(char *)(v68 - 89) < 0)
            operator delete(*(void **)(v68 - 112));
          if (*(char *)(v68 - 121) < 0)
            operator delete(*(void **)(v68 - 144));
        }
        if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
          operator delete(*(void **)(v68 - 176));
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_107;
    }
  }
  memmove(v87, v84, (size_t)v86);
  goto LABEL_83;
}

char *VZNumberCreate(uint64_t a1, unsigned __int8 a2, CFErrorRef *a3)
{
  char *v5;
  int v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v12;
  void *v13;
  char v14;
  char v15;
  void *v16;
  char v17;
  void *__p;
  char v19;
  char v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  char v31;
  char v32;
  unsigned __int8 v33;
  CFErrorRef **v34;
  CFErrorRef *v35;

  v5 = (char *)a1;
  if (sub_20AF0B170((uint64_t)"VZNumberCreate", a1, a3))
    return 0;
  v34 = &v35;
  v35 = a3;
  sub_20B08C4F8(v5, a2, (uint64_t)&v23);
  v6 = v33;
  if (v33)
  {
    sub_20AF25C68((uint64_t)&v23);
    v7 = (char *)operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
    if (v7)
    {
      v5 = v7;
      *((_OWORD *)v7 + 1) = v23;
      v23 = 0uLL;
      *((_DWORD *)v7 + 8) = 1;
      *(_QWORD *)v7 = &off_24C3F4118;
      *((_QWORD *)v7 + 1) = &unk_24C3F4168;
      goto LABEL_26;
    }
    LOBYTE(v12) = 0;
    v22 = 0;
    sub_20AF25D28(&v34, (uint64_t)&v12);
    if (!v22 || !v21)
      goto LABEL_25;
    if (v20)
    {
      if (v19 < 0)
        operator delete(__p);
      if (v17 < 0)
        operator delete(v16);
    }
    v5 = 0;
    if (v15 && v14 < 0)
    {
      operator delete(v13);
LABEL_25:
      v5 = 0;
    }
  }
  else
  {
    v12 = v23;
    sub_20AECEBD0(&v13, &v24);
    v22 = 1;
    sub_20AF25D28(&v34, (uint64_t)&v12);
    if (v22 && v21)
    {
      if (v20)
      {
        if (v19 < 0)
          operator delete(__p);
        if (v17 < 0)
          operator delete(v16);
      }
      if (v15 && v14 < 0)
        operator delete(v13);
    }
  }
LABEL_26:
  if (v33)
  {
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (!v6)
          return 0;
        return v5;
      }
    }
  }
  else if (v32)
  {
    if (v31)
    {
      if (v30 < 0)
        operator delete(v29);
      if (v28 < 0)
        operator delete(v27);
    }
    if (v26 && v25 < 0)
      operator delete((void *)v24);
  }
  if (!v6)
    return 0;
  return v5;
}

void sub_20AF248E4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a68;
  uint64_t v68;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  const std::logic_error *exception_ptr;
  const char *v75;
  size_t v76;
  size_t v77;
  void **p_dst;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  const char *v84;
  size_t v85;
  const char *v86;
  std::logic_error_vtbl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (*(_BYTE *)(v68 - 72))
  {
    v71 = *(std::__shared_weak_count **)(v68 - 184);
    if (v71)
    {
      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(p_shared_owners);
      while (__stlxr(v73 - 1, p_shared_owners));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  else if (*(_BYTE *)(v68 - 80))
  {
    if (*(_BYTE *)(v68 - 88))
    {
      if (*(char *)(v68 - 89) < 0)
        operator delete(*(void **)(v68 - 112));
      if (*(char *)(v68 - 121) < 0)
        operator delete(*(void **)(v68 - 144));
    }
    if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
      operator delete(*(void **)(v68 - 176));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v75 = std::logic_error::what(&a10);
    v76 = strlen(v75);
    if (v76 <= 0x7FFFFFFFFFFFFFF7)
    {
      v77 = v76;
      if (v76 >= 0x17)
      {
        v88 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v88 = v76 | 7;
        v89 = v88 + 1;
        p_dst = (void **)operator new(v88 + 1);
        __dst_8 = v77;
        *(_QWORD *)&a38 = v89 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v76;
        p_dst = (void **)&__dst;
        if (!v76)
        {
LABEL_56:
          *((_BYTE *)p_dst + v77) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a68 = a13;
          sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
          *(_BYTE *)(v68 - 72) = 1;
          sub_20AF25D28((CFErrorRef ***)(v68 - 64), v68 - 192);
          if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
          {
            if (*(_BYTE *)(v68 - 88))
            {
              if (*(char *)(v68 - 89) < 0)
                operator delete(*(void **)(v68 - 112));
              if (*(char *)(v68 - 121) < 0)
                operator delete(*(void **)(v68 - 144));
            }
            if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
              operator delete(*(void **)(v68 - 176));
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_107;
        }
      }
      memmove(p_dst, v75, v77);
      goto LABEL_56;
    }
LABEL_106:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v68 - 192) = 0;
    *(_BYTE *)(v68 - 72) = 0;
    sub_20AF25D28((CFErrorRef ***)(v68 - 64), v68 - 192);
    if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
    {
      if (*(_BYTE *)(v68 - 88))
      {
        if (*(char *)(v68 - 89) < 0)
          operator delete(*(void **)(v68 - 112));
        if (*(char *)(v68 - 121) < 0)
          operator delete(*(void **)(v68 - 144));
      }
      if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
        operator delete(*(void **)(v68 - 176));
    }
    __cxa_end_catch();
LABEL_107:
    JUMPOUT(0x20AF248C4);
  }
  v79 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v79);
  a38 = *((_OWORD *)v79 + 1);
  v81 = *((_QWORD *)v79 + 4);
  v80 = *((_QWORD *)v79 + 5);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  a39 = v81;
  a40 = v80;
  if (v80)
  {
    v82 = (unint64_t *)(v80 + 8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  __cxa_begin_catch(a1);
  v84 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v84 = *(const char **)v84;
  v85 = strlen(v84);
  if (v85 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_106;
  v86 = (const char *)v85;
  if (v85 >= 0x17)
  {
    v90 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v90 = v85 | 7;
    v91 = v90 + 1;
    v87 = (std::logic_error_vtbl *)operator new(v90 + 1);
    a10.__imp_.__imp_ = v86;
    a11 = v91 | 0x8000000000000000;
    a10.__vftable = v87;
  }
  else
  {
    HIBYTE(a11) = v85;
    v87 = (std::logic_error_vtbl *)&a10;
    if (!v85)
    {
LABEL_83:
      v86[(_QWORD)v87] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a68 = a13;
      sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
      *(_BYTE *)(v68 - 72) = 1;
      sub_20AF25D28((CFErrorRef ***)(v68 - 64), v68 - 192);
      if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
      {
        if (*(_BYTE *)(v68 - 88))
        {
          if (*(char *)(v68 - 89) < 0)
            operator delete(*(void **)(v68 - 112));
          if (*(char *)(v68 - 121) < 0)
            operator delete(*(void **)(v68 - 144));
        }
        if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
          operator delete(*(void **)(v68 - 176));
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_107;
    }
  }
  memmove(v87, v84, (size_t)v86);
  goto LABEL_83;
}

uint64_t VZNumberGetBytePtr(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF23B88((uint64_t)"VZNumberGetBytePtr", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  return result;
}

uint64_t VZNumberGetByteCount(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF23B88((uint64_t)"VZNumberGetByteCount", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) - *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  return result;
}

uint64_t VZNumberGetValueType(uint64_t a1)
{
  if (sub_20AF23B88((uint64_t)"VZNumberGetValueType", a1, 0))
    return 255;
  else
    return **(unsigned __int8 **)(a1 + 16);
}

uint64_t sub_20AF24F00(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 32);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AF24F18(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 32);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AF24F40()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254639098);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254639098))
    return qword_254639090;
  qword_254639090 = sub_20AECB130();
  __cxa_guard_release(&qword_254639098);
  return qword_254639090;
}

_BYTE **sub_20AF24FA0(uint64_t a1, void *lpsrc)
{
  _BYTE **result;

  result = (_BYTE **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F41B0, 0);
  if (result)
    return (_BYTE **)(sub_20B5234F4(*(unsigned __int8 **)(a1 + 16), result[2]) == 0);
  return result;
}

uint64_t sub_20AF25000(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  const void *v20[2];
  char v21;

  __cxa_begin_catch(a1);
  sub_20AF25560();
  sub_20AEC0D64(v20, "failed to compare equal");
  sub_20AECD224((std::string::size_type)&xmmword_254639100, v20, 0);
  if (v21 < 0)
    operator delete((void *)v20[0]);
  __cxa_end_catch();
  return 0;
}

CFTypeRef sub_20AF25058(uint64_t a1)
{
  uint64_t v2;
  int v3;
  size_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  char v21;
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  void *__dst[2];
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  sub_20AF25560();
  v26 = a1;
  v2 = operator new();
  *(_QWORD *)(v2 + 272) = 0;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  sub_20AEC0BD8(v2);
  v27 = (_QWORD *)v2;
  sub_20B524068((_QWORD *)(v2 + 16), *(unsigned __int8 **)(a1 + 16));
  v3 = *(_DWORD *)(v2 + 120);
  if ((v3 & 0x10) != 0)
  {
    v6 = *(_QWORD *)(v2 + 112);
    v7 = *(_QWORD *)(v2 + 72);
    if (v6 < v7)
    {
      *(_QWORD *)(v2 + 112) = v7;
      v6 = v7;
    }
    v8 = *(const void **)(v2 + 64);
    v4 = v6 - (_QWORD)v8;
    if (v6 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      HIBYTE(v25) = 0;
      v5 = __dst;
      goto LABEL_14;
    }
    v8 = *(const void **)(v2 + 40);
    v4 = *(_QWORD *)(v2 + 56) - (_QWORD)v8;
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v5 = (void **)operator new(v9 + 1);
    __dst[1] = (void *)v4;
    v25 = v10 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_13;
  }
  HIBYTE(v25) = v4;
  v5 = __dst;
  if (v4)
LABEL_13:
    memmove(v5, v8, v4);
LABEL_14:
  *((_BYTE *)v5 + v4) = 0;
  v11 = v27;
  if (v27)
  {
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *v27 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)((char *)v11 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    v11[3] = MEMORY[0x24BEDB848] + 16;
    v11[2] = v14;
    if (*((char *)v11 + 111) < 0)
      operator delete((void *)v11[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v11 + 16);
    MEMORY[0x20BD3583C](v11, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)&xmmword_254639100, (uint64_t)" ", &v26, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v15 = cf;
  if (cf)
    CFRetain(cf);
  v16 = v23;
  if (!v23)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if ((v21 & 0x80000000) == 0)
      return v15;
  }
  else
  {
LABEL_26:
    if ((v21 & 0x80000000) == 0)
      return v15;
  }
  operator delete(__p);
  return v15;
}

uint64_t sub_20AF25300(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  const void *v32[2];
  char v33;
  uint64_t v34;

  sub_20AEC147C((uint64_t)&v34);
  if (v33 < 0)
    operator delete((void *)v32[0]);
  __cxa_begin_catch(a1);
  sub_20AF25560();
  sub_20AEC0D64(v32, "failed to create description");
  sub_20AECD224((std::string::size_type)&xmmword_254639100, v32, 0);
  if (v33 < 0)
    operator delete((void *)v32[0]);
  __cxa_end_catch();
  return 0;
}

uint64_t sub_20AF253D4(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 32));
}

void sub_20AF253E0()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2546390A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546390A8))
  {
    sub_20AF25560();
    v1 = byte_254639117;
    if (byte_254639117 >= 0)
      v2 = byte_254639117;
    else
      v2 = *((_QWORD *)&xmmword_254639100 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_2546390F0 = v2 + 6;
      unk_2546390F8 = v6 | 0x8000000000000000;
      qword_2546390E8 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_2546390F0 = 0;
      unk_2546390F8 = 0;
      qword_2546390E8 = 0x2074736E6F63;
      byte_2546390FF = v2 + 6;
      v4 = (char *)&qword_2546390E8 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2546390E8, &dword_20AEBB000);
        __cxa_guard_release(&qword_2546390A8);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254639100;
    else
      v8 = (__int128 *)xmmword_254639100;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20AF25548(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546390A8);
  _Unwind_Resume(a1);
}

void sub_20AF25560()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2546390B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546390B0))
  {
    sub_20AF25618();
    if (byte_254639147 < 0)
    {
      sub_20AEC60F4(&xmmword_254639100, (void *)xmmword_254639130, *((unint64_t *)&xmmword_254639130 + 1));
    }
    else
    {
      xmmword_254639100 = xmmword_254639130;
      unk_254639110 = unk_254639140;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254639100, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546390B0);
  }
}

void sub_20AF25600(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546390B0);
  _Unwind_Resume(a1);
}

void sub_20AF25618()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2546390B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546390B8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZNumber]", qword_254639118);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254639118, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546390B8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546390C0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2546390C0))
    {
      sub_20B531658((uint64_t)qword_254639118, (uint64_t)&xmmword_254639130);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254639130, &dword_20AEBB000);
      __cxa_guard_release(&qword_2546390C0);
    }
  }
}

void sub_20AF256E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546390C0);
  _Unwind_Resume(a1);
}

void sub_20AF25700(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546390B8);
  _Unwind_Resume(a1);
}

void sub_20AF25718(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  __int128 *v6;
  __int128 v7;
  void **v8;
  void **v9;
  void *v10;
  int v11;
  size_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _BYTE v18[16];
  void *__p;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  char v28;
  void *v29;
  void **v30;
  __int128 __dst;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AED5104();
  v5 = atomic_load((unsigned __int8 *)&qword_2546390C8);
  if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_2546390C8))
    goto LABEL_2;
  sub_20AF253E0();
  v11 = byte_2546390FF;
  if (byte_2546390FF >= 0)
    v12 = byte_2546390FF;
  else
    v12 = qword_2546390F0;
  v13 = v12 + 1;
  if (v12 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    v14 = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&xmmword_254639148 + 1) = v12 + 1;
    unk_254639158 = v16 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254639148 = v14;
    goto LABEL_43;
  }
  v14 = &xmmword_254639148;
  unk_254639158 = 0;
  xmmword_254639148 = 0uLL;
  byte_25463915F = v12 + 1;
  if (v12)
  {
LABEL_43:
    if (v11 >= 0)
      v17 = &qword_2546390E8;
    else
      v17 = (uint64_t *)qword_2546390E8;
    memmove(v14, v17, v12);
  }
  *(_WORD *)((char *)v14 + v12) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254639148, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546390C8);
LABEL_2:
  if (byte_25463915F < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_254639148, *((unint64_t *)&xmmword_254639148 + 1));
  }
  else
  {
    __dst = xmmword_254639148;
    v32 = unk_254639158;
  }
  v6 = sub_20AED3F9C();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v33, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v34 = *((_QWORD *)v6 + 2);
    v33 = v7;
  }
  sub_20AEC7620(&v29, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v18, a2);
  sub_20AECD798(v4, (__int128 **)&v29, (uint64_t)v18, **a1);
  if (!v28 || !v27)
    goto LABEL_16;
  if (!v26)
    goto LABEL_13;
  if ((v25 & 0x80000000) == 0)
  {
    if ((v23 & 0x80000000) == 0)
      goto LABEL_13;
LABEL_30:
    operator delete(v22);
    if (!v21)
      goto LABEL_16;
    goto LABEL_14;
  }
  operator delete(v24);
  if (v23 < 0)
    goto LABEL_30;
LABEL_13:
  if (!v21)
    goto LABEL_16;
LABEL_14:
  if (v20 < 0)
    operator delete(__p);
LABEL_16:
  v8 = (void **)v29;
  if (v29)
  {
    v9 = v30;
    v10 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = v29;
    }
    v30 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v33);
  if (SHIBYTE(v32) < 0)
    goto LABEL_28;
}

void sub_20AF25A38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546390C8);
  _Unwind_Resume(a1);
}

void sub_20AF25A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  sub_20AECDEE0((uint64_t)&a9);
  sub_20AEC2E90(&a25);
  if (*(char *)(v25 - 97) < 0)
    operator delete(*(void **)(v25 - 120));
  if (*(char *)(v25 - 121) < 0)
  {
    operator delete(*(void **)(v25 - 144));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AF25AB0(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  _BYTE v9[16];
  void *__p;
  char v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  char v18;
  char v19;
  __int128 *v20;
  __int128 *v21;
  __int128 __dst;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  sub_20AF25560();
  v4 = sub_20AED6ED4();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v23 = v4[2];
    __dst = v5;
  }
  sub_20AEC7620(&v20, (uint64_t)&__dst, 1uLL);
  sub_20AECF9B0(v9, a2);
  sub_20AECD798((uint64_t *)&xmmword_254639100, &v20, (uint64_t)v9, **a1);
  if (!v19 || !v18)
    goto LABEL_12;
  if (!v17)
    goto LABEL_9;
  if ((v16 & 0x80000000) == 0)
  {
    if ((v14 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_24:
    operator delete(v13);
    if (!v12)
      goto LABEL_12;
    goto LABEL_10;
  }
  operator delete(v15);
  if (v14 < 0)
    goto LABEL_24;
LABEL_9:
  if (!v12)
    goto LABEL_12;
LABEL_10:
  if (v11 < 0)
    operator delete(__p);
LABEL_12:
  v6 = v20;
  if (v20)
  {
    v7 = v21;
    v8 = v20;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*((void **)v7 - 3));
        v7 = (__int128 *)((char *)v7 - 24);
      }
      while (v7 != v6);
      v8 = v20;
    }
    v21 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__dst);
}

void sub_20AF25C2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECDEE0((uint64_t)va);
  sub_20AEC2E90((void **)(v2 - 72));
  if (*(char *)(v2 - 25) < 0)
    operator delete(*(void **)(v2 - 48));
  _Unwind_Resume(a1);
}

uint64_t sub_20AF25C68(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_20AECEBD0(v4, v1 + 1);
    sub_20AECF558((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22C0, (void (*)(void *))sub_20AECF5A8);
  }
  return result;
}

void sub_20AF25CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCE40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AF25CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_20AECCE40((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_20AF25D14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20AF25D28(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  void **v8;
  void **v9;
  void *v10;
  _BYTE v11[16];
  void *__p;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  void *v22;
  void **v23;
  __int128 __dst;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  sub_20AF25560();
  v4 = sub_20AED733C();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, (void *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v25 = v4[2];
    __dst = v5;
  }
  v6 = sub_20AEED13C();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v26, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v27 = *((_QWORD *)v6 + 2);
    v26 = v7;
  }
  sub_20AEC7620(&v22, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v11, a2);
  sub_20AECD798((uint64_t *)&xmmword_254639100, (__int128 **)&v22, (uint64_t)v11, **a1);
  if (!v21 || !v20)
    goto LABEL_15;
  if (!v19)
    goto LABEL_12;
  if ((v18 & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      goto LABEL_12;
LABEL_29:
    operator delete(v15);
    if (!v14)
      goto LABEL_15;
    goto LABEL_13;
  }
  operator delete(v17);
  if (v16 < 0)
    goto LABEL_29;
LABEL_12:
  if (!v14)
    goto LABEL_15;
LABEL_13:
  if (v13 < 0)
    operator delete(__p);
LABEL_15:
  v8 = (void **)v22;
  if (v22)
  {
    v9 = v23;
    v10 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = v22;
    }
    v23 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      return;
LABEL_27:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v26);
  if (SHIBYTE(v25) < 0)
    goto LABEL_27;
}

void sub_20AF25F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  sub_20AECDEE0((uint64_t)&a9);
  sub_20AEC2E90(&a25);
  if (*(char *)(v25 - 49) < 0)
    operator delete(*(void **)(v25 - 72));
  if (*(char *)(v25 - 73) < 0)
    operator delete(*(void **)(v25 - 96));
  _Unwind_Resume(a1);
}

uint64_t sub_20AF25F68(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AF25FD0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AF2602C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AF26094(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t VZNumbersGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254639168);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254639168))
    return qword_254639160;
  qword_254639160 = sub_20AECB130();
  __cxa_guard_release(&qword_254639168);
  return qword_254639160;
}

_QWORD *VZDataCreateWithNumbers(uint64_t a1, __int128 *a2, CFErrorRef *a3)
{
  _QWORD *v5;
  int v6;
  __int128 *v7;
  _QWORD *v8;
  __int128 v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  CFErrorRef **v21;
  CFErrorRef *v22;
  char v23[208];
  void *v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  char v29;
  void *v30;
  char v31;
  char v32;
  char v33;
  char v34;
  __int128 v35[13];
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  void *__p;
  char v43;
  char v44;
  char v45;
  char v46;
  __int128 v47;
  __int128 v48;
  char v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  char v55;
  char v56;
  unsigned __int8 v57;
  uint64_t v58;

  v5 = (_QWORD *)a1;
  v58 = *MEMORY[0x24BDAC8D0];
  if (sub_20AF266D0((uint64_t)"VZDataCreateWithNumbers", a1, a3))
    return 0;
  sub_20AED18DC(a2, v23);
  v21 = &v22;
  v22 = a3;
  sub_20AED4D3C(v35, (uint64_t)v23);
  sub_20B08DFA4((uint64_t)(v5 + 2), v35, (uint64_t)&v47);
  if (v46)
  {
    if (v45)
    {
      if (v44 && v43 < 0)
        operator delete(__p);
      if (v41 && v40 < 0)
        operator delete(v39);
      if (v38 && v37 < 0)
        operator delete(v36);
    }
    sub_20AED30E0((uint64_t)v35);
  }
  v6 = v57;
  if (!v57)
  {
    v10 = v47;
    sub_20AECEBD0(&v11, &v48);
    v20 = 1;
    sub_20AF282A4(&v21, (uint64_t)&v10);
    if (!v20 || !v19)
      goto LABEL_39;
    if (v18)
    {
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
    }
    if (!v13 || (v12 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_37;
  }
  v7 = (__int128 *)sub_20AED4AC0((uint64_t)&v47);
  v8 = operator new(0x240uLL, MEMORY[0x24BEDB6B8]);
  if (!v8)
  {
    LOBYTE(v10) = 0;
    v20 = 0;
    sub_20AF282A4(&v21, (uint64_t)&v10);
    if (!v20 || !v19)
      goto LABEL_38;
    if (v18)
    {
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
    }
    v5 = 0;
    if (!v13 || (v12 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_37:
    operator delete(v11);
LABEL_38:
    v5 = 0;
    goto LABEL_39;
  }
  v5 = v8;
  *v8 = off_24C3F2180;
  sub_20AED5300((uint64_t)(v8 + 2), v7);
  *v5 = &off_24C3F2BA0;
  v5[2] = &unk_24C3F2BF0;
  *((_OWORD *)v5 + 35) = 0u;
LABEL_39:
  if (v57)
  {
    sub_20AED5474((uint64_t)&v47);
  }
  else if (v56)
  {
    if (v55)
    {
      if (v54 < 0)
        operator delete(v53);
      if (v52 < 0)
        operator delete(v51);
    }
    if (v50 && v49 < 0)
      operator delete((void *)v48);
  }
  if (!v6)
    v5 = 0;
  if (v34)
  {
    if (v33)
    {
      if (v32 && v31 < 0)
        operator delete(v30);
      if (v29 && v28 < 0)
        operator delete(v27);
      if (v26 && v25 < 0)
        operator delete(v24);
    }
    sub_20AED30E0((uint64_t)v23);
  }
  return v5;
}

void sub_20AF264D4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AF264DCLL);
  _Unwind_Resume(a1);
}

void sub_20AF264EC(_Unwind_Exception *a1, int a2)
{
  const std::logic_error *exception_ptr;
  void *v5;
  std::string *p_what;
  std::string *v7;
  std::logic_error v8;
  char v9;
  char v10;
  __int128 v11;
  __int128 v12[6];
  std::__fs::filesystem::filesystem_error v13[3];
  CFErrorRef **v14[102];
  __int128 v15;
  _BYTE v16[104];
  char v17;

  if (a2)
  {
    sub_20AED1998((uint64_t)&STACK[0x2F0]);
    if (a2 == 3)
    {
      exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
      std::logic_error::logic_error(&v8, exception_ptr);
      v8.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_begin_catch(a1);
      v7 = (std::string *)std::logic_error::what(&v8);
      sub_20AED4C84(v13, (const char **)&v7);
      sub_20B099E24((__int128 *)v13, (uint64_t)&v11);
      v15 = v11;
      sub_20AECEBD0(v16, v12);
      v17 = 1;
      sub_20AF282A4(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      sub_20AECCE40((uint64_t)&v11);
      if (LOBYTE(v13[0].__ec_.__cat_))
      {
        if (*((char *)&v13[0].__ec_.__val_ + 7) < 0)
          operator delete(v13[0].__vftable);
      }
      MEMORY[0x20BD35020](&v8);
      __cxa_end_catch();
    }
    else if (a2 == 2)
    {
      v5 = __cxa_get_exception_ptr(a1);
      sub_20AED4C1C(&v13[0], (uint64_t)v5);
      __cxa_begin_catch(a1);
      p_what = &v13[0].__storage_.__ptr_->__what_;
      if (SHIBYTE(v13[0].__storage_.__ptr_->__what_.__r_.__value_.__r.__words[2]) < 0)
        p_what = (std::string *)p_what->__r_.__value_.__r.__words[0];
      v7 = p_what;
      sub_20AED4C84(&v8, (const char **)&v7);
      sub_20B09A738((__int128 *)&v8, (uint64_t)&v11);
      v15 = v11;
      sub_20AECEBD0(v16, v12);
      v17 = 1;
      sub_20AF282A4(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      sub_20AECCE40((uint64_t)&v11);
      if (v10 && v9 < 0)
        operator delete(v8.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error(v13);
      __cxa_end_catch();
    }
    else
    {
      __cxa_begin_catch(a1);
      LOBYTE(v15) = 0;
      v17 = 0;
      sub_20AF282A4(v14, (uint64_t)&v15);
      sub_20AECDEE0((uint64_t)&v15);
      __cxa_end_catch();
    }
    JUMPOUT(0x20AF263D4);
  }
  _Unwind_Resume(a1);
}

void sub_20AF26504(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20AF26510);
  _Unwind_Resume(a1);
}

void sub_20AF266B8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20AF266C0);
  sub_20AEC01C0(a1);
}

BOOL sub_20AF266D0(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  unsigned __int8 v6;
  int v8;
  size_t v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15[2];
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  void *v22[2];
  uint64_t v23;
  uint64_t v24;
  void *v25[2];
  uint64_t v26;
  char v27;
  char v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  uint64_t v37;
  char v38;
  char v39;
  char v40;

  if (a2)
    return a2 == 0;
  v6 = atomic_load((unsigned __int8 *)&qword_254639170);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254639170))
  {
    sub_20AF27F6C();
    v8 = byte_2546391CF;
    if (byte_2546391CF >= 0)
      v9 = byte_2546391CF;
    else
      v9 = qword_2546391C0;
    v10 = v9 + 1;
    if (v9 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v10 >= 0x17)
    {
      v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v12 = v10 | 7;
      v13 = v12 + 1;
      v11 = (__int128 *)operator new(v12 + 1);
      *((_QWORD *)&xmmword_2546391A0 + 1) = v9 + 1;
      unk_2546391B0 = v13 | 0x8000000000000000;
      *(_QWORD *)&xmmword_2546391A0 = v11;
    }
    else
    {
      unk_2546391B0 = 0;
      xmmword_2546391A0 = 0uLL;
      v11 = &xmmword_2546391A0;
      byte_2546391B7 = v9 + 1;
      if (!v9)
      {
LABEL_50:
        *(_WORD *)((char *)v11 + v9) = 42;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546391A0, &dword_20AEBB000);
        __cxa_guard_release(&qword_254639170);
        goto LABEL_3;
      }
    }
    if (v8 >= 0)
      v14 = &qword_2546391B8;
    else
      v14 = (uint64_t *)qword_2546391B8;
    memmove(v11, v14, v9);
    goto LABEL_50;
  }
LABEL_3:
  if (byte_2546391B7 < 0)
  {
    sub_20AEC60F4(v15, (void *)xmmword_2546391A0, *((unint64_t *)&xmmword_2546391A0 + 1));
  }
  else
  {
    *(_OWORD *)v15 = xmmword_2546391A0;
    v16 = unk_2546391B0;
  }
  v17 = 1;
  sub_20AECCECC(a1, (uint64_t)v15, (uint64_t)&v18);
  v29 = v18;
  LOBYTE(v30) = 0;
  v39 = 0;
  if (v28)
  {
    v32 = 0;
    if (v21)
    {
      v30 = v19;
      v31 = v20;
      v20 = 0;
      v19 = 0uLL;
      v32 = 1;
    }
    LOBYTE(v33) = 0;
    v38 = 0;
    if (v27)
    {
      v34 = v23;
      v33 = *(_OWORD *)v22;
      v22[0] = 0;
      v22[1] = 0;
      v35 = v24;
      *(_OWORD *)__p = *(_OWORD *)v25;
      v37 = v26;
      v23 = 0;
      v25[0] = 0;
      v25[1] = 0;
      v26 = 0;
      v38 = 1;
    }
    v39 = 1;
  }
  v40 = 0;
  sub_20AECB410(&v29, a3);
  if (!v40 && v39)
  {
    if (v38)
    {
      if (SHIBYTE(v37) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34) < 0)
        operator delete((void *)v33);
    }
    if (v32 && SHIBYTE(v31) < 0)
      operator delete((void *)v30);
  }
  if (v28)
  {
    if (v27)
    {
      if (SHIBYTE(v26) < 0)
        operator delete(v25[0]);
      if (SHIBYTE(v23) < 0)
        operator delete(v22[0]);
    }
    if (v21 && SHIBYTE(v20) < 0)
      operator delete((void *)v19);
  }
  if (v17 && SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  return a2 == 0;
}

void sub_20AF269F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254639170);
  _Unwind_Resume(a1);
}

void sub_20AF26A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20AECD704((uint64_t)&a32);
  sub_20AECCE40((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_OWORD *VZDataGetNumbers(uint64_t a1, CFErrorRef *a2)
{
  _OWORD *v4;
  int v5;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  __int128 v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  char v31;
  unsigned __int8 v32;
  CFErrorRef **v33;
  CFErrorRef *v34;

  if (sub_20AED21B4((uint64_t)"VZDataGetNumbers", a1, a2))
    return 0;
  v4 = *(_OWORD **)(a1 + 568);
  if (v4)
    return v4;
  v33 = &v34;
  v34 = a2;
  sub_20B08EE20(a1 + 32, (uint64_t)&v22);
  v5 = v32;
  if (!v32)
  {
    v11 = v22;
    sub_20AECEBD0(&v12, &v23);
    v21 = 1;
    sub_20AF2863C(&v33, (uint64_t)&v11);
    if (v21 && v20)
    {
      if (v19)
      {
        if (v18 < 0)
          operator delete(__p);
        if (v16 < 0)
          operator delete(v15);
      }
      if (v14 && v13 < 0)
        operator delete(v12);
    }
    goto LABEL_28;
  }
  sub_20AF287F4((uint64_t)&v22);
  v6 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  if (v6)
  {
    v4 = v6;
    v6[1] = v22;
    v22 = 0uLL;
    *((_DWORD *)v6 + 8) = 1;
    *(_QWORD *)v6 = &off_24C3F4210;
    *((_QWORD *)v6 + 1) = &unk_24C3F4260;
  }
  else
  {
    LOBYTE(v11) = 0;
    v21 = 0;
    sub_20AF2863C(&v33, (uint64_t)&v11);
    if (v21 && v20)
    {
      if (v19)
      {
        if (v18 < 0)
          operator delete(__p);
        if (v16 < 0)
          operator delete(v15);
      }
      v4 = 0;
      if (!v14 || (v13 & 0x80000000) == 0)
        goto LABEL_28;
      operator delete(v12);
    }
    v4 = 0;
  }
LABEL_28:
  if (v32)
  {
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else if (v31)
  {
    if (v30)
    {
      if (v29 < 0)
        operator delete(v28);
      if (v27 < 0)
        operator delete(v26);
    }
    if (v25 && v24 < 0)
      operator delete((void *)v23);
  }
  if (!v5)
    v4 = 0;
  *(_QWORD *)(a1 + 568) = v4;
  return v4;
}

void sub_20AF26CA0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a68;
  uint64_t v68;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  const std::logic_error *exception_ptr;
  const char *v75;
  size_t v76;
  size_t v77;
  void **p_dst;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  const char *v84;
  size_t v85;
  const char *v86;
  std::logic_error_vtbl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (*(_BYTE *)(v68 - 72))
  {
    v71 = *(std::__shared_weak_count **)(v68 - 184);
    if (v71)
    {
      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(p_shared_owners);
      while (__stlxr(v73 - 1, p_shared_owners));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  else if (*(_BYTE *)(v68 - 80))
  {
    if (*(_BYTE *)(v68 - 88))
    {
      if (*(char *)(v68 - 89) < 0)
        operator delete(*(void **)(v68 - 112));
      if (*(char *)(v68 - 121) < 0)
        operator delete(*(void **)(v68 - 144));
    }
    if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
      operator delete(*(void **)(v68 - 176));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v75 = std::logic_error::what(&a10);
    v76 = strlen(v75);
    if (v76 <= 0x7FFFFFFFFFFFFFF7)
    {
      v77 = v76;
      if (v76 >= 0x17)
      {
        v88 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v88 = v76 | 7;
        v89 = v88 + 1;
        p_dst = (void **)operator new(v88 + 1);
        __dst_8 = v77;
        *(_QWORD *)&a38 = v89 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v76;
        p_dst = (void **)&__dst;
        if (!v76)
        {
LABEL_56:
          *((_BYTE *)p_dst + v77) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a68 = a13;
          sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
          *(_BYTE *)(v68 - 72) = 1;
          sub_20AF2863C((CFErrorRef ***)(v68 - 64), v68 - 192);
          if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
          {
            if (*(_BYTE *)(v68 - 88))
            {
              if (*(char *)(v68 - 89) < 0)
                operator delete(*(void **)(v68 - 112));
              if (*(char *)(v68 - 121) < 0)
                operator delete(*(void **)(v68 - 144));
            }
            if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
              operator delete(*(void **)(v68 - 176));
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_107;
        }
      }
      memmove(p_dst, v75, v77);
      goto LABEL_56;
    }
LABEL_106:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v68 - 192) = 0;
    *(_BYTE *)(v68 - 72) = 0;
    sub_20AF2863C((CFErrorRef ***)(v68 - 64), v68 - 192);
    if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
    {
      if (*(_BYTE *)(v68 - 88))
      {
        if (*(char *)(v68 - 89) < 0)
          operator delete(*(void **)(v68 - 112));
        if (*(char *)(v68 - 121) < 0)
          operator delete(*(void **)(v68 - 144));
      }
      if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
        operator delete(*(void **)(v68 - 176));
    }
    __cxa_end_catch();
LABEL_107:
    JUMPOUT(0x20AF26C7CLL);
  }
  v79 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v79);
  a38 = *((_OWORD *)v79 + 1);
  v81 = *((_QWORD *)v79 + 4);
  v80 = *((_QWORD *)v79 + 5);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  a39 = v81;
  a40 = v80;
  if (v80)
  {
    v82 = (unint64_t *)(v80 + 8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  __cxa_begin_catch(a1);
  v84 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v84 = *(const char **)v84;
  v85 = strlen(v84);
  if (v85 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_106;
  v86 = (const char *)v85;
  if (v85 >= 0x17)
  {
    v90 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v90 = v85 | 7;
    v91 = v90 + 1;
    v87 = (std::logic_error_vtbl *)operator new(v90 + 1);
    a10.__imp_.__imp_ = v86;
    a11 = v91 | 0x8000000000000000;
    a10.__vftable = v87;
  }
  else
  {
    HIBYTE(a11) = v85;
    v87 = (std::logic_error_vtbl *)&a10;
    if (!v85)
    {
LABEL_83:
      v86[(_QWORD)v87] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a68 = a13;
      sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
      *(_BYTE *)(v68 - 72) = 1;
      sub_20AF2863C((CFErrorRef ***)(v68 - 64), v68 - 192);
      if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
      {
        if (*(_BYTE *)(v68 - 88))
        {
          if (*(char *)(v68 - 89) < 0)
            operator delete(*(void **)(v68 - 112));
          if (*(char *)(v68 - 121) < 0)
            operator delete(*(void **)(v68 - 144));
        }
        if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
          operator delete(*(void **)(v68 - 176));
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_107;
    }
  }
  memmove(v87, v84, (size_t)v86);
  goto LABEL_83;
}

_OWORD *VZNumbersCreate(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  _OWORD *v4;
  int v5;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  __int128 v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  char v31;
  unsigned __int8 v32;
  CFErrorRef **v33;
  uint64_t v34;

  v33 = (CFErrorRef **)&v34;
  v34 = a4;
  sub_20B08DA68(a1, a2, a3, (uint64_t)&v22);
  v5 = v32;
  if (v32)
  {
    sub_20AF287F4((uint64_t)&v22);
    v6 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
    if (v6)
    {
      v4 = v6;
      v6[1] = v22;
      v22 = 0uLL;
      *((_DWORD *)v6 + 8) = 1;
      *(_QWORD *)v6 = &off_24C3F4210;
      *((_QWORD *)v6 + 1) = &unk_24C3F4260;
      goto LABEL_25;
    }
    LOBYTE(v11) = 0;
    v21 = 0;
    sub_20AF288B4(&v33, (uint64_t)&v11);
    if (!v21 || !v20)
      goto LABEL_24;
    if (v19)
    {
      if (v18 < 0)
        operator delete(__p);
      if (v16 < 0)
        operator delete(v15);
    }
    v4 = 0;
    if (v14 && v13 < 0)
    {
      operator delete(v12);
LABEL_24:
      v4 = 0;
    }
  }
  else
  {
    v11 = v22;
    sub_20AECEBD0(&v12, &v23);
    v21 = 1;
    sub_20AF288B4(&v33, (uint64_t)&v11);
    if (v21 && v20)
    {
      if (v19)
      {
        if (v18 < 0)
          operator delete(__p);
        if (v16 < 0)
          operator delete(v15);
      }
      if (v14 && v13 < 0)
        operator delete(v12);
    }
  }
LABEL_25:
  if (v32)
  {
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else if (v31)
  {
    if (v30)
    {
      if (v29 < 0)
        operator delete(v28);
      if (v27 < 0)
        operator delete(v26);
    }
    if (v25 && v24 < 0)
      operator delete((void *)v23);
  }
  if (!v5)
    return 0;
  return v4;
}

void sub_20AF27404(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::logic_error a10, unint64_t a11, char a12, __int128 a13, __int128 a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,void **__dst,size_t __dst_8,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __int16 a65;
  __int16 a67;
  __int128 a68;
  uint64_t v68;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  const std::logic_error *exception_ptr;
  const char *v75;
  size_t v76;
  size_t v77;
  void **p_dst;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  const char *v84;
  size_t v85;
  const char *v86;
  std::logic_error_vtbl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  if ((_BYTE)a67 && (_BYTE)a65)
  {
    if (a63)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a55 < 0)
        operator delete(a50);
    }
    if (a49 && a48 < 0)
      operator delete(a43);
  }
  if (*(_BYTE *)(v68 - 72))
  {
    v71 = *(std::__shared_weak_count **)(v68 - 184);
    if (v71)
    {
      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(p_shared_owners);
      while (__stlxr(v73 - 1, p_shared_owners));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  else if (*(_BYTE *)(v68 - 80))
  {
    if (*(_BYTE *)(v68 - 88))
    {
      if (*(char *)(v68 - 89) < 0)
        operator delete(*(void **)(v68 - 112));
      if (*(char *)(v68 - 121) < 0)
        operator delete(*(void **)(v68 - 144));
    }
    if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
      operator delete(*(void **)(v68 - 176));
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(a1);
    std::logic_error::logic_error(&a10, exception_ptr);
    a10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_begin_catch(a1);
    v75 = std::logic_error::what(&a10);
    v76 = strlen(v75);
    if (v76 <= 0x7FFFFFFFFFFFFFF7)
    {
      v77 = v76;
      if (v76 >= 0x17)
      {
        v88 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v88 = v76 | 7;
        v89 = v88 + 1;
        p_dst = (void **)operator new(v88 + 1);
        __dst_8 = v77;
        *(_QWORD *)&a38 = v89 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        BYTE7(a38) = v76;
        p_dst = (void **)&__dst;
        if (!v76)
        {
LABEL_56:
          *((_BYTE *)p_dst + v77) = 0;
          BYTE8(a38) = 1;
          sub_20B099E24((__int128 *)&__dst, (uint64_t)&a13);
          a68 = a13;
          sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
          *(_BYTE *)(v68 - 72) = 1;
          sub_20AF288B4((CFErrorRef ***)(v68 - 64), v68 - 192);
          if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
          {
            if (*(_BYTE *)(v68 - 88))
            {
              if (*(char *)(v68 - 89) < 0)
                operator delete(*(void **)(v68 - 112));
              if (*(char *)(v68 - 121) < 0)
                operator delete(*(void **)(v68 - 144));
            }
            if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
              operator delete(*(void **)(v68 - 176));
          }
          if ((_BYTE)a35)
          {
            if (a33)
            {
              if (a32 < 0)
                operator delete(a27);
              if (a25 < 0)
                operator delete(a20);
            }
            if (a19 && a18 < 0)
              operator delete((void *)a14);
          }
          if (BYTE8(a38))
          {
            if (SBYTE7(a38) < 0)
              operator delete(__dst);
          }
          MEMORY[0x20BD35020](&a10);
          __cxa_end_catch();
          goto LABEL_107;
        }
      }
      memmove(p_dst, v75, v77);
      goto LABEL_56;
    }
LABEL_106:
    sub_20AEC0138();
  }
  if (a2 != 2)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)(v68 - 192) = 0;
    *(_BYTE *)(v68 - 72) = 0;
    sub_20AF288B4((CFErrorRef ***)(v68 - 64), v68 - 192);
    if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
    {
      if (*(_BYTE *)(v68 - 88))
      {
        if (*(char *)(v68 - 89) < 0)
          operator delete(*(void **)(v68 - 112));
        if (*(char *)(v68 - 121) < 0)
          operator delete(*(void **)(v68 - 144));
      }
      if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
        operator delete(*(void **)(v68 - 176));
    }
    __cxa_end_catch();
LABEL_107:
    JUMPOUT(0x20AF273E4);
  }
  v79 = __cxa_get_exception_ptr(a1);
  std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v79);
  a38 = *((_OWORD *)v79 + 1);
  v81 = *((_QWORD *)v79 + 4);
  v80 = *((_QWORD *)v79 + 5);
  __dst = (void **)(MEMORY[0x24BEDB878] + 16);
  a39 = v81;
  a40 = v80;
  if (v80)
  {
    v82 = (unint64_t *)(v80 + 8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  __cxa_begin_catch(a1);
  v84 = (const char *)(a39 + 48);
  if (*(char *)(a39 + 71) < 0)
    v84 = *(const char **)v84;
  v85 = strlen(v84);
  if (v85 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_106;
  v86 = (const char *)v85;
  if (v85 >= 0x17)
  {
    v90 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v90 = v85 | 7;
    v91 = v90 + 1;
    v87 = (std::logic_error_vtbl *)operator new(v90 + 1);
    a10.__imp_.__imp_ = v86;
    a11 = v91 | 0x8000000000000000;
    a10.__vftable = v87;
  }
  else
  {
    HIBYTE(a11) = v85;
    v87 = (std::logic_error_vtbl *)&a10;
    if (!v85)
    {
LABEL_83:
      v86[(_QWORD)v87] = 0;
      a12 = 1;
      sub_20B09A738((__int128 *)&a10, (uint64_t)&a13);
      a68 = a13;
      sub_20AECEBD0((_BYTE *)(v68 - 176), &a14);
      *(_BYTE *)(v68 - 72) = 1;
      sub_20AF288B4((CFErrorRef ***)(v68 - 64), v68 - 192);
      if (*(_BYTE *)(v68 - 72) && *(_BYTE *)(v68 - 80))
      {
        if (*(_BYTE *)(v68 - 88))
        {
          if (*(char *)(v68 - 89) < 0)
            operator delete(*(void **)(v68 - 112));
          if (*(char *)(v68 - 121) < 0)
            operator delete(*(void **)(v68 - 144));
        }
        if (*(_BYTE *)(v68 - 152) && *(char *)(v68 - 153) < 0)
          operator delete(*(void **)(v68 - 176));
      }
      if ((_BYTE)a35)
      {
        if (a33)
        {
          if (a32 < 0)
            operator delete(a27);
          if (a25 < 0)
            operator delete(a20);
        }
        if (a19 && a18 < 0)
          operator delete((void *)a14);
      }
      if (a12 && SHIBYTE(a11) < 0)
        operator delete(a10.__vftable);
      std::__fs::filesystem::filesystem_error::~filesystem_error((std::__fs::filesystem::filesystem_error *)&__dst);
      __cxa_end_catch();
      goto LABEL_107;
    }
  }
  memmove(v87, v84, (size_t)v86);
  goto LABEL_83;
}

uint64_t VZNumbersGetBytePtr(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF266D0((uint64_t)"VZNumbersGetBytePtr", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(**(_QWORD **)(a1 + 16) + 48);
  return result;
}

uint64_t VZNumbersGetCount(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF266D0((uint64_t)"VZNumbersGetCount", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(**(_QWORD **)(a1 + 16) + 56);
  return result;
}

uint64_t VZNumbersGetByteCount(uint64_t a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_20AF266D0((uint64_t)"VZNumbersGetByteCount", a1, 0);
  result = 0;
  if (!v2)
    return *(_QWORD *)(**(_QWORD **)(a1 + 16) + 40);
  return result;
}

uint64_t VZNumbersGetValueType(uint64_t a1)
{
  if (sub_20AF266D0((uint64_t)"VZNumbersGetValueType", a1, 0))
    return 255;
  else
    return ***(unsigned __int8 ***)(a1 + 16);
}

uint64_t sub_20AF27A70(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 32);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_20AF27A88(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(result + 32);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
  return result;
}

uint64_t sub_20AF27AB0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254639168);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254639168))
    return qword_254639160;
  qword_254639160 = sub_20AECB130();
  __cxa_guard_release(&qword_254639168);
  return qword_254639160;
}

_QWORD *sub_20AF27B10(uint64_t a1, void *lpsrc, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *result;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 *v20;
  _QWORD v21[3];
  char v22;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C3F21C0, (const struct __class_type_info *)&unk_24C3F42A8, 0);
  if (result)
  {
    v17 = (unsigned __int8 **)result[2];
    v18 = **(unsigned __int8 ***)(a1 + 16);
    v19 = *v18;
    v20 = *v17;
    if (v19 == *v20)
    {
      v21[0] = &v22;
      v21[1] = v18;
      v21[2] = v20;
      return (_QWORD *)sub_20B43E450(v19, (uint64_t)v21);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFTypeRef sub_20AF27BE4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  size_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  char v21;
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  void *__dst[2];
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  sub_20AF280EC();
  v26 = a1;
  v2 = operator new();
  *(_QWORD *)(v2 + 272) = 0;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  sub_20AEC0BD8(v2);
  v27 = (_QWORD *)v2;
  sub_20B43D880((_QWORD *)(v2 + 16), *(unsigned __int8 ***)(a1 + 16));
  v3 = *(_DWORD *)(v2 + 120);
  if ((v3 & 0x10) != 0)
  {
    v6 = *(_QWORD *)(v2 + 112);
    v7 = *(_QWORD *)(v2 + 72);
    if (v6 < v7)
    {
      *(_QWORD *)(v2 + 112) = v7;
      v6 = v7;
    }
    v8 = *(const void **)(v2 + 64);
    v4 = v6 - (_QWORD)v8;
    if (v6 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      HIBYTE(v25) = 0;
      v5 = __dst;
      goto LABEL_14;
    }
    v8 = *(const void **)(v2 + 40);
    v4 = *(_QWORD *)(v2 + 56) - (_QWORD)v8;
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20AEC0138();
  }
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v5 = (void **)operator new(v9 + 1);
    __dst[1] = (void *)v4;
    v25 = v10 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_13;
  }
  HIBYTE(v25) = v4;
  v5 = __dst;
  if (v4)
LABEL_13:
    memmove(v5, v8, v4);
LABEL_14:
  *((_BYTE *)v5 + v4) = 0;
  v11 = v27;
  if (v27)
  {
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *v27 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)((char *)v11 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    v11[3] = MEMORY[0x24BEDB848] + 16;
    v11[2] = v14;
    if (*((char *)v11 + 111) < 0)
      operator delete((void *)v11[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v11 + 16);
    MEMORY[0x20BD3583C](v11, 0x10B2C40EED050F3);
  }
  sub_20AED55DC("<", (uint64_t)&xmmword_2546391D0, (uint64_t)" ", &v26, (uint64_t)">", (uint64_t)__dst);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst[0]);
  sub_20B4EE2F0((uint64_t)&__p, (CFStringRef *)&cf);
  v15 = cf;
  if (cf)
    CFRetain(cf);
  v16 = v23;
  if (!v23)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if ((v21 & 0x80000000) == 0)
      return v15;
  }
  else
  {
LABEL_26:
    if ((v21 & 0x80000000) == 0)
      return v15;
  }
  operator delete(__p);
  return v15;
}

uint64_t sub_20AF27E8C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  const void *v32[2];
  char v33;
  uint64_t v34;

  sub_20AEC147C((uint64_t)&v34);
  if (v33 < 0)
    operator delete((void *)v32[0]);
  __cxa_begin_catch(a1);
  sub_20AF280EC();
  sub_20AEC0D64(v32, "failed to create description");
  sub_20AECD224((std::string::size_type)&xmmword_2546391D0, v32, 0);
  if (v33 < 0)
    operator delete((void *)v32[0]);
  __cxa_end_catch();
  return 0;
}

uint64_t sub_20AF27F60(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 32));
}

void sub_20AF27F6C()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254639178);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254639178))
  {
    sub_20AF280EC();
    v1 = byte_2546391E7;
    if (byte_2546391E7 >= 0)
      v2 = byte_2546391E7;
    else
      v2 = *((_QWORD *)&xmmword_2546391D0 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_2546391C0 = v2 + 6;
      unk_2546391C8 = v6 | 0x8000000000000000;
      qword_2546391B8 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_2546391C0 = 0;
      unk_2546391C8 = 0;
      qword_2546391B8 = 0x2074736E6F63;
      byte_2546391CF = v2 + 6;
      v4 = (char *)&qword_2546391B8 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2546391B8, &dword_20AEBB000);
        __cxa_guard_release(&qword_254639178);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_2546391D0;
    else
      v8 = (__int128 *)xmmword_2546391D0;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20AF280D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254639178);
  _Unwind_Resume(a1);
}

void sub_20AF280EC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254639180);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254639180))
  {
    sub_20AF281A4();
    if (byte_254639217 < 0)
    {
      sub_20AEC60F4(&xmmword_2546391D0, (void *)xmmword_254639200, *((unint64_t *)&xmmword_254639200 + 1));
    }
    else
    {
      xmmword_2546391D0 = xmmword_254639200;
      unk_2546391E0 = unk_254639210;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546391D0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254639180);
  }
}

void sub_20AF2818C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254639180);
  _Unwind_Resume(a1);
}

void sub_20AF281A4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254639188);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254639188))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = VZNumbers]", qword_2546391E8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546391E8, &dword_20AEBB000);
    __cxa_guard_release(&qword_254639188);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254639190);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254639190))
    {
      sub_20B531658((uint64_t)qword_2546391E8, (uint64_t)&xmmword_254639200);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254639200, &dword_20AEBB000);
      __cxa_guard_release(&qword_254639190);
    }
  }
}

void sub_20AF28274(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254639190);
  _Unwind_Resume(a1);
}

void sub_20AF2828C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254639188);
  _Unwind_Resume(a1);
}

void sub_20AF282A4(CFErrorRef ***a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  __int128 *v6;
  __int128 v7;
  void **v8;
  void **v9;
  void *v10;
  int v11;
  size_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _BYTE v18[16];
  void *__p;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  char v28;
  void *v29;
  void **v30;
  __int128 __dst;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20AED5104();
  v5 = atomic_load((unsigned __int8 *)&qword_254639198);
  if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254639198))
    goto LABEL_2;
  sub_20AF27F6C();
  v11 = byte_2546391CF;
  if (byte_2546391CF >= 0)
    v12 = byte_2546391CF;
  else
    v12 = qword_2546391C0;
  v13 = v12 + 1;
  if (v12 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    v14 = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&xmmword_254639218 + 1) = v12 + 1;
    unk_254639228 = v16 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254639218 = v14;
    goto LABEL_43;
  }
  v14 = &xmmword_254639218;
  unk_254639228 = 0;
  xmmword_254639218 = 0uLL;
  byte_25463922F = v12 + 1;
  if (v12)
  {
LABEL_43:
    if (v11 >= 0)
      v17 = &qword_2546391B8;
    else
      v17 = (uint64_t *)qword_2546391B8;
    memmove(v14, v17, v12);
  }
  *(_WORD *)((char *)v14 + v12) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254639218, &dword_20AEBB000);
  __cxa_guard_release(&qword_254639198);
LABEL_2:
  if (byte_25463922F < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_254639218, *((unint64_t *)&xmmword_254639218 + 1));
  }
  else
  {
    __dst = xmmword_254639218;
    v32 = unk_254639228;
  }
  v6 = sub_20AED3F9C();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v33, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v34 = *((_QWORD *)v6 + 2);
    v33 = v7;
  }
  sub_20AEC7620(&v29, (uint64_t)&__dst, 2uLL);
  sub_20AECF9B0(v18, a2);
  sub_20AECD798(v4, (__int128 **)&v29, (uint64_t)v18, **a1);
  if (!v28 || !v27)
    goto LABEL_16;
  if (!v26)
    goto LABEL_13;
  if ((v25 & 0x80000000) == 0)
  {
    if ((v23 & 0x80000000) == 0)
      goto LABEL_13;
LABEL_30:
    operator delete(v22);
    if (!v21)
      goto LABEL_16;
    goto LABEL_14;
  }
  operator delete(v24);
  if (v23 < 0)
    goto LABEL_30;
LABEL_13:
  if (!v21)
    goto LABEL_16;
LABEL_14:
  if (v20 < 0)
    operator delete(__p);
LABEL_16:
  v8 = (void **)v29;
  if (v29)
  {
    v9 = v30;
    v10 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = v29;
    }
    v30 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v33);
  if (SHIBYTE(v32) < 0)
    goto LABEL_28;
}

